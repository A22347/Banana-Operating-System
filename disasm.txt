
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 7f 00 00       	call   c0007f23 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 35 c2 01 00       	call   c001c25a <_init>
c0000025:	c3                   	ret    
c0000026:	bb f6 cc 01 c0       	mov    ebx,0xc001ccf6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 cd 01 c0    	cmp    ebx,0xc001cd00
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 f8 01 c0       	mov    eax,0xc001f818
c0000049:	3d 18 f8 01 c0       	cmp    eax,0xc001f818
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 f8 01 c0       	push   0xc001f818
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 f8 01 c0       	mov    eax,0xc001f818
c0000075:	2d 18 f8 01 c0       	sub    eax,0xc001f818
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 f8 01 c0       	push   0xc001f818
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 fa 01 c0 00 	cmp    BYTE PTR ds:0xc001fa40,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 cd 01 c0       	mov    ebx,0xc001cd08
c00000bb:	81 eb 04 cd 01 c0    	sub    ebx,0xc001cd04
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 cd 01 c0       	mov    esi,0xc001cd04
c00000ca:	a1 44 fa 01 c0       	mov    eax,ds:0xc001fa44
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 fa 01 c0       	mov    ds:0xc001fa44,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 fa 01 c0       	mov    eax,ds:0xc001fa44
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 f8 01 c0       	push   0xc001f818
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 fa 01 c0 01 	mov    BYTE PTR ds:0xc001fa40,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 fa 01 c0       	push   0xc001fa48
c000012c:	68 18 f8 01 c0       	push   0xc001f818
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 60 30 01 00       	call   c0013330 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 04 a7 00 00       	call   c000a9ec <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 3e 30 01 00       	call   c0013330 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 0f 35 01 00       	call   c0013820 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 5e 3b 01 00       	call   c0013e78 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 40 08 02 c0 	lgdtd  ds:0xc0020840
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 8c 6b 00 00       	jmp    c0006f2e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 60 fa 01 c0       	mov    ds:0xc001fa60,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 60 fa 01 c0    	mov    DWORD PTR ds:0xc001fa60,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 60 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa60
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe32e0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 20 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe32e0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 20 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe32e0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 20 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe32e0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 20 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe32e0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 80 fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fa80
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 80 fa 01 c0    	mov    DWORD PTR ds:0xc001fa80,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 84 fa 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe057c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 84 fa 01 c0 	mov    DWORD PTR [eax*4-0x3ffe057c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 80 fa 01 c0    	mov    DWORD PTR ds:0xc001fa80,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 ac fa 01 c0    	cmp    DWORD PTR ds:0xc001faac,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d bc fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fabc
c0000d5d:	c7 42 0c b4 fa 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fab4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 bc fa 01 c0    	mov    DWORD PTR ds:0xc001fabc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 ac fa 01 c0    	mov    DWORD PTR ds:0xc001faac,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 80 fa 01 c0 02 	test   BYTE PTR ds:0xc001fa80,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 f6 6e 00 00       	call   c0007d34 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 38 6e 00 00       	call   c0007d34 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 22 6e 00 00       	call   c0007d34 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 fe 6d 00 00       	call   c0007d34 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 80 fa 01 c0    	mov    edi,DWORD PTR ds:0xc001fa80
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 84 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe057c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 84 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe057c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 b4 fa 01 c0 	lea    edx,[eax*8-0x3ffe054c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d c0 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fac0
c00010df:	81 fb b4 fa 01 c0    	cmp    ebx,0xc001fab4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d b4 fa 01 c0       	cmp    eax,0xc001fab4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d b0 fa 01 c0    	cmp    DWORD PTR ds:0xc001fab0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 bc fa 01 c0       	mov    ds:0xc001fabc,eax
c000111b:	a3 c0 fa 01 c0       	mov    ds:0xc001fac0,eax
c0001120:	a3 b0 fa 01 c0       	mov    ds:0xc001fab0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 b4 fa 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fab4
c000112e:	c7 40 0c b4 fa 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fab4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 c0 fa 01 c0       	mov    ds:0xc001fac0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 b4 fa 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fab4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 78 fa 01 c0 	lea    ebp,[edx*4-0x3ffe0588]
c000117f:	8b 14 95 80 fa 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0580]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 80 fa 01 c0 	lea    ecx,[edx*4-0x3ffe0580]
c000119a:	8b 14 95 80 fa 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0580]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd b4 fd 01 c0 	or     DWORD PTR [edi*4-0x3ffe024c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 b4 fa 01 c0 	lea    eax,[eax*8-0x3ffe054c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d bc fa 01 c0    	mov    DWORD PTR ds:0xc001fabc,ecx
c0001254:	89 0d c0 fa 01 c0    	mov    DWORD PTR ds:0xc001fac0,ecx
c000125a:	c7 41 08 b4 fa 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fab4
c0001261:	c7 41 0c b4 fa 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fab4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd ac fa 01 c0 	lea    edx,[ecx*8-0x3ffe0554]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d b4 fd 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe024c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d b4 fd 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe024c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 ac fa 01 c0 	lea    edx,[eax*4-0x3ffe0554]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d b4 fd 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe024c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d bc fa 01 c0    	mov    DWORD PTR ds:0xc001fabc,edi
c0001327:	89 3d c0 fa 01 c0    	mov    DWORD PTR ds:0xc001fac0,edi
c000132d:	c7 47 08 b4 fa 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fab4
c0001334:	c7 47 0c b4 fa 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fab4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d b0 fa 01 c0    	mov    DWORD PTR ds:0xc001fab0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 ac fa 01 c0       	mov    eax,ds:0xc001faac
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d ac fa 01 c0    	mov    DWORD PTR ds:0xc001faac,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 80 fa 01 c0       	mov    edx,0xc001fa80
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 80 fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa80,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d d4 fd 01 c0    	mov    ebx,DWORD PTR ds:0xc001fdd4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 d4 fd 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fdd4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d d4 fd 01 c0    	mov    DWORD PTR ds:0xc001fdd4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 ac fa 01 c0    	cmp    DWORD PTR ds:0xc001faac,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d ac fa 01 c0    	mov    DWORD PTR ds:0xc001faac,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 80 fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa80,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 dc fd 01 c0    	push   DWORD PTR ds:0xc001fddc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 80 fa 01 c0 00 	cmp    DWORD PTR ds:0xc001fa80,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 dc fd 01 c0       	mov    eax,ds:0xc001fddc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d ac fa 01 c0 00 	cmp    DWORD PTR ds:0xc001faac,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 ac fa 01 c0       	mov    eax,ds:0xc001faac
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 84 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe057c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 b4 fa 01 c0       	mov    eax,0xc001fab4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d ac fd 01 c0       	cmp    eax,0xc001fdac
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 e8 fd 01 c0       	mov    eax,ds:0xc001fde8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 d0 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fdd0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 e4 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fde4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 f4 fd 01 c0    	mov    esi,DWORD PTR ds:0xc001fdf4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 80 fa 01 c0       	mov    eax,0xc001fa80
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 24 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe31dc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 80 fa 01 c0       	mov    eax,ds:0xc001fa80
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 80 fa 01 c0       	mov    ds:0xc001fa80,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d c4 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d c8 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d cc fd 01 c0    	mov    DWORD PTR ds:0xc001fdcc,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 d4 fd 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fdd4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 60 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1a0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 96 53 01 00       	jmp    c00170a0 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 60 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1a0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 c4 53 01 00       	jmp    c00170e4 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 60 3e 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc1a0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 e9 53 01 00       	jmp    c0017128 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 80 cf 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3080]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 80 cf 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3080]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 88 ed 01 c0       	mov    edx,0xc001ed88
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 3c ce 01 c0       	mov    edx,0xc001ce3c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 20 fe 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe01e0]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 00 fe 01 c0    	mov    ax,ds:0xc001fe00
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 00 fe 01 c0    	mov    ds:0xc001fe00,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 42 ce 01 c0       	mov    eax,0xc001ce42
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 00 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3100]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 4b ce 01 c0       	mov    eax,0xc001ce4b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 80 cf 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3080]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 20 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe01e0]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 20 fe 01 c0 	mov    DWORD PTR [edx*4-0x3ffe01e0],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 d0 ce 01 c0       	mov    eax,0xc001ced0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 20 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe01e0]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb c0 ce 01 c0       	mov    ebx,0xc001cec0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba a0 ce 01 c0       	mov    edx,0xc001cea0
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba b0 ce 01 c0       	mov    edx,0xc001ceb0
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 52 ce 01 c0       	mov    edx,0xc001ce52
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 5e ce 01 c0       	mov    edx,0xc001ce5e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 72 ce 01 c0       	mov    edx,0xc001ce72
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 c2 23 00 00       	call   c0007e5d <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 ba 23 00 00       	call   c0007e6d <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c a0 d2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d2a0
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 a0 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d2a0
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 a0 d0 01 c0       	mov    eax,0xc001d0a0
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 e0 cf 01 c0       	mov    eax,0xc001cfe0
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 a0 cf 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3060]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 a0 f9 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0660]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 00 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0600]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 50 ff 01 c0       	mov    eax,0xc001ff50
c0005ed7:	ba 90 08 02 c0       	mov    edx,0xc0020890
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 e0 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9e0
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 fc 18 01 00       	call   c001797c <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 00 fa 01 c0       	mov    eax,0xc001fa00
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 a0 f9 01 c0       	mov    eax,0xc001f9a0
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d 34 08 02 c0 00 	cmp    DWORD PTR ds:0xc0020834,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 a0 d3 01 c0       	push   0xc001d3a0
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 00 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0600]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d 34 08 02 c0    	mov    edi,DWORD PTR ds:0xc0020834
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 00 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0600]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	57                   	push   edi
c0006503:	56                   	push   esi
c0006504:	53                   	push   ebx
c0006505:	b9 00 08 02 c0       	mov    ecx,0xc0020800
c000650a:	ba 00 00 00 00       	mov    edx,0x0
c000650f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006513:	e8 f0 fe ff ff       	call   c0006408 <find_object_path>
c0006518:	85 c0                	test   eax,eax
c000651a:	0f 84 93 00 00 00    	je     c00065b3 <iso_open+0xb1>
c0006520:	89 c6                	mov    esi,eax
c0006522:	83 3d c0 fe 01 c0 00 	cmp    DWORD PTR ds:0xc001fec0,0x0
c0006529:	0f 84 92 00 00 00    	je     c00065c1 <iso_open+0xbf>
c000652f:	ba 54 ff 01 c0       	mov    edx,0xc001ff54
c0006534:	bb 01 00 00 00       	mov    ebx,0x1
c0006539:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000653c:	74 13                	je     c0006551 <iso_open+0x4f>
c000653e:	43                   	inc    ebx
c000653f:	81 c2 94 00 00 00    	add    edx,0x94
c0006545:	83 fb 10             	cmp    ebx,0x10
c0006548:	75 ef                	jne    c0006539 <iso_open+0x37>
c000654a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000654f:	eb 5c                	jmp    c00065ad <iso_open+0xab>
c0006551:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006554:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006557:	c7 04 85 c0 fe 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe0140],0xffffffff
c0006562:	83 fb 0f             	cmp    ebx,0xf
c0006565:	7f 53                	jg     c00065ba <iso_open+0xb8>
c0006567:	8d 46 02             	lea    eax,[esi+0x2]
c000656a:	e8 0f f9 ff ff       	call   c0005e7e <iso_733>
c000656f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006572:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006575:	c1 e2 02             	shl    edx,0x2
c0006578:	8d ba c0 fe 01 c0    	lea    edi,[edx-0x3ffe0140]
c000657e:	89 82 c0 fe 01 c0    	mov    DWORD PTR [edx-0x3ffe0140],eax
c0006584:	c7 82 c4 fe 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe013c],0x0
c000658e:	c7 82 c8 fe 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe0138],0x0
c0006598:	8d 46 0a             	lea    eax,[esi+0xa]
c000659b:	e8 de f8 ff ff       	call   c0005e7e <iso_733>
c00065a0:	89 47 0c             	mov    DWORD PTR [edi+0xc],eax
c00065a3:	c7 87 90 00 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x90],0x0
c00065ad:	89 d8                	mov    eax,ebx
c00065af:	5b                   	pop    ebx
c00065b0:	5e                   	pop    esi
c00065b1:	5f                   	pop    edi
c00065b2:	c3                   	ret    
c00065b3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065b8:	eb f3                	jmp    c00065ad <iso_open+0xab>
c00065ba:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065bf:	eb ec                	jmp    c00065ad <iso_open+0xab>
c00065c1:	c7 05 c0 fe 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fec0,0xffffffff
c00065cb:	bb 00 00 00 00       	mov    ebx,0x0
c00065d0:	eb 95                	jmp    c0006567 <iso_open+0x65>

c00065d2 <iso_close>:
c00065d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065d6:	83 f8 0f             	cmp    eax,0xf
c00065d9:	7f 11                	jg     c00065ec <iso_close+0x1a>
c00065db:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065de:	8d 04 90             	lea    eax,[eax+edx*4]
c00065e1:	c7 04 85 c0 fe 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe0140],0x0
c00065ec:	c3                   	ret    

c00065ed <iso_read>:
c00065ed:	55                   	push   ebp
c00065ee:	57                   	push   edi
c00065ef:	56                   	push   esi
c00065f0:	53                   	push   ebx
c00065f1:	83 ec 1c             	sub    esp,0x1c
c00065f4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065f8:	83 fd 0f             	cmp    ebp,0xf
c00065fb:	0f 8f ba 01 00 00    	jg     c00067bb <iso_read+0x1ce>
c0006601:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006605:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006609:	83 3c 85 c0 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0140],0x0
c0006611:	0f 84 b0 01 00 00    	je     c00067c7 <iso_read+0x1da>
c0006617:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661b:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661f:	8b 04 85 50 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe00b0]
c0006626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000662a:	85 c0                	test   eax,eax
c000662c:	0f 85 a1 01 00 00    	jne    c00067d3 <iso_read+0x1e6>
c0006632:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006637:	0f 84 71 01 00 00    	je     c00067ae <iso_read+0x1c1>
c000663d:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006641:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006645:	8d 14 85 c0 fe 01 c0 	lea    edx,[eax*4-0x3ffe0140]
c000664c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c000664f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006652:	29 c2                	sub    edx,eax
c0006654:	89 d1                	mov    ecx,edx
c0006656:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000665a:	76 04                	jbe    c0006660 <iso_read+0x73>
c000665c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006660:	85 c9                	test   ecx,ecx
c0006662:	0f 84 42 01 00 00    	je     c00067aa <iso_read+0x1bd>
c0006668:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c000666f:	e9 b7 00 00 00       	jmp    c000672b <iso_read+0x13e>
c0006674:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000667a:	e9 e9 00 00 00       	jmp    c0006768 <iso_read+0x17b>
c000667f:	ba 20 00 00 00       	mov    edx,0x20
c0006684:	e9 e2 00 00 00       	jmp    c000676b <iso_read+0x17e>
c0006689:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000668d:	39 ca                	cmp    edx,ecx
c000668f:	7e 04                	jle    c0006695 <iso_read+0xa8>
c0006691:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006695:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006698:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000669c:	c1 e8 0b             	shr    eax,0xb
c000669f:	03 04 95 c0 fe 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0140]
c00066a6:	e8 87 fa ff ff       	call   c0006132 <bdread>
c00066ab:	85 c0                	test   eax,eax
c00066ad:	0f 88 2c 01 00 00    	js     c00067df <iso_read+0x1f2>
c00066b3:	8b 14 85 a0 f9 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0660]
c00066ba:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066bd:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066c1:	8b 04 85 c8 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0138]
c00066c8:	25 ff 07 00 00       	and    eax,0x7ff
c00066cd:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066db:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066df:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066e3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066e6:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ea:	8d 14 85 c0 fe 01 c0 	lea    edx,[eax*4-0x3ffe0140]
c00066f1:	89 f8                	mov    eax,edi
c00066f3:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c00066f6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066f9:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00066fd:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006701:	0f 84 a7 00 00 00    	je     c00067ae <iso_read+0x1c1>
c0006707:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000670a:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000670e:	8b 14 95 cc fe 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0134]
c0006715:	29 c2                	sub    edx,eax
c0006717:	89 d1                	mov    ecx,edx
c0006719:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000671d:	76 04                	jbe    c0006723 <iso_read+0x136>
c000671f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006723:	85 c9                	test   ecx,ecx
c0006725:	0f 84 83 00 00 00    	je     c00067ae <iso_read+0x1c1>
c000672b:	89 c6                	mov    esi,eax
c000672d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006733:	ba 00 08 00 00       	mov    edx,0x800
c0006738:	29 f2                	sub    edx,esi
c000673a:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006740:	0f 85 43 ff ff ff    	jne    c0006689 <iso_read+0x9c>
c0006746:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000674c:	0f 8e 37 ff ff ff    	jle    c0006689 <iso_read+0x9c>
c0006752:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006758:	0f 8f 21 ff ff ff    	jg     c000667f <iso_read+0x92>
c000675e:	89 ca                	mov    edx,ecx
c0006760:	85 c9                	test   ecx,ecx
c0006762:	0f 88 0c ff ff ff    	js     c0006674 <iso_read+0x87>
c0006768:	c1 fa 0b             	sar    edx,0xb
c000676b:	89 d6                	mov    esi,edx
c000676d:	c1 e6 0b             	shl    esi,0xb
c0006770:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006774:	83 ec 04             	sub    esp,0x4
c0006777:	52                   	push   edx
c0006778:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000677b:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000677f:	c1 e8 0b             	shr    eax,0xb
c0006782:	03 04 95 c0 fe 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0140]
c0006789:	50                   	push   eax
c000678a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000678e:	e8 d1 f8 ff ff       	call   c0006064 <isoReadDiscSector>
c0006793:	83 c4 10             	add    esp,0x10
c0006796:	85 c0                	test   eax,eax
c0006798:	0f 8f 3d ff ff ff    	jg     c00066db <iso_read+0xee>
c000679e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067a8:	eb 09                	jmp    c00067b3 <iso_read+0x1c6>
c00067aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067b2:	99                   	cdq    
c00067b3:	83 c4 1c             	add    esp,0x1c
c00067b6:	5b                   	pop    ebx
c00067b7:	5e                   	pop    esi
c00067b8:	5f                   	pop    edi
c00067b9:	5d                   	pop    ebp
c00067ba:	c3                   	ret    
c00067bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067c5:	eb ec                	jmp    c00067b3 <iso_read+0x1c6>
c00067c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067d1:	eb e0                	jmp    c00067b3 <iso_read+0x1c6>
c00067d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067dd:	eb d4                	jmp    c00067b3 <iso_read+0x1c6>
c00067df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e9:	eb c8                	jmp    c00067b3 <iso_read+0x1c6>

c00067eb <iso_seek>:
c00067eb:	53                   	push   ebx
c00067ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00067f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00067f8:	83 f8 0f             	cmp    eax,0xf
c00067fb:	0f 8f a4 00 00 00    	jg     c00068a5 <iso_seek+0xba>
c0006801:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006804:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006807:	83 3c 9d c0 fe 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0140],0x0
c000680f:	0f 84 9c 00 00 00    	je     c00068b1 <iso_seek+0xc6>
c0006815:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006818:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681b:	83 3c 9d 50 ff 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe00b0],0x0
c0006823:	0f 85 94 00 00 00    	jne    c00068bd <iso_seek+0xd2>
c0006829:	83 fa 01             	cmp    edx,0x1
c000682c:	74 53                	je     c0006881 <iso_seek+0x96>
c000682e:	83 fa 02             	cmp    edx,0x2
c0006831:	74 5d                	je     c0006890 <iso_seek+0xa5>
c0006833:	85 d2                	test   edx,edx
c0006835:	74 0c                	je     c0006843 <iso_seek+0x58>
c0006837:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000683c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006841:	eb 3c                	jmp    c000687f <iso_seek+0x94>
c0006843:	89 0c 9d c8 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0138],ecx
c000684a:	8d 14 c0             	lea    edx,[eax+eax*8]
c000684d:	8d 14 90             	lea    edx,[eax+edx*4]
c0006850:	8b 0c 95 cc fe 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0134]
c0006857:	39 0c 95 c8 fe 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe0138],ecx
c000685e:	76 0d                	jbe    c000686d <iso_seek+0x82>
c0006860:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006863:	8d 14 90             	lea    edx,[eax+edx*4]
c0006866:	89 0c 95 c8 fe 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0138],ecx
c000686d:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006870:	8d 04 90             	lea    eax,[eax+edx*4]
c0006873:	8b 04 85 c8 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0138]
c000687a:	ba 00 00 00 00       	mov    edx,0x0
c000687f:	5b                   	pop    ebx
c0006880:	c3                   	ret    
c0006881:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006884:	8d 14 90             	lea    edx,[eax+edx*4]
c0006887:	01 0c 95 c8 fe 01 c0 	add    DWORD PTR [edx*4-0x3ffe0138],ecx
c000688e:	eb ba                	jmp    c000684a <iso_seek+0x5f>
c0006890:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006893:	8d 14 90             	lea    edx,[eax+edx*4]
c0006896:	8d 14 95 c0 fe 01 c0 	lea    edx,[edx*4-0x3ffe0140]
c000689d:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068a0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068a3:	eb a5                	jmp    c000684a <iso_seek+0x5f>
c00068a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068af:	eb ce                	jmp    c000687f <iso_seek+0x94>
c00068b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068bb:	eb c2                	jmp    c000687f <iso_seek+0x94>
c00068bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c7:	eb b6                	jmp    c000687f <iso_seek+0x94>

c00068c9 <iso_tell>:
c00068c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068cd:	83 f8 0f             	cmp    eax,0xf
c00068d0:	7f 33                	jg     c0006905 <iso_tell+0x3c>
c00068d2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068d5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068d8:	83 3c 95 c0 fe 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0140],0x0
c00068e0:	74 2e                	je     c0006910 <iso_tell+0x47>
c00068e2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068e5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068e8:	83 3c 95 50 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe00b0],0x0
c00068f0:	75 29                	jne    c000691b <iso_tell+0x52>
c00068f2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068f5:	8d 04 90             	lea    eax,[eax+edx*4]
c00068f8:	8b 04 85 c8 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0138]
c00068ff:	ba 00 00 00 00       	mov    edx,0x0
c0006904:	c3                   	ret    
c0006905:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000690a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000690f:	c3                   	ret    
c0006910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006915:	ba ff ff ff ff       	mov    edx,0xffffffff
c000691a:	c3                   	ret    
c000691b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006920:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006925:	c3                   	ret    

c0006926 <iso_total>:
c0006926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000692a:	83 f8 0f             	cmp    eax,0xf
c000692d:	7f 2e                	jg     c000695d <iso_total+0x37>
c000692f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006932:	8d 14 90             	lea    edx,[eax+edx*4]
c0006935:	83 3c 95 c0 fe 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0140],0x0
c000693d:	74 24                	je     c0006963 <iso_total+0x3d>
c000693f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006942:	8d 14 90             	lea    edx,[eax+edx*4]
c0006945:	83 3c 95 50 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe00b0],0x0
c000694d:	75 1a                	jne    c0006969 <iso_total+0x43>
c000694f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006952:	8d 04 90             	lea    eax,[eax+edx*4]
c0006955:	8b 04 85 cc fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0134]
c000695c:	c3                   	ret    
c000695d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006962:	c3                   	ret    
c0006963:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006968:	c3                   	ret    
c0006969:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000696e:	c3                   	ret    

c000696f <fn_postprocess>:
c000696f:	56                   	push   esi
c0006970:	53                   	push   ebx
c0006971:	83 ec 04             	sub    esp,0x4
c0006974:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006978:	8a 06                	mov    al,BYTE PTR [esi]
c000697a:	84 c0                	test   al,al
c000697c:	74 3b                	je     c00069b9 <fn_postprocess+0x4a>
c000697e:	3c 3b                	cmp    al,0x3b
c0006980:	74 37                	je     c00069b9 <fn_postprocess+0x4a>
c0006982:	89 f3                	mov    ebx,esi
c0006984:	83 ec 0c             	sub    esp,0xc
c0006987:	0f be c0             	movsx  eax,al
c000698a:	50                   	push   eax
c000698b:	e8 60 9f ff ff       	call   c00008f0 <tolower>
c0006990:	88 03                	mov    BYTE PTR [ebx],al
c0006992:	43                   	inc    ebx
c0006993:	8a 03                	mov    al,BYTE PTR [ebx]
c0006995:	83 c4 10             	add    esp,0x10
c0006998:	84 c0                	test   al,al
c000699a:	74 04                	je     c00069a0 <fn_postprocess+0x31>
c000699c:	3c 3b                	cmp    al,0x3b
c000699e:	75 e4                	jne    c0006984 <fn_postprocess+0x15>
c00069a0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00069a3:	39 de                	cmp    esi,ebx
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x3e>
c00069a7:	80 7b ff 2e          	cmp    BYTE PTR [ebx-0x1],0x2e
c00069ab:	74 06                	je     c00069b3 <fn_postprocess+0x44>
c00069ad:	83 c4 04             	add    esp,0x4
c00069b0:	5b                   	pop    ebx
c00069b1:	5e                   	pop    esi
c00069b2:	c3                   	ret    
c00069b3:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00069b7:	eb f4                	jmp    c00069ad <fn_postprocess+0x3e>
c00069b9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00069bc:	eb ef                	jmp    c00069ad <fn_postprocess+0x3e>

c00069be <iso_readdir>:
c00069be:	55                   	push   ebp
c00069bf:	57                   	push   edi
c00069c0:	56                   	push   esi
c00069c1:	53                   	push   ebx
c00069c2:	83 ec 1c             	sub    esp,0x1c
c00069c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c9:	83 fe 0f             	cmp    esi,0xf
c00069cc:	0f 8f 7a 02 00 00    	jg     c0006c4c <iso_readdir+0x28e>
c00069d2:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069d5:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d8:	83 3c 85 c0 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0140],0x0
c00069e0:	0f 84 70 02 00 00    	je     c0006c56 <iso_readdir+0x298>
c00069e6:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e9:	8d 04 86             	lea    eax,[esi+eax*4]
c00069ec:	83 3c 85 c4 fe 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe013c],0x0
c00069f4:	0f 84 66 02 00 00    	je     c0006c60 <iso_readdir+0x2a2>
c00069fa:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069fd:	8d 04 86             	lea    eax,[esi+eax*4]
c0006a00:	83 3c 85 50 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe00b0],0x0
c0006a08:	0f 85 5c 02 00 00    	jne    c0006c6a <iso_readdir+0x2ac>
c0006a0e:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a11:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a14:	8b 04 95 c8 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0138]
c0006a1b:	8b 0c 95 cc fe 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0134]
c0006a22:	39 c8                	cmp    eax,ecx
c0006a24:	73 57                	jae    c0006a7d <iso_readdir+0xbf>
c0006a26:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a29:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a2c:	c1 e7 02             	shl    edi,0x2
c0006a2f:	c1 e8 0b             	shr    eax,0xb
c0006a32:	03 87 c0 fe 01 c0    	add    eax,DWORD PTR [edi-0x3ffe0140]
c0006a38:	e8 e2 f6 ff ff       	call   c000611f <biread>
c0006a3d:	85 c0                	test   eax,eax
c0006a3f:	0f 88 2f 02 00 00    	js     c0006c74 <iso_readdir+0x2b6>
c0006a45:	8b 14 85 00 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0600]
c0006a4c:	83 c2 04             	add    edx,0x4
c0006a4f:	8b 87 c8 fe 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe0138]
c0006a55:	89 c3                	mov    ebx,eax
c0006a57:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a5d:	01 d3                	add    ebx,edx
c0006a5f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a61:	84 c9                	test   cl,cl
c0006a63:	75 22                	jne    c0006a87 <iso_readdir+0xc9>
c0006a65:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a6a:	05 00 08 00 00       	add    eax,0x800
c0006a6f:	89 87 c8 fe 01 c0    	mov    DWORD PTR [edi-0x3ffe0138],eax
c0006a75:	3b 87 cc fe 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe0134]
c0006a7b:	72 b2                	jb     c0006a2f <iso_readdir+0x71>
c0006a7d:	b8 00 00 00 00       	mov    eax,0x0
c0006a82:	e9 83 00 00 00       	jmp    c0006b0a <iso_readdir+0x14c>
c0006a87:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a8a:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a8d:	3b 04 bd cc fe 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe0134]
c0006a94:	0f 83 e4 01 00 00    	jae    c0006c7e <iso_readdir+0x2c0>
c0006a9a:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a9e:	75 06                	jne    c0006aa6 <iso_readdir+0xe8>
c0006aa0:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006aa4:	74 6c                	je     c0006b12 <iso_readdir+0x154>
c0006aa6:	83 3d 34 08 02 c0 00 	cmp    DWORD PTR ds:0xc0020834,0x0
c0006aad:	0f 84 9d 00 00 00    	je     c0006b50 <iso_readdir+0x192>
c0006ab3:	31 c9                	xor    ecx,ecx
c0006ab5:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab8:	8d 53 21             	lea    edx,[ebx+0x21]
c0006abb:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006abe:	8d 04 86             	lea    eax,[esi+eax*4]
c0006ac1:	8d 04 85 d8 fe 01 c0 	lea    eax,[eax*4-0x3ffe0128]
c0006ac8:	e8 ba f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006acd:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006ad1:	0f 85 66 01 00 00    	jne    c0006c3d <iso_readdir+0x27f>
c0006ad7:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ada:	e8 9f f3 ff ff       	call   c0005e7e <iso_733>
c0006adf:	ba 00 00 00 00       	mov    edx,0x0
c0006ae4:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae7:	c1 e1 02             	shl    ecx,0x2
c0006aea:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006aed:	8d 3c bd c0 fe 01 c0 	lea    edi,[edi*4-0x3ffe0140]
c0006af4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af7:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006afa:	31 c0                	xor    eax,eax
c0006afc:	8a 03                	mov    al,BYTE PTR [ebx]
c0006afe:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006b01:	01 ce                	add    esi,ecx
c0006b03:	8d 04 b5 d0 fe 01 c0 	lea    eax,[esi*4-0x3ffe0130]
c0006b0a:	83 c4 1c             	add    esp,0x1c
c0006b0d:	5b                   	pop    ebx
c0006b0e:	5e                   	pop    esi
c0006b0f:	5f                   	pop    edi
c0006b10:	5d                   	pop    ebp
c0006b11:	c3                   	ret    
c0006b12:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b18:	01 c8                	add    eax,ecx
c0006b1a:	8d 3c bd c0 fe 01 c0 	lea    edi,[edi*4-0x3ffe0140]
c0006b21:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b24:	89 c1                	mov    ecx,eax
c0006b26:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b2c:	31 db                	xor    ebx,ebx
c0006b2e:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b31:	89 d9                	mov    ecx,ebx
c0006b33:	01 c8                	add    eax,ecx
c0006b35:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b38:	25 ff 07 00 00       	and    eax,0x7ff
c0006b3d:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b40:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b43:	0f 85 5d ff ff ff    	jne    c0006aa6 <iso_readdir+0xe8>
c0006b49:	b8 00 00 00 00       	mov    eax,0x0
c0006b4e:	eb ba                	jmp    c0006b0a <iso_readdir+0x14c>
c0006b50:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b53:	c1 e7 02             	shl    edi,0x2
c0006b56:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b59:	8d 2c 85 d8 fe 01 c0 	lea    ebp,[eax*4-0x3ffe0128]
c0006b60:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b64:	83 ec 04             	sub    esp,0x4
c0006b67:	31 c0                	xor    eax,eax
c0006b69:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b6c:	50                   	push   eax
c0006b6d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b70:	50                   	push   eax
c0006b71:	55                   	push   ebp
c0006b72:	e8 d9 9a ff ff       	call   c0000650 <strncpy>
c0006b77:	31 c0                	xor    eax,eax
c0006b79:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b7c:	01 f7                	add    edi,esi
c0006b7e:	c6 84 b8 d8 fe 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe0128],0x0
c0006b86:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b89:	e8 e1 fd ff ff       	call   c000696f <fn_postprocess>
c0006b8e:	31 c0                	xor    eax,eax
c0006b90:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b93:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b96:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b9c:	29 c5                	sub    ebp,eax
c0006b9e:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006ba2:	83 c4 10             	add    esp,0x10
c0006ba5:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba9:	74 25                	je     c0006bd0 <iso_readdir+0x212>
c0006bab:	83 ed 21             	sub    ebp,0x21
c0006bae:	83 fd 03             	cmp    ebp,0x3
c0006bb1:	0f 8e 16 ff ff ff    	jle    c0006acd <iso_readdir+0x10f>
c0006bb7:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bba:	48                   	dec    eax
c0006bbb:	3c 01                	cmp    al,0x1
c0006bbd:	0f 87 0a ff ff ff    	ja     c0006acd <iso_readdir+0x10f>
c0006bc3:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bce:	eb 23                	jmp    c0006bf3 <iso_readdir+0x235>
c0006bd0:	47                   	inc    edi
c0006bd1:	83 ed 22             	sub    ebp,0x22
c0006bd4:	eb d8                	jmp    c0006bae <iso_readdir+0x1f0>
c0006bd6:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bda:	29 c5                	sub    ebp,eax
c0006bdc:	01 c7                	add    edi,eax
c0006bde:	83 fd 03             	cmp    ebp,0x3
c0006be1:	0f 8e e6 fe ff ff    	jle    c0006acd <iso_readdir+0x10f>
c0006be7:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bea:	48                   	dec    eax
c0006beb:	3c 01                	cmp    al,0x1
c0006bed:	0f 87 da fe ff ff    	ja     c0006acd <iso_readdir+0x10f>
c0006bf3:	83 ec 04             	sub    esp,0x4
c0006bf6:	6a 02                	push   0x2
c0006bf8:	68 a0 d3 01 c0       	push   0xc001d3a0
c0006bfd:	57                   	push   edi
c0006bfe:	e8 7d 9b ff ff       	call   c0000780 <strncmp>
c0006c03:	83 c4 10             	add    esp,0x10
c0006c06:	85 c0                	test   eax,eax
c0006c08:	75 cc                	jne    c0006bd6 <iso_readdir+0x218>
c0006c0a:	83 ec 04             	sub    esp,0x4
c0006c0d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c11:	83 e8 05             	sub    eax,0x5
c0006c14:	50                   	push   eax
c0006c15:	8d 47 05             	lea    eax,[edi+0x5]
c0006c18:	50                   	push   eax
c0006c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c1d:	e8 2e 9a ff ff       	call   c0000650 <strncpy>
c0006c22:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c2a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c2d:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c30:	c6 84 90 d3 fe 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe012d],0x0
c0006c38:	83 c4 10             	add    esp,0x10
c0006c3b:	eb 99                	jmp    c0006bd6 <iso_readdir+0x218>
c0006c3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c42:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c47:	e9 98 fe ff ff       	jmp    c0006ae4 <iso_readdir+0x126>
c0006c4c:	b8 00 00 00 00       	mov    eax,0x0
c0006c51:	e9 b4 fe ff ff       	jmp    c0006b0a <iso_readdir+0x14c>
c0006c56:	b8 00 00 00 00       	mov    eax,0x0
c0006c5b:	e9 aa fe ff ff       	jmp    c0006b0a <iso_readdir+0x14c>
c0006c60:	b8 00 00 00 00       	mov    eax,0x0
c0006c65:	e9 a0 fe ff ff       	jmp    c0006b0a <iso_readdir+0x14c>
c0006c6a:	b8 00 00 00 00       	mov    eax,0x0
c0006c6f:	e9 96 fe ff ff       	jmp    c0006b0a <iso_readdir+0x14c>
c0006c74:	b8 00 00 00 00       	mov    eax,0x0
c0006c79:	e9 8c fe ff ff       	jmp    c0006b0a <iso_readdir+0x14c>
c0006c7e:	b8 00 00 00 00       	mov    eax,0x0
c0006c83:	e9 82 fe ff ff       	jmp    c0006b0a <iso_readdir+0x14c>

c0006c88 <iso_reset>:
c0006c88:	e8 45 f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c8d:	e8 3a f2 ff ff       	call   c0005ecc <bclear>
c0006c92:	b8 00 00 00 00       	mov    eax,0x0
c0006c97:	c3                   	ret    

c0006c98 <init_percd>:
c0006c98:	57                   	push   edi
c0006c99:	56                   	push   esi
c0006c9a:	53                   	push   ebx
c0006c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9f:	a2 e0 f9 01 c0       	mov    ds:0xc001f9e0,al
c0006ca4:	e8 df ff ff ff       	call   c0006c88 <iso_reset>
c0006ca9:	c7 05 34 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020834,0x0
c0006cb3:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb8:	eb 06                	jmp    c0006cc0 <init_percd+0x28>
c0006cba:	43                   	inc    ebx
c0006cbb:	83 fb 04             	cmp    ebx,0x4
c0006cbe:	74 53                	je     c0006d13 <init_percd+0x7b>
c0006cc0:	a1 2c 08 02 c0       	mov    eax,ds:0xc002082c
c0006cc5:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc9:	e8 51 f4 ff ff       	call   c000611f <biread>
c0006cce:	89 c6                	mov    esi,eax
c0006cd0:	85 c0                	test   eax,eax
c0006cd2:	0f 88 c1 00 00 00    	js     c0006d99 <init_percd+0x101>
c0006cd8:	83 ec 04             	sub    esp,0x4
c0006cdb:	6a 06                	push   0x6
c0006cdd:	68 a3 d3 01 c0       	push   0xc001d3a3
c0006ce2:	8b 04 85 00 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0600]
c0006ce9:	83 c0 04             	add    eax,0x4
c0006cec:	50                   	push   eax
c0006ced:	e8 be 96 ff ff       	call   c00003b0 <memcmp>
c0006cf2:	83 c4 10             	add    esp,0x10
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 c1                	jne    c0006cba <init_percd+0x22>
c0006cf9:	8b 04 b5 00 fa 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0600]
c0006d00:	83 c0 5c             	add    eax,0x5c
c0006d03:	e8 18 f1 ff ff       	call   c0005e20 <isjoliet>
c0006d08:	a3 34 08 02 c0       	mov    ds:0xc0020834,eax
c0006d0d:	85 c0                	test   eax,eax
c0006d0f:	74 a9                	je     c0006cba <init_percd+0x22>
c0006d11:	eb 09                	jmp    c0006d1c <init_percd+0x84>
c0006d13:	83 3d 34 08 02 c0 00 	cmp    DWORD PTR ds:0xc0020834,0x0
c0006d1a:	74 42                	je     c0006d5e <init_percd+0xc6>
c0006d1c:	8b 34 b5 00 fa 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0600]
c0006d23:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d29:	bf 00 08 02 c0       	mov    edi,0xc0020800
c0006d2e:	b9 22 00 00 00       	mov    ecx,0x22
c0006d33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d35:	b8 02 08 02 c0       	mov    eax,0xc0020802
c0006d3a:	e8 3f f1 ff ff       	call   c0005e7e <iso_733>
c0006d3f:	a3 28 08 02 c0       	mov    ds:0xc0020828,eax
c0006d44:	b8 0a 08 02 c0       	mov    eax,0xc002080a
c0006d49:	e8 30 f1 ff ff       	call   c0005e7e <iso_733>
c0006d4e:	a3 24 08 02 c0       	mov    ds:0xc0020824,eax
c0006d53:	bb 00 00 00 00       	mov    ebx,0x0
c0006d58:	89 d8                	mov    eax,ebx
c0006d5a:	5b                   	pop    ebx
c0006d5b:	5e                   	pop    esi
c0006d5c:	5f                   	pop    edi
c0006d5d:	c3                   	ret    
c0006d5e:	a1 2c 08 02 c0       	mov    eax,ds:0xc002082c
c0006d63:	83 c0 10             	add    eax,0x10
c0006d66:	e8 b4 f3 ff ff       	call   c000611f <biread>
c0006d6b:	89 c6                	mov    esi,eax
c0006d6d:	85 c0                	test   eax,eax
c0006d6f:	78 e7                	js     c0006d58 <init_percd+0xc0>
c0006d71:	83 ec 04             	sub    esp,0x4
c0006d74:	6a 06                	push   0x6
c0006d76:	68 aa d3 01 c0       	push   0xc001d3aa
c0006d7b:	8b 04 85 00 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0600]
c0006d82:	83 c0 04             	add    eax,0x4
c0006d85:	50                   	push   eax
c0006d86:	e8 25 96 ff ff       	call   c00003b0 <memcmp>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	85 c0                	test   eax,eax
c0006d90:	74 8a                	je     c0006d1c <init_percd+0x84>
c0006d92:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d97:	eb bf                	jmp    c0006d58 <init_percd+0xc0>
c0006d99:	89 c3                	mov    ebx,eax
c0006d9b:	eb bb                	jmp    c0006d58 <init_percd+0xc0>

c0006d9d <iso_ioctl>:
c0006d9d:	e8 e6 fe ff ff       	call   c0006c88 <iso_reset>
c0006da2:	b8 00 00 00 00       	mov    eax,0x0
c0006da7:	c3                   	ret    

c0006da8 <fs_iso9660_init>:
c0006da8:	53                   	push   ebx
c0006da9:	83 ec 0c             	sub    esp,0xc
c0006dac:	68 40 09 00 00       	push   0x940
c0006db1:	6a 00                	push   0x0
c0006db3:	68 c0 fe 01 c0       	push   0xc001fec0
c0006db8:	e8 33 97 ff ff       	call   c00004f0 <memset>
c0006dbd:	c7 05 c0 fe 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fec0,0xffffffff
c0006dc7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dce:	e8 8a 10 00 00       	call   c0007e5d <malloc>
c0006dd3:	a3 30 08 02 c0       	mov    ds:0xc0020830,eax
c0006dd8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ddf:	e8 79 10 00 00       	call   c0007e5d <malloc>
c0006de4:	a3 a0 fe 01 c0       	mov    ds:0xc001fea0,eax
c0006de9:	83 c4 10             	add    esp,0x10
c0006dec:	bb 00 00 00 00       	mov    ebx,0x0
c0006df1:	83 ec 0c             	sub    esp,0xc
c0006df4:	68 04 08 00 00       	push   0x804
c0006df9:	e8 5f 10 00 00       	call   c0007e5d <malloc>
c0006dfe:	89 04 9d 00 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0600],eax
c0006e05:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e0b:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e12:	e8 46 10 00 00       	call   c0007e5d <malloc>
c0006e17:	89 04 9d a0 f9 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0660],eax
c0006e1e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e24:	43                   	inc    ebx
c0006e25:	83 c4 10             	add    esp,0x10
c0006e28:	83 fb 10             	cmp    ebx,0x10
c0006e2b:	75 c4                	jne    c0006df1 <fs_iso9660_init+0x49>
c0006e2d:	b8 00 00 00 00       	mov    eax,0x0
c0006e32:	83 c4 08             	add    esp,0x8
c0006e35:	5b                   	pop    ebx
c0006e36:	c3                   	ret    

c0006e37 <fs_iso9660_shutdown>:
c0006e37:	53                   	push   ebx
c0006e38:	83 ec 08             	sub    esp,0x8
c0006e3b:	bb 00 00 00 00       	mov    ebx,0x0
c0006e40:	83 ec 0c             	sub    esp,0xc
c0006e43:	ff 34 9d 00 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0600]
c0006e4a:	e8 1e 10 00 00       	call   c0007e6d <free>
c0006e4f:	83 c4 04             	add    esp,0x4
c0006e52:	ff 34 9d a0 f9 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0660]
c0006e59:	e8 0f 10 00 00       	call   c0007e6d <free>
c0006e5e:	43                   	inc    ebx
c0006e5f:	83 c4 10             	add    esp,0x10
c0006e62:	83 fb 10             	cmp    ebx,0x10
c0006e65:	75 d9                	jne    c0006e40 <fs_iso9660_shutdown+0x9>
c0006e67:	a1 30 08 02 c0       	mov    eax,ds:0xc0020830
c0006e6c:	85 c0                	test   eax,eax
c0006e6e:	74 0c                	je     c0006e7c <fs_iso9660_shutdown+0x45>
c0006e70:	83 ec 0c             	sub    esp,0xc
c0006e73:	50                   	push   eax
c0006e74:	e8 f4 0f 00 00       	call   c0007e6d <free>
c0006e79:	83 c4 10             	add    esp,0x10
c0006e7c:	a1 a0 fe 01 c0       	mov    eax,ds:0xc001fea0
c0006e81:	85 c0                	test   eax,eax
c0006e83:	74 0c                	je     c0006e91 <fs_iso9660_shutdown+0x5a>
c0006e85:	83 ec 0c             	sub    esp,0xc
c0006e88:	50                   	push   eax
c0006e89:	e8 df 0f 00 00       	call   c0007e6d <free>
c0006e8e:	83 c4 10             	add    esp,0x10
c0006e91:	c7 05 a0 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fea0,0x0
c0006e9b:	c7 05 30 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020830,0x0
c0006ea5:	b8 00 00 00 00       	mov    eax,0x0
c0006eaa:	83 c4 08             	add    esp,0x8
c0006ead:	5b                   	pop    ebx
c0006eae:	c3                   	ret    

c0006eaf <CPU::current()>:
c0006eaf:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0006eb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eba:	c3                   	ret    

c0006ebb <operator new(unsigned long)>:
c0006ebb:	e9 9d 0f 00 00       	jmp    c0007e5d <malloc>

c0006ec0 <operator delete(void*)>:
c0006ec0:	e9 b8 0f 00 00       	jmp    c0007e7d <rfree>

c0006ec5 <disableIRQs()>:
c0006ec5:	fa                   	cli    
c0006ec6:	c3                   	ret    

c0006ec7 <enableIRQs()>:
c0006ec7:	fb                   	sti    
c0006ec8:	c3                   	ret    

c0006ec9 <lockScheduler()>:
c0006ec9:	fa                   	cli    
c0006eca:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0006ed0:	c3                   	ret    

c0006ed1 <unlockScheduler()>:
c0006ed1:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0006ed6:	48                   	dec    eax
c0006ed7:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0006edc:	75 01                	jne    c0006edf <unlockScheduler()+0xe>
c0006ede:	fb                   	sti    
c0006edf:	c3                   	ret    

c0006ee0 <lockStuff()>:
c0006ee0:	fa                   	cli    
c0006ee1:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0006ee7:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c0006eed:	c3                   	ret    

c0006eee <unlockStuff()>:
c0006eee:	83 ec 0c             	sub    esp,0xc
c0006ef1:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0006ef6:	48                   	dec    eax
c0006ef7:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0006efc:	75 18                	jne    c0006f16 <unlockStuff()+0x28>
c0006efe:	83 3d 00 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d00,0x0
c0006f05:	74 0f                	je     c0006f16 <unlockStuff()+0x28>
c0006f07:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0006f11:	e8 7a cb 00 00       	call   c0013a90 <schedule()>
c0006f16:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0006f1b:	48                   	dec    eax
c0006f1c:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0006f21:	75 01                	jne    c0006f24 <unlockStuff()+0x36>
c0006f23:	fb                   	sti    
c0006f24:	83 c4 0c             	add    esp,0xc
c0006f27:	c3                   	ret    

c0006f28 <Virt::getAKernelVAS()>:
c0006f28:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0006f2d:	c3                   	ret    

c0006f2e <__not_memcpy>:
c0006f2e:	57                   	push   edi
c0006f2f:	56                   	push   esi
c0006f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f34:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f3c:	89 c7                	mov    edi,eax
c0006f3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f40:	5e                   	pop    esi
c0006f41:	5f                   	pop    edi
c0006f42:	c3                   	ret    
c0006f43:	90                   	nop

c0006f44 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f44:	83 ec 0c             	sub    esp,0xc
c0006f47:	83 ec 08             	sub    esp,0x8
c0006f4a:	68 b1 d3 01 c0       	push   0xc001d3b1
c0006f4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f53:	e8 a8 97 ff ff       	call   c0000700 <strcmp>
c0006f58:	83 c4 10             	add    esp,0x10
c0006f5b:	85 c0                	test   eax,eax
c0006f5d:	0f 94 c0             	sete   al
c0006f60:	84 c0                	test   al,al
c0006f62:	74 0c                	je     c0006f70 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f64:	b8 38 08 02 c0       	mov    eax,0xc0020838
c0006f69:	e9 ea 00 00 00       	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f6e:	66 90                	xchg   ax,ax
c0006f70:	83 ec 08             	sub    esp,0x8
c0006f73:	68 ba d3 01 c0       	push   0xc001d3ba
c0006f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f7c:	e8 7f 97 ff ff       	call   c0000700 <strcmp>
c0006f81:	83 c4 10             	add    esp,0x10
c0006f84:	85 c0                	test   eax,eax
c0006f86:	0f 94 c0             	sete   al
c0006f89:	84 c0                	test   al,al
c0006f8b:	74 0b                	je     c0006f98 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f8d:	b8 40 c0 01 c0       	mov    eax,0xc001c040
c0006f92:	e9 c1 00 00 00       	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f97:	90                   	nop
c0006f98:	83 ec 08             	sub    esp,0x8
c0006f9b:	68 c4 d3 01 c0       	push   0xc001d3c4
c0006fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa4:	e8 57 97 ff ff       	call   c0000700 <strcmp>
c0006fa9:	83 c4 10             	add    esp,0x10
c0006fac:	85 c0                	test   eax,eax
c0006fae:	0f 94 c0             	sete   al
c0006fb1:	84 c0                	test   al,al
c0006fb3:	74 0b                	je     c0006fc0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb5:	b8 74 bd 01 c0       	mov    eax,0xc001bd74
c0006fba:	e9 99 00 00 00       	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fbf:	90                   	nop
c0006fc0:	83 ec 08             	sub    esp,0x8
c0006fc3:	68 cd d3 01 c0       	push   0xc001d3cd
c0006fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fcc:	e8 2f 97 ff ff       	call   c0000700 <strcmp>
c0006fd1:	83 c4 10             	add    esp,0x10
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	0f 94 c0             	sete   al
c0006fd9:	84 c0                	test   al,al
c0006fdb:	74 07                	je     c0006fe4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fdd:	b8 40 c1 01 c0       	mov    eax,0xc001c140
c0006fe2:	eb 74                	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe4:	83 ec 08             	sub    esp,0x8
c0006fe7:	68 d7 d3 01 c0       	push   0xc001d3d7
c0006fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ff0:	e8 0b 97 ff ff       	call   c0000700 <strcmp>
c0006ff5:	83 c4 10             	add    esp,0x10
c0006ff8:	85 c0                	test   eax,eax
c0006ffa:	0f 94 c0             	sete   al
c0006ffd:	84 c0                	test   al,al
c0006fff:	74 07                	je     c0007008 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0007001:	b8 c0 be 01 c0       	mov    eax,0xc001bec0
c0007006:	eb 50                	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007008:	83 ec 08             	sub    esp,0x8
c000700b:	68 e0 d3 01 c0       	push   0xc001d3e0
c0007010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007014:	e8 e7 96 ff ff       	call   c0000700 <strcmp>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	85 c0                	test   eax,eax
c000701e:	0f 94 c0             	sete   al
c0007021:	84 c0                	test   al,al
c0007023:	74 07                	je     c000702c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007025:	b8 3c 08 02 c0       	mov    eax,0xc002083c
c000702a:	eb 2c                	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000702c:	83 ec 08             	sub    esp,0x8
c000702f:	68 ed d3 01 c0       	push   0xc001d3ed
c0007034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007038:	e8 c3 96 ff ff       	call   c0000700 <strcmp>
c000703d:	83 c4 10             	add    esp,0x10
c0007040:	85 c0                	test   eax,eax
c0007042:	0f 94 c0             	sete   al
c0007045:	84 c0                	test   al,al
c0007047:	74 07                	je     c0007050 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007049:	b8 3d 08 02 c0       	mov    eax,0xc002083d
c000704e:	eb 08                	jmp    c0007058 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007050:	b8 00 00 00 00       	mov    eax,0x0
c0007055:	8d 76 00             	lea    esi,[esi+0x0]
c0007058:	83 c4 0c             	add    esp,0xc
c000705b:	c3                   	ret    

c000705c <Computer::close(int, int, void*)>:
c000705c:	57                   	push   edi
c000705d:	56                   	push   esi
c000705e:	53                   	push   ebx
c000705f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007063:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007067:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000706b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007071:	83 ec 0c             	sub    esp,0xc
c0007074:	50                   	push   eax
c0007075:	e8 d0 50 00 00       	call   c000c14a <Device::closeAll()>
c000707a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007080:	83 c4 10             	add    esp,0x10
c0007083:	8b 10                	mov    edx,DWORD PTR [eax]
c0007085:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007089:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0007091:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007095:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007099:	5b                   	pop    ebx
c000709a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000709d:	5e                   	pop    esi
c000709e:	5f                   	pop    edi
c000709f:	ff e0                	jmp    eax

c00070a1 <Krnl::firstTask()>:
c00070a1:	53                   	push   ebx
c00070a2:	83 ec 14             	sub    esp,0x14
c00070a5:	fb                   	sti    
c00070a6:	68 fa d3 01 c0       	push   0xc001d3fa
c00070ab:	e8 07 0e 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00070b0:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070b7:	e8 a1 0d 00 00       	call   c0007e5d <malloc>
c00070bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070c3:	89 c3                	mov    ebx,eax
c00070c5:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00070ca:	50                   	push   eax
c00070cb:	68 13 d4 01 c0       	push   0xc001d413
c00070d0:	6a 01                	push   0x1
c00070d2:	53                   	push   ebx
c00070d3:	e8 8c c5 00 00       	call   c0013664 <Process::Process(bool, char const*, Process*, char**)>
c00070d8:	83 c4 20             	add    esp,0x20
c00070db:	68 ff 00 00 00       	push   0xff
c00070e0:	6a 00                	push   0x0
c00070e2:	68 b7 78 00 c0       	push   0xc00078b7
c00070e7:	53                   	push   ebx
c00070e8:	e8 83 c7 00 00       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c00070ed:	8b 15 30 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d30
c00070f3:	6a 7a                	push   0x7a
c00070f5:	6a 00                	push   0x0
c00070f7:	68 c4 42 01 c0       	push   0xc00142c4
c00070fc:	52                   	push   edx
c00070fd:	e8 6e c7 00 00       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c0007102:	83 c4 14             	add    esp,0x14
c0007105:	a3 e8 3c 02 c0       	mov    ds:0xc0023ce8,eax
c000710a:	68 10 d5 01 c0       	push   0xc001d510
c000710f:	c6 05 3d 08 02 c0 01 	mov    BYTE PTR ds:0xc002083d,0x1
c0007116:	e8 9c 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000711b:	e8 83 d5 00 00       	call   c00146a3 <Vm::initialise8086()>
c0007120:	e8 69 3e 00 00       	call   c000af8e <Fs::initVFS()>
c0007125:	c7 04 24 20 d4 01 c0 	mov    DWORD PTR [esp],0xc001d420
c000712c:	e8 86 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007131:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0007136:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000713c:	8b 10                	mov    edx,DWORD PTR [eax]
c000713e:	6a 00                	push   0x0
c0007140:	6a 00                	push   0x0
c0007142:	6a 00                	push   0x0
c0007144:	50                   	push   eax
c0007145:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007148:	83 c4 14             	add    esp,0x14
c000714b:	68 10 d5 01 c0       	push   0xc001d510
c0007150:	e8 62 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0007155:	e8 9c ad 00 00       	call   c0011ef6 <Sys::loadSyscalls()>
c000715a:	e8 d3 94 00 00       	call   c0010632 <Krnl::loadSystemEnv()>
c000715f:	e8 98 97 00 00       	call   c00108fc <Krnl::setupPowerManager()>
c0007164:	83 c4 0c             	add    esp,0xc
c0007167:	6a 3a                	push   0x3a
c0007169:	68 3a d4 01 c0       	push   0xc001d43a
c000716e:	68 43 d4 01 c0       	push   0xc001d443
c0007173:	e8 ae 9c 00 00       	call   c0010e26 <Reg::readIntWithDefault(char*, char*, int)>
c0007178:	89 04 24             	mov    DWORD PTR [esp],eax
c000717b:	e8 1c 49 00 00       	call   c000ba9c <User::loadClockSettings(int)>
c0007180:	c7 04 24 34 d5 01 c0 	mov    DWORD PTR [esp],0xc001d534
c0007187:	e8 2b 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000718c:	59                   	pop    ecx
c000718d:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0007192:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007198:	53                   	push   ebx
c0007199:	e8 aa 4f 00 00       	call   c000c148 <Device::loadDriversForAll()>
c000719e:	c7 04 24 4b d4 01 c0 	mov    DWORD PTR [esp],0xc001d44b
c00071a5:	e8 0d 0d 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00071aa:	58                   	pop    eax
c00071ab:	8b 1d 38 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020838
c00071b1:	5a                   	pop    edx
c00071b2:	6a 01                	push   0x1
c00071b4:	68 5c d4 01 c0       	push   0xc001d45c
c00071b9:	e8 e0 be 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c00071be:	59                   	pop    ecx
c00071bf:	5a                   	pop    edx
c00071c0:	53                   	push   ebx
c00071c1:	50                   	push   eax
c00071c2:	e8 08 c1 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	83 ec 0c             	sub    esp,0xc
c00071cd:	6a 02                	push   0x2
c00071cf:	e8 b8 ca 00 00       	call   c0013c8c <blockTask(TaskState)>
c00071d4:	83 c4 10             	add    esp,0x10
c00071d7:	eb f1                	jmp    c00071ca <Krnl::firstTask()+0x129>
c00071d9:	90                   	nop

c00071da <Computer::Computer()>:
c00071da:	83 ec 0c             	sub    esp,0xc
c00071dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e1:	83 ec 08             	sub    esp,0x8
c00071e4:	68 78 d4 01 c0       	push   0xc001d478
c00071e9:	50                   	push   eax
c00071ea:	e8 d5 4f 00 00       	call   c000c1c4 <Device::Device(char const*)>
c00071ef:	83 c4 10             	add    esp,0x10
c00071f2:	ba 80 d5 01 c0       	mov    edx,0xc001d580
c00071f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fb:	89 10                	mov    DWORD PTR [eax],edx
c00071fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007201:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000720b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000721d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007223:	83 ca 04             	or     edx,0x4
c0007226:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000722c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007230:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007236:	31 d2                	xor    edx,edx
c0007238:	88 c2                	mov    dl,al
c000723a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723e:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007249:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000724f:	31 d2                	xor    edx,edx
c0007251:	88 c2                	mov    dl,al
c0007253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007257:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000725c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007260:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007266:	8d 50 01             	lea    edx,[eax+0x1]
c0007269:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000726d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0007273:	31 d2                	xor    edx,edx
c0007275:	88 c2                	mov    dl,al
c0007277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000727b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000727f:	83 e1 3f             	and    ecx,0x3f
c0007282:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007286:	90                   	nop
c0007287:	83 c4 0c             	add    esp,0xc
c000728a:	c3                   	ret    
c000728b:	90                   	nop

c000728c <Computer::setBootMessage(char const*)>:
c000728c:	c3                   	ret    
c000728d:	90                   	nop

c000728e <Computer::detectFeatures()>:
c000728e:	55                   	push   ebp
c000728f:	57                   	push   edi
c0007290:	56                   	push   esi
c0007291:	53                   	push   ebx
c0007292:	83 ec 1c             	sub    esp,0x1c
c0007295:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007299:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c00072a3:	e8 71 8f ff ff       	call   c0000219 <detectCPUID>
c00072a8:	85 c0                	test   eax,eax
c00072aa:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072b0:	0f 95 c2             	setne  dl
c00072b3:	83 e0 fd             	and    eax,0xfffffffd
c00072b6:	01 d2                	add    edx,edx
c00072b8:	09 d0                	or     eax,edx
c00072ba:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072c0:	a8 02                	test   al,0x2
c00072c2:	75 46                	jne    c000730a <Computer::detectFeatures()+0x7c>
c00072c4:	f6 05 51 08 02 c0 04 	test   BYTE PTR ds:0xc0020851,0x4
c00072cb:	74 07                	je     c00072d4 <Computer::detectFeatures()+0x46>
c00072cd:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d4:	e8 2d 4a 01 00       	call   c001bd06 <x87Detect>
c00072d9:	83 e0 01             	and    eax,0x1
c00072dc:	c1 e0 04             	shl    eax,0x4
c00072df:	88 c2                	mov    dl,al
c00072e1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e7:	83 e0 ef             	and    eax,0xffffffef
c00072ea:	09 d0                	or     eax,edx
c00072ec:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072f2:	a8 10                	test   al,0x10
c00072f4:	0f 85 2a 01 00 00    	jne    c0007424 <Computer::detectFeatures()+0x196>
c00072fa:	84 c0                	test   al,al
c00072fc:	0f 88 45 01 00 00    	js     c0007447 <Computer::detectFeatures()+0x1b9>
c0007302:	83 c4 1c             	add    esp,0x1c
c0007305:	5b                   	pop    ebx
c0007306:	5e                   	pop    esi
c0007307:	5f                   	pop    edi
c0007308:	5d                   	pop    ebp
c0007309:	c3                   	ret    
c000730a:	83 ec 0c             	sub    esp,0xc
c000730d:	6a 20                	push   0x20
c000730f:	e8 40 84 00 00       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c0007314:	83 e0 01             	and    eax,0x1
c0007317:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000731e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007324:	83 e0 f7             	and    eax,0xfffffff7
c0007327:	09 d0                	or     eax,edx
c0007329:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000732f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007336:	e8 19 84 00 00       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000733b:	83 e0 01             	and    eax,0x1
c000733e:	88 c2                	mov    dl,al
c0007340:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007346:	83 e0 fe             	and    eax,0xfffffffe
c0007349:	09 d0                	or     eax,edx
c000734b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007351:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007358:	e8 f7 83 00 00       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000735d:	c1 e0 07             	shl    eax,0x7
c0007360:	88 c2                	mov    dl,al
c0007362:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007368:	83 e0 7f             	and    eax,0x7f
c000736b:	09 d0                	or     eax,edx
c000736d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007373:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000737a:	e8 d5 83 00 00       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000737f:	83 c4 10             	add    esp,0x10
c0007382:	83 e0 01             	and    eax,0x1
c0007385:	c1 e0 05             	shl    eax,0x5
c0007388:	88 c2                	mov    dl,al
c000738a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007390:	83 e0 df             	and    eax,0xffffffdf
c0007393:	09 d0                	or     eax,edx
c0007395:	f7 05 50 08 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020850,0x401
c000739f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a5:	0f 84 c2 00 00 00    	je     c000746d <Computer::detectFeatures()+0x1df>
c00073ab:	83 e0 fe             	and    eax,0xfffffffe
c00073ae:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b4:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073ba:	88 c2                	mov    dl,al
c00073bc:	83 e2 09             	and    edx,0x9
c00073bf:	fe ca                	dec    dl
c00073c1:	75 09                	jne    c00073cc <Computer::detectFeatures()+0x13e>
c00073c3:	83 e0 fe             	and    eax,0xfffffffe
c00073c6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073cc:	83 ec 0c             	sub    esp,0xc
c00073cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073d3:	50                   	push   eax
c00073d4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073d8:	55                   	push   ebp
c00073d9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073dd:	57                   	push   edi
c00073de:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073e2:	56                   	push   esi
c00073e3:	68 00 00 00 80       	push   0x80000000
c00073e8:	e8 e3 82 00 00       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073ed:	83 c4 20             	add    esp,0x20
c00073f0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073fb:	0f 86 c3 fe ff ff    	jbe    c00072c4 <Computer::detectFeatures()+0x36>
c0007401:	83 ec 0c             	sub    esp,0xc
c0007404:	50                   	push   eax
c0007405:	55                   	push   ebp
c0007406:	57                   	push   edi
c0007407:	56                   	push   esi
c0007408:	68 01 00 00 80       	push   0x80000001
c000740d:	e8 be 82 00 00       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007412:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000741c:	83 c4 20             	add    esp,0x20
c000741f:	e9 a0 fe ff ff       	jmp    c00072c4 <Computer::detectFeatures()+0x36>
c0007424:	e8 97 48 01 00       	call   c001bcc0 <absolutelyNoChanceInHell>
c0007429:	88 c2                	mov    dl,al
c000742b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007431:	c1 e2 07             	shl    edx,0x7
c0007434:	83 e0 7f             	and    eax,0x7f
c0007437:	09 d0                	or     eax,edx
c0007439:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000743f:	84 c0                	test   al,al
c0007441:	0f 89 bb fe ff ff    	jns    c0007302 <Computer::detectFeatures()+0x74>
c0007447:	e8 f4 45 01 00       	call   c001ba40 <avxDetect>
c000744c:	83 e0 01             	and    eax,0x1
c000744f:	c1 e0 05             	shl    eax,0x5
c0007452:	88 c2                	mov    dl,al
c0007454:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000745a:	83 e0 df             	and    eax,0xffffffdf
c000745d:	09 d0                	or     eax,edx
c000745f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007465:	83 c4 1c             	add    esp,0x1c
c0007468:	5b                   	pop    ebx
c0007469:	5e                   	pop    esi
c000746a:	5f                   	pop    edi
c000746b:	5d                   	pop    ebp
c000746c:	c3                   	ret    
c000746d:	83 ec 0c             	sub    esp,0xc
c0007470:	68 00 02 00 00       	push   0x200
c0007475:	e8 da 82 00 00       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000747a:	83 c4 10             	add    esp,0x10
c000747d:	83 e0 01             	and    eax,0x1
c0007480:	88 c2                	mov    dl,al
c0007482:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007488:	83 e0 fe             	and    eax,0xfffffffe
c000748b:	09 d0                	or     eax,edx
c000748d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007493:	e9 1c ff ff ff       	jmp    c00073b4 <Computer::detectFeatures()+0x126>

c0007498 <Computer::displayFeatures()>:
c0007498:	c3                   	ret    
c0007499:	90                   	nop

c000749a <Computer::rdmsr(unsigned int)>:
c000749a:	83 ec 0c             	sub    esp,0xc
c000749d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074a8:	74 0a                	je     c00074b4 <Computer::rdmsr(unsigned int)+0x1a>
c00074aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074ae:	0f 32                	rdmsr  
c00074b0:	83 c4 0c             	add    esp,0xc
c00074b3:	c3                   	ret    
c00074b4:	83 ec 0c             	sub    esp,0xc
c00074b7:	68 81 d4 01 c0       	push   0xc001d481
c00074bc:	e8 7a 92 00 00       	call   c001073b <Krnl::panic(char const*)>
c00074c1:	83 c4 10             	add    esp,0x10
c00074c4:	eb e4                	jmp    c00074aa <Computer::rdmsr(unsigned int)+0x10>

c00074c6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074c6:	57                   	push   edi
c00074c7:	56                   	push   esi
c00074c8:	52                   	push   edx
c00074c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074d1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074dc:	74 0e                	je     c00074ec <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074e2:	89 f0                	mov    eax,esi
c00074e4:	89 fa                	mov    edx,edi
c00074e6:	0f 30                	wrmsr  
c00074e8:	58                   	pop    eax
c00074e9:	5e                   	pop    esi
c00074ea:	5f                   	pop    edi
c00074eb:	c3                   	ret    
c00074ec:	83 ec 0c             	sub    esp,0xc
c00074ef:	68 87 d4 01 c0       	push   0xc001d487
c00074f4:	e8 42 92 00 00       	call   c001073b <Krnl::panic(char const*)>
c00074f9:	83 c4 10             	add    esp,0x10
c00074fc:	eb e0                	jmp    c00074de <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074fe <Computer::shutdown()>:
c00074fe:	83 ec 0c             	sub    esp,0xc
c0007501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007505:	8b 10                	mov    edx,DWORD PTR [eax]
c0007507:	6a 00                	push   0x0
c0007509:	6a 00                	push   0x0
c000750b:	6a 00                	push   0x0
c000750d:	50                   	push   eax
c000750e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007511:	83 c4 1c             	add    esp,0x1c
c0007514:	c3                   	ret    
c0007515:	90                   	nop

c0007516 <Computer::restart()>:
c0007516:	83 ec 0c             	sub    esp,0xc
c0007519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751d:	8b 10                	mov    edx,DWORD PTR [eax]
c000751f:	6a 00                	push   0x0
c0007521:	6a 00                	push   0x0
c0007523:	6a 01                	push   0x1
c0007525:	50                   	push   eax
c0007526:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007529:	83 c4 1c             	add    esp,0x1c
c000752c:	c3                   	ret    
c000752d:	90                   	nop

c000752e <Computer::sleep()>:
c000752e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007532:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007538:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000753c:	e9 8b 7c 00 00       	jmp    c000f1cc <ACPI::sleep()>
c0007541:	90                   	nop

c0007542 <Computer::nmiEnabled()>:
c0007542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007546:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000754c:	c3                   	ret    
c000754d:	90                   	nop

c000754e <Computer::readCMOS(unsigned char)>:
c000754e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007552:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007559:	19 c0                	sbb    eax,eax
c000755b:	83 e0 80             	and    eax,0xffffff80
c000755e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007562:	e6 70                	out    0x70,al
c0007564:	e4 71                	in     al,0x71
c0007566:	c3                   	ret    
c0007567:	90                   	nop

c0007568 <Computer::enableNMI(bool)>:
c0007568:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000756c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007570:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007576:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000757e:	eb ce                	jmp    c000754e <Computer::readCMOS(unsigned char)>

c0007580 <Computer::open(int, int, void*)>:
c0007580:	56                   	push   esi
c0007581:	53                   	push   ebx
c0007582:	83 ec 10             	sub    esp,0x10
c0007585:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007589:	f6 05 50 08 02 c0 04 	test   BYTE PTR ds:0xc0020850,0x4
c0007590:	68 8d d4 01 c0       	push   0xc001d48d
c0007595:	0f 94 05 20 f7 01 c0 	sete   BYTE PTR ds:0xc001f720
c000759c:	e8 16 09 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00075a1:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075a8:	e8 b0 08 00 00       	call   c0007e5d <malloc>
c00075ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00075b0:	89 c6                	mov    esi,eax
c00075b2:	e8 ad 77 00 00       	call   c000ed64 <ACPI::ACPI()>
c00075b7:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075bd:	58                   	pop    eax
c00075be:	5a                   	pop    edx
c00075bf:	56                   	push   esi
c00075c0:	53                   	push   ebx
c00075c1:	e8 66 4a 00 00       	call   c000c02c <Device::addChild(Device*)>
c00075c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c9:	e8 c0 fc ff ff       	call   c000728e <Computer::detectFeatures()>
c00075ce:	59                   	pop    ecx
c00075cf:	5e                   	pop    esi
c00075d0:	6a 01                	push   0x1
c00075d2:	53                   	push   ebx
c00075d3:	e8 90 ff ff ff       	call   c0007568 <Computer::enableNMI(bool)>
c00075d8:	c7 04 24 a5 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4a5
c00075df:	e8 d3 08 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c00075e4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075eb:	e8 6d 08 00 00       	call   c0007e5d <malloc>
c00075f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f3:	89 c6                	mov    esi,eax
c00075f5:	e8 12 82 00 00       	call   c000f80c <CPU::CPU()>
c00075fa:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007600:	58                   	pop    eax
c0007601:	5a                   	pop    edx
c0007602:	56                   	push   esi
c0007603:	53                   	push   ebx
c0007604:	e8 23 4a 00 00       	call   c000c02c <Device::addChild(Device*)>
c0007609:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000760f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007613:	8b 10                	mov    edx,DWORD PTR [eax]
c0007615:	51                   	push   ecx
c0007616:	6a 00                	push   0x0
c0007618:	6a 00                	push   0x0
c000761a:	50                   	push   eax
c000761b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000761e:	83 c4 14             	add    esp,0x14
c0007621:	68 54 d5 01 c0       	push   0xc001d554
c0007626:	e8 8c 08 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000762b:	e8 34 e1 00 00       	call   c0015764 <HalInitialiseCoprocessor()>
c0007630:	c7 04 24 bf d4 01 c0 	mov    DWORD PTR [esp],0xc001d4bf
c0007637:	e8 7b 08 00 00       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000763c:	c7 04 24 a1 70 00 c0 	mov    DWORD PTR [esp],0xc00070a1
c0007643:	e8 40 c3 00 00       	call   c0013988 <setupMultitasking(void (*)())>
c0007648:	83 c4 14             	add    esp,0x14
c000764b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007650:	5b                   	pop    ebx
c0007651:	5e                   	pop    esi
c0007652:	c3                   	ret    
c0007653:	90                   	nop

c0007654 <Computer::disableNMI()>:
c0007654:	6a 00                	push   0x0
c0007656:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000765a:	50                   	push   eax
c000765b:	e8 08 ff ff ff       	call   c0007568 <Computer::enableNMI(bool)>
c0007660:	5a                   	pop    edx
c0007661:	59                   	pop    ecx
c0007662:	c3                   	ret    
c0007663:	90                   	nop

c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007668:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000766f:	19 c0                	sbb    eax,eax
c0007671:	83 e0 80             	and    eax,0xffffff80
c0007674:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007678:	e6 70                	out    0x70,al
c000767a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000767e:	e6 71                	out    0x71,al
c0007680:	c3                   	ret    
c0007681:	90                   	nop

c0007682 <Computer::handleNMI()>:
c0007682:	56                   	push   esi
c0007683:	53                   	push   ebx
c0007684:	83 ec 10             	sub    esp,0x10
c0007687:	e4 92                	in     al,0x92
c0007689:	89 c6                	mov    esi,eax
c000768b:	e4 61                	in     al,0x61
c000768d:	68 da d4 01 c0       	push   0xc001d4da
c0007692:	88 c3                	mov    bl,al
c0007694:	e8 53 35 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0007699:	83 c4 10             	add    esp,0x10
c000769c:	83 e6 10             	and    esi,0x10
c000769f:	75 0d                	jne    c00076ae <Computer::handleNMI()+0x2c>
c00076a1:	f6 c3 40             	test   bl,0x40
c00076a4:	75 1d                	jne    c00076c3 <Computer::handleNMI()+0x41>
c00076a6:	84 db                	test   bl,bl
c00076a8:	78 2d                	js     c00076d7 <Computer::handleNMI()+0x55>
c00076aa:	58                   	pop    eax
c00076ab:	5b                   	pop    ebx
c00076ac:	5e                   	pop    esi
c00076ad:	c3                   	ret    
c00076ae:	83 ec 0c             	sub    esp,0xc
c00076b1:	68 eb d4 01 c0       	push   0xc001d4eb
c00076b6:	e8 80 90 00 00       	call   c001073b <Krnl::panic(char const*)>
c00076bb:	83 c4 10             	add    esp,0x10
c00076be:	f6 c3 40             	test   bl,0x40
c00076c1:	74 e3                	je     c00076a6 <Computer::handleNMI()+0x24>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 f8 d4 01 c0       	push   0xc001d4f8
c00076cb:	e8 6b 90 00 00       	call   c001073b <Krnl::panic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	84 db                	test   bl,bl
c00076d5:	79 d3                	jns    c00076aa <Computer::handleNMI()+0x28>
c00076d7:	c7 44 24 10 02 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d502
c00076df:	5a                   	pop    edx
c00076e0:	5b                   	pop    ebx
c00076e1:	5e                   	pop    esi
c00076e2:	e9 54 90 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c00076e7:	90                   	nop

c00076e8 <GDTEntry::setBase(unsigned int)>:
c00076e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076f0:	89 c1                	mov    ecx,eax
c00076f2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076f6:	c1 e9 10             	shr    ecx,0x10
c00076f9:	c1 e8 18             	shr    eax,0x18
c00076fc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076ff:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007702:	c3                   	ret    
c0007703:	90                   	nop

c0007704 <GDTEntry::setLimit(unsigned int)>:
c0007704:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000770c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000770f:	66 89 01             	mov    WORD PTR [ecx],ax
c0007712:	83 e2 f0             	and    edx,0xfffffff0
c0007715:	c1 e8 10             	shr    eax,0x10
c0007718:	83 e0 0f             	and    eax,0xf
c000771b:	09 d0                	or     eax,edx
c000771d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007720:	c3                   	ret    
c0007721:	90                   	nop

c0007722 <GDT::GDT()>:
c0007722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007726:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000772c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007730:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007736:	90                   	nop
c0007737:	c3                   	ret    

c0007738 <GDT::addEntry(GDTEntry)>:
c0007738:	53                   	push   ebx
c0007739:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000773d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007741:	8b 02                	mov    eax,DWORD PTR [edx]
c0007743:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007747:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000774b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000774f:	8d 48 01             	lea    ecx,[eax+0x1]
c0007752:	c1 e0 03             	shl    eax,0x3
c0007755:	89 0a                	mov    DWORD PTR [edx],ecx
c0007757:	5b                   	pop    ebx
c0007758:	c3                   	ret    
c0007759:	90                   	nop

c000775a <GDT::getNumberOfEntries()>:
c000775a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007760:	c3                   	ret    
c0007761:	90                   	nop

c0007762 <GDT::flush()>:
c0007762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007766:	8b 10                	mov    edx,DWORD PTR [eax]
c0007768:	83 c0 04             	add    eax,0x4
c000776b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007772:	a3 42 08 02 c0       	mov    ds:0xc0020842,eax
c0007777:	66 89 15 40 08 02 c0 	mov    WORD PTR ds:0xc0020840,dx
c000777e:	e9 fa 8b ff ff       	jmp    c000037d <loadGDT>
c0007783:	90                   	nop

c0007784 <GDT::setup()>:
c0007784:	57                   	push   edi
c0007785:	56                   	push   esi
c0007786:	53                   	push   ebx
c0007787:	83 ec 30             	sub    esp,0x30
c000778a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000778e:	6a 00                	push   0x0
c0007790:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007794:	56                   	push   esi
c0007795:	e8 4e ff ff ff       	call   c00076e8 <GDTEntry::setBase(unsigned int)>
c000779a:	6a 00                	push   0x0
c000779c:	56                   	push   esi
c000779d:	e8 62 ff ff ff       	call   c0007704 <GDTEntry::setLimit(unsigned int)>
c00077a2:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077aa:	6a 00                	push   0x0
c00077ac:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077b0:	56                   	push   esi
c00077b1:	e8 32 ff ff ff       	call   c00076e8 <GDTEntry::setBase(unsigned int)>
c00077b6:	68 ff ff ff 00       	push   0xffffff
c00077bb:	56                   	push   esi
c00077bc:	e8 43 ff ff ff       	call   c0007704 <GDTEntry::setLimit(unsigned int)>
c00077c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077c9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077cd:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077d1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077d6:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077db:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077df:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077e3:	89 f8                	mov    eax,edi
c00077e5:	89 fa                	mov    edx,edi
c00077e7:	80 e4 f7             	and    ah,0xf7
c00077ea:	80 ce 60             	or     dh,0x60
c00077ed:	89 c7                	mov    edi,eax
c00077ef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077f3:	80 cc 60             	or     ah,0x60
c00077f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077fe:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007802:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007806:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	6a 00                	push   0x0
c000780f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007813:	50                   	push   eax
c0007814:	e8 cf fe ff ff       	call   c00076e8 <GDTEntry::setBase(unsigned int)>
c0007819:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000781d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007821:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007826:	6a 00                	push   0x0
c0007828:	8d 44 24 34          	lea    eax,[esp+0x34]
c000782c:	50                   	push   eax
c000782d:	e8 b6 fe ff ff       	call   c00076e8 <GDTEntry::setBase(unsigned int)>
c0007832:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007837:	83 c4 0c             	add    esp,0xc
c000783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007842:	53                   	push   ebx
c0007843:	e8 f0 fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0007848:	83 c4 0c             	add    esp,0xc
c000784b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007853:	53                   	push   ebx
c0007854:	e8 df fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0007859:	83 c4 0c             	add    esp,0xc
c000785c:	57                   	push   edi
c000785d:	56                   	push   esi
c000785e:	53                   	push   ebx
c000785f:	e8 d4 fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0007864:	83 c4 0c             	add    esp,0xc
c0007867:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786f:	53                   	push   ebx
c0007870:	e8 c3 fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0007875:	83 c4 0c             	add    esp,0xc
c0007878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000787c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007880:	53                   	push   ebx
c0007881:	e8 b2 fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0007886:	83 c4 0c             	add    esp,0xc
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007891:	53                   	push   ebx
c0007892:	e8 a1 fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0007897:	83 c4 0c             	add    esp,0xc
c000789a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078a2:	53                   	push   ebx
c00078a3:	e8 90 fe ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c00078a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ab:	e8 b2 fe ff ff       	call   c0007762 <GDT::flush()>
c00078b0:	83 c4 40             	add    esp,0x40
c00078b3:	5b                   	pop    ebx
c00078b4:	5e                   	pop    esi
c00078b5:	5f                   	pop    edi
c00078b6:	c3                   	ret    

c00078b7 <idleFunction(void*)>:
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00078bf:	48                   	dec    eax
c00078c0:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00078c5:	75 01                	jne    c00078c8 <idleFunction(void*)+0x11>
c00078c7:	fb                   	sti    
c00078c8:	f4                   	hlt    
c00078c9:	e8 f4 49 01 00       	call   c001c2c2 <idleCommon()>
c00078ce:	eb f8                	jmp    c00078c8 <idleFunction(void*)+0x11>

c00078d0 <IDTEntry::IDTEntry(bool)>:
c00078d0:	83 ec 04             	sub    esp,0x4
c00078d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d7:	88 04 24             	mov    BYTE PTR [esp],al
c00078da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078de:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078f3:	83 e2 f0             	and    edx,0xfffffff0
c00078f6:	83 ca 0e             	or     edx,0xe
c00078f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007900:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007903:	83 e2 ef             	and    edx,0xffffffef
c0007906:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007909:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000790d:	74 05                	je     c0007914 <IDTEntry::IDTEntry(bool)+0x44>
c000790f:	b2 03                	mov    dl,0x3
c0007911:	eb 05                	jmp    c0007918 <IDTEntry::IDTEntry(bool)+0x48>
c0007913:	90                   	nop
c0007914:	b2 00                	mov    dl,0x0
c0007916:	66 90                	xchg   ax,ax
c0007918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000791c:	83 e2 03             	and    edx,0x3
c000791f:	88 d1                	mov    cl,dl
c0007921:	c1 e1 05             	shl    ecx,0x5
c0007924:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007927:	83 e2 9f             	and    edx,0xffffff9f
c000792a:	09 ca                	or     edx,ecx
c000792c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000792f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007933:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007936:	83 ca 80             	or     edx,0xffffff80
c0007939:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000793c:	90                   	nop
c000793d:	83 c4 04             	add    esp,0x4
c0007940:	c3                   	ret    
c0007941:	90                   	nop

c0007942 <IDTEntry::setOffset(unsigned int)>:
c0007942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000794a:	66 89 02             	mov    WORD PTR [edx],ax
c000794d:	c1 e8 10             	shr    eax,0x10
c0007950:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007954:	c3                   	ret    
c0007955:	90                   	nop
c0007956:	66 90                	xchg   ax,ax

c0007958 <IDT::IDT()>:
c0007958:	90                   	nop
c0007959:	c3                   	ret    

c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000795a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795e:	83 c0 30             	add    eax,0x30
c0007961:	c3                   	ret    

c0007962 <IDT::addEntry(IDTEntry, int)>:
c0007962:	53                   	push   ebx
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000796b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000796f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007973:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007976:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000797a:	5b                   	pop    ebx
c000797b:	c3                   	ret    

c000797c <IDT::addEntry(int, void (*)(), bool)>:
c000797c:	53                   	push   ebx
c000797d:	83 ec 10             	sub    esp,0x10
c0007980:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007985:	50                   	push   eax
c0007986:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000798a:	53                   	push   ebx
c000798b:	e8 40 ff ff ff       	call   c00078d0 <IDTEntry::IDTEntry(bool)>
c0007990:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007994:	53                   	push   ebx
c0007995:	e8 a8 ff ff ff       	call   c0007942 <IDTEntry::setOffset(unsigned int)>
c000799a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000799e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079aa:	e8 b3 ff ff ff       	call   c0007962 <IDT::addEntry(IDTEntry, int)>
c00079af:	83 c4 30             	add    esp,0x30
c00079b2:	5b                   	pop    ebx
c00079b3:	c3                   	ret    

c00079b4 <IDT::flush()>:
c00079b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079b8:	66 c7 05 48 08 02 c0 ff 07 	mov    WORD PTR ds:0xc0020848,0x7ff
c00079c1:	a3 4a 08 02 c0       	mov    ds:0xc002084a,eax
c00079c6:	0f 01 1d 48 08 02 c0 	lidtd  ds:0xc0020848
c00079cd:	c3                   	ret    

c00079ce <IDT::setup()>:
c00079ce:	57                   	push   edi
c00079cf:	56                   	push   esi
c00079d0:	53                   	push   ebx
c00079d1:	83 ec 10             	sub    esp,0x10
c00079d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d8:	6a 00                	push   0x0
c00079da:	68 d0 ba 01 c0       	push   0xc001bad0
c00079df:	6a 00                	push   0x0
c00079e1:	53                   	push   ebx
c00079e2:	e8 95 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c00079e7:	6a 00                	push   0x0
c00079e9:	68 e0 ba 01 c0       	push   0xc001bae0
c00079ee:	6a 01                	push   0x1
c00079f0:	53                   	push   ebx
c00079f1:	e8 86 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c00079f6:	83 c4 20             	add    esp,0x20
c00079f9:	6a 00                	push   0x0
c00079fb:	68 ea ba 01 c0       	push   0xc001baea
c0007a00:	6a 02                	push   0x2
c0007a02:	53                   	push   ebx
c0007a03:	e8 74 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a08:	6a 00                	push   0x0
c0007a0a:	68 f4 ba 01 c0       	push   0xc001baf4
c0007a0f:	6a 03                	push   0x3
c0007a11:	53                   	push   ebx
c0007a12:	e8 65 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a17:	83 c4 20             	add    esp,0x20
c0007a1a:	6a 00                	push   0x0
c0007a1c:	68 fe ba 01 c0       	push   0xc001bafe
c0007a21:	6a 04                	push   0x4
c0007a23:	53                   	push   ebx
c0007a24:	e8 53 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a29:	6a 00                	push   0x0
c0007a2b:	68 08 bb 01 c0       	push   0xc001bb08
c0007a30:	6a 05                	push   0x5
c0007a32:	53                   	push   ebx
c0007a33:	e8 44 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a38:	83 c4 20             	add    esp,0x20
c0007a3b:	6a 00                	push   0x0
c0007a3d:	68 12 bb 01 c0       	push   0xc001bb12
c0007a42:	6a 06                	push   0x6
c0007a44:	53                   	push   ebx
c0007a45:	e8 32 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a4a:	6a 00                	push   0x0
c0007a4c:	68 1c bb 01 c0       	push   0xc001bb1c
c0007a51:	6a 07                	push   0x7
c0007a53:	53                   	push   ebx
c0007a54:	e8 23 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a59:	83 c4 20             	add    esp,0x20
c0007a5c:	6a 00                	push   0x0
c0007a5e:	68 26 bb 01 c0       	push   0xc001bb26
c0007a63:	6a 08                	push   0x8
c0007a65:	53                   	push   ebx
c0007a66:	e8 11 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a6b:	6a 00                	push   0x0
c0007a6d:	68 2e bb 01 c0       	push   0xc001bb2e
c0007a72:	6a 09                	push   0x9
c0007a74:	53                   	push   ebx
c0007a75:	e8 02 ff ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a7a:	83 c4 20             	add    esp,0x20
c0007a7d:	6a 00                	push   0x0
c0007a7f:	68 38 bb 01 c0       	push   0xc001bb38
c0007a84:	6a 0a                	push   0xa
c0007a86:	53                   	push   ebx
c0007a87:	e8 f0 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a8c:	6a 00                	push   0x0
c0007a8e:	68 40 bb 01 c0       	push   0xc001bb40
c0007a93:	6a 0b                	push   0xb
c0007a95:	53                   	push   ebx
c0007a96:	e8 e1 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007a9b:	83 c4 20             	add    esp,0x20
c0007a9e:	6a 00                	push   0x0
c0007aa0:	68 48 bb 01 c0       	push   0xc001bb48
c0007aa5:	6a 0c                	push   0xc
c0007aa7:	53                   	push   ebx
c0007aa8:	e8 cf fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007aad:	6a 00                	push   0x0
c0007aaf:	68 50 bb 01 c0       	push   0xc001bb50
c0007ab4:	6a 0d                	push   0xd
c0007ab6:	53                   	push   ebx
c0007ab7:	e8 c0 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007abc:	83 c4 20             	add    esp,0x20
c0007abf:	6a 00                	push   0x0
c0007ac1:	68 58 bb 01 c0       	push   0xc001bb58
c0007ac6:	6a 0e                	push   0xe
c0007ac8:	53                   	push   ebx
c0007ac9:	e8 ae fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007ace:	6a 00                	push   0x0
c0007ad0:	68 60 bb 01 c0       	push   0xc001bb60
c0007ad5:	6a 0f                	push   0xf
c0007ad7:	53                   	push   ebx
c0007ad8:	e8 9f fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	6a 00                	push   0x0
c0007ae2:	68 6a bb 01 c0       	push   0xc001bb6a
c0007ae7:	6a 10                	push   0x10
c0007ae9:	53                   	push   ebx
c0007aea:	e8 8d fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007aef:	6a 00                	push   0x0
c0007af1:	68 74 bb 01 c0       	push   0xc001bb74
c0007af6:	6a 11                	push   0x11
c0007af8:	53                   	push   ebx
c0007af9:	e8 7e fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007afe:	83 c4 20             	add    esp,0x20
c0007b01:	6a 00                	push   0x0
c0007b03:	68 7e bb 01 c0       	push   0xc001bb7e
c0007b08:	6a 12                	push   0x12
c0007b0a:	53                   	push   ebx
c0007b0b:	e8 6c fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b10:	6a 01                	push   0x1
c0007b12:	68 18 bc 01 c0       	push   0xc001bc18
c0007b17:	6a 60                	push   0x60
c0007b19:	53                   	push   ebx
c0007b1a:	e8 5d fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b1f:	83 c4 20             	add    esp,0x20
c0007b22:	6a 00                	push   0x0
c0007b24:	68 1f bc 01 c0       	push   0xc001bc1f
c0007b29:	6a 20                	push   0x20
c0007b2b:	53                   	push   ebx
c0007b2c:	e8 4b fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b31:	6a 00                	push   0x0
c0007b33:	68 0a bc 01 c0       	push   0xc001bc0a
c0007b38:	6a 21                	push   0x21
c0007b3a:	53                   	push   ebx
c0007b3b:	e8 3c fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b40:	83 c4 20             	add    esp,0x20
c0007b43:	6a 00                	push   0x0
c0007b45:	68 11 bc 01 c0       	push   0xc001bc11
c0007b4a:	6a 22                	push   0x22
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 2a fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b52:	6a 00                	push   0x0
c0007b54:	68 88 bb 01 c0       	push   0xc001bb88
c0007b59:	6a 23                	push   0x23
c0007b5b:	53                   	push   ebx
c0007b5c:	e8 1b fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b61:	83 c4 20             	add    esp,0x20
c0007b64:	6a 00                	push   0x0
c0007b66:	68 92 bb 01 c0       	push   0xc001bb92
c0007b6b:	6a 24                	push   0x24
c0007b6d:	53                   	push   ebx
c0007b6e:	e8 09 fe ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b73:	6a 00                	push   0x0
c0007b75:	68 9c bb 01 c0       	push   0xc001bb9c
c0007b7a:	6a 25                	push   0x25
c0007b7c:	53                   	push   ebx
c0007b7d:	e8 fa fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b82:	83 c4 20             	add    esp,0x20
c0007b85:	6a 00                	push   0x0
c0007b87:	68 a6 bb 01 c0       	push   0xc001bba6
c0007b8c:	6a 26                	push   0x26
c0007b8e:	53                   	push   ebx
c0007b8f:	e8 e8 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007b94:	6a 00                	push   0x0
c0007b96:	68 b0 bb 01 c0       	push   0xc001bbb0
c0007b9b:	6a 27                	push   0x27
c0007b9d:	53                   	push   ebx
c0007b9e:	e8 d9 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007ba3:	83 c4 20             	add    esp,0x20
c0007ba6:	6a 00                	push   0x0
c0007ba8:	68 ba bb 01 c0       	push   0xc001bbba
c0007bad:	6a 28                	push   0x28
c0007baf:	53                   	push   ebx
c0007bb0:	e8 c7 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bb5:	6a 00                	push   0x0
c0007bb7:	68 c4 bb 01 c0       	push   0xc001bbc4
c0007bbc:	6a 29                	push   0x29
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 b8 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bc4:	83 c4 20             	add    esp,0x20
c0007bc7:	6a 00                	push   0x0
c0007bc9:	68 ce bb 01 c0       	push   0xc001bbce
c0007bce:	6a 2a                	push   0x2a
c0007bd0:	53                   	push   ebx
c0007bd1:	e8 a6 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bd6:	6a 00                	push   0x0
c0007bd8:	68 d8 bb 01 c0       	push   0xc001bbd8
c0007bdd:	6a 2b                	push   0x2b
c0007bdf:	53                   	push   ebx
c0007be0:	e8 97 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007be5:	83 c4 20             	add    esp,0x20
c0007be8:	6a 00                	push   0x0
c0007bea:	68 e2 bb 01 c0       	push   0xc001bbe2
c0007bef:	6a 2c                	push   0x2c
c0007bf1:	53                   	push   ebx
c0007bf2:	e8 85 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007bf7:	6a 00                	push   0x0
c0007bf9:	68 ec bb 01 c0       	push   0xc001bbec
c0007bfe:	6a 2d                	push   0x2d
c0007c00:	53                   	push   ebx
c0007c01:	e8 76 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c06:	83 c4 20             	add    esp,0x20
c0007c09:	6a 00                	push   0x0
c0007c0b:	68 f6 bb 01 c0       	push   0xc001bbf6
c0007c10:	6a 2e                	push   0x2e
c0007c12:	53                   	push   ebx
c0007c13:	e8 64 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c18:	6a 00                	push   0x0
c0007c1a:	68 00 bc 01 c0       	push   0xc001bc00
c0007c1f:	6a 2f                	push   0x2f
c0007c21:	53                   	push   ebx
c0007c22:	e8 55 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c27:	83 c4 20             	add    esp,0x20
c0007c2a:	6a 00                	push   0x0
c0007c2c:	68 56 bc 01 c0       	push   0xc001bc56
c0007c31:	6a 30                	push   0x30
c0007c33:	53                   	push   ebx
c0007c34:	e8 43 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c39:	6a 00                	push   0x0
c0007c3b:	68 60 bc 01 c0       	push   0xc001bc60
c0007c40:	6a 31                	push   0x31
c0007c42:	53                   	push   ebx
c0007c43:	e8 34 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c48:	83 c4 20             	add    esp,0x20
c0007c4b:	6a 00                	push   0x0
c0007c4d:	68 6a bc 01 c0       	push   0xc001bc6a
c0007c52:	6a 32                	push   0x32
c0007c54:	53                   	push   ebx
c0007c55:	e8 22 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c5a:	6a 00                	push   0x0
c0007c5c:	68 74 bc 01 c0       	push   0xc001bc74
c0007c61:	6a 33                	push   0x33
c0007c63:	53                   	push   ebx
c0007c64:	e8 13 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c69:	83 c4 20             	add    esp,0x20
c0007c6c:	6a 00                	push   0x0
c0007c6e:	68 7e bc 01 c0       	push   0xc001bc7e
c0007c73:	6a 34                	push   0x34
c0007c75:	53                   	push   ebx
c0007c76:	e8 01 fd ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c7b:	6a 00                	push   0x0
c0007c7d:	68 88 bc 01 c0       	push   0xc001bc88
c0007c82:	6a 35                	push   0x35
c0007c84:	53                   	push   ebx
c0007c85:	e8 f2 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c8a:	83 c4 20             	add    esp,0x20
c0007c8d:	6a 00                	push   0x0
c0007c8f:	68 92 bc 01 c0       	push   0xc001bc92
c0007c94:	6a 36                	push   0x36
c0007c96:	53                   	push   ebx
c0007c97:	e8 e0 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007c9c:	6a 00                	push   0x0
c0007c9e:	68 9c bc 01 c0       	push   0xc001bc9c
c0007ca3:	6a 37                	push   0x37
c0007ca5:	53                   	push   ebx
c0007ca6:	e8 d1 fc ff ff       	call   c000797c <IDT::addEntry(int, void (*)(), bool)>
c0007cab:	83 c4 1c             	add    esp,0x1c
c0007cae:	6a 03                	push   0x3
c0007cb0:	6a 02                	push   0x2
c0007cb2:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0007cb8:	e8 75 24 00 00       	call   c000a132 <VAS::allocatePages(int, int)>
c0007cbd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc4:	89 c6                	mov    esi,eax
c0007cc6:	e8 92 01 00 00       	call   c0007e5d <malloc>
c0007ccb:	81 c6 00 20 00 00    	add    esi,0x2000
c0007cd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd4:	89 c7                	mov    edi,eax
c0007cd6:	e8 01 16 00 00       	call   c00092dc <TSS::TSS()>
c0007cdb:	83 c4 0c             	add    esp,0xc
c0007cde:	68 26 bb 01 c0       	push   0xc001bb26
c0007ce3:	56                   	push   esi
c0007ce4:	57                   	push   edi
c0007ce5:	e8 36 16 00 00       	call   c0009320 <TSS::setup(unsigned long, unsigned long)>
c0007cea:	89 c6                	mov    esi,eax
c0007cec:	58                   	pop    eax
c0007ced:	5a                   	pop    edx
c0007cee:	6a 00                	push   0x0
c0007cf0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf4:	50                   	push   eax
c0007cf5:	e8 d6 fb ff ff       	call   c00078d0 <IDTEntry::IDTEntry(bool)>
c0007cfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cfe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007d03:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d0a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d14:	80 ce 05             	or     dh,0x5
c0007d17:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d22:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d28:	e8 87 fc ff ff       	call   c00079b4 <IDT::flush()>
c0007d2d:	83 c4 20             	add    esp,0x20
c0007d30:	5b                   	pop    ebx
c0007d31:	5e                   	pop    esi
c0007d32:	5f                   	pop    edi
c0007d33:	c3                   	ret    

c0007d34 <sbrk>:
c0007d34:	55                   	push   ebp
c0007d35:	57                   	push   edi
c0007d36:	56                   	push   esi
c0007d37:	53                   	push   ebx
c0007d38:	83 ec 1c             	sub    esp,0x1c
c0007d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d3f:	85 c0                	test   eax,eax
c0007d41:	74 5f                	je     c0007da2 <sbrk+0x6e>
c0007d43:	78 64                	js     c0007da9 <sbrk+0x75>
c0007d45:	8b 15 a8 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f5a8
c0007d4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d4f:	05 ff 0f 00 00       	add    eax,0xfff
c0007d54:	89 c5                	mov    ebp,eax
c0007d56:	78 69                	js     c0007dc1 <sbrk+0x8d>
c0007d58:	c1 fd 0c             	sar    ebp,0xc
c0007d5b:	bb 00 00 00 00       	mov    ebx,0x0
c0007d60:	8b 35 30 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020930
c0007d66:	8b 3d a8 f5 01 c0    	mov    edi,DWORD PTR ds:0xc001f5a8
c0007d6c:	e8 b9 04 00 00       	call   c000822a <Phys::allocatePage()>
c0007d71:	68 01 04 00 00       	push   0x401
c0007d76:	57                   	push   edi
c0007d77:	50                   	push   eax
c0007d78:	56                   	push   esi
c0007d79:	e8 b0 22 00 00       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d7e:	81 05 a8 f5 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f5a8,0x1000
c0007d88:	43                   	inc    ebx
c0007d89:	83 c4 10             	add    esp,0x10
c0007d8c:	39 dd                	cmp    ebp,ebx
c0007d8e:	75 d0                	jne    c0007d60 <sbrk+0x2c>
c0007d90:	0f 20 d8             	mov    eax,cr3
c0007d93:	0f 22 d8             	mov    cr3,eax
c0007d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d9a:	83 c4 1c             	add    esp,0x1c
c0007d9d:	5b                   	pop    ebx
c0007d9e:	5e                   	pop    esi
c0007d9f:	5f                   	pop    edi
c0007da0:	5d                   	pop    ebp
c0007da1:	c3                   	ret    
c0007da2:	a1 a8 f5 01 c0       	mov    eax,ds:0xc001f5a8
c0007da7:	eb f1                	jmp    c0007d9a <sbrk+0x66>
c0007da9:	83 ec 08             	sub    esp,0x8
c0007dac:	50                   	push   eax
c0007dad:	68 a4 d5 01 c0       	push   0xc001d5a4
c0007db2:	e8 35 2e 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dbf:	eb d9                	jmp    c0007d9a <sbrk+0x66>
c0007dc1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dc7:	eb 8f                	jmp    c0007d58 <sbrk+0x24>

c0007dc9 <mmap>:
c0007dc9:	83 ec 18             	sub    esp,0x18
c0007dcc:	68 d4 d5 01 c0       	push   0xc001d5d4
c0007dd1:	e8 65 89 00 00       	call   c001073b <Krnl::panic(char const*)>
c0007dd6:	b8 00 00 00 00       	mov    eax,0x0
c0007ddb:	83 c4 1c             	add    esp,0x1c
c0007dde:	c3                   	ret    

c0007ddf <munmap>:
c0007ddf:	83 ec 18             	sub    esp,0x18
c0007de2:	68 d9 d5 01 c0       	push   0xc001d5d9
c0007de7:	e8 4f 89 00 00       	call   c001073b <Krnl::panic(char const*)>
c0007dec:	b8 00 00 00 00       	mov    eax,0x0
c0007df1:	83 c4 1c             	add    esp,0x1c
c0007df4:	c3                   	ret    

c0007df5 <liballoc_lock()>:
c0007df5:	fa                   	cli    
c0007df6:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	c3                   	ret    

c0007e02 <liballoc_unlock()>:
c0007e02:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0007e07:	48                   	dec    eax
c0007e08:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0007e0d:	75 01                	jne    c0007e10 <liballoc_unlock()+0xe>
c0007e0f:	fb                   	sti    
c0007e10:	b8 00 00 00 00       	mov    eax,0x0
c0007e15:	c3                   	ret    

c0007e16 <liballoc_alloc(int)>:
c0007e16:	83 ec 10             	sub    esp,0x10
c0007e19:	6a 01                	push   0x1
c0007e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e1f:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0007e25:	e8 08 23 00 00       	call   c000a132 <VAS::allocatePages(int, int)>
c0007e2a:	83 c4 1c             	add    esp,0x1c
c0007e2d:	c3                   	ret    

c0007e2e <liballoc_free(void*, int)>:
c0007e2e:	83 ec 14             	sub    esp,0x14
c0007e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e35:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c0007e3b:	e8 ae 1f 00 00       	call   c0009dee <VAS::freeAllocatedPages(unsigned long)>
c0007e40:	b8 00 00 00 00       	mov    eax,0x0
c0007e45:	83 c4 1c             	add    esp,0x1c
c0007e48:	c3                   	ret    

c0007e49 <realloc>:
c0007e49:	83 ec 14             	sub    esp,0x14
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e54:	e8 f8 96 ff ff       	call   c0001551 <dlrealloc>
c0007e59:	83 c4 1c             	add    esp,0x1c
c0007e5c:	c3                   	ret    

c0007e5d <malloc>:
c0007e5d:	83 ec 18             	sub    esp,0x18
c0007e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e64:	e8 ab 91 ff ff       	call   c0001014 <dlmalloc>
c0007e69:	83 c4 1c             	add    esp,0x1c
c0007e6c:	c3                   	ret    

c0007e6d <free>:
c0007e6d:	83 ec 18             	sub    esp,0x18
c0007e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e74:	e8 40 8e ff ff       	call   c0000cb9 <dlfree>
c0007e79:	83 c4 1c             	add    esp,0x1c
c0007e7c:	c3                   	ret    

c0007e7d <rfree>:
c0007e7d:	83 ec 18             	sub    esp,0x18
c0007e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e84:	e8 30 8e ff ff       	call   c0000cb9 <dlfree>
c0007e89:	83 c4 1c             	add    esp,0x1c
c0007e8c:	c3                   	ret    

c0007e8d <calloc>:
c0007e8d:	56                   	push   esi
c0007e8e:	53                   	push   ebx
c0007e8f:	83 ec 10             	sub    esp,0x10
c0007e92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e96:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e9b:	53                   	push   ebx
c0007e9c:	e8 bc ff ff ff       	call   c0007e5d <malloc>
c0007ea1:	89 c6                	mov    esi,eax
c0007ea3:	83 c4 0c             	add    esp,0xc
c0007ea6:	53                   	push   ebx
c0007ea7:	6a 00                	push   0x0
c0007ea9:	50                   	push   eax
c0007eaa:	e8 41 86 ff ff       	call   c00004f0 <memset>
c0007eaf:	89 f0                	mov    eax,esi
c0007eb1:	83 c4 14             	add    esp,0x14
c0007eb4:	5b                   	pop    ebx
c0007eb5:	5e                   	pop    esi
c0007eb6:	c3                   	ret    

c0007eb7 <Krnl::setBootMessage(char const*)>:
c0007eb7:	57                   	push   edi
c0007eb8:	56                   	push   esi
c0007eb9:	53                   	push   ebx
c0007eba:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ec0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ec7:	68 9e 00 00 00       	push   0x9e
c0007ecc:	6a 00                	push   0x0
c0007ece:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ed2:	56                   	push   esi
c0007ed3:	e8 18 86 ff ff       	call   c00004f0 <memset>
c0007ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007edb:	e8 80 86 ff ff       	call   c0000560 <strlen>
c0007ee0:	ba 50 00 00 00       	mov    edx,0x50
c0007ee5:	83 c4 10             	add    esp,0x10
c0007ee8:	29 c2                	sub    edx,eax
c0007eea:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007eee:	d1 ea                	shr    edx,1
c0007ef0:	84 c0                	test   al,al
c0007ef2:	74 19                	je     c0007f0d <Krnl::setBootMessage(char const*)+0x56>
c0007ef4:	01 d2                	add    edx,edx
c0007ef6:	43                   	inc    ebx
c0007ef7:	01 f2                	add    edx,esi
c0007ef9:	80 cc 0f             	or     ah,0xf
c0007efc:	83 c2 02             	add    edx,0x2
c0007eff:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007f03:	43                   	inc    ebx
c0007f04:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f09:	84 c0                	test   al,al
c0007f0b:	75 ec                	jne    c0007ef9 <Krnl::setBootMessage(char const*)+0x42>
c0007f0d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f12:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f19:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f1f:	5b                   	pop    ebx
c0007f20:	5e                   	pop    esi
c0007f21:	5f                   	pop    edi
c0007f22:	c3                   	ret    

c0007f23 <kernel_main>:
c0007f23:	55                   	push   ebp
c0007f24:	57                   	push   edi
c0007f25:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f2a:	56                   	push   esi
c0007f2b:	89 fa                	mov    edx,edi
c0007f2d:	53                   	push   ebx
c0007f2e:	31 f6                	xor    esi,esi
c0007f30:	83 ec 38             	sub    esp,0x38
c0007f33:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f38:	a3 50 08 02 c0       	mov    ds:0xc0020850,eax
c0007f3d:	89 f0                	mov    eax,esi
c0007f3f:	ee                   	out    dx,al
c0007f40:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f45:	b0 80                	mov    al,0x80
c0007f47:	89 da                	mov    edx,ebx
c0007f49:	ee                   	out    dx,al
c0007f4a:	b1 03                	mov    cl,0x3
c0007f4c:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f51:	88 c8                	mov    al,cl
c0007f53:	ee                   	out    dx,al
c0007f54:	89 f0                	mov    eax,esi
c0007f56:	89 fa                	mov    edx,edi
c0007f58:	ee                   	out    dx,al
c0007f59:	88 c8                	mov    al,cl
c0007f5b:	89 da                	mov    edx,ebx
c0007f5d:	ee                   	out    dx,al
c0007f5e:	b0 c7                	mov    al,0xc7
c0007f60:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f65:	ee                   	out    dx,al
c0007f66:	b0 0b                	mov    al,0xb
c0007f68:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f6d:	ee                   	out    dx,al
c0007f6e:	68 e0 d5 01 c0       	push   0xc001d5e0
c0007f73:	e8 74 2c 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0007f78:	0f be 05 c0 f5 01 c0 	movsx  eax,BYTE PTR ds:0xc001f5c0
c0007f7f:	83 c4 10             	add    esp,0x10
c0007f82:	84 c0                	test   al,al
c0007f84:	74 5c                	je     c0007fe2 <kernel_main+0xbf>
c0007f86:	31 db                	xor    ebx,ebx
c0007f88:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f8d:	bf 05 00 00 00       	mov    edi,0x5
c0007f92:	31 f6                	xor    esi,esi
c0007f94:	eb 14                	jmp    c0007faa <kernel_main+0x87>
c0007f96:	47                   	inc    edi
c0007f97:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f9c:	31 f6                	xor    esi,esi
c0007f9e:	43                   	inc    ebx
c0007f9f:	0f be 83 c0 f5 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0a40]
c0007fa6:	84 c0                	test   al,al
c0007fa8:	74 38                	je     c0007fe2 <kernel_main+0xbf>
c0007faa:	80 be f6 f5 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe0a0a],0xdb
c0007fb1:	0f 84 97 00 00 00    	je     c000804e <kernel_main+0x12b>
c0007fb7:	3c 0d                	cmp    al,0xd
c0007fb9:	74 e3                	je     c0007f9e <kernel_main+0x7b>
c0007fbb:	3c 0a                	cmp    al,0xa
c0007fbd:	74 d7                	je     c0007f96 <kernel_main+0x73>
c0007fbf:	83 ec 0c             	sub    esp,0xc
c0007fc2:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fc6:	57                   	push   edi
c0007fc7:	43                   	inc    ebx
c0007fc8:	52                   	push   edx
c0007fc9:	46                   	inc    esi
c0007fca:	6a 00                	push   0x0
c0007fcc:	6a 0e                	push   0xe
c0007fce:	50                   	push   eax
c0007fcf:	e8 c4 e4 00 00       	call   c0016498 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fd4:	83 c4 20             	add    esp,0x20
c0007fd7:	0f be 83 c0 f5 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0a40]
c0007fde:	84 c0                	test   al,al
c0007fe0:	75 c8                	jne    c0007faa <kernel_main+0x87>
c0007fe2:	83 ec 0c             	sub    esp,0xc
c0007fe5:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fea:	05 ff 0f 00 00       	add    eax,0xfff
c0007fef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ff4:	50                   	push   eax
c0007ff5:	e8 82 03 00 00       	call   c000837c <Phys::physicalMemorySetup(unsigned int)>
c0007ffa:	e8 59 1b 00 00       	call   c0009b58 <Virt::virtualMemorySetup()>
c0007fff:	58                   	pop    eax
c0008000:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008004:	53                   	push   ebx
c0008005:	e8 0a 1c 00 00       	call   c0009c14 <VAS::VAS()>
c000800a:	89 1d 30 09 02 c0    	mov    DWORD PTR ds:0xc0020930,ebx
c0008010:	e8 0b 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008015:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c000801c:	e8 3c fe ff ff       	call   c0007e5d <malloc>
c0008021:	89 04 24             	mov    DWORD PTR [esp],eax
c0008024:	89 c6                	mov    esi,eax
c0008026:	e8 af f1 ff ff       	call   c00071da <Computer::Computer()>
c000802b:	6a 00                	push   0x0
c000802d:	89 35 38 08 02 c0    	mov    DWORD PTR ds:0xc0020838,esi
c0008033:	6a 00                	push   0x0
c0008035:	6a 00                	push   0x0
c0008037:	56                   	push   esi
c0008038:	e8 43 f5 ff ff       	call   c0007580 <Computer::open(int, int, void*)>
c000803d:	83 c4 14             	add    esp,0x14
c0008040:	53                   	push   ebx
c0008041:	e8 84 1e 00 00       	call   c0009eca <VAS::~VAS()>
c0008046:	83 c4 3c             	add    esp,0x3c
c0008049:	5b                   	pop    ebx
c000804a:	5e                   	pop    esi
c000804b:	5f                   	pop    edi
c000804c:	5d                   	pop    ebp
c000804d:	c3                   	ret    
c000804e:	31 d2                	xor    edx,edx
c0008050:	8a 96 f5 f5 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe0a0b]
c0008056:	83 e2 fe             	and    edx,0xfffffffe
c0008059:	81 fa ba 00 00 00    	cmp    edx,0xba
c000805f:	0f 85 52 ff ff ff    	jne    c0007fb7 <kernel_main+0x94>
c0008065:	45                   	inc    ebp
c0008066:	e9 4c ff ff ff       	jmp    c0007fb7 <kernel_main+0x94>

c000806b <Phys::allocateDMA(unsigned long)>:
c000806b:	55                   	push   ebp
c000806c:	31 ed                	xor    ebp,ebp
c000806e:	57                   	push   edi
c000806f:	56                   	push   esi
c0008070:	53                   	push   ebx
c0008071:	31 db                	xor    ebx,ebx
c0008073:	83 ec 1c             	sub    esp,0x1c
c0008076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000807a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008082:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008088:	31 c0                	xor    eax,eax
c000808a:	c1 ef 0c             	shr    edi,0xc
c000808d:	eb 19                	jmp    c00080a8 <Phys::allocateDMA(unsigned long)+0x3d>
c000808f:	85 c0                	test   eax,eax
c0008091:	75 06                	jne    c0008099 <Phys::allocateDMA(unsigned long)+0x2e>
c0008093:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008097:	89 dd                	mov    ebp,ebx
c0008099:	8d 70 01             	lea    esi,[eax+0x1]
c000809c:	39 f7                	cmp    edi,esi
c000809e:	74 33                	je     c00080d3 <Phys::allocateDMA(unsigned long)+0x68>
c00080a0:	89 f0                	mov    eax,esi
c00080a2:	43                   	inc    ebx
c00080a3:	83 fb 0f             	cmp    ebx,0xf
c00080a6:	7f 11                	jg     c00080b9 <Phys::allocateDMA(unsigned long)+0x4e>
c00080a8:	80 bb 6c 08 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf794],0x0
c00080af:	74 de                	je     c000808f <Phys::allocateDMA(unsigned long)+0x24>
c00080b1:	31 c0                	xor    eax,eax
c00080b3:	43                   	inc    ebx
c00080b4:	83 fb 0f             	cmp    ebx,0xf
c00080b7:	7e ef                	jle    c00080a8 <Phys::allocateDMA(unsigned long)+0x3d>
c00080b9:	83 ec 0c             	sub    esp,0xc
c00080bc:	68 f8 d5 01 c0       	push   0xc001d5f8
c00080c1:	e8 75 86 00 00       	call   c001073b <Krnl::panic(char const*)>
c00080c6:	83 c4 10             	add    esp,0x10
c00080c9:	31 c0                	xor    eax,eax
c00080cb:	83 c4 1c             	add    esp,0x1c
c00080ce:	5b                   	pop    ebx
c00080cf:	5e                   	pop    esi
c00080d0:	5f                   	pop    edi
c00080d1:	5d                   	pop    ebp
c00080d2:	c3                   	ret    
c00080d3:	89 e9                	mov    ecx,ebp
c00080d5:	c1 f9 04             	sar    ecx,0x4
c00080d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080dc:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080e0:	89 ca                	mov    edx,ecx
c00080e2:	4a                   	dec    edx
c00080e3:	79 03                	jns    c00080e8 <Phys::allocateDMA(unsigned long)+0x7d>
c00080e5:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080e8:	c1 fa 04             	sar    edx,0x4
c00080eb:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080ef:	74 08                	je     c00080f9 <Phys::allocateDMA(unsigned long)+0x8e>
c00080f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080f5:	31 c0                	xor    eax,eax
c00080f7:	eb ba                	jmp    c00080b3 <Phys::allocateDMA(unsigned long)+0x48>
c00080f9:	85 f6                	test   esi,esi
c00080fb:	74 15                	je     c0008112 <Phys::allocateDMA(unsigned long)+0xa7>
c00080fd:	8d 95 6c 08 02 c0    	lea    edx,[ebp-0x3ffdf794]
c0008103:	8d 84 05 6d 08 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf793]
c000810a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000810d:	42                   	inc    edx
c000810e:	39 d0                	cmp    eax,edx
c0008110:	75 f8                	jne    c000810a <Phys::allocateDMA(unsigned long)+0x9f>
c0008112:	01 3d 64 08 02 c0    	add    DWORD PTR ds:0xc0020864,edi
c0008118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000811c:	85 c0                	test   eax,eax
c000811e:	74 17                	je     c0008137 <Phys::allocateDMA(unsigned long)+0xcc>
c0008120:	83 ec 0c             	sub    esp,0xc
c0008123:	68 f8 d5 01 c0       	push   0xc001d5f8
c0008128:	e8 0e 86 00 00       	call   c001073b <Krnl::panic(char const*)>
c000812d:	83 c4 10             	add    esp,0x10
c0008130:	89 f0                	mov    eax,esi
c0008132:	e9 6b ff ff ff       	jmp    c00080a2 <Phys::allocateDMA(unsigned long)+0x37>
c0008137:	c1 e5 0c             	shl    ebp,0xc
c000813a:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008140:	eb 89                	jmp    c00080cb <Phys::allocateDMA(unsigned long)+0x60>

c0008142 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008142:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008146:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000814c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008150:	c1 ea 0c             	shr    edx,0xc
c0008153:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008158:	29 15 64 08 02 c0    	sub    DWORD PTR ds:0xc0020864,edx
c000815e:	c1 e8 0c             	shr    eax,0xc
c0008161:	85 d2                	test   edx,edx
c0008163:	74 0f                	je     c0008174 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008165:	05 6c 08 02 c0       	add    eax,0xc002086c
c000816a:	01 c2                	add    edx,eax
c000816c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000816f:	40                   	inc    eax
c0008170:	39 d0                	cmp    eax,edx
c0008172:	75 f8                	jne    c000816c <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008174:	c3                   	ret    

c0008175 <Phys::setPageState(unsigned long, bool)>:
c0008175:	56                   	push   esi
c0008176:	ba 01 00 00 00       	mov    edx,0x1
c000817b:	53                   	push   ebx
c000817c:	8b 35 04 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f704
c0008182:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008186:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000818a:	89 c8                	mov    eax,ecx
c000818c:	83 e1 07             	and    ecx,0x7
c000818f:	c1 e8 03             	shr    eax,0x3
c0008192:	d3 e3                	shl    ebx,cl
c0008194:	01 c6                	add    esi,eax
c0008196:	d3 e2                	shl    edx,cl
c0008198:	f7 d2                	not    edx
c000819a:	20 16                	and    BYTE PTR [esi],dl
c000819c:	03 05 04 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f704
c00081a2:	08 18                	or     BYTE PTR [eax],bl
c00081a4:	5b                   	pop    ebx
c00081a5:	5e                   	pop    esi
c00081a6:	c3                   	ret    

c00081a7 <Phys::getPageState(unsigned long)>:
c00081a7:	53                   	push   ebx
c00081a8:	8b 15 04 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f704
c00081ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081b2:	31 db                	xor    ebx,ebx
c00081b4:	89 c8                	mov    eax,ecx
c00081b6:	83 e1 07             	and    ecx,0x7
c00081b9:	c1 e8 03             	shr    eax,0x3
c00081bc:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081bf:	89 d8                	mov    eax,ebx
c00081c1:	5b                   	pop    ebx
c00081c2:	d3 f8                	sar    eax,cl
c00081c4:	83 e0 01             	and    eax,0x1
c00081c7:	c3                   	ret    

c00081c8 <Phys::freePage(unsigned long)>:
c00081c8:	53                   	push   ebx
c00081c9:	83 ec 08             	sub    esp,0x8
c00081cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d0:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081d6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081dc:	76 3a                	jbe    c0008218 <Phys::freePage(unsigned long)+0x50>
c00081de:	c1 e8 0c             	shr    eax,0xc
c00081e1:	50                   	push   eax
c00081e2:	89 c3                	mov    ebx,eax
c00081e4:	e8 be ff ff ff       	call   c00081a7 <Phys::getPageState(unsigned long)>
c00081e9:	5a                   	pop    edx
c00081ea:	84 c0                	test   al,al
c00081ec:	74 19                	je     c0008207 <Phys::freePage(unsigned long)+0x3f>
c00081ee:	83 ec 08             	sub    esp,0x8
c00081f1:	ff 0d 64 08 02 c0    	dec    DWORD PTR ds:0xc0020864
c00081f7:	6a 00                	push   0x0
c00081f9:	53                   	push   ebx
c00081fa:	e8 76 ff ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	c7 44 24 10 9d d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d69d
c000820f:	83 c4 08             	add    esp,0x8
c0008212:	5b                   	pop    ebx
c0008213:	e9 23 85 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c0008218:	68 00 10 00 00       	push   0x1000
c000821d:	50                   	push   eax
c000821e:	e8 1f ff ff ff       	call   c0008142 <Phys::freeDMA(unsigned long, unsigned long)>
c0008223:	59                   	pop    ecx
c0008224:	5b                   	pop    ebx
c0008225:	83 c4 08             	add    esp,0x8
c0008228:	5b                   	pop    ebx
c0008229:	c3                   	ret    

c000822a <Phys::allocatePage()>:
c000822a:	56                   	push   esi
c000822b:	53                   	push   ebx
c000822c:	83 ec 14             	sub    esp,0x14
c000822f:	8b 35 58 08 02 c0    	mov    esi,DWORD PTR ds:0xc0020858
c0008235:	89 f3                	mov    ebx,esi
c0008237:	eb 0a                	jmp    c0008243 <Phys::allocatePage()+0x19>
c0008239:	89 1d 58 08 02 c0    	mov    DWORD PTR ds:0xc0020858,ebx
c000823f:	39 de                	cmp    esi,ebx
c0008241:	74 24                	je     c0008267 <Phys::allocatePage()+0x3d>
c0008243:	53                   	push   ebx
c0008244:	e8 5e ff ff ff       	call   c00081a7 <Phys::getPageState(unsigned long)>
c0008249:	5a                   	pop    edx
c000824a:	84 c0                	test   al,al
c000824c:	74 5f                	je     c00082ad <Phys::allocatePage()+0x83>
c000824e:	43                   	inc    ebx
c000824f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008255:	75 e2                	jne    c0008239 <Phys::allocatePage()+0xf>
c0008257:	31 db                	xor    ebx,ebx
c0008259:	c7 05 58 08 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020858,0x0
c0008263:	39 de                	cmp    esi,ebx
c0008265:	75 dc                	jne    c0008243 <Phys::allocatePage()+0x19>
c0008267:	83 ec 0c             	sub    esp,0xc
c000826a:	80 35 7c 08 02 c0 01 	xor    BYTE PTR ds:0xc002087c,0x1
c0008271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008276:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008279:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000827f:	50                   	push   eax
c0008280:	e8 87 26 00 00       	call   c000a90c <VAS::scanForEviction()>
c0008285:	83 c4 10             	add    esp,0x10
c0008288:	85 c0                	test   eax,eax
c000828a:	75 3f                	jne    c00082cb <Phys::allocatePage()+0xa1>
c000828c:	83 ec 0c             	sub    esp,0xc
c000828f:	68 20 d6 01 c0       	push   0xc001d620
c0008294:	e8 a2 84 00 00       	call   c001073b <Krnl::panic(char const*)>
c0008299:	83 c4 10             	add    esp,0x10
c000829c:	8b 1d 58 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020858
c00082a2:	53                   	push   ebx
c00082a3:	e8 ff fe ff ff       	call   c00081a7 <Phys::getPageState(unsigned long)>
c00082a8:	5a                   	pop    edx
c00082a9:	84 c0                	test   al,al
c00082ab:	75 a1                	jne    c000824e <Phys::allocatePage()+0x24>
c00082ad:	6a 01                	push   0x1
c00082af:	53                   	push   ebx
c00082b0:	e8 c0 fe ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00082b5:	a1 58 08 02 c0       	mov    eax,ds:0xc0020858
c00082ba:	5a                   	pop    edx
c00082bb:	ff 05 64 08 02 c0    	inc    DWORD PTR ds:0xc0020864
c00082c1:	c1 e0 0c             	shl    eax,0xc
c00082c4:	59                   	pop    ecx
c00082c5:	83 c4 14             	add    esp,0x14
c00082c8:	5b                   	pop    ebx
c00082c9:	5e                   	pop    esi
c00082ca:	c3                   	ret    
c00082cb:	83 ec 08             	sub    esp,0x8
c00082ce:	89 c2                	mov    edx,eax
c00082d0:	6a 01                	push   0x1
c00082d2:	c1 ea 0c             	shr    edx,0xc
c00082d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082d9:	52                   	push   edx
c00082da:	e8 96 fe ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00082df:	83 c4 10             	add    esp,0x10
c00082e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e6:	eb dd                	jmp    c00082c5 <Phys::allocatePage()+0x9b>

c00082e8 <Phys::allocateContiguousPages(int)>:
c00082e8:	57                   	push   edi
c00082e9:	56                   	push   esi
c00082ea:	53                   	push   ebx
c00082eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082ef:	fa                   	cli    
c00082f0:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00082f6:	31 db                	xor    ebx,ebx
c00082f8:	85 db                	test   ebx,ebx
c00082fa:	75 11                	jne    c000830d <Phys::allocateContiguousPages(int)+0x25>
c00082fc:	e8 29 ff ff ff       	call   c000822a <Phys::allocatePage()>
c0008301:	83 fe 01             	cmp    esi,0x1
c0008304:	89 c7                	mov    edi,eax
c0008306:	74 21                	je     c0008329 <Phys::allocateContiguousPages(int)+0x41>
c0008308:	bb 01 00 00 00       	mov    ebx,0x1
c000830d:	e8 18 ff ff ff       	call   c000822a <Phys::allocatePage()>
c0008312:	89 da                	mov    edx,ebx
c0008314:	c1 e2 0c             	shl    edx,0xc
c0008317:	01 fa                	add    edx,edi
c0008319:	39 c2                	cmp    edx,eax
c000831b:	74 20                	je     c000833d <Phys::allocateContiguousPages(int)+0x55>
c000831d:	bb 01 00 00 00       	mov    ebx,0x1
c0008322:	89 c7                	mov    edi,eax
c0008324:	83 fe 01             	cmp    esi,0x1
c0008327:	75 e4                	jne    c000830d <Phys::allocateContiguousPages(int)+0x25>
c0008329:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000832e:	48                   	dec    eax
c000832f:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0008334:	75 01                	jne    c0008337 <Phys::allocateContiguousPages(int)+0x4f>
c0008336:	fb                   	sti    
c0008337:	89 f8                	mov    eax,edi
c0008339:	5b                   	pop    ebx
c000833a:	5e                   	pop    esi
c000833b:	5f                   	pop    edi
c000833c:	c3                   	ret    
c000833d:	43                   	inc    ebx
c000833e:	39 f3                	cmp    ebx,esi
c0008340:	75 b6                	jne    c00082f8 <Phys::allocateContiguousPages(int)+0x10>
c0008342:	eb e5                	jmp    c0008329 <Phys::allocateContiguousPages(int)+0x41>

c0008344 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008344:	56                   	push   esi
c0008345:	53                   	push   ebx
c0008346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000834a:	39 1d 5c 08 02 c0    	cmp    DWORD PTR ds:0xc002085c,ebx
c0008350:	73 06                	jae    c0008358 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008352:	89 1d 5c 08 02 c0    	mov    DWORD PTR ds:0xc002085c,ebx
c0008358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000835c:	c1 eb 0c             	shr    ebx,0xc
c000835f:	c1 e8 0c             	shr    eax,0xc
c0008362:	39 d8                	cmp    eax,ebx
c0008364:	73 13                	jae    c0008379 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008366:	6a 00                	push   0x0
c0008368:	8d 70 01             	lea    esi,[eax+0x1]
c000836b:	50                   	push   eax
c000836c:	e8 04 fe ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c0008371:	5a                   	pop    edx
c0008372:	89 f0                	mov    eax,esi
c0008374:	59                   	pop    ecx
c0008375:	39 f3                	cmp    ebx,esi
c0008377:	75 ed                	jne    c0008366 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008379:	5b                   	pop    ebx
c000837a:	5e                   	pop    esi
c000837b:	c3                   	ret    

c000837c <Phys::physicalMemorySetup(unsigned int)>:
c000837c:	55                   	push   ebp
c000837d:	57                   	push   edi
c000837e:	56                   	push   esi
c000837f:	53                   	push   ebx
c0008380:	31 db                	xor    ebx,ebx
c0008382:	83 ec 40             	sub    esp,0x40
c0008385:	6a 10                	push   0x10
c0008387:	6a 00                	push   0x0
c0008389:	68 6c 08 02 c0       	push   0xc002086c
c000838e:	e8 5d 81 ff ff       	call   c00004f0 <memset>
c0008393:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008397:	25 00 f0 ff ff       	and    eax,0xfffff000
c000839c:	05 00 10 00 00       	add    eax,0x1000
c00083a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083a5:	5a                   	pop    edx
c00083a6:	59                   	pop    ecx
c00083a7:	50                   	push   eax
c00083a8:	68 b3 d6 01 c0       	push   0xc001d6b3
c00083ad:	e8 3a 28 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00083b2:	83 c4 10             	add    esp,0x10
c00083b5:	83 ec 08             	sub    esp,0x8
c00083b8:	6a 01                	push   0x1
c00083ba:	53                   	push   ebx
c00083bb:	43                   	inc    ebx
c00083bc:	e8 b4 fd ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00083c1:	83 c4 10             	add    esp,0x10
c00083c4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083ca:	75 e9                	jne    c00083b5 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083cc:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083d2:	66 85 c0             	test   ax,ax
c00083d5:	0f 84 97 01 00 00    	je     c0008572 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083db:	89 c7                	mov    edi,eax
c00083dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083e5:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083eb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083f0:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083f4:	eb 15                	jmp    c000840b <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083fa:	83 c3 18             	add    ebx,0x18
c00083fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008401:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008405:	0f 84 77 01 00 00    	je     c0008582 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000840b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000840e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008411:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008414:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008418:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000841c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000841e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008421:	01 f0                	add    eax,esi
c0008423:	55                   	push   ebp
c0008424:	11 fa                	adc    edx,edi
c0008426:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000842a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000842e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008432:	50                   	push   eax
c0008433:	56                   	push   esi
c0008434:	68 50 d6 01 c0       	push   0xc001d650
c0008439:	e8 ae 27 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000843e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008442:	83 c4 10             	add    esp,0x10
c0008445:	09 f8                	or     eax,edi
c0008447:	0f 85 35 01 00 00    	jne    c0008582 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000844d:	4d                   	dec    ebp
c000844e:	75 a6                	jne    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008450:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008454:	ba 00 00 08 00       	mov    edx,0x80000
c0008459:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000845d:	39 f2                	cmp    edx,esi
c000845f:	89 c1                	mov    ecx,eax
c0008461:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008469:	19 f9                	sbb    ecx,edi
c000846b:	0f 82 a7 00 00 00    	jb     c0008518 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008471:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008475:	89 c1                	mov    ecx,eax
c0008477:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000847b:	0f 83 97 00 00 00    	jae    c0008518 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008481:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008486:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000848a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000848e:	39 fa                	cmp    edx,edi
c0008490:	19 e8                	sbb    eax,ebp
c0008492:	0f 82 9a 01 00 00    	jb     c0008632 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008498:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000849c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00084a0:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084a6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084ab:	83 d5 ff             	adc    ebp,0xffffffff
c00084ae:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084b2:	31 c0                	xor    eax,eax
c00084b4:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084b8:	39 fa                	cmp    edx,edi
c00084ba:	89 c1                	mov    ecx,eax
c00084bc:	19 e9                	sbb    ecx,ebp
c00084be:	0f 83 32 ff ff ff    	jae    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084c4:	be 00 00 08 00       	mov    esi,0x80000
c00084c9:	51                   	push   ecx
c00084ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084ce:	57                   	push   edi
c00084cf:	56                   	push   esi
c00084d0:	68 74 d6 01 c0       	push   0xc001d674
c00084d5:	e8 12 27 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00084da:	5d                   	pop    ebp
c00084db:	58                   	pop    eax
c00084dc:	57                   	push   edi
c00084dd:	56                   	push   esi
c00084de:	e8 61 fe ff ff       	call   c0008344 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084eb:	83 c4 0c             	add    esp,0xc
c00084ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084f2:	03 05 68 08 02 c0    	add    eax,DWORD PTR ds:0xc0020868
c00084f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084ff:	a3 68 08 02 c0       	mov    ds:0xc0020868,eax
c0008504:	52                   	push   edx
c0008505:	50                   	push   eax
c0008506:	68 d9 d6 01 c0       	push   0xc001d6d9
c000850b:	e8 dc 26 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0008510:	83 c4 10             	add    esp,0x10
c0008513:	e9 de fe ff ff       	jmp    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008518:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000851c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008520:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008524:	39 ea                	cmp    edx,ebp
c0008526:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000852a:	0f 82 c6 fe ff ff    	jb     c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008530:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008535:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008539:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000853d:	0f 83 b3 fe ff ff    	jae    c00083f6 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008543:	39 ee                	cmp    esi,ebp
c0008545:	89 f8                	mov    eax,edi
c0008547:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000854b:	0f 83 78 ff ff ff    	jae    c00084c9 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008559:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000855d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008561:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008565:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008569:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000856d:	e9 57 ff ff ff       	jmp    c00084c9 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008572:	83 ec 0c             	sub    esp,0xc
c0008575:	68 cb d6 01 c0       	push   0xc001d6cb
c000857a:	e8 bc 81 00 00       	call   c001073b <Krnl::panic(char const*)>
c000857f:	83 c4 10             	add    esp,0x10
c0008582:	83 ec 08             	sub    esp,0x8
c0008585:	bb 60 00 00 00       	mov    ebx,0x60
c000858a:	6a 00                	push   0x0
c000858c:	6a 06                	push   0x6
c000858e:	e8 e2 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c0008593:	58                   	pop    eax
c0008594:	5a                   	pop    edx
c0008595:	6a 00                	push   0x0
c0008597:	6a 07                	push   0x7
c0008599:	e8 d7 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c000859e:	83 05 68 08 02 c0 02 	add    DWORD PTR ds:0xc0020868,0x2
c00085a5:	83 c4 10             	add    esp,0x10
c00085a8:	83 ec 08             	sub    esp,0x8
c00085ab:	6a 00                	push   0x0
c00085ad:	53                   	push   ebx
c00085ae:	43                   	inc    ebx
c00085af:	e8 c1 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00085b4:	83 c4 10             	add    esp,0x10
c00085b7:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085bd:	75 e9                	jne    c00085a8 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085bf:	a1 68 08 02 c0       	mov    eax,ds:0xc0020868
c00085c4:	bb 40 01 00 00       	mov    ebx,0x140
c00085c9:	83 c0 20             	add    eax,0x20
c00085cc:	a3 68 08 02 c0       	mov    ds:0xc0020868,eax
c00085d1:	eb 22                	jmp    c00085f5 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085d3:	83 ec 08             	sub    esp,0x8
c00085d6:	6a 00                	push   0x0
c00085d8:	53                   	push   ebx
c00085d9:	43                   	inc    ebx
c00085da:	e8 96 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c00085df:	a1 68 08 02 c0       	mov    eax,ds:0xc0020868
c00085e4:	83 c4 10             	add    esp,0x10
c00085e7:	40                   	inc    eax
c00085e8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085ee:	a3 68 08 02 c0       	mov    ds:0xc0020868,eax
c00085f3:	74 07                	je     c00085fc <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085f5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085fa:	7e d7                	jle    c00085d3 <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085fc:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008601:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008606:	7f 22                	jg     c000862a <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008608:	83 ec 08             	sub    esp,0x8
c000860b:	6a 00                	push   0x0
c000860d:	53                   	push   ebx
c000860e:	43                   	inc    ebx
c000860f:	e8 61 fb ff ff       	call   c0008175 <Phys::setPageState(unsigned long, bool)>
c0008614:	a1 68 08 02 c0       	mov    eax,ds:0xc0020868
c0008619:	83 c4 10             	add    esp,0x10
c000861c:	40                   	inc    eax
c000861d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008623:	a3 68 08 02 c0       	mov    ds:0xc0020868,eax
c0008628:	75 d7                	jne    c0008601 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000862a:	83 c4 3c             	add    esp,0x3c
c000862d:	5b                   	pop    ebx
c000862e:	5e                   	pop    esi
c000862f:	5f                   	pop    edi
c0008630:	5d                   	pop    ebp
c0008631:	c3                   	ret    
c0008632:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000863a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008642:	e9 51 fe ff ff       	jmp    c0008498 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008647:	90                   	nop

c0008648 <Pipe::isAtty()>:
c0008648:	31 c0                	xor    eax,eax
c000864a:	c3                   	ret    
c000864b:	90                   	nop

c000864c <Pipe::~Pipe()>:
c000864c:	83 ec 0c             	sub    esp,0xc
c000864f:	ba 38 d7 01 c0       	mov    edx,0xc001d738
c0008654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008658:	89 10                	mov    DWORD PTR [eax],edx
c000865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865e:	83 ec 0c             	sub    esp,0xc
c0008661:	50                   	push   eax
c0008662:	e8 d1 10 00 00       	call   c0009738 <UnixFile::~UnixFile()>
c0008667:	83 c4 10             	add    esp,0x10
c000866a:	90                   	nop
c000866b:	83 c4 0c             	add    esp,0xc
c000866e:	c3                   	ret    
c000866f:	90                   	nop

c0008670 <Pipe::~Pipe()>:
c0008670:	83 ec 0c             	sub    esp,0xc
c0008673:	83 ec 0c             	sub    esp,0xc
c0008676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000867a:	e8 cd ff ff ff       	call   c000864c <Pipe::~Pipe()>
c000867f:	83 c4 10             	add    esp,0x10
c0008682:	83 ec 08             	sub    esp,0x8
c0008685:	6a 20                	push   0x20
c0008687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000868b:	e8 66 24 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	83 c4 0c             	add    esp,0xc
c0008696:	c3                   	ret    
c0008697:	90                   	nop

c0008698 <Pipe::write(unsigned long long, void*, int*)>:
c0008698:	55                   	push   ebp
c0008699:	57                   	push   edi
c000869a:	56                   	push   esi
c000869b:	53                   	push   ebx
c000869c:	83 ec 1c             	sub    esp,0x1c
c000869f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086a7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00086b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086b5:	89 d8                	mov    eax,ebx
c00086b7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086ba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086be:	89 d6                	mov    esi,edx
c00086c0:	89 d7                	mov    edi,edx
c00086c2:	c1 ff 1f             	sar    edi,0x1f
c00086c5:	03 34 24             	add    esi,DWORD PTR [esp]
c00086c8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086cc:	c1 f8 1f             	sar    eax,0x1f
c00086cf:	39 f3                	cmp    ebx,esi
c00086d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d9:	19 f8                	sbb    eax,edi
c00086db:	b8 01 00 00 00       	mov    eax,0x1
c00086e0:	72 6e                	jb     c0008750 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086e5:	01 d0                	add    eax,edx
c00086e7:	99                   	cdq    
c00086e8:	f7 fb                	idiv   ebx
c00086ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086ee:	29 d3                	sub    ebx,edx
c00086f0:	89 d7                	mov    edi,edx
c00086f2:	89 de                	mov    esi,ebx
c00086f4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086f7:	c1 fb 1f             	sar    ebx,0x1f
c00086fa:	39 f2                	cmp    edx,esi
c00086fc:	19 d8                	sbb    eax,ebx
c00086fe:	b8 00 00 00 00       	mov    eax,0x0
c0008703:	72 04                	jb     c0008709 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008705:	89 d0                	mov    eax,edx
c0008707:	29 f0                	sub    eax,esi
c0008709:	89 d3                	mov    ebx,edx
c000870b:	29 c3                	sub    ebx,eax
c000870d:	74 0b                	je     c000871a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000870f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008712:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008716:	89 d9                	mov    ecx,ebx
c0008718:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000871a:	85 c0                	test   eax,eax
c000871c:	74 0d                	je     c000872b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000871e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008722:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008725:	89 de                	mov    esi,ebx
c0008727:	89 c1                	mov    ecx,eax
c0008729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000872b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000872e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008733:	75 10                	jne    c0008745 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008735:	83 ec 0c             	sub    esp,0xc
c0008738:	68 f5 d6 01 c0       	push   0xc001d6f5
c000873d:	e8 f9 7f 00 00       	call   c001073b <Krnl::panic(char const*)>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008749:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000874c:	89 08                	mov    DWORD PTR [eax],ecx
c000874e:	31 c0                	xor    eax,eax
c0008750:	83 c4 1c             	add    esp,0x1c
c0008753:	5b                   	pop    ebx
c0008754:	5e                   	pop    esi
c0008755:	5f                   	pop    edi
c0008756:	5d                   	pop    ebp
c0008757:	c3                   	ret    

c0008758 <Pipe::read(unsigned long long, void*, int*)>:
c0008758:	55                   	push   ebp
c0008759:	57                   	push   edi
c000875a:	56                   	push   esi
c000875b:	53                   	push   ebx
c000875c:	83 ec 1c             	sub    esp,0x1c
c000875f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008763:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008767:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000876b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000876e:	89 c8                	mov    eax,ecx
c0008770:	99                   	cdq    
c0008771:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008775:	74 24                	je     c000879b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008777:	39 f9                	cmp    ecx,edi
c0008779:	89 d1                	mov    ecx,edx
c000877b:	19 f1                	sbb    ecx,esi
c000877d:	73 1c                	jae    c000879b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000877f:	fa                   	cli    
c0008780:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0008786:	e8 05 b3 00 00       	call   c0013a90 <schedule()>
c000878b:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0008790:	48                   	dec    eax
c0008791:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0008796:	75 d3                	jne    c000876b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008798:	fb                   	sti    
c0008799:	eb d0                	jmp    c000876b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000879b:	39 f8                	cmp    eax,edi
c000879d:	89 d1                	mov    ecx,edx
c000879f:	89 3c 24             	mov    DWORD PTR [esp],edi
c00087a2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087a6:	19 f1                	sbb    ecx,esi
c00087a8:	73 07                	jae    c00087b1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00087ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087b1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087b4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087b7:	29 f7                	sub    edi,esi
c00087b9:	89 f8                	mov    eax,edi
c00087bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087bf:	99                   	cdq    
c00087c0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087c7:	19 d0                	sbb    eax,edx
c00087c9:	73 07                	jae    c00087d2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087d5:	89 ea                	mov    edx,ebp
c00087d7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087db:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087e0:	74 0d                	je     c00087ef <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087e2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087ef:	85 d2                	test   edx,edx
c00087f1:	74 11                	je     c0008804 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087fa:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087fe:	89 d1                	mov    ecx,edx
c0008800:	89 c7                	mov    edi,eax
c0008802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008804:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008807:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000880a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000880d:	99                   	cdq    
c000880e:	89 f7                	mov    edi,esi
c0008810:	03 04 24             	add    eax,DWORD PTR [esp]
c0008813:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008817:	c1 ff 1f             	sar    edi,0x1f
c000881a:	57                   	push   edi
c000881b:	56                   	push   esi
c000881c:	52                   	push   edx
c000881d:	50                   	push   eax
c000881e:	e8 1d 39 01 00       	call   c001c140 <__umoddi3>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008829:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000882e:	75 10                	jne    c0008840 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	68 12 d7 01 c0       	push   0xc001d712
c0008838:	e8 fe 7e 00 00       	call   c001073b <Krnl::panic(char const*)>
c000883d:	83 c4 10             	add    esp,0x10
c0008840:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008844:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008847:	89 10                	mov    DWORD PTR [eax],edx
c0008849:	83 c4 1c             	add    esp,0x1c
c000884c:	31 c0                	xor    eax,eax
c000884e:	5b                   	pop    ebx
c000884f:	5e                   	pop    esi
c0008850:	5f                   	pop    edi
c0008851:	5d                   	pop    ebp
c0008852:	c3                   	ret    
c0008853:	90                   	nop

c0008854 <Pipe::Pipe(int)>:
c0008854:	83 ec 0c             	sub    esp,0xc
c0008857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000885b:	83 ec 08             	sub    esp,0x8
c000885e:	6a 00                	push   0x0
c0008860:	50                   	push   eax
c0008861:	e8 f0 0c 00 00       	call   c0009556 <UnixFile::UnixFile(int)>
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	ba 38 d7 01 c0       	mov    edx,0xc001d738
c000886e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008872:	89 10                	mov    DWORD PTR [eax],edx
c0008874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008878:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000887c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000887f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008883:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000888e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008899:	83 ec 0c             	sub    esp,0xc
c000889c:	50                   	push   eax
c000889d:	e8 bb f5 ff ff       	call   c0007e5d <malloc>
c00088a2:	83 c4 10             	add    esp,0x10
c00088a5:	89 c2                	mov    edx,eax
c00088a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088b2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088b6:	90                   	nop
c00088b7:	83 c4 0c             	add    esp,0xc
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::isAtty()>:
c00088bc:	b0 01                	mov    al,0x1
c00088be:	c3                   	ret    
c00088bf:	90                   	nop

c00088c0 <VgaText::~VgaText()>:
c00088c0:	83 ec 0c             	sub    esp,0xc
c00088c3:	ba c0 d7 01 c0       	mov    edx,0xc001d7c0
c00088c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088cc:	89 10                	mov    DWORD PTR [eax],edx
c00088ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088d2:	83 ec 0c             	sub    esp,0xc
c00088d5:	50                   	push   eax
c00088d6:	e8 5d 0e 00 00       	call   c0009738 <UnixFile::~UnixFile()>
c00088db:	83 c4 10             	add    esp,0x10
c00088de:	90                   	nop
c00088df:	83 c4 0c             	add    esp,0xc
c00088e2:	c3                   	ret    
c00088e3:	90                   	nop

c00088e4 <VgaText::~VgaText()>:
c00088e4:	83 ec 0c             	sub    esp,0xc
c00088e7:	83 ec 0c             	sub    esp,0xc
c00088ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088ee:	e8 cd ff ff ff       	call   c00088c0 <VgaText::~VgaText()>
c00088f3:	83 c4 10             	add    esp,0x10
c00088f6:	83 ec 08             	sub    esp,0x8
c00088f9:	68 34 01 00 00       	push   0x134
c00088fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008902:	e8 ef 21 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	83 c4 0c             	add    esp,0xc
c000890d:	c3                   	ret    

c000890e <VgaText::read(unsigned long long, void*, int*)>:
c000890e:	83 ec 10             	sub    esp,0x10
c0008911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891d:	e8 24 45 00 00       	call   c000ce46 <readKeyboard(VgaText*, char*, unsigned long)>
c0008922:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008926:	89 02                	mov    DWORD PTR [edx],eax
c0008928:	31 c0                	xor    eax,eax
c000892a:	83 c4 1c             	add    esp,0x1c
c000892d:	c3                   	ret    

c000892e <setTerminalScrollLock(bool)>:
c000892e:	c3                   	ret    

c000892f <doTerminalCycle()>:
c000892f:	c3                   	ret    

c0008930 <addToTerminalCycle(VgaText*)>:
c0008930:	c3                   	ret    

c0008931 <scrollTerminalScrollLock(int)>:
c0008931:	c3                   	ret    

c0008932 <VgaText::updateTitle()>:
c0008932:	c3                   	ret    
c0008933:	90                   	nop

c0008934 <VgaText::load()>:
c0008934:	c3                   	ret    
c0008935:	90                   	nop

c0008936 <VgaText::updateCursor()>:
c0008936:	83 ec 14             	sub    esp,0x14
c0008939:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000893d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008940:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008943:	e8 bc db 00 00       	call   c0016504 <HalConsoleCursorUpdate(int, int)>
c0008948:	83 c4 1c             	add    esp,0x1c
c000894b:	c3                   	ret    

c000894c <VgaText::doANSI_SGR(int)>:
c000894c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008954:	85 d2                	test   edx,edx
c0008956:	75 0b                	jne    c0008963 <VgaText::doANSI_SGR(int)+0x17>
c0008958:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000895b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000895e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008961:	eb 59                	jmp    c00089bc <VgaText::doANSI_SGR(int)+0x70>
c0008963:	83 fa 07             	cmp    edx,0x7
c0008966:	75 0b                	jne    c0008973 <VgaText::doANSI_SGR(int)+0x27>
c0008968:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000896b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000896e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008971:	eb 49                	jmp    c00089bc <VgaText::doANSI_SGR(int)+0x70>
c0008973:	83 fa 1b             	cmp    edx,0x1b
c0008976:	74 e0                	je     c0008958 <VgaText::doANSI_SGR(int)+0xc>
c0008978:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000897b:	83 f9 07             	cmp    ecx,0x7
c000897e:	77 09                	ja     c0008989 <VgaText::doANSI_SGR(int)+0x3d>
c0008980:	8b 14 8d 40 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08c0]
c0008987:	eb 20                	jmp    c00089a9 <VgaText::doANSI_SGR(int)+0x5d>
c0008989:	8d 4a d8             	lea    ecx,[edx-0x28]
c000898c:	83 f9 07             	cmp    ecx,0x7
c000898f:	77 09                	ja     c000899a <VgaText::doANSI_SGR(int)+0x4e>
c0008991:	8b 14 8d 40 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08c0]
c0008998:	eb 22                	jmp    c00089bc <VgaText::doANSI_SGR(int)+0x70>
c000899a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000899d:	83 f9 07             	cmp    ecx,0x7
c00089a0:	77 0b                	ja     c00089ad <VgaText::doANSI_SGR(int)+0x61>
c00089a2:	8b 14 95 f8 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a08]
c00089a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089ac:	c3                   	ret    
c00089ad:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089b0:	83 f9 07             	cmp    ecx,0x7
c00089b3:	77 0a                	ja     c00089bf <VgaText::doANSI_SGR(int)+0x73>
c00089b5:	8b 14 95 d0 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a30]
c00089bc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089bf:	c3                   	ret    

c00089c0 <VgaText::setDefaultBgColour(VgaColour)>:
c00089c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089c8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089cb:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089ce:	c3                   	ret    
c00089cf:	90                   	nop

c00089d0 <VgaText::setDefaultFgColour(VgaColour)>:
c00089d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089db:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089de:	c3                   	ret    
c00089df:	90                   	nop

c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089e0:	53                   	push   ebx
c00089e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089ed:	51                   	push   ecx
c00089ee:	e8 cd ff ff ff       	call   c00089c0 <VgaText::setDefaultBgColour(VgaColour)>
c00089f3:	58                   	pop    eax
c00089f4:	5a                   	pop    edx
c00089f5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089fd:	5b                   	pop    ebx
c00089fe:	eb d0                	jmp    c00089d0 <VgaText::setDefaultFgColour(VgaColour)>

c0008a00 <VgaText::setTitleTextColour(VgaColour)>:
c0008a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a08:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a0b:	c3                   	ret    

c0008a0c <VgaText::setTitleColour(VgaColour)>:
c0008a0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a17:	c3                   	ret    

c0008a18 <VgaText::setTitle(char*)>:
c0008a18:	c3                   	ret    
c0008a19:	90                   	nop

c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a1e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a23:	83 e0 0f             	and    eax,0xf
c0008a26:	c1 e2 04             	shl    edx,0x4
c0008a29:	09 d0                	or     eax,edx
c0008a2b:	c3                   	ret    

c0008a2c <VgaText::scrollScreen()>:
c0008a2c:	55                   	push   ebp
c0008a2d:	b9 01 00 00 00       	mov    ecx,0x1
c0008a32:	57                   	push   edi
c0008a33:	56                   	push   esi
c0008a34:	53                   	push   ebx
c0008a35:	83 ec 0c             	sub    esp,0xc
c0008a38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a3c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a42:	31 ff                	xor    edi,edi
c0008a44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a47:	83 f9 18             	cmp    ecx,0x18
c0008a4a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a4d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a54:	75 27                	jne    c0008a7d <VgaText::scrollScreen()+0x51>
c0008a56:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a59:	01 f5                	add    ebp,esi
c0008a5b:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a61:	74 16                	je     c0008a79 <VgaText::scrollScreen()+0x4d>
c0008a63:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a67:	50                   	push   eax
c0008a68:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a6c:	50                   	push   eax
c0008a6d:	e8 a8 ff ff ff       	call   c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>
c0008a72:	5a                   	pop    edx
c0008a73:	5a                   	pop    edx
c0008a74:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a77:	eb 04                	jmp    c0008a7d <VgaText::scrollScreen()+0x51>
c0008a79:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a7d:	47                   	inc    edi
c0008a7e:	46                   	inc    esi
c0008a7f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a85:	75 bd                	jne    c0008a44 <VgaText::scrollScreen()+0x18>
c0008a87:	41                   	inc    ecx
c0008a88:	83 f9 19             	cmp    ecx,0x19
c0008a8b:	75 af                	jne    c0008a3c <VgaText::scrollScreen()+0x10>
c0008a8d:	39 1d 84 08 02 c0    	cmp    DWORD PTR ds:0xc0020884,ebx
c0008a93:	75 1f                	jne    c0008ab4 <VgaText::scrollScreen()+0x88>
c0008a95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a99:	74 05                	je     c0008aa0 <VgaText::scrollScreen()+0x74>
c0008a9b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a9e:	eb 14                	jmp    c0008ab4 <VgaText::scrollScreen()+0x88>
c0008aa0:	50                   	push   eax
c0008aa1:	50                   	push   eax
c0008aa2:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008aa6:	50                   	push   eax
c0008aa7:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008aab:	50                   	push   eax
c0008aac:	e8 df d8 00 00       	call   c0016390 <HalConsoleScroll(int, int)>
c0008ab1:	83 c4 10             	add    esp,0x10
c0008ab4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008ab8:	83 c4 0c             	add    esp,0xc
c0008abb:	5b                   	pop    ebx
c0008abc:	5e                   	pop    esi
c0008abd:	5f                   	pop    edi
c0008abe:	5d                   	pop    ebp
c0008abf:	e9 72 fe ff ff       	jmp    c0008936 <VgaText::updateCursor()>

c0008ac4 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ac4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008ac9:	c1 e0 08             	shl    eax,0x8
c0008acc:	89 c2                	mov    edx,eax
c0008ace:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008ad3:	09 d0                	or     eax,edx
c0008ad5:	c3                   	ret    

c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ad6:	55                   	push   ebp
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	53                   	push   ebx
c0008ada:	83 ec 1c             	sub    esp,0x1c
c0008add:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008ae1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ae5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008ae9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008aed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008af1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008af5:	0f b6 c3             	movzx  eax,bl
c0008af8:	50                   	push   eax
c0008af9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008afe:	50                   	push   eax
c0008aff:	e8 16 ff ff ff       	call   c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>
c0008b04:	5a                   	pop    edx
c0008b05:	0f b6 c0             	movzx  eax,al
c0008b08:	59                   	pop    ecx
c0008b09:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b0e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b12:	50                   	push   eax
c0008b13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b17:	e8 a8 ff ff ff       	call   c0008ac4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b1c:	5a                   	pop    edx
c0008b1d:	66 6b d7 50          	imul   dx,di,0x50
c0008b21:	59                   	pop    ecx
c0008b22:	01 f2                	add    edx,esi
c0008b24:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b27:	0f b7 d2             	movzx  edx,dx
c0008b2a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b2e:	39 2d 84 08 02 c0    	cmp    DWORD PTR ds:0xc0020884,ebp
c0008b34:	75 28                	jne    c0008b5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b3e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b42:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b46:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b4e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b52:	83 c4 1c             	add    esp,0x1c
c0008b55:	5b                   	pop    ebx
c0008b56:	5e                   	pop    esi
c0008b57:	5f                   	pop    edi
c0008b58:	5d                   	pop    ebp
c0008b59:	e9 3a d9 00 00       	jmp    c0016498 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b5e:	83 c4 1c             	add    esp,0x1c
c0008b61:	5b                   	pop    ebx
c0008b62:	5e                   	pop    esi
c0008b63:	5f                   	pop    edi
c0008b64:	5d                   	pop    ebp
c0008b65:	c3                   	ret    

c0008b66 <VgaText::getCursorX()>:
c0008b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b6d:	c3                   	ret    

c0008b6e <VgaText::getCursorY()>:
c0008b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b72:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b75:	c3                   	ret    

c0008b76 <VgaText::setCursor(int, int)>:
c0008b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b7e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b85:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b88:	e9 a9 fd ff ff       	jmp    c0008936 <VgaText::updateCursor()>

c0008b8d <setActiveTerminal(VgaText*)>:
c0008b8d:	53                   	push   ebx
c0008b8e:	83 ec 08             	sub    esp,0x8
c0008b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b95:	85 db                	test   ebx,ebx
c0008b97:	75 11                	jne    c0008baa <setActiveTerminal(VgaText*)+0x1d>
c0008b99:	c7 44 24 10 4c d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d74c
c0008ba1:	83 c4 08             	add    esp,0x8
c0008ba4:	5b                   	pop    ebx
c0008ba5:	e9 91 7b 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c0008baa:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c0008baf:	85 c0                	test   eax,eax
c0008bb1:	74 0c                	je     c0008bbf <setActiveTerminal(VgaText*)+0x32>
c0008bb3:	83 ec 0c             	sub    esp,0xc
c0008bb6:	50                   	push   eax
c0008bb7:	e8 7a fd ff ff       	call   c0008936 <VgaText::updateCursor()>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	89 1d 84 08 02 c0    	mov    DWORD PTR ds:0xc0020884,ebx
c0008bc5:	50                   	push   eax
c0008bc6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bc9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcc:	53                   	push   ebx
c0008bcd:	e8 a4 ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008bd2:	83 c4 18             	add    esp,0x18
c0008bd5:	5b                   	pop    ebx
c0008bd6:	c3                   	ret    
c0008bd7:	90                   	nop

c0008bd8 <VgaText::clearScreen()>:
c0008bd8:	57                   	push   edi
c0008bd9:	56                   	push   esi
c0008bda:	31 f6                	xor    esi,esi
c0008bdc:	53                   	push   ebx
c0008bdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008be1:	52                   	push   edx
c0008be2:	6a 00                	push   0x0
c0008be4:	6a 00                	push   0x0
c0008be6:	53                   	push   ebx
c0008be7:	e8 8a ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008bec:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008bf3:	83 c4 10             	add    esp,0x10
c0008bf6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bf9:	7e 20                	jle    c0008c1b <VgaText::clearScreen()+0x43>
c0008bfb:	31 ff                	xor    edi,edi
c0008bfd:	50                   	push   eax
c0008bfe:	50                   	push   eax
c0008bff:	56                   	push   esi
c0008c00:	57                   	push   edi
c0008c01:	47                   	inc    edi
c0008c02:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c05:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c08:	6a 20                	push   0x20
c0008c0a:	53                   	push   ebx
c0008c0b:	e8 c6 fe ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c10:	83 c4 20             	add    esp,0x20
c0008c13:	83 ff 50             	cmp    edi,0x50
c0008c16:	75 e5                	jne    c0008bfd <VgaText::clearScreen()+0x25>
c0008c18:	46                   	inc    esi
c0008c19:	eb db                	jmp    c0008bf6 <VgaText::clearScreen()+0x1e>
c0008c1b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c22:	5b                   	pop    ebx
c0008c23:	5e                   	pop    esi
c0008c24:	5f                   	pop    edi
c0008c25:	c3                   	ret    

c0008c26 <VgaText::setCursorX(int)>:
c0008c26:	83 ec 10             	sub    esp,0x10
c0008c29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c2d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c34:	50                   	push   eax
c0008c35:	e8 3c ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008c3a:	83 c4 1c             	add    esp,0x1c
c0008c3d:	c3                   	ret    

c0008c3e <VgaText::setCursorY(int)>:
c0008c3e:	83 ec 10             	sub    esp,0x10
c0008c41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c49:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c4c:	50                   	push   eax
c0008c4d:	e8 24 ff ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008c52:	83 c4 1c             	add    esp,0x1c
c0008c55:	c3                   	ret    

c0008c56 <VgaText::incrementCursor(bool)>:
c0008c56:	56                   	push   esi
c0008c57:	53                   	push   ebx
c0008c58:	51                   	push   ecx
c0008c59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c64:	40                   	inc    eax
c0008c65:	83 f8 50             	cmp    eax,0x50
c0008c68:	74 05                	je     c0008c6f <VgaText::incrementCursor(bool)+0x19>
c0008c6a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c6d:	eb 24                	jmp    c0008c93 <VgaText::incrementCursor(bool)+0x3d>
c0008c6f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c79:	8d 50 01             	lea    edx,[eax+0x1]
c0008c7c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c7f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c82:	75 0f                	jne    c0008c93 <VgaText::incrementCursor(bool)+0x3d>
c0008c84:	83 ec 0c             	sub    esp,0xc
c0008c87:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c8a:	53                   	push   ebx
c0008c8b:	e8 9c fd ff ff       	call   c0008a2c <VgaText::scrollScreen()>
c0008c90:	83 c4 10             	add    esp,0x10
c0008c93:	89 f0                	mov    eax,esi
c0008c95:	84 c0                	test   al,al
c0008c97:	74 0c                	je     c0008ca5 <VgaText::incrementCursor(bool)+0x4f>
c0008c99:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c9d:	5a                   	pop    edx
c0008c9e:	5b                   	pop    ebx
c0008c9f:	5e                   	pop    esi
c0008ca0:	e9 91 fc ff ff       	jmp    c0008936 <VgaText::updateCursor()>
c0008ca5:	58                   	pop    eax
c0008ca6:	5b                   	pop    ebx
c0008ca7:	5e                   	pop    esi
c0008ca8:	c3                   	ret    
c0008ca9:	90                   	nop

c0008caa <VgaText::decrementCursor(bool)>:
c0008caa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cb2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cb5:	85 c0                	test   eax,eax
c0008cb7:	74 04                	je     c0008cbd <VgaText::decrementCursor(bool)+0x13>
c0008cb9:	48                   	dec    eax
c0008cba:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cbd:	84 c9                	test   cl,cl
c0008cbf:	74 09                	je     c0008cca <VgaText::decrementCursor(bool)+0x20>
c0008cc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cc5:	e9 6c fc ff ff       	jmp    c0008936 <VgaText::updateCursor()>
c0008cca:	c3                   	ret    
c0008ccb:	90                   	nop

c0008ccc <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008ccc:	53                   	push   ebx
c0008ccd:	83 ec 08             	sub    esp,0x8
c0008cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008cd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cdc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008ce0:	3c 07                	cmp    al,0x7
c0008ce2:	75 21                	jne    c0008d05 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ce4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cec:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cf4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cfc:	83 c4 08             	add    esp,0x8
c0008cff:	5b                   	pop    ebx
c0008d00:	e9 3e 2d 00 00       	jmp    c000ba43 <Krnl::beep(int, int, bool)>
c0008d05:	3c 0d                	cmp    al,0xd
c0008d07:	75 09                	jne    c0008d12 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d09:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d10:	eb 2c                	jmp    c0008d3e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d12:	3c 0a                	cmp    al,0xa
c0008d14:	75 31                	jne    c0008d47 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d16:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d19:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d20:	8d 50 01             	lea    edx,[eax+0x1]
c0008d23:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d26:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d29:	75 0f                	jne    c0008d3a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d31:	53                   	push   ebx
c0008d32:	e8 f5 fc ff ff       	call   c0008a2c <VgaText::scrollScreen()>
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d3e:	83 c4 08             	add    esp,0x8
c0008d41:	5b                   	pop    ebx
c0008d42:	e9 ef fb ff ff       	jmp    c0008936 <VgaText::updateCursor()>
c0008d47:	3c 08                	cmp    al,0x8
c0008d49:	75 25                	jne    c0008d70 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d4b:	50                   	push   eax
c0008d4c:	50                   	push   eax
c0008d4d:	6a 01                	push   0x1
c0008d4f:	53                   	push   ebx
c0008d50:	e8 55 ff ff ff       	call   c0008caa <VgaText::decrementCursor(bool)>
c0008d55:	5a                   	pop    edx
c0008d56:	59                   	pop    ecx
c0008d57:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d5a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d5d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d60:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d63:	6a 20                	push   0x20
c0008d65:	53                   	push   ebx
c0008d66:	e8 6b fd ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d6b:	83 c4 28             	add    esp,0x28
c0008d6e:	5b                   	pop    ebx
c0008d6f:	c3                   	ret    
c0008d70:	83 ec 08             	sub    esp,0x8
c0008d73:	0f be c0             	movsx  eax,al
c0008d76:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d79:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d7c:	51                   	push   ecx
c0008d7d:	52                   	push   edx
c0008d7e:	50                   	push   eax
c0008d7f:	53                   	push   ebx
c0008d80:	e8 51 fd ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d85:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d89:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d91:	83 c4 28             	add    esp,0x28
c0008d94:	5b                   	pop    ebx
c0008d95:	e9 bc fe ff ff       	jmp    c0008c56 <VgaText::incrementCursor(bool)>

c0008d9a <VgaText::putchar(char)>:
c0008d9a:	56                   	push   esi
c0008d9b:	53                   	push   ebx
c0008d9c:	83 ec 14             	sub    esp,0x14
c0008d9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008da3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008da7:	3c 5b                	cmp    al,0x5b
c0008da9:	75 18                	jne    c0008dc3 <VgaText::putchar(char)+0x29>
c0008dab:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008daf:	74 1f                	je     c0008dd0 <VgaText::putchar(char)+0x36>
c0008db1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008db7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dbe:	e9 bd 00 00 00       	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008dc3:	3c 1b                	cmp    al,0x1b
c0008dc5:	75 09                	jne    c0008dd0 <VgaText::putchar(char)+0x36>
c0008dc7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dcb:	e9 b0 00 00 00       	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008dd0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dd3:	84 c9                	test   cl,cl
c0008dd5:	0f 84 92 00 00 00    	je     c0008e6d <VgaText::putchar(char)+0xd3>
c0008ddb:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dde:	80 fa 3e             	cmp    dl,0x3e
c0008de1:	77 76                	ja     c0008e59 <VgaText::putchar(char)+0xbf>
c0008de3:	3c 6d                	cmp    al,0x6d
c0008de5:	75 47                	jne    c0008e2e <VgaText::putchar(char)+0x94>
c0008de7:	31 f6                	xor    esi,esi
c0008de9:	31 d2                	xor    edx,edx
c0008deb:	31 c0                	xor    eax,eax
c0008ded:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008df0:	7e 2d                	jle    c0008e1f <VgaText::putchar(char)+0x85>
c0008df2:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008df7:	80 fa 3b             	cmp    dl,0x3b
c0008dfa:	75 17                	jne    c0008e13 <VgaText::putchar(char)+0x79>
c0008dfc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008e00:	50                   	push   eax
c0008e01:	53                   	push   ebx
c0008e02:	e8 45 fb ff ff       	call   c000894c <VgaText::doANSI_SGR(int)>
c0008e07:	59                   	pop    ecx
c0008e08:	31 d2                	xor    edx,edx
c0008e0a:	58                   	pop    eax
c0008e0b:	31 c0                	xor    eax,eax
c0008e0d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e11:	eb 09                	jmp    c0008e1c <VgaText::putchar(char)+0x82>
c0008e13:	6b c0 0a             	imul   eax,eax,0xa
c0008e16:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e1a:	88 ca                	mov    dl,cl
c0008e1c:	46                   	inc    esi
c0008e1d:	eb ce                	jmp    c0008ded <VgaText::putchar(char)+0x53>
c0008e1f:	84 d2                	test   dl,dl
c0008e21:	74 2e                	je     c0008e51 <VgaText::putchar(char)+0xb7>
c0008e23:	50                   	push   eax
c0008e24:	53                   	push   ebx
c0008e25:	e8 22 fb ff ff       	call   c000894c <VgaText::doANSI_SGR(int)>
c0008e2a:	58                   	pop    eax
c0008e2b:	5a                   	pop    edx
c0008e2c:	eb 23                	jmp    c0008e51 <VgaText::putchar(char)+0xb7>
c0008e2e:	3c 4a                	cmp    al,0x4a
c0008e30:	75 1f                	jne    c0008e51 <VgaText::putchar(char)+0xb7>
c0008e32:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e36:	75 19                	jne    c0008e51 <VgaText::putchar(char)+0xb7>
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	53                   	push   ebx
c0008e3c:	e8 97 fd ff ff       	call   c0008bd8 <VgaText::clearScreen()>
c0008e41:	83 c4 0c             	add    esp,0xc
c0008e44:	6a 00                	push   0x0
c0008e46:	6a 00                	push   0x0
c0008e48:	53                   	push   ebx
c0008e49:	e8 28 fd ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0008e4e:	83 c4 10             	add    esp,0x10
c0008e51:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e57:	eb 27                	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008e59:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e5c:	83 fa 0e             	cmp    edx,0xe
c0008e5f:	7f 1f                	jg     c0008e80 <VgaText::putchar(char)+0xe6>
c0008e61:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e64:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e67:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e6b:	eb 13                	jmp    c0008e80 <VgaText::putchar(char)+0xe6>
c0008e6d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e70:	0f be c0             	movsx  eax,al
c0008e73:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e76:	50                   	push   eax
c0008e77:	53                   	push   ebx
c0008e78:	e8 4f fe ff ff       	call   c0008ccc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e7d:	83 c4 10             	add    esp,0x10
c0008e80:	83 c4 14             	add    esp,0x14
c0008e83:	5b                   	pop    ebx
c0008e84:	5e                   	pop    esi
c0008e85:	c3                   	ret    

c0008e86 <VgaText::putx(unsigned int)>:
c0008e86:	57                   	push   edi
c0008e87:	b9 11 00 00 00       	mov    ecx,0x11
c0008e8c:	56                   	push   esi
c0008e8d:	be 5a d7 01 c0       	mov    esi,0xc001d75a
c0008e92:	53                   	push   ebx
c0008e93:	83 ec 20             	sub    esp,0x20
c0008e96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e9a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e9e:	fc                   	cld    
c0008e9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ea1:	be 08 00 00 00       	mov    esi,0x8
c0008ea6:	50                   	push   eax
c0008ea7:	50                   	push   eax
c0008ea8:	89 d8                	mov    eax,ebx
c0008eaa:	c1 e3 04             	shl    ebx,0x4
c0008ead:	c1 e8 1c             	shr    eax,0x1c
c0008eb0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008eb5:	50                   	push   eax
c0008eb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eba:	e8 db fe ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0008ebf:	83 c4 10             	add    esp,0x10
c0008ec2:	4e                   	dec    esi
c0008ec3:	75 e1                	jne    c0008ea6 <VgaText::putx(unsigned int)+0x20>
c0008ec5:	83 c4 20             	add    esp,0x20
c0008ec8:	5b                   	pop    ebx
c0008ec9:	5e                   	pop    esi
c0008eca:	5f                   	pop    edi
c0008ecb:	c3                   	ret    

c0008ecc <VgaText::puts(char const*)>:
c0008ecc:	53                   	push   ebx
c0008ecd:	83 ec 08             	sub    esp,0x8
c0008ed0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ed4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ed7:	84 c0                	test   al,al
c0008ed9:	74 12                	je     c0008eed <VgaText::puts(char const*)+0x21>
c0008edb:	43                   	inc    ebx
c0008edc:	51                   	push   ecx
c0008edd:	51                   	push   ecx
c0008ede:	50                   	push   eax
c0008edf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee3:	e8 b2 fe ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	eb e7                	jmp    c0008ed4 <VgaText::puts(char const*)+0x8>
c0008eed:	83 c4 08             	add    esp,0x8
c0008ef0:	5b                   	pop    ebx
c0008ef1:	c3                   	ret    

c0008ef2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ef2:	55                   	push   ebp
c0008ef3:	57                   	push   edi
c0008ef4:	56                   	push   esi
c0008ef5:	53                   	push   ebx
c0008ef6:	83 ec 0c             	sub    esp,0xc
c0008ef9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008efd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f05:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f0c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f0f:	39 eb                	cmp    ebx,ebp
c0008f11:	74 13                	je     c0008f26 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f13:	43                   	inc    ebx
c0008f14:	50                   	push   eax
c0008f15:	50                   	push   eax
c0008f16:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f1a:	50                   	push   eax
c0008f1b:	56                   	push   esi
c0008f1c:	e8 79 fe ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0008f21:	83 c4 10             	add    esp,0x10
c0008f24:	eb e9                	jmp    c0008f0f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f26:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f31:	89 38                	mov    DWORD PTR [eax],edi
c0008f33:	83 c4 0c             	add    esp,0xc
c0008f36:	31 c0                	xor    eax,eax
c0008f38:	5b                   	pop    ebx
c0008f39:	5e                   	pop    esi
c0008f3a:	5f                   	pop    edi
c0008f3b:	5d                   	pop    ebp
c0008f3c:	c3                   	ret    
c0008f3d:	90                   	nop

c0008f3e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f3e:	55                   	push   ebp
c0008f3f:	57                   	push   edi
c0008f40:	56                   	push   esi
c0008f41:	53                   	push   ebx
c0008f42:	83 ec 0c             	sub    esp,0xc
c0008f45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f4e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f55:	50                   	push   eax
c0008f56:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f5b:	50                   	push   eax
c0008f5c:	e8 b9 fa ff ff       	call   c0008a1a <VgaText::combineColours(unsigned char, unsigned char)>
c0008f61:	5a                   	pop    edx
c0008f62:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f67:	59                   	pop    ecx
c0008f68:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f6b:	89 c5                	mov    ebp,eax
c0008f6d:	0f b7 f6             	movzx  esi,si
c0008f70:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f74:	01 f6                	add    esi,esi
c0008f76:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f79:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f7c:	84 c0                	test   al,al
c0008f7e:	0f 84 f4 00 00 00    	je     c0009078 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f84:	3c 0d                	cmp    al,0xd
c0008f86:	75 0c                	jne    c0008f94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f88:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f8f:	e9 de 00 00 00       	jmp    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f94:	3c 0a                	cmp    al,0xa
c0008f96:	75 45                	jne    c0008fdd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f98:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f9b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008fa2:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fa5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fa8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008fab:	75 0f                	jne    c0008fbc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fad:	83 ec 0c             	sub    esp,0xc
c0008fb0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008fb3:	53                   	push   ebx
c0008fb4:	e8 73 fa ff ff       	call   c0008a2c <VgaText::scrollScreen()>
c0008fb9:	83 c4 10             	add    esp,0x10
c0008fbc:	83 ec 0c             	sub    esp,0xc
c0008fbf:	53                   	push   ebx
c0008fc0:	e8 71 f9 ff ff       	call   c0008936 <VgaText::updateCursor()>
c0008fc5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fca:	83 c4 10             	add    esp,0x10
c0008fcd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fd0:	0f b7 f6             	movzx  esi,si
c0008fd3:	01 f6                	add    esi,esi
c0008fd5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fd8:	e9 95 00 00 00       	jmp    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fdd:	3c 08                	cmp    al,0x8
c0008fdf:	75 35                	jne    c0009016 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fe1:	51                   	push   ecx
c0008fe2:	51                   	push   ecx
c0008fe3:	6a 01                	push   0x1
c0008fe5:	53                   	push   ebx
c0008fe6:	e8 bf fc ff ff       	call   c0008caa <VgaText::decrementCursor(bool)>
c0008feb:	5e                   	pop    esi
c0008fec:	58                   	pop    eax
c0008fed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ff0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ff3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ff6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ff9:	6a 20                	push   0x20
c0008ffb:	53                   	push   ebx
c0008ffc:	e8 d5 fa ff ff       	call   c0008ad6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009001:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009006:	83 c4 20             	add    esp,0x20
c0009009:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000900c:	0f b7 f6             	movzx  esi,si
c000900f:	01 f6                	add    esi,esi
c0009011:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009014:	eb 5c                	jmp    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009016:	52                   	push   edx
c0009017:	52                   	push   edx
c0009018:	89 ea                	mov    edx,ebp
c000901a:	0f b6 ca             	movzx  ecx,dl
c000901d:	51                   	push   ecx
c000901e:	50                   	push   eax
c000901f:	e8 a0 fa ff ff       	call   c0008ac4 <VgaText::combineCharAndColour(char, unsigned char)>
c0009024:	83 c4 10             	add    esp,0x10
c0009027:	66 89 06             	mov    WORD PTR [esi],ax
c000902a:	39 1d 84 08 02 c0    	cmp    DWORD PTR ds:0xc0020884,ebx
c0009030:	75 1d                	jne    c000904f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0009032:	83 ec 0c             	sub    esp,0xc
c0009035:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009038:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000903b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009043:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009046:	50                   	push   eax
c0009047:	e8 4c d4 00 00       	call   c0016498 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000904c:	83 c4 20             	add    esp,0x20
c000904f:	83 c6 02             	add    esi,0x2
c0009052:	50                   	push   eax
c0009053:	50                   	push   eax
c0009054:	6a 00                	push   0x0
c0009056:	53                   	push   ebx
c0009057:	e8 fa fb ff ff       	call   c0008c56 <VgaText::incrementCursor(bool)>
c000905c:	83 c4 10             	add    esp,0x10
c000905f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0009063:	75 0d                	jne    c0009072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009065:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000906a:	0f b7 f6             	movzx  esi,si
c000906d:	01 f6                	add    esi,esi
c000906f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009072:	47                   	inc    edi
c0009073:	e9 01 ff ff ff       	jmp    c0008f79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009078:	83 ec 0c             	sub    esp,0xc
c000907b:	53                   	push   ebx
c000907c:	e8 b5 f8 ff ff       	call   c0008936 <VgaText::updateCursor()>
c0009081:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009088:	83 c4 1c             	add    esp,0x1c
c000908b:	5b                   	pop    ebx
c000908c:	5e                   	pop    esi
c000908d:	5f                   	pop    edi
c000908e:	5d                   	pop    ebp
c000908f:	c3                   	ret    

c0009090 <VgaText::VgaText(char const*)>:
c0009090:	56                   	push   esi
c0009091:	53                   	push   ebx
c0009092:	83 ec 04             	sub    esp,0x4
c0009095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009099:	83 ec 08             	sub    esp,0x8
c000909c:	6a 00                	push   0x0
c000909e:	50                   	push   eax
c000909f:	e8 b2 04 00 00       	call   c0009556 <UnixFile::UnixFile(int)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	ba c0 d7 01 c0       	mov    edx,0xc001d7c0
c00090ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b0:	89 10                	mov    DWORD PTR [eax],edx
c00090b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090cc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009108:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000910f:	83 ec 0c             	sub    esp,0xc
c0009112:	6a 01                	push   0x1
c0009114:	e8 80 08 00 00       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	89 c2                	mov    edx,eax
c000911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009122:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009125:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000912b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000912f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009132:	89 c6                	mov    esi,eax
c0009134:	e8 f1 f0 ff ff       	call   c000822a <Phys::allocatePage()>
c0009139:	68 05 0c 00 00       	push   0xc05
c000913e:	56                   	push   esi
c000913f:	50                   	push   eax
c0009140:	53                   	push   ebx
c0009141:	e8 e8 0e 00 00       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000914d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009150:	83 ec 04             	sub    esp,0x4
c0009153:	68 a0 0f 00 00       	push   0xfa0
c0009158:	6a 00                	push   0x0
c000915a:	50                   	push   eax
c000915b:	e8 90 73 ff ff       	call   c00004f0 <memset>
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 ec 04             	sub    esp,0x4
c0009166:	6a 00                	push   0x0
c0009168:	6a 07                	push   0x7
c000916a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000916e:	e8 6d f8 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	83 ec 04             	sub    esp,0x4
c0009179:	6a 00                	push   0x0
c000917b:	6a 00                	push   0x0
c000917d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009181:	e8 f0 f9 ff ff       	call   c0008b76 <VgaText::setCursor(int, int)>
c0009186:	83 c4 10             	add    esp,0x10
c0009189:	83 ec 0c             	sub    esp,0xc
c000918c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009190:	e8 43 fa ff ff       	call   c0008bd8 <VgaText::clearScreen()>
c0009195:	83 c4 10             	add    esp,0x10
c0009198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000919c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00091a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a4:	05 82 00 00 00       	add    eax,0x82
c00091a9:	83 ec 04             	sub    esp,0x4
c00091ac:	6a 30                	push   0x30
c00091ae:	6a 00                	push   0x0
c00091b0:	50                   	push   eax
c00091b1:	e8 3a 73 ff ff       	call   c00004f0 <memset>
c00091b6:	83 c4 10             	add    esp,0x10
c00091b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091bd:	05 b2 00 00 00       	add    eax,0xb2
c00091c2:	83 ec 04             	sub    esp,0x4
c00091c5:	68 80 00 00 00       	push   0x80
c00091ca:	6a 00                	push   0x0
c00091cc:	50                   	push   eax
c00091cd:	e8 1e 73 ff ff       	call   c00004f0 <memset>
c00091d2:	83 c4 10             	add    esp,0x10
c00091d5:	90                   	nop
c00091d6:	83 c4 04             	add    esp,0x4
c00091d9:	5b                   	pop    ebx
c00091da:	5e                   	pop    esi
c00091db:	c3                   	ret    

c00091dc <VgaText::receiveKey(unsigned char)>:
c00091dc:	57                   	push   edi
c00091dd:	56                   	push   esi
c00091de:	53                   	push   ebx
c00091df:	83 ec 10             	sub    esp,0x10
c00091e2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091ea:	84 db                	test   bl,bl
c00091ec:	0f 84 ba 00 00 00    	je     c00092ac <VgaText::receiveKey(unsigned char)+0xd0>
c00091f2:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091f8:	80 fb 08             	cmp    bl,0x8
c00091fb:	75 2c                	jne    c0009229 <VgaText::receiveKey(unsigned char)+0x4d>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	57                   	push   edi
c0009201:	e8 5a 73 ff ff       	call   c0000560 <strlen>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	85 c0                	test   eax,eax
c000920b:	74 41                	je     c000924e <VgaText::receiveKey(unsigned char)+0x72>
c000920d:	50                   	push   eax
c000920e:	50                   	push   eax
c000920f:	6a 08                	push   0x8
c0009211:	56                   	push   esi
c0009212:	e8 83 fb ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0009217:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921a:	e8 41 73 ff ff       	call   c0000560 <strlen>
c000921f:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009227:	eb 22                	jmp    c000924b <VgaText::receiveKey(unsigned char)+0x6f>
c0009229:	0f be c3             	movsx  eax,bl
c000922c:	52                   	push   edx
c000922d:	52                   	push   edx
c000922e:	50                   	push   eax
c000922f:	56                   	push   esi
c0009230:	e8 65 fb ff ff       	call   c0008d9a <VgaText::putchar(char)>
c0009235:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009239:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000923e:	59                   	pop    ecx
c000923f:	58                   	pop    eax
c0009240:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009244:	50                   	push   eax
c0009245:	57                   	push   edi
c0009246:	e8 95 75 ff ff       	call   c00007e0 <strcat>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009255:	75 05                	jne    c000925c <VgaText::receiveKey(unsigned char)+0x80>
c0009257:	80 fb 0a             	cmp    bl,0xa
c000925a:	75 50                	jne    c00092ac <VgaText::receiveKey(unsigned char)+0xd0>
c000925c:	83 ec 0c             	sub    esp,0xc
c000925f:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009265:	56                   	push   esi
c0009266:	e8 f5 72 ff ff       	call   c0000560 <strlen>
c000926b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000926e:	89 c3                	mov    ebx,eax
c0009270:	e8 eb 72 ff ff       	call   c0000560 <strlen>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000927c:	3d 80 00 00 00       	cmp    eax,0x80
c0009281:	76 10                	jbe    c0009293 <VgaText::receiveKey(unsigned char)+0xb7>
c0009283:	83 ec 0c             	sub    esp,0xc
c0009286:	68 6b d7 01 c0       	push   0xc001d76b
c000928b:	e8 ab 74 00 00       	call   c001073b <Krnl::panic(char const*)>
c0009290:	83 c4 10             	add    esp,0x10
c0009293:	50                   	push   eax
c0009294:	50                   	push   eax
c0009295:	57                   	push   edi
c0009296:	56                   	push   esi
c0009297:	e8 44 75 ff ff       	call   c00007e0 <strcat>
c000929c:	83 c4 0c             	add    esp,0xc
c000929f:	6a 30                	push   0x30
c00092a1:	6a 00                	push   0x0
c00092a3:	57                   	push   edi
c00092a4:	e8 47 72 ff ff       	call   c00004f0 <memset>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	83 c4 10             	add    esp,0x10
c00092af:	5b                   	pop    ebx
c00092b0:	5e                   	pop    esi
c00092b1:	5f                   	pop    edi
c00092b2:	c3                   	ret    
c00092b3:	90                   	nop

c00092b4 <VgaText::doUpdate()>:
c00092b4:	c3                   	ret    

c00092b5 <newTerminal(char*)>:
c00092b5:	83 ec 28             	sub    esp,0x28
c00092b8:	68 34 01 00 00       	push   0x134
c00092bd:	e8 9b eb ff ff       	call   c0007e5d <malloc>
c00092c2:	5a                   	pop    edx
c00092c3:	59                   	pop    ecx
c00092c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c8:	50                   	push   eax
c00092c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092cd:	e8 be fd ff ff       	call   c0009090 <VgaText::VgaText(char const*)>
c00092d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d6:	83 c4 2c             	add    esp,0x2c
c00092d9:	c3                   	ret    
c00092da:	66 90                	xchg   ax,ax

c00092dc <TSS::TSS()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092e7:	90                   	nop
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop
c00092ea:	66 90                	xchg   ax,ax

c00092ec <TSS::setESP(unsigned long)>:
c00092ec:	55                   	push   ebp
c00092ed:	89 e5                	mov    ebp,esp
c00092ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092fb:	90                   	nop
c00092fc:	5d                   	pop    ebp
c00092fd:	c3                   	ret    
c00092fe:	66 90                	xchg   ax,ax

c0009300 <TSS::flush()>:
c0009300:	55                   	push   ebp
c0009301:	89 e5                	mov    ebp,esp
c0009303:	83 ec 10             	sub    esp,0x10
c0009306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009309:	8b 00                	mov    eax,DWORD PTR [eax]
c000930b:	83 c8 03             	or     eax,0x3
c000930e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009312:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009316:	66 89 d0             	mov    ax,dx
c0009319:	0f 00 d8             	ltr    ax
c000931c:	90                   	nop
c000931d:	c9                   	leave  
c000931e:	c3                   	ret    
c000931f:	90                   	nop

c0009320 <TSS::setup(unsigned long, unsigned long)>:
c0009320:	55                   	push   ebp
c0009321:	89 e5                	mov    ebp,esp
c0009323:	83 ec 18             	sub    esp,0x18
c0009326:	83 ec 0c             	sub    esp,0xc
c0009329:	6a 68                	push   0x68
c000932b:	e8 2d eb ff ff       	call   c0007e5d <malloc>
c0009330:	83 c4 10             	add    esp,0x10
c0009333:	89 c2                	mov    edx,eax
c0009335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009338:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000933b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000933e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009341:	83 ec 04             	sub    esp,0x4
c0009344:	6a 68                	push   0x68
c0009346:	6a 00                	push   0x0
c0009348:	50                   	push   eax
c0009349:	e8 a2 71 ff ff       	call   c00004f0 <memset>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009357:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000935d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009363:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000936c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000936f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009372:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000937b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009387:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000938d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009393:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000939c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ab:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093db:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e8:	0f 20 da             	mov    edx,cr3
c00093eb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093f1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093fa:	83 ec 08             	sub    esp,0x8
c00093fd:	50                   	push   eax
c00093fe:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009401:	50                   	push   eax
c0009402:	e8 e1 e2 ff ff       	call   c00076e8 <GDTEntry::setBase(unsigned int)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	6a 68                	push   0x68
c000940f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009412:	50                   	push   eax
c0009413:	e8 ec e2 ff ff       	call   c0007704 <GDTEntry::setLimit(unsigned int)>
c0009418:	83 c4 10             	add    esp,0x10
c000941b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000941f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009422:	83 e0 0f             	and    eax,0xf
c0009425:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009428:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000942b:	83 c8 40             	or     eax,0x40
c000942e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009431:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0009436:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000943c:	05 78 01 00 00       	add    eax,0x178
c0009441:	83 ec 04             	sub    esp,0x4
c0009444:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009447:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000944a:	50                   	push   eax
c000944b:	e8 e8 e2 ff ff       	call   c0007738 <GDT::addEntry(GDTEntry)>
c0009450:	83 c4 10             	add    esp,0x10
c0009453:	89 c2                	mov    edx,eax
c0009455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009458:	89 10                	mov    DWORD PTR [eax],edx
c000945a:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000945f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009465:	05 78 01 00 00       	add    eax,0x178
c000946a:	83 ec 0c             	sub    esp,0xc
c000946d:	50                   	push   eax
c000946e:	e8 ef e2 ff ff       	call   c0007762 <GDT::flush()>
c0009473:	83 c4 10             	add    esp,0x10
c0009476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009479:	8b 00                	mov    eax,DWORD PTR [eax]
c000947b:	c9                   	leave  
c000947c:	c3                   	ret    
c000947d:	90                   	nop

c000947e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000947e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009489:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000948e:	75 08                	jne    c0009498 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009490:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009496:	eb 38                	jmp    c00094d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009498:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000949d:	75 17                	jne    c00094b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000949f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00094af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094b3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094b6:	89 c1                	mov    ecx,eax
c00094b8:	83 e1 fd             	and    ecx,0xfffffffd
c00094bb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094c1:	74 cd                	je     c0009490 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094c3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094c8:	83 e0 ef             	and    eax,0xffffffef
c00094cb:	83 f8 08             	cmp    eax,0x8
c00094ce:	76 c0                	jbe    c0009490 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094d0:	31 c0                	xor    eax,eax
c00094d2:	c3                   	ret    
c00094d3:	90                   	nop

c00094d4 <ReservedFilename::isAtty()>:
c00094d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094db:	31 c0                	xor    eax,eax
c00094dd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094e3:	74 09                	je     c00094ee <ReservedFilename::isAtty()+0x1a>
c00094e5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094eb:	0f 94 c0             	sete   al
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094ff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009504:	75 08                	jne    c000950e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009506:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000950c:	eb 3d                	jmp    c000954b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000950e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009513:	75 17                	jne    c000952c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009515:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000951a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000951d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009523:	8b 10                	mov    edx,DWORD PTR [eax]
c0009525:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009529:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000952c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009531:	75 04                	jne    c0009537 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009533:	89 0a                	mov    DWORD PTR [edx],ecx
c0009535:	eb 14                	jmp    c000954b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009537:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000953c:	74 c8                	je     c0009506 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000953e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009543:	83 e0 ef             	and    eax,0xffffffef
c0009546:	83 f8 08             	cmp    eax,0x8
c0009549:	76 bb                	jbe    c0009506 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000954b:	31 c0                	xor    eax,eax
c000954d:	c3                   	ret    

c000954e <UnixFile::getFileDescriptor()>:
c000954e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009555:	c3                   	ret    

c0009556 <UnixFile::UnixFile(int)>:
c0009556:	53                   	push   ebx
c0009557:	83 ec 28             	sub    esp,0x28
c000955a:	ba 88 d8 01 c0       	mov    edx,0xc001d888
c000955f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009563:	89 10                	mov    DWORD PTR [eax],edx
c0009565:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000956d:	0f 8f 8c 01 00 00    	jg     c00096ff <UnixFile::UnixFile(int)+0x1a9>
c0009573:	a1 80 f7 01 c0       	mov    eax,ds:0xc001f780
c0009578:	8d 50 01             	lea    edx,[eax+0x1]
c000957b:	89 15 80 f7 01 c0    	mov    DWORD PTR ds:0xc001f780,edx
c0009581:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009585:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009588:	83 ec 08             	sub    esp,0x8
c000958b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000958f:	68 18 09 02 c0       	push   0xc0020918
c0009594:	e8 8f 2d 01 00       	call   c001c328 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009599:	83 c4 10             	add    esp,0x10
c000959c:	a0 14 09 02 c0       	mov    al,ds:0xc0020914
c00095a1:	83 f0 01             	xor    eax,0x1
c00095a4:	84 c0                	test   al,al
c00095a6:	0f 84 54 01 00 00    	je     c0009700 <UnixFile::UnixFile(int)+0x1aa>
c00095ac:	c6 05 14 09 02 c0 01 	mov    BYTE PTR ds:0xc0020914,0x1
c00095b3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095bb:	83 ec 0c             	sub    esp,0xc
c00095be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095c2:	e8 96 e8 ff ff       	call   c0007e5d <malloc>
c00095c7:	83 c4 10             	add    esp,0x10
c00095ca:	89 c3                	mov    ebx,eax
c00095cc:	83 ec 08             	sub    esp,0x8
c00095cf:	68 03 ff ff 0f       	push   0xfffff03
c00095d4:	53                   	push   ebx
c00095d5:	e8 2c 01 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c00095da:	83 c4 10             	add    esp,0x10
c00095dd:	89 1d 0c 09 02 c0    	mov    DWORD PTR ds:0xc002090c,ebx
c00095e3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095eb:	83 ec 0c             	sub    esp,0xc
c00095ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095f2:	e8 66 e8 ff ff       	call   c0007e5d <malloc>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	83 ec 08             	sub    esp,0x8
c00095ff:	68 01 ff ff 0f       	push   0xfffff01
c0009604:	53                   	push   ebx
c0009605:	e8 fc 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	89 1d 10 09 02 c0    	mov    DWORD PTR ds:0xc0020910,ebx
c0009613:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000961b:	83 ec 0c             	sub    esp,0xc
c000961e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009622:	e8 36 e8 ff ff       	call   c0007e5d <malloc>
c0009627:	83 c4 10             	add    esp,0x10
c000962a:	89 c3                	mov    ebx,eax
c000962c:	83 ec 08             	sub    esp,0x8
c000962f:	68 00 ff ff 0f       	push   0xfffff00
c0009634:	53                   	push   ebx
c0009635:	e8 cc 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	89 1d 04 09 02 c0    	mov    DWORD PTR ds:0xc0020904,ebx
c0009643:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009652:	e8 06 e8 ff ff       	call   c0007e5d <malloc>
c0009657:	83 c4 10             	add    esp,0x10
c000965a:	89 c3                	mov    ebx,eax
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	68 02 ff ff 0f       	push   0xfffff02
c0009664:	53                   	push   ebx
c0009665:	e8 9c 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 1d 08 09 02 c0    	mov    DWORD PTR ds:0xc0020908,ebx
c0009673:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000967b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009680:	7f 7e                	jg     c0009700 <UnixFile::UnixFile(int)+0x1aa>
c0009682:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000968a:	83 ec 0c             	sub    esp,0xc
c000968d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009691:	e8 c7 e7 ff ff       	call   c0007e5d <malloc>
c0009696:	83 c4 10             	add    esp,0x10
c0009699:	89 c3                	mov    ebx,eax
c000969b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969f:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096a4:	83 ec 08             	sub    esp,0x8
c00096a7:	50                   	push   eax
c00096a8:	53                   	push   ebx
c00096a9:	e8 58 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c00096ae:	83 c4 10             	add    esp,0x10
c00096b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b5:	89 1c 85 e0 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf720],ebx
c00096bc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096c4:	83 ec 0c             	sub    esp,0xc
c00096c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096cb:	e8 8d e7 ff ff       	call   c0007e5d <malloc>
c00096d0:	83 c4 10             	add    esp,0x10
c00096d3:	89 c3                	mov    ebx,eax
c00096d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096de:	83 ec 08             	sub    esp,0x8
c00096e1:	50                   	push   eax
c00096e2:	53                   	push   ebx
c00096e3:	e8 1e 00 00 00       	call   c0009706 <ReservedFilename::ReservedFilename(int)>
c00096e8:	83 c4 10             	add    esp,0x10
c00096eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ef:	89 1c 85 a0 08 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf760],ebx
c00096f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096fa:	e9 7c ff ff ff       	jmp    c000967b <UnixFile::UnixFile(int)+0x125>
c00096ff:	90                   	nop
c0009700:	83 c4 28             	add    esp,0x28
c0009703:	5b                   	pop    ebx
c0009704:	c3                   	ret    
c0009705:	90                   	nop

c0009706 <ReservedFilename::ReservedFilename(int)>:
c0009706:	83 ec 0c             	sub    esp,0xc
c0009709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000970d:	83 ec 08             	sub    esp,0x8
c0009710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009714:	50                   	push   eax
c0009715:	e8 3c fe ff ff       	call   c0009556 <UnixFile::UnixFile(int)>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	ba a4 d8 01 c0       	mov    edx,0xc001d8a4
c0009722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009726:	89 10                	mov    DWORD PTR [eax],edx
c0009728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000972c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009730:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009733:	90                   	nop
c0009734:	83 c4 0c             	add    esp,0xc
c0009737:	c3                   	ret    

c0009738 <UnixFile::~UnixFile()>:
c0009738:	83 ec 1c             	sub    esp,0x1c
c000973b:	ba 88 d8 01 c0       	mov    edx,0xc001d888
c0009740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009744:	89 10                	mov    DWORD PTR [eax],edx
c0009746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000974a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000974d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009752:	7f 73                	jg     c00097c7 <UnixFile::~UnixFile()+0x8f>
c0009754:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000975c:	83 ec 0c             	sub    esp,0xc
c000975f:	68 18 09 02 c0       	push   0xc0020918
c0009764:	e8 93 2c 01 00       	call   c001c3fc <LinkedList<UnixFile>::getFirstElement()>
c0009769:	83 c4 10             	add    esp,0x10
c000976c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009770:	83 ec 0c             	sub    esp,0xc
c0009773:	68 18 09 02 c0       	push   0xc0020918
c0009778:	e8 87 2c 01 00       	call   c001c404 <LinkedList<UnixFile>::removeFirst()>
c000977d:	83 c4 10             	add    esp,0x10
c0009780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009784:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009788:	74 40                	je     c00097ca <UnixFile::~UnixFile()+0x92>
c000978a:	83 ec 08             	sub    esp,0x8
c000978d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009791:	68 18 09 02 c0       	push   0xc0020918
c0009796:	e8 8d 2b 01 00       	call   c001c328 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000979b:	83 c4 10             	add    esp,0x10
c000979e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097a2:	8d 50 01             	lea    edx,[eax+0x1]
c00097a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a9:	3d 88 13 00 00       	cmp    eax,0x1388
c00097ae:	0f 94 c0             	sete   al
c00097b1:	84 c0                	test   al,al
c00097b3:	74 a7                	je     c000975c <UnixFile::~UnixFile()+0x24>
c00097b5:	83 ec 0c             	sub    esp,0xc
c00097b8:	68 60 d8 01 c0       	push   0xc001d860
c00097bd:	e8 79 6f 00 00       	call   c001073b <Krnl::panic(char const*)>
c00097c2:	83 c4 10             	add    esp,0x10
c00097c5:	eb 95                	jmp    c000975c <UnixFile::~UnixFile()+0x24>
c00097c7:	90                   	nop
c00097c8:	eb 01                	jmp    c00097cb <UnixFile::~UnixFile()+0x93>
c00097ca:	90                   	nop
c00097cb:	90                   	nop
c00097cc:	83 c4 1c             	add    esp,0x1c
c00097cf:	c3                   	ret    

c00097d0 <UnixFile::~UnixFile()>:
c00097d0:	83 ec 0c             	sub    esp,0xc
c00097d3:	83 ec 0c             	sub    esp,0xc
c00097d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097da:	e8 59 ff ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c00097df:	83 c4 10             	add    esp,0x10
c00097e2:	83 ec 08             	sub    esp,0x8
c00097e5:	6a 0c                	push   0xc
c00097e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097eb:	e8 06 13 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c00097f0:	83 c4 10             	add    esp,0x10
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	c3                   	ret    
c00097f7:	90                   	nop

c00097f8 <ReservedFilename::~ReservedFilename()>:
c00097f8:	83 ec 0c             	sub    esp,0xc
c00097fb:	ba a4 d8 01 c0       	mov    edx,0xc001d8a4
c0009800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009804:	89 10                	mov    DWORD PTR [eax],edx
c0009806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000980a:	83 ec 0c             	sub    esp,0xc
c000980d:	50                   	push   eax
c000980e:	e8 25 ff ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c0009813:	83 c4 10             	add    esp,0x10
c0009816:	90                   	nop
c0009817:	83 c4 0c             	add    esp,0xc
c000981a:	c3                   	ret    
c000981b:	90                   	nop

c000981c <ReservedFilename::~ReservedFilename()>:
c000981c:	83 ec 0c             	sub    esp,0xc
c000981f:	83 ec 0c             	sub    esp,0xc
c0009822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009826:	e8 cd ff ff ff       	call   c00097f8 <ReservedFilename::~ReservedFilename()>
c000982b:	83 c4 10             	add    esp,0x10
c000982e:	83 ec 08             	sub    esp,0x8
c0009831:	6a 0c                	push   0xc
c0009833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009837:	e8 ba 12 00 00       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000983c:	83 c4 10             	add    esp,0x10
c000983f:	83 c4 0c             	add    esp,0xc
c0009842:	c3                   	ret    

c0009843 <getFromFileDescriptor(int)>:
c0009843:	53                   	push   ebx
c0009844:	83 ec 08             	sub    esp,0x8
c0009847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000984b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009851:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009857:	7f 2c                	jg     c0009885 <getFromFileDescriptor(int)+0x42>
c0009859:	83 ec 0c             	sub    esp,0xc
c000985c:	68 18 09 02 c0       	push   0xc0020918
c0009861:	e8 96 2b 01 00       	call   c001c3fc <LinkedList<UnixFile>::getFirstElement()>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	85 c0                	test   eax,eax
c000986b:	75 04                	jne    c0009871 <getFromFileDescriptor(int)+0x2e>
c000986d:	31 c0                	xor    eax,eax
c000986f:	eb 6e                	jmp    c00098df <getFromFileDescriptor(int)+0x9c>
c0009871:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009874:	74 69                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c0009876:	52                   	push   edx
c0009877:	52                   	push   edx
c0009878:	50                   	push   eax
c0009879:	68 18 09 02 c0       	push   0xc0020918
c000987e:	e8 23 2c 01 00       	call   c001c4a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009883:	eb e1                	jmp    c0009866 <getFromFileDescriptor(int)+0x23>
c0009885:	a1 0c 09 02 c0       	mov    eax,ds:0xc002090c
c000988a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009890:	74 4d                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c0009892:	a1 10 09 02 c0       	mov    eax,ds:0xc0020910
c0009897:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000989d:	74 40                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c000989f:	a1 08 09 02 c0       	mov    eax,ds:0xc0020908
c00098a4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098aa:	74 33                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c00098ac:	a1 04 09 02 c0       	mov    eax,ds:0xc0020904
c00098b1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098b7:	74 26                	je     c00098df <getFromFileDescriptor(int)+0x9c>
c00098b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098bf:	83 f8 08             	cmp    eax,0x8
c00098c2:	77 09                	ja     c00098cd <getFromFileDescriptor(int)+0x8a>
c00098c4:	8b 04 85 e0 08 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf720]
c00098cb:	eb 12                	jmp    c00098df <getFromFileDescriptor(int)+0x9c>
c00098cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098d3:	83 fb 08             	cmp    ebx,0x8
c00098d6:	77 95                	ja     c000986d <getFromFileDescriptor(int)+0x2a>
c00098d8:	8b 04 9d a0 08 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf760]
c00098df:	83 c4 08             	add    esp,0x8
c00098e2:	5b                   	pop    ebx
c00098e3:	c3                   	ret    

c00098e4 <__static_initialization_and_destruction_0(int, int)>:
c00098e4:	83 ec 0c             	sub    esp,0xc
c00098e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098ec:	75 34                	jne    c0009922 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098f6:	75 2a                	jne    c0009922 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	68 18 09 02 c0       	push   0xc0020918
c0009900:	e8 e1 29 01 00       	call   c001c2e6 <LinkedList<UnixFile>::LinkedList()>
c0009905:	83 c4 10             	add    esp,0x10
c0009908:	83 ec 04             	sub    esp,0x4
c000990b:	68 a4 f5 01 c0       	push   0xc001f5a4
c0009910:	68 18 09 02 c0       	push   0xc0020918
c0009915:	68 e4 c2 01 c0       	push   0xc001c2e4
c000991a:	e8 87 11 00 00       	call   c000aaa6 <__cxa_atexit>
c000991f:	83 c4 10             	add    esp,0x10
c0009922:	90                   	nop
c0009923:	83 c4 0c             	add    esp,0xc
c0009926:	c3                   	ret    

c0009927 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009927:	83 ec 0c             	sub    esp,0xc
c000992a:	83 ec 08             	sub    esp,0x8
c000992d:	68 ff ff 00 00       	push   0xffff
c0009932:	6a 01                	push   0x1
c0009934:	e8 ab ff ff ff       	call   c00098e4 <__static_initialization_and_destruction_0(int, int)>
c0009939:	83 c4 10             	add    esp,0x10
c000993c:	83 c4 0c             	add    esp,0xc
c000993f:	c3                   	ret    

c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009940:	53                   	push   ebx
c0009941:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009945:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009949:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000994f:	89 c8                	mov    eax,ecx
c0009951:	d1 e8                	shr    eax,1
c0009953:	03 05 88 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f788
c0009959:	83 e1 01             	and    ecx,0x1
c000995c:	8a 10                	mov    dl,BYTE PTR [eax]
c000995e:	75 09                	jne    c0009969 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009960:	83 e2 f0             	and    edx,0xfffffff0
c0009963:	09 da                	or     edx,ebx
c0009965:	88 10                	mov    BYTE PTR [eax],dl
c0009967:	5b                   	pop    ebx
c0009968:	c3                   	ret    
c0009969:	c1 e3 04             	shl    ebx,0x4
c000996c:	83 e2 0f             	and    edx,0xf
c000996f:	09 da                	or     edx,ebx
c0009971:	88 10                	mov    BYTE PTR [eax],dl
c0009973:	5b                   	pop    ebx
c0009974:	c3                   	ret    

c0009975 <Virt::getPageState(unsigned long)>:
c0009975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009979:	8b 0d 88 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f788
c000997f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009985:	89 d0                	mov    eax,edx
c0009987:	d1 e8                	shr    eax,1
c0009989:	83 e2 01             	and    edx,0x1
c000998c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000998f:	75 04                	jne    c0009995 <Virt::getPageState(unsigned long)+0x20>
c0009991:	83 e0 0f             	and    eax,0xf
c0009994:	c3                   	ret    
c0009995:	c0 e8 04             	shr    al,0x4
c0009998:	c3                   	ret    

c0009999 <Virt::allocateKernelVirtualPages(int)>:
c0009999:	55                   	push   ebp
c000999a:	31 ed                	xor    ebp,ebp
c000999c:	57                   	push   edi
c000999d:	56                   	push   esi
c000999e:	53                   	push   ebx
c000999f:	31 db                	xor    ebx,ebx
c00099a1:	83 ec 1c             	sub    esp,0x1c
c00099a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099a8:	8b 3d 84 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f784
c00099ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099b3:	57                   	push   edi
c00099b4:	e8 bc ff ff ff       	call   c0009975 <Virt::getPageState(unsigned long)>
c00099b9:	5a                   	pop    edx
c00099ba:	84 c0                	test   al,al
c00099bc:	75 3a                	jne    c00099f8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099be:	85 db                	test   ebx,ebx
c00099c0:	75 02                	jne    c00099c4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099c2:	89 fd                	mov    ebp,edi
c00099c4:	43                   	inc    ebx
c00099c5:	39 f3                	cmp    ebx,esi
c00099c7:	74 5a                	je     c0009a23 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099c9:	47                   	inc    edi
c00099ca:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099d0:	76 31                	jbe    c0009a03 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099d2:	c7 05 84 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f784,0xc8000
c00099dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099e1:	75 28                	jne    c0009a0b <Virt::allocateKernelVirtualPages(int)+0x72>
c00099e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099e8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099ed:	57                   	push   edi
c00099ee:	e8 82 ff ff ff       	call   c0009975 <Virt::getPageState(unsigned long)>
c00099f3:	5a                   	pop    edx
c00099f4:	84 c0                	test   al,al
c00099f6:	74 c6                	je     c00099be <Virt::allocateKernelVirtualPages(int)+0x25>
c00099f8:	31 db                	xor    ebx,ebx
c00099fa:	47                   	inc    edi
c00099fb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009a01:	77 cf                	ja     c00099d2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009a03:	89 3d 84 f7 01 c0    	mov    DWORD PTR ds:0xc001f784,edi
c0009a09:	eb a8                	jmp    c00099b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a0b:	83 ec 0c             	sub    esp,0xc
c0009a0e:	68 b8 d8 01 c0       	push   0xc001d8b8
c0009a13:	e8 23 6d 00 00       	call   c001073b <Krnl::panic(char const*)>
c0009a18:	8b 3d 84 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f784
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	eb 90                	jmp    c00099b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a23:	89 2d 84 f7 01 c0    	mov    DWORD PTR ds:0xc001f784,ebp
c0009a29:	4b                   	dec    ebx
c0009a2a:	74 5f                	je     c0009a8b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a2c:	85 f6                	test   esi,esi
c0009a2e:	74 3d                	je     c0009a6d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a30:	89 e8                	mov    eax,ebp
c0009a32:	31 db                	xor    ebx,ebx
c0009a34:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a37:	eb 14                	jmp    c0009a4d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a39:	6a 01                	push   0x1
c0009a3b:	43                   	inc    ebx
c0009a3c:	50                   	push   eax
c0009a3d:	e8 fe fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a42:	58                   	pop    eax
c0009a43:	39 f3                	cmp    ebx,esi
c0009a45:	5a                   	pop    edx
c0009a46:	74 25                	je     c0009a6d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a48:	a1 84 f7 01 c0       	mov    eax,ds:0xc001f784
c0009a4d:	8d 50 01             	lea    edx,[eax+0x1]
c0009a50:	85 db                	test   ebx,ebx
c0009a52:	89 15 84 f7 01 c0    	mov    DWORD PTR ds:0xc001f784,edx
c0009a58:	74 20                	je     c0009a7a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a5a:	39 df                	cmp    edi,ebx
c0009a5c:	75 db                	jne    c0009a39 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a5e:	6a 03                	push   0x3
c0009a60:	43                   	inc    ebx
c0009a61:	50                   	push   eax
c0009a62:	e8 d9 fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a67:	59                   	pop    ecx
c0009a68:	39 f3                	cmp    ebx,esi
c0009a6a:	58                   	pop    eax
c0009a6b:	75 db                	jne    c0009a48 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a6d:	83 c4 1c             	add    esp,0x1c
c0009a70:	89 e8                	mov    eax,ebp
c0009a72:	5b                   	pop    ebx
c0009a73:	c1 e0 0c             	shl    eax,0xc
c0009a76:	5e                   	pop    esi
c0009a77:	5f                   	pop    edi
c0009a78:	5d                   	pop    ebp
c0009a79:	c3                   	ret    
c0009a7a:	6a 02                	push   0x2
c0009a7c:	bb 01 00 00 00       	mov    ebx,0x1
c0009a81:	50                   	push   eax
c0009a82:	e8 b9 fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a87:	58                   	pop    eax
c0009a88:	5a                   	pop    edx
c0009a89:	eb bd                	jmp    c0009a48 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a8b:	6a 04                	push   0x4
c0009a8d:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a90:	55                   	push   ebp
c0009a91:	a3 84 f7 01 c0       	mov    ds:0xc001f784,eax
c0009a96:	e8 a5 fe ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	5b                   	pop    ebx
c0009a9f:	c1 e0 0c             	shl    eax,0xc
c0009aa2:	83 c4 1c             	add    esp,0x1c
c0009aa5:	5b                   	pop    ebx
c0009aa6:	5e                   	pop    esi
c0009aa7:	5f                   	pop    edi
c0009aa8:	5d                   	pop    ebp
c0009aa9:	c3                   	ret    

c0009aaa <Virt::freeSwapfilePage(unsigned long)>:
c0009aaa:	53                   	push   ebx
c0009aab:	8b 15 2c 09 02 c0    	mov    edx,DWORD PTR ds:0xc002092c
c0009ab1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ab5:	b8 01 00 00 00       	mov    eax,0x1
c0009aba:	89 cb                	mov    ebx,ecx
c0009abc:	d3 e0                	shl    eax,cl
c0009abe:	c1 eb 05             	shr    ebx,0x5
c0009ac1:	f7 d0                	not    eax
c0009ac3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009ac6:	5b                   	pop    ebx
c0009ac7:	c3                   	ret    

c0009ac8 <Virt::swapIDToSector(unsigned long)>:
c0009ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acc:	0f af 05 8c f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f78c
c0009ad3:	03 05 94 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f794
c0009ad9:	c3                   	ret    

c0009ada <Virt::allocateSwapfilePage()>:
c0009ada:	55                   	push   ebp
c0009adb:	31 d2                	xor    edx,edx
c0009add:	57                   	push   edi
c0009ade:	56                   	push   esi
c0009adf:	53                   	push   ebx
c0009ae0:	83 ec 0c             	sub    esp,0xc
c0009ae3:	8b 0d 8c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f78c
c0009ae9:	a1 90 f7 01 c0       	mov    eax,ds:0xc001f790
c0009aee:	f7 f1                	div    ecx
c0009af0:	39 0d 90 f7 01 c0    	cmp    DWORD PTR ds:0xc001f790,ecx
c0009af6:	72 2d                	jb     c0009b25 <Virt::allocateSwapfilePage()+0x4b>
c0009af8:	8b 35 2c 09 02 c0    	mov    esi,DWORD PTR ds:0xc002092c
c0009afe:	8b 16                	mov    edx,DWORD PTR [esi]
c0009b00:	f6 c2 01             	test   dl,0x1
c0009b03:	74 3c                	je     c0009b41 <Virt::allocateSwapfilePage()+0x67>
c0009b05:	31 c9                	xor    ecx,ecx
c0009b07:	bf 01 00 00 00       	mov    edi,0x1
c0009b0c:	eb 12                	jmp    c0009b20 <Virt::allocateSwapfilePage()+0x46>
c0009b0e:	89 fd                	mov    ebp,edi
c0009b10:	89 ca                	mov    edx,ecx
c0009b12:	d3 e5                	shl    ebp,cl
c0009b14:	c1 ea 05             	shr    edx,0x5
c0009b17:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b1c:	85 ea                	test   edx,ebp
c0009b1e:	74 2a                	je     c0009b4a <Virt::allocateSwapfilePage()+0x70>
c0009b20:	41                   	inc    ecx
c0009b21:	39 c8                	cmp    eax,ecx
c0009b23:	77 e9                	ja     c0009b0e <Virt::allocateSwapfilePage()+0x34>
c0009b25:	83 ec 0c             	sub    esp,0xc
c0009b28:	68 1f da 01 c0       	push   0xc001da1f
c0009b2d:	e8 09 6c 00 00       	call   c001073b <Krnl::panic(char const*)>
c0009b32:	83 c4 10             	add    esp,0x10
c0009b35:	31 c9                	xor    ecx,ecx
c0009b37:	83 c4 0c             	add    esp,0xc
c0009b3a:	89 c8                	mov    eax,ecx
c0009b3c:	5b                   	pop    ebx
c0009b3d:	5e                   	pop    esi
c0009b3e:	5f                   	pop    edi
c0009b3f:	5d                   	pop    ebp
c0009b40:	c3                   	ret    
c0009b41:	89 f3                	mov    ebx,esi
c0009b43:	bd 01 00 00 00       	mov    ebp,0x1
c0009b48:	31 c9                	xor    ecx,ecx
c0009b4a:	09 ea                	or     edx,ebp
c0009b4c:	89 c8                	mov    eax,ecx
c0009b4e:	89 13                	mov    DWORD PTR [ebx],edx
c0009b50:	83 c4 0c             	add    esp,0xc
c0009b53:	5b                   	pop    ebx
c0009b54:	5e                   	pop    esi
c0009b55:	5f                   	pop    edi
c0009b56:	5d                   	pop    ebp
c0009b57:	c3                   	ret    

c0009b58 <Virt::virtualMemorySetup()>:
c0009b58:	53                   	push   ebx
c0009b59:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b5e:	6a 0f                	push   0xf
c0009b60:	53                   	push   ebx
c0009b61:	43                   	inc    ebx
c0009b62:	e8 d9 fd ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b67:	58                   	pop    eax
c0009b68:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b6e:	5a                   	pop    edx
c0009b6f:	75 ed                	jne    c0009b5e <Virt::virtualMemorySetup()+0x6>
c0009b71:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b76:	6a 00                	push   0x0
c0009b78:	53                   	push   ebx
c0009b79:	43                   	inc    ebx
c0009b7a:	e8 c1 fd ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b7f:	59                   	pop    ecx
c0009b80:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b86:	58                   	pop    eax
c0009b87:	75 ed                	jne    c0009b76 <Virt::virtualMemorySetup()+0x1e>
c0009b89:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b8e:	6a 0f                	push   0xf
c0009b90:	53                   	push   ebx
c0009b91:	43                   	inc    ebx
c0009b92:	e8 a9 fd ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b97:	58                   	pop    eax
c0009b98:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b9e:	5a                   	pop    edx
c0009b9f:	75 ed                	jne    c0009b8e <Virt::virtualMemorySetup()+0x36>
c0009ba1:	5b                   	pop    ebx
c0009ba2:	c3                   	ret    

c0009ba3 <Virt::setupPageSwapping(int)>:
c0009ba3:	53                   	push   ebx
c0009ba4:	83 ec 0c             	sub    esp,0xc
c0009ba7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009bab:	a1 a8 2d 02 c0       	mov    eax,ds:0xc0022da8
c0009bb0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bb8:	53                   	push   ebx
c0009bb9:	c1 e3 0b             	shl    ebx,0xb
c0009bbc:	68 36 da 01 c0       	push   0xc001da36
c0009bc1:	50                   	push   eax
c0009bc2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bc5:	89 1d 90 f7 01 c0    	mov    DWORD PTR ds:0xc001f790,ebx
c0009bcb:	c6 05 98 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f798,0x43
c0009bd2:	c1 eb 08             	shr    ebx,0x8
c0009bd5:	a3 94 f7 01 c0       	mov    ds:0xc001f794,eax
c0009bda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bdd:	c7 05 8c f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f78c,0x8
c0009be7:	e8 71 e2 ff ff       	call   c0007e5d <malloc>
c0009bec:	83 c4 0c             	add    esp,0xc
c0009bef:	89 c1                	mov    ecx,eax
c0009bf1:	a3 2c 09 02 c0       	mov    ds:0xc002092c,eax
c0009bf6:	31 d2                	xor    edx,edx
c0009bf8:	a1 90 f7 01 c0       	mov    eax,ds:0xc001f790
c0009bfd:	f7 35 8c f7 01 c0    	div    DWORD PTR ds:0xc001f78c
c0009c03:	c1 e8 05             	shr    eax,0x5
c0009c06:	50                   	push   eax
c0009c07:	6a 00                	push   0x0
c0009c09:	51                   	push   ecx
c0009c0a:	e8 e1 68 ff ff       	call   c00004f0 <memset>
c0009c0f:	83 c4 18             	add    esp,0x18
c0009c12:	5b                   	pop    ebx
c0009c13:	c3                   	ret    

c0009c14 <VAS::VAS()>:
c0009c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2e:	a3 30 09 02 c0       	mov    ds:0xc0020930,eax
c0009c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c37:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c46:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c4d:	90                   	nop
c0009c4e:	c3                   	ret    
c0009c4f:	90                   	nop

c0009c50 <VAS::VAS(VAS*)>:
c0009c50:	83 ec 0c             	sub    esp,0xc
c0009c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c69:	83 ec 0c             	sub    esp,0xc
c0009c6c:	68 d8 d8 01 c0       	push   0xc001d8d8
c0009c71:	e8 c5 6a 00 00       	call   c001073b <Krnl::panic(char const*)>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	90                   	nop
c0009c7a:	83 c4 0c             	add    esp,0xc
c0009c7d:	c3                   	ret    

c0009c7e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c82:	89 c2                	mov    edx,eax
c0009c84:	c1 e8 0a             	shr    eax,0xa
c0009c87:	c1 ea 16             	shr    edx,0x16
c0009c8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c8f:	19 c9                	sbb    ecx,ecx
c0009c91:	c1 e2 0c             	shl    edx,0xc
c0009c94:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c9a:	25 fc 0f 00 00       	and    eax,0xffc
c0009c9f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009ca6:	01 d0                	add    eax,edx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <VAS::getPageTableEntry(unsigned long)>:
c0009caa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009cae:	89 ca                	mov    edx,ecx
c0009cb0:	c1 e9 0a             	shr    ecx,0xa
c0009cb3:	c1 ea 16             	shr    edx,0x16
c0009cb6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cbc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cc2:	c1 e0 0c             	shl    eax,0xc
c0009cc5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cc8:	c3                   	ret    

c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cc9:	57                   	push   edi
c0009cca:	56                   	push   esi
c0009ccb:	be 01 00 00 00       	mov    esi,0x1
c0009cd0:	53                   	push   ebx
c0009cd1:	83 ec 10             	sub    esp,0x10
c0009cd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cd8:	c1 eb 0c             	shr    ebx,0xc
c0009cdb:	eb 3f                	jmp    c0009d1c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009cdd:	83 ec 08             	sub    esp,0x8
c0009ce0:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0009ce5:	57                   	push   edi
c0009ce6:	50                   	push   eax
c0009ce7:	e8 be ff ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009cec:	83 c4 10             	add    esp,0x10
c0009cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cf1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cf5:	f6 c4 04             	test   ah,0x4
c0009cf8:	75 60                	jne    c0009d5a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cfa:	80 fa 04             	cmp    dl,0x4
c0009cfd:	74 79                	je     c0009d78 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cff:	80 fa 02             	cmp    dl,0x2
c0009d02:	0f 84 89 00 00 00    	je     c0009d91 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d08:	80 fa 03             	cmp    dl,0x3
c0009d0b:	0f 84 ae 00 00 00    	je     c0009dbf <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d11:	fe ca                	dec    dl
c0009d13:	0f 84 93 00 00 00    	je     c0009dac <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d19:	43                   	inc    ebx
c0009d1a:	31 f6                	xor    esi,esi
c0009d1c:	53                   	push   ebx
c0009d1d:	89 df                	mov    edi,ebx
c0009d1f:	e8 51 fc ff ff       	call   c0009975 <Virt::getPageState(unsigned long)>
c0009d24:	c1 e7 0c             	shl    edi,0xc
c0009d27:	5a                   	pop    edx
c0009d28:	84 c0                	test   al,al
c0009d2a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d2e:	75 ad                	jne    c0009cdd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d30:	83 ec 0c             	sub    esp,0xc
c0009d33:	68 4d da 01 c0       	push   0xc001da4d
c0009d38:	e8 fe 69 00 00       	call   c001073b <Krnl::panic(char const*)>
c0009d3d:	5a                   	pop    edx
c0009d3e:	59                   	pop    ecx
c0009d3f:	57                   	push   edi
c0009d40:	8b 3d 30 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020930
c0009d46:	57                   	push   edi
c0009d47:	e8 5e ff ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009d4c:	83 c4 10             	add    esp,0x10
c0009d4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d51:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d55:	f6 c4 04             	test   ah,0x4
c0009d58:	74 bf                	je     c0009d19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d5a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d63:	83 ec 0c             	sub    esp,0xc
c0009d66:	50                   	push   eax
c0009d67:	e8 5c e4 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0009d6c:	83 c4 10             	add    esp,0x10
c0009d6f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d73:	80 fa 04             	cmp    dl,0x4
c0009d76:	75 87                	jne    c0009cff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d78:	89 f0                	mov    eax,esi
c0009d7a:	84 c0                	test   al,al
c0009d7c:	75 47                	jne    c0009dc5 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d7e:	c7 44 24 20 fc d8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d8fc
c0009d86:	83 c4 10             	add    esp,0x10
c0009d89:	5b                   	pop    ebx
c0009d8a:	5e                   	pop    esi
c0009d8b:	5f                   	pop    edi
c0009d8c:	e9 aa 69 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c0009d91:	89 f0                	mov    eax,esi
c0009d93:	84 c0                	test   al,al
c0009d95:	75 15                	jne    c0009dac <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d97:	83 ec 0c             	sub    esp,0xc
c0009d9a:	68 69 da 01 c0       	push   0xc001da69
c0009d9f:	e8 97 69 00 00       	call   c001073b <Krnl::panic(char const*)>
c0009da4:	83 c4 10             	add    esp,0x10
c0009da7:	e9 6d ff ff ff       	jmp    c0009d19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dac:	83 ec 08             	sub    esp,0x8
c0009daf:	6a 00                	push   0x0
c0009db1:	53                   	push   ebx
c0009db2:	e8 89 fb ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	e9 5a ff ff ff       	jmp    c0009d19 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dbf:	89 f0                	mov    eax,esi
c0009dc1:	84 c0                	test   al,al
c0009dc3:	75 15                	jne    c0009dda <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dc5:	83 ec 08             	sub    esp,0x8
c0009dc8:	6a 00                	push   0x0
c0009dca:	53                   	push   ebx
c0009dcb:	e8 70 fb ff ff       	call   c0009940 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dd0:	83 c4 10             	add    esp,0x10
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	5b                   	pop    ebx
c0009dd7:	5e                   	pop    esi
c0009dd8:	5f                   	pop    edi
c0009dd9:	c3                   	ret    
c0009dda:	c7 44 24 20 85 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da85
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	5b                   	pop    ebx
c0009de6:	5e                   	pop    esi
c0009de7:	5f                   	pop    edi
c0009de8:	e9 4e 69 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c0009ded:	90                   	nop

c0009dee <VAS::freeAllocatedPages(unsigned long)>:
c0009dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009df2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009df6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009dfa:	74 09                	je     c0009e05 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009dfc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009e00:	e9 c4 fe ff ff       	jmp    c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e05:	c7 44 24 04 20 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d920
c0009e0d:	e9 da 0d 00 00       	jmp    c000abec <Dbg::kprintf(char const*, ...)>

c0009e12 <VAS::virtualToPhysical(unsigned long)>:
c0009e12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e16:	50                   	push   eax
c0009e17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e1b:	52                   	push   edx
c0009e1c:	e8 89 fe ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009e21:	59                   	pop    ecx
c0009e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e24:	5a                   	pop    edx
c0009e25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e2a:	c3                   	ret    
c0009e2b:	90                   	nop

c0009e2c <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e2c:	55                   	push   ebp
c0009e2d:	57                   	push   edi
c0009e2e:	56                   	push   esi
c0009e2f:	53                   	push   ebx
c0009e30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e34:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e3c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e40:	85 db                	test   ebx,ebx
c0009e42:	7e 22                	jle    c0009e66 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e44:	c1 e3 0c             	shl    ebx,0xc
c0009e47:	01 f3                	add    ebx,esi
c0009e49:	56                   	push   esi
c0009e4a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e50:	55                   	push   ebp
c0009e51:	e8 54 fe ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0009e56:	5a                   	pop    edx
c0009e57:	59                   	pop    ecx
c0009e58:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e5a:	21 f9                	and    ecx,edi
c0009e5c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e60:	39 f3                	cmp    ebx,esi
c0009e62:	89 08                	mov    DWORD PTR [eax],ecx
c0009e64:	75 e3                	jne    c0009e49 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	5f                   	pop    edi
c0009e69:	5d                   	pop    ebp
c0009e6a:	c3                   	ret    
c0009e6b:	90                   	nop

c0009e6c <VAS::setToWriteCombining(unsigned long, int)>:
c0009e6c:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0009e71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e77:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e7e:	75 01                	jne    c0009e81 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e80:	c3                   	ret    
c0009e81:	68 80 00 00 00       	push   0x80
c0009e86:	6a ff                	push   0xffffffff
c0009e88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e8c:	50                   	push   eax
c0009e8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e91:	52                   	push   edx
c0009e92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e96:	51                   	push   ecx
c0009e97:	e8 90 ff ff ff       	call   c0009e2c <VAS::reflagRange(unsigned long, int, int, int)>
c0009e9c:	83 c4 14             	add    esp,0x14
c0009e9f:	c3                   	ret    

c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009ea0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eb0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009eb3:	19 c0                	sbb    eax,eax
c0009eb5:	83 ca 03             	or     edx,0x3
c0009eb8:	83 e0 fc             	and    eax,0xfffffffc
c0009ebb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ec2:	0f 20 d8             	mov    eax,cr3
c0009ec5:	0f 22 d8             	mov    cr3,eax
c0009ec8:	c3                   	ret    
c0009ec9:	90                   	nop

c0009eca <VAS::~VAS()>:
c0009eca:	83 ec 2c             	sub    esp,0x2c
c0009ecd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ed5:	fa                   	cli    
c0009ed6:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0009edb:	40                   	inc    eax
c0009edc:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0009ee1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009eeb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009ef1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ef5:	6a 01                	push   0x1
c0009ef7:	50                   	push   eax
c0009ef8:	e8 a3 ff ff ff       	call   c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>
c0009efd:	83 c4 0c             	add    esp,0xc
c0009f00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f08:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f10:	0f 8f d4 00 00 00    	jg     c0009fea <VAS::~VAS()+0x120>
c0009f16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f21:	c1 e2 02             	shl    edx,0x2
c0009f24:	01 d0                	add    eax,edx
c0009f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f30:	83 e0 01             	and    eax,0x1
c0009f33:	0f 84 a8 00 00 00    	je     c0009fe1 <VAS::~VAS()+0x117>
c0009f39:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f41:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f49:	7f 72                	jg     c0009fbd <VAS::~VAS()+0xf3>
c0009f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4f:	c1 e0 0a             	shl    eax,0xa
c0009f52:	89 c2                	mov    edx,eax
c0009f54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f58:	01 d0                	add    eax,edx
c0009f5a:	c1 e0 0c             	shl    eax,0xc
c0009f5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f61:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f66:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f6b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f75:	6a 01                	push   0x1
c0009f77:	50                   	push   eax
c0009f78:	e8 01 fd ff ff       	call   c0009c7e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f7d:	83 c4 0c             	add    esp,0xc
c0009f80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f92:	25 01 04 00 00       	and    eax,0x401
c0009f97:	3d 01 04 00 00       	cmp    eax,0x401
c0009f9c:	75 19                	jne    c0009fb7 <VAS::~VAS()+0xed>
c0009f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fa2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fa7:	83 ec 0c             	sub    esp,0xc
c0009faa:	50                   	push   eax
c0009fab:	e8 18 e2 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fb7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fbb:	eb 84                	jmp    c0009f41 <VAS::~VAS()+0x77>
c0009fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc1:	25 00 04 00 00       	and    eax,0x400
c0009fc6:	74 19                	je     c0009fe1 <VAS::~VAS()+0x117>
c0009fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	50                   	push   eax
c0009fd5:	e8 ee e1 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fe1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe5:	e9 1e ff ff ff       	jmp    c0009f08 <VAS::~VAS()+0x3e>
c0009fea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ff1:	83 ec 0c             	sub    esp,0xc
c0009ff4:	50                   	push   eax
c0009ff5:	e8 cf fc ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ffa:	83 c4 10             	add    esp,0x10
c0009ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a001:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	50                   	push   eax
c000a008:	e8 bb e1 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c000a00d:	83 c4 10             	add    esp,0x10
c000a010:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a014:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a019:	48                   	dec    eax
c000a01a:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a01f:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a024:	85 c0                	test   eax,eax
c000a026:	75 01                	jne    c000a029 <VAS::~VAS()+0x15f>
c000a028:	fb                   	sti    
c000a029:	90                   	nop
c000a02a:	83 c4 2c             	add    esp,0x2c
c000a02d:	c3                   	ret    

c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a02e:	55                   	push   ebp
c000a02f:	57                   	push   edi
c000a030:	56                   	push   esi
c000a031:	53                   	push   ebx
c000a032:	83 ec 1c             	sub    esp,0x1c
c000a035:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a039:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a03d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a043:	77 0b                	ja     c000a050 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a045:	0f 20 d8             	mov    eax,cr3
c000a048:	0f 20 d8             	mov    eax,cr3
c000a04b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a04e:	75 47                	jne    c000a097 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a050:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a054:	09 d8                	or     eax,ebx
c000a056:	a9 ff 0f 00 00       	test   eax,0xfff
c000a05b:	75 57                	jne    c000a0b4 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a05d:	89 de                	mov    esi,ebx
c000a05f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a062:	c1 ee 16             	shr    esi,0x16
c000a065:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a06c:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a070:	74 54                	je     c000a0c6 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a072:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a076:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a07c:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a080:	c1 e6 0c             	shl    esi,0xc
c000a083:	c1 eb 0a             	shr    ebx,0xa
c000a086:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a08c:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a08f:	83 c4 1c             	add    esp,0x1c
c000a092:	5b                   	pop    ebx
c000a093:	5e                   	pop    esi
c000a094:	5f                   	pop    edi
c000a095:	5d                   	pop    ebp
c000a096:	c3                   	ret    
c000a097:	83 ec 0c             	sub    esp,0xc
c000a09a:	68 44 d9 01 c0       	push   0xc001d944
c000a09f:	e8 48 0b 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a0a4:	83 c4 10             	add    esp,0x10
c000a0a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ab:	09 d8                	or     eax,ebx
c000a0ad:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0b2:	74 a9                	je     c000a05d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0b4:	83 ec 0c             	sub    esp,0xc
c000a0b7:	68 ac d9 01 c0       	push   0xc001d9ac
c000a0bc:	e8 7a 66 00 00       	call   c001073b <Krnl::panic(char const*)>
c000a0c1:	83 c4 10             	add    esp,0x10
c000a0c4:	eb 97                	jmp    c000a05d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0ca:	e8 5b e1 ff ff       	call   c000822a <Phys::allocatePage()>
c000a0cf:	83 ec 0c             	sub    esp,0xc
c000a0d2:	89 c5                	mov    ebp,eax
c000a0d4:	8b 0d 30 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020930
c000a0da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0de:	6a 01                	push   0x1
c000a0e0:	e8 b4 f8 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a0e5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0ec:	6a 01                	push   0x1
c000a0ee:	50                   	push   eax
c000a0ef:	55                   	push   ebp
c000a0f0:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0fa:	51                   	push   ecx
c000a0fb:	e8 28 02 00 00       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a100:	83 c4 1c             	add    esp,0x1c
c000a103:	68 00 10 00 00       	push   0x1000
c000a108:	6a 00                	push   0x0
c000a10a:	50                   	push   eax
c000a10b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a10f:	e8 dc 63 ff ff       	call   c00004f0 <memset>
c000a114:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a118:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a11b:	e8 a9 fb ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a120:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a124:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a127:	83 c4 10             	add    esp,0x10
c000a12a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a12d:	e9 40 ff ff ff       	jmp    c000a072 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a132 <VAS::allocatePages(int, int)>:
c000a132:	55                   	push   ebp
c000a133:	57                   	push   edi
c000a134:	56                   	push   esi
c000a135:	53                   	push   ebx
c000a136:	83 ec 1c             	sub    esp,0x1c
c000a139:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a13d:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a142:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a148:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a14e:	83 e0 01             	and    eax,0x1
c000a151:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a155:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a159:	0f 85 cc 00 00 00    	jne    c000a22b <VAS::allocatePages(int, int)+0xf9>
c000a15f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a162:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a166:	85 c0                	test   eax,eax
c000a168:	0f 84 a1 00 00 00    	je     c000a20f <VAS::allocatePages(int, int)+0xdd>
c000a16e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a172:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a176:	c1 e6 0c             	shl    esi,0xc
c000a179:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a182:	7e 33                	jle    c000a1b7 <VAS::allocatePages(int, int)+0x85>
c000a184:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a188:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a18c:	81 cd 00 04 00 00    	or     ebp,0x400
c000a192:	e8 93 e0 ff ff       	call   c000822a <Phys::allocatePage()>
c000a197:	55                   	push   ebp
c000a198:	53                   	push   ebx
c000a199:	50                   	push   eax
c000a19a:	57                   	push   edi
c000a19b:	e8 8e fe ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a1a0:	83 c4 10             	add    esp,0x10
c000a1a3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1a8:	74 03                	je     c000a1ad <VAS::allocatePages(int, int)+0x7b>
c000a1aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1b3:	39 de                	cmp    esi,ebx
c000a1b5:	75 db                	jne    c000a192 <VAS::allocatePages(int, int)+0x60>
c000a1b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1bc:	75 12                	jne    c000a1d0 <VAS::allocatePages(int, int)+0x9e>
c000a1be:	0f 20 d8             	mov    eax,cr3
c000a1c1:	0f 22 d8             	mov    cr3,eax
c000a1c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c8:	83 c4 1c             	add    esp,0x1c
c000a1cb:	5b                   	pop    ebx
c000a1cc:	5e                   	pop    esi
c000a1cd:	5f                   	pop    edi
c000a1ce:	5d                   	pop    ebp
c000a1cf:	c3                   	ret    
c000a1d0:	c1 ee 0a             	shr    esi,0xa
c000a1d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1d7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1dd:	c1 eb 0a             	shr    ebx,0xa
c000a1e0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1e6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1ec:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1f2:	39 c3                	cmp    ebx,eax
c000a1f4:	77 ce                	ja     c000a1c4 <VAS::allocatePages(int, int)+0x92>
c000a1f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ff:	39 d8                	cmp    eax,ebx
c000a201:	73 f3                	jae    c000a1f6 <VAS::allocatePages(int, int)+0xc4>
c000a203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a207:	83 c4 1c             	add    esp,0x1c
c000a20a:	5b                   	pop    ebx
c000a20b:	5e                   	pop    esi
c000a20c:	5f                   	pop    edi
c000a20d:	5d                   	pop    ebp
c000a20e:	c3                   	ret    
c000a20f:	83 ec 0c             	sub    esp,0xc
c000a212:	68 d0 d9 01 c0       	push   0xc001d9d0
c000a217:	e8 1f 65 00 00       	call   c001073b <Krnl::panic(char const*)>
c000a21c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a21f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	e9 43 ff ff ff       	jmp    c000a16e <VAS::allocatePages(int, int)+0x3c>
c000a22b:	83 ec 0c             	sub    esp,0xc
c000a22e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a232:	51                   	push   ecx
c000a233:	e8 61 f7 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a244:	0f 87 9b 00 00 00    	ja     c000a2e5 <VAS::allocatePages(int, int)+0x1b3>
c000a24a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a24e:	85 d2                	test   edx,edx
c000a250:	7e 3c                	jle    c000a28e <VAS::allocatePages(int, int)+0x15c>
c000a252:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a256:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a25a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a25e:	c1 e5 0c             	shl    ebp,0xc
c000a261:	81 ce 00 04 00 00    	or     esi,0x400
c000a267:	01 dd                	add    ebp,ebx
c000a269:	e8 bc df ff ff       	call   c000822a <Phys::allocatePage()>
c000a26e:	56                   	push   esi
c000a26f:	53                   	push   ebx
c000a270:	50                   	push   eax
c000a271:	57                   	push   edi
c000a272:	e8 b7 fd ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a27f:	74 03                	je     c000a284 <VAS::allocatePages(int, int)+0x152>
c000a281:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a284:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a28a:	39 dd                	cmp    ebp,ebx
c000a28c:	75 db                	jne    c000a269 <VAS::allocatePages(int, int)+0x137>
c000a28e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a293:	0f 84 25 ff ff ff    	je     c000a1be <VAS::allocatePages(int, int)+0x8c>
c000a299:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a29d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2a1:	89 d3                	mov    ebx,edx
c000a2a3:	c1 e0 0c             	shl    eax,0xc
c000a2a6:	c1 eb 0a             	shr    ebx,0xa
c000a2a9:	01 d0                	add    eax,edx
c000a2ab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2b1:	c1 e8 0a             	shr    eax,0xa
c000a2b4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2bf:	2d 00 00 40 00       	sub    eax,0x400000
c000a2c4:	39 c3                	cmp    ebx,eax
c000a2c6:	0f 87 f8 fe ff ff    	ja     c000a1c4 <VAS::allocatePages(int, int)+0x92>
c000a2cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2d5:	39 d8                	cmp    eax,ebx
c000a2d7:	73 f3                	jae    c000a2cc <VAS::allocatePages(int, int)+0x19a>
c000a2d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2dd:	83 c4 1c             	add    esp,0x1c
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	5f                   	pop    edi
c000a2e3:	5d                   	pop    ebp
c000a2e4:	c3                   	ret    
c000a2e5:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a2ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f0:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2f7:	0f 84 4d ff ff ff    	je     c000a24a <VAS::allocatePages(int, int)+0x118>
c000a2fd:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a305:	e9 40 ff ff ff       	jmp    c000a24a <VAS::allocatePages(int, int)+0x118>

c000a30a <VAS::setCPUSpecific(unsigned long)>:
c000a30a:	83 ec 0c             	sub    esp,0xc
c000a30d:	6a 05                	push   0x5
c000a30f:	68 00 00 40 c2       	push   0xc2400000
c000a314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a318:	50                   	push   eax
c000a319:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a31d:	52                   	push   edx
c000a31e:	e8 0b fd ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a323:	83 c4 1c             	add    esp,0x1c
c000a326:	c3                   	ret    
c000a327:	90                   	nop

c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a328:	55                   	push   ebp
c000a329:	57                   	push   edi
c000a32a:	56                   	push   esi
c000a32b:	53                   	push   ebx
c000a32c:	83 ec 1c             	sub    esp,0x1c
c000a32f:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a334:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a33e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a342:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a348:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a34c:	83 e0 01             	and    eax,0x1
c000a34f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a357:	85 c0                	test   eax,eax
c000a359:	7e 39                	jle    c000a394 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a35b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a35f:	89 f3                	mov    ebx,esi
c000a361:	c1 e0 0c             	shl    eax,0xc
c000a364:	01 f0                	add    eax,esi
c000a366:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a36a:	55                   	push   ebp
c000a36b:	53                   	push   ebx
c000a36c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a370:	29 f0                	sub    eax,esi
c000a372:	01 d8                	add    eax,ebx
c000a374:	50                   	push   eax
c000a375:	57                   	push   edi
c000a376:	e8 b3 fc ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a383:	74 03                	je     c000a388 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a385:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a388:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a38e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a392:	75 d6                	jne    c000a36a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a394:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a399:	75 10                	jne    c000a3ab <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a39b:	0f 20 d8             	mov    eax,cr3
c000a39e:	0f 22 d8             	mov    cr3,eax
c000a3a1:	83 c4 1c             	add    esp,0x1c
c000a3a4:	89 f0                	mov    eax,esi
c000a3a6:	5b                   	pop    ebx
c000a3a7:	5e                   	pop    esi
c000a3a8:	5f                   	pop    edi
c000a3a9:	5d                   	pop    ebp
c000a3aa:	c3                   	ret    
c000a3ab:	89 f3                	mov    ebx,esi
c000a3ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3b1:	c1 eb 0a             	shr    ebx,0xa
c000a3b4:	c1 e0 0c             	shl    eax,0xc
c000a3b7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3bd:	01 f0                	add    eax,esi
c000a3bf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3c5:	c1 e8 0a             	shr    eax,0xa
c000a3c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3cd:	2d 00 00 40 00       	sub    eax,0x400000
c000a3d2:	39 c3                	cmp    ebx,eax
c000a3d4:	77 cb                	ja     c000a3a1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3d6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3d9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3df:	39 d8                	cmp    eax,ebx
c000a3e1:	73 f3                	jae    c000a3d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3e3:	83 c4 1c             	add    esp,0x1c
c000a3e6:	89 f0                	mov    eax,esi
c000a3e8:	5b                   	pop    ebx
c000a3e9:	5e                   	pop    esi
c000a3ea:	5f                   	pop    edi
c000a3eb:	5d                   	pop    ebp
c000a3ec:	c3                   	ret    
c000a3ed:	90                   	nop

c000a3ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3ee:	55                   	push   ebp
c000a3ef:	57                   	push   edi
c000a3f0:	56                   	push   esi
c000a3f1:	53                   	push   ebx
c000a3f2:	83 ec 1c             	sub    esp,0x1c
c000a3f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3f9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3fd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a401:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a405:	a9 ff 0f 00 00       	test   eax,0xfff
c000a40a:	75 4a                	jne    c000a456 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a40c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a410:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a413:	c1 eb 16             	shr    ebx,0x16
c000a416:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a41d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a421:	74 4d                	je     c000a470 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a423:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a427:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a42b:	c1 e8 0a             	shr    eax,0xa
c000a42e:	80 fa 01             	cmp    dl,0x1
c000a431:	19 d2                	sbb    edx,edx
c000a433:	c1 e3 0c             	shl    ebx,0xc
c000a436:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a43a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a440:	25 fc 0f 00 00       	and    eax,0xffc
c000a445:	01 d8                	add    eax,ebx
c000a447:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a44e:	83 c4 1c             	add    esp,0x1c
c000a451:	5b                   	pop    ebx
c000a452:	5e                   	pop    esi
c000a453:	5f                   	pop    edi
c000a454:	5d                   	pop    ebp
c000a455:	c3                   	ret    
c000a456:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a45a:	83 ec 0c             	sub    esp,0xc
c000a45d:	68 fc d9 01 c0       	push   0xc001d9fc
c000a462:	e8 d4 62 00 00       	call   c001073b <Krnl::panic(char const*)>
c000a467:	83 c4 10             	add    esp,0x10
c000a46a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a46e:	eb 9c                	jmp    c000a40c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a470:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a474:	e8 b1 dd ff ff       	call   c000822a <Phys::allocatePage()>
c000a479:	83 ec 0c             	sub    esp,0xc
c000a47c:	89 c5                	mov    ebp,eax
c000a47e:	8b 0d 30 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020930
c000a484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a488:	6a 01                	push   0x1
c000a48a:	e8 0a f5 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a48f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a496:	6a 01                	push   0x1
c000a498:	50                   	push   eax
c000a499:	55                   	push   ebp
c000a49a:	81 cd 07 04 00 00    	or     ebp,0x407
c000a4a0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4a4:	51                   	push   ecx
c000a4a5:	e8 7e fe ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4aa:	83 c4 1c             	add    esp,0x1c
c000a4ad:	68 00 10 00 00       	push   0x1000
c000a4b2:	6a 00                	push   0x0
c000a4b4:	50                   	push   eax
c000a4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4b9:	e8 32 60 ff ff       	call   c00004f0 <memset>
c000a4be:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4c2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4c5:	e8 ff f7 ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a4ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4cd:	83 c4 10             	add    esp,0x10
c000a4d0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4d7:	e9 47 ff ff ff       	jmp    c000a423 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4dc <VAS::VAS(bool)>:
c000a4dc:	53                   	push   ebx
c000a4dd:	83 ec 28             	sub    esp,0x28
c000a4e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a502:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a506:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a509:	e8 1c dd ff ff       	call   c000822a <Phys::allocatePage()>
c000a50e:	89 c2                	mov    edx,eax
c000a510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a514:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a517:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000a51d:	83 ec 0c             	sub    esp,0xc
c000a520:	6a 01                	push   0x1
c000a522:	e8 72 f4 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000a527:	83 c4 10             	add    esp,0x10
c000a52a:	89 c2                	mov    edx,eax
c000a52c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a530:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a533:	83 ec 0c             	sub    esp,0xc
c000a536:	6a 03                	push   0x3
c000a538:	6a 01                	push   0x1
c000a53a:	52                   	push   edx
c000a53b:	50                   	push   eax
c000a53c:	53                   	push   ebx
c000a53d:	e8 e6 fd ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a542:	83 c4 20             	add    esp,0x20
c000a545:	89 c2                	mov    edx,eax
c000a547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a54b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a54e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a556:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a55e:	7f 1c                	jg     c000a57c <VAS::VAS(bool)+0xa0>
c000a560:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a564:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a567:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a56b:	c1 e2 02             	shl    edx,0x2
c000a56e:	01 d0                	add    eax,edx
c000a570:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a576:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a57a:	eb da                	jmp    c000a556 <VAS::VAS(bool)+0x7a>
c000a57c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a584:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a58c:	7f 7a                	jg     c000a608 <VAS::VAS(bool)+0x12c>
c000a58e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a592:	2d 00 02 00 00       	sub    eax,0x200
c000a597:	c1 e0 0c             	shl    eax,0xc
c000a59a:	83 c8 03             	or     eax,0x3
c000a59d:	89 c2                	mov    edx,eax
c000a59f:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a5a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5aa:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5b0:	83 e0 10             	and    eax,0x10
c000a5b3:	84 c0                	test   al,al
c000a5b5:	74 07                	je     c000a5be <VAS::VAS(bool)+0xe2>
c000a5b7:	b8 00 01 00 00       	mov    eax,0x100
c000a5bc:	eb 05                	jmp    c000a5c3 <VAS::VAS(bool)+0xe7>
c000a5be:	b8 00 00 00 00       	mov    eax,0x0
c000a5c3:	09 d0                	or     eax,edx
c000a5c5:	89 c1                	mov    ecx,eax
c000a5c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5d2:	c1 e2 02             	shl    edx,0x2
c000a5d5:	01 d0                	add    eax,edx
c000a5d7:	89 ca                	mov    edx,ecx
c000a5d9:	89 10                	mov    DWORD PTR [eax],edx
c000a5db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5df:	2d 40 03 00 00       	sub    eax,0x340
c000a5e4:	83 f8 7f             	cmp    eax,0x7f
c000a5e7:	77 16                	ja     c000a5ff <VAS::VAS(bool)+0x123>
c000a5e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f4:	c1 e2 02             	shl    edx,0x2
c000a5f7:	01 d0                	add    eax,edx
c000a5f9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5ff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a603:	e9 7c ff ff ff       	jmp    c000a584 <VAS::VAS(bool)+0xa8>
c000a608:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a60d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a613:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a619:	83 e0 10             	and    eax,0x10
c000a61c:	84 c0                	test   al,al
c000a61e:	74 07                	je     c000a627 <VAS::VAS(bool)+0x14b>
c000a620:	b8 03 41 00 00       	mov    eax,0x4103
c000a625:	eb 05                	jmp    c000a62c <VAS::VAS(bool)+0x150>
c000a627:	b8 03 40 00 00       	mov    eax,0x4003
c000a62c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a630:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a633:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a639:	89 02                	mov    DWORD PTR [edx],eax
c000a63b:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a640:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a646:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a64c:	83 ec 08             	sub    esp,0x8
c000a64f:	50                   	push   eax
c000a650:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a654:	e8 b1 fc ff ff       	call   c000a30a <VAS::setCPUSpecific(unsigned long)>
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a660:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a663:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a668:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a66e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a674:	83 e0 10             	and    eax,0x10
c000a677:	84 c0                	test   al,al
c000a679:	74 07                	je     c000a682 <VAS::VAS(bool)+0x1a6>
c000a67b:	b8 00 01 00 00       	mov    eax,0x100
c000a680:	eb 05                	jmp    c000a687 <VAS::VAS(bool)+0x1ab>
c000a682:	b8 00 00 00 00       	mov    eax,0x0
c000a687:	09 c2                	or     edx,eax
c000a689:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a68d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a690:	05 fc 0f 00 00       	add    eax,0xffc
c000a695:	83 ca 03             	or     edx,0x3
c000a698:	89 10                	mov    DWORD PTR [eax],edx
c000a69a:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a69f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a5:	83 ec 0c             	sub    esp,0xc
c000a6a8:	50                   	push   eax
c000a6a9:	e8 12 1c 00 00       	call   c000c2c0 <Device::getName()>
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	83 ec 08             	sub    esp,0x8
c000a6b4:	68 9f da 01 c0       	push   0xc001da9f
c000a6b9:	50                   	push   eax
c000a6ba:	e8 41 60 ff ff       	call   c0000700 <strcmp>
c000a6bf:	83 c4 10             	add    esp,0x10
c000a6c2:	85 c0                	test   eax,eax
c000a6c4:	0f 94 c0             	sete   al
c000a6c7:	84 c0                	test   al,al
c000a6c9:	0f 84 87 00 00 00    	je     c000a756 <VAS::VAS(bool)+0x27a>
c000a6cf:	fa                   	cli    
c000a6d0:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a6d5:	40                   	inc    eax
c000a6d6:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a6db:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a6e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6e6:	05 7c 09 00 00       	add    eax,0x97c
c000a6eb:	83 ec 0c             	sub    esp,0xc
c000a6ee:	50                   	push   eax
c000a6ef:	e8 66 d2 ff ff       	call   c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6f4:	83 c4 10             	add    esp,0x10
c000a6f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6fc:	89 c3                	mov    ebx,eax
c000a6fe:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000a703:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a709:	05 7c 09 00 00       	add    eax,0x97c
c000a70e:	83 ec 0c             	sub    esp,0xc
c000a711:	50                   	push   eax
c000a712:	e8 43 d2 ff ff       	call   c000795a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a717:	83 c4 10             	add    esp,0x10
c000a71a:	83 ec 08             	sub    esp,0x8
c000a71d:	50                   	push   eax
c000a71e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a722:	e8 83 f5 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a727:	83 c4 10             	add    esp,0x10
c000a72a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a72c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a731:	6a 11                	push   0x11
c000a733:	53                   	push   ebx
c000a734:	50                   	push   eax
c000a735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a739:	e8 f0 f8 ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a73e:	83 c4 10             	add    esp,0x10
c000a741:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a746:	48                   	dec    eax
c000a747:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a74c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a751:	85 c0                	test   eax,eax
c000a753:	75 01                	jne    c000a756 <VAS::VAS(bool)+0x27a>
c000a755:	fb                   	sti    
c000a756:	90                   	nop
c000a757:	83 c4 28             	add    esp,0x28
c000a75a:	5b                   	pop    ebx
c000a75b:	c3                   	ret    

c000a75c <VAS::evict(unsigned long)>:
c000a75c:	55                   	push   ebp
c000a75d:	57                   	push   edi
c000a75e:	56                   	push   esi
c000a75f:	53                   	push   ebx
c000a760:	83 ec 1c             	sub    esp,0x1c
c000a763:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a767:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a76b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a76f:	e8 66 f3 ff ff       	call   c0009ada <Virt::allocateSwapfilePage()>
c000a774:	8b 0d 8c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f78c
c000a77a:	89 c7                	mov    edi,eax
c000a77c:	85 c9                	test   ecx,ecx
c000a77e:	7e 3e                	jle    c000a7be <VAS::evict(unsigned long)+0x62>
c000a780:	89 ee                	mov    esi,ebp
c000a782:	31 db                	xor    ebx,ebx
c000a784:	83 ec 0c             	sub    esp,0xc
c000a787:	57                   	push   edi
c000a788:	e8 3b f3 ff ff       	call   c0009ac8 <Virt::swapIDToSector(unsigned long)>
c000a78d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a790:	01 d8                	add    eax,ebx
c000a792:	6a 01                	push   0x1
c000a794:	31 d2                	xor    edx,edx
c000a796:	43                   	inc    ebx
c000a797:	52                   	push   edx
c000a798:	81 c6 00 02 00 00    	add    esi,0x200
c000a79e:	50                   	push   eax
c000a79f:	0f be 05 98 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f798
c000a7a6:	8b 14 85 9c 2c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd364]
c000a7ad:	52                   	push   edx
c000a7ae:	e8 8d 2b 00 00       	call   c000d340 <LogicalDisk::write(unsigned long long, int, void*)>
c000a7b3:	83 c4 20             	add    esp,0x20
c000a7b6:	39 1d 8c f7 01 c0    	cmp    DWORD PTR ds:0xc001f78c,ebx
c000a7bc:	7f c6                	jg     c000a784 <VAS::evict(unsigned long)+0x28>
c000a7be:	83 ec 08             	sub    esp,0x8
c000a7c1:	c1 e7 0b             	shl    edi,0xb
c000a7c4:	55                   	push   ebp
c000a7c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7c9:	50                   	push   eax
c000a7ca:	e8 db f4 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a7cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7d1:	89 d1                	mov    ecx,edx
c000a7d3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7d9:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7df:	09 cf                	or     edi,ecx
c000a7e1:	89 38                	mov    DWORD PTR [eax],edi
c000a7e3:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7e6:	ff 05 28 09 02 c0    	inc    DWORD PTR ds:0xc0020928
c000a7ec:	e8 d7 d9 ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c000a7f1:	0f 20 d8             	mov    eax,cr3
c000a7f4:	0f 22 d8             	mov    cr3,eax
c000a7f7:	a1 24 09 02 c0       	mov    eax,ds:0xc0020924
c000a7fc:	c7 44 24 40 ad da 01 c0 	mov    DWORD PTR [esp+0x40],0xc001daad
c000a804:	8d 50 01             	lea    edx,[eax+0x1]
c000a807:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a80b:	89 15 24 09 02 c0    	mov    DWORD PTR ds:0xc0020924,edx
c000a811:	83 c4 2c             	add    esp,0x2c
c000a814:	5b                   	pop    ebx
c000a815:	5e                   	pop    esi
c000a816:	5f                   	pop    edi
c000a817:	5d                   	pop    ebp
c000a818:	e9 cf 03 00 00       	jmp    c000abec <Dbg::kprintf(char const*, ...)>
c000a81d:	90                   	nop

c000a81e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a81e:	55                   	push   ebp
c000a81f:	57                   	push   edi
c000a820:	56                   	push   esi
c000a821:	53                   	push   ebx
c000a822:	83 ec 14             	sub    esp,0x14
c000a825:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a829:	53                   	push   ebx
c000a82a:	68 be da 01 c0       	push   0xc001dabe
c000a82f:	e8 b8 03 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a834:	83 c4 10             	add    esp,0x10
c000a837:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a83d:	74 21                	je     c000a860 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a83f:	83 ec 08             	sub    esp,0x8
c000a842:	53                   	push   ebx
c000a843:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a847:	57                   	push   edi
c000a848:	e8 5d f4 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	89 c6                	mov    esi,eax
c000a852:	85 c0                	test   eax,eax
c000a854:	74 0a                	je     c000a860 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a856:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a858:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a85e:	74 0a                	je     c000a86a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a860:	31 c0                	xor    eax,eax
c000a862:	83 c4 0c             	add    esp,0xc
c000a865:	5b                   	pop    ebx
c000a866:	5e                   	pop    esi
c000a867:	5f                   	pop    edi
c000a868:	5d                   	pop    ebp
c000a869:	c3                   	ret    
c000a86a:	e8 bb d9 ff ff       	call   c000822a <Phys::allocatePage()>
c000a86f:	c1 ed 0b             	shr    ebp,0xb
c000a872:	8b 16                	mov    edx,DWORD PTR [esi]
c000a874:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a87a:	09 c2                	or     edx,eax
c000a87c:	81 ca 01 08 00 00    	or     edx,0x801
c000a882:	89 16                	mov    DWORD PTR [esi],edx
c000a884:	8b 35 8c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f78c
c000a88a:	85 f6                	test   esi,esi
c000a88c:	7e 3e                	jle    c000a8cc <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a88e:	89 df                	mov    edi,ebx
c000a890:	31 f6                	xor    esi,esi
c000a892:	83 ec 0c             	sub    esp,0xc
c000a895:	55                   	push   ebp
c000a896:	e8 2d f2 ff ff       	call   c0009ac8 <Virt::swapIDToSector(unsigned long)>
c000a89b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a89e:	01 f0                	add    eax,esi
c000a8a0:	6a 01                	push   0x1
c000a8a2:	31 d2                	xor    edx,edx
c000a8a4:	46                   	inc    esi
c000a8a5:	52                   	push   edx
c000a8a6:	81 c7 00 02 00 00    	add    edi,0x200
c000a8ac:	50                   	push   eax
c000a8ad:	0f be 05 98 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f798
c000a8b4:	8b 0c 85 9c 2c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd364]
c000a8bb:	51                   	push   ecx
c000a8bc:	e8 13 2a 00 00       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8c1:	83 c4 20             	add    esp,0x20
c000a8c4:	39 35 8c f7 01 c0    	cmp    DWORD PTR ds:0xc001f78c,esi
c000a8ca:	7f c6                	jg     c000a892 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8cc:	a1 28 09 02 c0       	mov    eax,ds:0xc0020928
c000a8d1:	48                   	dec    eax
c000a8d2:	52                   	push   edx
c000a8d3:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c000a8d8:	50                   	push   eax
c000a8d9:	53                   	push   ebx
c000a8da:	68 d1 da 01 c0       	push   0xc001dad1
c000a8df:	e8 08 03 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a8e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8e7:	e8 be f1 ff ff       	call   c0009aaa <Virt::freeSwapfilePage(unsigned long)>
c000a8ec:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000a8f1:	83 c4 10             	add    esp,0x10
c000a8f4:	48                   	dec    eax
c000a8f5:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000a8fa:	85 c0                	test   eax,eax
c000a8fc:	75 01                	jne    c000a8ff <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8fe:	fb                   	sti    
c000a8ff:	0f 20 d8             	mov    eax,cr3
c000a902:	0f 22 d8             	mov    cr3,eax
c000a905:	b0 01                	mov    al,0x1
c000a907:	e9 56 ff ff ff       	jmp    c000a862 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a90c <VAS::scanForEviction()>:
c000a90c:	57                   	push   edi
c000a90d:	31 ff                	xor    edi,edi
c000a90f:	56                   	push   esi
c000a910:	53                   	push   ebx
c000a911:	83 ec 10             	sub    esp,0x10
c000a914:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a918:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a91b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a921:	75 0e                	jne    c000a931 <VAS::scanForEviction()+0x25>
c000a923:	89 da                	mov    edx,ebx
c000a925:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a928:	c1 ea 16             	shr    edx,0x16
c000a92b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a92f:	74 4e                	je     c000a97f <VAS::scanForEviction()+0x73>
c000a931:	53                   	push   ebx
c000a932:	56                   	push   esi
c000a933:	e8 72 f3 ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c000a938:	5a                   	pop    edx
c000a939:	8b 10                	mov    edx,DWORD PTR [eax]
c000a93b:	59                   	pop    ecx
c000a93c:	89 d1                	mov    ecx,edx
c000a93e:	81 e1 01 08 00 00    	and    ecx,0x801
c000a944:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a94a:	74 3e                	je     c000a98a <VAS::scanForEviction()+0x7e>
c000a94c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a952:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a958:	76 2b                	jbe    c000a985 <VAS::scanForEviction()+0x79>
c000a95a:	47                   	inc    edi
c000a95b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a962:	83 ff 03             	cmp    edi,0x3
c000a965:	74 32                	je     c000a999 <VAS::scanForEviction()+0x8d>
c000a967:	31 db                	xor    ebx,ebx
c000a969:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a96f:	75 c0                	jne    c000a931 <VAS::scanForEviction()+0x25>
c000a971:	89 da                	mov    edx,ebx
c000a973:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a976:	c1 ea 16             	shr    edx,0x16
c000a979:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a97d:	75 b2                	jne    c000a931 <VAS::scanForEviction()+0x25>
c000a97f:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a985:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a988:	eb 91                	jmp    c000a91b <VAS::scanForEviction()+0xf>
c000a98a:	f6 c2 20             	test   dl,0x20
c000a98d:	74 13                	je     c000a9a2 <VAS::scanForEviction()+0x96>
c000a98f:	83 e2 df             	and    edx,0xffffffdf
c000a992:	89 10                	mov    DWORD PTR [eax],edx
c000a994:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a997:	eb b3                	jmp    c000a94c <VAS::scanForEviction()+0x40>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	31 c0                	xor    eax,eax
c000a99e:	5b                   	pop    ebx
c000a99f:	5e                   	pop    esi
c000a9a0:	5f                   	pop    edi
c000a9a1:	c3                   	ret    
c000a9a2:	83 ec 08             	sub    esp,0x8
c000a9a5:	89 d0                	mov    eax,edx
c000a9a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9b0:	53                   	push   ebx
c000a9b1:	68 e6 da 01 c0       	push   0xc001dae6
c000a9b6:	e8 31 02 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a9bb:	58                   	pop    eax
c000a9bc:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9bf:	5a                   	pop    edx
c000a9c0:	51                   	push   ecx
c000a9c1:	56                   	push   esi
c000a9c2:	e8 95 fd ff ff       	call   c000a75c <VAS::evict(unsigned long)>
c000a9c7:	5b                   	pop    ebx
c000a9c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9cb:	5f                   	pop    edi
c000a9cc:	50                   	push   eax
c000a9cd:	68 fa da 01 c0       	push   0xc001dafa
c000a9d2:	e8 15 02 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000a9d7:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e5:	83 c4 10             	add    esp,0x10
c000a9e8:	5b                   	pop    ebx
c000a9e9:	5e                   	pop    esi
c000a9ea:	5f                   	pop    edi
c000a9eb:	c3                   	ret    

c000a9ec <mapVASFirstTime>:
c000a9ec:	55                   	push   ebp
c000a9ed:	57                   	push   edi
c000a9ee:	56                   	push   esi
c000a9ef:	53                   	push   ebx
c000a9f0:	83 ec 0c             	sub    esp,0xc
c000a9f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9f8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9fb:	4a                   	dec    edx
c000a9fc:	0f 84 8c 00 00 00    	je     c000aa8e <mapVASFirstTime+0xa2>
c000aa02:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa05:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa08:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa0d:	c1 e5 15             	shl    ebp,0x15
c000aa10:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa15:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa1b:	29 eb                	sub    ebx,ebp
c000aa1d:	29 ef                	sub    edi,ebp
c000aa1f:	e8 06 d8 ff ff       	call   c000822a <Phys::allocatePage()>
c000aa24:	83 ec 0c             	sub    esp,0xc
c000aa27:	68 03 04 00 00       	push   0x403
c000aa2c:	6a 01                	push   0x1
c000aa2e:	53                   	push   ebx
c000aa2f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa35:	50                   	push   eax
c000aa36:	56                   	push   esi
c000aa37:	e8 ec f8 ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa3c:	83 c4 20             	add    esp,0x20
c000aa3f:	39 fb                	cmp    ebx,edi
c000aa41:	75 dc                	jne    c000aa1f <mapVASFirstTime+0x33>
c000aa43:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa48:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa4d:	29 eb                	sub    ebx,ebp
c000aa4f:	29 ef                	sub    edi,ebp
c000aa51:	e8 d4 d7 ff ff       	call   c000822a <Phys::allocatePage()>
c000aa56:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa5a:	19 d2                	sbb    edx,edx
c000aa5c:	83 ec 0c             	sub    esp,0xc
c000aa5f:	83 e2 04             	and    edx,0x4
c000aa62:	81 c2 03 04 00 00    	add    edx,0x403
c000aa68:	52                   	push   edx
c000aa69:	6a 01                	push   0x1
c000aa6b:	53                   	push   ebx
c000aa6c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa72:	50                   	push   eax
c000aa73:	56                   	push   esi
c000aa74:	e8 af f8 ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa79:	83 c4 20             	add    esp,0x20
c000aa7c:	39 df                	cmp    edi,ebx
c000aa7e:	75 d1                	jne    c000aa51 <mapVASFirstTime+0x65>
c000aa80:	0f 20 d8             	mov    eax,cr3
c000aa83:	0f 22 d8             	mov    cr3,eax
c000aa86:	83 c4 0c             	add    esp,0xc
c000aa89:	5b                   	pop    ebx
c000aa8a:	5e                   	pop    esi
c000aa8b:	5f                   	pop    edi
c000aa8c:	5d                   	pop    ebp
c000aa8d:	c3                   	ret    
c000aa8e:	83 ec 0c             	sub    esp,0xc
c000aa91:	68 0d db 01 c0       	push   0xc001db0d
c000aa96:	e8 51 01 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 c4 0c             	add    esp,0xc
c000aaa1:	5b                   	pop    ebx
c000aaa2:	5e                   	pop    esi
c000aaa3:	5f                   	pop    edi
c000aaa4:	5d                   	pop    ebp
c000aaa5:	c3                   	ret    

c000aaa6 <__cxa_atexit>:
c000aaa6:	31 c0                	xor    eax,eax
c000aaa8:	c3                   	ret    

c000aaa9 <__cxa_finalize>:
c000aaa9:	c3                   	ret    

c000aaaa <__stack_chk_fail>:
c000aaaa:	55                   	push   ebp
c000aaab:	89 e5                	mov    ebp,esp
c000aaad:	83 ec 10             	sub    esp,0x10
c000aab0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aab3:	68 26 db 01 c0       	push   0xc001db26
c000aab8:	e8 2f 01 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000aabd:	58                   	pop    eax
c000aabe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aac1:	5a                   	pop    edx
c000aac2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aac5:	68 26 db 01 c0       	push   0xc001db26
c000aaca:	e8 1d 01 00 00       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000aacf:	c7 04 24 2e db 01 c0 	mov    DWORD PTR [esp],0xc001db2e
c000aad6:	e8 60 5c 00 00       	call   c001073b <Krnl::panic(char const*)>
c000aadb:	83 c4 10             	add    esp,0x10
c000aade:	c9                   	leave  
c000aadf:	c3                   	ret    

c000aae0 <__cxa_pure_virtual>:
c000aae0:	83 ec 18             	sub    esp,0x18
c000aae3:	68 46 db 01 c0       	push   0xc001db46
c000aae8:	e8 4e 5c 00 00       	call   c001073b <Krnl::panic(char const*)>
c000aaed:	83 c4 1c             	add    esp,0x1c
c000aaf0:	c3                   	ret    

c000aaf1 <operator new[](unsigned long)>:
c000aaf1:	e9 67 d3 ff ff       	jmp    c0007e5d <malloc>

c000aaf6 <operator delete(void*, unsigned long)>:
c000aaf6:	e9 82 d3 ff ff       	jmp    c0007e7d <rfree>

c000aafb <operator delete[](void*)>:
c000aafb:	e9 7d d3 ff ff       	jmp    c0007e7d <rfree>

c000ab00 <operator delete[](void*, unsigned long)>:
c000ab00:	e9 78 d3 ff ff       	jmp    c0007e7d <rfree>

c000ab05 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab05:	55                   	push   ebp
c000ab06:	b9 04 00 00 00       	mov    ecx,0x4
c000ab0b:	57                   	push   edi
c000ab0c:	56                   	push   esi
c000ab0d:	be 5b d7 01 c0       	mov    esi,0xc001d75b
c000ab12:	53                   	push   ebx
c000ab13:	83 ec 20             	sub    esp,0x20
c000ab16:	a1 5a d7 01 c0       	mov    eax,ds:0xc001d75a
c000ab1b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab1f:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab23:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab27:	a1 67 d7 01 c0       	mov    eax,ds:0xc001d767
c000ab2c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab34:	fc                   	cld    
c000ab35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab37:	89 ee                	mov    esi,ebp
c000ab39:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab3d:	eb 02                	jmp    c000ab41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab3f:	89 c6                	mov    esi,eax
c000ab41:	31 d2                	xor    edx,edx
c000ab43:	41                   	inc    ecx
c000ab44:	89 f0                	mov    eax,esi
c000ab46:	f7 f3                	div    ebx
c000ab48:	39 de                	cmp    esi,ebx
c000ab4a:	73 f3                	jae    c000ab3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab4c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab4f:	eb 02                	jmp    c000ab53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab51:	89 c5                	mov    ebp,eax
c000ab53:	31 d2                	xor    edx,edx
c000ab55:	49                   	dec    ecx
c000ab56:	89 e8                	mov    eax,ebp
c000ab58:	f7 f3                	div    ebx
c000ab5a:	39 dd                	cmp    ebp,ebx
c000ab5c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab60:	88 11                	mov    BYTE PTR [ecx],dl
c000ab62:	73 ed                	jae    c000ab51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab68:	83 c4 20             	add    esp,0x20
c000ab6b:	5b                   	pop    ebx
c000ab6c:	5e                   	pop    esi
c000ab6d:	5f                   	pop    edi
c000ab6e:	5d                   	pop    ebp
c000ab6f:	c3                   	ret    

c000ab70 <Dbg::logc(char)>:
c000ab70:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab74:	f6 05 50 08 02 c0 10 	test   BYTE PTR ds:0xc0020850,0x10
c000ab7b:	75 12                	jne    c000ab8f <Dbg::logc(char)+0x1f>
c000ab7d:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab82:	ec                   	in     al,dx
c000ab83:	a8 20                	test   al,0x20
c000ab85:	74 fb                	je     c000ab82 <Dbg::logc(char)+0x12>
c000ab87:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab8c:	88 c8                	mov    al,cl
c000ab8e:	ee                   	out    dx,al
c000ab8f:	c3                   	ret    

c000ab90 <Dbg::logs(char*)>:
c000ab90:	53                   	push   ebx
c000ab91:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab95:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab98:	84 c0                	test   al,al
c000ab9a:	74 0f                	je     c000abab <Dbg::logs(char*)+0x1b>
c000ab9c:	50                   	push   eax
c000ab9d:	43                   	inc    ebx
c000ab9e:	e8 cd ff ff ff       	call   c000ab70 <Dbg::logc(char)>
c000aba3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aba6:	5a                   	pop    edx
c000aba7:	84 c0                	test   al,al
c000aba9:	75 f1                	jne    c000ab9c <Dbg::logs(char*)+0xc>
c000abab:	5b                   	pop    ebx
c000abac:	c3                   	ret    

c000abad <Dbg::logWriteInt(unsigned int)>:
c000abad:	83 ec 10             	sub    esp,0x10
c000abb0:	6a 0a                	push   0xa
c000abb2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abb6:	50                   	push   eax
c000abb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abbb:	50                   	push   eax
c000abbc:	e8 44 ff ff ff       	call   c000ab05 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abc1:	50                   	push   eax
c000abc2:	e8 c9 ff ff ff       	call   c000ab90 <Dbg::logs(char*)>
c000abc7:	83 c4 20             	add    esp,0x20
c000abca:	c3                   	ret    

c000abcb <Dbg::logWriteIntBase(unsigned int, int)>:
c000abcb:	83 ec 10             	sub    esp,0x10
c000abce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abd2:	50                   	push   eax
c000abd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abd7:	50                   	push   eax
c000abd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abdc:	52                   	push   edx
c000abdd:	e8 23 ff ff ff       	call   c000ab05 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abe2:	50                   	push   eax
c000abe3:	e8 a8 ff ff ff       	call   c000ab90 <Dbg::logs(char*)>
c000abe8:	83 c4 20             	add    esp,0x20
c000abeb:	c3                   	ret    

c000abec <Dbg::kprintf(char const*, ...)>:
c000abec:	55                   	push   ebp
c000abed:	57                   	push   edi
c000abee:	56                   	push   esi
c000abef:	53                   	push   ebx
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abf7:	f6 05 50 08 02 c0 10 	test   BYTE PTR ds:0xc0020850,0x10
c000abfe:	74 08                	je     c000ac08 <Dbg::kprintf(char const*, ...)+0x1c>
c000ac00:	83 c4 0c             	add    esp,0xc
c000ac03:	5b                   	pop    ebx
c000ac04:	5e                   	pop    esi
c000ac05:	5f                   	pop    edi
c000ac06:	5d                   	pop    ebp
c000ac07:	c3                   	ret    
c000ac08:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac0c:	31 ff                	xor    edi,edi
c000ac0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac12:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac15:	84 c0                	test   al,al
c000ac17:	74 e7                	je     c000ac00 <Dbg::kprintf(char const*, ...)+0x14>
c000ac19:	8d 77 01             	lea    esi,[edi+0x1]
c000ac1c:	3c 25                	cmp    al,0x25
c000ac1e:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac21:	75 47                	jne    c000ac6a <Dbg::kprintf(char const*, ...)+0x7e>
c000ac23:	83 c7 02             	add    edi,0x2
c000ac26:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac29:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac2c:	83 e8 25             	sub    eax,0x25
c000ac2f:	3c 53                	cmp    al,0x53
c000ac31:	0f 87 d2 00 00 00    	ja     c000ad09 <Dbg::kprintf(char const*, ...)+0x11d>
c000ac37:	25 ff 00 00 00       	and    eax,0xff
c000ac3c:	ff 24 85 5c db 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe24a4]
c000ac43:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac47:	89 c8                	mov    eax,ecx
c000ac49:	83 c1 04             	add    ecx,0x4
c000ac4c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac50:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac52:	55                   	push   ebp
c000ac53:	e8 55 ff ff ff       	call   c000abad <Dbg::logWriteInt(unsigned int)>
c000ac58:	58                   	pop    eax
c000ac59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac5c:	84 c0                	test   al,al
c000ac5e:	74 a0                	je     c000ac00 <Dbg::kprintf(char const*, ...)+0x14>
c000ac60:	8d 77 01             	lea    esi,[edi+0x1]
c000ac63:	3c 25                	cmp    al,0x25
c000ac65:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac68:	74 b9                	je     c000ac23 <Dbg::kprintf(char const*, ...)+0x37>
c000ac6a:	50                   	push   eax
c000ac6b:	89 f7                	mov    edi,esi
c000ac6d:	e8 fe fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ac72:	89 ee                	mov    esi,ebp
c000ac74:	58                   	pop    eax
c000ac75:	eb e2                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac7b:	89 c8                	mov    eax,ecx
c000ac7d:	83 c1 04             	add    ecx,0x4
c000ac80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac82:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac86:	50                   	push   eax
c000ac87:	e8 04 ff ff ff       	call   c000ab90 <Dbg::logs(char*)>
c000ac8c:	58                   	pop    eax
c000ac8d:	eb ca                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac8f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac93:	89 d0                	mov    eax,edx
c000ac95:	83 c2 04             	add    edx,0x4
c000ac98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac9e:	50                   	push   eax
c000ac9f:	e8 09 ff ff ff       	call   c000abad <Dbg::logWriteInt(unsigned int)>
c000aca4:	58                   	pop    eax
c000aca5:	eb b2                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000aca7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acab:	89 d0                	mov    eax,edx
c000acad:	83 c2 04             	add    edx,0x4
c000acb0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb7:	50                   	push   eax
c000acb8:	e8 b3 fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000acbd:	58                   	pop    eax
c000acbe:	eb 99                	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000acc0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc4:	89 c8                	mov    eax,ecx
c000acc6:	83 c1 04             	add    ecx,0x4
c000acc9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000accd:	6a 10                	push   0x10
c000accf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acd1:	51                   	push   ecx
c000acd2:	e8 f4 fe ff ff       	call   c000abcb <Dbg::logWriteIntBase(unsigned int, int)>
c000acd7:	5d                   	pop    ebp
c000acd8:	58                   	pop    eax
c000acd9:	e9 7b ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000acde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ace2:	89 d0                	mov    eax,edx
c000ace4:	83 c2 08             	add    edx,0x8
c000ace7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aceb:	6a 10                	push   0x10
c000aced:	8b 00                	mov    eax,DWORD PTR [eax]
c000acef:	50                   	push   eax
c000acf0:	e8 d6 fe ff ff       	call   c000abcb <Dbg::logWriteIntBase(unsigned int, int)>
c000acf5:	58                   	pop    eax
c000acf6:	5a                   	pop    edx
c000acf7:	e9 5d ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000acfc:	6a 25                	push   0x25
c000acfe:	e8 6d fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ad03:	5a                   	pop    edx
c000ad04:	e9 50 ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad09:	6a 25                	push   0x25
c000ad0b:	e8 60 fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ad10:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad14:	50                   	push   eax
c000ad15:	e8 56 fe ff ff       	call   c000ab70 <Dbg::logc(char)>
c000ad1a:	5a                   	pop    edx
c000ad1b:	59                   	pop    ecx
c000ad1c:	e9 38 ff ff ff       	jmp    c000ac59 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad21:	90                   	nop

c000ad22 <File::read(unsigned long long, void*, int*)>:
c000ad22:	53                   	push   ebx
c000ad23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad2b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad32:	3c 19                	cmp    al,0x19
c000ad34:	77 35                	ja     c000ad6b <File::read(unsigned long long, void*, int*)+0x49>
c000ad36:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000ad3d:	85 c0                	test   eax,eax
c000ad3f:	74 2a                	je     c000ad6b <File::read(unsigned long long, void*, int*)+0x49>
c000ad41:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad47:	85 c0                	test   eax,eax
c000ad49:	74 20                	je     c000ad6b <File::read(unsigned long long, void*, int*)+0x49>
c000ad4b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad4f:	74 21                	je     c000ad72 <File::read(unsigned long long, void*, int*)+0x50>
c000ad51:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad53:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad57:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad65:	5b                   	pop    ebx
c000ad66:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad69:	ff e0                	jmp    eax
c000ad6b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad70:	eb 05                	jmp    c000ad77 <File::read(unsigned long long, void*, int*)+0x55>
c000ad72:	b8 05 00 00 00       	mov    eax,0x5
c000ad77:	5b                   	pop    ebx
c000ad78:	c3                   	ret    
c000ad79:	90                   	nop

c000ad7a <File::write(unsigned long long, void*, int*)>:
c000ad7a:	53                   	push   ebx
c000ad7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad83:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad8a:	3c 19                	cmp    al,0x19
c000ad8c:	77 35                	ja     c000adc3 <File::write(unsigned long long, void*, int*)+0x49>
c000ad8e:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000ad95:	85 c0                	test   eax,eax
c000ad97:	74 2a                	je     c000adc3 <File::write(unsigned long long, void*, int*)+0x49>
c000ad99:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad9f:	85 c0                	test   eax,eax
c000ada1:	74 20                	je     c000adc3 <File::write(unsigned long long, void*, int*)+0x49>
c000ada3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ada7:	74 21                	je     c000adca <File::write(unsigned long long, void*, int*)+0x50>
c000ada9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adaf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adbd:	5b                   	pop    ebx
c000adbe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adc1:	ff e0                	jmp    eax
c000adc3:	b8 0b 00 00 00       	mov    eax,0xb
c000adc8:	eb 05                	jmp    c000adcf <File::write(unsigned long long, void*, int*)+0x55>
c000adca:	b8 05 00 00 00       	mov    eax,0x5
c000adcf:	5b                   	pop    ebx
c000add0:	c3                   	ret    
c000add1:	90                   	nop

c000add2 <Directory::read(unsigned long long, void*, int*)>:
c000add2:	53                   	push   ebx
c000add3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000add7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000addb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ade2:	3c 19                	cmp    al,0x19
c000ade4:	77 35                	ja     c000ae1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ade6:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000aded:	85 c0                	test   eax,eax
c000adef:	74 2a                	je     c000ae1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adf7:	85 c0                	test   eax,eax
c000adf9:	74 20                	je     c000ae1b <Directory::read(unsigned long long, void*, int*)+0x49>
c000adfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adff:	74 21                	je     c000ae22 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ae01:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae07:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae15:	5b                   	pop    ebx
c000ae16:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae19:	ff e0                	jmp    eax
c000ae1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae20:	eb 05                	jmp    c000ae27 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae22:	b8 05 00 00 00       	mov    eax,0x5
c000ae27:	5b                   	pop    ebx
c000ae28:	c3                   	ret    
c000ae29:	90                   	nop

c000ae2a <Directory::write(unsigned long long, void*, int*)>:
c000ae2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae35:	b8 0b 00 00 00       	mov    eax,0xb
c000ae3a:	80 fa 19             	cmp    dl,0x19
c000ae3d:	77 18                	ja     c000ae57 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae3f:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000ae46:	85 d2                	test   edx,edx
c000ae48:	74 0d                	je     c000ae57 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae4a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae51:	19 c0                	sbb    eax,eax
c000ae53:	83 e0 0a             	and    eax,0xa
c000ae56:	40                   	inc    eax
c000ae57:	c3                   	ret    

c000ae58 <File::isAtty()>:
c000ae58:	31 c0                	xor    eax,eax
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <Directory::isAtty()>:
c000ae5c:	31 c0                	xor    eax,eax
c000ae5e:	c3                   	ret    
c000ae5f:	90                   	nop

c000ae60 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae60:	b8 0a 00 00 00       	mov    eax,0xa
c000ae65:	c3                   	ret    

c000ae66 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae66:	b8 0a 00 00 00       	mov    eax,0xa
c000ae6b:	c3                   	ret    

c000ae6c <Filesystem::allocateSwapfile(char const*, int)>:
c000ae6c:	31 c0                	xor    eax,eax
c000ae6e:	31 d2                	xor    edx,edx
c000ae70:	c3                   	ret    
c000ae71:	90                   	nop

c000ae72 <File::~File()>:
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	ba 1c dd 01 c0       	mov    edx,0xc001dd1c
c000ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7e:	89 10                	mov    DWORD PTR [eax],edx
c000ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae84:	83 ec 0c             	sub    esp,0xc
c000ae87:	50                   	push   eax
c000ae88:	e8 ab e8 ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c000ae8d:	83 c4 10             	add    esp,0x10
c000ae90:	90                   	nop
c000ae91:	83 c4 0c             	add    esp,0xc
c000ae94:	c3                   	ret    
c000ae95:	90                   	nop

c000ae96 <File::~File()>:
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aea0:	e8 cd ff ff ff       	call   c000ae72 <File::~File()>
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	83 ec 08             	sub    esp,0x8
c000aeab:	68 14 01 00 00       	push   0x114
c000aeb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb4:	e8 3d fc ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000aeb9:	83 c4 10             	add    esp,0x10
c000aebc:	83 c4 0c             	add    esp,0xc
c000aebf:	c3                   	ret    

c000aec0 <Directory::~Directory()>:
c000aec0:	83 ec 0c             	sub    esp,0xc
c000aec3:	ba 38 dd 01 c0       	mov    edx,0xc001dd38
c000aec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecc:	89 10                	mov    DWORD PTR [eax],edx
c000aece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed2:	83 ec 0c             	sub    esp,0xc
c000aed5:	50                   	push   eax
c000aed6:	e8 5d e8 ff ff       	call   c0009738 <UnixFile::~UnixFile()>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	90                   	nop
c000aedf:	83 c4 0c             	add    esp,0xc
c000aee2:	c3                   	ret    
c000aee3:	90                   	nop

c000aee4 <Directory::~Directory()>:
c000aee4:	83 ec 0c             	sub    esp,0xc
c000aee7:	83 ec 0c             	sub    esp,0xc
c000aeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeee:	e8 cd ff ff ff       	call   c000aec0 <Directory::~Directory()>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	83 ec 08             	sub    esp,0x8
c000aef9:	68 14 01 00 00       	push   0x114
c000aefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af02:	e8 ef fb ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000af07:	83 c4 10             	add    esp,0x10
c000af0a:	83 c4 0c             	add    esp,0xc
c000af0d:	c3                   	ret    

c000af0e <Filesystem::Filesystem()>:
c000af0e:	ba b4 dc 01 c0       	mov    edx,0xc001dcb4
c000af13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af17:	89 10                	mov    DWORD PTR [eax],edx
c000af19:	8b 15 34 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020934
c000af1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2a:	a3 34 09 02 c0       	mov    ds:0xc0020934,eax
c000af2f:	90                   	nop
c000af30:	c3                   	ret    
c000af31:	90                   	nop

c000af32 <Filesystem::~Filesystem()>:
c000af32:	ba b4 dc 01 c0       	mov    edx,0xc001dcb4
c000af37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3b:	89 10                	mov    DWORD PTR [eax],edx
c000af3d:	90                   	nop
c000af3e:	c3                   	ret    
c000af3f:	90                   	nop

c000af40 <Filesystem::~Filesystem()>:
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af47:	e8 e6 ff ff ff       	call   c000af32 <Filesystem::~Filesystem()>
c000af4c:	83 c4 04             	add    esp,0x4
c000af4f:	83 ec 08             	sub    esp,0x8
c000af52:	6a 08                	push   0x8
c000af54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af58:	e8 99 fb ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000af5d:	83 c4 10             	add    esp,0x10
c000af60:	83 c4 0c             	add    esp,0xc
c000af63:	c3                   	ret    

c000af64 <Fs::getcwd(Process*, char*, int)>:
c000af64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af68:	31 c0                	xor    eax,eax
c000af6a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af6d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af71:	7d 15                	jge    c000af88 <Fs::getcwd(Process*, char*, int)+0x24>
c000af73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af77:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af7e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af81:	84 c9                	test   cl,cl
c000af83:	74 06                	je     c000af8b <Fs::getcwd(Process*, char*, int)+0x27>
c000af85:	40                   	inc    eax
c000af86:	eb e2                	jmp    c000af6a <Fs::getcwd(Process*, char*, int)+0x6>
c000af88:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af8b:	31 c0                	xor    eax,eax
c000af8d:	c3                   	ret    

c000af8e <Fs::initVFS()>:
c000af8e:	83 ec 18             	sub    esp,0x18
c000af91:	6a 08                	push   0x8
c000af93:	e8 c5 ce ff ff       	call   c0007e5d <malloc>
c000af98:	89 04 24             	mov    DWORD PTR [esp],eax
c000af9b:	e8 a4 c2 00 00       	call   c0017244 <FAT::FAT()>
c000afa0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afa7:	e8 b1 ce ff ff       	call   c0007e5d <malloc>
c000afac:	89 04 24             	mov    DWORD PTR [esp],eax
c000afaf:	e8 fc cd 00 00       	call   c0017db0 <ISO9660::ISO9660()>
c000afb4:	83 c4 1c             	add    esp,0x1c
c000afb7:	c3                   	ret    

c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afb8:	55                   	push   ebp
c000afb9:	57                   	push   edi
c000afba:	56                   	push   esi
c000afbb:	53                   	push   ebx
c000afbc:	81 ec 10 04 00 00    	sub    esp,0x410
c000afc2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afc9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afd0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afd7:	68 00 04 00 00       	push   0x400
c000afdc:	6a 00                	push   0x0
c000afde:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afe2:	56                   	push   esi
c000afe3:	e8 08 55 ff ff       	call   c00004f0 <memset>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afef:	75 0b                	jne    c000affc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aff1:	50                   	push   eax
c000aff2:	50                   	push   eax
c000aff3:	57                   	push   edi
c000aff4:	56                   	push   esi
c000aff5:	e8 26 56 ff ff       	call   c0000620 <strcpy>
c000affa:	eb 41                	jmp    c000b03d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000affc:	8a 07                	mov    al,BYTE PTR [edi]
c000affe:	3c 5c                	cmp    al,0x5c
c000b000:	74 04                	je     c000b006 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000b002:	3c 2f                	cmp    al,0x2f
c000b004:	75 18                	jne    c000b01e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b006:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b009:	3c 60                	cmp    al,0x60
c000b00b:	7e 03                	jle    c000b010 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b00d:	83 e8 20             	sub    eax,0x20
c000b010:	88 04 24             	mov    BYTE PTR [esp],al
c000b013:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b01a:	50                   	push   eax
c000b01b:	50                   	push   eax
c000b01c:	eb 18                	jmp    c000b036 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b01e:	50                   	push   eax
c000b01f:	50                   	push   eax
c000b020:	55                   	push   ebp
c000b021:	56                   	push   esi
c000b022:	e8 f9 55 ff ff       	call   c0000620 <strcpy>
c000b027:	5a                   	pop    edx
c000b028:	59                   	pop    ecx
c000b029:	68 5f e9 01 c0       	push   0xc001e95f
c000b02e:	56                   	push   esi
c000b02f:	e8 ac 57 ff ff       	call   c00007e0 <strcat>
c000b034:	5d                   	pop    ebp
c000b035:	58                   	pop    eax
c000b036:	57                   	push   edi
c000b037:	56                   	push   esi
c000b038:	e8 a3 57 ff ff       	call   c00007e0 <strcat>
c000b03d:	83 c4 10             	add    esp,0x10
c000b040:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b043:	3c 60                	cmp    al,0x60
c000b045:	7e 03                	jle    c000b04a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b047:	83 e8 20             	sub    eax,0x20
c000b04a:	88 04 24             	mov    BYTE PTR [esp],al
c000b04d:	88 03                	mov    BYTE PTR [ebx],al
c000b04f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b056:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b05c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b060:	bf 03 00 00 00       	mov    edi,0x3
c000b065:	b8 03 00 00 00       	mov    eax,0x3
c000b06a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b06d:	84 d2                	test   dl,dl
c000b06f:	0f 84 91 00 00 00    	je     c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b075:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b078:	80 fa 5c             	cmp    dl,0x5c
c000b07b:	74 05                	je     c000b082 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b07d:	80 fa 2f             	cmp    dl,0x2f
c000b080:	75 12                	jne    c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b082:	89 c5                	mov    ebp,eax
c000b084:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b089:	74 09                	je     c000b094 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b08b:	40                   	inc    eax
c000b08c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b090:	89 cf                	mov    edi,ecx
c000b092:	eb d6                	jmp    c000b06a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b094:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b099:	75 5b                	jne    c000b0f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b09b:	80 fa 2e             	cmp    dl,0x2e
c000b09e:	75 56                	jne    c000b0f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b0a0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0a4:	74 19                	je     c000b0bf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0a6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0ab:	74 53                	je     c000b100 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0ad:	89 f9                	mov    ecx,edi
c000b0af:	41                   	inc    ecx
c000b0b0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0b3:	80 fa 2f             	cmp    dl,0x2f
c000b0b6:	74 f7                	je     c000b0af <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b8:	80 fa 5c             	cmp    dl,0x5c
c000b0bb:	74 f2                	je     c000b0af <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0bd:	eb d1                	jmp    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0c4:	74 3a                	je     c000b100 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0c6:	83 f8 03             	cmp    eax,0x3
c000b0c9:	74 c5                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0cb:	41                   	inc    ecx
c000b0cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0cf:	80 fa 2f             	cmp    dl,0x2f
c000b0d2:	74 f7                	je     c000b0cb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d4:	80 fa 5c             	cmp    dl,0x5c
c000b0d7:	74 f2                	je     c000b0cb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d9:	48                   	dec    eax
c000b0da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0de:	75 06                	jne    c000b0e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e4:	eb f3                	jmp    c000b0d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0e6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0ea:	74 07                	je     c000b0f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0f0:	48                   	dec    eax
c000b0f1:	eb f3                	jmp    c000b0e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0f3:	40                   	inc    eax
c000b0f4:	eb 9a                	jmp    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f6:	80 fa 2f             	cmp    dl,0x2f
c000b0f9:	74 95                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fb:	80 fa 5c             	cmp    dl,0x5c
c000b0fe:	74 90                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b100:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b103:	40                   	inc    eax
c000b104:	eb 8a                	jmp    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b106:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	53                   	push   ebx
c000b10e:	e8 4d 54 ff ff       	call   c0000560 <strlen>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b11b:	75 26                	jne    c000b143 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b11d:	83 ec 0c             	sub    esp,0xc
c000b120:	53                   	push   ebx
c000b121:	e8 3a 54 ff ff       	call   c0000560 <strlen>
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b12e:	74 26                	je     c000b156 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	53                   	push   ebx
c000b134:	e8 27 54 ff ff       	call   c0000560 <strlen>
c000b139:	83 c4 10             	add    esp,0x10
c000b13c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b141:	eb c7                	jmp    c000b10a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	53                   	push   ebx
c000b147:	e8 14 54 ff ff       	call   c0000560 <strlen>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b154:	74 c7                	je     c000b11d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b156:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b15c:	5b                   	pop    ebx
c000b15d:	5e                   	pop    esi
c000b15e:	5f                   	pop    edi
c000b15f:	5d                   	pop    ebp
c000b160:	c3                   	ret    
c000b161:	90                   	nop

c000b162 <File::File(char const*, Process*)>:
c000b162:	83 ec 0c             	sub    esp,0xc
c000b165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b169:	83 ec 08             	sub    esp,0x8
c000b16c:	6a 00                	push   0x0
c000b16e:	50                   	push   eax
c000b16f:	e8 e2 e3 ff ff       	call   c0009556 <UnixFile::UnixFile(int)>
c000b174:	83 c4 10             	add    esp,0x10
c000b177:	ba 1c dd 01 c0       	mov    edx,0xc001dd1c
c000b17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b180:	89 10                	mov    DWORD PTR [eax],edx
c000b182:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b186:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b190:	83 c0 0d             	add    eax,0xd
c000b193:	83 ec 04             	sub    esp,0x4
c000b196:	52                   	push   edx
c000b197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b19b:	50                   	push   eax
c000b19c:	e8 17 fe ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1ab:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1bc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1ca:	25 ff 00 00 00       	and    eax,0xff
c000b1cf:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b1d6:	85 c0                	test   eax,eax
c000b1d8:	74 42                	je     c000b21c <File::File(char const*, Process*)+0xba>
c000b1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1de:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e4:	25 ff 00 00 00       	and    eax,0xff
c000b1e9:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b1f0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f6:	85 c0                	test   eax,eax
c000b1f8:	75 22                	jne    c000b21c <File::File(char const*, Process*)+0xba>
c000b1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b204:	25 ff 00 00 00       	and    eax,0xff
c000b209:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b210:	83 ec 0c             	sub    esp,0xc
c000b213:	50                   	push   eax
c000b214:	e8 f9 1f 00 00       	call   c000d212 <LogicalDisk::mount()>
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	90                   	nop
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	c3                   	ret    
c000b221:	90                   	nop

c000b222 <File::open(FileOpenMode)>:
c000b222:	53                   	push   ebx
c000b223:	b8 0b 00 00 00       	mov    eax,0xb
c000b228:	83 ec 08             	sub    esp,0x8
c000b22b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b22f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b236:	80 fa 19             	cmp    dl,0x19
c000b239:	77 40                	ja     c000b27b <File::open(FileOpenMode)+0x59>
c000b23b:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b242:	85 d2                	test   edx,edx
c000b244:	74 35                	je     c000b27b <File::open(FileOpenMode)+0x59>
c000b246:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b24c:	85 d2                	test   edx,edx
c000b24e:	74 2b                	je     c000b27b <File::open(FileOpenMode)+0x59>
c000b250:	b8 06 00 00 00       	mov    eax,0x6
c000b255:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b259:	75 20                	jne    c000b27b <File::open(FileOpenMode)+0x59>
c000b25b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b25d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b267:	51                   	push   ecx
c000b268:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b26b:	51                   	push   ecx
c000b26c:	52                   	push   edx
c000b26d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	85 c0                	test   eax,eax
c000b275:	75 04                	jne    c000b27b <File::open(FileOpenMode)+0x59>
c000b277:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b27b:	83 c4 08             	add    esp,0x8
c000b27e:	5b                   	pop    ebx
c000b27f:	c3                   	ret    

c000b280 <File::close()>:
c000b280:	53                   	push   ebx
c000b281:	b8 0b 00 00 00       	mov    eax,0xb
c000b286:	83 ec 08             	sub    esp,0x8
c000b289:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b28d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b294:	80 fa 19             	cmp    dl,0x19
c000b297:	77 41                	ja     c000b2da <File::close()+0x5a>
c000b299:	8b 1c 95 a0 2d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd260]
c000b2a0:	85 db                	test   ebx,ebx
c000b2a2:	74 36                	je     c000b2da <File::close()+0x5a>
c000b2a4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2ab:	74 2d                	je     c000b2da <File::close()+0x5a>
c000b2ad:	b8 05 00 00 00       	mov    eax,0x5
c000b2b2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2b6:	74 22                	je     c000b2da <File::close()+0x5a>
c000b2b8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2bc:	8b 04 95 a0 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd260]
c000b2c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2c9:	53                   	push   ebx
c000b2ca:	53                   	push   ebx
c000b2cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2cd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2d3:	50                   	push   eax
c000b2d4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	83 c4 08             	add    esp,0x8
c000b2dd:	5b                   	pop    ebx
c000b2de:	c3                   	ret    
c000b2df:	90                   	nop

c000b2e0 <File::seek(unsigned long long)>:
c000b2e0:	56                   	push   esi
c000b2e1:	53                   	push   ebx
c000b2e2:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e7:	51                   	push   ecx
c000b2e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2f0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2fb:	80 fa 19             	cmp    dl,0x19
c000b2fe:	77 31                	ja     c000b331 <File::seek(unsigned long long)+0x51>
c000b300:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b307:	85 d2                	test   edx,edx
c000b309:	74 26                	je     c000b331 <File::seek(unsigned long long)+0x51>
c000b30b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b311:	85 d2                	test   edx,edx
c000b313:	74 1c                	je     c000b331 <File::seek(unsigned long long)+0x51>
c000b315:	b8 05 00 00 00       	mov    eax,0x5
c000b31a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b31e:	74 11                	je     c000b331 <File::seek(unsigned long long)+0x51>
c000b320:	8b 02                	mov    eax,DWORD PTR [edx]
c000b322:	53                   	push   ebx
c000b323:	51                   	push   ecx
c000b324:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b32a:	52                   	push   edx
c000b32b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b32e:	83 c4 10             	add    esp,0x10
c000b331:	5a                   	pop    edx
c000b332:	5b                   	pop    ebx
c000b333:	5e                   	pop    esi
c000b334:	c3                   	ret    
c000b335:	90                   	nop

c000b336 <File::tell(unsigned long long*)>:
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	b8 0b 00 00 00       	mov    eax,0xb
c000b33e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b342:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b349:	80 fa 19             	cmp    dl,0x19
c000b34c:	77 34                	ja     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b34e:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b355:	85 d2                	test   edx,edx
c000b357:	74 29                	je     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b359:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b35f:	85 d2                	test   edx,edx
c000b361:	74 1f                	je     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b363:	b8 05 00 00 00       	mov    eax,0x5
c000b368:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b36c:	74 14                	je     c000b382 <File::tell(unsigned long long*)+0x4c>
c000b36e:	50                   	push   eax
c000b36f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b375:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b37b:	52                   	push   edx
c000b37c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b37f:	83 c4 10             	add    esp,0x10
c000b382:	83 c4 0c             	add    esp,0xc
c000b385:	c3                   	ret    

c000b386 <File::rewind()>:
c000b386:	83 ec 10             	sub    esp,0x10
c000b389:	6a 00                	push   0x0
c000b38b:	6a 00                	push   0x0
c000b38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b391:	e8 4a ff ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c000b396:	83 c4 1c             	add    esp,0x1c
c000b399:	c3                   	ret    

c000b39a <File::unlink()>:
c000b39a:	83 ec 0c             	sub    esp,0xc
c000b39d:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3ad:	80 f9 19             	cmp    cl,0x19
c000b3b0:	77 2f                	ja     c000b3e1 <File::unlink()+0x47>
c000b3b2:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b3b9:	85 c9                	test   ecx,ecx
c000b3bb:	74 24                	je     c000b3e1 <File::unlink()+0x47>
c000b3bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3c3:	85 c9                	test   ecx,ecx
c000b3c5:	74 1a                	je     c000b3e1 <File::unlink()+0x47>
c000b3c7:	b8 06 00 00 00       	mov    eax,0x6
c000b3cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d0:	75 0f                	jne    c000b3e1 <File::unlink()+0x47>
c000b3d2:	83 c2 0d             	add    edx,0xd
c000b3d5:	50                   	push   eax
c000b3d6:	50                   	push   eax
c000b3d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3d9:	52                   	push   edx
c000b3da:	51                   	push   ecx
c000b3db:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	83 c4 0c             	add    esp,0xc
c000b3e4:	c3                   	ret    
c000b3e5:	90                   	nop

c000b3e6 <File::rename(char const*)>:
c000b3e6:	83 ec 0c             	sub    esp,0xc
c000b3e9:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3f9:	80 f9 19             	cmp    cl,0x19
c000b3fc:	77 32                	ja     c000b430 <File::rename(char const*)+0x4a>
c000b3fe:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b405:	85 c9                	test   ecx,ecx
c000b407:	74 27                	je     c000b430 <File::rename(char const*)+0x4a>
c000b409:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b40f:	85 c9                	test   ecx,ecx
c000b411:	74 1d                	je     c000b430 <File::rename(char const*)+0x4a>
c000b413:	b8 06 00 00 00       	mov    eax,0x6
c000b418:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b41c:	75 12                	jne    c000b430 <File::rename(char const*)+0x4a>
c000b41e:	83 c2 0d             	add    edx,0xd
c000b421:	50                   	push   eax
c000b422:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b428:	52                   	push   edx
c000b429:	51                   	push   ecx
c000b42a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	83 c4 0c             	add    esp,0xc
c000b433:	c3                   	ret    

c000b434 <File::chfatattr(unsigned char, unsigned char)>:
c000b434:	57                   	push   edi
c000b435:	b8 0b 00 00 00       	mov    eax,0xb
c000b43a:	56                   	push   esi
c000b43b:	53                   	push   ebx
c000b43c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b440:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b444:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b44b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b44f:	80 f9 19             	cmp    cl,0x19
c000b452:	77 37                	ja     c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b454:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b45b:	85 c9                	test   ecx,ecx
c000b45d:	74 2c                	je     c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b45f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b465:	85 c9                	test   ecx,ecx
c000b467:	74 22                	je     c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b469:	b8 06 00 00 00       	mov    eax,0x6
c000b46e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b472:	75 17                	jne    c000b48b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b474:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b476:	89 f0                	mov    eax,esi
c000b478:	83 c2 0d             	add    edx,0xd
c000b47b:	0f b6 f0             	movzx  esi,al
c000b47e:	0f b6 db             	movzx  ebx,bl
c000b481:	56                   	push   esi
c000b482:	53                   	push   ebx
c000b483:	52                   	push   edx
c000b484:	51                   	push   ecx
c000b485:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	5b                   	pop    ebx
c000b48c:	5e                   	pop    esi
c000b48d:	5f                   	pop    edi
c000b48e:	c3                   	ret    
c000b48f:	90                   	nop

c000b490 <File::exists()>:
c000b490:	83 ec 0c             	sub    esp,0xc
c000b493:	31 c0                	xor    eax,eax
c000b495:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b499:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4a0:	80 f9 19             	cmp    cl,0x19
c000b4a3:	77 24                	ja     c000b4c9 <File::exists()+0x39>
c000b4a5:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b4ac:	85 c9                	test   ecx,ecx
c000b4ae:	74 19                	je     c000b4c9 <File::exists()+0x39>
c000b4b0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4b6:	85 c9                	test   ecx,ecx
c000b4b8:	74 0f                	je     c000b4c9 <File::exists()+0x39>
c000b4ba:	83 c2 0d             	add    edx,0xd
c000b4bd:	50                   	push   eax
c000b4be:	50                   	push   eax
c000b4bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4c1:	52                   	push   edx
c000b4c2:	51                   	push   ecx
c000b4c3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	83 c4 0c             	add    esp,0xc
c000b4cc:	c3                   	ret    
c000b4cd:	90                   	nop

c000b4ce <File::stat(unsigned long long*, bool*)>:
c000b4ce:	56                   	push   esi
c000b4cf:	53                   	push   ebx
c000b4d0:	50                   	push   eax
c000b4d1:	b8 0b 00 00 00       	mov    eax,0xb
c000b4d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4e9:	80 f9 19             	cmp    cl,0x19
c000b4ec:	77 3d                	ja     c000b52b <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ee:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b4f5:	85 c9                	test   ecx,ecx
c000b4f7:	74 32                	je     c000b52b <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4ff:	85 c9                	test   ecx,ecx
c000b501:	74 28                	je     c000b52b <File::stat(unsigned long long*, bool*)+0x5d>
c000b503:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b505:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b509:	74 13                	je     c000b51e <File::stat(unsigned long long*, bool*)+0x50>
c000b50b:	83 ec 04             	sub    esp,0x4
c000b50e:	56                   	push   esi
c000b50f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b515:	51                   	push   ecx
c000b516:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b519:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b51c:	eb 0a                	jmp    c000b528 <File::stat(unsigned long long*, bool*)+0x5a>
c000b51e:	53                   	push   ebx
c000b51f:	83 c2 0d             	add    edx,0xd
c000b522:	56                   	push   esi
c000b523:	52                   	push   edx
c000b524:	51                   	push   ecx
c000b525:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	5a                   	pop    edx
c000b52c:	5b                   	pop    ebx
c000b52d:	5e                   	pop    esi
c000b52e:	c3                   	ret    

c000b52f <Fs::setcwd(Process*, char*)>:
c000b52f:	55                   	push   ebp
c000b530:	57                   	push   edi
c000b531:	56                   	push   esi
c000b532:	53                   	push   ebx
c000b533:	81 ec 20 02 00 00    	sub    esp,0x220
c000b539:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b540:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b546:	57                   	push   edi
c000b547:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b54e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b552:	56                   	push   esi
c000b553:	e8 60 fa ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b558:	89 34 24             	mov    DWORD PTR [esp],esi
c000b55b:	e8 00 50 ff ff       	call   c0000560 <strlen>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	83 f8 02             	cmp    eax,0x2
c000b566:	77 15                	ja     c000b57d <Fs::setcwd(Process*, char*)+0x4e>
c000b568:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b56d:	83 eb 41             	sub    ebx,0x41
c000b570:	8b 04 9d a0 2d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd260]
c000b577:	85 c0                	test   eax,eax
c000b579:	75 1c                	jne    c000b597 <Fs::setcwd(Process*, char*)+0x68>
c000b57b:	eb 2f                	jmp    c000b5ac <Fs::setcwd(Process*, char*)+0x7d>
c000b57d:	83 ec 0c             	sub    esp,0xc
c000b580:	56                   	push   esi
c000b581:	e8 da 4f ff ff       	call   c0000560 <strlen>
c000b586:	83 c4 10             	add    esp,0x10
c000b589:	83 f8 03             	cmp    eax,0x3
c000b58c:	75 57                	jne    c000b5e5 <Fs::setcwd(Process*, char*)+0xb6>
c000b58e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b593:	75 50                	jne    c000b5e5 <Fs::setcwd(Process*, char*)+0xb6>
c000b595:	eb d1                	jmp    c000b568 <Fs::setcwd(Process*, char*)+0x39>
c000b597:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b59e:	75 0c                	jne    c000b5ac <Fs::setcwd(Process*, char*)+0x7d>
c000b5a0:	83 ec 0c             	sub    esp,0xc
c000b5a3:	50                   	push   eax
c000b5a4:	e8 69 1c 00 00       	call   c000d212 <LogicalDisk::mount()>
c000b5a9:	83 c4 10             	add    esp,0x10
c000b5ac:	b8 03 00 00 00       	mov    eax,0x3
c000b5b1:	83 fb 19             	cmp    ebx,0x19
c000b5b4:	0f 87 c6 00 00 00    	ja     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b5ba:	8b 14 9d a0 2d 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd260]
c000b5c1:	b8 05 00 00 00       	mov    eax,0x5
c000b5c6:	85 d2                	test   edx,edx
c000b5c8:	0f 84 b2 00 00 00    	je     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b5ce:	b8 06 00 00 00       	mov    eax,0x6
c000b5d3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5da:	0f 85 92 00 00 00    	jne    c000b672 <Fs::setcwd(Process*, char*)+0x143>
c000b5e0:	e9 9b 00 00 00       	jmp    c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b5e5:	83 ec 0c             	sub    esp,0xc
c000b5e8:	68 14 01 00 00       	push   0x114
c000b5ed:	e8 6b c8 ff ff       	call   c0007e5d <malloc>
c000b5f2:	83 c4 0c             	add    esp,0xc
c000b5f5:	89 c3                	mov    ebx,eax
c000b5f7:	55                   	push   ebp
c000b5f8:	56                   	push   esi
c000b5f9:	50                   	push   eax
c000b5fa:	e8 63 fb ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000b5ff:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b604:	83 c4 0c             	add    esp,0xc
c000b607:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b60b:	50                   	push   eax
c000b60c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b610:	50                   	push   eax
c000b611:	53                   	push   ebx
c000b612:	e8 b7 fe ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	83 f8 02             	cmp    eax,0x2
c000b61d:	74 04                	je     c000b623 <Fs::setcwd(Process*, char*)+0xf4>
c000b61f:	85 c0                	test   eax,eax
c000b621:	74 1c                	je     c000b63f <Fs::setcwd(Process*, char*)+0x110>
c000b623:	b8 01 00 00 00       	mov    eax,0x1
c000b628:	85 db                	test   ebx,ebx
c000b62a:	74 54                	je     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b631:	53                   	push   ebx
c000b632:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	b8 01 00 00 00       	mov    eax,0x1
c000b63d:	eb 41                	jmp    c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b63f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b644:	75 1c                	jne    c000b662 <Fs::setcwd(Process*, char*)+0x133>
c000b646:	b8 02 00 00 00       	mov    eax,0x2
c000b64b:	85 db                	test   ebx,ebx
c000b64d:	74 31                	je     c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b64f:	83 ec 0c             	sub    esp,0xc
c000b652:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b654:	53                   	push   ebx
c000b655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	b8 02 00 00 00       	mov    eax,0x2
c000b660:	eb 1e                	jmp    c000b680 <Fs::setcwd(Process*, char*)+0x151>
c000b662:	85 db                	test   ebx,ebx
c000b664:	74 0c                	je     c000b672 <Fs::setcwd(Process*, char*)+0x143>
c000b666:	83 ec 0c             	sub    esp,0xc
c000b669:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b66b:	53                   	push   ebx
c000b66c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b66f:	83 c4 10             	add    esp,0x10
c000b672:	50                   	push   eax
c000b673:	50                   	push   eax
c000b674:	56                   	push   esi
c000b675:	57                   	push   edi
c000b676:	e8 a5 4f ff ff       	call   c0000620 <strcpy>
c000b67b:	83 c4 10             	add    esp,0x10
c000b67e:	31 c0                	xor    eax,eax
c000b680:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b686:	5b                   	pop    ebx
c000b687:	5e                   	pop    esi
c000b688:	5f                   	pop    edi
c000b689:	5d                   	pop    ebp
c000b68a:	c3                   	ret    
c000b68b:	90                   	nop

c000b68c <Directory::Directory(char const*, Process*)>:
c000b68c:	83 ec 0c             	sub    esp,0xc
c000b68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b693:	83 ec 08             	sub    esp,0x8
c000b696:	6a 00                	push   0x0
c000b698:	50                   	push   eax
c000b699:	e8 b8 de ff ff       	call   c0009556 <UnixFile::UnixFile(int)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	ba 38 dd 01 c0       	mov    edx,0xc001dd38
c000b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6aa:	89 10                	mov    DWORD PTR [eax],edx
c000b6ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ba:	83 c0 0d             	add    eax,0xd
c000b6bd:	83 ec 04             	sub    esp,0x4
c000b6c0:	52                   	push   edx
c000b6c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c5:	50                   	push   eax
c000b6c6:	e8 ed f8 ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6cb:	83 c4 10             	add    esp,0x10
c000b6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6d5:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ee:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6f4:	25 ff 00 00 00       	and    eax,0xff
c000b6f9:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b700:	85 c0                	test   eax,eax
c000b702:	74 42                	je     c000b746 <Directory::Directory(char const*, Process*)+0xba>
c000b704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b708:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b70e:	25 ff 00 00 00       	and    eax,0xff
c000b713:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b71a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b720:	85 c0                	test   eax,eax
c000b722:	75 22                	jne    c000b746 <Directory::Directory(char const*, Process*)+0xba>
c000b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b728:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b72e:	25 ff 00 00 00       	and    eax,0xff
c000b733:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	50                   	push   eax
c000b73e:	e8 cf 1a 00 00       	call   c000d212 <LogicalDisk::mount()>
c000b743:	83 c4 10             	add    esp,0x10
c000b746:	90                   	nop
c000b747:	83 c4 0c             	add    esp,0xc
c000b74a:	c3                   	ret    
c000b74b:	90                   	nop

c000b74c <Directory::open()>:
c000b74c:	53                   	push   ebx
c000b74d:	b8 0b 00 00 00       	mov    eax,0xb
c000b752:	83 ec 08             	sub    esp,0x8
c000b755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b759:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b760:	80 fa 19             	cmp    dl,0x19
c000b763:	77 3d                	ja     c000b7a2 <Directory::open()+0x56>
c000b765:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b76c:	85 d2                	test   edx,edx
c000b76e:	74 32                	je     c000b7a2 <Directory::open()+0x56>
c000b770:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b776:	85 d2                	test   edx,edx
c000b778:	74 28                	je     c000b7a2 <Directory::open()+0x56>
c000b77a:	b8 06 00 00 00       	mov    eax,0x6
c000b77f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b783:	75 1d                	jne    c000b7a2 <Directory::open()+0x56>
c000b785:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b78b:	50                   	push   eax
c000b78c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b78e:	51                   	push   ecx
c000b78f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b792:	51                   	push   ecx
c000b793:	52                   	push   edx
c000b794:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	85 c0                	test   eax,eax
c000b79c:	75 04                	jne    c000b7a2 <Directory::open()+0x56>
c000b79e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7a2:	83 c4 08             	add    esp,0x8
c000b7a5:	5b                   	pop    ebx
c000b7a6:	c3                   	ret    
c000b7a7:	90                   	nop

c000b7a8 <Directory::close()>:
c000b7a8:	53                   	push   ebx
c000b7a9:	b8 0b 00 00 00       	mov    eax,0xb
c000b7ae:	83 ec 08             	sub    esp,0x8
c000b7b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7b5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7bc:	80 fa 19             	cmp    dl,0x19
c000b7bf:	77 41                	ja     c000b802 <Directory::close()+0x5a>
c000b7c1:	8b 1c 95 a0 2d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd260]
c000b7c8:	85 db                	test   ebx,ebx
c000b7ca:	74 36                	je     c000b802 <Directory::close()+0x5a>
c000b7cc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7d3:	74 2d                	je     c000b802 <Directory::close()+0x5a>
c000b7d5:	b8 05 00 00 00       	mov    eax,0x5
c000b7da:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7de:	74 22                	je     c000b802 <Directory::close()+0x5a>
c000b7e0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7e4:	8b 04 95 a0 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd260]
c000b7eb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7f1:	53                   	push   ebx
c000b7f2:	53                   	push   ebx
c000b7f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7fb:	50                   	push   eax
c000b7fc:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7ff:	83 c4 10             	add    esp,0x10
c000b802:	83 c4 08             	add    esp,0x8
c000b805:	5b                   	pop    ebx
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <Directory::unlink()>:
c000b808:	83 ec 0c             	sub    esp,0xc
c000b80b:	b8 0b 00 00 00       	mov    eax,0xb
c000b810:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b814:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b81b:	80 f9 19             	cmp    cl,0x19
c000b81e:	77 2f                	ja     c000b84f <Directory::unlink()+0x47>
c000b820:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b827:	85 c9                	test   ecx,ecx
c000b829:	74 24                	je     c000b84f <Directory::unlink()+0x47>
c000b82b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b831:	85 c9                	test   ecx,ecx
c000b833:	74 1a                	je     c000b84f <Directory::unlink()+0x47>
c000b835:	b8 06 00 00 00       	mov    eax,0x6
c000b83a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83e:	75 0f                	jne    c000b84f <Directory::unlink()+0x47>
c000b840:	83 c2 0d             	add    edx,0xd
c000b843:	50                   	push   eax
c000b844:	50                   	push   eax
c000b845:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b847:	52                   	push   edx
c000b848:	51                   	push   ecx
c000b849:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	83 c4 0c             	add    esp,0xc
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <Directory::rename(char const*)>:
c000b854:	83 ec 0c             	sub    esp,0xc
c000b857:	b8 0b 00 00 00       	mov    eax,0xb
c000b85c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b860:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b867:	80 f9 19             	cmp    cl,0x19
c000b86a:	77 32                	ja     c000b89e <Directory::rename(char const*)+0x4a>
c000b86c:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b873:	85 c9                	test   ecx,ecx
c000b875:	74 27                	je     c000b89e <Directory::rename(char const*)+0x4a>
c000b877:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b87d:	85 c9                	test   ecx,ecx
c000b87f:	74 1d                	je     c000b89e <Directory::rename(char const*)+0x4a>
c000b881:	b8 06 00 00 00       	mov    eax,0x6
c000b886:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b88a:	75 12                	jne    c000b89e <Directory::rename(char const*)+0x4a>
c000b88c:	83 c2 0d             	add    edx,0xd
c000b88f:	50                   	push   eax
c000b890:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b892:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b896:	52                   	push   edx
c000b897:	51                   	push   ecx
c000b898:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b89b:	83 c4 10             	add    esp,0x10
c000b89e:	83 c4 0c             	add    esp,0xc
c000b8a1:	c3                   	ret    

c000b8a2 <Directory::exists()>:
c000b8a2:	83 ec 0c             	sub    esp,0xc
c000b8a5:	31 c0                	xor    eax,eax
c000b8a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8ab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8b2:	80 f9 19             	cmp    cl,0x19
c000b8b5:	77 24                	ja     c000b8db <Directory::exists()+0x39>
c000b8b7:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b8be:	85 c9                	test   ecx,ecx
c000b8c0:	74 19                	je     c000b8db <Directory::exists()+0x39>
c000b8c2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8c8:	85 c9                	test   ecx,ecx
c000b8ca:	74 0f                	je     c000b8db <Directory::exists()+0x39>
c000b8cc:	83 c2 0d             	add    edx,0xd
c000b8cf:	50                   	push   eax
c000b8d0:	50                   	push   eax
c000b8d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8d3:	52                   	push   edx
c000b8d4:	51                   	push   ecx
c000b8d5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8d8:	83 c4 10             	add    esp,0x10
c000b8db:	83 c4 0c             	add    esp,0xc
c000b8de:	c3                   	ret    
c000b8df:	90                   	nop

c000b8e0 <Directory::read(dirent*)>:
c000b8e0:	83 ec 1c             	sub    esp,0x1c
c000b8e3:	b8 0b 00 00 00       	mov    eax,0xb
c000b8e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8ec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8f3:	80 fa 19             	cmp    dl,0x19
c000b8f6:	77 30                	ja     c000b928 <Directory::read(dirent*)+0x48>
c000b8f8:	8b 14 95 a0 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd260]
c000b8ff:	85 d2                	test   edx,edx
c000b901:	74 25                	je     c000b928 <Directory::read(dirent*)+0x48>
c000b903:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b90a:	74 1c                	je     c000b928 <Directory::read(dirent*)+0x48>
c000b90c:	83 ec 0c             	sub    esp,0xc
c000b90f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b911:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b915:	52                   	push   edx
c000b916:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b91a:	6a 00                	push   0x0
c000b91c:	68 10 01 00 00       	push   0x110
c000b921:	51                   	push   ecx
c000b922:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b925:	83 c4 20             	add    esp,0x20
c000b928:	83 c4 1c             	add    esp,0x1c
c000b92b:	c3                   	ret    

c000b92c <Directory::create()>:
c000b92c:	83 ec 0c             	sub    esp,0xc
c000b92f:	b8 0b 00 00 00       	mov    eax,0xb
c000b934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b938:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b93f:	80 f9 19             	cmp    cl,0x19
c000b942:	77 2f                	ja     c000b973 <Directory::create()+0x47>
c000b944:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c000b94b:	85 c9                	test   ecx,ecx
c000b94d:	74 24                	je     c000b973 <Directory::create()+0x47>
c000b94f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b955:	85 c9                	test   ecx,ecx
c000b957:	74 1a                	je     c000b973 <Directory::create()+0x47>
c000b959:	b8 06 00 00 00       	mov    eax,0x6
c000b95e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b962:	75 0f                	jne    c000b973 <Directory::create()+0x47>
c000b964:	83 c2 0d             	add    edx,0xd
c000b967:	50                   	push   eax
c000b968:	50                   	push   eax
c000b969:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b96b:	52                   	push   edx
c000b96c:	51                   	push   ecx
c000b96d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b970:	83 c4 10             	add    esp,0x10
c000b973:	83 c4 0c             	add    esp,0xc
c000b976:	c3                   	ret    
c000b977:	90                   	nop

c000b978 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b978:	b8 0a 00 00 00       	mov    eax,0xa
c000b97d:	c3                   	ret    
c000b97e:	66 90                	xchg   ax,ax

c000b980 <Bus::Bus(char const*)>:
c000b980:	83 ec 0c             	sub    esp,0xc
c000b983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b987:	83 ec 08             	sub    esp,0x8
c000b98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b98e:	50                   	push   eax
c000b98f:	e8 30 08 00 00       	call   c000c1c4 <Device::Device(char const*)>
c000b994:	83 c4 10             	add    esp,0x10
c000b997:	ba 54 dd 01 c0       	mov    edx,0xc001dd54
c000b99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a0:	89 10                	mov    DWORD PTR [eax],edx
c000b9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9b0:	90                   	nop
c000b9b1:	83 c4 0c             	add    esp,0xc
c000b9b4:	c3                   	ret    
c000b9b5:	90                   	nop
c000b9b6:	66 90                	xchg   ax,ax

c000b9b8 <Bus::~Bus()>:
c000b9b8:	83 ec 0c             	sub    esp,0xc
c000b9bb:	ba 54 dd 01 c0       	mov    edx,0xc001dd54
c000b9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c4:	89 10                	mov    DWORD PTR [eax],edx
c000b9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ca:	83 ec 0c             	sub    esp,0xc
c000b9cd:	50                   	push   eax
c000b9ce:	e8 5b 05 00 00       	call   c000bf2e <Device::~Device()>
c000b9d3:	83 c4 10             	add    esp,0x10
c000b9d6:	90                   	nop
c000b9d7:	83 c4 0c             	add    esp,0xc
c000b9da:	c3                   	ret    
c000b9db:	90                   	nop

c000b9dc <Bus::~Bus()>:
c000b9dc:	83 ec 0c             	sub    esp,0xc
c000b9df:	83 ec 0c             	sub    esp,0xc
c000b9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e6:	e8 cd ff ff ff       	call   c000b9b8 <Bus::~Bus()>
c000b9eb:	83 c4 10             	add    esp,0x10
c000b9ee:	83 ec 08             	sub    esp,0x8
c000b9f1:	68 58 01 00 00       	push   0x158
c000b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fa:	e8 f7 f0 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	83 c4 0c             	add    esp,0xc
c000ba05:	c3                   	ret    

c000ba06 <beepThread(void*)>:
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000ba0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba12:	48                   	dec    eax
c000ba13:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000ba18:	75 01                	jne    c000ba1b <beepThread(void*)+0x15>
c000ba1a:	fb                   	sti    
c000ba1b:	83 ec 0c             	sub    esp,0xc
c000ba1e:	6b c2 0a             	imul   eax,edx,0xa
c000ba21:	50                   	push   eax
c000ba22:	e8 69 83 00 00       	call   c0013d90 <milliTenthSleep(unsigned int)>
c000ba27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba2e:	e8 a5 9f 00 00       	call   c00159d8 <HalMakeBeep(int)>
c000ba33:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba3b:	83 c4 1c             	add    esp,0x1c
c000ba3e:	e9 49 82 00 00       	jmp    c0013c8c <blockTask(TaskState)>

c000ba43 <Krnl::beep(int, int, bool)>:
c000ba43:	56                   	push   esi
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba54:	e8 7f 9f 00 00       	call   c00159d8 <HalMakeBeep(int)>
c000ba59:	83 c4 10             	add    esp,0x10
c000ba5c:	89 f0                	mov    eax,esi
c000ba5e:	84 c0                	test   al,al
c000ba60:	74 1e                	je     c000ba80 <Krnl::beep(int, int, bool)+0x3d>
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	6b db 0a             	imul   ebx,ebx,0xa
c000ba68:	53                   	push   ebx
c000ba69:	e8 22 83 00 00       	call   c0013d90 <milliTenthSleep(unsigned int)>
c000ba6e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba76:	83 c4 14             	add    esp,0x14
c000ba79:	5b                   	pop    ebx
c000ba7a:	5e                   	pop    esi
c000ba7b:	e9 58 9f 00 00       	jmp    c00159d8 <HalMakeBeep(int)>
c000ba80:	68 e6 00 00 00       	push   0xe6
c000ba85:	53                   	push   ebx
c000ba86:	68 06 ba 00 c0       	push   0xc000ba06
c000ba8b:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c000ba91:	e8 da 7d 00 00       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c000ba96:	83 c4 14             	add    esp,0x14
c000ba99:	5b                   	pop    ebx
c000ba9a:	5e                   	pop    esi
c000ba9b:	c3                   	ret    

c000ba9c <User::loadClockSettings(int)>:
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 14             	sub    esp,0x14
c000baa0:	68 14 01 00 00       	push   0x114
c000baa5:	e8 b3 c3 ff ff       	call   c0007e5d <malloc>
c000baaa:	83 c4 0c             	add    esp,0xc
c000baad:	89 c3                	mov    ebx,eax
c000baaf:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c000bab5:	68 78 dd 01 c0       	push   0xc001dd78
c000baba:	50                   	push   eax
c000babb:	e8 a2 f6 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000bac0:	58                   	pop    eax
c000bac1:	5a                   	pop    edx
c000bac2:	6a 01                	push   0x1
c000bac4:	53                   	push   ebx
c000bac5:	e8 58 f7 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c000baca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bacd:	e8 ae f7 ff ff       	call   c000b280 <File::close()>
c000bad2:	83 c4 10             	add    esp,0x10
c000bad5:	85 db                	test   ebx,ebx
c000bad7:	74 0f                	je     c000bae8 <User::loadClockSettings(int)+0x4c>
c000bad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000badb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000badf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bae2:	83 c4 08             	add    esp,0x8
c000bae5:	5b                   	pop    ebx
c000bae6:	ff e0                	jmp    eax
c000bae8:	83 c4 08             	add    esp,0x8
c000baeb:	5b                   	pop    ebx
c000baec:	c3                   	ret    
c000baed:	90                   	nop

c000baee <Clock::Clock(char const*)>:
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf5:	83 ec 08             	sub    esp,0x8
c000baf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafc:	50                   	push   eax
c000bafd:	e8 c2 06 00 00       	call   c000c1c4 <Device::Device(char const*)>
c000bb02:	83 c4 10             	add    esp,0x10
c000bb05:	ba a0 dd 01 c0       	mov    edx,0xc001dda0
c000bb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb0e:	89 10                	mov    DWORD PTR [eax],edx
c000bb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb14:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb1e:	90                   	nop
c000bb1f:	83 c4 0c             	add    esp,0xc
c000bb22:	c3                   	ret    
c000bb23:	90                   	nop

c000bb24 <Clock::~Clock()>:
c000bb24:	83 ec 0c             	sub    esp,0xc
c000bb27:	ba a0 dd 01 c0       	mov    edx,0xc001dda0
c000bb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb30:	89 10                	mov    DWORD PTR [eax],edx
c000bb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb36:	83 ec 0c             	sub    esp,0xc
c000bb39:	50                   	push   eax
c000bb3a:	e8 ef 03 00 00       	call   c000bf2e <Device::~Device()>
c000bb3f:	83 c4 10             	add    esp,0x10
c000bb42:	90                   	nop
c000bb43:	83 c4 0c             	add    esp,0xc
c000bb46:	c3                   	ret    
c000bb47:	90                   	nop

c000bb48 <Clock::~Clock()>:
c000bb48:	83 ec 0c             	sub    esp,0xc
c000bb4b:	83 ec 0c             	sub    esp,0xc
c000bb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb52:	e8 cd ff ff ff       	call   c000bb24 <Clock::~Clock()>
c000bb57:	83 c4 10             	add    esp,0x10
c000bb5a:	83 ec 08             	sub    esp,0x8
c000bb5d:	68 58 01 00 00       	push   0x158
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 8b ef ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	83 c4 0c             	add    esp,0xc
c000bb71:	c3                   	ret    

c000bb72 <Clock::timeInSecondsLocal()>:
c000bb72:	53                   	push   ebx
c000bb73:	83 ec 14             	sub    esp,0x14
c000bb76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb7c:	50                   	push   eax
c000bb7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb80:	0f b6 0d 38 09 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020938
c000bb87:	03 0d 3c 09 02 c0    	add    ecx,DWORD PTR ds:0xc002093c
c000bb8d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb93:	89 cb                	mov    ebx,ecx
c000bb95:	c1 fb 1f             	sar    ebx,0x1f
c000bb98:	01 c8                	add    eax,ecx
c000bb9a:	11 da                	adc    edx,ebx
c000bb9c:	83 c4 10             	add    esp,0x10
c000bb9f:	31 c9                	xor    ecx,ecx
c000bba1:	80 3d 39 09 02 c0 00 	cmp    BYTE PTR ds:0xc0020939,0x0
c000bba8:	74 05                	je     c000bbaf <Clock::timeInSecondsLocal()+0x3d>
c000bbaa:	b9 08 07 00 00       	mov    ecx,0x708
c000bbaf:	31 db                	xor    ebx,ebx
c000bbb1:	01 c8                	add    eax,ecx
c000bbb3:	11 da                	adc    edx,ebx
c000bbb5:	83 c4 08             	add    esp,0x8
c000bbb8:	5b                   	pop    ebx
c000bbb9:	c3                   	ret    

c000bbba <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbba:	57                   	push   edi
c000bbbb:	56                   	push   esi
c000bbbc:	53                   	push   ebx
c000bbbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbcb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbce:	0f b6 05 38 09 02 c0 	movzx  eax,BYTE PTR ds:0xc0020938
c000bbd5:	03 05 3c 09 02 c0    	add    eax,DWORD PTR ds:0xc002093c
c000bbdb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbe1:	99                   	cdq    
c000bbe2:	29 c6                	sub    esi,eax
c000bbe4:	19 d7                	sbb    edi,edx
c000bbe6:	89 f0                	mov    eax,esi
c000bbe8:	89 fa                	mov    edx,edi
c000bbea:	31 f6                	xor    esi,esi
c000bbec:	80 3d 39 09 02 c0 00 	cmp    BYTE PTR ds:0xc0020939,0x0
c000bbf3:	74 05                	je     c000bbfa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbf5:	be 08 07 00 00       	mov    esi,0x708
c000bbfa:	31 ff                	xor    edi,edi
c000bbfc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc00:	29 f0                	sub    eax,esi
c000bc02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc06:	19 fa                	sbb    edx,edi
c000bc08:	89 d8                	mov    eax,ebx
c000bc0a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc0e:	5b                   	pop    ebx
c000bc0f:	5e                   	pop    esi
c000bc10:	5f                   	pop    edi
c000bc11:	ff e0                	jmp    eax

c000bc13 <datetimeToSeconds(datetime_t)>:
c000bc13:	55                   	push   ebp
c000bc14:	57                   	push   edi
c000bc15:	56                   	push   esi
c000bc16:	53                   	push   ebx
c000bc17:	83 ec 14             	sub    esp,0x14
c000bc1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc1e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc22:	89 d3                	mov    ebx,edx
c000bc24:	0f b6 c6             	movzx  eax,dh
c000bc27:	c1 eb 10             	shr    ebx,0x10
c000bc2a:	48                   	dec    eax
c000bc2b:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc30:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc34:	0f b6 f5             	movzx  esi,ch
c000bc37:	89 cf                	mov    edi,ecx
c000bc39:	6b f6 3c             	imul   esi,esi,0x3c
c000bc3c:	c1 ef 10             	shr    edi,0x10
c000bc3f:	0f b6 c9             	movzx  ecx,cl
c000bc42:	89 f8                	mov    eax,edi
c000bc44:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc4a:	0f b6 f8             	movzx  edi,al
c000bc4d:	0f b6 d2             	movzx  edx,dl
c000bc50:	01 fe                	add    esi,edi
c000bc52:	01 f1                	add    ecx,esi
c000bc54:	0f b7 f3             	movzx  esi,bx
c000bc57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc5b:	c1 f9 1f             	sar    ecx,0x1f
c000bc5e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc67:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc6c:	8b 0c 8d e0 dd 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2220]
c000bc73:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc77:	76 29                	jbe    c000bca2 <datetimeToSeconds(datetime_t)+0x8f>
c000bc79:	f6 c3 03             	test   bl,0x3
c000bc7c:	75 24                	jne    c000bca2 <datetimeToSeconds(datetime_t)+0x8f>
c000bc7e:	31 d2                	xor    edx,edx
c000bc80:	bf 64 00 00 00       	mov    edi,0x64
c000bc85:	89 d8                	mov    eax,ebx
c000bc87:	66 f7 f7             	div    di
c000bc8a:	66 85 d2             	test   dx,dx
c000bc8d:	75 12                	jne    c000bca1 <datetimeToSeconds(datetime_t)+0x8e>
c000bc8f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc95:	bf 90 01 00 00       	mov    edi,0x190
c000bc9a:	99                   	cdq    
c000bc9b:	f7 ff                	idiv   edi
c000bc9d:	85 d2                	test   edx,edx
c000bc9f:	75 01                	jne    c000bca2 <datetimeToSeconds(datetime_t)+0x8f>
c000bca1:	41                   	inc    ecx
c000bca2:	66 83 fb 46          	cmp    bx,0x46
c000bca6:	76 45                	jbe    c000bced <datetimeToSeconds(datetime_t)+0xda>
c000bca8:	bb 46 00 00 00       	mov    ebx,0x46
c000bcad:	bf 64 00 00 00       	mov    edi,0x64
c000bcb2:	bd 90 01 00 00       	mov    ebp,0x190
c000bcb7:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcbc:	f6 c3 03             	test   bl,0x3
c000bcbf:	75 23                	jne    c000bce4 <datetimeToSeconds(datetime_t)+0xd1>
c000bcc1:	89 d8                	mov    eax,ebx
c000bcc3:	99                   	cdq    
c000bcc4:	f7 ff                	idiv   edi
c000bcc6:	b8 6e 01 00 00       	mov    eax,0x16e
c000bccb:	85 d2                	test   edx,edx
c000bccd:	75 15                	jne    c000bce4 <datetimeToSeconds(datetime_t)+0xd1>
c000bccf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcd5:	99                   	cdq    
c000bcd6:	f7 fd                	idiv   ebp
c000bcd8:	31 c0                	xor    eax,eax
c000bcda:	85 d2                	test   edx,edx
c000bcdc:	0f 94 c0             	sete   al
c000bcdf:	05 6d 01 00 00       	add    eax,0x16d
c000bce4:	01 c1                	add    ecx,eax
c000bce6:	43                   	inc    ebx
c000bce7:	39 f3                	cmp    ebx,esi
c000bce9:	7c cc                	jl     c000bcb7 <datetimeToSeconds(datetime_t)+0xa4>
c000bceb:	eb 3b                	jmp    c000bd28 <datetimeToSeconds(datetime_t)+0x115>
c000bced:	74 39                	je     c000bd28 <datetimeToSeconds(datetime_t)+0x115>
c000bcef:	b8 45 00 00 00       	mov    eax,0x45
c000bcf4:	89 c2                	mov    edx,eax
c000bcf6:	83 e2 03             	and    edx,0x3
c000bcf9:	39 f0                	cmp    eax,esi
c000bcfb:	7e 13                	jle    c000bd10 <datetimeToSeconds(datetime_t)+0xfd>
c000bcfd:	85 d2                	test   edx,edx
c000bcff:	0f 94 c2             	sete   dl
c000bd02:	48                   	dec    eax
c000bd03:	0f b6 d2             	movzx  edx,dl
c000bd06:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd0c:	29 d1                	sub    ecx,edx
c000bd0e:	eb e4                	jmp    c000bcf4 <datetimeToSeconds(datetime_t)+0xe1>
c000bd10:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd15:	85 d2                	test   edx,edx
c000bd17:	75 0d                	jne    c000bd26 <datetimeToSeconds(datetime_t)+0x113>
c000bd19:	31 c0                	xor    eax,eax
c000bd1b:	66 85 db             	test   bx,bx
c000bd1e:	0f 95 c0             	setne  al
c000bd21:	05 6d 01 00 00       	add    eax,0x16d
c000bd26:	29 c1                	sub    ecx,eax
c000bd28:	b8 80 51 01 00       	mov    eax,0x15180
c000bd2d:	f7 e9                	imul   ecx
c000bd2f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd33:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd37:	83 c4 14             	add    esp,0x14
c000bd3a:	5b                   	pop    ebx
c000bd3b:	5e                   	pop    esi
c000bd3c:	5f                   	pop    edi
c000bd3d:	5d                   	pop    ebp
c000bd3e:	c3                   	ret    
c000bd3f:	90                   	nop

c000bd40 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd40:	57                   	push   edi
c000bd41:	56                   	push   esi
c000bd42:	53                   	push   ebx
c000bd43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd47:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd49:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd54:	e8 ba fe ff ff       	call   c000bc13 <datetimeToSeconds(datetime_t)>
c000bd59:	59                   	pop    ecx
c000bd5a:	0f b6 0d 38 09 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020938
c000bd61:	5b                   	pop    ebx
c000bd62:	03 0d 3c 09 02 c0    	add    ecx,DWORD PTR ds:0xc002093c
c000bd68:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd6e:	89 cb                	mov    ebx,ecx
c000bd70:	c1 fb 1f             	sar    ebx,0x1f
c000bd73:	29 c8                	sub    eax,ecx
c000bd75:	19 da                	sbb    edx,ebx
c000bd77:	31 c9                	xor    ecx,ecx
c000bd79:	80 3d 39 09 02 c0 00 	cmp    BYTE PTR ds:0xc0020939,0x0
c000bd80:	74 05                	je     c000bd87 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd82:	b9 08 07 00 00       	mov    ecx,0x708
c000bd87:	31 db                	xor    ebx,ebx
c000bd89:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd8d:	29 c8                	sub    eax,ecx
c000bd8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd93:	19 da                	sbb    edx,ebx
c000bd95:	89 f8                	mov    eax,edi
c000bd97:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd9b:	5b                   	pop    ebx
c000bd9c:	5e                   	pop    esi
c000bd9d:	5f                   	pop    edi
c000bd9e:	ff e0                	jmp    eax

c000bda0 <secondsToDatetime(unsigned long long)>:
c000bda0:	55                   	push   ebp
c000bda1:	57                   	push   edi
c000bda2:	56                   	push   esi
c000bda3:	53                   	push   ebx
c000bda4:	83 ec 1c             	sub    esp,0x1c
c000bda7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdaf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdb3:	6a 00                	push   0x0
c000bdb5:	68 80 51 01 00       	push   0x15180
c000bdba:	55                   	push   ebp
c000bdbb:	57                   	push   edi
c000bdbc:	e8 7f 02 01 00       	call   c001c040 <__udivdi3>
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdce:	6a 00                	push   0x0
c000bdd0:	68 80 51 01 00       	push   0x15180
c000bdd5:	55                   	push   ebp
c000bdd6:	57                   	push   edi
c000bdd7:	bf 10 0e 00 00       	mov    edi,0xe10
c000bddc:	e8 5f 03 01 00       	call   c001c140 <__umoddi3>
c000bde1:	83 c4 10             	add    esp,0x10
c000bde4:	99                   	cdq    
c000bde5:	f7 ff                	idiv   edi
c000bde7:	bf 3c 00 00 00       	mov    edi,0x3c
c000bdec:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdef:	89 d0                	mov    eax,edx
c000bdf1:	99                   	cdq    
c000bdf2:	f7 ff                	idiv   edi
c000bdf4:	85 db                	test   ebx,ebx
c000bdf6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdf9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdfc:	79 11                	jns    c000be0f <secondsToDatetime(unsigned long long)+0x6f>
c000bdfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be02:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be08:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be0d:	eb 07                	jmp    c000be16 <secondsToDatetime(unsigned long long)+0x76>
c000be0f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be14:	89 d8                	mov    eax,ebx
c000be16:	bf b4 05 00 00       	mov    edi,0x5b4
c000be1b:	99                   	cdq    
c000be1c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be21:	f7 f9                	idiv   ecx
c000be23:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be2c:	31 d2                	xor    edx,edx
c000be2e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be36:	01 c3                	add    ebx,eax
c000be38:	89 d8                	mov    eax,ebx
c000be3a:	f7 f1                	div    ecx
c000be3c:	31 d2                	xor    edx,edx
c000be3e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be41:	89 d8                	mov    eax,ebx
c000be43:	f7 f7                	div    edi
c000be45:	31 d2                	xor    edx,edx
c000be47:	29 c1                	sub    ecx,eax
c000be49:	89 d8                	mov    eax,ebx
c000be4b:	f7 f5                	div    ebp
c000be4d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be52:	29 c1                	sub    ecx,eax
c000be54:	31 d2                	xor    edx,edx
c000be56:	89 c8                	mov    eax,ecx
c000be58:	f7 f5                	div    ebp
c000be5a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be63:	31 d2                	xor    edx,edx
c000be65:	89 c8                	mov    eax,ecx
c000be67:	f7 f5                	div    ebp
c000be69:	31 d2                	xor    edx,edx
c000be6b:	01 c3                	add    ebx,eax
c000be6d:	89 c8                	mov    eax,ecx
c000be6f:	f7 f7                	div    edi
c000be71:	bf 99 00 00 00       	mov    edi,0x99
c000be76:	29 c3                	sub    ebx,eax
c000be78:	31 d2                	xor    edx,edx
c000be7a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be82:	29 c3                	sub    ebx,eax
c000be84:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be87:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be8a:	bb 05 00 00 00       	mov    ebx,0x5
c000be8f:	83 c1 02             	add    ecx,0x2
c000be92:	89 c8                	mov    eax,ecx
c000be94:	f7 f7                	div    edi
c000be96:	31 d2                	xor    edx,edx
c000be98:	89 c7                	mov    edi,eax
c000be9a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bea0:	83 c0 02             	add    eax,0x2
c000bea3:	f7 f3                	div    ebx
c000bea5:	89 eb                	mov    ebx,ebp
c000bea7:	29 c3                	sub    ebx,eax
c000bea9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beaf:	88 1e                	mov    BYTE PTR [esi],bl
c000beb1:	19 c0                	sbb    eax,eax
c000beb3:	31 d2                	xor    edx,edx
c000beb5:	83 e0 0c             	and    eax,0xc
c000beb8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bebc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bec4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bec8:	83 f9 01             	cmp    ecx,0x1
c000becb:	0f 96 c2             	setbe  dl
c000bece:	41                   	inc    ecx
c000becf:	01 d0                	add    eax,edx
c000bed1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bed4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bed8:	83 c4 1c             	add    esp,0x1c
c000bedb:	89 f0                	mov    eax,esi
c000bedd:	5b                   	pop    ebx
c000bede:	5e                   	pop    esi
c000bedf:	5f                   	pop    edi
c000bee0:	5d                   	pop    ebp
c000bee1:	c2 04 00             	ret    0x4

c000bee4 <Clock::timeInDatetimeLocal()>:
c000bee4:	53                   	push   ebx
c000bee5:	83 ec 14             	sub    esp,0x14
c000bee8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bef0:	e8 7d fc ff ff       	call   c000bb72 <Clock::timeInSecondsLocal()>
c000bef5:	83 c4 0c             	add    esp,0xc
c000bef8:	52                   	push   edx
c000bef9:	50                   	push   eax
c000befa:	53                   	push   ebx
c000befb:	e8 a0 fe ff ff       	call   c000bda0 <secondsToDatetime(unsigned long long)>
c000bf00:	89 d8                	mov    eax,ebx
c000bf02:	83 c4 14             	add    esp,0x14
c000bf05:	5b                   	pop    ebx
c000bf06:	c2 04 00             	ret    0x4
c000bf09:	90                   	nop

c000bf0a <Device::hibernate()>:
c000bf0a:	c3                   	ret    
c000bf0b:	90                   	nop

c000bf0c <Device::wake()>:
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <Device::detect()>:
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <Device::disableLegacy()>:
c000bf10:	c3                   	ret    
c000bf11:	90                   	nop

c000bf12 <Device::powerSaving(PowerSavingLevel)>:
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <DriverlessDevice::close(int, int, void*)>:
c000bf14:	31 c0                	xor    eax,eax
c000bf16:	c3                   	ret    
c000bf17:	90                   	nop

c000bf18 <DriverlessDevice::detect()>:
c000bf18:	c3                   	ret    
c000bf19:	90                   	nop

c000bf1a <DriverlessDevice::open(int, int, void*)>:
c000bf1a:	83 ec 18             	sub    esp,0x18
c000bf1d:	68 10 de 01 c0       	push   0xc001de10
c000bf22:	e8 14 48 00 00       	call   c001073b <Krnl::panic(char const*)>
c000bf27:	83 c8 ff             	or     eax,0xffffffff
c000bf2a:	83 c4 1c             	add    esp,0x1c
c000bf2d:	c3                   	ret    

c000bf2e <Device::~Device()>:
c000bf2e:	ba 70 de 01 c0       	mov    edx,0xc001de70
c000bf33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf37:	89 10                	mov    DWORD PTR [eax],edx
c000bf39:	90                   	nop
c000bf3a:	c3                   	ret    
c000bf3b:	90                   	nop

c000bf3c <Device::~Device()>:
c000bf3c:	83 ec 0c             	sub    esp,0xc
c000bf3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf43:	e8 e6 ff ff ff       	call   c000bf2e <Device::~Device()>
c000bf48:	83 c4 04             	add    esp,0x4
c000bf4b:	83 ec 08             	sub    esp,0x8
c000bf4e:	68 58 01 00 00       	push   0x158
c000bf53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf57:	e8 9a eb ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	83 c4 0c             	add    esp,0xc
c000bf62:	c3                   	ret    
c000bf63:	90                   	nop

c000bf64 <Device::findAndLoadDriver()>:
c000bf64:	c7 44 24 04 2e de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001de2e
c000bf6c:	e9 7b ec ff ff       	jmp    c000abec <Dbg::kprintf(char const*, ...)>
c000bf71:	90                   	nop

c000bf72 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf72:	57                   	push   edi
c000bf73:	b9 09 00 00 00       	mov    ecx,0x9
c000bf78:	56                   	push   esi
c000bf79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf7d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf81:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf8b:	81 c7 18 01 00 00    	add    edi,0x118
c000bf91:	fc                   	cld    
c000bf92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	c3                   	ret    
c000bf97:	90                   	nop

c000bf98 <Device::preOpenACPI(void*, char*, char*)>:
c000bf98:	57                   	push   edi
c000bf99:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf9e:	56                   	push   esi
c000bf9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfa7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfb1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfb7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfc3:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfc8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd4:	5e                   	pop    esi
c000bfd5:	5f                   	pop    edi
c000bfd6:	c3                   	ret    
c000bfd7:	90                   	nop

c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfd8:	53                   	push   ebx
c000bfd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfe9:	0f b6 c0             	movzx  eax,al
c000bfec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bff8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bffc:	5b                   	pop    ebx
c000bffd:	e9 a6 05 00 00       	jmp    c000c5a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c002 <Device::getParent()>:
c000c002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c006:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c00c:	c3                   	ret    
c000c00d:	90                   	nop

c000c00e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c00e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c012:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c016:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c01b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c01f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c027:	e9 e8 06 00 00       	jmp    c000c714 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c02c <Device::addChild(Device*)>:
c000c02c:	53                   	push   ebx
c000c02d:	83 ec 08             	sub    esp,0x8
c000c030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c038:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c03e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c044:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c046:	85 d2                	test   edx,edx
c000c048:	74 04                	je     c000c04e <Device::addChild(Device*)+0x22>
c000c04a:	89 d3                	mov    ebx,edx
c000c04c:	eb f6                	jmp    c000c044 <Device::addChild(Device*)+0x18>
c000c04e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c051:	83 ec 0c             	sub    esp,0xc
c000c054:	6a 08                	push   0x8
c000c056:	e8 02 be ff ff       	call   c0007e5d <malloc>
c000c05b:	89 03                	mov    DWORD PTR [ebx],eax
c000c05d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c063:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c06a:	83 c4 18             	add    esp,0x18
c000c06d:	5b                   	pop    ebx
c000c06e:	c3                   	ret    
c000c06f:	90                   	nop

c000c070 <Device::removeAllChildren()>:
c000c070:	56                   	push   esi
c000c071:	53                   	push   ebx
c000c072:	52                   	push   edx
c000c073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c077:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c07d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c080:	74 17                	je     c000c099 <Device::removeAllChildren()+0x29>
c000c082:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c085:	85 c0                	test   eax,eax
c000c087:	74 0c                	je     c000c095 <Device::removeAllChildren()+0x25>
c000c089:	83 ec 0c             	sub    esp,0xc
c000c08c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c08e:	50                   	push   eax
c000c08f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c097:	eb e4                	jmp    c000c07d <Device::removeAllChildren()+0xd>
c000c099:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c09f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0a5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0b2:	58                   	pop    eax
c000c0b3:	5b                   	pop    ebx
c000c0b4:	5e                   	pop    esi
c000c0b5:	c3                   	ret    

c000c0b6 <Device::hibernateAll()>:
c000c0b6:	53                   	push   ebx
c000c0b7:	83 ec 14             	sub    esp,0x14
c000c0ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0c0:	53                   	push   ebx
c000c0c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0ca:	83 c4 10             	add    esp,0x10
c000c0cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d0:	74 0f                	je     c000c0e1 <Device::hibernateAll()+0x2b>
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d8:	e8 d9 ff ff ff       	call   c000c0b6 <Device::hibernateAll()>
c000c0dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0df:	eb e9                	jmp    c000c0ca <Device::hibernateAll()+0x14>
c000c0e1:	83 c4 08             	add    esp,0x8
c000c0e4:	5b                   	pop    ebx
c000c0e5:	c3                   	ret    

c000c0e6 <Device::wakeAll()>:
c000c0e6:	53                   	push   ebx
c000c0e7:	83 ec 14             	sub    esp,0x14
c000c0ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0f0:	53                   	push   ebx
c000c0f1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0fa:	83 c4 10             	add    esp,0x10
c000c0fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c100:	74 0f                	je     c000c111 <Device::wakeAll()+0x2b>
c000c102:	83 ec 0c             	sub    esp,0xc
c000c105:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c108:	e8 d9 ff ff ff       	call   c000c0e6 <Device::wakeAll()>
c000c10d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10f:	eb e9                	jmp    c000c0fa <Device::wakeAll()+0x14>
c000c111:	83 c4 08             	add    esp,0x8
c000c114:	5b                   	pop    ebx
c000c115:	c3                   	ret    

c000c116 <Device::detectAll()>:
c000c116:	53                   	push   ebx
c000c117:	83 ec 14             	sub    esp,0x14
c000c11a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c11e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c120:	53                   	push   ebx
c000c121:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c124:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c12a:	83 c4 10             	add    esp,0x10
c000c12d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c130:	74 0f                	je     c000c141 <Device::detectAll()+0x2b>
c000c132:	83 ec 0c             	sub    esp,0xc
c000c135:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c138:	e8 d9 ff ff ff       	call   c000c116 <Device::detectAll()>
c000c13d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13f:	eb e9                	jmp    c000c12a <Device::detectAll()+0x14>
c000c141:	83 c4 08             	add    esp,0x8
c000c144:	5b                   	pop    ebx
c000c145:	c3                   	ret    

c000c146 <Device::disableLegacyAll()>:
c000c146:	c3                   	ret    
c000c147:	90                   	nop

c000c148 <Device::loadDriversForAll()>:
c000c148:	c3                   	ret    
c000c149:	90                   	nop

c000c14a <Device::closeAll()>:
c000c14a:	53                   	push   ebx
c000c14b:	83 ec 08             	sub    esp,0x8
c000c14e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c152:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c154:	6a 00                	push   0x0
c000c156:	6a 00                	push   0x0
c000c158:	6a 00                	push   0x0
c000c15a:	53                   	push   ebx
c000c15b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c15e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c16a:	74 0f                	je     c000c17b <Device::closeAll()+0x31>
c000c16c:	83 ec 0c             	sub    esp,0xc
c000c16f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c172:	e8 d3 ff ff ff       	call   c000c14a <Device::closeAll()>
c000c177:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c179:	eb e9                	jmp    c000c164 <Device::closeAll()+0x1a>
c000c17b:	83 c4 08             	add    esp,0x8
c000c17e:	5b                   	pop    ebx
c000c17f:	c3                   	ret    

c000c180 <Device::powerSavingAll(PowerSavingLevel)>:
c000c180:	56                   	push   esi
c000c181:	53                   	push   ebx
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c189:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c18d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c18f:	56                   	push   esi
c000c190:	53                   	push   ebx
c000c191:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c194:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1a0:	74 0f                	je     c000c1b1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1a2:	52                   	push   edx
c000c1a3:	52                   	push   edx
c000c1a4:	56                   	push   esi
c000c1a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a8:	e8 d3 ff ff ff       	call   c000c180 <Device::powerSavingAll(PowerSavingLevel)>
c000c1ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1af:	eb e9                	jmp    c000c19a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1b1:	58                   	pop    eax
c000c1b2:	5b                   	pop    ebx
c000c1b3:	5e                   	pop    esi
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <Device::setName(char const*)>:
c000c1b6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1be:	e9 5d 44 ff ff       	jmp    c0000620 <strcpy>
c000c1c3:	90                   	nop

c000c1c4 <Device::Device(char const*)>:
c000c1c4:	83 ec 1c             	sub    esp,0x1c
c000c1c7:	ba 70 de 01 c0       	mov    edx,0xc001de70
c000c1cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d0:	89 10                	mov    DWORD PTR [eax],edx
c000c1d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c200:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c20a:	83 ec 08             	sub    esp,0x8
c000c20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c215:	e8 9c ff ff ff       	call   c000c1b6 <Device::setName(char const*)>
c000c21a:	83 c4 10             	add    esp,0x10
c000c21d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c225:	83 ec 0c             	sub    esp,0xc
c000c228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c22c:	e8 2c bc ff ff       	call   c0007e5d <malloc>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c23a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c241:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c245:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c24f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c25b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c26c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c270:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c286:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c294:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2ba:	90                   	nop
c000c2bb:	83 c4 1c             	add    esp,0x1c
c000c2be:	c3                   	ret    
c000c2bf:	90                   	nop

c000c2c0 <Device::getName()>:
c000c2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c4:	05 d0 00 00 00       	add    eax,0xd0
c000c2c9:	c3                   	ret    

c000c2ca <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2ca:	83 ec 0c             	sub    esp,0xc
c000c2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2d1:	83 ec 08             	sub    esp,0x8
c000c2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2d8:	50                   	push   eax
c000c2d9:	e8 e6 fe ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000c2de:	83 c4 10             	add    esp,0x10
c000c2e1:	ba 9c de 01 c0       	mov    edx,0xc001de9c
c000c2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ea:	89 10                	mov    DWORD PTR [eax],edx
c000c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2fa:	90                   	nop
c000c2fb:	83 c4 0c             	add    esp,0xc
c000c2fe:	c3                   	ret    
c000c2ff:	90                   	nop

c000c300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c300:	57                   	push   edi
c000c301:	56                   	push   esi
c000c302:	53                   	push   ebx
c000c303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c307:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c30b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c30f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c315:	75 0c                	jne    c000c323 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c317:	52                   	push   edx
c000c318:	52                   	push   edx
c000c319:	53                   	push   ebx
c000c31a:	56                   	push   esi
c000c31b:	e8 d2 01 01 00       	call   c001c4f2 <LinkedList<Device>::addElement(Device*)>
c000c320:	83 c4 10             	add    esp,0x10
c000c323:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c32c:	74 12                	je     c000c340 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c32e:	50                   	push   eax
c000c32f:	57                   	push   edi
c000c330:	56                   	push   esi
c000c331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c334:	e8 c7 ff ff ff       	call   c000c300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	eb e9                	jmp    c000c329 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c340:	5b                   	pop    ebx
c000c341:	5e                   	pop    esi
c000c342:	5f                   	pop    edi
c000c343:	c3                   	ret    

c000c344 <getDevicesOfType(DeviceType)>:
c000c344:	53                   	push   ebx
c000c345:	83 ec 14             	sub    esp,0x14
c000c348:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c34c:	53                   	push   ebx
c000c34d:	e8 7c 02 01 00       	call   c001c5ce <LinkedList<Device>::LinkedList()>
c000c352:	83 c4 0c             	add    esp,0xc
c000c355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c359:	53                   	push   ebx
c000c35a:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c000c360:	e8 9b ff ff ff       	call   c000c300 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c365:	89 d8                	mov    eax,ebx
c000c367:	83 c4 18             	add    esp,0x18
c000c36a:	5b                   	pop    ebx
c000c36b:	c2 04 00             	ret    0x4
c000c36e:	66 90                	xchg   ax,ax

c000c370 <HardDiskController::HardDiskController(char const*)>:
c000c370:	83 ec 0c             	sub    esp,0xc
c000c373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c377:	83 ec 08             	sub    esp,0x8
c000c37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37e:	50                   	push   eax
c000c37f:	e8 40 fe ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000c384:	83 c4 10             	add    esp,0x10
c000c387:	ba c8 de 01 c0       	mov    edx,0xc001dec8
c000c38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c390:	89 10                	mov    DWORD PTR [eax],edx
c000c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c396:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3a0:	90                   	nop
c000c3a1:	83 c4 0c             	add    esp,0xc
c000c3a4:	c3                   	ret    
c000c3a5:	90                   	nop
c000c3a6:	66 90                	xchg   ax,ax

c000c3a8 <HardDiskController::~HardDiskController()>:
c000c3a8:	83 ec 0c             	sub    esp,0xc
c000c3ab:	ba c8 de 01 c0       	mov    edx,0xc001dec8
c000c3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b4:	89 10                	mov    DWORD PTR [eax],edx
c000c3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	50                   	push   eax
c000c3be:	e8 6b fb ff ff       	call   c000bf2e <Device::~Device()>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	90                   	nop
c000c3c7:	83 c4 0c             	add    esp,0xc
c000c3ca:	c3                   	ret    
c000c3cb:	90                   	nop

c000c3cc <HardDiskController::~HardDiskController()>:
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	83 ec 0c             	sub    esp,0xc
c000c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d6:	e8 cd ff ff ff       	call   c000c3a8 <HardDiskController::~HardDiskController()>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	83 ec 08             	sub    esp,0x8
c000c3e1:	68 58 01 00 00       	push   0x158
c000c3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ea:	e8 07 e7 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	83 c4 0c             	add    esp,0xc
c000c3f5:	c3                   	ret    

c000c3f6 <PhysicalDisk::eject()>:
c000c3f6:	83 c8 ff             	or     eax,0xffffffff
c000c3f9:	c3                   	ret    

c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c401:	83 ec 08             	sub    esp,0x8
c000c404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c408:	50                   	push   eax
c000c409:	e8 b6 fd ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000c40e:	83 c4 10             	add    esp,0x10
c000c411:	ba f4 de 01 c0       	mov    edx,0xc001def4
c000c416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41a:	89 10                	mov    DWORD PTR [eax],edx
c000c41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c420:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c436:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c444:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c448:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c452:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c45c:	90                   	nop
c000c45d:	83 c4 0c             	add    esp,0xc
c000c460:	c3                   	ret    
c000c461:	90                   	nop

c000c462 <PhysicalDisk::startCache()>:
c000c462:	56                   	push   esi
c000c463:	53                   	push   ebx
c000c464:	83 ec 10             	sub    esp,0x10
c000c467:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c46b:	6a 44                	push   0x44
c000c46d:	e8 eb b9 ff ff       	call   c0007e5d <malloc>
c000c472:	89 c6                	mov    esi,eax
c000c474:	58                   	pop    eax
c000c475:	5a                   	pop    edx
c000c476:	53                   	push   ebx
c000c477:	56                   	push   esi
c000c478:	e8 ab 15 00 00       	call   c000da28 <VCache::VCache(PhysicalDisk*)>
c000c47d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c483:	83 c4 14             	add    esp,0x14
c000c486:	5b                   	pop    ebx
c000c487:	5e                   	pop    esi
c000c488:	c3                   	ret    
c000c489:	90                   	nop

c000c48a <PhysicalDisk::~PhysicalDisk()>:
c000c48a:	83 ec 0c             	sub    esp,0xc
c000c48d:	ba f4 de 01 c0       	mov    edx,0xc001def4
c000c492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c496:	89 10                	mov    DWORD PTR [eax],edx
c000c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49c:	83 ec 0c             	sub    esp,0xc
c000c49f:	50                   	push   eax
c000c4a0:	e8 89 fa ff ff       	call   c000bf2e <Device::~Device()>
c000c4a5:	83 c4 10             	add    esp,0x10
c000c4a8:	90                   	nop
c000c4a9:	83 c4 0c             	add    esp,0xc
c000c4ac:	c3                   	ret    
c000c4ad:	90                   	nop

c000c4ae <PhysicalDisk::~PhysicalDisk()>:
c000c4ae:	83 ec 0c             	sub    esp,0xc
c000c4b1:	83 ec 0c             	sub    esp,0xc
c000c4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b8:	e8 cd ff ff ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c000c4bd:	83 c4 10             	add    esp,0x10
c000c4c0:	83 ec 08             	sub    esp,0x8
c000c4c3:	68 6c 01 00 00       	push   0x16c
c000c4c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4cc:	e8 25 e6 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	83 c4 0c             	add    esp,0xc
c000c4d7:	c3                   	ret    

c000c4d8 <int_handler>:
c000c4d8:	55                   	push   ebp
c000c4d9:	57                   	push   edi
c000c4da:	56                   	push   esi
c000c4db:	53                   	push   ebx
c000c4dc:	83 ec 0c             	sub    esp,0xc
c000c4df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4e3:	80 3d c0 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232c0,0x0
c000c4ea:	74 0b                	je     c000c4f7 <int_handler+0x1f>
c000c4ec:	fa                   	cli    
c000c4ed:	f4                   	hlt    
c000c4ee:	80 3d c0 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232c0,0x0
c000c4f5:	75 f5                	jne    c000c4ec <int_handler+0x14>
c000c4f7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4fa:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4fd:	83 f8 17             	cmp    eax,0x17
c000c500:	76 3e                	jbe    c000c540 <int_handler+0x68>
c000c502:	c1 e6 04             	shl    esi,0x4
c000c505:	31 db                	xor    ebx,ebx
c000c507:	8d ae 40 19 02 c0    	lea    ebp,[esi-0x3ffde6c0]
c000c50d:	81 c6 40 09 02 c0    	add    esi,0xc0020940
c000c513:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c517:	85 c0                	test   eax,eax
c000c519:	74 13                	je     c000c52e <int_handler+0x56>
c000c51b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c51e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c522:	74 2a                	je     c000c54e <int_handler+0x76>
c000c524:	83 ec 08             	sub    esp,0x8
c000c527:	52                   	push   edx
c000c528:	57                   	push   edi
c000c529:	ff d0                	call   eax
c000c52b:	83 c4 10             	add    esp,0x10
c000c52e:	43                   	inc    ebx
c000c52f:	83 fb 04             	cmp    ebx,0x4
c000c532:	75 df                	jne    c000c513 <int_handler+0x3b>
c000c534:	83 c4 0c             	add    esp,0xc
c000c537:	31 c0                	xor    eax,eax
c000c539:	5b                   	pop    ebx
c000c53a:	31 d2                	xor    edx,edx
c000c53c:	5e                   	pop    esi
c000c53d:	5f                   	pop    edi
c000c53e:	5d                   	pop    ebp
c000c53f:	c3                   	ret    
c000c540:	83 ec 0c             	sub    esp,0xc
c000c543:	50                   	push   eax
c000c544:	e8 cc 94 00 00       	call   c0015a15 <HalEndOfInterrupt(int)>
c000c549:	83 c4 10             	add    esp,0x10
c000c54c:	eb b4                	jmp    c000c502 <int_handler+0x2a>
c000c54e:	83 ec 08             	sub    esp,0x8
c000c551:	52                   	push   edx
c000c552:	57                   	push   edi
c000c553:	ff d0                	call   eax
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	83 c4 0c             	add    esp,0xc
c000c55b:	5b                   	pop    ebx
c000c55c:	5e                   	pop    esi
c000c55d:	5f                   	pop    edi
c000c55e:	5d                   	pop    ebp
c000c55f:	c3                   	ret    

c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c560:	56                   	push   esi
c000c561:	31 c0                	xor    eax,eax
c000c563:	53                   	push   ebx
c000c564:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c568:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c56c:	89 ca                	mov    edx,ecx
c000c56e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c572:	c1 e2 04             	shl    edx,0x4
c000c575:	83 bc 82 40 19 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde6c0],0x0
c000c57d:	74 15                	je     c000c594 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c57f:	40                   	inc    eax
c000c580:	83 f8 04             	cmp    eax,0x4
c000c583:	75 f0                	jne    c000c575 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c585:	c7 44 24 0c 24 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001df24
c000c58d:	5b                   	pop    ebx
c000c58e:	5e                   	pop    esi
c000c58f:	e9 a7 41 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c000c594:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c597:	89 1c 85 40 19 02 c0 	mov    DWORD PTR [eax*4-0x3ffde6c0],ebx
c000c59e:	89 34 85 40 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf6c0],esi
c000c5a5:	5b                   	pop    ebx
c000c5a6:	5e                   	pop    esi
c000c5a7:	c3                   	ret    

c000c5a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5a8:	57                   	push   edi
c000c5a9:	8b 15 38 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020838
c000c5af:	56                   	push   esi
c000c5b0:	53                   	push   ebx
c000c5b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5b9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5c0:	74 5b                	je     c000c61d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5c2:	89 c7                	mov    edi,eax
c000c5c4:	84 c0                	test   al,al
c000c5c6:	74 24                	je     c000c5ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5c8:	83 fe 0f             	cmp    esi,0xf
c000c5cb:	0f 8f d9 00 00 00    	jg     c000c6aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5d1:	8a 86 a0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0860]
c000c5d7:	25 ff 00 00 00       	and    eax,0xff
c000c5dc:	66 8b bc 00 e0 30 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcf20]
c000c5e4:	89 c6                	mov    esi,eax
c000c5e6:	66 d1 ef             	shr    di,1
c000c5e9:	83 e7 01             	and    edi,0x1
c000c5ec:	83 ec 08             	sub    esp,0x8
c000c5ef:	a1 00 47 02 c0       	mov    eax,ds:0xc0024700
c000c5f4:	31 db                	xor    ebx,ebx
c000c5f6:	50                   	push   eax
c000c5f7:	68 31 df 01 c0       	push   0xc001df31
c000c5fc:	e8 eb e5 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	a1 00 47 02 c0       	mov    eax,ds:0xc0024700
c000c609:	85 c0                	test   eax,eax
c000c60b:	7f 51                	jg     c000c65e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c60d:	83 ec 0c             	sub    esp,0xc
c000c610:	68 48 df 01 c0       	push   0xc001df48
c000c615:	e8 21 41 00 00       	call   c001073b <Krnl::panic(char const*)>
c000c61a:	83 c4 10             	add    esp,0x10
c000c61d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c620:	31 d2                	xor    edx,edx
c000c622:	89 c8                	mov    eax,ecx
c000c624:	c1 e0 04             	shl    eax,0x4
c000c627:	8b 9c 90 40 19 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde6c0]
c000c62e:	85 db                	test   ebx,ebx
c000c630:	0f 84 8b 00 00 00    	je     c000c6c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c636:	42                   	inc    edx
c000c637:	83 fa 04             	cmp    edx,0x4
c000c63a:	75 eb                	jne    c000c627 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	68 9c df 01 c0       	push   0xc001df9c
c000c644:	e8 f2 40 00 00       	call   c001073b <Krnl::panic(char const*)>
c000c649:	83 c4 10             	add    esp,0x10
c000c64c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c651:	5b                   	pop    ebx
c000c652:	5e                   	pop    esi
c000c653:	5f                   	pop    edi
c000c654:	c3                   	ret    
c000c655:	43                   	inc    ebx
c000c656:	39 1d 00 47 02 c0    	cmp    DWORD PTR ds:0xc0024700,ebx
c000c65c:	7e af                	jle    c000c60d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c65e:	83 ec 08             	sub    esp,0x8
c000c661:	8b 04 9d 20 47 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb8e0]
c000c668:	56                   	push   esi
c000c669:	50                   	push   eax
c000c66a:	e8 af ee 00 00       	call   c001b51e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c66f:	83 c4 10             	add    esp,0x10
c000c672:	84 c0                	test   al,al
c000c674:	74 df                	je     c000c655 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c676:	81 e7 ff 00 00 00    	and    edi,0xff
c000c67c:	50                   	push   eax
c000c67d:	8d 46 20             	lea    eax,[esi+0x20]
c000c680:	57                   	push   edi
c000c681:	25 ff 00 00 00       	and    eax,0xff
c000c686:	6a 00                	push   0x0
c000c688:	50                   	push   eax
c000c689:	89 f0                	mov    eax,esi
c000c68b:	6a 00                	push   0x0
c000c68d:	25 ff 00 00 00       	and    eax,0xff
c000c692:	6a 00                	push   0x0
c000c694:	50                   	push   eax
c000c695:	8b 04 9d 20 47 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb8e0]
c000c69c:	50                   	push   eax
c000c69d:	e8 f6 ef 00 00       	call   c001b698 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6a2:	83 c4 20             	add    esp,0x20
c000c6a5:	e9 73 ff ff ff       	jmp    c000c61d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6aa:	83 ec 0c             	sub    esp,0xc
c000c6ad:	31 ff                	xor    edi,edi
c000c6af:	68 64 df 01 c0       	push   0xc001df64
c000c6b4:	e8 82 40 00 00       	call   c001073b <Krnl::panic(char const*)>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	e9 2b ff ff ff       	jmp    c000c5ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6c1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6c8:	89 14 85 40 19 02 c0 	mov    DWORD PTR [eax*4-0x3ffde6c0],edx
c000c6cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6d3:	5b                   	pop    ebx
c000c6d4:	89 14 85 40 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf6c0],edx
c000c6db:	89 f0                	mov    eax,esi
c000c6dd:	5e                   	pop    esi
c000c6de:	5f                   	pop    edi
c000c6df:	c3                   	ret    

c000c6e0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6e8:	c1 e0 04             	shl    eax,0x4
c000c6eb:	8d 50 10             	lea    edx,[eax+0x10]
c000c6ee:	39 88 40 19 02 c0    	cmp    DWORD PTR [eax-0x3ffde6c0],ecx
c000c6f4:	74 08                	je     c000c6fe <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6f6:	83 c0 04             	add    eax,0x4
c000c6f9:	39 d0                	cmp    eax,edx
c000c6fb:	75 f1                	jne    c000c6ee <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6fd:	c3                   	ret    
c000c6fe:	c7 80 40 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6c0],0x0
c000c708:	c7 80 40 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6c0],0x0
c000c712:	eb e2                	jmp    c000c6f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c714 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c714:	53                   	push   ebx
c000c715:	83 ec 08             	sub    esp,0x8
c000c718:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c71c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c721:	74 0e                	je     c000c731 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c723:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000c728:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c72f:	75 37                	jne    c000c768 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c735:	83 c0 20             	add    eax,0x20
c000c738:	c1 e0 04             	shl    eax,0x4
c000c73b:	8d 50 10             	lea    edx,[eax+0x10]
c000c73e:	39 98 40 19 02 c0    	cmp    DWORD PTR [eax-0x3ffde6c0],ebx
c000c744:	74 0c                	je     c000c752 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c746:	83 c0 04             	add    eax,0x4
c000c749:	39 d0                	cmp    eax,edx
c000c74b:	75 f1                	jne    c000c73e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c74d:	83 c4 08             	add    esp,0x8
c000c750:	5b                   	pop    ebx
c000c751:	c3                   	ret    
c000c752:	c7 80 40 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6c0],0x0
c000c75c:	c7 80 40 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6c0],0x0
c000c766:	eb de                	jmp    c000c746 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c768:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c76d:	7f 12                	jg     c000c781 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c76f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c773:	31 c0                	xor    eax,eax
c000c775:	8a 81 a0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0860]
c000c77b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c77f:	eb b0                	jmp    c000c731 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	68 55 df 01 c0       	push   0xc001df55
c000c789:	e8 ad 3f 00 00       	call   c001073b <Krnl::panic(char const*)>
c000c78e:	83 c4 10             	add    esp,0x10
c000c791:	eb 9e                	jmp    c000c731 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c793 <setupINTS()>:
c000c793:	31 c0                	xor    eax,eax
c000c795:	c7 80 40 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6c0],0x0
c000c79f:	c7 80 40 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6c0],0x0
c000c7a9:	c7 80 44 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6bc],0x0
c000c7b3:	c7 80 44 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6bc],0x0
c000c7bd:	c7 80 48 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6b8],0x0
c000c7c7:	c7 80 48 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6b8],0x0
c000c7d1:	c7 80 4c 19 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde6b4],0x0
c000c7db:	c7 80 4c 09 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf6b4],0x0
c000c7e5:	83 c0 10             	add    eax,0x10
c000c7e8:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7ed:	75 a6                	jne    c000c795 <setupINTS()+0x2>
c000c7ef:	c3                   	ret    

c000c7f0 <convertLegacyIRQNumber(int)>:
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	8b 15 38 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020838
c000c7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7fd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c804:	74 0f                	je     c000c815 <convertLegacyIRQNumber(int)+0x25>
c000c806:	83 f8 0f             	cmp    eax,0xf
c000c809:	7f 0e                	jg     c000c819 <convertLegacyIRQNumber(int)+0x29>
c000c80b:	31 c9                	xor    ecx,ecx
c000c80d:	8a 88 a0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0860]
c000c813:	89 c8                	mov    eax,ecx
c000c815:	83 c4 0c             	add    esp,0xc
c000c818:	c3                   	ret    
c000c819:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c81d:	83 ec 0c             	sub    esp,0xc
c000c820:	68 64 df 01 c0       	push   0xc001df64
c000c825:	e8 11 3f 00 00       	call   c001073b <Krnl::panic(char const*)>
c000c82a:	83 c4 10             	add    esp,0x10
c000c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c831:	83 c4 0c             	add    esp,0xc
c000c834:	c3                   	ret    
c000c835:	90                   	nop

c000c836 <startGUI(void*)>:
c000c836:	55                   	push   ebp
c000c837:	89 e5                	mov    ebp,esp
c000c839:	53                   	push   ebx
c000c83a:	83 ec 04             	sub    esp,0x4
c000c83d:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c842:	48                   	dec    eax
c000c843:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c848:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c84d:	85 c0                	test   eax,eax
c000c84f:	75 01                	jne    c000c852 <startGUI(void*)+0x1c>
c000c851:	fb                   	sti    
c000c852:	8b 1d 38 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020838
c000c858:	83 ec 08             	sub    esp,0x8
c000c85b:	6a 01                	push   0x1
c000c85d:	68 c1 df 01 c0       	push   0xc001dfc1
c000c862:	e8 37 68 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000c867:	83 c4 10             	add    esp,0x10
c000c86a:	83 ec 08             	sub    esp,0x8
c000c86d:	53                   	push   ebx
c000c86e:	50                   	push   eax
c000c86f:	e8 5b 6a 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000c874:	83 c4 10             	add    esp,0x10
c000c877:	8b 1d 38 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020838
c000c87d:	83 ec 08             	sub    esp,0x8
c000c880:	6a 01                	push   0x1
c000c882:	68 db df 01 c0       	push   0xc001dfdb
c000c887:	e8 12 68 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000c88c:	83 c4 10             	add    esp,0x10
c000c88f:	83 ec 08             	sub    esp,0x8
c000c892:	53                   	push   ebx
c000c893:	50                   	push   eax
c000c894:	e8 36 6a 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000c899:	83 c4 10             	add    esp,0x10
c000c89c:	90                   	nop
c000c89d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8a0:	c9                   	leave  
c000c8a1:	c3                   	ret    

c000c8a2 <startGUIVESA(void*)>:
c000c8a2:	55                   	push   ebp
c000c8a3:	89 e5                	mov    ebp,esp
c000c8a5:	53                   	push   ebx
c000c8a6:	83 ec 04             	sub    esp,0x4
c000c8a9:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c8ae:	48                   	dec    eax
c000c8af:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c8b4:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c8b9:	85 c0                	test   eax,eax
c000c8bb:	75 01                	jne    c000c8be <startGUIVESA(void*)+0x1c>
c000c8bd:	fb                   	sti    
c000c8be:	8b 1d 38 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020838
c000c8c4:	83 ec 08             	sub    esp,0x8
c000c8c7:	6a 01                	push   0x1
c000c8c9:	68 f9 df 01 c0       	push   0xc001dff9
c000c8ce:	e8 cb 67 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000c8d3:	83 c4 10             	add    esp,0x10
c000c8d6:	83 ec 08             	sub    esp,0x8
c000c8d9:	53                   	push   ebx
c000c8da:	50                   	push   eax
c000c8db:	e8 ef 69 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	8b 1d 38 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020838
c000c8e9:	83 ec 08             	sub    esp,0x8
c000c8ec:	6a 01                	push   0x1
c000c8ee:	68 db df 01 c0       	push   0xc001dfdb
c000c8f3:	e8 a6 67 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000c8f8:	83 c4 10             	add    esp,0x10
c000c8fb:	83 ec 08             	sub    esp,0x8
c000c8fe:	53                   	push   ebx
c000c8ff:	50                   	push   eax
c000c900:	e8 ca 69 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	90                   	nop
c000c909:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c90c:	c9                   	leave  
c000c90d:	c3                   	ret    

c000c90e <sendKeyToTerminal(unsigned char)>:
c000c90e:	55                   	push   ebp
c000c90f:	89 e5                	mov    ebp,esp
c000c911:	83 ec 28             	sub    esp,0x28
c000c914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c917:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c91a:	8b 15 84 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020884
c000c920:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c923:	25 ff 00 00 00       	and    eax,0xff
c000c928:	83 ec 08             	sub    esp,0x8
c000c92b:	50                   	push   eax
c000c92c:	52                   	push   edx
c000c92d:	e8 aa c8 ff ff       	call   c00091dc <VgaText::receiveKey(unsigned char)>
c000c932:	83 c4 10             	add    esp,0x10
c000c935:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c939:	0f 85 8f 00 00 00    	jne    c000c9ce <sendKeyToTerminal(unsigned char)+0xc0>
c000c93f:	fa                   	cli    
c000c940:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c945:	40                   	inc    eax
c000c946:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c94b:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000c950:	40                   	inc    eax
c000c951:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c000c956:	a1 40 29 02 c0       	mov    eax,ds:0xc0022940
c000c95b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c95e:	c7 05 40 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022940,0x0
c000c968:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c96c:	74 1f                	je     c000c98d <sendKeyToTerminal(unsigned char)+0x7f>
c000c96e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c971:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c974:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c977:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c97a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c983:	e8 cc 75 00 00       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	eb db                	jmp    c000c968 <sendKeyToTerminal(unsigned char)+0x5a>
c000c98d:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000c992:	48                   	dec    eax
c000c993:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c000c998:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000c99d:	85 c0                	test   eax,eax
c000c99f:	75 18                	jne    c000c9b9 <sendKeyToTerminal(unsigned char)+0xab>
c000c9a1:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c000c9a6:	85 c0                	test   eax,eax
c000c9a8:	74 0f                	je     c000c9b9 <sendKeyToTerminal(unsigned char)+0xab>
c000c9aa:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c000c9b4:	e8 d7 70 00 00       	call   c0013a90 <schedule()>
c000c9b9:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c9be:	48                   	dec    eax
c000c9bf:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000c9c4:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000c9c9:	85 c0                	test   eax,eax
c000c9cb:	75 01                	jne    c000c9ce <sendKeyToTerminal(unsigned char)+0xc0>
c000c9cd:	fb                   	sti    
c000c9ce:	90                   	nop
c000c9cf:	c9                   	leave  
c000c9d0:	c3                   	ret    

c000c9d1 <sendKeyboardToken(KeyboardToken)>:
c000c9d1:	55                   	push   ebp
c000c9d2:	89 e5                	mov    ebp,esp
c000c9d4:	83 ec 18             	sub    esp,0x18
c000c9d7:	e8 ab 3e 00 00       	call   c0010887 <Krnl::userIOReceived()>
c000c9dc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e2:	25 ff ff 00 00       	and    eax,0xffff
c000c9e7:	83 f2 01             	xor    edx,0x1
c000c9ea:	88 90 60 29 02 c0    	mov    BYTE PTR [eax-0x3ffdd6a0],dl
c000c9f0:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	74 24                	je     c000ca1d <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9f9:	8b 0d 48 29 02 c0    	mov    ecx,DWORD PTR ds:0xc0022948
c000c9ff:	83 ec 04             	sub    esp,0x4
c000ca02:	68 60 29 02 c0       	push   0xc0022960
c000ca07:	83 ec 08             	sub    esp,0x8
c000ca0a:	89 e2                	mov    edx,esp
c000ca0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0f:	89 02                	mov    DWORD PTR [edx],eax
c000ca11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca14:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca18:	ff d1                	call   ecx
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca21:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca24:	a0 68 2d 02 c0       	mov    al,ds:0xc0022d68
c000ca29:	38 c2                	cmp    dl,al
c000ca2b:	74 1e                	je     c000ca4b <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca2d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca30:	a2 68 2d 02 c0       	mov    ds:0xc0022d68,al
c000ca35:	a0 68 2d 02 c0       	mov    al,ds:0xc0022d68
c000ca3a:	25 ff 00 00 00       	and    eax,0xff
c000ca3f:	83 ec 0c             	sub    esp,0xc
c000ca42:	50                   	push   eax
c000ca43:	e8 e6 be ff ff       	call   c000892e <setTerminalScrollLock(bool)>
c000ca48:	83 c4 10             	add    esp,0x10
c000ca4b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca4e:	84 c0                	test   al,al
c000ca50:	0f 84 ae 00 00 00    	je     c000cb04 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca59:	66 3d 10 03          	cmp    ax,0x310
c000ca5d:	75 06                	jne    c000ca65 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca5f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca68:	66 3d 11 03          	cmp    ax,0x311
c000ca6c:	75 06                	jne    c000ca74 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca6e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca77:	66 3d 12 03          	cmp    ax,0x312
c000ca7b:	75 06                	jne    c000ca83 <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca7d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca86:	66 3d 13 03          	cmp    ax,0x313
c000ca8a:	75 06                	jne    c000ca92 <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca8c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca95:	66 3d 14 03          	cmp    ax,0x314
c000ca99:	75 06                	jne    c000caa1 <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca9b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000caa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa4:	66 3d 15 03          	cmp    ax,0x315
c000caa8:	75 06                	jne    c000cab0 <sendKeyboardToken(KeyboardToken)+0xdf>
c000caaa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab3:	66 3d 16 03          	cmp    ax,0x316
c000cab7:	75 06                	jne    c000cabf <sendKeyboardToken(KeyboardToken)+0xee>
c000cab9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cabf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac2:	66 3d 17 03          	cmp    ax,0x317
c000cac6:	75 06                	jne    c000cace <sendKeyboardToken(KeyboardToken)+0xfd>
c000cac8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad1:	66 3d 18 03          	cmp    ax,0x318
c000cad5:	75 06                	jne    c000cadd <sendKeyboardToken(KeyboardToken)+0x10c>
c000cad7:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cadd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae0:	66 3d 19 03          	cmp    ax,0x319
c000cae4:	75 06                	jne    c000caec <sendKeyboardToken(KeyboardToken)+0x11b>
c000cae6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000caec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caef:	66 3d 1a 03          	cmp    ax,0x31a
c000caf3:	0f 85 c9 00 00 00    	jne    c000cbc2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caf9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000caff:	e9 be 00 00 00       	jmp    c000cbc2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb07:	66 3d 10 03          	cmp    ax,0x310
c000cb0b:	75 0a                	jne    c000cb17 <sendKeyboardToken(KeyboardToken)+0x146>
c000cb0d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb13:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb1a:	66 3d 11 03          	cmp    ax,0x311
c000cb1e:	75 0a                	jne    c000cb2a <sendKeyboardToken(KeyboardToken)+0x159>
c000cb20:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb26:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb2d:	66 3d 12 03          	cmp    ax,0x312
c000cb31:	75 0a                	jne    c000cb3d <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb33:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb39:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb40:	66 3d 13 03          	cmp    ax,0x313
c000cb44:	75 0a                	jne    c000cb50 <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb46:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb4c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb53:	66 3d 14 03          	cmp    ax,0x314
c000cb57:	75 0a                	jne    c000cb63 <sendKeyboardToken(KeyboardToken)+0x192>
c000cb59:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb5f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb66:	66 3d 15 03          	cmp    ax,0x315
c000cb6a:	75 0a                	jne    c000cb76 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb6c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb72:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb79:	66 3d 16 03          	cmp    ax,0x316
c000cb7d:	75 0a                	jne    c000cb89 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb7f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb85:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb8c:	66 3d 17 03          	cmp    ax,0x317
c000cb90:	75 0a                	jne    c000cb9c <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb92:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb98:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9f:	66 3d 18 03          	cmp    ax,0x318
c000cba3:	75 0a                	jne    c000cbaf <sendKeyboardToken(KeyboardToken)+0x1de>
c000cba5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cbab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb2:	66 3d 19 03          	cmp    ax,0x319
c000cbb6:	75 0a                	jne    c000cbc2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbb8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbbe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc5:	66 3d 00 02          	cmp    ax,0x200
c000cbc9:	75 2c                	jne    c000cbf7 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbcb:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000cbd0:	83 f0 01             	xor    eax,0x1
c000cbd3:	84 c0                	test   al,al
c000cbd5:	74 20                	je     c000cbf7 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbd7:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000cbdc:	6a 01                	push   0x1
c000cbde:	6a 00                	push   0x0
c000cbe0:	68 36 c8 00 c0       	push   0xc000c836
c000cbe5:	50                   	push   eax
c000cbe6:	e8 85 6c 00 00       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	c6 05 60 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d60,0x1
c000cbf5:	eb 33                	jmp    c000cc2a <sendKeyboardToken(KeyboardToken)+0x259>
c000cbf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfa:	66 3d 01 02          	cmp    ax,0x201
c000cbfe:	75 2a                	jne    c000cc2a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc00:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000cc05:	83 f0 01             	xor    eax,0x1
c000cc08:	84 c0                	test   al,al
c000cc0a:	74 1e                	je     c000cc2a <sendKeyboardToken(KeyboardToken)+0x259>
c000cc0c:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000cc11:	6a 01                	push   0x1
c000cc13:	6a 00                	push   0x0
c000cc15:	68 a2 c8 00 c0       	push   0xc000c8a2
c000cc1a:	50                   	push   eax
c000cc1b:	e8 50 6c 00 00       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c000cc20:	83 c4 10             	add    esp,0x10
c000cc23:	c6 05 60 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d60,0x1
c000cc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2d:	66 3d 1d 03          	cmp    ax,0x31d
c000cc31:	75 06                	jne    c000cc39 <sendKeyboardToken(KeyboardToken)+0x268>
c000cc33:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3c:	66 3d 1c 03          	cmp    ax,0x31c
c000cc40:	75 06                	jne    c000cc48 <sendKeyboardToken(KeyboardToken)+0x277>
c000cc42:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4b:	66 3d 1b 03          	cmp    ax,0x31b
c000cc4f:	75 06                	jne    c000cc57 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc51:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5a:	66 3d 1e 03          	cmp    ax,0x31e
c000cc5e:	75 06                	jne    c000cc66 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc60:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc69:	66 3d 1f 03          	cmp    ax,0x31f
c000cc6d:	75 06                	jne    c000cc75 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc6f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc78:	66 3d 1a 03          	cmp    ax,0x31a
c000cc7c:	75 06                	jne    c000cc84 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc7e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc84:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc88:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc8b:	83 f0 01             	xor    eax,0x1
c000cc8e:	84 c0                	test   al,al
c000cc90:	74 7b                	je     c000cd0d <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc92:	a0 61 2a 02 c0       	mov    al,ds:0xc0022a61
c000cc97:	84 c0                	test   al,al
c000cc99:	74 43                	je     c000ccde <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc9b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc9f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cca3:	74 2d                	je     c000ccd2 <sendKeyboardToken(KeyboardToken)+0x301>
c000cca5:	8b 15 64 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022d64
c000ccab:	89 d0                	mov    eax,edx
c000ccad:	c1 e0 02             	shl    eax,0x2
c000ccb0:	01 d0                	add    eax,edx
c000ccb2:	01 c0                	add    eax,eax
c000ccb4:	a3 64 2d 02 c0       	mov    ds:0xc0022d64,eax
c000ccb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccbc:	25 ff ff 00 00       	and    eax,0xffff
c000ccc1:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccc4:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000ccc9:	01 d0                	add    eax,edx
c000cccb:	a3 64 2d 02 c0       	mov    ds:0xc0022d64,eax
c000ccd0:	eb 71                	jmp    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccd2:	c7 05 64 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d64,0x0
c000ccdc:	eb 65                	jmp    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccde:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cce3:	85 c0                	test   eax,eax
c000cce5:	74 1a                	je     c000cd01 <sendKeyboardToken(KeyboardToken)+0x330>
c000cce7:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000ccec:	25 ff 00 00 00       	and    eax,0xff
c000ccf1:	83 ec 0c             	sub    esp,0xc
c000ccf4:	50                   	push   eax
c000ccf5:	e8 14 fc ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000ccfa:	83 c4 10             	add    esp,0x10
c000ccfd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd01:	c7 05 64 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d64,0x0
c000cd0b:	eb 36                	jmp    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd10:	66 3d 01 01          	cmp    ax,0x101
c000cd14:	75 2d                	jne    c000cd43 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd16:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cd1b:	85 c0                	test   eax,eax
c000cd1d:	74 1a                	je     c000cd39 <sendKeyboardToken(KeyboardToken)+0x368>
c000cd1f:	a1 64 2d 02 c0       	mov    eax,ds:0xc0022d64
c000cd24:	25 ff 00 00 00       	and    eax,0xff
c000cd29:	83 ec 0c             	sub    esp,0xc
c000cd2c:	50                   	push   eax
c000cd2d:	e8 dc fb ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd39:	c7 05 64 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d64,0x0
c000cd43:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd46:	83 f0 01             	xor    eax,0x1
c000cd49:	84 c0                	test   al,al
c000cd4b:	74 4e                	je     c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd4d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd50:	83 f0 01             	xor    eax,0x1
c000cd53:	84 c0                	test   al,al
c000cd55:	74 44                	je     c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd57:	a0 60 2a 02 c0       	mov    al,ds:0xc0022a60
c000cd5c:	83 f0 01             	xor    eax,0x1
c000cd5f:	84 c0                	test   al,al
c000cd61:	74 38                	je     c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd66:	66 83 f8 1f          	cmp    ax,0x1f
c000cd6a:	76 09                	jbe    c000cd75 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6f:	66 83 f8 7e          	cmp    ax,0x7e
c000cd73:	76 12                	jbe    c000cd87 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd78:	66 83 f8 0a          	cmp    ax,0xa
c000cd7c:	74 09                	je     c000cd87 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd81:	66 83 f8 08          	cmp    ax,0x8
c000cd85:	75 14                	jne    c000cd9b <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8a:	25 ff 00 00 00       	and    eax,0xff
c000cd8f:	83 ec 0c             	sub    esp,0xc
c000cd92:	50                   	push   eax
c000cd93:	e8 76 fb ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000cd98:	83 c4 10             	add    esp,0x10
c000cd9b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd9e:	83 f0 01             	xor    eax,0x1
c000cda1:	84 c0                	test   al,al
c000cda3:	74 51                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cda5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cda8:	83 f0 01             	xor    eax,0x1
c000cdab:	84 c0                	test   al,al
c000cdad:	74 47                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdaf:	a0 60 2a 02 c0       	mov    al,ds:0xc0022a60
c000cdb4:	84 c0                	test   al,al
c000cdb6:	74 3e                	je     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdbb:	66 83 f8 3f          	cmp    ax,0x3f
c000cdbf:	76 35                	jbe    c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc4:	66 83 f8 7f          	cmp    ax,0x7f
c000cdc8:	77 2c                	ja     c000cdf6 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdcd:	88 c2                	mov    dl,al
c000cdcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdd2:	66 83 f8 5f          	cmp    ax,0x5f
c000cdd6:	76 04                	jbe    c000cddc <sendKeyboardToken(KeyboardToken)+0x40b>
c000cdd8:	b0 20                	mov    al,0x20
c000cdda:	eb 02                	jmp    c000cdde <sendKeyboardToken(KeyboardToken)+0x40d>
c000cddc:	b0 00                	mov    al,0x0
c000cdde:	29 c2                	sub    edx,eax
c000cde0:	88 d0                	mov    al,dl
c000cde2:	83 e8 40             	sub    eax,0x40
c000cde5:	25 ff 00 00 00       	and    eax,0xff
c000cdea:	83 ec 0c             	sub    esp,0xc
c000cded:	50                   	push   eax
c000cdee:	e8 1b fb ff ff       	call   c000c90e <sendKeyToTerminal(unsigned char)>
c000cdf3:	83 c4 10             	add    esp,0x10
c000cdf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf9:	66 3d 00 03          	cmp    ax,0x300
c000cdfd:	75 0f                	jne    c000ce0e <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce02:	83 f0 01             	xor    eax,0x1
c000ce05:	84 c0                	test   al,al
c000ce07:	74 05                	je     c000ce0e <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce09:	e8 21 bb ff ff       	call   c000892f <doTerminalCycle()>
c000ce0e:	90                   	nop
c000ce0f:	c9                   	leave  
c000ce10:	c3                   	ret    

c000ce11 <clearInternalKeybuffer(VgaText*)>:
c000ce11:	55                   	push   ebp
c000ce12:	89 e5                	mov    ebp,esp
c000ce14:	83 ec 08             	sub    esp,0x8
c000ce17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce1a:	05 b2 00 00 00       	add    eax,0xb2
c000ce1f:	83 ec 0c             	sub    esp,0xc
c000ce22:	50                   	push   eax
c000ce23:	e8 38 37 ff ff       	call   c0000560 <strlen>
c000ce28:	83 c4 10             	add    esp,0x10
c000ce2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce2e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce34:	83 ec 04             	sub    esp,0x4
c000ce37:	50                   	push   eax
c000ce38:	6a 00                	push   0x0
c000ce3a:	52                   	push   edx
c000ce3b:	e8 b0 36 ff ff       	call   c00004f0 <memset>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	90                   	nop
c000ce44:	c9                   	leave  
c000ce45:	c3                   	ret    

c000ce46 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce46:	55                   	push   ebp
c000ce47:	89 e5                	mov    ebp,esp
c000ce49:	83 ec 18             	sub    esp,0x18
c000ce4c:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c000ce51:	85 c0                	test   eax,eax
c000ce53:	74 2a                	je     c000ce7f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce55:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce5b:	8b 0d 48 29 02 c0    	mov    ecx,DWORD PTR ds:0xc0022948
c000ce61:	83 ec 04             	sub    esp,0x4
c000ce64:	68 60 29 02 c0       	push   0xc0022960
c000ce69:	83 ec 08             	sub    esp,0x8
c000ce6c:	89 e2                	mov    edx,esp
c000ce6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce71:	89 02                	mov    DWORD PTR [edx],eax
c000ce73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce7a:	ff d1                	call   ecx
c000ce7c:	83 c4 10             	add    esp,0x10
c000ce7f:	fb                   	sti    
c000ce80:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce87:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce8b:	0f 84 a1 00 00 00    	je     c000cf32 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce94:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce9a:	84 c0                	test   al,al
c000ce9c:	75 28                	jne    c000cec6 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce9e:	fa                   	cli    
c000ce9f:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000cea4:	40                   	inc    eax
c000cea5:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000ceaa:	e8 e1 6b 00 00       	call   c0013a90 <schedule()>
c000ceaf:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000ceb4:	48                   	dec    eax
c000ceb5:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000ceba:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000cebf:	85 c0                	test   eax,eax
c000cec1:	75 ce                	jne    c000ce91 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec3:	fb                   	sti    
c000cec4:	eb cb                	jmp    c000ce91 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cec9:	8d 50 01             	lea    edx,[eax+0x1]
c000cecc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cecf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ced2:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ced8:	88 10                	mov    BYTE PTR [eax],dl
c000ceda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedd:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cee3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee9:	05 b2 00 00 00       	add    eax,0xb2
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	50                   	push   eax
c000cef2:	e8 69 36 ff ff       	call   c0000560 <strlen>
c000cef7:	83 c4 10             	add    esp,0x10
c000cefa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cefd:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf03:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf06:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf09:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf0f:	83 ec 04             	sub    esp,0x4
c000cf12:	50                   	push   eax
c000cf13:	51                   	push   ecx
c000cf14:	52                   	push   edx
c000cf15:	e8 e6 34 ff ff       	call   c0000400 <memmove>
c000cf1a:	83 c4 10             	add    esp,0x10
c000cf1d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf23:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf27:	0f 85 5a ff ff ff    	jne    c000ce87 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf30:	eb 03                	jmp    c000cf35 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf35:	c9                   	leave  
c000cf36:	c3                   	ret    
c000cf37:	90                   	nop

c000cf38 <Keyboard::Keyboard(char const*)>:
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf46:	50                   	push   eax
c000cf47:	e8 78 f2 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c000cf54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf58:	89 10                	mov    DWORD PTR [eax],edx
c000cf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf68:	c6 05 44 29 02 c0 01 	mov    BYTE PTR ds:0xc0022944,0x1
c000cf6f:	90                   	nop
c000cf70:	83 c4 0c             	add    esp,0xc
c000cf73:	c3                   	ret    

c000cf74 <Keyboard::~Keyboard()>:
c000cf74:	83 ec 0c             	sub    esp,0xc
c000cf77:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c000cf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf80:	89 10                	mov    DWORD PTR [eax],edx
c000cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf86:	83 ec 0c             	sub    esp,0xc
c000cf89:	50                   	push   eax
c000cf8a:	e8 9f ef ff ff       	call   c000bf2e <Device::~Device()>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	90                   	nop
c000cf93:	83 c4 0c             	add    esp,0xc
c000cf96:	c3                   	ret    
c000cf97:	90                   	nop

c000cf98 <Keyboard::~Keyboard()>:
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	83 ec 0c             	sub    esp,0xc
c000cf9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa2:	e8 cd ff ff ff       	call   c000cf74 <Keyboard::~Keyboard()>
c000cfa7:	83 c4 10             	add    esp,0x10
c000cfaa:	83 ec 08             	sub    esp,0x8
c000cfad:	68 5c 01 00 00       	push   0x15c
c000cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb6:	e8 3b db ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	83 c4 0c             	add    esp,0xc
c000cfc1:	c3                   	ret    

c000cfc2 <LogicalDisk::close(int, int, void*)>:
c000cfc2:	83 c8 ff             	or     eax,0xffffffff
c000cfc5:	c3                   	ret    

c000cfc6 <LogicalDisk::~LogicalDisk()>:
c000cfc6:	83 ec 0c             	sub    esp,0xc
c000cfc9:	ba 94 e0 01 c0       	mov    edx,0xc001e094
c000cfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd2:	89 10                	mov    DWORD PTR [eax],edx
c000cfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd8:	83 ec 0c             	sub    esp,0xc
c000cfdb:	50                   	push   eax
c000cfdc:	e8 4d ef ff ff       	call   c000bf2e <Device::~Device()>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	90                   	nop
c000cfe5:	83 c4 0c             	add    esp,0xc
c000cfe8:	c3                   	ret    
c000cfe9:	90                   	nop

c000cfea <LogicalDisk::~LogicalDisk()>:
c000cfea:	83 ec 0c             	sub    esp,0xc
c000cfed:	83 ec 0c             	sub    esp,0xc
c000cff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff4:	e8 cd ff ff ff       	call   c000cfc6 <LogicalDisk::~LogicalDisk()>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	83 ec 08             	sub    esp,0x8
c000cfff:	68 74 01 00 00       	push   0x174
c000d004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d008:	e8 e9 da ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	83 c4 0c             	add    esp,0xc
c000d013:	c3                   	ret    

c000d014 <LogicalDisk::open(int, int, void*)>:
c000d014:	83 ec 18             	sub    esp,0x18
c000d017:	68 48 e0 01 c0       	push   0xc001e048
c000d01c:	e8 1a 37 00 00       	call   c001073b <Krnl::panic(char const*)>
c000d021:	83 c8 ff             	or     eax,0xffffffff
c000d024:	83 c4 1c             	add    esp,0x1c
c000d027:	c3                   	ret    

c000d028 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d028:	53                   	push   ebx
c000d029:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d02d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d031:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d035:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d03b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d041:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d047:	77 10                	ja     c000d059 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d049:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d04f:	89 d3                	mov    ebx,edx
c000d051:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d057:	72 05                	jb     c000d05e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d059:	83 c8 ff             	or     eax,0xffffffff
c000d05c:	89 c2                	mov    edx,eax
c000d05e:	5b                   	pop    ebx
c000d05f:	c3                   	ret    

c000d060 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d060:	56                   	push   esi
c000d061:	83 c8 ff             	or     eax,0xffffffff
c000d064:	53                   	push   ebx
c000d065:	89 c2                	mov    edx,eax
c000d067:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d06b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d06f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d073:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d079:	77 27                	ja     c000d0a2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d07b:	89 d8                	mov    eax,ebx
c000d07d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d083:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d089:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d08e:	89 c2                	mov    edx,eax
c000d090:	73 10                	jae    c000d0a2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d092:	89 c8                	mov    eax,ecx
c000d094:	89 da                	mov    edx,ebx
c000d096:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d09c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d0a2:	5b                   	pop    ebx
c000d0a3:	5e                   	pop    esi
c000d0a4:	c3                   	ret    
c000d0a5:	90                   	nop

c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0a6:	83 ec 1c             	sub    esp,0x1c
c000d0a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0cc:	83 ec 08             	sub    esp,0x8
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	50                   	push   eax
c000d0d4:	e8 eb f0 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d0d9:	83 c4 10             	add    esp,0x10
c000d0dc:	ba 94 e0 01 c0       	mov    edx,0xc001e094
c000d0e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e5:	89 10                	mov    DWORD PTR [eax],edx
c000d0e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0eb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d101:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d10b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d113:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d117:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d11d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d123:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d127:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d12a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d134:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d13e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d142:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d14c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d156:	90                   	nop
c000d157:	83 c4 1c             	add    esp,0x1c
c000d15a:	c3                   	ret    
c000d15b:	90                   	nop

c000d15c <LogicalDisk::assignDriveLetter()>:
c000d15c:	55                   	push   ebp
c000d15d:	57                   	push   edi
c000d15e:	56                   	push   esi
c000d15f:	53                   	push   ebx
c000d160:	83 ec 14             	sub    esp,0x14
c000d163:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d167:	8b 3d 80 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d80
c000d16d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d173:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d177:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d17d:	8b 3d 84 2d 02 c0    	mov    edi,DWORD PTR ds:0xc0022d84
c000d183:	3c 01                	cmp    al,0x1
c000d185:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d189:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d18d:	19 c0                	sbb    eax,eax
c000d18f:	83 e0 02             	and    eax,0x2
c000d192:	83 c0 41             	add    eax,0x41
c000d195:	0f be e8             	movsx  ebp,al
c000d198:	3c 43                	cmp    al,0x43
c000d19a:	75 10                	jne    c000d1ac <LogicalDisk::assignDriveLetter()+0x50>
c000d19c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d1a3:	75 5d                	jne    c000d202 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1aa:	75 56                	jne    c000d202 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1ac:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1af:	ba 01 00 00 00       	mov    edx,0x1
c000d1b4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1b8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1bc:	d3 e2                	shl    edx,cl
c000d1be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1c2:	89 d7                	mov    edi,edx
c000d1c4:	89 d6                	mov    esi,edx
c000d1c6:	c1 ff 1f             	sar    edi,0x1f
c000d1c9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1cd:	21 f9                	and    ecx,edi
c000d1cf:	09 d1                	or     ecx,edx
c000d1d1:	75 2f                	jne    c000d202 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1d3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1db:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1e1:	09 f2                	or     edx,esi
c000d1e3:	89 15 80 2d 02 c0    	mov    DWORD PTR ds:0xc0022d80,edx
c000d1e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1ed:	09 fa                	or     edx,edi
c000d1ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1f3:	89 15 84 2d 02 c0    	mov    DWORD PTR ds:0xc0022d84,edx
c000d1f9:	89 1c bd a0 2d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd260],ebx
c000d200:	eb 08                	jmp    c000d20a <LogicalDisk::assignDriveLetter()+0xae>
c000d202:	45                   	inc    ebp
c000d203:	40                   	inc    eax
c000d204:	3c 5b                	cmp    al,0x5b
c000d206:	75 90                	jne    c000d198 <LogicalDisk::assignDriveLetter()+0x3c>
c000d208:	31 c0                	xor    eax,eax
c000d20a:	83 c4 14             	add    esp,0x14
c000d20d:	5b                   	pop    ebx
c000d20e:	5e                   	pop    esi
c000d20f:	5f                   	pop    edi
c000d210:	5d                   	pop    ebp
c000d211:	c3                   	ret    

c000d212 <LogicalDisk::mount()>:
c000d212:	56                   	push   esi
c000d213:	53                   	push   ebx
c000d214:	53                   	push   ebx
c000d215:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d219:	8b 1d 34 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020934
c000d21f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d229:	85 db                	test   ebx,ebx
c000d22b:	74 27                	je     c000d254 <LogicalDisk::mount()+0x42>
c000d22d:	51                   	push   ecx
c000d22e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d235:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d237:	83 e8 41             	sub    eax,0x41
c000d23a:	50                   	push   eax
c000d23b:	56                   	push   esi
c000d23c:	53                   	push   ebx
c000d23d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	84 c0                	test   al,al
c000d245:	74 08                	je     c000d24f <LogicalDisk::mount()+0x3d>
c000d247:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d24d:	eb 07                	jmp    c000d256 <LogicalDisk::mount()+0x44>
c000d24f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d252:	eb d5                	jmp    c000d229 <LogicalDisk::mount()+0x17>
c000d254:	31 c0                	xor    eax,eax
c000d256:	5a                   	pop    edx
c000d257:	5b                   	pop    ebx
c000d258:	5e                   	pop    esi
c000d259:	c3                   	ret    

c000d25a <LogicalDisk::unmount()>:
c000d25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <LogicalDisk::eject()>:
c000d26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d274:	8b 10                	mov    edx,DWORD PTR [eax]
c000d276:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d27a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d27d:	90                   	nop

c000d27e <LogicalDisk::unassignDriveLetter()>:
c000d27e:	57                   	push   edi
c000d27f:	56                   	push   esi
c000d280:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d284:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d28b:	84 c9                	test   cl,cl
c000d28d:	75 0f                	jne    c000d29e <LogicalDisk::unassignDriveLetter()+0x20>
c000d28f:	c7 44 24 0c 6c e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e06c
c000d297:	5e                   	pop    esi
c000d298:	5f                   	pop    edi
c000d299:	e9 9d 34 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c000d29e:	83 e9 41             	sub    ecx,0x41
c000d2a1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2a8:	b8 01 00 00 00       	mov    eax,0x1
c000d2ad:	c7 04 8d a0 2d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd260],0x0
c000d2b8:	d3 e0                	shl    eax,cl
c000d2ba:	89 c7                	mov    edi,eax
c000d2bc:	f7 d0                	not    eax
c000d2be:	c1 ff 1f             	sar    edi,0x1f
c000d2c1:	21 05 80 2d 02 c0    	and    DWORD PTR ds:0xc0022d80,eax
c000d2c7:	89 fe                	mov    esi,edi
c000d2c9:	f7 d6                	not    esi
c000d2cb:	21 35 84 2d 02 c0    	and    DWORD PTR ds:0xc0022d84,esi
c000d2d1:	5e                   	pop    esi
c000d2d2:	5f                   	pop    edi
c000d2d3:	c3                   	ret    

c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2d4:	57                   	push   edi
c000d2d5:	56                   	push   esi
c000d2d6:	53                   	push   ebx
c000d2d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2ed:	77 41                	ja     c000d330 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2ef:	99                   	cdq    
c000d2f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2f6:	01 c8                	add    eax,ecx
c000d2f8:	11 da                	adc    edx,ebx
c000d2fa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d300:	19 d7                	sbb    edi,edx
c000d302:	72 33                	jb     c000d337 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d304:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d30a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d310:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d314:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d318:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d31e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d324:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d328:	5b                   	pop    ebx
c000d329:	5e                   	pop    esi
c000d32a:	5f                   	pop    edi
c000d32b:	e9 32 0a 00 00       	jmp    c000dd62 <VCache::read(unsigned long long, int, void*)>
c000d330:	b8 05 00 00 00       	mov    eax,0x5
c000d335:	eb 05                	jmp    c000d33c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d337:	b8 07 00 00 00       	mov    eax,0x7
c000d33c:	5b                   	pop    ebx
c000d33d:	5e                   	pop    esi
c000d33e:	5f                   	pop    edi
c000d33f:	c3                   	ret    

c000d340 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d340:	57                   	push   edi
c000d341:	56                   	push   esi
c000d342:	53                   	push   ebx
c000d343:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d347:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d34b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d353:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d359:	77 41                	ja     c000d39c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d35b:	99                   	cdq    
c000d35c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d362:	01 c8                	add    eax,ecx
c000d364:	11 da                	adc    edx,ebx
c000d366:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d36c:	19 d7                	sbb    edi,edx
c000d36e:	72 33                	jb     c000d3a3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d370:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d376:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d37c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d380:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d384:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d38a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d390:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d394:	5b                   	pop    ebx
c000d395:	5e                   	pop    esi
c000d396:	5f                   	pop    edi
c000d397:	e9 cc 08 00 00       	jmp    c000dc68 <VCache::write(unsigned long long, int, void*)>
c000d39c:	b8 05 00 00 00       	mov    eax,0x5
c000d3a1:	eb 05                	jmp    c000d3a8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d3a3:	b8 07 00 00 00       	mov    eax,0x7
c000d3a8:	5b                   	pop    ebx
c000d3a9:	5e                   	pop    esi
c000d3aa:	5f                   	pop    edi
c000d3ab:	c3                   	ret    

c000d3ac <Mouse::Mouse(char const*)>:
c000d3ac:	83 ec 0c             	sub    esp,0xc
c000d3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b3:	83 ec 08             	sub    esp,0x8
c000d3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ba:	50                   	push   eax
c000d3bb:	e8 04 ee ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d3c0:	83 c4 10             	add    esp,0x10
c000d3c3:	ba c0 e0 01 c0       	mov    edx,0xc001e0c0
c000d3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3cc:	89 10                	mov    DWORD PTR [eax],edx
c000d3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3dc:	90                   	nop
c000d3dd:	83 c4 0c             	add    esp,0xc
c000d3e0:	c3                   	ret    
c000d3e1:	90                   	nop
c000d3e2:	66 90                	xchg   ax,ax

c000d3e4 <Mouse::~Mouse()>:
c000d3e4:	83 ec 0c             	sub    esp,0xc
c000d3e7:	ba c0 e0 01 c0       	mov    edx,0xc001e0c0
c000d3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f0:	89 10                	mov    DWORD PTR [eax],edx
c000d3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f6:	83 ec 0c             	sub    esp,0xc
c000d3f9:	50                   	push   eax
c000d3fa:	e8 2f eb ff ff       	call   c000bf2e <Device::~Device()>
c000d3ff:	83 c4 10             	add    esp,0x10
c000d402:	90                   	nop
c000d403:	83 c4 0c             	add    esp,0xc
c000d406:	c3                   	ret    
c000d407:	90                   	nop

c000d408 <Mouse::~Mouse()>:
c000d408:	83 ec 0c             	sub    esp,0xc
c000d40b:	83 ec 0c             	sub    esp,0xc
c000d40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d412:	e8 cd ff ff ff       	call   c000d3e4 <Mouse::~Mouse()>
c000d417:	83 c4 10             	add    esp,0x10
c000d41a:	83 ec 08             	sub    esp,0x8
c000d41d:	68 58 01 00 00       	push   0x158
c000d422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d426:	e8 cb d6 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d42b:	83 c4 10             	add    esp,0x10
c000d42e:	83 c4 0c             	add    esp,0xc
c000d431:	c3                   	ret    

c000d432 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d432:	55                   	push   ebp
c000d433:	57                   	push   edi
c000d434:	56                   	push   esi
c000d435:	53                   	push   ebx
c000d436:	81 ec 28 01 00 00    	sub    esp,0x128
c000d43c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d443:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d44a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d451:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d458:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d45c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d460:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d467:	e8 54 ee ff ff       	call   c000c2c0 <Device::getName()>
c000d46c:	5a                   	pop    edx
c000d46d:	59                   	pop    ecx
c000d46e:	50                   	push   eax
c000d46f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d473:	55                   	push   ebp
c000d474:	e8 a7 31 ff ff       	call   c0000620 <strcpy>
c000d479:	5b                   	pop    ebx
c000d47a:	58                   	pop    eax
c000d47b:	68 e4 e0 01 c0       	push   0xc001e0e4
c000d480:	55                   	push   ebp
c000d481:	e8 5a 33 ff ff       	call   c00007e0 <strcat>
c000d486:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d48d:	e8 cb a9 ff ff       	call   c0007e5d <malloc>
c000d492:	83 c4 0c             	add    esp,0xc
c000d495:	89 c3                	mov    ebx,eax
c000d497:	57                   	push   edi
c000d498:	56                   	push   esi
c000d499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4a8:	55                   	push   ebp
c000d4a9:	50                   	push   eax
c000d4aa:	e8 f7 fb ff ff       	call   c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4af:	83 c4 14             	add    esp,0x14
c000d4b2:	53                   	push   ebx
c000d4b3:	e8 a4 fc ff ff       	call   c000d15c <LogicalDisk::assignDriveLetter()>
c000d4b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4bb:	e8 52 fd ff ff       	call   c000d212 <LogicalDisk::mount()>
c000d4c0:	58                   	pop    eax
c000d4c1:	5a                   	pop    edx
c000d4c2:	53                   	push   ebx
c000d4c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4ca:	e8 5d eb ff ff       	call   c000c02c <Device::addChild(Device*)>
c000d4cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4d5:	5b                   	pop    ebx
c000d4d6:	5e                   	pop    esi
c000d4d7:	5f                   	pop    edi
c000d4d8:	5d                   	pop    ebp
c000d4d9:	c3                   	ret    

c000d4da <createPartitionsForDisk(PhysicalDisk*)>:
c000d4da:	55                   	push   ebp
c000d4db:	57                   	push   edi
c000d4dc:	56                   	push   esi
c000d4dd:	53                   	push   ebx
c000d4de:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4e4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4f1:	3d 00 02 00 00       	cmp    eax,0x200
c000d4f6:	74 27                	je     c000d51f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4f8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4fe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d504:	83 ec 10             	sub    esp,0x10
c000d507:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d50b:	99                   	cdq    
c000d50c:	c1 e6 0a             	shl    esi,0xa
c000d50f:	52                   	push   edx
c000d510:	89 fd                	mov    ebp,edi
c000d512:	50                   	push   eax
c000d513:	55                   	push   ebp
c000d514:	56                   	push   esi
c000d515:	e8 26 eb 00 00       	call   c001c040 <__udivdi3>
c000d51a:	e9 b1 00 00 00       	jmp    c000d5d0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d51f:	83 ec 0c             	sub    esp,0xc
c000d522:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d524:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d528:	56                   	push   esi
c000d529:	6a 01                	push   0x1
c000d52b:	6a 00                	push   0x0
c000d52d:	6a 00                	push   0x0
c000d52f:	53                   	push   ebx
c000d530:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d533:	83 c4 20             	add    esp,0x20
c000d536:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d53e:	75 0a                	jne    c000d54a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d540:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d548:	74 2c                	je     c000d576 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d54a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d550:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d556:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d55c:	83 ec 10             	sub    esp,0x10
c000d55f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d563:	89 f7                	mov    edi,esi
c000d565:	c1 e0 0a             	shl    eax,0xa
c000d568:	c1 ff 1f             	sar    edi,0x1f
c000d56b:	57                   	push   edi
c000d56c:	56                   	push   esi
c000d56d:	52                   	push   edx
c000d56e:	50                   	push   eax
c000d56f:	e8 cc ea 00 00       	call   c001c040 <__udivdi3>
c000d574:	eb 5a                	jmp    c000d5d0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d576:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d57d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d584:	83 e1 7f             	and    ecx,0x7f
c000d587:	83 e0 7f             	and    eax,0x7f
c000d58a:	01 c1                	add    ecx,eax
c000d58c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d593:	83 e0 7f             	and    eax,0x7f
c000d596:	01 c1                	add    ecx,eax
c000d598:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d59f:	83 e0 7f             	and    eax,0x7f
c000d5a2:	00 c1                	add    cl,al
c000d5a4:	74 41                	je     c000d5e7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5a6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5ac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5b8:	83 ec 10             	sub    esp,0x10
c000d5bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5bf:	89 f7                	mov    edi,esi
c000d5c1:	c1 e0 0a             	shl    eax,0xa
c000d5c4:	c1 ff 1f             	sar    edi,0x1f
c000d5c7:	57                   	push   edi
c000d5c8:	56                   	push   esi
c000d5c9:	52                   	push   edx
c000d5ca:	50                   	push   eax
c000d5cb:	e8 70 ea 00 00       	call   c001c040 <__udivdi3>
c000d5d0:	83 c4 14             	add    esp,0x14
c000d5d3:	52                   	push   edx
c000d5d4:	50                   	push   eax
c000d5d5:	6a 00                	push   0x0
c000d5d7:	6a 00                	push   0x0
c000d5d9:	53                   	push   ebx
c000d5da:	e8 53 fe ff ff       	call   c000d432 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5df:	83 c4 20             	add    esp,0x20
c000d5e2:	e9 79 01 00 00       	jmp    c000d760 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5e7:	89 f0                	mov    eax,esi
c000d5e9:	31 f6                	xor    esi,esi
c000d5eb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5f2:	75 02                	jne    c000d5f6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5f4:	89 f1                	mov    ecx,esi
c000d5f6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5fd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d604:	c1 e2 08             	shl    edx,0x8
c000d607:	c1 e7 10             	shl    edi,0x10
c000d60a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d612:	09 fa                	or     edx,edi
c000d614:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d61c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d623:	83 c0 10             	add    eax,0x10
c000d626:	09 fa                	or     edx,edi
c000d628:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d62f:	c1 e7 18             	shl    edi,0x18
c000d632:	09 fa                	or     edx,edi
c000d634:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d63b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d63f:	c1 e7 10             	shl    edi,0x10
c000d642:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d649:	c1 e2 08             	shl    edx,0x8
c000d64c:	09 fa                	or     edx,edi
c000d64e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d655:	09 fa                	or     edx,edi
c000d657:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d65e:	c1 e7 18             	shl    edi,0x18
c000d661:	09 fa                	or     edx,edi
c000d663:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d667:	46                   	inc    esi
c000d668:	83 fe 04             	cmp    esi,0x4
c000d66b:	0f 85 7a ff ff ff    	jne    c000d5eb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d675:	83 f0 01             	xor    eax,0x1
c000d678:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d67c:	75 57                	jne    c000d6d5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d67e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d682:	83 f0 01             	xor    eax,0x1
c000d685:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d689:	75 4a                	jne    c000d6d5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d68b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d68f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d697:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d69f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6a5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6ab:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6b5:	89 f7                	mov    edi,esi
c000d6b7:	c1 e0 0a             	shl    eax,0xa
c000d6ba:	c1 ff 1f             	sar    edi,0x1f
c000d6bd:	57                   	push   edi
c000d6be:	56                   	push   esi
c000d6bf:	52                   	push   edx
c000d6c0:	50                   	push   eax
c000d6c1:	e8 7a e9 00 00       	call   c001c040 <__udivdi3>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6d5:	84 c9                	test   cl,cl
c000d6d7:	74 53                	je     c000d72c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6d9:	0f b6 c9             	movzx  ecx,cl
c000d6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6f8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d700:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d708:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d70c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d710:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d714:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d718:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d71c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d720:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d724:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d728:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d72c:	31 ed                	xor    ebp,ebp
c000d72e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d732:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d736:	89 f8                	mov    eax,edi
c000d738:	09 f0                	or     eax,esi
c000d73a:	74 1e                	je     c000d75a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d73c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d740:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d744:	89 d1                	mov    ecx,edx
c000d746:	09 c1                	or     ecx,eax
c000d748:	74 10                	je     c000d75a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d74a:	83 ec 0c             	sub    esp,0xc
c000d74d:	57                   	push   edi
c000d74e:	56                   	push   esi
c000d74f:	52                   	push   edx
c000d750:	50                   	push   eax
c000d751:	53                   	push   ebx
c000d752:	e8 db fc ff ff       	call   c000d432 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d757:	83 c4 20             	add    esp,0x20
c000d75a:	45                   	inc    ebp
c000d75b:	83 fd 04             	cmp    ebp,0x4
c000d75e:	75 ce                	jne    c000d72e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d760:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d766:	5b                   	pop    ebx
c000d767:	5e                   	pop    esi
c000d768:	5f                   	pop    edi
c000d769:	5d                   	pop    ebp
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <Serial::Serial(char const*)>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d773:	83 ec 08             	sub    esp,0x8
c000d776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77a:	50                   	push   eax
c000d77b:	e8 44 ea ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	ba f8 e0 01 c0       	mov    edx,0xc001e0f8
c000d788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78c:	89 10                	mov    DWORD PTR [eax],edx
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d79c:	90                   	nop
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	c3                   	ret    
c000d7a1:	90                   	nop
c000d7a2:	66 90                	xchg   ax,ax

c000d7a4 <Serial::~Serial()>:
c000d7a4:	83 ec 0c             	sub    esp,0xc
c000d7a7:	ba f8 e0 01 c0       	mov    edx,0xc001e0f8
c000d7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b0:	89 10                	mov    DWORD PTR [eax],edx
c000d7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b6:	83 ec 0c             	sub    esp,0xc
c000d7b9:	50                   	push   eax
c000d7ba:	e8 6f e7 ff ff       	call   c000bf2e <Device::~Device()>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	90                   	nop
c000d7c3:	83 c4 0c             	add    esp,0xc
c000d7c6:	c3                   	ret    
c000d7c7:	90                   	nop

c000d7c8 <Serial::~Serial()>:
c000d7c8:	83 ec 0c             	sub    esp,0xc
c000d7cb:	83 ec 0c             	sub    esp,0xc
c000d7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d2:	e8 cd ff ff ff       	call   c000d7a4 <Serial::~Serial()>
c000d7d7:	83 c4 10             	add    esp,0x10
c000d7da:	83 ec 08             	sub    esp,0x8
c000d7dd:	68 58 01 00 00       	push   0x158
c000d7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e6:	e8 0b d3 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d7eb:	83 c4 10             	add    esp,0x10
c000d7ee:	83 c4 0c             	add    esp,0xc
c000d7f1:	c3                   	ret    
c000d7f2:	66 90                	xchg   ax,ax

c000d7f4 <Timer::Timer(char const*)>:
c000d7f4:	83 ec 0c             	sub    esp,0xc
c000d7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fb:	83 ec 08             	sub    esp,0x8
c000d7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d802:	50                   	push   eax
c000d803:	e8 bc e9 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	ba 3c e1 01 c0       	mov    edx,0xc001e13c
c000d810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d814:	89 10                	mov    DWORD PTR [eax],edx
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d824:	90                   	nop
c000d825:	83 c4 0c             	add    esp,0xc
c000d828:	c3                   	ret    
c000d829:	90                   	nop
c000d82a:	66 90                	xchg   ax,ax

c000d82c <Timer::~Timer()>:
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	ba 3c e1 01 c0       	mov    edx,0xc001e13c
c000d834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d838:	89 10                	mov    DWORD PTR [eax],edx
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	83 ec 0c             	sub    esp,0xc
c000d841:	50                   	push   eax
c000d842:	e8 e7 e6 ff ff       	call   c000bf2e <Device::~Device()>
c000d847:	83 c4 10             	add    esp,0x10
c000d84a:	90                   	nop
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	c3                   	ret    
c000d84f:	90                   	nop

c000d850 <Timer::~Timer()>:
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	83 ec 0c             	sub    esp,0xc
c000d856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85a:	e8 cd ff ff ff       	call   c000d82c <Timer::~Timer()>
c000d85f:	83 c4 10             	add    esp,0x10
c000d862:	83 ec 08             	sub    esp,0x8
c000d865:	68 5c 01 00 00       	push   0x15c
c000d86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86e:	e8 83 d2 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000d873:	83 c4 10             	add    esp,0x10
c000d876:	83 c4 0c             	add    esp,0xc
c000d879:	c3                   	ret    

c000d87a <Timer::read()>:
c000d87a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d87e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d884:	c3                   	ret    

c000d885 <setupTimer(int)>:
c000d885:	53                   	push   ebx
c000d886:	83 ec 14             	sub    esp,0x14
c000d889:	68 5c 01 00 00       	push   0x15c
c000d88e:	e8 ca a5 ff ff       	call   c0007e5d <malloc>
c000d893:	89 04 24             	mov    DWORD PTR [esp],eax
c000d896:	89 c3                	mov    ebx,eax
c000d898:	e8 1b e1 00 00       	call   c001b9b8 <PIT::PIT()>
c000d89d:	58                   	pop    eax
c000d89e:	5a                   	pop    edx
c000d89f:	53                   	push   ebx
c000d8a0:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c000d8a6:	e8 81 e7 ff ff       	call   c000c02c <Device::addChild(Device*)>
c000d8ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8ad:	6a 00                	push   0x0
c000d8af:	6a 00                	push   0x0
c000d8b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8b5:	53                   	push   ebx
c000d8b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8b9:	89 d8                	mov    eax,ebx
c000d8bb:	83 c4 28             	add    esp,0x28
c000d8be:	5b                   	pop    ebx
c000d8bf:	c3                   	ret    

c000d8c0 <timerHandler(unsigned int)>:
c000d8c0:	56                   	push   esi
c000d8c1:	53                   	push   ebx
c000d8c2:	51                   	push   ecx
c000d8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c7:	01 05 0c 2e 02 c0    	add    DWORD PTR ds:0xc0022e0c,eax
c000d8cd:	80 3d 3d 08 02 c0 00 	cmp    BYTE PTR ds:0xc002083d,0x0
c000d8d4:	0f 84 4a 01 00 00    	je     c000da24 <timerHandler(unsigned int)+0x164>
c000d8da:	fa                   	cli    
c000d8db:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c000d8e1:	83 ec 0c             	sub    esp,0xc
c000d8e4:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c000d8ea:	68 18 3d 02 c0       	push   0xc0023d18
c000d8ef:	e8 1c ed 00 00       	call   c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8f4:	83 c4 10             	add    esp,0x10
c000d8f7:	84 c0                	test   al,al
c000d8f9:	0f 85 a1 00 00 00    	jne    c000d9a0 <timerHandler(unsigned int)+0xe0>
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	68 18 3d 02 c0       	push   0xc0023d18
c000d907:	e8 20 ed 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d90c:	83 c4 10             	add    esp,0x10
c000d90f:	89 c6                	mov    esi,eax
c000d911:	8d 76 00             	lea    esi,[esi+0x0]
c000d914:	83 ec 0c             	sub    esp,0xc
c000d917:	68 18 3d 02 c0       	push   0xc0023d18
c000d91c:	e8 0b ed 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d921:	c7 04 24 18 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d18
c000d928:	89 c3                	mov    ebx,eax
c000d92a:	e8 05 ed 00 00       	call   c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d92f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d932:	83 c4 10             	add    esp,0x10
c000d935:	3b 05 0c 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022e0c
c000d93b:	77 23                	ja     c000d960 <timerHandler(unsigned int)+0xa0>
c000d93d:	83 ec 0c             	sub    esp,0xc
c000d940:	53                   	push   ebx
c000d941:	e8 0e 66 00 00       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	39 de                	cmp    esi,ebx
c000d94b:	75 27                	jne    c000d974 <timerHandler(unsigned int)+0xb4>
c000d94d:	83 ec 0c             	sub    esp,0xc
c000d950:	68 18 3d 02 c0       	push   0xc0023d18
c000d955:	e8 d2 ec 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d95a:	89 c6                	mov    esi,eax
c000d95c:	eb 12                	jmp    c000d970 <timerHandler(unsigned int)+0xb0>
c000d95e:	66 90                	xchg   ax,ax
c000d960:	52                   	push   edx
c000d961:	52                   	push   edx
c000d962:	53                   	push   ebx
c000d963:	68 18 3d 02 c0       	push   0xc0023d18
c000d968:	e8 7f ed 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d96d:	8d 76 00             	lea    esi,[esi+0x0]
c000d970:	83 c4 10             	add    esp,0x10
c000d973:	90                   	nop
c000d974:	83 ec 0c             	sub    esp,0xc
c000d977:	68 18 3d 02 c0       	push   0xc0023d18
c000d97c:	e8 8f ec 00 00       	call   c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d981:	83 c4 10             	add    esp,0x10
c000d984:	84 c0                	test   al,al
c000d986:	75 18                	jne    c000d9a0 <timerHandler(unsigned int)+0xe0>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	68 18 3d 02 c0       	push   0xc0023d18
c000d990:	e8 97 ec 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d995:	83 c4 10             	add    esp,0x10
c000d998:	39 f0                	cmp    eax,esi
c000d99a:	0f 85 74 ff ff ff    	jne    c000d914 <timerHandler(unsigned int)+0x54>
c000d9a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9a5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9a9:	74 41                	je     c000d9ec <timerHandler(unsigned int)+0x12c>
c000d9ab:	80 3d 3c 08 02 c0 00 	cmp    BYTE PTR ds:0xc002083c,0x0
c000d9b2:	74 38                	je     c000d9ec <timerHandler(unsigned int)+0x12c>
c000d9b4:	fa                   	cli    
c000d9b5:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c000d9bb:	a1 0c 2e 02 c0       	mov    eax,ds:0xc0022e0c
c000d9c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9c6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9cf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9d2:	72 08                	jb     c000d9dc <timerHandler(unsigned int)+0x11c>
c000d9d4:	e8 b7 60 00 00       	call   c0013a90 <schedule()>
c000d9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9dc:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000d9e1:	48                   	dec    eax
c000d9e2:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000d9e7:	75 03                	jne    c000d9ec <timerHandler(unsigned int)+0x12c>
c000d9e9:	fb                   	sti    
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c000d9f1:	48                   	dec    eax
c000d9f2:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c000d9f7:	75 1b                	jne    c000da14 <timerHandler(unsigned int)+0x154>
c000d9f9:	83 3d 00 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d00,0x0
c000da00:	74 12                	je     c000da14 <timerHandler(unsigned int)+0x154>
c000da02:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c000da0c:	e8 7f 60 00 00       	call   c0013a90 <schedule()>
c000da11:	8d 76 00             	lea    esi,[esi+0x0]
c000da14:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c000da19:	48                   	dec    eax
c000da1a:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c000da1f:	75 03                	jne    c000da24 <timerHandler(unsigned int)+0x164>
c000da21:	fb                   	sti    
c000da22:	66 90                	xchg   ax,ax
c000da24:	58                   	pop    eax
c000da25:	5b                   	pop    ebx
c000da26:	5e                   	pop    esi
c000da27:	c3                   	ret    

c000da28 <VCache::VCache(PhysicalDisk*)>:
c000da28:	53                   	push   ebx
c000da29:	83 ec 18             	sub    esp,0x18
c000da2c:	ba 6c e1 01 c0       	mov    edx,0xc001e16c
c000da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da35:	89 10                	mov    DWORD PTR [eax],edx
c000da37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da46:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da51:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da58:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da63:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da75:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da88:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da8f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000daa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daaa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dab9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dac1:	83 ec 0c             	sub    esp,0xc
c000dac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dac8:	e8 90 a3 ff ff       	call   c0007e5d <malloc>
c000dacd:	83 c4 10             	add    esp,0x10
c000dad0:	89 c3                	mov    ebx,eax
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	53                   	push   ebx
c000dad6:	e8 81 5d 00 00       	call   c001385c <Mutex::Mutex()>
c000dadb:	83 c4 10             	add    esp,0x10
c000dade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000daed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dafb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daff:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db09:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db10:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db20:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db23:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db38:	05 00 01 00 00       	add    eax,0x100
c000db3d:	c1 e0 04             	shl    eax,0x4
c000db40:	83 ec 0c             	sub    esp,0xc
c000db43:	50                   	push   eax
c000db44:	e8 14 a3 ff ff       	call   c0007e5d <malloc>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	89 c2                	mov    edx,eax
c000db4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db59:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db64:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db6c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db72:	c1 e0 06             	shl    eax,0x6
c000db75:	83 ec 0c             	sub    esp,0xc
c000db78:	50                   	push   eax
c000db79:	e8 df a2 ff ff       	call   c0007e5d <malloc>
c000db7e:	83 c4 10             	add    esp,0x10
c000db81:	89 c2                	mov    edx,eax
c000db83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db87:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db8a:	90                   	nop
c000db8b:	83 c4 18             	add    esp,0x18
c000db8e:	5b                   	pop    ebx
c000db8f:	c3                   	ret    

c000db90 <VCache::invalidateReadBuffer()>:
c000db90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db94:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db9a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db9e:	c3                   	ret    
c000db9f:	90                   	nop

c000dba0 <VCache::writeWriteBuffer()>:
c000dba0:	53                   	push   ebx
c000dba1:	83 ec 08             	sub    esp,0x8
c000dba4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dba8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbac:	74 1e                	je     c000dbcc <VCache::writeWriteBuffer()+0x2c>
c000dbae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbb1:	83 ec 0c             	sub    esp,0xc
c000dbb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbb6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbbc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbc2:	50                   	push   eax
c000dbc3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbc6:	83 c4 20             	add    esp,0x20
c000dbc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbcc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbd3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbda:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbde:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbe5:	83 c4 08             	add    esp,0x8
c000dbe8:	5b                   	pop    ebx
c000dbe9:	c3                   	ret    
c000dbea:	66 90                	xchg   ax,ax

c000dbec <VCache::~VCache()>:
c000dbec:	83 ec 0c             	sub    esp,0xc
c000dbef:	ba 6c e1 01 c0       	mov    edx,0xc001e16c
c000dbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf8:	89 10                	mov    DWORD PTR [eax],edx
c000dbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dc01:	84 c0                	test   al,al
c000dc03:	74 0f                	je     c000dc14 <VCache::~VCache()+0x28>
c000dc05:	83 ec 0c             	sub    esp,0xc
c000dc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0c:	e8 8f ff ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dc11:	83 c4 10             	add    esp,0x10
c000dc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc18:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc1b:	83 ec 0c             	sub    esp,0xc
c000dc1e:	50                   	push   eax
c000dc1f:	e8 49 a2 ff ff       	call   c0007e6d <free>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc2e:	83 ec 0c             	sub    esp,0xc
c000dc31:	50                   	push   eax
c000dc32:	e8 36 a2 ff ff       	call   c0007e6d <free>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	90                   	nop
c000dc3b:	83 c4 0c             	add    esp,0xc
c000dc3e:	c3                   	ret    
c000dc3f:	90                   	nop

c000dc40 <VCache::~VCache()>:
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	83 ec 0c             	sub    esp,0xc
c000dc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4a:	e8 9d ff ff ff       	call   c000dbec <VCache::~VCache()>
c000dc4f:	83 c4 10             	add    esp,0x10
c000dc52:	83 ec 08             	sub    esp,0x8
c000dc55:	6a 44                	push   0x44
c000dc57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc5b:	e8 96 ce ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000dc60:	83 c4 10             	add    esp,0x10
c000dc63:	83 c4 0c             	add    esp,0xc
c000dc66:	c3                   	ret    
c000dc67:	90                   	nop

c000dc68 <VCache::write(unsigned long long, int, void*)>:
c000dc68:	55                   	push   ebp
c000dc69:	31 c0                	xor    eax,eax
c000dc6b:	57                   	push   edi
c000dc6c:	56                   	push   esi
c000dc6d:	53                   	push   ebx
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dc75:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc79:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc80:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000dc84:	7d 1a                	jge    c000dca0 <VCache::write(unsigned long long, int, void*)+0x38>
c000dc86:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc89:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dc93:	0f af c8             	imul   ecx,eax
c000dc96:	01 ca                	add    edx,ecx
c000dc98:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dc9a:	40                   	inc    eax
c000dc9b:	eb e3                	jmp    c000dc80 <VCache::write(unsigned long long, int, void*)+0x18>
c000dc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000dca0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dca4:	74 0a                	je     c000dcb0 <VCache::write(unsigned long long, int, void*)+0x48>
c000dca6:	53                   	push   ebx
c000dca7:	e8 e4 fe ff ff       	call   c000db90 <VCache::invalidateReadBuffer()>
c000dcac:	58                   	pop    eax
c000dcad:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcb4:	74 5e                	je     c000dd14 <VCache::write(unsigned long long, int, void*)+0xac>
c000dcb6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dcb9:	89 e8                	mov    eax,ebp
c000dcbb:	99                   	cdq    
c000dcbc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dcbf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcc2:	89 c1                	mov    ecx,eax
c000dcc4:	89 d0                	mov    eax,edx
c000dcc6:	31 f1                	xor    ecx,esi
c000dcc8:	31 f8                	xor    eax,edi
c000dcca:	09 c1                	or     ecx,eax
c000dccc:	75 3a                	jne    c000dd08 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcce:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000dcd3:	75 33                	jne    c000dd08 <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcd8:	89 ef                	mov    edi,ebp
c000dcda:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dce0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dce4:	0f af f9             	imul   edi,ecx
c000dce7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcef:	40                   	inc    eax
c000dcf0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcf3:	83 f8 40             	cmp    eax,0x40
c000dcf6:	75 60                	jne    c000dd58 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	53                   	push   ebx
c000dcfc:	e8 9f fe ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dd01:	83 c4 10             	add    esp,0x10
c000dd04:	eb 52                	jmp    c000dd58 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd06:	66 90                	xchg   ax,ax
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	53                   	push   ebx
c000dd0c:	e8 8f fe ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dd11:	83 c4 10             	add    esp,0x10
c000dd14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd17:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000dd1c:	7f 22                	jg     c000dd40 <VCache::write(unsigned long long, int, void*)+0xd8>
c000dd1e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000dd21:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000dd24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dd28:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd2c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000dd2f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd32:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd38:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd3e:	eb 18                	jmp    c000dd58 <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd40:	83 ec 0c             	sub    esp,0xc
c000dd43:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd4d:	57                   	push   edi
c000dd4e:	56                   	push   esi
c000dd4f:	50                   	push   eax
c000dd50:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dd53:	83 c4 20             	add    esp,0x20
c000dd56:	66 90                	xchg   ax,ax
c000dd58:	83 c4 0c             	add    esp,0xc
c000dd5b:	31 c0                	xor    eax,eax
c000dd5d:	5b                   	pop    ebx
c000dd5e:	5e                   	pop    esi
c000dd5f:	5f                   	pop    edi
c000dd60:	5d                   	pop    ebp
c000dd61:	c3                   	ret    

c000dd62 <VCache::read(unsigned long long, int, void*)>:
c000dd62:	55                   	push   ebp
c000dd63:	31 c0                	xor    eax,eax
c000dd65:	57                   	push   edi
c000dd66:	56                   	push   esi
c000dd67:	53                   	push   ebx
c000dd68:	83 ec 1c             	sub    esp,0x1c
c000dd6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd6f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000dd73:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dd77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd7b:	90                   	nop
c000dd7c:	39 e8                	cmp    eax,ebp
c000dd7e:	7d 18                	jge    c000dd98 <VCache::read(unsigned long long, int, void*)+0x36>
c000dd80:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dd83:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dd89:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dd8d:	0f af c8             	imul   ecx,eax
c000dd90:	01 ca                	add    edx,ecx
c000dd92:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dd94:	40                   	inc    eax
c000dd95:	eb e5                	jmp    c000dd7c <VCache::read(unsigned long long, int, void*)+0x1a>
c000dd97:	90                   	nop
c000dd98:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd9c:	74 0e                	je     c000ddac <VCache::read(unsigned long long, int, void*)+0x4a>
c000dd9e:	83 ec 0c             	sub    esp,0xc
c000dda1:	53                   	push   ebx
c000dda2:	e8 f9 fd ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c000dda7:	83 c4 10             	add    esp,0x10
c000ddaa:	66 90                	xchg   ax,ax
c000ddac:	83 fd 01             	cmp    ebp,0x1
c000ddaf:	0f 85 87 00 00 00    	jne    c000de3c <VCache::read(unsigned long long, int, void*)+0xda>
c000ddb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddbc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ddc3:	75 77                	jne    c000de3c <VCache::read(unsigned long long, int, void*)+0xda>
c000ddc5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ddc8:	89 e9                	mov    ecx,ebp
c000ddca:	f7 d9                	neg    ecx
c000ddcc:	89 c8                	mov    eax,ecx
c000ddce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ddd2:	c1 f8 1f             	sar    eax,0x1f
c000ddd5:	21 f1                	and    ecx,esi
c000ddd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dddb:	89 c8                	mov    eax,ecx
c000dddd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dde1:	21 f9                	and    ecx,edi
c000dde3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dde7:	89 ca                	mov    edx,ecx
c000dde9:	74 0d                	je     c000ddf8 <VCache::read(unsigned long long, int, void*)+0x96>
c000ddeb:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ddee:	75 08                	jne    c000ddf8 <VCache::read(unsigned long long, int, void*)+0x96>
c000ddf0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ddf3:	74 27                	je     c000de1c <VCache::read(unsigned long long, int, void*)+0xba>
c000ddf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ddff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000de03:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000de06:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de09:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000de0b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000de0e:	55                   	push   ebp
c000de0f:	52                   	push   edx
c000de10:	50                   	push   eax
c000de11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000de15:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000de18:	83 c4 20             	add    esp,0x20
c000de1b:	90                   	nop
c000de1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de1f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de23:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000de29:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000de2c:	48                   	dec    eax
c000de2d:	21 c6                	and    esi,eax
c000de2f:	0f af f1             	imul   esi,ecx
c000de32:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000de35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de37:	eb 23                	jmp    c000de5c <VCache::read(unsigned long long, int, void*)+0xfa>
c000de39:	8d 76 00             	lea    esi,[esi+0x0]
c000de3c:	83 ec 0c             	sub    esp,0xc
c000de3f:	53                   	push   ebx
c000de40:	e8 4b fd ff ff       	call   c000db90 <VCache::invalidateReadBuffer()>
c000de45:	5a                   	pop    edx
c000de46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de49:	8b 10                	mov    edx,DWORD PTR [eax]
c000de4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de4f:	55                   	push   ebp
c000de50:	57                   	push   edi
c000de51:	56                   	push   esi
c000de52:	50                   	push   eax
c000de53:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000de56:	83 c4 20             	add    esp,0x20
c000de59:	8d 76 00             	lea    esi,[esi+0x0]
c000de5c:	83 c4 1c             	add    esp,0x1c
c000de5f:	31 c0                	xor    eax,eax
c000de61:	5b                   	pop    ebx
c000de62:	5e                   	pop    esi
c000de63:	5f                   	pop    edi
c000de64:	5d                   	pop    ebp
c000de65:	c3                   	ret    

c000de66 <Video::putrect(int, int, int, int, unsigned int)>:
c000de66:	55                   	push   ebp
c000de67:	57                   	push   edi
c000de68:	56                   	push   esi
c000de69:	53                   	push   ebx
c000de6a:	83 ec 1c             	sub    esp,0x1c
c000de6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de75:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de79:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de85:	01 df                	add    edi,ebx
c000de87:	39 fb                	cmp    ebx,edi
c000de89:	7d 1f                	jge    c000deaa <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de8f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de93:	7d 12                	jge    c000dea7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de95:	8b 16                	mov    edx,DWORD PTR [esi]
c000de97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de9b:	53                   	push   ebx
c000de9c:	55                   	push   ebp
c000de9d:	45                   	inc    ebp
c000de9e:	56                   	push   esi
c000de9f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dea2:	83 c4 10             	add    esp,0x10
c000dea5:	eb e8                	jmp    c000de8f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dea7:	43                   	inc    ebx
c000dea8:	eb dd                	jmp    c000de87 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000deaa:	83 c4 1c             	add    esp,0x1c
c000dead:	5b                   	pop    ebx
c000deae:	5e                   	pop    esi
c000deaf:	5f                   	pop    edi
c000deb0:	5d                   	pop    ebp
c000deb1:	c3                   	ret    

c000deb2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000deb2:	55                   	push   ebp
c000deb3:	57                   	push   edi
c000deb4:	31 ff                	xor    edi,edi
c000deb6:	56                   	push   esi
c000deb7:	53                   	push   ebx
c000deb8:	83 ec 1c             	sub    esp,0x1c
c000debb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000debf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dec3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000deca:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000decf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ded3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ded7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dedb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dede:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dee2:	01 f9                	add    ecx,edi
c000dee4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dee8:	7d 2f                	jge    c000df19 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000deea:	31 f6                	xor    esi,esi
c000deec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000def0:	01 f2                	add    edx,esi
c000def2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000def6:	7d 1a                	jge    c000df12 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000def8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000defb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000defe:	46                   	inc    esi
c000deff:	51                   	push   ecx
c000df00:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000df04:	52                   	push   edx
c000df05:	55                   	push   ebp
c000df06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df09:	83 c4 10             	add    esp,0x10
c000df0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df10:	eb da                	jmp    c000deec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000df12:	47                   	inc    edi
c000df13:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000df17:	eb c5                	jmp    c000dede <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000df19:	83 c4 1c             	add    esp,0x1c
c000df1c:	5b                   	pop    ebx
c000df1d:	5e                   	pop    esi
c000df1e:	5f                   	pop    edi
c000df1f:	5d                   	pop    ebp
c000df20:	c3                   	ret    
c000df21:	90                   	nop

c000df22 <Video::blit(unsigned int*, int, int, int, int)>:
c000df22:	55                   	push   ebp
c000df23:	57                   	push   edi
c000df24:	56                   	push   esi
c000df25:	53                   	push   ebx
c000df26:	83 ec 1c             	sub    esp,0x1c
c000df29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df31:	85 c0                	test   eax,eax
c000df33:	79 02                	jns    c000df37 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df35:	31 c0                	xor    eax,eax
c000df37:	c1 e0 02             	shl    eax,0x2
c000df3a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df46:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df4a:	39 d8                	cmp    eax,ebx
c000df4c:	7e 49                	jle    c000df97 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df4e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df54:	7c 41                	jl     c000df97 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df5a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df5e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df62:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df66:	39 f9                	cmp    ecx,edi
c000df68:	7e 22                	jle    c000df8c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df6a:	83 c5 04             	add    ebp,0x4
c000df6d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df73:	7c 14                	jl     c000df89 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df75:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df77:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df82:	56                   	push   esi
c000df83:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df86:	83 c4 10             	add    esp,0x10
c000df89:	47                   	inc    edi
c000df8a:	eb d2                	jmp    c000df5e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df90:	43                   	inc    ebx
c000df91:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df95:	eb ab                	jmp    c000df42 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df97:	83 c4 1c             	add    esp,0x1c
c000df9a:	5b                   	pop    ebx
c000df9b:	5e                   	pop    esi
c000df9c:	5f                   	pop    edi
c000df9d:	5d                   	pop    ebp
c000df9e:	c3                   	ret    
c000df9f:	90                   	nop

c000dfa0 <Video::clearScreen(unsigned int)>:
c000dfa0:	57                   	push   edi
c000dfa1:	56                   	push   esi
c000dfa2:	53                   	push   ebx
c000dfa3:	31 db                	xor    ebx,ebx
c000dfa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfa9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dfaf:	7e 1f                	jle    c000dfd0 <Video::clearScreen(unsigned int)+0x30>
c000dfb1:	31 ff                	xor    edi,edi
c000dfb3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dfb9:	7e 12                	jle    c000dfcd <Video::clearScreen(unsigned int)+0x2d>
c000dfbb:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc1:	53                   	push   ebx
c000dfc2:	57                   	push   edi
c000dfc3:	47                   	inc    edi
c000dfc4:	56                   	push   esi
c000dfc5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	eb e6                	jmp    c000dfb3 <Video::clearScreen(unsigned int)+0x13>
c000dfcd:	43                   	inc    ebx
c000dfce:	eb d9                	jmp    c000dfa9 <Video::clearScreen(unsigned int)+0x9>
c000dfd0:	5b                   	pop    ebx
c000dfd1:	5e                   	pop    esi
c000dfd2:	5f                   	pop    edi
c000dfd3:	c3                   	ret    

c000dfd4 <Video::putpixel(int, int, unsigned int)>:
c000dfd4:	c7 44 24 04 74 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e174
c000dfdc:	e9 5a 27 00 00       	jmp    c001073b <Krnl::panic(char const*)>
c000dfe1:	90                   	nop

c000dfe2 <Video::Video(char const*)>:
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe9:	83 ec 08             	sub    esp,0x8
c000dfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff0:	50                   	push   eax
c000dff1:	e8 ce e1 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000dff6:	83 c4 10             	add    esp,0x10
c000dff9:	ba e4 e1 01 c0       	mov    edx,0xc001e1e4
c000dffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e002:	89 10                	mov    DWORD PTR [eax],edx
c000e004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e008:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e012:	90                   	nop
c000e013:	83 c4 0c             	add    esp,0xc
c000e016:	c3                   	ret    
c000e017:	90                   	nop

c000e018 <Video::~Video()>:
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	ba e4 e1 01 c0       	mov    edx,0xc001e1e4
c000e020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e024:	89 10                	mov    DWORD PTR [eax],edx
c000e026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02a:	83 ec 0c             	sub    esp,0xc
c000e02d:	50                   	push   eax
c000e02e:	e8 fb de ff ff       	call   c000bf2e <Device::~Device()>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	90                   	nop
c000e037:	83 c4 0c             	add    esp,0xc
c000e03a:	c3                   	ret    
c000e03b:	90                   	nop

c000e03c <Video::~Video()>:
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	83 ec 0c             	sub    esp,0xc
c000e042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e046:	e8 cd ff ff ff       	call   c000e018 <Video::~Video()>
c000e04b:	83 c4 10             	add    esp,0x10
c000e04e:	83 ec 08             	sub    esp,0x8
c000e051:	68 64 01 00 00       	push   0x164
c000e056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05a:	e8 97 ca ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c000e05f:	83 c4 10             	add    esp,0x10
c000e062:	83 c4 0c             	add    esp,0xc
c000e065:	c3                   	ret    

c000e066 <Video::isMonochrome()>:
c000e066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e070:	c3                   	ret    
c000e071:	90                   	nop

c000e072 <Video::getWidth()>:
c000e072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e076:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e07c:	c3                   	ret    
c000e07d:	90                   	nop

c000e07e <Video::getHeight()>:
c000e07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e082:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e088:	c3                   	ret    
c000e089:	90                   	nop

c000e08a <Video::drawCursor(int, int, unsigned char*, int)>:
c000e08a:	55                   	push   ebp
c000e08b:	57                   	push   edi
c000e08c:	56                   	push   esi
c000e08d:	53                   	push   ebx
c000e08e:	83 ec 2c             	sub    esp,0x2c
c000e091:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e095:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e099:	83 f8 01             	cmp    eax,0x1
c000e09c:	19 c9                	sbb    ecx,ecx
c000e09e:	31 db                	xor    ebx,ebx
c000e0a0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e0a4:	89 cd                	mov    ebp,ecx
c000e0a6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e0ae:	f7 d5                	not    ebp
c000e0b0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e0b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0ba:	01 d8                	add    eax,ebx
c000e0bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0c0:	56                   	push   esi
c000e0c1:	e8 b8 ff ff ff       	call   c000e07e <Video::getHeight()>
c000e0c6:	59                   	pop    ecx
c000e0c7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0cb:	7e 70                	jle    c000e13d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e0cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0d1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0d5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0e0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0eb:	89 f8                	mov    eax,edi
c000e0ed:	83 c0 20             	add    eax,0x20
c000e0f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0f4:	56                   	push   esi
c000e0f5:	e8 78 ff ff ff       	call   c000e072 <Video::getWidth()>
c000e0fa:	5a                   	pop    edx
c000e0fb:	39 c7                	cmp    edi,eax
c000e0fd:	7d 34                	jge    c000e133 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e0ff:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e104:	74 05                	je     c000e10b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e106:	8b 06                	mov    eax,DWORD PTR [esi]
c000e108:	55                   	push   ebp
c000e109:	eb 0d                	jmp    c000e118 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e10b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e110:	74 12                	je     c000e124 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e112:	8b 06                	mov    eax,DWORD PTR [esi]
c000e114:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e118:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e11c:	57                   	push   edi
c000e11d:	56                   	push   esi
c000e11e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e121:	83 c4 10             	add    esp,0x10
c000e124:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e128:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e12c:	47                   	inc    edi
c000e12d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e131:	75 c1                	jne    c000e0f4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e133:	43                   	inc    ebx
c000e134:	83 fb 20             	cmp    ebx,0x20
c000e137:	0f 85 79 ff ff ff    	jne    c000e0b6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e13d:	83 c4 2c             	add    esp,0x2c
c000e140:	5b                   	pop    ebx
c000e141:	5e                   	pop    esi
c000e142:	5f                   	pop    edi
c000e143:	5d                   	pop    ebp
c000e144:	c3                   	ret    
c000e145:	90                   	nop

c000e146 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e146:	55                   	push   ebp
c000e147:	57                   	push   edi
c000e148:	56                   	push   esi
c000e149:	53                   	push   ebx
c000e14a:	83 ec 28             	sub    esp,0x28
c000e14d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e151:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e155:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e159:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e15d:	c1 e6 08             	shl    esi,0x8
c000e160:	01 c6                	add    esi,eax
c000e162:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e166:	c1 e0 08             	shl    eax,0x8
c000e169:	01 d0                	add    eax,edx
c000e16b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e16f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e173:	0f af c6             	imul   eax,esi
c000e176:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e17d:	50                   	push   eax
c000e17e:	e8 da 9c ff ff       	call   c0007e5d <malloc>
c000e183:	83 c4 10             	add    esp,0x10
c000e186:	89 c7                	mov    edi,eax
c000e188:	85 c0                	test   eax,eax
c000e18a:	75 10                	jne    c000e19c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e18c:	83 ec 0c             	sub    esp,0xc
c000e18f:	68 95 e1 01 c0       	push   0xc001e195
c000e194:	e8 a2 25 00 00       	call   c001073b <Krnl::panic(char const*)>
c000e199:	83 c4 10             	add    esp,0x10
c000e19c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e19f:	ba 12 00 00 00       	mov    edx,0x12
c000e1a4:	84 c0                	test   al,al
c000e1a6:	74 11                	je     c000e1b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e1a8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e1ac:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e1b0:	c1 fa 03             	sar    edx,0x3
c000e1b3:	0f af d1             	imul   edx,ecx
c000e1b6:	83 c2 12             	add    edx,0x12
c000e1b9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1bd:	74 04                	je     c000e1c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e1bf:	85 f6                	test   esi,esi
c000e1c1:	75 12                	jne    c000e1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e1c3:	83 ec 0c             	sub    esp,0xc
c000e1c6:	68 a5 e1 01 c0       	push   0xc001e1a5
c000e1cb:	e8 1c ca ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000e1d0:	e9 b8 00 00 00       	jmp    c000e28d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e1d5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1d9:	80 f9 02             	cmp    cl,0x2
c000e1dc:	0f 85 96 00 00 00    	jne    c000e278 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e1e2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1e7:	75 0e                	jne    c000e1f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1e9:	84 c0                	test   al,al
c000e1eb:	75 0a                	jne    c000e1f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1ed:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1f0:	83 e8 18             	sub    eax,0x18
c000e1f3:	a8 f7                	test   al,0xf7
c000e1f5:	74 0a                	je     c000e201 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e1f7:	83 ec 0c             	sub    esp,0xc
c000e1fa:	68 ba e1 01 c0       	push   0xc001e1ba
c000e1ff:	eb 7f                	jmp    c000e280 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e201:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e209:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e211:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e215:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e21d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e221:	75 0c                	jne    c000e22f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e223:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e228:	c1 e0 18             	shl    eax,0x18
c000e22b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e22f:	45                   	inc    ebp
c000e230:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e235:	c1 e1 10             	shl    ecx,0x10
c000e238:	89 c8                	mov    eax,ecx
c000e23a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e23f:	c1 e1 08             	shl    ecx,0x8
c000e242:	09 c1                	or     ecx,eax
c000e244:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e248:	09 c1                	or     ecx,eax
c000e24a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e24e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e252:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e256:	c1 f8 03             	sar    eax,0x3
c000e259:	01 c2                	add    edx,eax
c000e25b:	89 e8                	mov    eax,ebp
c000e25d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e261:	39 c6                	cmp    esi,eax
c000e263:	7f b0                	jg     c000e215 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e265:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e269:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e26d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e270:	7e 22                	jle    c000e294 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e272:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e276:	eb 99                	jmp    c000e211 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e278:	50                   	push   eax
c000e279:	50                   	push   eax
c000e27a:	51                   	push   ecx
c000e27b:	68 c8 e1 01 c0       	push   0xc001e1c8
c000e280:	e8 67 c9 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c000e285:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e288:	e8 e0 9b ff ff       	call   c0007e6d <free>
c000e28d:	83 c4 10             	add    esp,0x10
c000e290:	31 ff                	xor    edi,edi
c000e292:	eb 0f                	jmp    c000e2a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e294:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e298:	89 30                	mov    DWORD PTR [eax],esi
c000e29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e29e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e2a1:	89 30                	mov    DWORD PTR [eax],esi
c000e2a3:	83 c4 1c             	add    esp,0x1c
c000e2a6:	89 f8                	mov    eax,edi
c000e2a8:	5b                   	pop    ebx
c000e2a9:	5e                   	pop    esi
c000e2aa:	5f                   	pop    edi
c000e2ab:	5d                   	pop    ebp
c000e2ac:	c3                   	ret    
c000e2ad:	90                   	nop

c000e2ae <Video::putTGA(int, int, unsigned char*, int)>:
c000e2ae:	55                   	push   ebp
c000e2af:	57                   	push   edi
c000e2b0:	56                   	push   esi
c000e2b1:	53                   	push   ebx
c000e2b2:	83 ec 28             	sub    esp,0x28
c000e2b5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e2b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2bd:	50                   	push   eax
c000e2be:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2c2:	50                   	push   eax
c000e2c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2cb:	56                   	push   esi
c000e2cc:	e8 75 fe ff ff       	call   c000e146 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2d1:	83 c4 20             	add    esp,0x20
c000e2d4:	85 c0                	test   eax,eax
c000e2d6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2da:	74 35                	je     c000e311 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2dc:	89 c7                	mov    edi,eax
c000e2de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2e2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2e6:	39 d8                	cmp    eax,ebx
c000e2e8:	7e 27                	jle    c000e311 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2ea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2f2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2f6:	39 e8                	cmp    eax,ebp
c000e2f8:	7e 14                	jle    c000e30e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2fa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2fc:	83 c7 04             	add    edi,0x4
c000e2ff:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e302:	53                   	push   ebx
c000e303:	55                   	push   ebp
c000e304:	45                   	inc    ebp
c000e305:	56                   	push   esi
c000e306:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	eb e0                	jmp    c000e2ee <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e30e:	43                   	inc    ebx
c000e30f:	eb cd                	jmp    c000e2de <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e311:	83 c4 1c             	add    esp,0x1c
c000e314:	5b                   	pop    ebx
c000e315:	5e                   	pop    esi
c000e316:	5f                   	pop    edi
c000e317:	5d                   	pop    ebp
c000e318:	c3                   	ret    
c000e319:	66 90                	xchg   ax,ax
c000e31b:	90                   	nop

c000e31c <ACPI::close(int, int, void*)>:
c000e31c:	83 ec 1c             	sub    esp,0x1c
c000e31f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e327:	74 0b                	je     c000e334 <ACPI::close(int, int, void*)+0x18>
c000e329:	b8 00 00 00 00       	mov    eax,0x0
c000e32e:	e9 9d 00 00 00       	jmp    c000e3d0 <ACPI::close(int, int, void*)+0xb4>
c000e333:	90                   	nop
c000e334:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e339:	75 29                	jne    c000e364 <ACPI::close(int, int, void*)+0x48>
c000e33b:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c000e340:	85 c0                	test   eax,eax
c000e342:	74 08                	je     c000e34c <ACPI::close(int, int, void*)+0x30>
c000e344:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c000e349:	ff d0                	call   eax
c000e34b:	90                   	nop
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	68 24 e2 01 c0       	push   0xc001e224
c000e354:	e8 e2 23 00 00       	call   c001073b <Krnl::panic(char const*)>
c000e359:	83 c4 10             	add    esp,0x10
c000e35c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e361:	eb 6d                	jmp    c000e3d0 <ACPI::close(int, int, void*)+0xb4>
c000e363:	90                   	nop
c000e364:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e369:	75 5d                	jne    c000e3c8 <ACPI::close(int, int, void*)+0xac>
c000e36b:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000e370:	85 c0                	test   eax,eax
c000e372:	74 08                	je     c000e37c <ACPI::close(int, int, void*)+0x60>
c000e374:	a1 24 2e 02 c0       	mov    eax,ds:0xc0022e24
c000e379:	ff d0                	call   eax
c000e37b:	90                   	nop
c000e37c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e381:	8d 76 00             	lea    esi,[esi+0x0]
c000e384:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e388:	25 ff 00 00 00       	and    eax,0xff
c000e38d:	83 e0 02             	and    eax,0x2
c000e390:	74 1e                	je     c000e3b0 <ACPI::close(int, int, void*)+0x94>
c000e392:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e399:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e39d:	89 c2                	mov    edx,eax
c000e39f:	ec                   	in     al,dx
c000e3a0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e3a4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e3a8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e3ac:	eb d6                	jmp    c000e384 <ACPI::close(int, int, void*)+0x68>
c000e3ae:	66 90                	xchg   ax,ax
c000e3b0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e3b7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3bc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3c4:	ee                   	out    dx,al
c000e3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e3d0:	83 c4 1c             	add    esp,0x1c
c000e3d3:	c3                   	ret    

c000e3d4 <findRSDP()>:
c000e3d4:	83 ec 1c             	sub    esp,0x1c
c000e3d7:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e3dc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3e2:	83 e0 04             	and    eax,0x4
c000e3e5:	84 c0                	test   al,al
c000e3e7:	75 07                	jne    c000e3f0 <findRSDP()+0x1c>
c000e3e9:	b8 00 00 00 00       	mov    eax,0x0
c000e3ee:	eb 70                	jmp    c000e460 <findRSDP()+0x8c>
c000e3f0:	a1 68 08 02 c0       	mov    eax,ds:0xc0020868
c000e3f5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3fa:	7f 1c                	jg     c000e418 <findRSDP()+0x44>
c000e3fc:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e401:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e407:	83 e2 fb             	and    edx,0xfffffffb
c000e40a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e410:	b8 00 00 00 00       	mov    eax,0x0
c000e415:	eb 49                	jmp    c000e460 <findRSDP()+0x8c>
c000e417:	90                   	nop
c000e418:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e420:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e428:	77 2e                	ja     c000e458 <findRSDP()+0x84>
c000e42a:	83 ec 04             	sub    esp,0x4
c000e42d:	6a 08                	push   0x8
c000e42f:	68 bf e2 01 c0       	push   0xc001e2bf
c000e434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e438:	e8 73 1f ff ff       	call   c00003b0 <memcmp>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	85 c0                	test   eax,eax
c000e442:	0f 94 c0             	sete   al
c000e445:	84 c0                	test   al,al
c000e447:	74 07                	je     c000e450 <findRSDP()+0x7c>
c000e449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44d:	eb 11                	jmp    c000e460 <findRSDP()+0x8c>
c000e44f:	90                   	nop
c000e450:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e455:	eb c9                	jmp    c000e420 <findRSDP()+0x4c>
c000e457:	90                   	nop
c000e458:	b8 00 00 00 00       	mov    eax,0x0
c000e45d:	8d 76 00             	lea    esi,[esi+0x0]
c000e460:	83 c4 1c             	add    esp,0x1c
c000e463:	c3                   	ret    

c000e464 <loadACPITables(unsigned char*)>:
c000e464:	57                   	push   edi
c000e465:	56                   	push   esi
c000e466:	53                   	push   ebx
c000e467:	83 ec 60             	sub    esp,0x60
c000e46a:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e46f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e475:	83 e0 04             	and    eax,0x4
c000e478:	84 c0                	test   al,al
c000e47a:	0f 84 3c 02 00 00    	je     c000e6bc <loadACPITables(unsigned char*)+0x258>
c000e480:	a0 40 30 02 c0       	mov    al,ds:0xc0023040
c000e485:	84 c0                	test   al,al
c000e487:	74 77                	je     c000e500 <loadACPITables(unsigned char*)+0x9c>
c000e489:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e48d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e491:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e495:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e498:	83 e8 24             	sub    eax,0x24
c000e49b:	c1 e8 03             	shr    eax,0x3
c000e49e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e4a2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e4aa:	66 90                	xchg   ax,ax
c000e4ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4b0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4b4:	0f 8d b6 00 00 00    	jge    c000e570 <loadACPITables(unsigned char*)+0x10c>
c000e4ba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4be:	83 c0 24             	add    eax,0x24
c000e4c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4cd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4d1:	c1 e0 03             	shl    eax,0x3
c000e4d4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4df:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4e1:	89 c1                	mov    ecx,eax
c000e4e3:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e4e8:	8d 50 01             	lea    edx,[eax+0x1]
c000e4eb:	89 15 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,edx
c000e4f1:	89 ca                	mov    edx,ecx
c000e4f3:	89 14 c5 44 2e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd1bc],edx
c000e4fa:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e4fe:	eb ac                	jmp    c000e4ac <loadACPITables(unsigned char*)+0x48>
c000e500:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e504:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e508:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e50c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e50f:	83 e8 24             	sub    eax,0x24
c000e512:	c1 e8 02             	shr    eax,0x2
c000e515:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e519:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e528:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e52c:	7d 42                	jge    c000e570 <loadACPITables(unsigned char*)+0x10c>
c000e52e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e532:	83 c0 24             	add    eax,0x24
c000e535:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e539:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e53d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e541:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e545:	c1 e0 02             	shl    eax,0x2
c000e548:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e54c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e550:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e552:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e557:	8d 50 01             	lea    edx,[eax+0x1]
c000e55a:	89 15 2c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e2c,edx
c000e560:	89 ca                	mov    edx,ecx
c000e562:	89 14 c5 44 2e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd1bc],edx
c000e569:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e56d:	eb b5                	jmp    c000e524 <loadACPITables(unsigned char*)+0xc0>
c000e56f:	90                   	nop
c000e570:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e578:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e57d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e581:	0f 8d 39 01 00 00    	jge    c000e6c0 <loadACPITables(unsigned char*)+0x25c>
c000e587:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e58b:	8b 04 c5 44 2e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd1bc]
c000e592:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e596:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e59a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e59e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5a2:	25 ff 0f 00 00       	and    eax,0xfff
c000e5a7:	89 c6                	mov    esi,eax
c000e5a9:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e5af:	83 ec 0c             	sub    esp,0xc
c000e5b2:	6a 01                	push   0x1
c000e5b4:	e8 e0 b3 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e5b9:	83 c4 10             	add    esp,0x10
c000e5bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5c6:	83 ec 0c             	sub    esp,0xc
c000e5c9:	6a 01                	push   0x1
c000e5cb:	6a 01                	push   0x1
c000e5cd:	50                   	push   eax
c000e5ce:	52                   	push   edx
c000e5cf:	53                   	push   ebx
c000e5d0:	e8 53 bd ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5d5:	83 c4 20             	add    esp,0x20
c000e5d8:	09 f0                	or     eax,esi
c000e5da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5de:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5e2:	c1 e0 03             	shl    eax,0x3
c000e5e5:	05 40 2e 02 c0       	add    eax,0xc0022e40
c000e5ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5f6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e606:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e60a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e60e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e612:	89 c6                	mov    esi,eax
c000e614:	89 d7                	mov    edi,edx
c000e616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e618:	89 c8                	mov    eax,ecx
c000e61a:	89 fa                	mov    edx,edi
c000e61c:	89 f3                	mov    ebx,esi
c000e61e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e622:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e626:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e62a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e631:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e639:	05 00 10 00 00       	add    eax,0x1000
c000e63e:	c1 e8 0c             	shr    eax,0xc
c000e641:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e649:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e64d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e651:	25 ff 0f 00 00       	and    eax,0xfff
c000e656:	89 c6                	mov    esi,eax
c000e658:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e65e:	83 ec 0c             	sub    esp,0xc
c000e661:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e665:	e8 2f b3 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e66a:	83 c4 10             	add    esp,0x10
c000e66d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e671:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e677:	83 ec 0c             	sub    esp,0xc
c000e67a:	6a 01                	push   0x1
c000e67c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e680:	50                   	push   eax
c000e681:	52                   	push   edx
c000e682:	53                   	push   ebx
c000e683:	e8 a0 bc ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e688:	83 c4 20             	add    esp,0x20
c000e68b:	09 f0                	or     eax,esi
c000e68d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e695:	83 ec 0c             	sub    esp,0xc
c000e698:	50                   	push   eax
c000e699:	e8 2b b6 ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e69e:	83 c4 10             	add    esp,0x10
c000e6a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e6a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6a9:	89 14 c5 44 2e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd1bc],edx
c000e6b0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e6b4:	e9 bf fe ff ff       	jmp    c000e578 <loadACPITables(unsigned char*)+0x114>
c000e6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6bc:	90                   	nop
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	83 c4 60             	add    esp,0x60
c000e6c3:	5b                   	pop    ebx
c000e6c4:	5e                   	pop    esi
c000e6c5:	5f                   	pop    edi
c000e6c6:	c3                   	ret    
c000e6c7:	90                   	nop

c000e6c8 <findRSDT(unsigned char*)>:
c000e6c8:	57                   	push   edi
c000e6c9:	56                   	push   esi
c000e6ca:	53                   	push   ebx
c000e6cb:	83 ec 50             	sub    esp,0x50
c000e6ce:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e6d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6d9:	83 e0 04             	and    eax,0x4
c000e6dc:	84 c0                	test   al,al
c000e6de:	75 0c                	jne    c000e6ec <findRSDT(unsigned char*)+0x24>
c000e6e0:	b8 00 00 00 00       	mov    eax,0x0
c000e6e5:	e9 26 01 00 00       	jmp    c000e810 <findRSDT(unsigned char*)+0x148>
c000e6ea:	66 90                	xchg   ax,ax
c000e6ec:	89 e0                	mov    eax,esp
c000e6ee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6f2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6fa:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e706:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e70a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e70e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e712:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e716:	89 c6                	mov    esi,eax
c000e718:	89 d7                	mov    edi,edx
c000e71a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e71c:	89 c8                	mov    eax,ecx
c000e71e:	89 fa                	mov    edx,edi
c000e720:	89 f3                	mov    ebx,esi
c000e722:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e726:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e72a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e72e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e732:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e736:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e73e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e746:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e752:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e756:	25 ff 0f 00 00       	and    eax,0xfff
c000e75b:	89 c6                	mov    esi,eax
c000e75d:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e763:	83 ec 0c             	sub    esp,0xc
c000e766:	6a 02                	push   0x2
c000e768:	e8 2c b2 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e774:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	6a 01                	push   0x1
c000e77f:	6a 02                	push   0x2
c000e781:	50                   	push   eax
c000e782:	52                   	push   edx
c000e783:	53                   	push   ebx
c000e784:	e8 9f bb ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e789:	83 c4 20             	add    esp,0x20
c000e78c:	09 f0                	or     eax,esi
c000e78e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e792:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e796:	25 ff 0f 00 00       	and    eax,0xfff
c000e79b:	89 c6                	mov    esi,eax
c000e79d:	8b 1d 30 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020930
c000e7a3:	83 ec 0c             	sub    esp,0xc
c000e7a6:	6a 02                	push   0x2
c000e7a8:	e8 ec b1 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	6a 01                	push   0x1
c000e7bf:	6a 02                	push   0x2
c000e7c1:	50                   	push   eax
c000e7c2:	52                   	push   edx
c000e7c3:	53                   	push   ebx
c000e7c4:	e8 5f bb ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7c9:	83 c4 20             	add    esp,0x20
c000e7cc:	09 f0                	or     eax,esi
c000e7ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7d2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e7d7:	75 13                	jne    c000e7ec <findRSDT(unsigned char*)+0x124>
c000e7d9:	c6 05 40 30 02 c0 00 	mov    BYTE PTR ds:0xc0023040,0x0
c000e7e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7e4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7e8:	eb 22                	jmp    c000e80c <findRSDT(unsigned char*)+0x144>
c000e7ea:	66 90                	xchg   ax,ax
c000e7ec:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e7f1:	75 11                	jne    c000e804 <findRSDT(unsigned char*)+0x13c>
c000e7f3:	c6 05 40 30 02 c0 01 	mov    BYTE PTR ds:0xc0023040,0x1
c000e7fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e802:	eb 08                	jmp    c000e80c <findRSDT(unsigned char*)+0x144>
c000e804:	b8 00 00 00 00       	mov    eax,0x0
c000e809:	eb 05                	jmp    c000e810 <findRSDT(unsigned char*)+0x148>
c000e80b:	90                   	nop
c000e80c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e810:	83 c4 50             	add    esp,0x50
c000e813:	5b                   	pop    ebx
c000e814:	5e                   	pop    esi
c000e815:	5f                   	pop    edi
c000e816:	c3                   	ret    
c000e817:	90                   	nop

c000e818 <findDataTable(unsigned char*, char*)>:
c000e818:	83 ec 1c             	sub    esp,0x1c
c000e81b:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e820:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e826:	83 e0 04             	and    eax,0x4
c000e829:	84 c0                	test   al,al
c000e82b:	75 07                	jne    c000e834 <findDataTable(unsigned char*, char*)+0x1c>
c000e82d:	b8 00 00 00 00       	mov    eax,0x0
c000e832:	eb 58                	jmp    c000e88c <findDataTable(unsigned char*, char*)+0x74>
c000e834:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e83c:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000e841:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e845:	7d 3d                	jge    c000e884 <findDataTable(unsigned char*, char*)+0x6c>
c000e847:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84b:	c1 e0 03             	shl    eax,0x3
c000e84e:	05 40 2e 02 c0       	add    eax,0xc0022e40
c000e853:	83 ec 04             	sub    esp,0x4
c000e856:	6a 04                	push   0x4
c000e858:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e85c:	50                   	push   eax
c000e85d:	e8 4e 1b ff ff       	call   c00003b0 <memcmp>
c000e862:	83 c4 10             	add    esp,0x10
c000e865:	85 c0                	test   eax,eax
c000e867:	0f 94 c0             	sete   al
c000e86a:	84 c0                	test   al,al
c000e86c:	74 0e                	je     c000e87c <findDataTable(unsigned char*, char*)+0x64>
c000e86e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e872:	8b 04 c5 44 2e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd1bc]
c000e879:	eb 11                	jmp    c000e88c <findDataTable(unsigned char*, char*)+0x74>
c000e87b:	90                   	nop
c000e87c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e880:	eb ba                	jmp    c000e83c <findDataTable(unsigned char*, char*)+0x24>
c000e882:	66 90                	xchg   ax,ax
c000e884:	b8 00 00 00 00       	mov    eax,0x0
c000e889:	8d 76 00             	lea    esi,[esi+0x0]
c000e88c:	83 c4 1c             	add    esp,0x1c
c000e88f:	c3                   	ret    

c000e890 <scanMADT()>:
c000e890:	53                   	push   ebx
c000e891:	83 ec 38             	sub    esp,0x38
c000e894:	a1 50 08 02 c0       	mov    eax,ds:0xc0020850
c000e899:	25 00 04 00 00       	and    eax,0x400
c000e89e:	74 14                	je     c000e8b4 <scanMADT()+0x24>
c000e8a0:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e8a5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8ab:	83 e2 fb             	and    edx,0xfffffffb
c000e8ae:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8b4:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e8b9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8bf:	83 e0 04             	and    eax,0x4
c000e8c2:	84 c0                	test   al,al
c000e8c4:	0f 84 8a 04 00 00    	je     c000ed54 <scanMADT()+0x4c4>
c000e8ca:	e8 05 fb ff ff       	call   c000e3d4 <findRSDP()>
c000e8cf:	a3 4c 30 02 c0       	mov    ds:0xc002304c,eax
c000e8d4:	a1 4c 30 02 c0       	mov    eax,ds:0xc002304c
c000e8d9:	85 c0                	test   eax,eax
c000e8db:	75 1b                	jne    c000e8f8 <scanMADT()+0x68>
c000e8dd:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e8e2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8e8:	83 e2 fb             	and    edx,0xfffffffb
c000e8eb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8f1:	e9 66 04 00 00       	jmp    c000ed5c <scanMADT()+0x4cc>
c000e8f6:	66 90                	xchg   ax,ax
c000e8f8:	a1 4c 30 02 c0       	mov    eax,ds:0xc002304c
c000e8fd:	83 ec 0c             	sub    esp,0xc
c000e900:	50                   	push   eax
c000e901:	e8 c2 fd ff ff       	call   c000e6c8 <findRSDT(unsigned char*)>
c000e906:	83 c4 10             	add    esp,0x10
c000e909:	a3 48 30 02 c0       	mov    ds:0xc0023048,eax
c000e90e:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000e913:	85 c0                	test   eax,eax
c000e915:	75 19                	jne    c000e930 <scanMADT()+0xa0>
c000e917:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e91c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e922:	83 e2 fb             	and    edx,0xfffffffb
c000e925:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e92b:	e9 2c 04 00 00       	jmp    c000ed5c <scanMADT()+0x4cc>
c000e930:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000e935:	83 ec 0c             	sub    esp,0xc
c000e938:	50                   	push   eax
c000e939:	e8 26 fb ff ff       	call   c000e464 <loadACPITables(unsigned char*)>
c000e93e:	83 c4 10             	add    esp,0x10
c000e941:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000e946:	83 ec 08             	sub    esp,0x8
c000e949:	68 c8 e2 01 c0       	push   0xc001e2c8
c000e94e:	50                   	push   eax
c000e94f:	e8 c4 fe ff ff       	call   c000e818 <findDataTable(unsigned char*, char*)>
c000e954:	83 c4 10             	add    esp,0x10
c000e957:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e95b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e960:	75 1a                	jne    c000e97c <scanMADT()+0xec>
c000e962:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000e967:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e96d:	83 e2 fe             	and    edx,0xfffffffe
c000e970:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e976:	e9 e1 03 00 00       	jmp    c000ed5c <scanMADT()+0x4cc>
c000e97b:	90                   	nop
c000e97c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e984:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e98b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e98f:	0f 87 c7 03 00 00    	ja     c000ed5c <scanMADT()+0x4cc>
c000e995:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e99d:	0f 87 b9 03 00 00    	ja     c000ed5c <scanMADT()+0x4cc>
c000e9a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9af:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9be:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9c6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9d5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9d9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e9de:	0f 86 74 03 00 00    	jbe    c000ed58 <scanMADT()+0x4c8>
c000e9e4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e9e9:	75 5d                	jne    c000ea48 <scanMADT()+0x1b8>
c000e9eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e9f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9f6:	8a 15 40 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023240
c000e9fc:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea06:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea0a:	88 82 80 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd80],al
c000ea10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea14:	8d 42 01             	lea    eax,[edx+0x1]
c000ea17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea1b:	a0 40 32 02 c0       	mov    al,ds:0xc0023240
c000ea20:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea23:	88 0d 40 32 02 c0    	mov    BYTE PTR ds:0xc0023240,cl
c000ea29:	25 ff 00 00 00       	and    eax,0xff
c000ea2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea32:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000ea36:	88 90 60 32 02 c0    	mov    BYTE PTR [eax-0x3ffdcda0],dl
c000ea3c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea41:	e9 f6 02 00 00       	jmp    c000ed3c <scanMADT()+0x4ac>
c000ea46:	66 90                	xchg   ax,ax
c000ea48:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000ea4d:	0f 85 29 01 00 00    	jne    c000eb7c <scanMADT()+0x2ec>
c000ea53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea57:	8d 50 01             	lea    edx,[eax+0x1]
c000ea5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea5e:	8a 15 00 31 02 c0    	mov    dl,BYTE PTR ds:0xc0023100
c000ea64:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea6a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea6e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea72:	88 82 20 31 02 c0    	mov    BYTE PTR [edx-0x3ffdcee0],al
c000ea78:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea84:	01 d0                	add    eax,edx
c000ea86:	83 c0 2c             	add    eax,0x2c
c000ea89:	8a 00                	mov    al,BYTE PTR [eax]
c000ea8b:	31 d2                	xor    edx,edx
c000ea8d:	88 c2                	mov    dl,al
c000ea8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea93:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea9a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea9e:	25 ff 00 00 00       	and    eax,0xff
c000eaa3:	c1 e0 08             	shl    eax,0x8
c000eaa6:	89 d1                	mov    ecx,edx
c000eaa8:	09 c1                	or     ecx,eax
c000eaaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaae:	8d 50 02             	lea    edx,[eax+0x2]
c000eab1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eab9:	25 ff 00 00 00       	and    eax,0xff
c000eabe:	c1 e0 10             	shl    eax,0x10
c000eac1:	09 c1                	or     ecx,eax
c000eac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac7:	8d 50 03             	lea    edx,[eax+0x3]
c000eaca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eace:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ead2:	25 ff 00 00 00       	and    eax,0xff
c000ead7:	c1 e0 18             	shl    eax,0x18
c000eada:	09 c1                	or     ecx,eax
c000eadc:	89 ca                	mov    edx,ecx
c000eade:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000eae3:	25 ff 00 00 00       	and    eax,0xff
c000eae8:	89 14 85 40 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcec0],edx
c000eaef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eafc:	01 d0                	add    eax,edx
c000eafe:	83 c0 2c             	add    eax,0x2c
c000eb01:	8a 00                	mov    al,BYTE PTR [eax]
c000eb03:	31 d2                	xor    edx,edx
c000eb05:	88 c2                	mov    dl,al
c000eb07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb0b:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb12:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb16:	25 ff 00 00 00       	and    eax,0xff
c000eb1b:	c1 e0 08             	shl    eax,0x8
c000eb1e:	89 d1                	mov    ecx,edx
c000eb20:	09 c1                	or     ecx,eax
c000eb22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb26:	8d 50 02             	lea    edx,[eax+0x2]
c000eb29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb2d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb31:	25 ff 00 00 00       	and    eax,0xff
c000eb36:	c1 e0 10             	shl    eax,0x10
c000eb39:	09 c1                	or     ecx,eax
c000eb3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3f:	8d 50 03             	lea    edx,[eax+0x3]
c000eb42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb46:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb4a:	25 ff 00 00 00       	and    eax,0xff
c000eb4f:	c1 e0 18             	shl    eax,0x18
c000eb52:	09 c1                	or     ecx,eax
c000eb54:	89 ca                	mov    edx,ecx
c000eb56:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000eb5b:	25 ff 00 00 00       	and    eax,0xff
c000eb60:	89 14 85 c0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce40],edx
c000eb67:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb6c:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c000eb71:	40                   	inc    eax
c000eb72:	a2 00 31 02 c0       	mov    ds:0xc0023100,al
c000eb77:	e9 c0 01 00 00       	jmp    c000ed3c <scanMADT()+0x4ac>
c000eb7c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb81:	0f 85 fd 00 00 00    	jne    c000ec84 <scanMADT()+0x3f4>
c000eb87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb8b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb9a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba2:	8d 50 01             	lea    edx,[eax+0x1]
c000eba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eba9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebb1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebbd:	01 d0                	add    eax,edx
c000ebbf:	83 c0 2c             	add    eax,0x2c
c000ebc2:	8a 00                	mov    al,BYTE PTR [eax]
c000ebc4:	31 d2                	xor    edx,edx
c000ebc6:	88 c2                	mov    dl,al
c000ebc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebcc:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebd3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebd7:	25 ff 00 00 00       	and    eax,0xff
c000ebdc:	c1 e0 08             	shl    eax,0x8
c000ebdf:	89 d1                	mov    ecx,edx
c000ebe1:	09 c1                	or     ecx,eax
c000ebe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe7:	8d 50 02             	lea    edx,[eax+0x2]
c000ebea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebf2:	25 ff 00 00 00       	and    eax,0xff
c000ebf7:	c1 e0 10             	shl    eax,0x10
c000ebfa:	09 c1                	or     ecx,eax
c000ebfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec00:	8d 50 03             	lea    edx,[eax+0x3]
c000ec03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec07:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec0b:	25 ff 00 00 00       	and    eax,0xff
c000ec10:	c1 e0 18             	shl    eax,0x18
c000ec13:	09 c8                	or     eax,ecx
c000ec15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec19:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec26:	01 d0                	add    eax,edx
c000ec28:	83 c0 2c             	add    eax,0x2c
c000ec2b:	8a 00                	mov    al,BYTE PTR [eax]
c000ec2d:	25 ff 00 00 00       	and    eax,0xff
c000ec32:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec36:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec3d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec41:	81 e2 ff 00 00 00    	and    edx,0xff
c000ec47:	c1 e2 08             	shl    edx,0x8
c000ec4a:	09 d0                	or     eax,edx
c000ec4c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec51:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec56:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec5a:	25 ff 00 00 00       	and    eax,0xff
c000ec5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec63:	88 90 a0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0860],dl
c000ec69:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec6d:	31 d2                	xor    edx,edx
c000ec6f:	88 c2                	mov    dl,al
c000ec71:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec76:	66 89 84 12 e0 30 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcf20],ax
c000ec7e:	e9 b9 00 00 00       	jmp    c000ed3c <scanMADT()+0x4ac>
c000ec83:	90                   	nop
c000ec84:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec89:	0f 85 a1 00 00 00    	jne    c000ed30 <scanMADT()+0x4a0>
c000ec8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec93:	8d 50 01             	lea    edx,[eax+0x1]
c000ec96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eca2:	25 ff 00 00 00       	and    eax,0xff
c000eca7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecb3:	01 d0                	add    eax,edx
c000ecb5:	83 c0 2c             	add    eax,0x2c
c000ecb8:	8a 00                	mov    al,BYTE PTR [eax]
c000ecba:	31 d2                	xor    edx,edx
c000ecbc:	88 c2                	mov    dl,al
c000ecbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecc2:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecc9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eccd:	25 ff 00 00 00       	and    eax,0xff
c000ecd2:	c1 e0 08             	shl    eax,0x8
c000ecd5:	09 d0                	or     eax,edx
c000ecd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecdb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ece0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ece4:	8d 50 01             	lea    edx,[eax+0x1]
c000ece7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eceb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecef:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecf3:	25 ff 00 00 00       	and    eax,0xff
c000ecf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed00:	c1 e0 08             	shl    eax,0x8
c000ed03:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ed07:	89 c1                	mov    ecx,eax
c000ed09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed0d:	c1 e0 18             	shl    eax,0x18
c000ed10:	89 c3                	mov    ebx,eax
c000ed12:	a1 50 30 02 c0       	mov    eax,ds:0xc0023050
c000ed17:	8d 50 01             	lea    edx,[eax+0x1]
c000ed1a:	89 15 50 30 02 c0    	mov    DWORD PTR ds:0xc0023050,edx
c000ed20:	09 d9                	or     ecx,ebx
c000ed22:	89 ca                	mov    edx,ecx
c000ed24:	89 14 85 60 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcfa0],edx
c000ed2b:	eb 0f                	jmp    c000ed3c <scanMADT()+0x4ac>
c000ed2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed30:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ed35:	75 05                	jne    c000ed3c <scanMADT()+0x4ac>
c000ed37:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed3c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ed40:	31 d2                	xor    edx,edx
c000ed42:	88 c2                	mov    dl,al
c000ed44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed48:	01 d0                	add    eax,edx
c000ed4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed4e:	e9 31 fc ff ff       	jmp    c000e984 <scanMADT()+0xf4>
c000ed53:	90                   	nop
c000ed54:	90                   	nop
c000ed55:	eb 05                	jmp    c000ed5c <scanMADT()+0x4cc>
c000ed57:	90                   	nop
c000ed58:	90                   	nop
c000ed59:	8d 76 00             	lea    esi,[esi+0x0]
c000ed5c:	83 c4 38             	add    esp,0x38
c000ed5f:	5b                   	pop    ebx
c000ed60:	c3                   	ret    
c000ed61:	90                   	nop
c000ed62:	66 90                	xchg   ax,ax

c000ed64 <ACPI::ACPI()>:
c000ed64:	83 ec 0c             	sub    esp,0xc
c000ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6b:	83 ec 08             	sub    esp,0x8
c000ed6e:	68 cd e2 01 c0       	push   0xc001e2cd
c000ed73:	50                   	push   eax
c000ed74:	e8 4b d4 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000ed79:	83 c4 10             	add    esp,0x10
c000ed7c:	ba 04 e4 01 c0       	mov    edx,0xc001e404
c000ed81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed85:	89 10                	mov    DWORD PTR [eax],edx
c000ed87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed8b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed96:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eda4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000edae:	e8 dd fa ff ff       	call   c000e890 <scanMADT()>
c000edb3:	90                   	nop
c000edb4:	83 c4 0c             	add    esp,0xc
c000edb7:	c3                   	ret    

c000edb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000edb8:	83 ec 2c             	sub    esp,0x2c
c000edbb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000edbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000edc7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000edcb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edd0:	88 d0                	mov    al,dl
c000edd2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edd6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eddb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ede3:	90                   	nop
c000ede4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edee:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edf2:	0f 8d 9c 00 00 00    	jge    c000ee94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000edf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee00:	83 c2 2a             	add    edx,0x2a
c000ee03:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ee07:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ee0c:	75 7a                	jne    c000ee88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee16:	83 c2 2a             	add    edx,0x2a
c000ee19:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee1d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ee21:	75 65                	jne    c000ee88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee23:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ee28:	74 3a                	je     c000ee64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ee2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee32:	83 c2 2a             	add    edx,0x2a
c000ee35:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee40:	39 c2                	cmp    edx,eax
c000ee42:	74 10                	je     c000ee54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee44:	83 ec 0c             	sub    esp,0xc
c000ee47:	68 48 e2 01 c0       	push   0xc001e248
c000ee4c:	e8 ea 18 00 00       	call   c001073b <Krnl::panic(char const*)>
c000ee51:	83 c4 10             	add    esp,0x10
c000ee54:	83 ec 0c             	sub    esp,0xc
c000ee57:	68 d2 e2 01 c0       	push   0xc001e2d2
c000ee5c:	e8 da 18 00 00       	call   c001073b <Krnl::panic(char const*)>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee70:	83 c2 2a             	add    edx,0x2a
c000ee73:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee77:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee79:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee7c:	89 01                	mov    DWORD PTR [ecx],eax
c000ee7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee81:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee86:	66 90                	xchg   ax,ax
c000ee88:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee8c:	e9 53 ff ff ff       	jmp    c000ede4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee91:	8d 76 00             	lea    esi,[esi+0x0]
c000ee94:	90                   	nop
c000ee95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee99:	83 c4 2c             	add    esp,0x2c
c000ee9c:	c2 04 00             	ret    0x4
c000ee9f:	90                   	nop

c000eea0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000eea0:	83 ec 1c             	sub    esp,0x1c
c000eea3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eea7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eeab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeb4:	88 c8                	mov    al,cl
c000eeb6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeba:	88 d0                	mov    al,dl
c000eebc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eece:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eed1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eed5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eee7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eeea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eefd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ef01:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef08:	83 c2 2a             	add    edx,0x2a
c000ef0b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef24:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef2c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef32:	8d 50 01             	lea    edx,[eax+0x1]
c000ef35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef39:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef43:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef49:	3d 00 02 00 00       	cmp    eax,0x200
c000ef4e:	75 10                	jne    c000ef60 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 e1 e2 01 c0       	push   0xc001e2e1
c000ef58:	e8 de 17 00 00       	call   c001073b <Krnl::panic(char const*)>
c000ef5d:	83 c4 10             	add    esp,0x10
c000ef60:	90                   	nop
c000ef61:	83 c4 1c             	add    esp,0x1c
c000ef64:	c3                   	ret    
c000ef65:	90                   	nop
c000ef66:	66 90                	xchg   ax,ax

c000ef68 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef68:	b8 00 00 00 00       	mov    eax,0x0
c000ef6d:	c3                   	ret    
c000ef6e:	66 90                	xchg   ax,ax

c000ef70 <ACPI::detectPCI()>:
c000ef70:	53                   	push   ebx
c000ef71:	83 ec 28             	sub    esp,0x28
c000ef74:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef79:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef7e:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000ef83:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef89:	83 e0 04             	and    eax,0x4
c000ef8c:	84 c0                	test   al,al
c000ef8e:	74 2c                	je     c000efbc <ACPI::detectPCI()+0x4c>
c000ef90:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000ef95:	83 ec 08             	sub    esp,0x8
c000ef98:	68 fe e2 01 c0       	push   0xc001e2fe
c000ef9d:	50                   	push   eax
c000ef9e:	e8 75 f8 ff ff       	call   c000e818 <findDataTable(unsigned char*, char*)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efaa:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efaf:	74 0b                	je     c000efbc <ACPI::detectPCI()+0x4c>
c000efb1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efb6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efbb:	90                   	nop
c000efbc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc8:	8a 00                	mov    al,BYTE PTR [eax]
c000efca:	3c 01                	cmp    al,0x1
c000efcc:	75 0e                	jne    c000efdc <ACPI::detectPCI()+0x6c>
c000efce:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd8:	eb 2a                	jmp    c000f004 <ACPI::detectPCI()+0x94>
c000efda:	66 90                	xchg   ax,ax
c000efdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe0:	8a 00                	mov    al,BYTE PTR [eax]
c000efe2:	3c 02                	cmp    al,0x2
c000efe4:	75 1e                	jne    c000f004 <ACPI::detectPCI()+0x94>
c000efe6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efeb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eff0:	74 12                	je     c000f004 <ACPI::detectPCI()+0x94>
c000eff2:	83 ec 0c             	sub    esp,0xc
c000eff5:	68 78 e2 01 c0       	push   0xc001e278
c000effa:	e8 3c 17 00 00       	call   c001073b <Krnl::panic(char const*)>
c000efff:	83 c4 10             	add    esp,0x10
c000f002:	66 90                	xchg   ax,ax
c000f004:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f008:	83 f0 01             	xor    eax,0x1
c000f00b:	84 c0                	test   al,al
c000f00d:	74 41                	je     c000f050 <ACPI::detectPCI()+0xe0>
c000f00f:	e8 3c 11 ff ff       	call   c0000150 <manualPCIProbe>
c000f014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f018:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f01d:	75 0d                	jne    c000f02c <ACPI::detectPCI()+0xbc>
c000f01f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f024:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f029:	eb 25                	jmp    c000f050 <ACPI::detectPCI()+0xe0>
c000f02b:	90                   	nop
c000f02c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f031:	75 1d                	jne    c000f050 <ACPI::detectPCI()+0xe0>
c000f033:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f038:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f03d:	74 11                	je     c000f050 <ACPI::detectPCI()+0xe0>
c000f03f:	83 ec 0c             	sub    esp,0xc
c000f042:	68 78 e2 01 c0       	push   0xc001e278
c000f047:	e8 ef 16 00 00       	call   c001073b <Krnl::panic(char const*)>
c000f04c:	83 c4 10             	add    esp,0x10
c000f04f:	90                   	nop
c000f050:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f055:	0f 84 85 00 00 00    	je     c000f0e0 <ACPI::detectPCI()+0x170>
c000f05b:	83 ec 0c             	sub    esp,0xc
c000f05e:	68 03 e3 01 c0       	push   0xc001e303
c000f063:	e8 4f 8e ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f068:	83 c4 10             	add    esp,0x10
c000f06b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f073:	83 ec 0c             	sub    esp,0xc
c000f076:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f07a:	e8 de 8d ff ff       	call   c0007e5d <malloc>
c000f07f:	83 c4 10             	add    esp,0x10
c000f082:	89 c3                	mov    ebx,eax
c000f084:	83 ec 0c             	sub    esp,0xc
c000f087:	53                   	push   ebx
c000f088:	e8 51 93 00 00       	call   c00183de <PCI::PCI()>
c000f08d:	83 c4 10             	add    esp,0x10
c000f090:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f098:	83 ec 08             	sub    esp,0x8
c000f09b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f09f:	50                   	push   eax
c000f0a0:	e8 87 cf ff ff       	call   c000c02c <Device::addChild(Device*)>
c000f0a5:	83 c4 10             	add    esp,0x10
c000f0a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ae:	83 c0 08             	add    eax,0x8
c000f0b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f0b8:	74 0a                	je     c000f0c4 <ACPI::detectPCI()+0x154>
c000f0ba:	ba 01 00 00 00       	mov    edx,0x1
c000f0bf:	eb 0b                	jmp    c000f0cc <ACPI::detectPCI()+0x15c>
c000f0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c4:	ba 02 00 00 00       	mov    edx,0x2
c000f0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0cc:	6a 00                	push   0x0
c000f0ce:	6a 00                	push   0x0
c000f0d0:	52                   	push   edx
c000f0d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0d5:	ff d0                	call   eax
c000f0d7:	83 c4 10             	add    esp,0x10
c000f0da:	e9 91 00 00 00       	jmp    c000f170 <ACPI::detectPCI()+0x200>
c000f0df:	90                   	nop
c000f0e0:	83 ec 0c             	sub    esp,0xc
c000f0e3:	68 1b e3 01 c0       	push   0xc001e31b
c000f0e8:	e8 ca 8d ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f0ed:	83 c4 10             	add    esp,0x10
c000f0f0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0f7:	83 ec 0c             	sub    esp,0xc
c000f0fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0fe:	e8 5a 8d ff ff       	call   c0007e5d <malloc>
c000f103:	83 c4 10             	add    esp,0x10
c000f106:	89 c3                	mov    ebx,eax
c000f108:	83 ec 0c             	sub    esp,0xc
c000f10b:	53                   	push   ebx
c000f10c:	e8 f9 9d 00 00       	call   c0018f0a <IDE::IDE()>
c000f111:	83 c4 10             	add    esp,0x10
c000f114:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f11c:	83 ec 08             	sub    esp,0x8
c000f11f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f123:	50                   	push   eax
c000f124:	e8 03 cf ff ff       	call   c000c02c <Device::addChild(Device*)>
c000f129:	83 c4 10             	add    esp,0x10
c000f12c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f130:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f13a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f13e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f147:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f14b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f158:	8b 00                	mov    eax,DWORD PTR [eax]
c000f15a:	83 c0 08             	add    eax,0x8
c000f15d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f15f:	6a 00                	push   0x0
c000f161:	6a 00                	push   0x0
c000f163:	6a 00                	push   0x0
c000f165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f169:	ff d0                	call   eax
c000f16b:	83 c4 10             	add    esp,0x10
c000f16e:	66 90                	xchg   ax,ax
c000f170:	90                   	nop
c000f171:	83 c4 28             	add    esp,0x28
c000f174:	5b                   	pop    ebx
c000f175:	c3                   	ret    
c000f176:	66 90                	xchg   ax,ax

c000f178 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f178:	83 ec 1c             	sub    esp,0x1c
c000f17b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f17f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f182:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f186:	8b 15 38 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020838
c000f18c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f190:	25 ff 00 00 00       	and    eax,0xff
c000f195:	83 ec 08             	sub    esp,0x8
c000f198:	50                   	push   eax
c000f199:	52                   	push   edx
c000f19a:	e8 af 83 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c000f19f:	83 c4 10             	add    esp,0x10
c000f1a2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1a6:	8b 15 38 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020838
c000f1ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1b0:	25 ff 00 00 00       	and    eax,0xff
c000f1b5:	83 ec 04             	sub    esp,0x4
c000f1b8:	6a 01                	push   0x1
c000f1ba:	50                   	push   eax
c000f1bb:	52                   	push   edx
c000f1bc:	e8 a3 84 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1c1:	83 c4 10             	add    esp,0x10
c000f1c4:	90                   	nop
c000f1c5:	83 c4 1c             	add    esp,0x1c
c000f1c8:	c3                   	ret    
c000f1c9:	90                   	nop
c000f1ca:	66 90                	xchg   ax,ax

c000f1cc <ACPI::sleep()>:
c000f1cc:	83 ec 0c             	sub    esp,0xc
c000f1cf:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c000f1d4:	85 c0                	test   eax,eax
c000f1d6:	74 08                	je     c000f1e0 <ACPI::sleep()+0x14>
c000f1d8:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c000f1dd:	ff d0                	call   eax
c000f1df:	90                   	nop
c000f1e0:	90                   	nop
c000f1e1:	83 c4 0c             	add    esp,0xc
c000f1e4:	c3                   	ret    
c000f1e5:	90                   	nop
c000f1e6:	66 90                	xchg   ax,ax

c000f1e8 <ACPI::open(int, int, void*)>:
c000f1e8:	57                   	push   edi
c000f1e9:	56                   	push   esi
c000f1ea:	53                   	push   ebx
c000f1eb:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1f1:	83 ec 0c             	sub    esp,0xc
c000f1f4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1fb:	e8 70 fd ff ff       	call   c000ef70 <ACPI::detectPCI()>
c000f200:	83 c4 10             	add    esp,0x10
c000f203:	83 ec 0c             	sub    esp,0xc
c000f206:	68 a0 e2 01 c0       	push   0xc001e2a0
c000f20b:	e8 a7 8c ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f210:	83 c4 10             	add    esp,0x10
c000f213:	83 ec 0c             	sub    esp,0xc
c000f216:	68 30 e3 01 c0       	push   0xc001e330
c000f21b:	e8 07 34 00 00       	call   c0012627 <Thr::loadKernelSymbolTable(char const*)>
c000f220:	83 c4 10             	add    esp,0x10
c000f223:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f22b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f236:	83 ec 0c             	sub    esp,0xc
c000f239:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f240:	e8 18 8c ff ff       	call   c0007e5d <malloc>
c000f245:	83 c4 10             	add    esp,0x10
c000f248:	89 c3                	mov    ebx,eax
c000f24a:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000f24f:	83 ec 04             	sub    esp,0x4
c000f252:	50                   	push   eax
c000f253:	68 4e e3 01 c0       	push   0xc001e34e
c000f258:	53                   	push   ebx
c000f259:	e8 04 bf ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000f25e:	83 c4 10             	add    esp,0x10
c000f261:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f268:	83 ec 08             	sub    esp,0x8
c000f26b:	6a 01                	push   0x1
c000f26d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f274:	e8 a9 bf ff ff       	call   c000b222 <File::open(FileOpenMode)>
c000f279:	83 c4 10             	add    esp,0x10
c000f27c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f283:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f28b:	75 17                	jne    c000f2a4 <ACPI::open(int, int, void*)+0xbc>
c000f28d:	83 ec 0c             	sub    esp,0xc
c000f290:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f297:	e8 e4 bf ff ff       	call   c000b280 <File::close()>
c000f29c:	83 c4 10             	add    esp,0x10
c000f29f:	eb 0b                	jmp    c000f2ac <ACPI::open(int, int, void*)+0xc4>
c000f2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2ac:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f2b4:	74 1e                	je     c000f2d4 <ACPI::open(int, int, void*)+0xec>
c000f2b6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f2bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2bf:	83 c0 08             	add    eax,0x8
c000f2c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c4:	83 ec 0c             	sub    esp,0xc
c000f2c7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2ce:	ff d0                	call   eax
c000f2d0:	83 c4 10             	add    esp,0x10
c000f2d3:	90                   	nop
c000f2d4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f2db:	83 f0 01             	xor    eax,0x1
c000f2de:	84 c0                	test   al,al
c000f2e0:	74 42                	je     c000f324 <ACPI::open(int, int, void*)+0x13c>
c000f2e2:	83 ec 0c             	sub    esp,0xc
c000f2e5:	68 6c e3 01 c0       	push   0xc001e36c
c000f2ea:	e8 c8 8b ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f2ef:	83 c4 10             	add    esp,0x10
c000f2f2:	83 ec 04             	sub    esp,0x4
c000f2f5:	6a 0c                	push   0xc
c000f2f7:	68 87 e3 01 c0       	push   0xc001e387
c000f2fc:	68 98 e3 01 c0       	push   0xc001e398
c000f301:	e8 20 1b 00 00       	call   c0010e26 <Reg::readIntWithDefault(char*, char*, int)>
c000f306:	83 c4 10             	add    esp,0x10
c000f309:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f310:	83 ec 0c             	sub    esp,0xc
c000f313:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f31a:	e8 84 a8 ff ff       	call   c0009ba3 <Virt::setupPageSwapping(int)>
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	66 90                	xchg   ax,ax
c000f324:	83 ec 0c             	sub    esp,0xc
c000f327:	68 20 d4 01 c0       	push   0xc001d420
c000f32c:	e8 86 8b ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f331:	83 c4 10             	add    esp,0x10
c000f334:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f33b:	83 ec 08             	sub    esp,0x8
c000f33e:	6a 12                	push   0x12
c000f340:	50                   	push   eax
c000f341:	e8 fe cf ff ff       	call   c000c344 <getDevicesOfType(DeviceType)>
c000f346:	83 c4 0c             	add    esp,0xc
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	83 ec 0c             	sub    esp,0xc
c000f34f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f356:	50                   	push   eax
c000f357:	e8 c0 d4 00 00       	call   c001c81c <LinkedList<Device>::isEmpty()>
c000f35c:	83 c4 10             	add    esp,0x10
c000f35f:	83 f0 01             	xor    eax,0x1
c000f362:	84 c0                	test   al,al
c000f364:	0f 84 46 01 00 00    	je     c000f4b0 <ACPI::open(int, int, void*)+0x2c8>
c000f36a:	83 ec 0c             	sub    esp,0xc
c000f36d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f374:	50                   	push   eax
c000f375:	e8 be d4 00 00       	call   c001c838 <LinkedList<Device>::getFirstElement()>
c000f37a:	83 c4 10             	add    esp,0x10
c000f37d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f384:	83 ec 0c             	sub    esp,0xc
c000f387:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f38e:	50                   	push   eax
c000f38f:	e8 ac d4 00 00       	call   c001c840 <LinkedList<Device>::removeFirst()>
c000f394:	83 c4 10             	add    esp,0x10
c000f397:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f39e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f3a5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3b0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f3b6:	ba 09 00 00 00       	mov    edx,0x9
c000f3bb:	fc                   	cld    
c000f3bc:	89 c7                	mov    edi,eax
c000f3be:	89 de                	mov    esi,ebx
c000f3c0:	89 d1                	mov    ecx,edx
c000f3c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3c4:	83 ec 08             	sub    esp,0x8
c000f3c7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f3cb:	50                   	push   eax
c000f3cc:	83 ec 24             	sub    esp,0x24
c000f3cf:	89 e0                	mov    eax,esp
c000f3d1:	89 c3                	mov    ebx,eax
c000f3d3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f3d7:	ba 09 00 00 00       	mov    edx,0x9
c000f3dc:	89 df                	mov    edi,ebx
c000f3de:	89 c6                	mov    esi,eax
c000f3e0:	89 d1                	mov    ecx,edx
c000f3e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3e4:	e8 d7 94 00 00       	call   c00188c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3e9:	83 c4 30             	add    esp,0x30
c000f3ec:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f3f3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3fb:	0f 84 4b ff ff ff    	je     c000f34c <ACPI::open(int, int, void*)+0x164>
c000f401:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f40c:	83 ec 0c             	sub    esp,0xc
c000f40f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f416:	e8 42 8a ff ff       	call   c0007e5d <malloc>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	89 c3                	mov    ebx,eax
c000f420:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000f425:	83 ec 04             	sub    esp,0x4
c000f428:	50                   	push   eax
c000f429:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f430:	53                   	push   ebx
c000f431:	e8 2c bd ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000f436:	83 c4 10             	add    esp,0x10
c000f439:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f440:	83 ec 0c             	sub    esp,0xc
c000f443:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f44a:	e8 41 c0 ff ff       	call   c000b490 <File::exists()>
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	84 c0                	test   al,al
c000f454:	74 2a                	je     c000f480 <ACPI::open(int, int, void*)+0x298>
c000f456:	83 ec 08             	sub    esp,0x8
c000f459:	6a 01                	push   0x1
c000f45b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f462:	e8 37 3c 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000f467:	83 c4 10             	add    esp,0x10
c000f46a:	83 ec 08             	sub    esp,0x8
c000f46d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f474:	50                   	push   eax
c000f475:	e8 55 3e 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	8d 76 00             	lea    esi,[esi+0x0]
c000f480:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f488:	0f 84 be fe ff ff    	je     c000f34c <ACPI::open(int, int, void*)+0x164>
c000f48e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f495:	8b 00                	mov    eax,DWORD PTR [eax]
c000f497:	83 c0 08             	add    eax,0x8
c000f49a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49c:	83 ec 0c             	sub    esp,0xc
c000f49f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4a6:	ff d0                	call   eax
c000f4a8:	83 c4 10             	add    esp,0x10
c000f4ab:	e9 9c fe ff ff       	jmp    c000f34c <ACPI::open(int, int, void*)+0x164>
c000f4b0:	83 ec 0c             	sub    esp,0xc
c000f4b3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f4ba:	50                   	push   eax
c000f4bb:	e8 58 d3 00 00       	call   c001c818 <LinkedList<Device>::~LinkedList()>
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	8b 1d 38 08 02 c0    	mov    ebx,DWORD PTR ds:0xc0020838
c000f4c9:	83 ec 08             	sub    esp,0x8
c000f4cc:	6a 01                	push   0x1
c000f4ce:	68 9f e3 01 c0       	push   0xc001e39f
c000f4d3:	e8 c6 3b 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000f4d8:	83 c4 10             	add    esp,0x10
c000f4db:	83 ec 08             	sub    esp,0x8
c000f4de:	53                   	push   ebx
c000f4df:	50                   	push   eax
c000f4e0:	e8 ea 3d 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000f4e5:	83 c4 10             	add    esp,0x10
c000f4e8:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000f4ed:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4f3:	83 e0 04             	and    eax,0x4
c000f4f6:	84 c0                	test   al,al
c000f4f8:	0f 84 16 01 00 00    	je     c000f614 <ACPI::open(int, int, void*)+0x42c>
c000f4fe:	83 ec 0c             	sub    esp,0xc
c000f501:	68 bc e3 01 c0       	push   0xc001e3bc
c000f506:	e8 ac 89 ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c000f50b:	83 c4 10             	add    esp,0x10
c000f50e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f519:	83 ec 0c             	sub    esp,0xc
c000f51c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f523:	e8 35 89 ff ff       	call   c0007e5d <malloc>
c000f528:	83 c4 10             	add    esp,0x10
c000f52b:	89 c3                	mov    ebx,eax
c000f52d:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c000f532:	83 ec 04             	sub    esp,0x4
c000f535:	50                   	push   eax
c000f536:	68 d9 e3 01 c0       	push   0xc001e3d9
c000f53b:	53                   	push   ebx
c000f53c:	e8 21 bc ff ff       	call   c000b162 <File::File(char const*, Process*)>
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f54b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f553:	74 1b                	je     c000f570 <ACPI::open(int, int, void*)+0x388>
c000f555:	83 ec 0c             	sub    esp,0xc
c000f558:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f55f:	e8 2c bf ff ff       	call   c000b490 <File::exists()>
c000f564:	83 c4 10             	add    esp,0x10
c000f567:	84 c0                	test   al,al
c000f569:	74 05                	je     c000f570 <ACPI::open(int, int, void*)+0x388>
c000f56b:	b0 01                	mov    al,0x1
c000f56d:	eb 05                	jmp    c000f574 <ACPI::open(int, int, void*)+0x38c>
c000f56f:	90                   	nop
c000f570:	b0 00                	mov    al,0x0
c000f572:	66 90                	xchg   ax,ax
c000f574:	84 c0                	test   al,al
c000f576:	74 28                	je     c000f5a0 <ACPI::open(int, int, void*)+0x3b8>
c000f578:	83 ec 08             	sub    esp,0x8
c000f57b:	6a 01                	push   0x1
c000f57d:	68 d9 e3 01 c0       	push   0xc001e3d9
c000f582:	e8 17 3b 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c000f587:	83 c4 10             	add    esp,0x10
c000f58a:	83 ec 08             	sub    esp,0x8
c000f58d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f594:	50                   	push   eax
c000f595:	e8 35 3d 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	8d 76 00             	lea    esi,[esi+0x0]
c000f5a0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5a8:	74 2a                	je     c000f5d4 <ACPI::open(int, int, void*)+0x3ec>
c000f5aa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5b2:	74 20                	je     c000f5d4 <ACPI::open(int, int, void*)+0x3ec>
c000f5b4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f5bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bd:	83 c0 08             	add    eax,0x8
c000f5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c2:	83 ec 0c             	sub    esp,0xc
c000f5c5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5cc:	ff d0                	call   eax
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	a1 48 30 02 c0       	mov    eax,ds:0xc0023048
c000f5d9:	83 ec 08             	sub    esp,0x8
c000f5dc:	68 f6 e3 01 c0       	push   0xc001e3f6
c000f5e1:	50                   	push   eax
c000f5e2:	e8 31 f2 ff ff       	call   c000e818 <findDataTable(unsigned char*, char*)>
c000f5e7:	83 c4 10             	add    esp,0x10
c000f5ea:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f5f1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5f9:	74 19                	je     c000f614 <ACPI::open(int, int, void*)+0x42c>
c000f5fb:	83 ec 08             	sub    esp,0x8
c000f5fe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f605:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f60c:	e8 67 fb ff ff       	call   c000f178 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f611:	83 c4 10             	add    esp,0x10
c000f614:	b8 00 00 00 00       	mov    eax,0x0
c000f619:	81 c4 70 01 00 00    	add    esp,0x170
c000f61f:	5b                   	pop    ebx
c000f620:	5e                   	pop    esi
c000f621:	5f                   	pop    edi
c000f622:	c3                   	ret    
c000f623:	90                   	nop

c000f624 <CPU::close(int, int, void*)>:
c000f624:	31 c0                	xor    eax,eax
c000f626:	c3                   	ret    
c000f627:	90                   	nop

c000f628 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f628:	60                   	pusha  
c000f629:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f62d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f631:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f635:	9c                   	pushf  
c000f636:	fa                   	cli    
c000f637:	0f 09                	wbinvd 
c000f639:	0f 30                	wrmsr  
c000f63b:	9d                   	popf   
c000f63c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f640:	89 02                	mov    DWORD PTR [edx],eax
c000f642:	61                   	popa   
c000f643:	c3                   	ret    

c000f644 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f644:	60                   	pusha  
c000f645:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f649:	9c                   	pushf  
c000f64a:	fa                   	cli    
c000f64b:	0f 09                	wbinvd 
c000f64d:	31 c0                	xor    eax,eax
c000f64f:	31 d2                	xor    edx,edx
c000f651:	0f 32                	rdmsr  
c000f653:	9d                   	popf   
c000f654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f658:	89 02                	mov    DWORD PTR [edx],eax
c000f65a:	61                   	popa   
c000f65b:	c3                   	ret    

c000f65c <CPU::AMD_K6_writeback(int, int, int)>:
c000f65c:	56                   	push   esi
c000f65d:	53                   	push   ebx
c000f65e:	83 ec 10             	sub    esp,0x10
c000f661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f665:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f66a:	75 5d                	jne    c000f6c9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f66c:	83 f8 08             	cmp    eax,0x8
c000f66f:	75 09                	jne    c000f67a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f671:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f676:	7e 13                	jle    c000f68b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f678:	eb 30                	jmp    c000f6aa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f67a:	83 f8 06             	cmp    eax,0x6
c000f67d:	7c 4a                	jl     c000f6c9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f67f:	83 f8 07             	cmp    eax,0x7
c000f682:	7e 07                	jle    c000f68b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f684:	83 f8 09             	cmp    eax,0x9
c000f687:	74 21                	je     c000f6aa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f689:	eb 3e                	jmp    c000f6c9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f68b:	89 e6                	mov    esi,esp
c000f68d:	8b 1d 5c 08 02 c0    	mov    ebx,DWORD PTR ds:0xc002085c
c000f693:	56                   	push   esi
c000f694:	c1 eb 15             	shr    ebx,0x15
c000f697:	68 82 00 00 c0       	push   0xc0000082
c000f69c:	83 e3 7e             	and    ebx,0x7e
c000f69f:	e8 a0 ff ff ff       	call   c000f644 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6a4:	56                   	push   esi
c000f6a5:	6a 00                	push   0x0
c000f6a7:	53                   	push   ebx
c000f6a8:	eb 12                	jmp    c000f6bc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f6aa:	89 e3                	mov    ebx,esp
c000f6ac:	53                   	push   ebx
c000f6ad:	68 82 00 00 c0       	push   0xc0000082
c000f6b2:	e8 8d ff ff ff       	call   c000f644 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6b7:	53                   	push   ebx
c000f6b8:	6a 00                	push   0x0
c000f6ba:	6a 00                	push   0x0
c000f6bc:	68 82 00 00 c0       	push   0xc0000082
c000f6c1:	e8 62 ff ff ff       	call   c000f628 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f6c6:	83 c4 18             	add    esp,0x18
c000f6c9:	83 c4 10             	add    esp,0x10
c000f6cc:	5b                   	pop    ebx
c000f6cd:	5e                   	pop    esi
c000f6ce:	c3                   	ret    
c000f6cf:	90                   	nop

c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f6d0:	55                   	push   ebp
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f6dc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f6e0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f6e4:	39 05 b0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7b0,eax
c000f6ea:	75 23                	jne    c000f70f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6ec:	a1 ac 32 02 c0       	mov    eax,ds:0xc00232ac
c000f6f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6f5:	89 06                	mov    DWORD PTR [esi],eax
c000f6f7:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c000f6fc:	89 07                	mov    DWORD PTR [edi],eax
c000f6fe:	a1 a4 32 02 c0       	mov    eax,ds:0xc00232a4
c000f703:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f706:	a1 a0 32 02 c0       	mov    eax,ds:0xc00232a0
c000f70b:	89 02                	mov    DWORD PTR [edx],eax
c000f70d:	eb 3f                	jmp    c000f74e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f70f:	31 c9                	xor    ecx,ecx
c000f711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f715:	0f a2                	cpuid  
c000f717:	89 06                	mov    DWORD PTR [esi],eax
c000f719:	89 1f                	mov    DWORD PTR [edi],ebx
c000f71b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f71f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f722:	89 10                	mov    DWORD PTR [eax],edx
c000f724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f728:	a3 b0 f7 01 c0       	mov    ds:0xc001f7b0,eax
c000f72d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f72f:	a3 ac 32 02 c0       	mov    ds:0xc00232ac,eax
c000f734:	8b 07                	mov    eax,DWORD PTR [edi]
c000f736:	a3 a8 32 02 c0       	mov    ds:0xc00232a8,eax
c000f73b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f73e:	a3 a4 32 02 c0       	mov    ds:0xc00232a4,eax
c000f743:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f747:	8b 00                	mov    eax,DWORD PTR [eax]
c000f749:	a3 a0 32 02 c0       	mov    ds:0xc00232a0,eax
c000f74e:	5b                   	pop    ebx
c000f74f:	5e                   	pop    esi
c000f750:	5f                   	pop    edi
c000f751:	5d                   	pop    ebp
c000f752:	c3                   	ret    
c000f753:	90                   	nop

c000f754 <CPU::cpuidCheckEDX(unsigned int)>:
c000f754:	83 ec 10             	sub    esp,0x10
c000f757:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f75b:	50                   	push   eax
c000f75c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f760:	50                   	push   eax
c000f761:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f765:	50                   	push   eax
c000f766:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76a:	50                   	push   eax
c000f76b:	6a 01                	push   0x1
c000f76d:	e8 5e ff ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f772:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f776:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f77a:	0f 95 c0             	setne  al
c000f77d:	83 c4 24             	add    esp,0x24
c000f780:	c3                   	ret    
c000f781:	90                   	nop

c000f782 <CPU::cpuidCheckECX(unsigned int)>:
c000f782:	83 ec 10             	sub    esp,0x10
c000f785:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f789:	50                   	push   eax
c000f78a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78e:	50                   	push   eax
c000f78f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f793:	50                   	push   eax
c000f794:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f798:	50                   	push   eax
c000f799:	6a 01                	push   0x1
c000f79b:	e8 30 ff ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7a8:	0f 95 c0             	setne  al
c000f7ab:	83 c4 24             	add    esp,0x24
c000f7ae:	c3                   	ret    
c000f7af:	90                   	nop

c000f7b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f7b0:	83 ec 10             	sub    esp,0x10
c000f7b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7b7:	50                   	push   eax
c000f7b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7bc:	50                   	push   eax
c000f7bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c1:	50                   	push   eax
c000f7c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c6:	50                   	push   eax
c000f7c7:	6a 07                	push   0x7
c000f7c9:	e8 02 ff ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7d2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f7d6:	0f 95 c0             	setne  al
c000f7d9:	83 c4 24             	add    esp,0x24
c000f7dc:	c3                   	ret    
c000f7dd:	90                   	nop

c000f7de <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f7de:	83 ec 10             	sub    esp,0x10
c000f7e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7e5:	50                   	push   eax
c000f7e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ea:	50                   	push   eax
c000f7eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ef:	50                   	push   eax
c000f7f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f4:	50                   	push   eax
c000f7f5:	6a 07                	push   0x7
c000f7f7:	e8 d4 fe ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f800:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f804:	0f 95 c0             	setne  al
c000f807:	83 c4 24             	add    esp,0x24
c000f80a:	c3                   	ret    
c000f80b:	90                   	nop

c000f80c <CPU::CPU()>:
c000f80c:	83 ec 0c             	sub    esp,0xc
c000f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f813:	83 ec 08             	sub    esp,0x8
c000f816:	68 19 e5 01 c0       	push   0xc001e519
c000f81b:	50                   	push   eax
c000f81c:	e8 a3 c9 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c000f821:	83 c4 10             	add    esp,0x10
c000f824:	ba a0 e5 01 c0       	mov    edx,0xc001e5a0
c000f829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f82d:	89 10                	mov    DWORD PTR [eax],edx
c000f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f833:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f841:	05 78 01 00 00       	add    eax,0x178
c000f846:	83 ec 0c             	sub    esp,0xc
c000f849:	50                   	push   eax
c000f84a:	e8 d3 7e ff ff       	call   c0007722 <GDT::GDT()>
c000f84f:	83 c4 10             	add    esp,0x10
c000f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f856:	05 7c 09 00 00       	add    eax,0x97c
c000f85b:	83 ec 0c             	sub    esp,0xc
c000f85e:	50                   	push   eax
c000f85f:	e8 f4 80 ff ff       	call   c0007958 <IDT::IDT()>
c000f864:	83 c4 10             	add    esp,0x10
c000f867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f86b:	05 7c 11 00 00       	add    eax,0x117c
c000f870:	83 ec 0c             	sub    esp,0xc
c000f873:	50                   	push   eax
c000f874:	e8 63 9a ff ff       	call   c00092dc <TSS::TSS()>
c000f879:	83 c4 10             	add    esp,0x10
c000f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f880:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f895:	90                   	nop
c000f896:	83 c4 0c             	add    esp,0xc
c000f899:	c3                   	ret    

c000f89a <CPU::displayFeatures()>:
c000f89a:	c3                   	ret    
c000f89b:	90                   	nop

c000f89c <CPU::detectFeatures()>:
c000f89c:	55                   	push   ebp
c000f89d:	57                   	push   edi
c000f89e:	56                   	push   esi
c000f89f:	53                   	push   ebx
c000f8a0:	83 ec 30             	sub    esp,0x30
c000f8a3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f8a7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f8b1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f8b8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f8be:	6a 0d                	push   0xd
c000f8c0:	6a 00                	push   0x0
c000f8c2:	55                   	push   ebp
c000f8c3:	e8 28 0c ff ff       	call   c00004f0 <memset>
c000f8c8:	83 c4 10             	add    esp,0x10
c000f8cb:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000f8d0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f8d7:	0f 84 d5 05 00 00    	je     c000feb2 <CPU::detectFeatures()+0x616>
c000f8dd:	83 ec 0c             	sub    esp,0xc
c000f8e0:	89 ef                	mov    edi,ebp
c000f8e2:	6a 10                	push   0x10
c000f8e4:	e8 6b fe ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f8e9:	83 e0 01             	and    eax,0x1
c000f8ec:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8f5:	83 e0 fd             	and    eax,0xfffffffd
c000f8f8:	09 d0                	or     eax,edx
c000f8fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f900:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f907:	e8 48 fe ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f90c:	83 e0 01             	and    eax,0x1
c000f90f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f916:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f91c:	83 e0 fb             	and    eax,0xfffffffb
c000f91f:	09 d0                	or     eax,edx
c000f921:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f927:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f92e:	e8 21 fe ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f933:	83 e0 01             	and    eax,0x1
c000f936:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f93d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f943:	83 e0 f7             	and    eax,0xfffffff7
c000f946:	09 d0                	or     eax,edx
c000f948:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f94e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f955:	e8 fa fd ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f95a:	83 e0 01             	and    eax,0x1
c000f95d:	c1 e0 04             	shl    eax,0x4
c000f960:	88 c2                	mov    dl,al
c000f962:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f968:	83 e0 ef             	and    eax,0xffffffef
c000f96b:	09 d0                	or     eax,edx
c000f96d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f973:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f97a:	e8 d5 fd ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f97f:	83 e0 01             	and    eax,0x1
c000f982:	c1 e0 05             	shl    eax,0x5
c000f985:	88 c2                	mov    dl,al
c000f987:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f98d:	83 e0 df             	and    eax,0xffffffdf
c000f990:	09 d0                	or     eax,edx
c000f992:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f998:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f99f:	e8 b0 fd ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f9a4:	83 e0 01             	and    eax,0x1
c000f9a7:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9aa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9b0:	83 e0 fd             	and    eax,0xfffffffd
c000f9b3:	09 d0                	or     eax,edx
c000f9b5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9bb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f9c2:	e8 8d fd ff ff       	call   c000f754 <CPU::cpuidCheckEDX(unsigned int)>
c000f9c7:	83 e0 01             	and    eax,0x1
c000f9ca:	c1 e0 06             	shl    eax,0x6
c000f9cd:	88 c2                	mov    dl,al
c000f9cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9d5:	83 e0 bf             	and    eax,0xffffffbf
c000f9d8:	09 d0                	or     eax,edx
c000f9da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9e0:	58                   	pop    eax
c000f9e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9e5:	50                   	push   eax
c000f9e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ea:	50                   	push   eax
c000f9eb:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9ef:	56                   	push   esi
c000f9f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9f4:	50                   	push   eax
c000f9f5:	6a 00                	push   0x0
c000f9f7:	e8 d4 fc ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9fc:	b8 04 00 00 00       	mov    eax,0x4
c000fa01:	89 c1                	mov    ecx,eax
c000fa03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa05:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa0b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa0f:	89 c1                	mov    ecx,eax
c000fa11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa13:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa19:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa1d:	89 c1                	mov    ecx,eax
c000fa1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa21:	83 c4 18             	add    esp,0x18
c000fa24:	68 28 e4 01 c0       	push   0xc001e428
c000fa29:	55                   	push   ebp
c000fa2a:	e8 d1 0c ff ff       	call   c0000700 <strcmp>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	85 c0                	test   eax,eax
c000fa34:	75 0f                	jne    c000fa45 <CPU::detectFeatures()+0x1a9>
c000fa36:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa40:	e9 22 02 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fa45:	50                   	push   eax
c000fa46:	50                   	push   eax
c000fa47:	68 35 e4 01 c0       	push   0xc001e435
c000fa4c:	55                   	push   ebp
c000fa4d:	e8 ae 0c ff ff       	call   c0000700 <strcmp>
c000fa52:	83 c4 10             	add    esp,0x10
c000fa55:	85 c0                	test   eax,eax
c000fa57:	74 dd                	je     c000fa36 <CPU::detectFeatures()+0x19a>
c000fa59:	50                   	push   eax
c000fa5a:	50                   	push   eax
c000fa5b:	68 42 e4 01 c0       	push   0xc001e442
c000fa60:	55                   	push   ebp
c000fa61:	e8 9a 0c ff ff       	call   c0000700 <strcmp>
c000fa66:	83 c4 10             	add    esp,0x10
c000fa69:	85 c0                	test   eax,eax
c000fa6b:	74 2a                	je     c000fa97 <CPU::detectFeatures()+0x1fb>
c000fa6d:	50                   	push   eax
c000fa6e:	50                   	push   eax
c000fa6f:	68 4f e4 01 c0       	push   0xc001e44f
c000fa74:	55                   	push   ebp
c000fa75:	e8 86 0c ff ff       	call   c0000700 <strcmp>
c000fa7a:	83 c4 10             	add    esp,0x10
c000fa7d:	85 c0                	test   eax,eax
c000fa7f:	74 16                	je     c000fa97 <CPU::detectFeatures()+0x1fb>
c000fa81:	50                   	push   eax
c000fa82:	50                   	push   eax
c000fa83:	68 5c e4 01 c0       	push   0xc001e45c
c000fa88:	55                   	push   ebp
c000fa89:	e8 72 0c ff ff       	call   c0000700 <strcmp>
c000fa8e:	83 c4 10             	add    esp,0x10
c000fa91:	85 c0                	test   eax,eax
c000fa93:	74 48                	je     c000fadd <CPU::detectFeatures()+0x241>
c000fa95:	eb 0f                	jmp    c000faa6 <CPU::detectFeatures()+0x20a>
c000fa97:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000faa1:	e9 c1 01 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000faa6:	50                   	push   eax
c000faa7:	50                   	push   eax
c000faa8:	68 69 e4 01 c0       	push   0xc001e469
c000faad:	55                   	push   ebp
c000faae:	e8 4d 0c ff ff       	call   c0000700 <strcmp>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	85 c0                	test   eax,eax
c000fab8:	74 23                	je     c000fadd <CPU::detectFeatures()+0x241>
c000faba:	57                   	push   edi
c000fabb:	57                   	push   edi
c000fabc:	68 76 e4 01 c0       	push   0xc001e476
c000fac1:	55                   	push   ebp
c000fac2:	e8 39 0c ff ff       	call   c0000700 <strcmp>
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	85 c0                	test   eax,eax
c000facc:	75 1e                	jne    c000faec <CPU::detectFeatures()+0x250>
c000face:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fad8:	e9 8a 01 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fadd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fae7:	e9 7b 01 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000faec:	56                   	push   esi
c000faed:	56                   	push   esi
c000faee:	68 83 e4 01 c0       	push   0xc001e483
c000faf3:	55                   	push   ebp
c000faf4:	e8 07 0c ff ff       	call   c0000700 <strcmp>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	85 c0                	test   eax,eax
c000fafe:	75 0f                	jne    c000fb0f <CPU::detectFeatures()+0x273>
c000fb00:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb0a:	e9 58 01 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fb0f:	51                   	push   ecx
c000fb10:	51                   	push   ecx
c000fb11:	68 42 e4 01 c0       	push   0xc001e442
c000fb16:	55                   	push   ebp
c000fb17:	e8 e4 0b ff ff       	call   c0000700 <strcmp>
c000fb1c:	83 c4 10             	add    esp,0x10
c000fb1f:	85 c0                	test   eax,eax
c000fb21:	75 0f                	jne    c000fb32 <CPU::detectFeatures()+0x296>
c000fb23:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb2d:	e9 35 01 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fb32:	52                   	push   edx
c000fb33:	52                   	push   edx
c000fb34:	68 90 e4 01 c0       	push   0xc001e490
c000fb39:	55                   	push   ebp
c000fb3a:	e8 c1 0b ff ff       	call   c0000700 <strcmp>
c000fb3f:	83 c4 10             	add    esp,0x10
c000fb42:	85 c0                	test   eax,eax
c000fb44:	75 0f                	jne    c000fb55 <CPU::detectFeatures()+0x2b9>
c000fb46:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb50:	e9 12 01 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fb55:	50                   	push   eax
c000fb56:	50                   	push   eax
c000fb57:	68 9d e4 01 c0       	push   0xc001e49d
c000fb5c:	55                   	push   ebp
c000fb5d:	e8 9e 0b ff ff       	call   c0000700 <strcmp>
c000fb62:	83 c4 10             	add    esp,0x10
c000fb65:	85 c0                	test   eax,eax
c000fb67:	75 0f                	jne    c000fb78 <CPU::detectFeatures()+0x2dc>
c000fb69:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb73:	e9 ef 00 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fb78:	50                   	push   eax
c000fb79:	50                   	push   eax
c000fb7a:	68 aa e4 01 c0       	push   0xc001e4aa
c000fb7f:	55                   	push   ebp
c000fb80:	e8 7b 0b ff ff       	call   c0000700 <strcmp>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	85 c0                	test   eax,eax
c000fb8a:	75 0f                	jne    c000fb9b <CPU::detectFeatures()+0x2ff>
c000fb8c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb96:	e9 cc 00 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fb9b:	50                   	push   eax
c000fb9c:	50                   	push   eax
c000fb9d:	68 b7 e4 01 c0       	push   0xc001e4b7
c000fba2:	55                   	push   ebp
c000fba3:	e8 58 0b ff ff       	call   c0000700 <strcmp>
c000fba8:	83 c4 10             	add    esp,0x10
c000fbab:	85 c0                	test   eax,eax
c000fbad:	75 0f                	jne    c000fbbe <CPU::detectFeatures()+0x322>
c000fbaf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fbb9:	e9 a9 00 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fbbe:	50                   	push   eax
c000fbbf:	50                   	push   eax
c000fbc0:	68 c4 e4 01 c0       	push   0xc001e4c4
c000fbc5:	55                   	push   ebp
c000fbc6:	e8 35 0b ff ff       	call   c0000700 <strcmp>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	85 c0                	test   eax,eax
c000fbd0:	75 0f                	jne    c000fbe1 <CPU::detectFeatures()+0x345>
c000fbd2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fbdc:	e9 86 00 00 00       	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fbe1:	50                   	push   eax
c000fbe2:	50                   	push   eax
c000fbe3:	68 d1 e4 01 c0       	push   0xc001e4d1
c000fbe8:	55                   	push   ebp
c000fbe9:	e8 12 0b ff ff       	call   c0000700 <strcmp>
c000fbee:	83 c4 10             	add    esp,0x10
c000fbf1:	85 c0                	test   eax,eax
c000fbf3:	75 0c                	jne    c000fc01 <CPU::detectFeatures()+0x365>
c000fbf5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbff:	eb 66                	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fc01:	50                   	push   eax
c000fc02:	50                   	push   eax
c000fc03:	68 de e4 01 c0       	push   0xc001e4de
c000fc08:	55                   	push   ebp
c000fc09:	e8 f2 0a ff ff       	call   c0000700 <strcmp>
c000fc0e:	83 c4 10             	add    esp,0x10
c000fc11:	85 c0                	test   eax,eax
c000fc13:	75 0c                	jne    c000fc21 <CPU::detectFeatures()+0x385>
c000fc15:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc1f:	eb 46                	jmp    c000fc67 <CPU::detectFeatures()+0x3cb>
c000fc21:	57                   	push   edi
c000fc22:	57                   	push   edi
c000fc23:	68 eb e4 01 c0       	push   0xc001e4eb
c000fc28:	55                   	push   ebp
c000fc29:	e8 d2 0a ff ff       	call   c0000700 <strcmp>
c000fc2e:	83 c4 10             	add    esp,0x10
c000fc31:	85 c0                	test   eax,eax
c000fc33:	74 e0                	je     c000fc15 <CPU::detectFeatures()+0x379>
c000fc35:	56                   	push   esi
c000fc36:	56                   	push   esi
c000fc37:	68 f8 e4 01 c0       	push   0xc001e4f8
c000fc3c:	55                   	push   ebp
c000fc3d:	e8 be 0a ff ff       	call   c0000700 <strcmp>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	85 c0                	test   eax,eax
c000fc47:	74 cc                	je     c000fc15 <CPU::detectFeatures()+0x379>
c000fc49:	51                   	push   ecx
c000fc4a:	51                   	push   ecx
c000fc4b:	68 05 e5 01 c0       	push   0xc001e505
c000fc50:	55                   	push   ebp
c000fc51:	e8 aa 0a ff ff       	call   c0000700 <strcmp>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	85 c0                	test   eax,eax
c000fc5b:	74 b8                	je     c000fc15 <CPU::detectFeatures()+0x379>
c000fc5d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc67:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc6c:	0f 86 be 00 00 00    	jbe    c000fd30 <CPU::detectFeatures()+0x494>
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	68 80 00 00 00       	push   0x80
c000fc7a:	e8 31 fb ff ff       	call   c000f7b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc7f:	83 e0 01             	and    eax,0x1
c000fc82:	c1 e0 06             	shl    eax,0x6
c000fc85:	88 c2                	mov    dl,al
c000fc87:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc8d:	83 e0 bf             	and    eax,0xffffffbf
c000fc90:	09 d0                	or     eax,edx
c000fc92:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc98:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc9f:	e8 0c fb ff ff       	call   c000f7b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fca4:	83 e0 01             	and    eax,0x1
c000fca7:	c1 e0 04             	shl    eax,0x4
c000fcaa:	88 c2                	mov    dl,al
c000fcac:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcb2:	83 e0 ef             	and    eax,0xffffffef
c000fcb5:	09 d0                	or     eax,edx
c000fcb7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcbd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fcc4:	e8 e7 fa ff ff       	call   c000f7b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcc9:	c1 e0 07             	shl    eax,0x7
c000fccc:	88 c2                	mov    dl,al
c000fcce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcd4:	83 e0 7f             	and    eax,0x7f
c000fcd7:	09 d0                	or     eax,edx
c000fcd9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fcdf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fce6:	e8 f3 fa ff ff       	call   c000f7de <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fceb:	83 e0 01             	and    eax,0x1
c000fcee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fcf5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcfb:	83 e0 f7             	and    eax,0xfffffff7
c000fcfe:	09 d0                	or     eax,edx
c000fd00:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd06:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd0d:	e8 cc fa ff ff       	call   c000f7de <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	83 e0 01             	and    eax,0x1
c000fd18:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd1f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd25:	83 e0 fb             	and    eax,0xfffffffb
c000fd28:	09 d0                	or     eax,edx
c000fd2a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd37:	50                   	push   eax
c000fd38:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd3c:	50                   	push   eax
c000fd3d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd41:	56                   	push   esi
c000fd42:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd46:	50                   	push   eax
c000fd47:	6a 01                	push   0x1
c000fd49:	e8 82 f9 ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd4e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd52:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd58:	88 ca                	mov    dl,cl
c000fd5a:	83 e0 f0             	and    eax,0xfffffff0
c000fd5d:	83 e2 0f             	and    edx,0xf
c000fd60:	09 d0                	or     eax,edx
c000fd62:	88 ca                	mov    dl,cl
c000fd64:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd6a:	c0 ea 04             	shr    dl,0x4
c000fd6d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd71:	0f b6 c2             	movzx  eax,dl
c000fd74:	83 c4 20             	add    esp,0x20
c000fd77:	c1 e0 06             	shl    eax,0x6
c000fd7a:	89 c7                	mov    edi,eax
c000fd7c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd82:	66 25 3f c0          	and    ax,0xc03f
c000fd86:	09 f8                	or     eax,edi
c000fd88:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd8f:	89 c8                	mov    eax,ecx
c000fd91:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd98:	c1 e8 08             	shr    eax,0x8
c000fd9b:	83 e5 3f             	and    ebp,0x3f
c000fd9e:	83 e0 0f             	and    eax,0xf
c000fda1:	89 c7                	mov    edi,eax
c000fda3:	c1 e7 06             	shl    edi,0x6
c000fda6:	09 ef                	or     edi,ebp
c000fda8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fdaf:	89 fa                	mov    edx,edi
c000fdb1:	83 e5 c0             	and    ebp,0xffffffc0
c000fdb4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdba:	88 c2                	mov    dl,al
c000fdbc:	c0 ea 02             	shr    dl,0x2
c000fdbf:	89 d7                	mov    edi,edx
c000fdc1:	09 ef                	or     edi,ebp
c000fdc3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fdc9:	89 fa                	mov    edx,edi
c000fdcb:	83 e5 cf             	and    ebp,0xffffffcf
c000fdce:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fdd4:	89 cf                	mov    edi,ecx
c000fdd6:	c1 ef 0c             	shr    edi,0xc
c000fdd9:	83 e7 03             	and    edi,0x3
c000fddc:	c1 e7 04             	shl    edi,0x4
c000fddf:	09 ef                	or     edi,ebp
c000fde1:	3c 06                	cmp    al,0x6
c000fde3:	89 fa                	mov    edx,edi
c000fde5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fdeb:	74 04                	je     c000fdf1 <CPU::detectFeatures()+0x555>
c000fded:	3c 0f                	cmp    al,0xf
c000fdef:	75 5c                	jne    c000fe4d <CPU::detectFeatures()+0x5b1>
c000fdf1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fdf5:	89 cf                	mov    edi,ecx
c000fdf7:	c1 ef 10             	shr    edi,0x10
c000fdfa:	c1 e7 04             	shl    edi,0x4
c000fdfd:	09 fa                	or     edx,edi
c000fdff:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fe05:	0f b6 d2             	movzx  edx,dl
c000fe08:	66 81 e7 3f c0       	and    di,0xc03f
c000fe0d:	c1 e2 06             	shl    edx,0x6
c000fe10:	09 fa                	or     edx,edi
c000fe12:	3c 0f                	cmp    al,0xf
c000fe14:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fe1b:	75 30                	jne    c000fe4d <CPU::detectFeatures()+0x5b1>
c000fe1d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fe23:	c1 e9 14             	shr    ecx,0x14
c000fe26:	83 e0 3f             	and    eax,0x3f
c000fe29:	83 c1 0f             	add    ecx,0xf
c000fe2c:	88 ca                	mov    dl,cl
c000fe2e:	c0 e9 02             	shr    cl,0x2
c000fe31:	c1 e2 06             	shl    edx,0x6
c000fe34:	09 d0                	or     eax,edx
c000fe36:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fe3c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fe42:	83 e0 c0             	and    eax,0xffffffc0
c000fe45:	09 c1                	or     ecx,eax
c000fe47:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe4d:	83 ec 0c             	sub    esp,0xc
c000fe50:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe57:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe5b:	50                   	push   eax
c000fe5c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe60:	55                   	push   ebp
c000fe61:	56                   	push   esi
c000fe62:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe66:	57                   	push   edi
c000fe67:	68 00 00 00 80       	push   0x80000000
c000fe6c:	e8 5f f8 ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe71:	83 c4 20             	add    esp,0x20
c000fe74:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe7c:	76 22                	jbe    c000fea0 <CPU::detectFeatures()+0x604>
c000fe7e:	83 ec 0c             	sub    esp,0xc
c000fe81:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe85:	50                   	push   eax
c000fe86:	55                   	push   ebp
c000fe87:	56                   	push   esi
c000fe88:	57                   	push   edi
c000fe89:	68 01 00 00 80       	push   0x80000001
c000fe8e:	e8 3d f8 ff ff       	call   c000f6d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe93:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe9d:	83 c4 20             	add    esp,0x20
c000fea0:	52                   	push   edx
c000fea1:	52                   	push   edx
c000fea2:	68 11 e5 01 c0       	push   0xc001e511
c000fea7:	53                   	push   ebx
c000fea8:	e8 09 c3 ff ff       	call   c000c1b6 <Device::setName(char const*)>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	eb 67                	jmp    c000ff19 <CPU::detectFeatures()+0x67d>
c000feb2:	50                   	push   eax
c000feb3:	50                   	push   eax
c000feb4:	68 76 e4 01 c0       	push   0xc001e476
c000feb9:	55                   	push   ebp
c000feba:	e8 61 07 ff ff       	call   c0000620 <strcpy>
c000febf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fec9:	e8 15 03 ff ff       	call   c00001e3 <is486>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	85 c0                	test   eax,eax
c000fed3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fed9:	74 1d                	je     c000fef8 <CPU::detectFeatures()+0x65c>
c000fedb:	83 c8 07             	or     eax,0x7
c000fede:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fee4:	0f 20 c0             	mov    eax,cr0
c000fee7:	83 e0 14             	and    eax,0x14
c000feea:	83 f8 04             	cmp    eax,0x4
c000feed:	75 0e                	jne    c000fefd <CPU::detectFeatures()+0x661>
c000feef:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fef6:	eb 21                	jmp    c000ff19 <CPU::detectFeatures()+0x67d>
c000fef8:	83 e0 f8             	and    eax,0xfffffff8
c000fefb:	eb e1                	jmp    c000fede <CPU::detectFeatures()+0x642>
c000fefd:	e8 bc 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff02:	83 e0 01             	and    eax,0x1
c000ff05:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff08:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff0e:	83 e0 fd             	and    eax,0xfffffffd
c000ff11:	09 d0                	or     eax,edx
c000ff13:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff19:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff20:	74 0e                	je     c000ff30 <CPU::detectFeatures()+0x694>
c000ff22:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000ff27:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ff2e:	eb 20                	jmp    c000ff50 <CPU::detectFeatures()+0x6b4>
c000ff30:	e8 89 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff35:	83 e0 01             	and    eax,0x1
c000ff38:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff3b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff41:	83 e0 fd             	and    eax,0xfffffffd
c000ff44:	09 d0                	or     eax,edx
c000ff46:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff4c:	a8 02                	test   al,0x2
c000ff4e:	75 d2                	jne    c000ff22 <CPU::detectFeatures()+0x686>
c000ff50:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff57:	83 c4 2c             	add    esp,0x2c
c000ff5a:	5b                   	pop    ebx
c000ff5b:	5e                   	pop    esi
c000ff5c:	5f                   	pop    edi
c000ff5d:	5d                   	pop    ebp
c000ff5e:	c3                   	ret    
c000ff5f:	90                   	nop

c000ff60 <CPU::setupSMEP()>:
c000ff60:	0f 20 e0             	mov    eax,cr4
c000ff63:	0d 00 00 10 00       	or     eax,0x100000
c000ff68:	0f 22 e0             	mov    cr4,eax
c000ff6b:	c3                   	ret    

c000ff6c <CPU::setupUMIP()>:
c000ff6c:	0f 20 e0             	mov    eax,cr4
c000ff6f:	80 cc 08             	or     ah,0x8
c000ff72:	0f 22 e0             	mov    cr4,eax
c000ff75:	c3                   	ret    

c000ff76 <CPU::setupTSC()>:
c000ff76:	0f 20 e0             	mov    eax,cr4
c000ff79:	83 c8 04             	or     eax,0x4
c000ff7c:	0f 22 e0             	mov    cr4,eax
c000ff7f:	c3                   	ret    

c000ff80 <CPU::setupLargePages()>:
c000ff80:	0f 20 e0             	mov    eax,cr4
c000ff83:	83 c8 10             	or     eax,0x10
c000ff86:	0f 22 e0             	mov    cr4,eax
c000ff89:	c3                   	ret    

c000ff8a <CPU::setupPAT()>:
c000ff8a:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c000ff8f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff96:	74 2c                	je     c000ffc4 <CPU::setupPAT()+0x3a>
c000ff98:	53                   	push   ebx
c000ff99:	83 ec 10             	sub    esp,0x10
c000ff9c:	68 77 02 00 00       	push   0x277
c000ffa1:	50                   	push   eax
c000ffa2:	e8 f3 74 ff ff       	call   c000749a <Computer::rdmsr(unsigned int)>
c000ffa7:	83 e2 f8             	and    edx,0xfffffff8
c000ffaa:	83 ca 01             	or     edx,0x1
c000ffad:	52                   	push   edx
c000ffae:	50                   	push   eax
c000ffaf:	68 77 02 00 00       	push   0x277
c000ffb4:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c000ffba:	e8 07 75 ff ff       	call   c00074c6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ffbf:	83 c4 28             	add    esp,0x28
c000ffc2:	5b                   	pop    ebx
c000ffc3:	c3                   	ret    
c000ffc4:	c3                   	ret    
c000ffc5:	90                   	nop

c000ffc6 <CPU::setupMTRR()>:
c000ffc6:	c3                   	ret    
c000ffc7:	90                   	nop

c000ffc8 <CPU::setupGlobalPages()>:
c000ffc8:	0f 20 e0             	mov    eax,cr4
c000ffcb:	0c 80                	or     al,0x80
c000ffcd:	0f 22 e0             	mov    cr4,eax
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <CPU::allowUsermodeDataAccess()>:
c000ffd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffdd:	74 03                	je     c000ffe2 <CPU::allowUsermodeDataAccess()+0x10>
c000ffdf:	0f 01 cb             	stac   
c000ffe2:	c3                   	ret    
c000ffe3:	90                   	nop

c000ffe4 <CPU::prohibitUsermodeDataAccess()>:
c000ffe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffef:	74 03                	je     c000fff4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fff1:	0f 01 ca             	clac   
c000fff4:	c3                   	ret    
c000fff5:	90                   	nop

c000fff6 <CPU::setupSMAP()>:
c000fff6:	0f 20 e0             	mov    eax,cr4
c000fff9:	0d 00 00 20 00       	or     eax,0x200000
c000fffe:	0f 22 e0             	mov    cr4,eax
c0010001:	eb e1                	jmp    c000ffe4 <CPU::prohibitUsermodeDataAccess()>
c0010003:	90                   	nop

c0010004 <CPU::setupFeatures()>:
c0010004:	53                   	push   ebx
c0010005:	83 ec 08             	sub    esp,0x8
c0010008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001000c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010013:	74 18                	je     c001002d <CPU::setupFeatures()+0x29>
c0010015:	83 ec 0c             	sub    esp,0xc
c0010018:	68 1d e5 01 c0       	push   0xc001e51d
c001001d:	e8 ca ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010025:	e8 42 ff ff ff       	call   c000ff6c <CPU::setupUMIP()>
c001002a:	83 c4 10             	add    esp,0x10
c001002d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010034:	74 18                	je     c001004e <CPU::setupFeatures()+0x4a>
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	68 27 e5 01 c0       	push   0xc001e527
c001003e:	e8 a9 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010046:	e8 2b ff ff ff       	call   c000ff76 <CPU::setupTSC()>
c001004b:	83 c4 10             	add    esp,0x10
c001004e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010055:	74 18                	je     c001006f <CPU::setupFeatures()+0x6b>
c0010057:	83 ec 0c             	sub    esp,0xc
c001005a:	68 30 e5 01 c0       	push   0xc001e530
c001005f:	e8 88 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010067:	e8 14 ff ff ff       	call   c000ff80 <CPU::setupLargePages()>
c001006c:	83 c4 10             	add    esp,0x10
c001006f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010076:	74 18                	je     c0010090 <CPU::setupFeatures()+0x8c>
c0010078:	83 ec 0c             	sub    esp,0xc
c001007b:	68 39 e5 01 c0       	push   0xc001e539
c0010080:	e8 67 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010085:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010088:	e8 3b ff ff ff       	call   c000ffc8 <CPU::setupGlobalPages()>
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010097:	74 18                	je     c00100b1 <CPU::setupFeatures()+0xad>
c0010099:	83 ec 0c             	sub    esp,0xc
c001009c:	68 4b e5 01 c0       	push   0xc001e54b
c00100a1:	e8 46 ab ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00100a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100a9:	e8 dc fe ff ff       	call   c000ff8a <CPU::setupPAT()>
c00100ae:	83 c4 10             	add    esp,0x10
c00100b1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00100b8:	74 11                	je     c00100cb <CPU::setupFeatures()+0xc7>
c00100ba:	c7 44 24 10 54 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e554
c00100c2:	83 c4 08             	add    esp,0x8
c00100c5:	5b                   	pop    ebx
c00100c6:	e9 21 ab ff ff       	jmp    c000abec <Dbg::kprintf(char const*, ...)>
c00100cb:	83 c4 08             	add    esp,0x8
c00100ce:	5b                   	pop    ebx
c00100cf:	c3                   	ret    

c00100d0 <CPU::open(int, int, void*)>:
c00100d0:	57                   	push   edi
c00100d1:	56                   	push   esi
c00100d2:	53                   	push   ebx
c00100d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100db:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100e1:	83 ec 0c             	sub    esp,0xc
c00100e4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100ea:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100f0:	50                   	push   eax
c00100f1:	e8 8e 76 ff ff       	call   c0007784 <GDT::setup()>
c00100f6:	83 c4 0c             	add    esp,0xc
c00100f9:	6a 00                	push   0x0
c00100fb:	68 ef be ad de       	push   0xdeadbeef
c0010100:	57                   	push   edi
c0010101:	e8 1a 92 ff ff       	call   c0009320 <TSS::setup(unsigned long, unsigned long)>
c0010106:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010109:	e8 f2 91 ff ff       	call   c0009300 <TSS::flush()>
c001010e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010114:	89 04 24             	mov    DWORD PTR [esp],eax
c0010117:	e8 b2 78 ff ff       	call   c00079ce <IDT::setup()>
c001011c:	b8 00 04 00 00       	mov    eax,0x400
c0010121:	0f 23 f8             	mov    db7,eax
c0010124:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001012e:	e8 f7 80 ff ff       	call   c000822a <Phys::allocatePage()>
c0010133:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010139:	89 30                	mov    DWORD PTR [eax],esi
c001013b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010141:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010144:	58                   	pop    eax
c0010145:	5a                   	pop    edx
c0010146:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001014c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010150:	e8 b5 a1 ff ff       	call   c000a30a <VAS::setCPUSpecific(unsigned long)>
c0010155:	c7 04 24 5e e5 01 c0 	mov    DWORD PTR [esp],0xc001e55e
c001015c:	e8 56 7d ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0010161:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010164:	e8 33 f7 ff ff       	call   c000f89c <CPU::detectFeatures()>
c0010169:	c7 04 24 81 e5 01 c0 	mov    DWORD PTR [esp],0xc001e581
c0010170:	e8 42 7d ff ff       	call   c0007eb7 <Krnl::setBootMessage(char const*)>
c0010175:	e8 b8 56 00 00       	call   c0015832 <HalInitialise()>
c001017a:	a1 50 08 02 c0       	mov    eax,ds:0xc0020850
c001017f:	83 e0 10             	and    eax,0x10
c0010182:	83 f8 01             	cmp    eax,0x1
c0010185:	19 c0                	sbb    eax,eax
c0010187:	83 e0 46             	and    eax,0x46
c001018a:	83 c0 1e             	add    eax,0x1e
c001018d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010190:	e8 f0 d6 ff ff       	call   c000d885 <setupTimer(int)>
c0010195:	83 c4 10             	add    esp,0x10
c0010198:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001019e:	f6 05 50 08 02 c0 20 	test   BYTE PTR ds:0xc0020850,0x20
c00101a5:	74 0c                	je     c00101b3 <CPU::open(int, int, void*)+0xe3>
c00101a7:	83 ec 0c             	sub    esp,0xc
c00101aa:	53                   	push   ebx
c00101ab:	e8 54 fe ff ff       	call   c0010004 <CPU::setupFeatures()>
c00101b0:	83 c4 10             	add    esp,0x10
c00101b3:	5b                   	pop    ebx
c00101b4:	31 c0                	xor    eax,eax
c00101b6:	5e                   	pop    esi
c00101b7:	5f                   	pop    edi
c00101b8:	c3                   	ret    
c00101b9:	90                   	nop

c00101ba <EnvVarContainer::getEnv(char const*)>:
c00101ba:	57                   	push   edi
c00101bb:	56                   	push   esi
c00101bc:	53                   	push   ebx
c00101bd:	31 db                	xor    ebx,ebx
c00101bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101c3:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101c5:	7e 2b                	jle    c00101f2 <EnvVarContainer::getEnv(char const*)+0x38>
c00101c7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101ce:	50                   	push   eax
c00101cf:	50                   	push   eax
c00101d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101d3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101da:	e8 21 05 ff ff       	call   c0000700 <strcmp>
c00101df:	83 c4 10             	add    esp,0x10
c00101e2:	85 c0                	test   eax,eax
c00101e4:	75 09                	jne    c00101ef <EnvVarContainer::getEnv(char const*)+0x35>
c00101e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101e9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101ed:	eb 05                	jmp    c00101f4 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101ef:	43                   	inc    ebx
c00101f0:	eb d1                	jmp    c00101c3 <EnvVarContainer::getEnv(char const*)+0x9>
c00101f2:	31 c0                	xor    eax,eax
c00101f4:	5b                   	pop    ebx
c00101f5:	5e                   	pop    esi
c00101f6:	5f                   	pop    edi
c00101f7:	c3                   	ret    

c00101f8 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101f8:	55                   	push   ebp
c00101f9:	57                   	push   edi
c00101fa:	56                   	push   esi
c00101fb:	53                   	push   ebx
c00101fc:	83 ec 28             	sub    esp,0x28
c00101ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010203:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010207:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001020b:	56                   	push   esi
c001020c:	e8 4f 03 ff ff       	call   c0000560 <strlen>
c0010211:	40                   	inc    eax
c0010212:	89 04 24             	mov    DWORD PTR [esp],eax
c0010215:	e8 43 7c ff ff       	call   c0007e5d <malloc>
c001021a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001021d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010221:	e8 3a 03 ff ff       	call   c0000560 <strlen>
c0010226:	40                   	inc    eax
c0010227:	89 04 24             	mov    DWORD PTR [esp],eax
c001022a:	e8 2e 7c ff ff       	call   c0007e5d <malloc>
c001022f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010232:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010236:	e8 25 03 ff ff       	call   c0000560 <strlen>
c001023b:	83 c4 0c             	add    esp,0xc
c001023e:	40                   	inc    eax
c001023f:	50                   	push   eax
c0010240:	6a 00                	push   0x0
c0010242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010246:	e8 a5 02 ff ff       	call   c00004f0 <memset>
c001024b:	89 34 24             	mov    DWORD PTR [esp],esi
c001024e:	e8 0d 03 ff ff       	call   c0000560 <strlen>
c0010253:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010257:	8d 48 01             	lea    ecx,[eax+0x1]
c001025a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001025c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001025f:	89 de                	mov    esi,ebx
c0010261:	e8 fa 02 ff ff       	call   c0000560 <strlen>
c0010266:	83 c4 0c             	add    esp,0xc
c0010269:	40                   	inc    eax
c001026a:	50                   	push   eax
c001026b:	6a 00                	push   0x0
c001026d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010271:	e8 7a 02 ff ff       	call   c00004f0 <memset>
c0010276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010279:	e8 e2 02 ff ff       	call   c0000560 <strlen>
c001027e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010282:	8d 48 01             	lea    ecx,[eax+0x1]
c0010285:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010287:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001028a:	40                   	inc    eax
c001028b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001028e:	c1 e0 03             	shl    eax,0x3
c0010291:	5a                   	pop    edx
c0010292:	59                   	pop    ecx
c0010293:	50                   	push   eax
c0010294:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010297:	e8 ad 7b ff ff       	call   c0007e49 <realloc>
c001029c:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102a3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102a6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102aa:	b9 08 00 00 00       	mov    ecx,0x8
c00102af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102b1:	83 c4 2c             	add    esp,0x2c
c00102b4:	5b                   	pop    ebx
c00102b5:	5e                   	pop    esi
c00102b6:	5f                   	pop    edi
c00102b7:	5d                   	pop    ebp
c00102b8:	c3                   	ret    
c00102b9:	90                   	nop

c00102ba <EnvVarContainer::deleteEnv(char const*)>:
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102bc:	55                   	push   ebp
c00102bd:	57                   	push   edi
c00102be:	56                   	push   esi
c00102bf:	53                   	push   ebx
c00102c0:	81 ec 38 01 00 00    	sub    esp,0x138
c00102c6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102cd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102d4:	68 14 01 00 00       	push   0x114
c00102d9:	e8 7f 7b ff ff       	call   c0007e5d <malloc>
c00102de:	83 c4 0c             	add    esp,0xc
c00102e1:	89 c3                	mov    ebx,eax
c00102e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102ed:	50                   	push   eax
c00102ee:	e8 6f ae ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00102f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f6:	e8 95 b1 ff ff       	call   c000b490 <File::exists()>
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	84 c0                	test   al,al
c0010300:	75 31                	jne    c0010333 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010302:	50                   	push   eax
c0010303:	50                   	push   eax
c0010304:	6a 12                	push   0x12
c0010306:	53                   	push   ebx
c0010307:	e8 16 af ff ff       	call   c000b222 <File::open(FileOpenMode)>
c001030c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001030e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010311:	89 34 24             	mov    DWORD PTR [esp],esi
c0010314:	e8 47 02 ff ff       	call   c0000560 <strlen>
c0010319:	5a                   	pop    edx
c001031a:	31 d2                	xor    edx,edx
c001031c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010320:	51                   	push   ecx
c0010321:	56                   	push   esi
c0010322:	52                   	push   edx
c0010323:	50                   	push   eax
c0010324:	53                   	push   ebx
c0010325:	ff d7                	call   edi
c0010327:	83 c4 14             	add    esp,0x14
c001032a:	53                   	push   ebx
c001032b:	e8 50 af ff ff       	call   c000b280 <File::close()>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	56                   	push   esi
c0010334:	31 f6                	xor    esi,esi
c0010336:	68 00 01 00 00       	push   0x100
c001033b:	6a 00                	push   0x0
c001033d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010341:	50                   	push   eax
c0010342:	e8 a9 01 ff ff       	call   c00004f0 <memset>
c0010347:	5f                   	pop    edi
c0010348:	58                   	pop    eax
c0010349:	6a 01                	push   0x1
c001034b:	53                   	push   ebx
c001034c:	e8 d1 ae ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0010351:	83 c4 10             	add    esp,0x10
c0010354:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001035c:	83 ec 0c             	sub    esp,0xc
c001035f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010361:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010365:	51                   	push   ecx
c0010366:	8d 54 24 23          	lea    edx,[esp+0x23]
c001036a:	52                   	push   edx
c001036b:	6a 00                	push   0x0
c001036d:	6a 01                	push   0x1
c001036f:	53                   	push   ebx
c0010370:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010373:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010377:	83 c4 20             	add    esp,0x20
c001037a:	3c 0d                	cmp    al,0xd
c001037c:	0f 84 09 01 00 00    	je     c001048b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010382:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010387:	0f 84 ef 00 00 00    	je     c001047c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001038d:	3c 0a                	cmp    al,0xa
c001038f:	74 13                	je     c00103a4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010391:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010396:	74 0c                	je     c00103a4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010398:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001039e:	0f 8e d8 00 00 00    	jle    c001047c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103a8:	83 ec 0c             	sub    esp,0xc
c00103ab:	8d 78 01             	lea    edi,[eax+0x1]
c00103ae:	57                   	push   edi
c00103af:	e8 a9 7a ff ff       	call   c0007e5d <malloc>
c00103b4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103bc:	8d 56 04             	lea    edx,[esi+0x4]
c00103bf:	89 14 24             	mov    DWORD PTR [esp],edx
c00103c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103c6:	e8 92 7a ff ff       	call   c0007e5d <malloc>
c00103cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103cf:	83 c4 0c             	add    esp,0xc
c00103d2:	57                   	push   edi
c00103d3:	6a 00                	push   0x0
c00103d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103d9:	e8 12 01 ff ff       	call   c00004f0 <memset>
c00103de:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103e2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ec:	83 c4 0c             	add    esp,0xc
c00103ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103f3:	52                   	push   edx
c00103f4:	6a 00                	push   0x0
c00103f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103fa:	e8 f1 00 ff ff       	call   c00004f0 <memset>
c00103ff:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010403:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010407:	89 34 24             	mov    DWORD PTR [esp],esi
c001040a:	e8 51 01 ff ff       	call   c0000560 <strlen>
c001040f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010413:	89 c1                	mov    ecx,eax
c0010415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010417:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001041a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001041d:	40                   	inc    eax
c001041e:	83 c4 10             	add    esp,0x10
c0010421:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010424:	85 d2                	test   edx,edx
c0010426:	75 0c                	jne    c0010434 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010428:	83 ec 0c             	sub    esp,0xc
c001042b:	6a 08                	push   0x8
c001042d:	e8 2b 7a ff ff       	call   c0007e5d <malloc>
c0010432:	eb 0c                	jmp    c0010440 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010434:	c1 e0 03             	shl    eax,0x3
c0010437:	51                   	push   ecx
c0010438:	51                   	push   ecx
c0010439:	50                   	push   eax
c001043a:	52                   	push   edx
c001043b:	e8 09 7a ff ff       	call   c0007e49 <realloc>
c0010440:	83 c4 10             	add    esp,0x10
c0010443:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010446:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010449:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001044c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010450:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010454:	b9 08 00 00 00       	mov    ecx,0x8
c0010459:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001045b:	31 f6                	xor    esi,esi
c001045d:	50                   	push   eax
c001045e:	68 00 01 00 00       	push   0x100
c0010463:	6a 00                	push   0x0
c0010465:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010469:	50                   	push   eax
c001046a:	e8 81 00 ff ff       	call   c00004f0 <memset>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001047a:	eb 0f                	jmp    c001048b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001047c:	3c 3d                	cmp    al,0x3d
c001047e:	74 07                	je     c0010487 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010480:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010484:	46                   	inc    esi
c0010485:	eb 04                	jmp    c001048b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010487:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001048b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010490:	0f 85 c6 fe ff ff    	jne    c001035c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010496:	81 c4 2c 01 00 00    	add    esp,0x12c
c001049c:	5b                   	pop    ebx
c001049d:	5e                   	pop    esi
c001049e:	5f                   	pop    edi
c001049f:	5d                   	pop    ebp
c00104a0:	c3                   	ret    
c00104a1:	90                   	nop

c00104a2 <EnvVarContainer::__loadSystem()>:
c00104a2:	83 ec 10             	sub    esp,0x10
c00104a5:	68 c0 f7 01 c0       	push   0xc001f7c0
c00104aa:	68 c4 e5 01 c0       	push   0xc001e5c4
c00104af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b3:	e8 04 fe ff ff       	call   c00102bc <EnvVarContainer::loadFrom(char const*, char const*)>
c00104b8:	83 c4 1c             	add    esp,0x1c
c00104bb:	c3                   	ret    

c00104bc <EnvVarContainer::__loadUser()>:
c00104bc:	c3                   	ret    
c00104bd:	90                   	nop

c00104be <EnvVarContainer::EnvVarContainer(Process*)>:
c00104be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104de:	90                   	nop
c00104df:	c3                   	ret    

c00104e0 <EnvVarContainer::~EnvVarContainer()>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104ea:	85 c0                	test   eax,eax
c00104ec:	74 1d                	je     c001050b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00104f4:	85 c0                	test   eax,eax
c00104f6:	74 13                	je     c001050b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104ff:	83 ec 0c             	sub    esp,0xc
c0010502:	50                   	push   eax
c0010503:	e8 65 79 ff ff       	call   c0007e6d <free>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	90                   	nop
c001050c:	83 c4 0c             	add    esp,0xc
c001050f:	c3                   	ret    

c0010510 <Krnl::getEnv(Process*, char const*)>:
c0010510:	53                   	push   ebx
c0010511:	83 ec 08             	sub    esp,0x8
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001051c:	39 05 30 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d30,eax
c0010522:	74 04                	je     c0010528 <Krnl::getEnv(Process*, char const*)+0x18>
c0010524:	85 c0                	test   eax,eax
c0010526:	75 0b                	jne    c0010533 <Krnl::getEnv(Process*, char const*)+0x23>
c0010528:	a1 b0 32 02 c0       	mov    eax,ds:0xc00232b0
c001052d:	85 c0                	test   eax,eax
c001052f:	75 19                	jne    c001054a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010531:	eb 27                	jmp    c001055a <Krnl::getEnv(Process*, char const*)+0x4a>
c0010533:	52                   	push   edx
c0010534:	52                   	push   edx
c0010535:	53                   	push   ebx
c0010536:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001053c:	e8 79 fc ff ff       	call   c00101ba <EnvVarContainer::getEnv(char const*)>
c0010541:	83 c4 10             	add    esp,0x10
c0010544:	85 c0                	test   eax,eax
c0010546:	75 28                	jne    c0010570 <Krnl::getEnv(Process*, char const*)+0x60>
c0010548:	eb de                	jmp    c0010528 <Krnl::getEnv(Process*, char const*)+0x18>
c001054a:	52                   	push   edx
c001054b:	52                   	push   edx
c001054c:	53                   	push   ebx
c001054d:	50                   	push   eax
c001054e:	e8 67 fc ff ff       	call   c00101ba <EnvVarContainer::getEnv(char const*)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	85 c0                	test   eax,eax
c0010558:	75 16                	jne    c0010570 <Krnl::getEnv(Process*, char const*)+0x60>
c001055a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001055e:	a1 b4 32 02 c0       	mov    eax,ds:0xc00232b4
c0010563:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010567:	83 c4 08             	add    esp,0x8
c001056a:	5b                   	pop    ebx
c001056b:	e9 4a fc ff ff       	jmp    c00101ba <EnvVarContainer::getEnv(char const*)>
c0010570:	83 c4 08             	add    esp,0x8
c0010573:	5b                   	pop    ebx
c0010574:	c3                   	ret    

c0010575 <Krnl::setEnvSystem(char const*, char const*)>:
c0010575:	83 ec 10             	sub    esp,0x10
c0010578:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001057c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010580:	ff 35 b4 32 02 c0    	push   DWORD PTR ds:0xc00232b4
c0010586:	e8 6d fc ff ff       	call   c00101f8 <EnvVarContainer::setEnv(char const*, char const*)>
c001058b:	83 c4 1c             	add    esp,0x1c
c001058e:	c3                   	ret    

c001058f <Krnl::setEnvUser(char const*, char const*)>:
c001058f:	a1 b0 32 02 c0       	mov    eax,ds:0xc00232b0
c0010594:	85 c0                	test   eax,eax
c0010596:	74 15                	je     c00105ad <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010598:	83 ec 10             	sub    esp,0x10
c001059b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001059f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a3:	50                   	push   eax
c00105a4:	e8 4f fc ff ff       	call   c00101f8 <EnvVarContainer::setEnv(char const*, char const*)>
c00105a9:	83 c4 1c             	add    esp,0x1c
c00105ac:	c3                   	ret    
c00105ad:	c3                   	ret    

c00105ae <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105bc:	e9 37 fc ff ff       	jmp    c00101f8 <EnvVarContainer::setEnv(char const*, char const*)>

c00105c1 <Krnl::deleteEnvSystem(char const*)>:
c00105c1:	c3                   	ret    

c00105c2 <Krnl::deleteEnvUser(char const*)>:
c00105c2:	c3                   	ret    

c00105c3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105c3:	c3                   	ret    

c00105c4 <Krnl::newProcessEnv(Process*)>:
c00105c4:	83 ec 28             	sub    esp,0x28
c00105c7:	6a 0c                	push   0xc
c00105c9:	e8 8f 78 ff ff       	call   c0007e5d <malloc>
c00105ce:	5a                   	pop    edx
c00105cf:	59                   	pop    ecx
c00105d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105d4:	50                   	push   eax
c00105d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105d9:	e8 e0 fe ff ff       	call   c00104be <EnvVarContainer::EnvVarContainer(Process*)>
c00105de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105e2:	83 c4 2c             	add    esp,0x2c
c00105e5:	c3                   	ret    

c00105e6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00105e6:	57                   	push   edi
c00105e7:	56                   	push   esi
c00105e8:	53                   	push   ebx
c00105e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ed:	83 ec 0c             	sub    esp,0xc
c00105f0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105f6:	6a 0c                	push   0xc
c00105f8:	e8 60 78 ff ff       	call   c0007e5d <malloc>
c00105fd:	89 c3                	mov    ebx,eax
c00105ff:	58                   	pop    eax
c0010600:	5a                   	pop    edx
c0010601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010605:	53                   	push   ebx
c0010606:	e8 b3 fe ff ff       	call   c00104be <EnvVarContainer::EnvVarContainer(Process*)>
c001060b:	8b 07                	mov    eax,DWORD PTR [edi]
c001060d:	89 03                	mov    DWORD PTR [ebx],eax
c001060f:	c1 e0 03             	shl    eax,0x3
c0010612:	89 04 24             	mov    DWORD PTR [esp],eax
c0010615:	e8 43 78 ff ff       	call   c0007e5d <malloc>
c001061a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001061d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001061f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010622:	c1 e1 03             	shl    ecx,0x3
c0010625:	89 c7                	mov    edi,eax
c0010627:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010629:	83 c4 10             	add    esp,0x10
c001062c:	89 d8                	mov    eax,ebx
c001062e:	5b                   	pop    ebx
c001062f:	5e                   	pop    esi
c0010630:	5f                   	pop    edi
c0010631:	c3                   	ret    

c0010632 <Krnl::loadSystemEnv()>:
c0010632:	53                   	push   ebx
c0010633:	83 ec 14             	sub    esp,0x14
c0010636:	6a 0c                	push   0xc
c0010638:	e8 20 78 ff ff       	call   c0007e5d <malloc>
c001063d:	89 c3                	mov    ebx,eax
c001063f:	58                   	pop    eax
c0010640:	5a                   	pop    edx
c0010641:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010647:	53                   	push   ebx
c0010648:	e8 71 fe ff ff       	call   c00104be <EnvVarContainer::EnvVarContainer(Process*)>
c001064d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010650:	89 1d b4 32 02 c0    	mov    DWORD PTR ds:0xc00232b4,ebx
c0010656:	e8 47 fe ff ff       	call   c00104a2 <EnvVarContainer::__loadSystem()>
c001065b:	83 c4 18             	add    esp,0x18
c001065e:	5b                   	pop    ebx
c001065f:	c3                   	ret    

c0010660 <Krnl::loadUserEnv()>:
c0010660:	53                   	push   ebx
c0010661:	83 ec 14             	sub    esp,0x14
c0010664:	6a 0c                	push   0xc
c0010666:	e8 f2 77 ff ff       	call   c0007e5d <malloc>
c001066b:	89 c3                	mov    ebx,eax
c001066d:	58                   	pop    eax
c001066e:	5a                   	pop    edx
c001066f:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010675:	53                   	push   ebx
c0010676:	e8 43 fe ff ff       	call   c00104be <EnvVarContainer::EnvVarContainer(Process*)>
c001067b:	89 1d b0 32 02 c0    	mov    DWORD PTR ds:0xc00232b0,ebx
c0010681:	83 c4 18             	add    esp,0x18
c0010684:	5b                   	pop    ebx
c0010685:	c3                   	ret    

c0010686 <Krnl::flushEnv()>:
c0010686:	c3                   	ret    

c0010687 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010687:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001068b:	8b 15 b0 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232b0
c0010691:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010697:	a1 b4 32 02 c0       	mov    eax,ds:0xc00232b4
c001069c:	8b 00                	mov    eax,DWORD PTR [eax]
c001069e:	03 01                	add    eax,DWORD PTR [ecx]
c00106a0:	85 d2                	test   edx,edx
c00106a2:	74 02                	je     c00106a6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106a4:	03 02                	add    eax,DWORD PTR [edx]
c00106a6:	c3                   	ret    

c00106a7 <Krnl::getProcessEnvPair(Process*, int)>:
c00106a7:	57                   	push   edi
c00106a8:	56                   	push   esi
c00106a9:	8b 35 b0 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232b0
c00106af:	53                   	push   ebx
c00106b0:	85 f6                	test   esi,esi
c00106b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ba:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106c6:	75 16                	jne    c00106de <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106c8:	39 c2                	cmp    edx,eax
c00106ca:	7c 16                	jl     c00106e2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106cc:	8b 0d b4 32 02 c0    	mov    ecx,DWORD PTR ds:0xc00232b4
c00106d2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106d4:	01 c6                	add    esi,eax
c00106d6:	39 d6                	cmp    esi,edx
c00106d8:	7e 3c                	jle    c0010716 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106da:	29 c2                	sub    edx,eax
c00106dc:	eb 04                	jmp    c00106e2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106de:	39 c2                	cmp    edx,eax
c00106e0:	7d 05                	jge    c00106e7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106e2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106e5:	eb 20                	jmp    c0010707 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106e9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106ec:	39 d1                	cmp    ecx,edx
c00106ee:	7e 04                	jle    c00106f4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106f0:	29 c2                	sub    edx,eax
c00106f2:	eb 10                	jmp    c0010704 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106f4:	8b 35 b4 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232b4
c00106fa:	03 0e                	add    ecx,DWORD PTR [esi]
c00106fc:	39 d1                	cmp    ecx,edx
c00106fe:	7e 16                	jle    c0010716 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010700:	29 c2                	sub    edx,eax
c0010702:	29 fa                	sub    edx,edi
c0010704:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010707:	8d 14 d0             	lea    edx,[eax+edx*8]
c001070a:	8b 02                	mov    eax,DWORD PTR [edx]
c001070c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001070f:	89 03                	mov    DWORD PTR [ebx],eax
c0010711:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010714:	eb 1d                	jmp    c0010733 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010716:	83 ec 0c             	sub    esp,0xc
c0010719:	68 e6 e5 01 c0       	push   0xc001e5e6
c001071e:	e8 18 00 00 00       	call   c001073b <Krnl::panic(char const*)>
c0010723:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010729:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010730:	83 c4 10             	add    esp,0x10
c0010733:	89 d8                	mov    eax,ebx
c0010735:	5b                   	pop    ebx
c0010736:	5e                   	pop    esi
c0010737:	5f                   	pop    edi
c0010738:	c2 04 00             	ret    0x4

c001073b <Krnl::panic(char const*)>:
c001073b:	53                   	push   ebx
c001073c:	83 ec 10             	sub    esp,0x10
c001073f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010743:	fa                   	cli    
c0010744:	c6 05 c0 32 02 c0 01 	mov    BYTE PTR ds:0xc00232c0,0x1
c001074b:	53                   	push   ebx
c001074c:	68 00 e6 01 c0       	push   0xc001e600
c0010751:	e8 96 a4 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0010756:	83 c4 0c             	add    esp,0xc
c0010759:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c001075e:	6a 01                	push   0x1
c0010760:	6a 0f                	push   0xf
c0010762:	50                   	push   eax
c0010763:	e8 78 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010768:	5a                   	pop    edx
c0010769:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c001076f:	51                   	push   ecx
c0010770:	e8 63 84 ff ff       	call   c0008bd8 <VgaText::clearScreen()>
c0010775:	58                   	pop    eax
c0010776:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c001077c:	5a                   	pop    edx
c001077d:	68 31 e6 01 c0       	push   0xc001e631
c0010782:	51                   	push   ecx
c0010783:	e8 90 82 ff ff       	call   c0008a18 <VgaText::setTitle(char*)>
c0010788:	83 c4 0c             	add    esp,0xc
c001078b:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c0010790:	6a 01                	push   0x1
c0010792:	6a 0f                	push   0xf
c0010794:	50                   	push   eax
c0010795:	e8 46 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001079a:	58                   	pop    eax
c001079b:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c00107a1:	5a                   	pop    edx
c00107a2:	68 19 e6 01 c0       	push   0xc001e619
c00107a7:	51                   	push   ecx
c00107a8:	e8 1f 87 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107ad:	83 c4 0c             	add    esp,0xc
c00107b0:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c00107b5:	6a 0f                	push   0xf
c00107b7:	6a 01                	push   0x1
c00107b9:	50                   	push   eax
c00107ba:	e8 21 82 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107bf:	58                   	pop    eax
c00107c0:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c00107c6:	5a                   	pop    edx
c00107c7:	68 22 e6 01 c0       	push   0xc001e622
c00107cc:	51                   	push   ecx
c00107cd:	e8 fa 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107d2:	83 c4 0c             	add    esp,0xc
c00107d5:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c00107da:	6a 01                	push   0x1
c00107dc:	6a 0f                	push   0xf
c00107de:	50                   	push   eax
c00107df:	e8 fc 81 ff ff       	call   c00089e0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107e4:	58                   	pop    eax
c00107e5:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c00107eb:	5a                   	pop    edx
c00107ec:	68 2f e6 01 c0       	push   0xc001e62f
c00107f1:	51                   	push   ecx
c00107f2:	e8 d5 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00107f7:	58                   	pop    eax
c00107f8:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c00107fe:	5a                   	pop    edx
c00107ff:	68 40 e6 01 c0       	push   0xc001e640
c0010804:	51                   	push   ecx
c0010805:	e8 c2 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001080a:	58                   	pop    eax
c001080b:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c0010811:	5a                   	pop    edx
c0010812:	68 32 e6 01 c0       	push   0xc001e632
c0010817:	51                   	push   ecx
c0010818:	e8 af 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001081d:	58                   	pop    eax
c001081e:	8b 0d 84 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020884
c0010824:	5a                   	pop    edx
c0010825:	53                   	push   ebx
c0010826:	51                   	push   ecx
c0010827:	e8 a0 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001082c:	5b                   	pop    ebx
c001082d:	58                   	pop    eax
c001082e:	a1 84 08 02 c0       	mov    eax,ds:0xc0020884
c0010833:	68 2f e6 01 c0       	push   0xc001e62f
c0010838:	50                   	push   eax
c0010839:	e8 8e 86 ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001083e:	83 c4 10             	add    esp,0x10
c0010841:	eb fe                	jmp    c0010841 <Krnl::panic(char const*)+0x106>

c0010843 <Krnl::powerThread(void*)>:
c0010843:	83 ec 0c             	sub    esp,0xc
c0010846:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001084b:	48                   	dec    eax
c001084c:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0010851:	75 01                	jne    c0010854 <Krnl::powerThread(void*)+0x11>
c0010853:	fb                   	sti    
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	c6 05 e0 32 02 c0 00 	mov    BYTE PTR ds:0xc00232e0,0x0
c001085e:	6a 0a                	push   0xa
c0010860:	e8 3b 35 00 00       	call   c0013da0 <sleep(unsigned int)>
c0010865:	83 05 24 33 02 c0 0a 	add    DWORD PTR ds:0xc0023324,0xa
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	eb e3                	jmp    c0010854 <Krnl::powerThread(void*)+0x11>

c0010871 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010871:	57                   	push   edi
c0010872:	b9 09 00 00 00       	mov    ecx,0x9
c0010877:	56                   	push   esi
c0010878:	bf 00 33 02 c0       	mov    edi,0xc0023300
c001087d:	fc                   	cld    
c001087e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010882:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010884:	5e                   	pop    esi
c0010885:	5f                   	pop    edi
c0010886:	c3                   	ret    

c0010887 <Krnl::userIOReceived()>:
c0010887:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c0010891:	c3                   	ret    

c0010892 <Krnl::handlePowerButton()>:
c0010892:	83 ec 0c             	sub    esp,0xc
c0010895:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c001089a:	83 f8 02             	cmp    eax,0x2
c001089d:	75 10                	jne    c00108af <Krnl::handlePowerButton()+0x1d>
c001089f:	83 ec 0c             	sub    esp,0xc
c00108a2:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c00108a8:	e8 51 6c ff ff       	call   c00074fe <Computer::shutdown()>
c00108ad:	eb 11                	jmp    c00108c0 <Krnl::handlePowerButton()+0x2e>
c00108af:	48                   	dec    eax
c00108b0:	75 11                	jne    c00108c3 <Krnl::handlePowerButton()+0x31>
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c00108bb:	e8 6e 6c ff ff       	call   c000752e <Computer::sleep()>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	83 c4 0c             	add    esp,0xc
c00108c6:	c3                   	ret    

c00108c7 <Krnl::handleSleepButton()>:
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	a1 04 33 02 c0       	mov    eax,ds:0xc0023304
c00108cf:	83 f8 02             	cmp    eax,0x2
c00108d2:	75 10                	jne    c00108e4 <Krnl::handleSleepButton()+0x1d>
c00108d4:	83 ec 0c             	sub    esp,0xc
c00108d7:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c00108dd:	e8 1c 6c ff ff       	call   c00074fe <Computer::shutdown()>
c00108e2:	eb 11                	jmp    c00108f5 <Krnl::handleSleepButton()+0x2e>
c00108e4:	48                   	dec    eax
c00108e5:	75 11                	jne    c00108f8 <Krnl::handleSleepButton()+0x31>
c00108e7:	83 ec 0c             	sub    esp,0xc
c00108ea:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c00108f0:	e8 39 6c ff ff       	call   c000752e <Computer::sleep()>
c00108f5:	83 c4 10             	add    esp,0x10
c00108f8:	83 c4 0c             	add    esp,0xc
c00108fb:	c3                   	ret    

c00108fc <Krnl::setupPowerManager()>:
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c0010909:	68 f0 00 00 00       	push   0xf0
c001090e:	c6 05 e0 32 02 c0 00 	mov    BYTE PTR ds:0xc00232e0,0x0
c0010915:	6a 00                	push   0x0
c0010917:	68 43 08 01 c0       	push   0xc0010843
c001091c:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010922:	e8 49 2f 00 00       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c0010927:	c7 05 00 33 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023300,0x2
c0010931:	c7 05 04 33 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023304,0x1
c001093b:	c7 05 08 33 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023308,0x3
c0010945:	c7 05 0c 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002330c,0x0
c001094f:	c7 05 18 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023318,0x0
c0010959:	c7 05 10 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023310,0x0
c0010963:	c7 05 1c 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002331c,0x0
c001096d:	c7 05 14 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023314,0x3c
c0010977:	c7 05 20 33 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023320,0x3c
c0010981:	83 c4 1c             	add    esp,0x1c
c0010984:	c3                   	ret    

c0010985 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010985:	55                   	push   ebp
c0010986:	57                   	push   edi
c0010987:	56                   	push   esi
c0010988:	53                   	push   ebx
c0010989:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001098f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0010996:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010998:	8d 6e 01             	lea    ebp,[esi+0x1]
c001099b:	80 fb 40             	cmp    bl,0x40
c001099e:	75 1b                	jne    c00109bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00109a0:	8a 16                	mov    dl,BYTE PTR [esi]
c00109a2:	84 d2                	test   dl,dl
c00109a4:	0f 84 f1 00 00 00    	je     c0010a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109aa:	8d 46 01             	lea    eax,[esi+0x1]
c00109ad:	80 fa 3a             	cmp    dl,0x3a
c00109b0:	74 04                	je     c00109b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00109b2:	89 c6                	mov    esi,eax
c00109b4:	eb ea                	jmp    c00109a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00109b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109b9:	89 c6                	mov    esi,eax
c00109bb:	50                   	push   eax
c00109bc:	6a 40                	push   0x40
c00109be:	6a 00                	push   0x0
c00109c0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00109c4:	50                   	push   eax
c00109c5:	e8 26 fb fe ff       	call   c00004f0 <memset>
c00109ca:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00109d1:	31 c0                	xor    eax,eax
c00109d3:	83 c4 10             	add    esp,0x10
c00109d6:	8a 0f                	mov    cl,BYTE PTR [edi]
c00109d8:	84 c9                	test   cl,cl
c00109da:	0f 84 bb 00 00 00    	je     c0010a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109e0:	3d c7 00 00 00       	cmp    eax,0xc7
c00109e5:	0f 8f b0 00 00 00    	jg     c0010a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109eb:	80 f9 0a             	cmp    cl,0xa
c00109ee:	0f 85 98 00 00 00    	jne    c0010a8c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00109f4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00109f9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00109fd:	a8 df                	test   al,0xdf
c00109ff:	0f 94 c1             	sete   cl
c0010a02:	3c 23                	cmp    al,0x23
c0010a04:	0f 94 c2             	sete   dl
c0010a07:	08 d1                	or     cl,dl
c0010a09:	75 4a                	jne    c0010a55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a0b:	8d 50 f7             	lea    edx,[eax-0x9]
c0010a0e:	80 fa 01             	cmp    dl,0x1
c0010a11:	76 42                	jbe    c0010a55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a13:	3c 5b                	cmp    al,0x5b
c0010a15:	75 42                	jne    c0010a59 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010a17:	80 fb 40             	cmp    bl,0x40
c0010a1a:	75 39                	jne    c0010a55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a1c:	83 ec 0c             	sub    esp,0xc
c0010a1f:	8d 54 24 65          	lea    edx,[esp+0x65]
c0010a23:	52                   	push   edx
c0010a24:	e8 37 fb fe ff       	call   c0000560 <strlen>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	83 f8 3f             	cmp    eax,0x3f
c0010a2f:	77 6a                	ja     c0010a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a31:	50                   	push   eax
c0010a32:	50                   	push   eax
c0010a33:	8d 54 24 61          	lea    edx,[esp+0x61]
c0010a37:	52                   	push   edx
c0010a38:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a3c:	52                   	push   edx
c0010a3d:	e8 de fb fe ff       	call   c0000620 <strcpy>
c0010a42:	58                   	pop    eax
c0010a43:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a47:	52                   	push   edx
c0010a48:	e8 13 fb fe ff       	call   c0000560 <strlen>
c0010a4d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a52:	83 c4 10             	add    esp,0x10
c0010a55:	31 d2                	xor    edx,edx
c0010a57:	eb 3a                	jmp    c0010a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a59:	80 fb 40             	cmp    bl,0x40
c0010a5c:	74 06                	je     c0010a64 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a5e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a62:	eb 20                	jmp    c0010a84 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a64:	50                   	push   eax
c0010a65:	50                   	push   eax
c0010a66:	55                   	push   ebp
c0010a67:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a6b:	50                   	push   eax
c0010a6c:	e8 8f fc fe ff       	call   c0000700 <strcmp>
c0010a71:	83 c4 10             	add    esp,0x10
c0010a74:	85 c0                	test   eax,eax
c0010a76:	75 dd                	jne    c0010a55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a78:	eb e4                	jmp    c0010a5e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a7a:	8d 50 01             	lea    edx,[eax+0x1]
c0010a7d:	80 f9 3d             	cmp    cl,0x3d
c0010a80:	74 1d                	je     c0010a9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a82:	89 d0                	mov    eax,edx
c0010a84:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a86:	84 c9                	test   cl,cl
c0010a88:	75 f0                	jne    c0010a7a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a8a:	eb 0f                	jmp    c0010a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a8c:	8d 50 01             	lea    edx,[eax+0x1]
c0010a8f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a93:	47                   	inc    edi
c0010a94:	89 d0                	mov    eax,edx
c0010a96:	e9 3b ff ff ff       	jmp    c00109d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a9b:	31 c0                	xor    eax,eax
c0010a9d:	eb 33                	jmp    c0010ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010a9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010aa3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010aa6:	50                   	push   eax
c0010aa7:	50                   	push   eax
c0010aa8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010aac:	50                   	push   eax
c0010aad:	56                   	push   esi
c0010aae:	e8 4d fc fe ff       	call   c0000700 <strcmp>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	85 c0                	test   eax,eax
c0010ab8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010abc:	75 97                	jne    c0010a55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010abe:	51                   	push   ecx
c0010abf:	51                   	push   ecx
c0010ac0:	52                   	push   edx
c0010ac1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010ac8:	e8 53 fb fe ff       	call   c0000620 <strcpy>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	b0 01                	mov    al,0x1
c0010ad2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010ad8:	5b                   	pop    ebx
c0010ad9:	5e                   	pop    esi
c0010ada:	5f                   	pop    edi
c0010adb:	5d                   	pop    ebp
c0010adc:	c3                   	ret    

c0010add <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010add:	57                   	push   edi
c0010ade:	56                   	push   esi
c0010adf:	53                   	push   ebx
c0010ae0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010ae6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010aed:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010af4:	53                   	push   ebx
c0010af5:	e8 66 fa fe ff       	call   c0000560 <strlen>
c0010afa:	89 34 24             	mov    DWORD PTR [esp],esi
c0010afd:	89 c7                	mov    edi,eax
c0010aff:	e8 5c fa fe ff       	call   c0000560 <strlen>
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010b0b:	3d ff 00 00 00       	cmp    eax,0xff
c0010b10:	0f 87 d3 00 00 00    	ja     c0010be9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b16:	57                   	push   edi
c0010b17:	57                   	push   edi
c0010b18:	56                   	push   esi
c0010b19:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010b1d:	56                   	push   esi
c0010b1e:	e8 fd fa fe ff       	call   c0000620 <strcpy>
c0010b23:	58                   	pop    eax
c0010b24:	5a                   	pop    edx
c0010b25:	68 5f e9 01 c0       	push   0xc001e95f
c0010b2a:	56                   	push   esi
c0010b2b:	e8 b0 fc fe ff       	call   c00007e0 <strcat>
c0010b30:	59                   	pop    ecx
c0010b31:	5f                   	pop    edi
c0010b32:	53                   	push   ebx
c0010b33:	56                   	push   esi
c0010b34:	e8 a7 fc fe ff       	call   c00007e0 <strcat>
c0010b39:	58                   	pop    eax
c0010b3a:	5a                   	pop    edx
c0010b3b:	68 7a e6 01 c0       	push   0xc001e67a
c0010b40:	56                   	push   esi
c0010b41:	e8 9a fc fe ff       	call   c00007e0 <strcat>
c0010b46:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010b4d:	e8 0b 73 ff ff       	call   c0007e5d <malloc>
c0010b52:	83 c4 0c             	add    esp,0xc
c0010b55:	89 c3                	mov    ebx,eax
c0010b57:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c0010b5d:	56                   	push   esi
c0010b5e:	50                   	push   eax
c0010b5f:	e8 fe a5 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	85 db                	test   ebx,ebx
c0010b69:	74 7e                	je     c0010be9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b6b:	51                   	push   ecx
c0010b6c:	51                   	push   ecx
c0010b6d:	6a 01                	push   0x1
c0010b6f:	53                   	push   ebx
c0010b70:	e8 ad a6 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 08                	je     c0010b84 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b7c:	83 ec 0c             	sub    esp,0xc
c0010b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b81:	53                   	push   ebx
c0010b82:	eb 5f                	jmp    c0010be3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b84:	52                   	push   edx
c0010b85:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b89:	50                   	push   eax
c0010b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b8e:	50                   	push   eax
c0010b8f:	53                   	push   ebx
c0010b90:	e8 39 a9 ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0010b95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b99:	83 c4 10             	add    esp,0x10
c0010b9c:	89 c1                	mov    ecx,eax
c0010b9e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010ba2:	74 31                	je     c0010bd5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	50                   	push   eax
c0010ba8:	e8 b0 72 ff ff       	call   c0007e5d <malloc>
c0010bad:	89 c6                	mov    esi,eax
c0010baf:	58                   	pop    eax
c0010bb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bb2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010bb6:	52                   	push   edx
c0010bb7:	56                   	push   esi
c0010bb8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bbc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bc0:	53                   	push   ebx
c0010bc1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010bc4:	83 c4 20             	add    esp,0x20
c0010bc7:	85 c0                	test   eax,eax
c0010bc9:	75 0a                	jne    c0010bd5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010bcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bcf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010bd3:	74 18                	je     c0010bed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010bd5:	83 ec 0c             	sub    esp,0xc
c0010bd8:	53                   	push   ebx
c0010bd9:	e8 a2 a6 ff ff       	call   c000b280 <File::close()>
c0010bde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010be3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010be6:	83 c4 10             	add    esp,0x10
c0010be9:	31 c0                	xor    eax,eax
c0010beb:	eb 3b                	jmp    c0010c28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010bed:	83 ec 0c             	sub    esp,0xc
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 8a a6 ff ff       	call   c000b280 <File::close()>
c0010bf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bfe:	83 c4 0c             	add    esp,0xc
c0010c01:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c08:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c0f:	56                   	push   esi
c0010c10:	e8 70 fd ff ff       	call   c0010985 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010c15:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c18:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010c1c:	e8 4c 72 ff ff       	call   c0007e6d <free>
c0010c21:	83 c4 10             	add    esp,0x10
c0010c24:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c28:	81 c4 20 01 00 00    	add    esp,0x120
c0010c2e:	5b                   	pop    ebx
c0010c2f:	5e                   	pop    esi
c0010c30:	5f                   	pop    edi
c0010c31:	c3                   	ret    

c0010c32 <Reg::getLine(char*, char*, char*)>:
c0010c32:	57                   	push   edi
c0010c33:	56                   	push   esi
c0010c34:	53                   	push   ebx
c0010c35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c41:	57                   	push   edi
c0010c42:	56                   	push   esi
c0010c43:	53                   	push   ebx
c0010c44:	68 7f e6 01 c0       	push   0xc001e67f
c0010c49:	e8 8f fe ff ff       	call   c0010add <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c4e:	83 c4 10             	add    esp,0x10
c0010c51:	84 c0                	test   al,al
c0010c53:	75 10                	jne    c0010c65 <Reg::getLine(char*, char*, char*)+0x33>
c0010c55:	57                   	push   edi
c0010c56:	56                   	push   esi
c0010c57:	53                   	push   ebx
c0010c58:	68 a4 e6 01 c0       	push   0xc001e6a4
c0010c5d:	e8 7b fe ff ff       	call   c0010add <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c62:	83 c4 10             	add    esp,0x10
c0010c65:	5b                   	pop    ebx
c0010c66:	5e                   	pop    esi
c0010c67:	5f                   	pop    edi
c0010c68:	c3                   	ret    

c0010c69 <Reg::readInt(char*, char*, int*)>:
c0010c69:	55                   	push   ebp
c0010c6a:	57                   	push   edi
c0010c6b:	56                   	push   esi
c0010c6c:	53                   	push   ebx
c0010c6d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c73:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c77:	57                   	push   edi
c0010c78:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c7f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c86:	e8 a7 ff ff ff       	call   c0010c32 <Reg::getLine(char*, char*, char*)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	84 c0                	test   al,al
c0010c90:	0f 84 b3 00 00 00    	je     c0010d49 <Reg::readInt(char*, char*, int*)+0xe0>
c0010c96:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c9a:	80 fa 2b             	cmp    dl,0x2b
c0010c9d:	74 0c                	je     c0010cab <Reg::readInt(char*, char*, int*)+0x42>
c0010c9f:	80 fa 2d             	cmp    dl,0x2d
c0010ca2:	75 0e                	jne    c0010cb2 <Reg::readInt(char*, char*, int*)+0x49>
c0010ca4:	ba 01 00 00 00       	mov    edx,0x1
c0010ca9:	eb 0b                	jmp    c0010cb6 <Reg::readInt(char*, char*, int*)+0x4d>
c0010cab:	ba 01 00 00 00       	mov    edx,0x1
c0010cb0:	eb 02                	jmp    c0010cb4 <Reg::readInt(char*, char*, int*)+0x4b>
c0010cb2:	31 d2                	xor    edx,edx
c0010cb4:	31 c0                	xor    eax,eax
c0010cb6:	be 0a 00 00 00       	mov    esi,0xa
c0010cbb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010cc0:	75 20                	jne    c0010ce2 <Reg::readInt(char*, char*, int*)+0x79>
c0010cc2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010cc6:	80 f9 78             	cmp    cl,0x78
c0010cc9:	75 0a                	jne    c0010cd5 <Reg::readInt(char*, char*, int*)+0x6c>
c0010ccb:	83 c2 02             	add    edx,0x2
c0010cce:	be 10 00 00 00       	mov    esi,0x10
c0010cd3:	eb 0d                	jmp    c0010ce2 <Reg::readInt(char*, char*, int*)+0x79>
c0010cd5:	80 f9 62             	cmp    cl,0x62
c0010cd8:	75 08                	jne    c0010ce2 <Reg::readInt(char*, char*, int*)+0x79>
c0010cda:	83 c2 02             	add    edx,0x2
c0010cdd:	be 02 00 00 00       	mov    esi,0x2
c0010ce2:	01 d7                	add    edi,edx
c0010ce4:	31 d2                	xor    edx,edx
c0010ce6:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010ce8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010cec:	80 fb 0d             	cmp    bl,0xd
c0010cef:	0f 94 c3             	sete   bl
c0010cf2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010cf7:	0f 94 c1             	sete   cl
c0010cfa:	08 cb                	or     bl,cl
c0010cfc:	75 3a                	jne    c0010d38 <Reg::readInt(char*, char*, int*)+0xcf>
c0010cfe:	0f af d6             	imul   edx,esi
c0010d01:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010d06:	83 fe 10             	cmp    esi,0x10
c0010d09:	75 26                	jne    c0010d31 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d0b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d0f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010d12:	89 e9                	mov    ecx,ebp
c0010d14:	80 f9 05             	cmp    cl,0x5
c0010d17:	77 06                	ja     c0010d1f <Reg::readInt(char*, char*, int*)+0xb6>
c0010d19:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010d1d:	eb 16                	jmp    c0010d35 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d1f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d23:	83 e9 61             	sub    ecx,0x61
c0010d26:	80 f9 05             	cmp    cl,0x5
c0010d29:	77 06                	ja     c0010d31 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d2b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010d2f:	eb 04                	jmp    c0010d35 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d31:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010d35:	47                   	inc    edi
c0010d36:	eb ae                	jmp    c0010ce6 <Reg::readInt(char*, char*, int*)+0x7d>
c0010d38:	84 c0                	test   al,al
c0010d3a:	74 02                	je     c0010d3e <Reg::readInt(char*, char*, int*)+0xd5>
c0010d3c:	f7 da                	neg    edx
c0010d3e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010d45:	89 10                	mov    DWORD PTR [eax],edx
c0010d47:	88 d8                	mov    al,bl
c0010d49:	81 c4 ec 00 00 00    	add    esp,0xec
c0010d4f:	5b                   	pop    ebx
c0010d50:	5e                   	pop    esi
c0010d51:	5f                   	pop    edi
c0010d52:	5d                   	pop    ebp
c0010d53:	c3                   	ret    

c0010d54 <Reg::readString(char*, char*, char*, int)>:
c0010d54:	57                   	push   edi
c0010d55:	56                   	push   esi
c0010d56:	53                   	push   ebx
c0010d57:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d5d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d64:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d68:	57                   	push   edi
c0010d69:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d70:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d77:	e8 b6 fe ff ff       	call   c0010c32 <Reg::getLine(char*, char*, char*)>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 c6                	mov    esi,eax
c0010d81:	84 c0                	test   al,al
c0010d83:	74 44                	je     c0010dc9 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d85:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d8c:	31 c0                	xor    eax,eax
c0010d8e:	4a                   	dec    edx
c0010d8f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d92:	84 c9                	test   cl,cl
c0010d94:	74 0f                	je     c0010da5 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d96:	39 c2                	cmp    edx,eax
c0010d98:	7e 0b                	jle    c0010da5 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d9a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010d9d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010da2:	40                   	inc    eax
c0010da3:	eb ea                	jmp    c0010d8f <Reg::readString(char*, char*, char*, int)+0x3b>
c0010da5:	83 ec 0c             	sub    esp,0xc
c0010da8:	53                   	push   ebx
c0010da9:	e8 b2 f7 fe ff       	call   c0000560 <strlen>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010db6:	75 11                	jne    c0010dc9 <Reg::readString(char*, char*, char*, int)+0x75>
c0010db8:	83 ec 0c             	sub    esp,0xc
c0010dbb:	53                   	push   ebx
c0010dbc:	e8 9f f7 fe ff       	call   c0000560 <strlen>
c0010dc1:	83 c4 10             	add    esp,0x10
c0010dc4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010dc9:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010dcf:	89 f0                	mov    eax,esi
c0010dd1:	5b                   	pop    ebx
c0010dd2:	5e                   	pop    esi
c0010dd3:	5f                   	pop    edi
c0010dd4:	c3                   	ret    

c0010dd5 <Reg::readBool(char*, char*, bool*)>:
c0010dd5:	83 ec 20             	sub    esp,0x20
c0010dd8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010ddc:	50                   	push   eax
c0010ddd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010de5:	e8 7f fe ff ff       	call   c0010c69 <Reg::readInt(char*, char*, int*)>
c0010dea:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010def:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010df3:	0f 95 02             	setne  BYTE PTR [edx]
c0010df6:	83 c4 2c             	add    esp,0x2c
c0010df9:	c3                   	ret    

c0010dfa <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010dfa:	53                   	push   ebx
c0010dfb:	83 ec 1c             	sub    esp,0x1c
c0010dfe:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010e02:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010e06:	50                   	push   eax
c0010e07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e0f:	e8 c1 ff ff ff       	call   c0010dd5 <Reg::readBool(char*, char*, bool*)>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	84 c0                	test   al,al
c0010e19:	74 04                	je     c0010e1f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010e1b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010e1f:	88 d8                	mov    al,bl
c0010e21:	83 c4 18             	add    esp,0x18
c0010e24:	5b                   	pop    ebx
c0010e25:	c3                   	ret    

c0010e26 <Reg::readIntWithDefault(char*, char*, int)>:
c0010e26:	53                   	push   ebx
c0010e27:	83 ec 1c             	sub    esp,0x1c
c0010e2a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010e2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010e32:	50                   	push   eax
c0010e33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e3b:	e8 29 fe ff ff       	call   c0010c69 <Reg::readInt(char*, char*, int*)>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	84 c0                	test   al,al
c0010e45:	74 04                	je     c0010e4b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010e47:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e4b:	89 d8                	mov    eax,ebx
c0010e4d:	83 c4 18             	add    esp,0x18
c0010e50:	5b                   	pop    ebx
c0010e51:	c3                   	ret    

c0010e52 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e52:	57                   	push   edi
c0010e53:	56                   	push   esi
c0010e54:	56                   	push   esi
c0010e55:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e59:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e5d:	56                   	push   esi
c0010e5e:	57                   	push   edi
c0010e5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e67:	e8 e8 fe ff ff       	call   c0010d54 <Reg::readString(char*, char*, char*, int)>
c0010e6c:	83 c4 10             	add    esp,0x10
c0010e6f:	84 c0                	test   al,al
c0010e71:	75 1a                	jne    c0010e8d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e73:	51                   	push   ecx
c0010e74:	56                   	push   esi
c0010e75:	6a 00                	push   0x0
c0010e77:	57                   	push   edi
c0010e78:	e8 73 f6 fe ff       	call   c00004f0 <memset>
c0010e7d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e80:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e8d:	89 f8                	mov    eax,edi
c0010e8f:	5a                   	pop    edx
c0010e90:	5e                   	pop    esi
c0010e91:	5f                   	pop    edi
c0010e92:	c3                   	ret    

c0010e93 <Sys::eject(regs*)>:
c0010e93:	83 ec 0c             	sub    esp,0xc
c0010e96:	83 ca ff             	or     edx,0xffffffff
c0010e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010ea0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010ea5:	83 e9 41             	sub    ecx,0x41
c0010ea8:	83 f9 19             	cmp    ecx,0x19
c0010eab:	77 18                	ja     c0010ec5 <Sys::eject(regs*)+0x32>
c0010ead:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c0010eb4:	85 c9                	test   ecx,ecx
c0010eb6:	74 0d                	je     c0010ec5 <Sys::eject(regs*)+0x32>
c0010eb8:	83 ec 0c             	sub    esp,0xc
c0010ebb:	51                   	push   ecx
c0010ebc:	e8 a9 c3 ff ff       	call   c000d26a <LogicalDisk::eject()>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	99                   	cdq    
c0010ec5:	83 c4 0c             	add    esp,0xc
c0010ec8:	c3                   	ret    

c0010ec9 <Sys::exit(regs*)>:
c0010ec9:	83 ec 18             	sub    esp,0x18
c0010ecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010ed3:	e8 dc 34 00 00       	call   c00143b4 <terminateTask(int)>
c0010ed8:	83 c8 ff             	or     eax,0xffffffff
c0010edb:	83 c4 1c             	add    esp,0x1c
c0010ede:	89 c2                	mov    edx,eax
c0010ee0:	c3                   	ret    

c0010ee1 <Sys::getCwd(regs*)>:
c0010ee1:	83 ec 10             	sub    esp,0x10
c0010ee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ee8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010eeb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010eee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010ef6:	e8 69 a0 ff ff       	call   c000af64 <Fs::getcwd(Process*, char*, int)>
c0010efb:	83 c4 1c             	add    esp,0x1c
c0010efe:	99                   	cdq    
c0010eff:	c3                   	ret    

c0010f00 <Sys::getPID(regs*)>:
c0010f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f0a:	99                   	cdq    
c0010f0b:	c3                   	ret    

c0010f0c <Sys::getRAMData(regs*)>:
c0010f0c:	8b 0d 68 08 02 c0    	mov    ecx,DWORD PTR ds:0xc0020868
c0010f12:	69 05 64 08 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020864,0xc8
c0010f1c:	99                   	cdq    
c0010f1d:	f7 f9                	idiv   ecx
c0010f1f:	c1 e0 18             	shl    eax,0x18
c0010f22:	09 c8                	or     eax,ecx
c0010f24:	99                   	cdq    
c0010f25:	c3                   	ret    

c0010f26 <Sys::getVGAPtr(regs*)>:
c0010f26:	55                   	push   ebp
c0010f27:	57                   	push   edi
c0010f28:	56                   	push   esi
c0010f29:	53                   	push   ebx
c0010f2a:	83 ec 18             	sub    esp,0x18
c0010f2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f31:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f34:	e8 7b 2f 00 00       	call   c0013eb4 <Thr::processFromPID(int)>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	89 c1                	mov    ecx,eax
c0010f3e:	b8 01 00 00 00       	mov    eax,0x1
c0010f43:	85 c9                	test   ecx,ecx
c0010f45:	74 57                	je     c0010f9e <Sys::getVGAPtr(regs*)+0x78>
c0010f47:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010f4d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010f51:	74 0c                	je     c0010f5f <Sys::getVGAPtr(regs*)+0x39>
c0010f53:	83 ec 0c             	sub    esp,0xc
c0010f56:	55                   	push   ebp
c0010f57:	e8 31 7c ff ff       	call   c0008b8d <setActiveTerminal(VgaText*)>
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f62:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f65:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f6c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f72:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f7b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f7e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f84:	50                   	push   eax
c0010f85:	50                   	push   eax
c0010f86:	68 bf e6 01 c0       	push   0xc001e6bf
c0010f8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f8e:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f93:	50                   	push   eax
c0010f94:	e8 87 f6 fe ff       	call   c0000620 <strcpy>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	31 c0                	xor    eax,eax
c0010f9e:	83 c4 0c             	add    esp,0xc
c0010fa1:	31 d2                	xor    edx,edx
c0010fa3:	5b                   	pop    ebx
c0010fa4:	5e                   	pop    esi
c0010fa5:	5f                   	pop    edi
c0010fa6:	5d                   	pop    ebp
c0010fa7:	c3                   	ret    

c0010fa8 <Sys::loadDLL(regs*)>:
c0010fa8:	56                   	push   esi
c0010fa9:	53                   	push   ebx
c0010faa:	31 d2                	xor    edx,edx
c0010fac:	51                   	push   ecx
c0010fad:	b8 01 00 00 00       	mov    eax,0x1
c0010fb2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fb6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010fba:	0f 84 8c 00 00 00    	je     c001104c <Sys::loadDLL(regs*)+0xa4>
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	68 14 01 00 00       	push   0x114
c0010fc8:	e8 90 6e ff ff       	call   c0007e5d <malloc>
c0010fcd:	83 c4 0c             	add    esp,0xc
c0010fd0:	89 c3                	mov    ebx,eax
c0010fd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010fda:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fdd:	53                   	push   ebx
c0010fde:	e8 7f a1 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	31 d2                	xor    edx,edx
c0010fe8:	b8 02 00 00 00       	mov    eax,0x2
c0010fed:	85 db                	test   ebx,ebx
c0010fef:	74 5b                	je     c001104c <Sys::loadDLL(regs*)+0xa4>
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	53                   	push   ebx
c0010ff5:	e8 96 a4 ff ff       	call   c000b490 <File::exists()>
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	84 c0                	test   al,al
c0010fff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011001:	75 11                	jne    c0011014 <Sys::loadDLL(regs*)+0x6c>
c0011003:	83 ec 0c             	sub    esp,0xc
c0011006:	53                   	push   ebx
c0011007:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001100a:	83 c4 10             	add    esp,0x10
c001100d:	b8 03 00 00 00       	mov    eax,0x3
c0011012:	eb 36                	jmp    c001104a <Sys::loadDLL(regs*)+0xa2>
c0011014:	83 ec 0c             	sub    esp,0xc
c0011017:	53                   	push   ebx
c0011018:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001101b:	58                   	pop    eax
c001101c:	5a                   	pop    edx
c001101d:	6a 00                	push   0x0
c001101f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011022:	e8 77 20 00 00       	call   c001309e <Thr::loadDLL(char const*, bool)>
c0011027:	83 c4 10             	add    esp,0x10
c001102a:	89 c1                	mov    ecx,eax
c001102c:	31 d2                	xor    edx,edx
c001102e:	b8 04 00 00 00       	mov    eax,0x4
c0011033:	85 c9                	test   ecx,ecx
c0011035:	74 15                	je     c001104c <Sys::loadDLL(regs*)+0xa4>
c0011037:	53                   	push   ebx
c0011038:	53                   	push   ebx
c0011039:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c001103f:	51                   	push   ecx
c0011040:	e8 8a 22 00 00       	call   c00132cf <Thr::executeDLL(unsigned long, void*)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	31 c0                	xor    eax,eax
c001104a:	31 d2                	xor    edx,edx
c001104c:	59                   	pop    ecx
c001104d:	5b                   	pop    ebx
c001104e:	5e                   	pop    esi
c001104f:	c3                   	ret    

c0011050 <Sys::read(regs*)>:
c0011050:	57                   	push   edi
c0011051:	56                   	push   esi
c0011052:	53                   	push   ebx
c0011053:	83 ec 10             	sub    esp,0x10
c0011056:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001105a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001105d:	83 f8 02             	cmp    eax,0x2
c0011060:	77 10                	ja     c0011072 <Sys::read(regs*)+0x22>
c0011062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011067:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011070:	eb 0e                	jmp    c0011080 <Sys::read(regs*)+0x30>
c0011072:	83 ec 0c             	sub    esp,0xc
c0011075:	50                   	push   eax
c0011076:	e8 c8 87 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	89 c1                	mov    ecx,eax
c0011080:	83 c8 ff             	or     eax,0xffffffff
c0011083:	85 c9                	test   ecx,ecx
c0011085:	89 c2                	mov    edx,eax
c0011087:	74 28                	je     c00110b1 <Sys::read(regs*)+0x61>
c0011089:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011091:	31 ff                	xor    edi,edi
c0011093:	83 ec 0c             	sub    esp,0xc
c0011096:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011098:	8d 54 24 18          	lea    edx,[esp+0x18]
c001109c:	52                   	push   edx
c001109d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110a0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00110a3:	57                   	push   edi
c00110a4:	56                   	push   esi
c00110a5:	51                   	push   ecx
c00110a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00110a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110ad:	83 c4 20             	add    esp,0x20
c00110b0:	99                   	cdq    
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	5b                   	pop    ebx
c00110b5:	5e                   	pop    esi
c00110b6:	5f                   	pop    edi
c00110b7:	c3                   	ret    

c00110b8 <Sys::sbrk(regs*)>:
c00110b8:	56                   	push   esi
c00110b9:	53                   	push   ebx
c00110ba:	50                   	push   eax
c00110bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110c7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00110ca:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00110d0:	85 db                	test   ebx,ebx
c00110d2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00110d5:	74 02                	je     c00110d9 <Sys::sbrk(regs*)+0x21>
c00110d7:	79 06                	jns    c00110df <Sys::sbrk(regs*)+0x27>
c00110d9:	89 f0                	mov    eax,esi
c00110db:	31 d2                	xor    edx,edx
c00110dd:	eb 2a                	jmp    c0011109 <Sys::sbrk(regs*)+0x51>
c00110df:	83 c8 ff             	or     eax,0xffffffff
c00110e2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00110e8:	89 c2                	mov    edx,eax
c00110ea:	77 1d                	ja     c0011109 <Sys::sbrk(regs*)+0x51>
c00110ec:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00110f2:	50                   	push   eax
c00110f3:	c1 ea 0c             	shr    edx,0xc
c00110f6:	68 07 0c 00 00       	push   0xc07
c00110fb:	52                   	push   edx
c00110fc:	51                   	push   ecx
c00110fd:	e8 30 90 ff ff       	call   c000a132 <VAS::allocatePages(int, int)>
c0011102:	89 f0                	mov    eax,esi
c0011104:	31 d2                	xor    edx,edx
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	59                   	pop    ecx
c001110a:	5b                   	pop    ebx
c001110b:	5e                   	pop    esi
c001110c:	c3                   	ret    

c001110d <Sys::setCwd(regs*)>:
c001110d:	83 ec 14             	sub    esp,0x14
c0011110:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011114:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001111c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001111f:	e8 0b a4 ff ff       	call   c000b52f <Fs::setcwd(Process*, char*)>
c0011124:	83 c4 1c             	add    esp,0x1c
c0011127:	99                   	cdq    
c0011128:	c3                   	ret    

c0011129 <Sys::setTime(regs*)>:
c0011129:	55                   	push   ebp
c001112a:	31 c9                	xor    ecx,ecx
c001112c:	57                   	push   edi
c001112d:	bd 0c 00 00 00       	mov    ebp,0xc
c0011132:	56                   	push   esi
c0011133:	53                   	push   ebx
c0011134:	31 db                	xor    ebx,ebx
c0011136:	83 ec 10             	sub    esp,0x10
c0011139:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001113d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011140:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011143:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011146:	89 c2                	mov    edx,eax
c0011148:	66 81 ef 6c 07       	sub    di,0x76c
c001114d:	83 e2 1f             	and    edx,0x1f
c0011150:	c1 e7 10             	shl    edi,0x10
c0011153:	42                   	inc    edx
c0011154:	c1 e8 05             	shr    eax,0x5
c0011157:	88 d1                	mov    cl,dl
c0011159:	31 d2                	xor    edx,edx
c001115b:	f7 f5                	div    ebp
c001115d:	89 dd                	mov    ebp,ebx
c001115f:	88 d5                	mov    ch,dl
c0011161:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011167:	0f b7 c1             	movzx  eax,cx
c001116a:	31 d2                	xor    edx,edx
c001116c:	09 f8                	or     eax,edi
c001116e:	bf 3c 00 00 00       	mov    edi,0x3c
c0011173:	89 c1                	mov    ecx,eax
c0011175:	89 f0                	mov    eax,esi
c0011177:	f7 f7                	div    edi
c0011179:	c1 e2 10             	shl    edx,0x10
c001117c:	09 d5                	or     ebp,edx
c001117e:	31 d2                	xor    edx,edx
c0011180:	89 eb                	mov    ebx,ebp
c0011182:	f7 f7                	div    edi
c0011184:	bf 10 0e 00 00       	mov    edi,0xe10
c0011189:	88 d7                	mov    bh,dl
c001118b:	89 f0                	mov    eax,esi
c001118d:	31 d2                	xor    edx,edx
c001118f:	f7 f7                	div    edi
c0011191:	bf 18 00 00 00       	mov    edi,0x18
c0011196:	31 d2                	xor    edx,edx
c0011198:	f7 f7                	div    edi
c001119a:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001119f:	88 d3                	mov    bl,dl
c00111a1:	53                   	push   ebx
c00111a2:	51                   	push   ecx
c00111a3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00111a9:	e8 92 ab ff ff       	call   c000bd40 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00111ae:	83 c4 1c             	add    esp,0x1c
c00111b1:	83 f0 01             	xor    eax,0x1
c00111b4:	5b                   	pop    ebx
c00111b5:	0f b6 c0             	movzx  eax,al
c00111b8:	5e                   	pop    esi
c00111b9:	31 d2                	xor    edx,edx
c00111bb:	5f                   	pop    edi
c00111bc:	5d                   	pop    ebp
c00111bd:	c3                   	ret    

c00111be <Sys::timezone(regs*)>:
c00111be:	53                   	push   ebx
c00111bf:	83 ec 08             	sub    esp,0x8
c00111c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111c6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00111ca:	75 17                	jne    c00111e3 <Sys::timezone(regs*)+0x25>
c00111cc:	83 ec 0c             	sub    esp,0xc
c00111cf:	68 c9 e6 01 c0       	push   0xc001e6c9
c00111d4:	e8 13 9a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00111d9:	83 c8 ff             	or     eax,0xffffffff
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	89 c2                	mov    edx,eax
c00111e1:	eb 20                	jmp    c0011203 <Sys::timezone(regs*)+0x45>
c00111e3:	83 ec 0c             	sub    esp,0xc
c00111e6:	68 de e6 01 c0       	push   0xc001e6de
c00111eb:	e8 fc 99 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00111f0:	58                   	pop    eax
c00111f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00111f4:	e8 a3 a8 ff ff       	call   c000ba9c <User::loadClockSettings(int)>
c00111f9:	83 c4 10             	add    esp,0x10
c00111fc:	b8 01 00 00 00       	mov    eax,0x1
c0011201:	31 d2                	xor    edx,edx
c0011203:	83 c4 08             	add    esp,0x8
c0011206:	5b                   	pop    ebx
c0011207:	c3                   	ret    

c0011208 <Sys::write(regs*)>:
c0011208:	57                   	push   edi
c0011209:	56                   	push   esi
c001120a:	53                   	push   ebx
c001120b:	83 ec 10             	sub    esp,0x10
c001120e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011212:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011215:	83 f8 02             	cmp    eax,0x2
c0011218:	77 10                	ja     c001122a <Sys::write(regs*)+0x22>
c001121a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001121f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011222:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011228:	eb 0e                	jmp    c0011238 <Sys::write(regs*)+0x30>
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	50                   	push   eax
c001122e:	e8 10 86 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011233:	83 c4 10             	add    esp,0x10
c0011236:	89 c1                	mov    ecx,eax
c0011238:	83 c8 ff             	or     eax,0xffffffff
c001123b:	85 c9                	test   ecx,ecx
c001123d:	89 c2                	mov    edx,eax
c001123f:	74 28                	je     c0011269 <Sys::write(regs*)+0x61>
c0011241:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011249:	31 ff                	xor    edi,edi
c001124b:	83 ec 0c             	sub    esp,0xc
c001124e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011250:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011254:	52                   	push   edx
c0011255:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011258:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001125b:	57                   	push   edi
c001125c:	56                   	push   esi
c001125d:	51                   	push   ecx
c001125e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011261:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011265:	83 c4 20             	add    esp,0x20
c0011268:	99                   	cdq    
c0011269:	83 c4 10             	add    esp,0x10
c001126c:	5b                   	pop    ebx
c001126d:	5e                   	pop    esi
c001126e:	5f                   	pop    edi
c001126f:	c3                   	ret    

c0011270 <Sys::wsbe(regs*)>:
c0011270:	57                   	push   edi
c0011271:	b9 0b 00 00 00       	mov    ecx,0xb
c0011276:	56                   	push   esi
c0011277:	be 1d e7 01 c0       	mov    esi,0xc001e71d
c001127c:	53                   	push   ebx
c001127d:	83 ec 30             	sub    esp,0x30
c0011280:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011284:	fc                   	cld    
c0011285:	83 ec 0c             	sub    esp,0xc
c0011288:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001128a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001128e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011293:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011296:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001129c:	8b 06                	mov    eax,DWORD PTR [esi]
c001129e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00112a1:	57                   	push   edi
c00112a2:	e8 b9 f2 fe ff       	call   c0000560 <strlen>
c00112a7:	5a                   	pop    edx
c00112a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00112ac:	52                   	push   edx
c00112ad:	31 d2                	xor    edx,edx
c00112af:	57                   	push   edi
c00112b0:	52                   	push   edx
c00112b1:	50                   	push   eax
c00112b2:	56                   	push   esi
c00112b3:	ff d3                	call   ebx
c00112b5:	83 c4 14             	add    esp,0x14
c00112b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112bc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00112bf:	e8 f0 30 00 00       	call   c00143b4 <terminateTask(int)>
c00112c4:	83 c4 40             	add    esp,0x40
c00112c7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00112cc:	5b                   	pop    ebx
c00112cd:	31 d2                	xor    edx,edx
c00112cf:	5e                   	pop    esi
c00112d0:	5f                   	pop    edi
c00112d1:	c3                   	ret    

c00112d2 <Sys::yield(regs*)>:
c00112d2:	83 ec 0c             	sub    esp,0xc
c00112d5:	fa                   	cli    
c00112d6:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00112dc:	e8 af 27 00 00       	call   c0013a90 <schedule()>
c00112e1:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00112e6:	48                   	dec    eax
c00112e7:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00112ec:	75 01                	jne    c00112ef <Sys::yield(regs*)+0x1d>
c00112ee:	fb                   	sti    
c00112ef:	31 c0                	xor    eax,eax
c00112f1:	31 d2                	xor    edx,edx
c00112f3:	83 c4 0c             	add    esp,0xc
c00112f6:	c3                   	ret    

c00112f7 <sysCallSeekDir(regs*)>:
c00112f7:	31 c0                	xor    eax,eax
c00112f9:	31 d2                	xor    edx,edx
c00112fb:	c3                   	ret    

c00112fc <sysCallTellDir(regs*)>:
c00112fc:	31 c0                	xor    eax,eax
c00112fe:	31 d2                	xor    edx,edx
c0011300:	c3                   	ret    

c0011301 <sysCallVerify(regs*)>:
c0011301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011305:	31 d2                	xor    edx,edx
c0011307:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001130a:	c3                   	ret    

c001130b <sysCallGetArgc(regs*)>:
c001130b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011310:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011313:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011319:	99                   	cdq    
c001131a:	c3                   	ret    

c001131b <sysCallTTYName(regs*)>:
c001131b:	b8 01 00 00 00       	mov    eax,0x1
c0011320:	31 d2                	xor    edx,edx
c0011322:	c3                   	ret    

c0011323 <sysFormatDisk(regs*)>:
c0011323:	56                   	push   esi
c0011324:	53                   	push   ebx
c0011325:	50                   	push   eax
c0011326:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001132a:	8b 1d 34 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020934
c0011330:	eb 28                	jmp    c001135a <sysFormatDisk(regs*)+0x37>
c0011332:	83 ec 0c             	sub    esp,0xc
c0011335:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011338:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001133b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001133d:	51                   	push   ecx
c001133e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011341:	51                   	push   ecx
c0011342:	50                   	push   eax
c0011343:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c001134a:	50                   	push   eax
c001134b:	53                   	push   ebx
c001134c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001134f:	83 c4 20             	add    esp,0x20
c0011352:	83 f8 08             	cmp    eax,0x8
c0011355:	75 12                	jne    c0011369 <sysFormatDisk(regs*)+0x46>
c0011357:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001135a:	85 db                	test   ebx,ebx
c001135c:	75 d4                	jne    c0011332 <sysFormatDisk(regs*)+0xf>
c001135e:	59                   	pop    ecx
c001135f:	b8 03 00 00 00       	mov    eax,0x3
c0011364:	31 d2                	xor    edx,edx
c0011366:	5b                   	pop    ebx
c0011367:	5e                   	pop    esi
c0011368:	c3                   	ret    
c0011369:	85 c0                	test   eax,eax
c001136b:	74 1b                	je     c0011388 <sysFormatDisk(regs*)+0x65>
c001136d:	83 f8 09             	cmp    eax,0x9
c0011370:	74 0b                	je     c001137d <sysFormatDisk(regs*)+0x5a>
c0011372:	59                   	pop    ecx
c0011373:	b8 02 00 00 00       	mov    eax,0x2
c0011378:	31 d2                	xor    edx,edx
c001137a:	5b                   	pop    ebx
c001137b:	5e                   	pop    esi
c001137c:	c3                   	ret    
c001137d:	59                   	pop    ecx
c001137e:	b8 01 00 00 00       	mov    eax,0x1
c0011383:	31 d2                	xor    edx,edx
c0011385:	5b                   	pop    ebx
c0011386:	5e                   	pop    esi
c0011387:	c3                   	ret    
c0011388:	59                   	pop    ecx
c0011389:	31 c0                	xor    eax,eax
c001138b:	31 d2                	xor    edx,edx
c001138d:	5b                   	pop    ebx
c001138e:	5e                   	pop    esi
c001138f:	c3                   	ret    

c0011390 <sysSetDiskVolumeLabel(regs*)>:
c0011390:	56                   	push   esi
c0011391:	53                   	push   ebx
c0011392:	53                   	push   ebx
c0011393:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011397:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001139a:	83 f8 19             	cmp    eax,0x19
c001139d:	77 2d                	ja     c00113cc <sysSetDiskVolumeLabel(regs*)+0x3c>
c001139f:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c00113a6:	85 c9                	test   ecx,ecx
c00113a8:	74 22                	je     c00113cc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113aa:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113ad:	85 db                	test   ebx,ebx
c00113af:	74 1b                	je     c00113cc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113b1:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00113b7:	85 d2                	test   edx,edx
c00113b9:	74 11                	je     c00113cc <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113bb:	8b 32                	mov    esi,DWORD PTR [edx]
c00113bd:	53                   	push   ebx
c00113be:	50                   	push   eax
c00113bf:	51                   	push   ecx
c00113c0:	52                   	push   edx
c00113c1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	99                   	cdq    
c00113c8:	59                   	pop    ecx
c00113c9:	5b                   	pop    ebx
c00113ca:	5e                   	pop    esi
c00113cb:	c3                   	ret    
c00113cc:	59                   	pop    ecx
c00113cd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	c3                   	ret    

c00113da <sysGetDiskVolumeLabel(regs*)>:
c00113da:	57                   	push   edi
c00113db:	56                   	push   esi
c00113dc:	53                   	push   ebx
c00113dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113e4:	83 fa 19             	cmp    edx,0x19
c00113e7:	77 38                	ja     c0011421 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113e9:	8b 0c 95 a0 2d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd260]
c00113f0:	85 c9                	test   ecx,ecx
c00113f2:	74 2d                	je     c0011421 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113f4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113f7:	85 db                	test   ebx,ebx
c00113f9:	74 26                	je     c0011421 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113fb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113fe:	85 f6                	test   esi,esi
c0011400:	74 1f                	je     c0011421 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011402:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0011408:	85 c0                	test   eax,eax
c001140a:	74 15                	je     c0011421 <sysGetDiskVolumeLabel(regs*)+0x47>
c001140c:	83 ec 0c             	sub    esp,0xc
c001140f:	8b 38                	mov    edi,DWORD PTR [eax]
c0011411:	56                   	push   esi
c0011412:	53                   	push   ebx
c0011413:	52                   	push   edx
c0011414:	51                   	push   ecx
c0011415:	50                   	push   eax
c0011416:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011419:	83 c4 20             	add    esp,0x20
c001141c:	99                   	cdq    
c001141d:	5b                   	pop    ebx
c001141e:	5e                   	pop    esi
c001141f:	5f                   	pop    edi
c0011420:	c3                   	ret    
c0011421:	5b                   	pop    ebx
c0011422:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011427:	ba ff ff ff ff       	mov    edx,0xffffffff
c001142c:	5e                   	pop    esi
c001142d:	5f                   	pop    edi
c001142e:	c3                   	ret    

c001142f <sysShutdown(regs*)>:
c001142f:	83 ec 0c             	sub    esp,0xc
c0011432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011436:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011439:	85 c0                	test   eax,eax
c001143b:	74 18                	je     c0011455 <sysShutdown(regs*)+0x26>
c001143d:	83 f8 01             	cmp    eax,0x1
c0011440:	74 38                	je     c001147a <sysShutdown(regs*)+0x4b>
c0011442:	83 f8 02             	cmp    eax,0x2
c0011445:	74 24                	je     c001146b <sysShutdown(regs*)+0x3c>
c0011447:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001144c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011451:	83 c4 0c             	add    esp,0xc
c0011454:	c3                   	ret    
c0011455:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001145a:	8b 10                	mov    edx,DWORD PTR [eax]
c001145c:	6a 00                	push   0x0
c001145e:	6a 00                	push   0x0
c0011460:	6a 00                	push   0x0
c0011462:	50                   	push   eax
c0011463:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	eb dc                	jmp    c0011447 <sysShutdown(regs*)+0x18>
c001146b:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0011470:	8b 10                	mov    edx,DWORD PTR [eax]
c0011472:	6a 00                	push   0x0
c0011474:	6a 00                	push   0x0
c0011476:	6a 01                	push   0x1
c0011478:	eb e8                	jmp    c0011462 <sysShutdown(regs*)+0x33>
c001147a:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c001147f:	85 c0                	test   eax,eax
c0011481:	74 02                	je     c0011485 <sysShutdown(regs*)+0x56>
c0011483:	ff d0                	call   eax
c0011485:	31 c0                	xor    eax,eax
c0011487:	31 d2                	xor    edx,edx
c0011489:	83 c4 0c             	add    esp,0xc
c001148c:	c3                   	ret    

c001148d <sysCallRealpath(regs*)>:
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011494:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011497:	85 d2                	test   edx,edx
c0011499:	74 07                	je     c00114a2 <sysCallRealpath(regs*)+0x15>
c001149b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001149e:	85 c0                	test   eax,eax
c00114a0:	75 0b                	jne    c00114ad <sysCallRealpath(regs*)+0x20>
c00114a2:	b8 01 00 00 00       	mov    eax,0x1
c00114a7:	31 d2                	xor    edx,edx
c00114a9:	83 c4 0c             	add    esp,0xc
c00114ac:	c3                   	ret    
c00114ad:	51                   	push   ecx
c00114ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114b4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114b7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00114bd:	51                   	push   ecx
c00114be:	52                   	push   edx
c00114bf:	50                   	push   eax
c00114c0:	e8 f3 9a ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00114c5:	83 c4 10             	add    esp,0x10
c00114c8:	31 c0                	xor    eax,eax
c00114ca:	31 d2                	xor    edx,edx
c00114cc:	83 c4 0c             	add    esp,0xc
c00114cf:	c3                   	ret    

c00114d0 <sysCallReadDir(regs*)>:
c00114d0:	53                   	push   ebx
c00114d1:	83 ec 18             	sub    esp,0x18
c00114d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114db:	83 f8 02             	cmp    eax,0x2
c00114de:	76 61                	jbe    c0011541 <sysCallReadDir(regs*)+0x71>
c00114e0:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114e7:	77 49                	ja     c0011532 <sysCallReadDir(regs*)+0x62>
c00114e9:	83 ec 0c             	sub    esp,0xc
c00114ec:	50                   	push   eax
c00114ed:	e8 51 83 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c00114f2:	83 c4 10             	add    esp,0x10
c00114f5:	85 c0                	test   eax,eax
c00114f7:	74 39                	je     c0011532 <sysCallReadDir(regs*)+0x62>
c00114f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011501:	83 ec 0c             	sub    esp,0xc
c0011504:	8b 10                	mov    edx,DWORD PTR [eax]
c0011506:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001150a:	51                   	push   ecx
c001150b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001150e:	51                   	push   ecx
c001150f:	6a 00                	push   0x0
c0011511:	68 10 01 00 00       	push   0x110
c0011516:	50                   	push   eax
c0011517:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001151a:	83 c4 20             	add    esp,0x20
c001151d:	85 c0                	test   eax,eax
c001151f:	74 29                	je     c001154a <sysCallReadDir(regs*)+0x7a>
c0011521:	83 f8 07             	cmp    eax,0x7
c0011524:	74 1b                	je     c0011541 <sysCallReadDir(regs*)+0x71>
c0011526:	b8 02 00 00 00       	mov    eax,0x2
c001152b:	31 d2                	xor    edx,edx
c001152d:	83 c4 18             	add    esp,0x18
c0011530:	5b                   	pop    ebx
c0011531:	c3                   	ret    
c0011532:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011537:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153c:	83 c4 18             	add    esp,0x18
c001153f:	5b                   	pop    ebx
c0011540:	c3                   	ret    
c0011541:	b8 01 00 00 00       	mov    eax,0x1
c0011546:	31 d2                	xor    edx,edx
c0011548:	eb e3                	jmp    c001152d <sysCallReadDir(regs*)+0x5d>
c001154a:	31 c0                	xor    eax,eax
c001154c:	31 d2                	xor    edx,edx
c001154e:	eb dd                	jmp    c001152d <sysCallReadDir(regs*)+0x5d>

c0011550 <sysCallIsATTY(regs*)>:
c0011550:	83 ec 0c             	sub    esp,0xc
c0011553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011557:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001155a:	83 f8 02             	cmp    eax,0x2
c001155d:	76 07                	jbe    c0011566 <sysCallIsATTY(regs*)+0x16>
c001155f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011564:	75 28                	jne    c001158e <sysCallIsATTY(regs*)+0x3e>
c0011566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001156b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001156e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011574:	85 c0                	test   eax,eax
c0011576:	74 26                	je     c001159e <sysCallIsATTY(regs*)+0x4e>
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	8b 10                	mov    edx,DWORD PTR [eax]
c001157d:	50                   	push   eax
c001157e:	ff 12                	call   DWORD PTR [edx]
c0011580:	31 d2                	xor    edx,edx
c0011582:	25 ff 00 00 00       	and    eax,0xff
c0011587:	83 c4 10             	add    esp,0x10
c001158a:	83 c4 0c             	add    esp,0xc
c001158d:	c3                   	ret    
c001158e:	83 ec 0c             	sub    esp,0xc
c0011591:	50                   	push   eax
c0011592:	e8 ac 82 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	85 c0                	test   eax,eax
c001159c:	75 da                	jne    c0011578 <sysCallIsATTY(regs*)+0x28>
c001159e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a8:	83 c4 0c             	add    esp,0xc
c00115ab:	c3                   	ret    

c00115ac <sysCallSeek(regs*)>:
c00115ac:	53                   	push   ebx
c00115ad:	83 ec 08             	sub    esp,0x8
c00115b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115b7:	8d 50 fd             	lea    edx,[eax-0x3]
c00115ba:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115c0:	77 34                	ja     c00115f6 <sysCallSeek(regs*)+0x4a>
c00115c2:	83 ec 0c             	sub    esp,0xc
c00115c5:	50                   	push   eax
c00115c6:	e8 78 82 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c00115cb:	83 c4 0c             	add    esp,0xc
c00115ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115d1:	31 db                	xor    ebx,ebx
c00115d3:	53                   	push   ebx
c00115d4:	51                   	push   ecx
c00115d5:	50                   	push   eax
c00115d6:	e8 05 9d ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c00115db:	83 c4 10             	add    esp,0x10
c00115de:	85 c0                	test   eax,eax
c00115e0:	0f 95 c0             	setne  al
c00115e3:	31 d2                	xor    edx,edx
c00115e5:	25 ff 00 00 00       	and    eax,0xff
c00115ea:	f7 d8                	neg    eax
c00115ec:	83 d2 00             	adc    edx,0x0
c00115ef:	83 c4 08             	add    esp,0x8
c00115f2:	f7 da                	neg    edx
c00115f4:	5b                   	pop    ebx
c00115f5:	c3                   	ret    
c00115f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011600:	83 c4 08             	add    esp,0x8
c0011603:	5b                   	pop    ebx
c0011604:	c3                   	ret    

c0011605 <sysCallTell(regs*)>:
c0011605:	53                   	push   ebx
c0011606:	83 ec 08             	sub    esp,0x8
c0011609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001160d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011610:	83 f8 02             	cmp    eax,0x2
c0011613:	76 50                	jbe    c0011665 <sysCallTell(regs*)+0x60>
c0011615:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001161a:	76 19                	jbe    c0011635 <sysCallTell(regs*)+0x30>
c001161c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001161f:	31 d2                	xor    edx,edx
c0011621:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011627:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001162e:	31 c0                	xor    eax,eax
c0011630:	83 c4 08             	add    esp,0x8
c0011633:	5b                   	pop    ebx
c0011634:	c3                   	ret    
c0011635:	83 ec 0c             	sub    esp,0xc
c0011638:	50                   	push   eax
c0011639:	e8 05 82 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c001163e:	5a                   	pop    edx
c001163f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011642:	59                   	pop    ecx
c0011643:	53                   	push   ebx
c0011644:	50                   	push   eax
c0011645:	e8 ec 9c ff ff       	call   c000b336 <File::tell(unsigned long long*)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	85 c0                	test   eax,eax
c001164f:	0f 95 c0             	setne  al
c0011652:	31 d2                	xor    edx,edx
c0011654:	25 ff 00 00 00       	and    eax,0xff
c0011659:	f7 d8                	neg    eax
c001165b:	83 d2 00             	adc    edx,0x0
c001165e:	83 c4 08             	add    esp,0x8
c0011661:	f7 da                	neg    edx
c0011663:	5b                   	pop    ebx
c0011664:	c3                   	ret    
c0011665:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001166a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001166f:	83 c4 08             	add    esp,0x8
c0011672:	5b                   	pop    ebx
c0011673:	c3                   	ret    

c0011674 <sysCallSize(regs*)>:
c0011674:	53                   	push   ebx
c0011675:	83 ec 18             	sub    esp,0x18
c0011678:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001167c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001167f:	83 f8 02             	cmp    eax,0x2
c0011682:	76 56                	jbe    c00116da <sysCallSize(regs*)+0x66>
c0011684:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011689:	76 19                	jbe    c00116a4 <sysCallSize(regs*)+0x30>
c001168b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001168e:	31 d2                	xor    edx,edx
c0011690:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011696:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001169d:	31 c0                	xor    eax,eax
c001169f:	83 c4 18             	add    esp,0x18
c00116a2:	5b                   	pop    ebx
c00116a3:	c3                   	ret    
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	50                   	push   eax
c00116a8:	e8 96 81 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c00116ad:	83 c4 0c             	add    esp,0xc
c00116b0:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116b4:	52                   	push   edx
c00116b5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116b8:	52                   	push   edx
c00116b9:	50                   	push   eax
c00116ba:	e8 0f 9e ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	85 c0                	test   eax,eax
c00116c4:	0f 95 c0             	setne  al
c00116c7:	31 d2                	xor    edx,edx
c00116c9:	25 ff 00 00 00       	and    eax,0xff
c00116ce:	f7 d8                	neg    eax
c00116d0:	83 d2 00             	adc    edx,0x0
c00116d3:	83 c4 18             	add    esp,0x18
c00116d6:	f7 da                	neg    edx
c00116d8:	5b                   	pop    ebx
c00116d9:	c3                   	ret    
c00116da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116e4:	83 c4 18             	add    esp,0x18
c00116e7:	5b                   	pop    ebx
c00116e8:	c3                   	ret    

c00116e9 <sysCallSizeFromFilename(regs*)>:
c00116e9:	57                   	push   edi
c00116ea:	56                   	push   esi
c00116eb:	53                   	push   ebx
c00116ec:	83 ec 20             	sub    esp,0x20
c00116ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116f3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116f6:	83 fb 02             	cmp    ebx,0x2
c00116f9:	0f 86 8c 00 00 00    	jbe    c001178b <sysCallSizeFromFilename(regs*)+0xa2>
c00116ff:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011705:	76 1b                	jbe    c0011722 <sysCallSizeFromFilename(regs*)+0x39>
c0011707:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001170a:	31 d2                	xor    edx,edx
c001170c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011712:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011719:	83 c4 20             	add    esp,0x20
c001171c:	31 c0                	xor    eax,eax
c001171e:	5b                   	pop    ebx
c001171f:	5e                   	pop    esi
c0011720:	5f                   	pop    edi
c0011721:	c3                   	ret    
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	68 14 01 00 00       	push   0x114
c001172a:	e8 2e 67 ff ff       	call   c0007e5d <malloc>
c001172f:	83 c4 0c             	add    esp,0xc
c0011732:	89 c7                	mov    edi,eax
c0011734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011739:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001173c:	50                   	push   eax
c001173d:	53                   	push   ebx
c001173e:	57                   	push   edi
c001173f:	e8 1e 9a ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011744:	83 c4 0c             	add    esp,0xc
c0011747:	8d 44 24 23          	lea    eax,[esp+0x23]
c001174b:	50                   	push   eax
c001174c:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001174f:	52                   	push   edx
c0011750:	57                   	push   edi
c0011751:	e8 78 9d ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	85 ff                	test   edi,edi
c001175b:	74 14                	je     c0011771 <sysCallSizeFromFilename(regs*)+0x88>
c001175d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011761:	8b 17                	mov    edx,DWORD PTR [edi]
c0011763:	83 ec 0c             	sub    esp,0xc
c0011766:	57                   	push   edi
c0011767:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001176a:	83 c4 10             	add    esp,0x10
c001176d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011771:	85 c0                	test   eax,eax
c0011773:	0f 95 c0             	setne  al
c0011776:	31 d2                	xor    edx,edx
c0011778:	25 ff 00 00 00       	and    eax,0xff
c001177d:	f7 d8                	neg    eax
c001177f:	83 d2 00             	adc    edx,0x0
c0011782:	83 c4 20             	add    esp,0x20
c0011785:	f7 da                	neg    edx
c0011787:	5b                   	pop    ebx
c0011788:	5e                   	pop    esi
c0011789:	5f                   	pop    edi
c001178a:	c3                   	ret    
c001178b:	83 c4 20             	add    esp,0x20
c001178e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011793:	5b                   	pop    ebx
c0011794:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011799:	5e                   	pop    esi
c001179a:	5f                   	pop    edi
c001179b:	c3                   	ret    

c001179c <sysCallClose(regs*)>:
c001179c:	53                   	push   ebx
c001179d:	83 ec 08             	sub    esp,0x8
c00117a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117a7:	83 f8 02             	cmp    eax,0x2
c00117aa:	76 41                	jbe    c00117ed <sysCallClose(regs*)+0x51>
c00117ac:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00117b2:	83 fa 01             	cmp    edx,0x1
c00117b5:	76 2d                	jbe    c00117e4 <sysCallClose(regs*)+0x48>
c00117b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117bc:	77 2f                	ja     c00117ed <sysCallClose(regs*)+0x51>
c00117be:	83 ec 0c             	sub    esp,0xc
c00117c1:	50                   	push   eax
c00117c2:	e8 7c 80 ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c00117c7:	89 c3                	mov    ebx,eax
c00117c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00117cc:	e8 af 9a ff ff       	call   c000b280 <File::close()>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	85 db                	test   ebx,ebx
c00117d6:	74 0c                	je     c00117e4 <sysCallClose(regs*)+0x48>
c00117d8:	83 ec 0c             	sub    esp,0xc
c00117db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117dd:	53                   	push   ebx
c00117de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	31 c0                	xor    eax,eax
c00117e6:	31 d2                	xor    edx,edx
c00117e8:	83 c4 08             	add    esp,0x8
c00117eb:	5b                   	pop    ebx
c00117ec:	c3                   	ret    
c00117ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117f7:	83 c4 08             	add    esp,0x8
c00117fa:	5b                   	pop    ebx
c00117fb:	c3                   	ret    

c00117fc <sysCallOpenDir(regs*)>:
c00117fc:	56                   	push   esi
c00117fd:	53                   	push   ebx
c00117fe:	50                   	push   eax
c00117ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011803:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011806:	85 c0                	test   eax,eax
c0011808:	74 5b                	je     c0011865 <sysCallOpenDir(regs*)+0x69>
c001180a:	83 ec 0c             	sub    esp,0xc
c001180d:	68 14 01 00 00       	push   0x114
c0011812:	e8 46 66 ff ff       	call   c0007e5d <malloc>
c0011817:	83 c4 0c             	add    esp,0xc
c001181a:	89 c6                	mov    esi,eax
c001181c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011821:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011824:	50                   	push   eax
c0011825:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011828:	50                   	push   eax
c0011829:	56                   	push   esi
c001182a:	e8 5d 9e ff ff       	call   c000b68c <Directory::Directory(char const*, Process*)>
c001182f:	83 c4 10             	add    esp,0x10
c0011832:	85 f6                	test   esi,esi
c0011834:	74 2f                	je     c0011865 <sysCallOpenDir(regs*)+0x69>
c0011836:	83 ec 0c             	sub    esp,0xc
c0011839:	56                   	push   esi
c001183a:	e8 0d 9f ff ff       	call   c000b74c <Directory::open()>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	85 c0                	test   eax,eax
c0011844:	75 1f                	jne    c0011865 <sysCallOpenDir(regs*)+0x69>
c0011846:	83 ec 0c             	sub    esp,0xc
c0011849:	56                   	push   esi
c001184a:	e8 ff 7c ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c001184f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011852:	83 c4 10             	add    esp,0x10
c0011855:	89 02                	mov    DWORD PTR [edx],eax
c0011857:	c1 f8 1f             	sar    eax,0x1f
c001185a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001185d:	31 c0                	xor    eax,eax
c001185f:	59                   	pop    ecx
c0011860:	31 d2                	xor    edx,edx
c0011862:	5b                   	pop    ebx
c0011863:	5e                   	pop    esi
c0011864:	c3                   	ret    
c0011865:	59                   	pop    ecx
c0011866:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001186b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011870:	5b                   	pop    ebx
c0011871:	5e                   	pop    esi
c0011872:	c3                   	ret    

c0011873 <sysCallCloseDir(regs*)>:
c0011873:	53                   	push   ebx
c0011874:	83 ec 08             	sub    esp,0x8
c0011877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001187e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011881:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011887:	77 2f                	ja     c00118b8 <sysCallCloseDir(regs*)+0x45>
c0011889:	83 ec 0c             	sub    esp,0xc
c001188c:	50                   	push   eax
c001188d:	e8 b1 7f ff ff       	call   c0009843 <getFromFileDescriptor(int)>
c0011892:	89 c3                	mov    ebx,eax
c0011894:	89 04 24             	mov    DWORD PTR [esp],eax
c0011897:	e8 0c 9f ff ff       	call   c000b7a8 <Directory::close()>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	85 db                	test   ebx,ebx
c00118a1:	74 0c                	je     c00118af <sysCallCloseDir(regs*)+0x3c>
c00118a3:	83 ec 0c             	sub    esp,0xc
c00118a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a8:	53                   	push   ebx
c00118a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	31 c0                	xor    eax,eax
c00118b1:	31 d2                	xor    edx,edx
c00118b3:	83 c4 08             	add    esp,0x8
c00118b6:	5b                   	pop    ebx
c00118b7:	c3                   	ret    
c00118b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118c2:	83 c4 08             	add    esp,0x8
c00118c5:	5b                   	pop    ebx
c00118c6:	c3                   	ret    

c00118c7 <sysCallMakeDir(regs*)>:
c00118c7:	56                   	push   esi
c00118c8:	53                   	push   ebx
c00118c9:	83 ec 10             	sub    esp,0x10
c00118cc:	68 14 01 00 00       	push   0x114
c00118d1:	e8 87 65 ff ff       	call   c0007e5d <malloc>
c00118d6:	83 c4 0c             	add    esp,0xc
c00118d9:	89 c3                	mov    ebx,eax
c00118db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e0:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00118e3:	56                   	push   esi
c00118e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118eb:	50                   	push   eax
c00118ec:	53                   	push   ebx
c00118ed:	e8 9a 9d ff ff       	call   c000b68c <Directory::Directory(char const*, Process*)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	85 db                	test   ebx,ebx
c00118f7:	74 32                	je     c001192b <sysCallMakeDir(regs*)+0x64>
c00118f9:	83 ec 0c             	sub    esp,0xc
c00118fc:	53                   	push   ebx
c00118fd:	e8 2a a0 ff ff       	call   c000b92c <Directory::create()>
c0011902:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011905:	89 c6                	mov    esi,eax
c0011907:	e8 9c 9e ff ff       	call   c000b7a8 <Directory::close()>
c001190c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001190e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011911:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011914:	83 c4 10             	add    esp,0x10
c0011917:	31 c0                	xor    eax,eax
c0011919:	59                   	pop    ecx
c001191a:	85 f6                	test   esi,esi
c001191c:	5b                   	pop    ebx
c001191d:	0f 95 c0             	setne  al
c0011920:	5e                   	pop    esi
c0011921:	31 d2                	xor    edx,edx
c0011923:	f7 d8                	neg    eax
c0011925:	83 d2 00             	adc    edx,0x0
c0011928:	f7 da                	neg    edx
c001192a:	c3                   	ret    
c001192b:	59                   	pop    ecx
c001192c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011931:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011936:	5b                   	pop    ebx
c0011937:	5e                   	pop    esi
c0011938:	c3                   	ret    

c0011939 <sysCallWait(regs*)>:
c0011939:	83 ec 10             	sub    esp,0x10
c001193c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011940:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011943:	52                   	push   edx
c0011944:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011947:	51                   	push   ecx
c0011948:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001194b:	50                   	push   eax
c001194c:	e8 6b 23 00 00       	call   c0013cbc <waitTask(int, int*, int)>
c0011951:	83 c4 1c             	add    esp,0x1c
c0011954:	99                   	cdq    
c0011955:	c3                   	ret    

c0011956 <sysCallNotImpl(regs*)>:
c0011956:	83 ec 18             	sub    esp,0x18
c0011959:	68 49 e7 01 c0       	push   0xc001e749
c001195e:	e8 d8 ed ff ff       	call   c001073b <Krnl::panic(char const*)>
c0011963:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011968:	ba ff ff ff ff       	mov    edx,0xffffffff
c001196d:	83 c4 1c             	add    esp,0x1c
c0011970:	c3                   	ret    

c0011971 <sysPanic(regs*)>:
c0011971:	83 ec 18             	sub    esp,0x18
c0011974:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011978:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001197b:	50                   	push   eax
c001197c:	e8 ba ed ff ff       	call   c001073b <Krnl::panic(char const*)>
c0011981:	b8 01 00 00 00       	mov    eax,0x1
c0011986:	31 d2                	xor    edx,edx
c0011988:	83 c4 1c             	add    esp,0x1c
c001198b:	c3                   	ret    

c001198c <sysCallRmdir(regs*)>:
c001198c:	56                   	push   esi
c001198d:	53                   	push   ebx
c001198e:	83 ec 20             	sub    esp,0x20
c0011991:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011995:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011998:	68 14 01 00 00       	push   0x114
c001199d:	e8 bb 64 ff ff       	call   c0007e5d <malloc>
c00119a2:	83 c4 0c             	add    esp,0xc
c00119a5:	89 c3                	mov    ebx,eax
c00119a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119af:	50                   	push   eax
c00119b0:	56                   	push   esi
c00119b1:	53                   	push   ebx
c00119b2:	e8 ab 97 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00119b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119ba:	e8 db 99 ff ff       	call   c000b39a <File::unlink()>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	85 db                	test   ebx,ebx
c00119c4:	74 14                	je     c00119da <sysCallRmdir(regs*)+0x4e>
c00119c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119cc:	83 ec 0c             	sub    esp,0xc
c00119cf:	53                   	push   ebx
c00119d0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119d3:	83 c4 10             	add    esp,0x10
c00119d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119da:	85 c0                	test   eax,eax
c00119dc:	0f 95 c0             	setne  al
c00119df:	31 d2                	xor    edx,edx
c00119e1:	25 ff 00 00 00       	and    eax,0xff
c00119e6:	f7 d8                	neg    eax
c00119e8:	83 d2 00             	adc    edx,0x0
c00119eb:	83 c4 14             	add    esp,0x14
c00119ee:	f7 da                	neg    edx
c00119f0:	5b                   	pop    ebx
c00119f1:	5e                   	pop    esi
c00119f2:	c3                   	ret    

c00119f3 <sysCallUnlink(regs*)>:
c00119f3:	56                   	push   esi
c00119f4:	53                   	push   ebx
c00119f5:	83 ec 20             	sub    esp,0x20
c00119f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119fc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119ff:	68 14 01 00 00       	push   0x114
c0011a04:	e8 54 64 ff ff       	call   c0007e5d <malloc>
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	89 c3                	mov    ebx,eax
c0011a0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a16:	50                   	push   eax
c0011a17:	56                   	push   esi
c0011a18:	53                   	push   ebx
c0011a19:	e8 44 97 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011a1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a21:	e8 74 99 ff ff       	call   c000b39a <File::unlink()>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	85 db                	test   ebx,ebx
c0011a2b:	74 14                	je     c0011a41 <sysCallUnlink(regs*)+0x4e>
c0011a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a31:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a33:	83 ec 0c             	sub    esp,0xc
c0011a36:	53                   	push   ebx
c0011a37:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a41:	85 c0                	test   eax,eax
c0011a43:	0f 95 c0             	setne  al
c0011a46:	31 d2                	xor    edx,edx
c0011a48:	25 ff 00 00 00       	and    eax,0xff
c0011a4d:	f7 d8                	neg    eax
c0011a4f:	83 d2 00             	adc    edx,0x0
c0011a52:	83 c4 14             	add    esp,0x14
c0011a55:	f7 da                	neg    edx
c0011a57:	5b                   	pop    ebx
c0011a58:	5e                   	pop    esi
c0011a59:	c3                   	ret    

c0011a5a <sysCallGetArgv(regs*)>:
c0011a5a:	83 ec 0c             	sub    esp,0xc
c0011a5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a61:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a64:	85 c0                	test   eax,eax
c0011a66:	78 2c                	js     c0011a94 <sysCallGetArgv(regs*)+0x3a>
c0011a68:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a6e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a71:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a77:	7d 1b                	jge    c0011a94 <sysCallGetArgv(regs*)+0x3a>
c0011a79:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a80:	85 c0                	test   eax,eax
c0011a82:	74 18                	je     c0011a9c <sysCallGetArgv(regs*)+0x42>
c0011a84:	83 ec 08             	sub    esp,0x8
c0011a87:	50                   	push   eax
c0011a88:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a8b:	50                   	push   eax
c0011a8c:	e8 8f eb fe ff       	call   c0000620 <strcpy>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	31 c0                	xor    eax,eax
c0011a96:	31 d2                	xor    edx,edx
c0011a98:	83 c4 0c             	add    esp,0xc
c0011a9b:	c3                   	ret    
c0011a9c:	b8 01 00 00 00       	mov    eax,0x1
c0011aa1:	31 d2                	xor    edx,edx
c0011aa3:	83 c4 0c             	add    esp,0xc
c0011aa6:	c3                   	ret    

c0011aa7 <sysCallUSleep(regs*)>:
c0011aa7:	83 ec 1c             	sub    esp,0x1c
c0011aaa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011aae:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011ab1:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011ab4:	6a 00                	push   0x0
c0011ab6:	6a 64                	push   0x64
c0011ab8:	52                   	push   edx
c0011ab9:	50                   	push   eax
c0011aba:	e8 81 a5 00 00       	call   c001c040 <__udivdi3>
c0011abf:	83 c4 14             	add    esp,0x14
c0011ac2:	50                   	push   eax
c0011ac3:	e8 c8 22 00 00       	call   c0013d90 <milliTenthSleep(unsigned int)>
c0011ac8:	31 c0                	xor    eax,eax
c0011aca:	31 d2                	xor    edx,edx
c0011acc:	83 c4 1c             	add    esp,0x1c
c0011acf:	c3                   	ret    

c0011ad0 <sysCallSpawn(regs*)>:
c0011ad0:	56                   	push   esi
c0011ad1:	53                   	push   ebx
c0011ad2:	50                   	push   eax
c0011ad3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ad7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ada:	85 c0                	test   eax,eax
c0011adc:	75 08                	jne    c0011ae6 <sysCallSpawn(regs*)+0x16>
c0011ade:	59                   	pop    ecx
c0011adf:	31 c0                	xor    eax,eax
c0011ae1:	31 d2                	xor    edx,edx
c0011ae3:	5b                   	pop    ebx
c0011ae4:	5e                   	pop    esi
c0011ae5:	c3                   	ret    
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	68 1f 07 00 00       	push   0x71f
c0011aee:	e8 6a 63 ff ff       	call   c0007e5d <malloc>
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	89 c6                	mov    esi,eax
c0011af8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011afb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011afe:	85 c0                	test   eax,eax
c0011b00:	75 33                	jne    c0011b35 <sysCallSpawn(regs*)+0x65>
c0011b02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b0a:	52                   	push   edx
c0011b0b:	50                   	push   eax
c0011b0c:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011b0f:	53                   	push   ebx
c0011b10:	56                   	push   esi
c0011b11:	e8 5e 19 00 00       	call   c0013474 <Process::Process(char const*, Process*, char**)>
c0011b16:	83 c4 10             	add    esp,0x10
c0011b19:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011b20:	75 bc                	jne    c0011ade <sysCallSpawn(regs*)+0xe>
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	56                   	push   esi
c0011b26:	e8 3d 1e 00 00       	call   c0013968 <Process::createUserThread()>
c0011b2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b2d:	83 c4 10             	add    esp,0x10
c0011b30:	99                   	cdq    
c0011b31:	59                   	pop    ecx
c0011b32:	5b                   	pop    ebx
c0011b33:	5e                   	pop    esi
c0011b34:	c3                   	ret    
c0011b35:	31 c0                	xor    eax,eax
c0011b37:	eb d1                	jmp    c0011b0a <sysCallSpawn(regs*)+0x3a>

c0011b39 <sysCallGetEnv(regs*)>:
c0011b39:	57                   	push   edi
c0011b3a:	56                   	push   esi
c0011b3b:	53                   	push   ebx
c0011b3c:	83 ec 1c             	sub    esp,0x1c
c0011b3f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b48:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b4b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b51:	50                   	push   eax
c0011b52:	e8 30 eb ff ff       	call   c0010687 <Krnl::getProcessTotalEnvCount(Process*)>
c0011b57:	83 c4 10             	add    esp,0x10
c0011b5a:	39 c7                	cmp    edi,eax
c0011b5c:	7c 14                	jl     c0011b72 <sysCallGetEnv(regs*)+0x39>
c0011b5e:	85 f6                	test   esi,esi
c0011b60:	75 0b                	jne    c0011b6d <sysCallGetEnv(regs*)+0x34>
c0011b62:	83 c4 10             	add    esp,0x10
c0011b65:	31 c0                	xor    eax,eax
c0011b67:	5b                   	pop    ebx
c0011b68:	31 d2                	xor    edx,edx
c0011b6a:	5e                   	pop    esi
c0011b6b:	5f                   	pop    edi
c0011b6c:	c3                   	ret    
c0011b6d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b70:	eb f0                	jmp    c0011b62 <sysCallGetEnv(regs*)+0x29>
c0011b72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b76:	52                   	push   edx
c0011b77:	57                   	push   edi
c0011b78:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b7e:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b81:	51                   	push   ecx
c0011b82:	50                   	push   eax
c0011b83:	e8 1f eb ff ff       	call   c00106a7 <Krnl::getProcessEnvPair(Process*, int)>
c0011b88:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b8f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b93:	83 c4 0c             	add    esp,0xc
c0011b96:	85 db                	test   ebx,ebx
c0011b98:	75 23                	jne    c0011bbd <sysCallGetEnv(regs*)+0x84>
c0011b9a:	83 ec 0c             	sub    esp,0xc
c0011b9d:	50                   	push   eax
c0011b9e:	e8 bd e9 fe ff       	call   c0000560 <strlen>
c0011ba3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ba6:	89 c3                	mov    ebx,eax
c0011ba8:	e8 b3 e9 fe ff       	call   c0000560 <strlen>
c0011bad:	31 d2                	xor    edx,edx
c0011baf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011bb3:	83 c4 10             	add    esp,0x10
c0011bb6:	83 c4 10             	add    esp,0x10
c0011bb9:	5b                   	pop    ebx
c0011bba:	5e                   	pop    esi
c0011bbb:	5f                   	pop    edi
c0011bbc:	c3                   	ret    
c0011bbd:	83 ec 08             	sub    esp,0x8
c0011bc0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bc3:	50                   	push   eax
c0011bc4:	56                   	push   esi
c0011bc5:	e8 56 ea fe ff       	call   c0000620 <strcpy>
c0011bca:	58                   	pop    eax
c0011bcb:	5a                   	pop    edx
c0011bcc:	68 63 e7 01 c0       	push   0xc001e763
c0011bd1:	56                   	push   esi
c0011bd2:	e8 09 ec fe ff       	call   c00007e0 <strcat>
c0011bd7:	59                   	pop    ecx
c0011bd8:	5b                   	pop    ebx
c0011bd9:	57                   	push   edi
c0011bda:	56                   	push   esi
c0011bdb:	e8 00 ec fe ff       	call   c00007e0 <strcat>
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	e9 7a ff ff ff       	jmp    c0011b62 <sysCallGetEnv(regs*)+0x29>

c0011be8 <sysSetFatAttrib(regs*)>:
c0011be8:	57                   	push   edi
c0011be9:	56                   	push   esi
c0011bea:	53                   	push   ebx
c0011beb:	83 ec 1c             	sub    esp,0x1c
c0011bee:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bf2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bf5:	68 14 01 00 00       	push   0x114
c0011bfa:	e8 5e 62 ff ff       	call   c0007e5d <malloc>
c0011bff:	83 c4 0c             	add    esp,0xc
c0011c02:	89 c3                	mov    ebx,eax
c0011c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c0c:	50                   	push   eax
c0011c0d:	57                   	push   edi
c0011c0e:	53                   	push   ebx
c0011c0f:	e8 4e 95 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011c14:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c17:	83 c4 0c             	add    esp,0xc
c0011c1a:	0f b6 d4             	movzx  edx,ah
c0011c1d:	25 ff 00 00 00       	and    eax,0xff
c0011c22:	52                   	push   edx
c0011c23:	50                   	push   eax
c0011c24:	53                   	push   ebx
c0011c25:	e8 0a 98 ff ff       	call   c000b434 <File::chfatattr(unsigned char, unsigned char)>
c0011c2a:	83 c4 10             	add    esp,0x10
c0011c2d:	85 db                	test   ebx,ebx
c0011c2f:	74 14                	je     c0011c45 <sysSetFatAttrib(regs*)+0x5d>
c0011c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c37:	83 ec 0c             	sub    esp,0xc
c0011c3a:	53                   	push   ebx
c0011c3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c45:	85 c0                	test   eax,eax
c0011c47:	0f 95 c0             	setne  al
c0011c4a:	31 d2                	xor    edx,edx
c0011c4c:	25 ff 00 00 00       	and    eax,0xff
c0011c51:	f7 d8                	neg    eax
c0011c53:	83 d2 00             	adc    edx,0x0
c0011c56:	83 c4 10             	add    esp,0x10
c0011c59:	f7 da                	neg    edx
c0011c5b:	5b                   	pop    ebx
c0011c5c:	5e                   	pop    esi
c0011c5d:	5f                   	pop    edi
c0011c5e:	c3                   	ret    

c0011c5f <sysPipe(regs*)>:
c0011c5f:	57                   	push   edi
c0011c60:	56                   	push   esi
c0011c61:	53                   	push   ebx
c0011c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c66:	83 ec 0c             	sub    esp,0xc
c0011c69:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c6c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c6f:	6a 20                	push   0x20
c0011c71:	e8 e7 61 ff ff       	call   c0007e5d <malloc>
c0011c76:	89 c3                	mov    ebx,eax
c0011c78:	58                   	pop    eax
c0011c79:	5a                   	pop    edx
c0011c7a:	68 00 50 00 00       	push   0x5000
c0011c7f:	53                   	push   ebx
c0011c80:	e8 cf 6b ff ff       	call   c0008854 <Pipe::Pipe(int)>
c0011c85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c88:	e8 c1 78 ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c0011c8d:	89 07                	mov    DWORD PTR [edi],eax
c0011c8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c92:	e8 b7 78 ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	89 06                	mov    DWORD PTR [esi],eax
c0011c9c:	31 d2                	xor    edx,edx
c0011c9e:	5b                   	pop    ebx
c0011c9f:	31 c0                	xor    eax,eax
c0011ca1:	5e                   	pop    esi
c0011ca2:	5f                   	pop    edi
c0011ca3:	c3                   	ret    

c0011ca4 <sysGetUnixTime(regs*)>:
c0011ca4:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0011ca9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011caf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cb3:	e9 ba 9e ff ff       	jmp    c000bb72 <Clock::timeInSecondsLocal()>

c0011cb8 <string_ends_with(char const*, char const*)>:
c0011cb8:	57                   	push   edi
c0011cb9:	56                   	push   esi
c0011cba:	53                   	push   ebx
c0011cbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cbf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011cc3:	83 ec 0c             	sub    esp,0xc
c0011cc6:	53                   	push   ebx
c0011cc7:	e8 94 e8 fe ff       	call   c0000560 <strlen>
c0011ccc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ccf:	89 c6                	mov    esi,eax
c0011cd1:	e8 8a e8 fe ff       	call   c0000560 <strlen>
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	39 c6                	cmp    esi,eax
c0011cdb:	7d 06                	jge    c0011ce3 <string_ends_with(char const*, char const*)+0x2b>
c0011cdd:	5b                   	pop    ebx
c0011cde:	31 c0                	xor    eax,eax
c0011ce0:	5e                   	pop    esi
c0011ce1:	5f                   	pop    edi
c0011ce2:	c3                   	ret    
c0011ce3:	83 ec 08             	sub    esp,0x8
c0011ce6:	29 c6                	sub    esi,eax
c0011ce8:	57                   	push   edi
c0011ce9:	01 f3                	add    ebx,esi
c0011ceb:	53                   	push   ebx
c0011cec:	e8 0f ea fe ff       	call   c0000700 <strcmp>
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	85 c0                	test   eax,eax
c0011cf6:	5b                   	pop    ebx
c0011cf7:	0f 94 c0             	sete   al
c0011cfa:	5e                   	pop    esi
c0011cfb:	25 ff 00 00 00       	and    eax,0xff
c0011d00:	5f                   	pop    edi
c0011d01:	c3                   	ret    

c0011d02 <sysCallOpen(regs*)>:
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d0a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d11:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d14:	85 c9                	test   ecx,ecx
c0011d16:	0f 84 b9 01 00 00    	je     c0011ed5 <sysCallOpen(regs*)+0x1d3>
c0011d1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d1f:	85 c0                	test   eax,eax
c0011d21:	0f 84 ae 01 00 00    	je     c0011ed5 <sysCallOpen(regs*)+0x1d3>
c0011d27:	52                   	push   edx
c0011d28:	68 65 e7 01 c0       	push   0xc001e765
c0011d2d:	50                   	push   eax
c0011d2e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d32:	56                   	push   esi
c0011d33:	e8 80 92 ff ff       	call   c000afb8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d38:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d3b:	e8 20 e8 fe ff       	call   c0000560 <strlen>
c0011d40:	83 c4 10             	add    esp,0x10
c0011d43:	48                   	dec    eax
c0011d44:	74 1d                	je     c0011d63 <sysCallOpen(regs*)+0x61>
c0011d46:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011d49:	eb 0f                	jmp    c0011d5a <sysCallOpen(regs*)+0x58>
c0011d4b:	80 fa 3a             	cmp    dl,0x3a
c0011d4e:	74 0f                	je     c0011d5f <sysCallOpen(regs*)+0x5d>
c0011d50:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d54:	48                   	dec    eax
c0011d55:	74 0c                	je     c0011d63 <sysCallOpen(regs*)+0x61>
c0011d57:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d5a:	80 fa 2e             	cmp    dl,0x2e
c0011d5d:	75 ec                	jne    c0011d4b <sysCallOpen(regs*)+0x49>
c0011d5f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d63:	83 ec 08             	sub    esp,0x8
c0011d66:	68 69 e7 01 c0       	push   0xc001e769
c0011d6b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d6e:	50                   	push   eax
c0011d6f:	e8 44 ff ff ff       	call   c0011cb8 <string_ends_with(char const*, char const*)>
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	85 c0                	test   eax,eax
c0011d79:	74 1d                	je     c0011d98 <sysCallOpen(regs*)+0x96>
c0011d7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d7e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d8b:	81 c4 04 01 00 00    	add    esp,0x104
c0011d91:	31 c0                	xor    eax,eax
c0011d93:	31 d2                	xor    edx,edx
c0011d95:	5b                   	pop    ebx
c0011d96:	5e                   	pop    esi
c0011d97:	c3                   	ret    
c0011d98:	83 ec 08             	sub    esp,0x8
c0011d9b:	68 6e e7 01 c0       	push   0xc001e76e
c0011da0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011da3:	50                   	push   eax
c0011da4:	e8 0f ff ff ff       	call   c0011cb8 <string_ends_with(char const*, char const*)>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	85 c0                	test   eax,eax
c0011dae:	75 cb                	jne    c0011d7b <sysCallOpen(regs*)+0x79>
c0011db0:	83 ec 08             	sub    esp,0x8
c0011db3:	68 6a e7 01 c0       	push   0xc001e76a
c0011db8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dbb:	50                   	push   eax
c0011dbc:	e8 3f e9 fe ff       	call   c0000700 <strcmp>
c0011dc1:	83 c4 10             	add    esp,0x10
c0011dc4:	85 c0                	test   eax,eax
c0011dc6:	74 b3                	je     c0011d7b <sysCallOpen(regs*)+0x79>
c0011dc8:	83 ec 08             	sub    esp,0x8
c0011dcb:	68 69 e7 01 c0       	push   0xc001e769
c0011dd0:	56                   	push   esi
c0011dd1:	e8 e2 fe ff ff       	call   c0011cb8 <string_ends_with(char const*, char const*)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	85 c0                	test   eax,eax
c0011ddb:	75 9e                	jne    c0011d7b <sysCallOpen(regs*)+0x79>
c0011ddd:	83 ec 08             	sub    esp,0x8
c0011de0:	68 73 e7 01 c0       	push   0xc001e773
c0011de5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011de8:	50                   	push   eax
c0011de9:	e8 ca fe ff ff       	call   c0011cb8 <string_ends_with(char const*, char const*)>
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	85 c0                	test   eax,eax
c0011df3:	0f 85 ef 00 00 00    	jne    c0011ee8 <sysCallOpen(regs*)+0x1e6>
c0011df9:	83 ec 08             	sub    esp,0x8
c0011dfc:	68 78 e7 01 c0       	push   0xc001e778
c0011e01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e04:	50                   	push   eax
c0011e05:	e8 ae fe ff ff       	call   c0011cb8 <string_ends_with(char const*, char const*)>
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	85 c0                	test   eax,eax
c0011e0f:	0f 85 d3 00 00 00    	jne    c0011ee8 <sysCallOpen(regs*)+0x1e6>
c0011e15:	83 ec 08             	sub    esp,0x8
c0011e18:	68 74 e7 01 c0       	push   0xc001e774
c0011e1d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e20:	51                   	push   ecx
c0011e21:	e8 da e8 fe ff       	call   c0000700 <strcmp>
c0011e26:	83 c4 10             	add    esp,0x10
c0011e29:	85 c0                	test   eax,eax
c0011e2b:	0f 84 b7 00 00 00    	je     c0011ee8 <sysCallOpen(regs*)+0x1e6>
c0011e31:	83 ec 08             	sub    esp,0x8
c0011e34:	68 73 e7 01 c0       	push   0xc001e773
c0011e39:	56                   	push   esi
c0011e3a:	e8 79 fe ff ff       	call   c0011cb8 <string_ends_with(char const*, char const*)>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	85 c0                	test   eax,eax
c0011e44:	0f 85 9e 00 00 00    	jne    c0011ee8 <sysCallOpen(regs*)+0x1e6>
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	68 14 01 00 00       	push   0x114
c0011e52:	e8 06 60 ff ff       	call   c0007e5d <malloc>
c0011e57:	83 c4 0c             	add    esp,0xc
c0011e5a:	89 c6                	mov    esi,eax
c0011e5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e64:	50                   	push   eax
c0011e65:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e68:	52                   	push   edx
c0011e69:	56                   	push   esi
c0011e6a:	e8 f3 92 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	85 f6                	test   esi,esi
c0011e74:	74 5f                	je     c0011ed5 <sysCallOpen(regs*)+0x1d3>
c0011e76:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e79:	89 d0                	mov    eax,edx
c0011e7b:	25 ff 00 00 00       	and    eax,0xff
c0011e80:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e83:	89 d0                	mov    eax,edx
c0011e85:	83 e0 01             	and    eax,0x1
c0011e88:	f6 c2 02             	test   dl,0x2
c0011e8b:	74 03                	je     c0011e90 <sysCallOpen(regs*)+0x18e>
c0011e8d:	83 c8 02             	or     eax,0x2
c0011e90:	f6 c2 04             	test   dl,0x4
c0011e93:	74 03                	je     c0011e98 <sysCallOpen(regs*)+0x196>
c0011e95:	83 c8 04             	or     eax,0x4
c0011e98:	f6 c2 08             	test   dl,0x8
c0011e9b:	74 03                	je     c0011ea0 <sysCallOpen(regs*)+0x19e>
c0011e9d:	83 c8 0a             	or     eax,0xa
c0011ea0:	83 e2 10             	and    edx,0x10
c0011ea3:	74 03                	je     c0011ea8 <sysCallOpen(regs*)+0x1a6>
c0011ea5:	83 c8 12             	or     eax,0x12
c0011ea8:	83 ec 08             	sub    esp,0x8
c0011eab:	50                   	push   eax
c0011eac:	56                   	push   esi
c0011ead:	e8 70 93 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0011eb2:	83 c4 10             	add    esp,0x10
c0011eb5:	85 c0                	test   eax,eax
c0011eb7:	75 1c                	jne    c0011ed5 <sysCallOpen(regs*)+0x1d3>
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	56                   	push   esi
c0011ebd:	e8 8c 76 ff ff       	call   c000954e <UnixFile::getFileDescriptor()>
c0011ec2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	89 02                	mov    DWORD PTR [edx],eax
c0011eca:	c1 f8 1f             	sar    eax,0x1f
c0011ecd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ed0:	e9 b6 fe ff ff       	jmp    c0011d8b <sysCallOpen(regs*)+0x89>
c0011ed5:	81 c4 04 01 00 00    	add    esp,0x104
c0011edb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee5:	5b                   	pop    ebx
c0011ee6:	5e                   	pop    esi
c0011ee7:	c3                   	ret    
c0011ee8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eeb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ef1:	e9 8e fe ff ff       	jmp    c0011d84 <sysCallOpen(regs*)+0x82>

c0011ef6 <Sys::loadSyscalls()>:
c0011ef6:	c7 05 40 33 02 c0 d2 12 01 c0 	mov    DWORD PTR ds:0xc0023340,0xc00112d2
c0011f00:	c7 05 44 33 02 c0 c9 0e 01 c0 	mov    DWORD PTR ds:0xc0023344,0xc0010ec9
c0011f0a:	c7 05 48 33 02 c0 b8 10 01 c0 	mov    DWORD PTR ds:0xc0023348,0xc00110b8
c0011f14:	c7 05 4c 33 02 c0 08 12 01 c0 	mov    DWORD PTR ds:0xc002334c,0xc0011208
c0011f1e:	c7 05 50 33 02 c0 50 10 01 c0 	mov    DWORD PTR ds:0xc0023350,0xc0011050
c0011f28:	c7 05 54 33 02 c0 00 0f 01 c0 	mov    DWORD PTR ds:0xc0023354,0xc0010f00
c0011f32:	c7 05 58 33 02 c0 e1 0e 01 c0 	mov    DWORD PTR ds:0xc0023358,0xc0010ee1
c0011f3c:	c7 05 5c 33 02 c0 0d 11 01 c0 	mov    DWORD PTR ds:0xc002335c,0xc001110d
c0011f46:	c7 05 64 33 02 c0 9c 17 01 c0 	mov    DWORD PTR ds:0xc0023364,0xc001179c
c0011f50:	c7 05 60 33 02 c0 02 1d 01 c0 	mov    DWORD PTR ds:0xc0023360,0xc0011d02
c0011f5a:	c7 05 68 33 02 c0 fc 17 01 c0 	mov    DWORD PTR ds:0xc0023368,0xc00117fc
c0011f64:	c7 05 6c 33 02 c0 d0 14 01 c0 	mov    DWORD PTR ds:0xc002336c,0xc00114d0
c0011f6e:	c7 05 70 33 02 c0 f7 12 01 c0 	mov    DWORD PTR ds:0xc0023370,0xc00112f7
c0011f78:	c7 05 74 33 02 c0 fc 12 01 c0 	mov    DWORD PTR ds:0xc0023374,0xc00112fc
c0011f82:	c7 05 78 33 02 c0 c7 18 01 c0 	mov    DWORD PTR ds:0xc0023378,0xc00118c7
c0011f8c:	c7 05 7c 33 02 c0 73 18 01 c0 	mov    DWORD PTR ds:0xc002337c,0xc0011873
c0011f96:	c7 05 80 33 02 c0 ac 15 01 c0 	mov    DWORD PTR ds:0xc0023380,0xc00115ac
c0011fa0:	c7 05 84 33 02 c0 05 16 01 c0 	mov    DWORD PTR ds:0xc0023384,0xc0011605
c0011faa:	c7 05 88 33 02 c0 74 16 01 c0 	mov    DWORD PTR ds:0xc0023388,0xc0011674
c0011fb4:	c7 05 8c 33 02 c0 01 13 01 c0 	mov    DWORD PTR ds:0xc002338c,0xc0011301
c0011fbe:	c7 05 90 33 02 c0 39 19 01 c0 	mov    DWORD PTR ds:0xc0023390,0xc0011939
c0011fc8:	c7 05 94 33 02 c0 56 19 01 c0 	mov    DWORD PTR ds:0xc0023394,0xc0011956
c0011fd2:	c7 05 98 33 02 c0 56 19 01 c0 	mov    DWORD PTR ds:0xc0023398,0xc0011956
c0011fdc:	c7 05 9c 33 02 c0 8c 19 01 c0 	mov    DWORD PTR ds:0xc002339c,0xc001198c
c0011fe6:	c7 05 a0 33 02 c0 f3 19 01 c0 	mov    DWORD PTR ds:0xc00233a0,0xc00119f3
c0011ff0:	c7 05 a4 33 02 c0 0b 13 01 c0 	mov    DWORD PTR ds:0xc00233a4,0xc001130b
c0011ffa:	c7 05 a8 33 02 c0 5a 1a 01 c0 	mov    DWORD PTR ds:0xc00233a8,0xc0011a5a
c0012004:	c7 05 ac 33 02 c0 8d 14 01 c0 	mov    DWORD PTR ds:0xc00233ac,0xc001148d
c001200e:	c7 05 b0 33 02 c0 1b 13 01 c0 	mov    DWORD PTR ds:0xc00233b0,0xc001131b
c0012018:	c7 05 b4 33 02 c0 50 15 01 c0 	mov    DWORD PTR ds:0xc00233b4,0xc0011550
c0012022:	c7 05 b8 33 02 c0 a7 1a 01 c0 	mov    DWORD PTR ds:0xc00233b8,0xc0011aa7
c001202c:	c7 05 bc 33 02 c0 e9 16 01 c0 	mov    DWORD PTR ds:0xc00233bc,0xc00116e9
c0012036:	c7 05 c0 33 02 c0 d0 1a 01 c0 	mov    DWORD PTR ds:0xc00233c0,0xc0011ad0
c0012040:	c7 05 c4 33 02 c0 39 1b 01 c0 	mov    DWORD PTR ds:0xc00233c4,0xc0011b39
c001204a:	c7 05 cc 33 02 c0 23 13 01 c0 	mov    DWORD PTR ds:0xc00233cc,0xc0011323
c0012054:	c7 05 d0 33 02 c0 90 13 01 c0 	mov    DWORD PTR ds:0xc00233d0,0xc0011390
c001205e:	c7 05 d4 33 02 c0 da 13 01 c0 	mov    DWORD PTR ds:0xc00233d4,0xc00113da
c0012068:	c7 05 d8 33 02 c0 e8 1b 01 c0 	mov    DWORD PTR ds:0xc00233d8,0xc0011be8
c0012072:	c7 05 dc 33 02 c0 71 19 01 c0 	mov    DWORD PTR ds:0xc00233dc,0xc0011971
c001207c:	c7 05 e0 33 02 c0 2f 14 01 c0 	mov    DWORD PTR ds:0xc00233e0,0xc001142f
c0012086:	c7 05 e4 33 02 c0 5f 1c 01 c0 	mov    DWORD PTR ds:0xc00233e4,0xc0011c5f
c0012090:	c7 05 e8 33 02 c0 a4 1c 01 c0 	mov    DWORD PTR ds:0xc00233e8,0xc0011ca4
c001209a:	c7 05 ec 33 02 c0 a8 0f 01 c0 	mov    DWORD PTR ds:0xc00233ec,0xc0010fa8
c00120a4:	c7 05 f0 33 02 c0 29 11 01 c0 	mov    DWORD PTR ds:0xc00233f0,0xc0011129
c00120ae:	c7 05 f4 33 02 c0 be 11 01 c0 	mov    DWORD PTR ds:0xc00233f4,0xc00111be
c00120b8:	c7 05 f8 33 02 c0 93 0e 01 c0 	mov    DWORD PTR ds:0xc00233f8,0xc0010e93
c00120c2:	c7 05 fc 33 02 c0 70 12 01 c0 	mov    DWORD PTR ds:0xc00233fc,0xc0011270
c00120cc:	c7 05 00 34 02 c0 0c 0f 01 c0 	mov    DWORD PTR ds:0xc0023400,0xc0010f0c
c00120d6:	c7 05 04 34 02 c0 26 0f 01 c0 	mov    DWORD PTR ds:0xc0023404,0xc0010f26
c00120e0:	c3                   	ret    

c00120e1 <Sys::systemCall(regs*, void*)>:
c00120e1:	53                   	push   ebx
c00120e2:	83 ec 08             	sub    esp,0x8
c00120e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120ec:	83 f8 7f             	cmp    eax,0x7f
c00120ef:	77 16                	ja     c0012107 <Sys::systemCall(regs*, void*)+0x26>
c00120f1:	8b 14 85 40 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccc0]
c00120f8:	85 d2                	test   edx,edx
c00120fa:	74 0b                	je     c0012107 <Sys::systemCall(regs*, void*)+0x26>
c00120fc:	83 ec 0c             	sub    esp,0xc
c00120ff:	53                   	push   ebx
c0012100:	ff d2                	call   edx
c0012102:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012105:	eb 0d                	jmp    c0012114 <Sys::systemCall(regs*, void*)+0x33>
c0012107:	52                   	push   edx
c0012108:	52                   	push   edx
c0012109:	50                   	push   eax
c001210a:	68 7d e7 01 c0       	push   0xc001e77d
c001210f:	e8 d8 8a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001211c:	31 d2                	xor    edx,edx
c001211e:	83 c4 08             	add    esp,0x8
c0012121:	5b                   	pop    ebx
c0012122:	c3                   	ret    

c0012123 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012123:	55                   	push   ebp
c0012124:	57                   	push   edi
c0012125:	56                   	push   esi
c0012126:	53                   	push   ebx
c0012127:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001212d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012135:	0f 95 c2             	setne  dl
c0012138:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012140:	0f 94 c0             	sete   al
c0012143:	84 c2                	test   dl,al
c0012145:	74 34                	je     c001217b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012147:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012152:	74 27                	je     c001217b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012154:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001215b:	05 00 10 00 00       	add    eax,0x1000
c0012160:	89 c1                	mov    ecx,eax
c0012162:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012167:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001216d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012174:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001217b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012182:	83 ec 0c             	sub    esp,0xc
c0012185:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001218b:	6a 01                	push   0x1
c001218d:	e8 07 78 ff ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c0012192:	83 c4 10             	add    esp,0x10
c0012195:	89 c3                	mov    ebx,eax
c0012197:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001219d:	0f 86 25 01 00 00    	jbe    c00122c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00121a3:	c1 ee 0c             	shr    esi,0xc
c00121a6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00121ad:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00121b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121b9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00121c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121c4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00121cb:	29 ef                	sub    edi,ebp
c00121cd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00121d1:	0f 83 f8 00 00 00    	jae    c00122cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00121d7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00121dd:	76 05                	jbe    c00121e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00121df:	bf 00 10 00 00       	mov    edi,0x1000
c00121e4:	83 ec 0c             	sub    esp,0xc
c00121e7:	31 d2                	xor    edx,edx
c00121e9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00121f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121f6:	50                   	push   eax
c00121f7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00121fb:	56                   	push   esi
c00121fc:	52                   	push   edx
c00121fd:	57                   	push   edi
c00121fe:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012205:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012208:	83 c4 20             	add    esp,0x20
c001220b:	85 c0                	test   eax,eax
c001220d:	75 06                	jne    c0012215 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c001220f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012213:	74 13                	je     c0012228 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	53                   	push   ebx
c0012219:	e8 ab 7a ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001221e:	83 c4 10             	add    esp,0x10
c0012221:	31 c0                	xor    eax,eax
c0012223:	e9 7c 01 00 00       	jmp    c00123a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012228:	fa                   	cli    
c0012229:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001222f:	e8 f6 5f ff ff       	call   c000822a <Phys::allocatePage()>
c0012234:	6a 07                	push   0x7
c0012236:	89 c7                	mov    edi,eax
c0012238:	53                   	push   ebx
c0012239:	50                   	push   eax
c001223a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001223f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012242:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012248:	e8 e1 7d ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c001224d:	83 c4 0c             	add    esp,0xc
c0012250:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012257:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001225d:	6a 00                	push   0x0
c001225f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012264:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012267:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001226d:	e8 2e 7c ff ff       	call   c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012272:	58                   	pop    eax
c0012273:	5a                   	pop    edx
c0012274:	68 07 0c 00 00       	push   0xc07
c0012279:	55                   	push   ebp
c001227a:	57                   	push   edi
c001227b:	89 df                	mov    edi,ebx
c001227d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012284:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001228a:	6a 00                	push   0x0
c001228c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012291:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012294:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001229a:	e8 4f 81 ff ff       	call   c000a3ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001229f:	b9 00 10 00 00       	mov    ecx,0x1000
c00122a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122a6:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00122ab:	83 c4 20             	add    esp,0x20
c00122ae:	48                   	dec    eax
c00122af:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00122b4:	85 c0                	test   eax,eax
c00122b6:	75 01                	jne    c00122b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00122b8:	fb                   	sti    
c00122b9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122bf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00122c3:	e9 f1 fe ff ff       	jmp    c00121b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00122c8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00122cf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00122d6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00122dc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00122e2:	0f 86 ae 00 00 00    	jbe    c0012396 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00122e8:	fa                   	cli    
c00122e9:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00122ef:	c1 ee 0c             	shr    esi,0xc
c00122f2:	51                   	push   ecx
c00122f3:	31 ff                	xor    edi,edi
c00122f5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00122fc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012302:	6a 00                	push   0x0
c0012304:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012309:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001230c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012312:	e8 89 7b ff ff       	call   c0009ea0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	e8 0b 5f ff ff       	call   c000822a <Phys::allocatePage()>
c001231f:	47                   	inc    edi
c0012320:	6a 07                	push   0x7
c0012322:	53                   	push   ebx
c0012323:	50                   	push   eax
c0012324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012328:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001232e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012331:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012337:	e8 f2 7c ff ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c001233c:	58                   	pop    eax
c001233d:	5a                   	pop    edx
c001233e:	68 07 0c 00 00       	push   0xc07
c0012343:	55                   	push   ebp
c0012344:	81 c5 00 10 00 00    	add    ebp,0x1000
c001234a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001234e:	50                   	push   eax
c001234f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012356:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001235c:	6a 00                	push   0x0
c001235e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012363:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012366:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001236c:	e8 7d 80 ff ff       	call   c000a3ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012371:	83 c4 1c             	add    esp,0x1c
c0012374:	68 00 10 00 00       	push   0x1000
c0012379:	6a 00                	push   0x0
c001237b:	53                   	push   ebx
c001237c:	e8 6f e1 fe ff       	call   c00004f0 <memset>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	39 fe                	cmp    esi,edi
c0012386:	77 92                	ja     c001231a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012388:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001238d:	48                   	dec    eax
c001238e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0012393:	75 01                	jne    c0012396 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012395:	fb                   	sti    
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	53                   	push   ebx
c001239a:	e8 2a 79 ff ff       	call   c0009cc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	b0 01                	mov    al,0x1
c00123a4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00123aa:	5b                   	pop    ebx
c00123ab:	5e                   	pop    esi
c00123ac:	5f                   	pop    edi
c00123ad:	5d                   	pop    ebp
c00123ae:	c3                   	ret    

c00123af <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00123af:	55                   	push   ebp
c00123b0:	57                   	push   edi
c00123b1:	56                   	push   esi
c00123b2:	53                   	push   ebx
c00123b3:	83 ec 48             	sub    esp,0x48
c00123b6:	68 14 01 00 00       	push   0x114
c00123bb:	e8 9d 5a ff ff       	call   c0007e5d <malloc>
c00123c0:	83 c4 0c             	add    esp,0xc
c00123c3:	89 c6                	mov    esi,eax
c00123c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00123c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123cd:	50                   	push   eax
c00123ce:	e8 8f 8d ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00123d3:	58                   	pop    eax
c00123d4:	5a                   	pop    edx
c00123d5:	6a 01                	push   0x1
c00123d7:	56                   	push   esi
c00123d8:	e8 45 8e ff ff       	call   c000b222 <File::open(FileOpenMode)>
c00123dd:	83 c4 10             	add    esp,0x10
c00123e0:	85 c0                	test   eax,eax
c00123e2:	0f 85 47 01 00 00    	jne    c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123e8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00123f0:	83 ec 0c             	sub    esp,0xc
c00123f3:	6a 34                	push   0x34
c00123f5:	e8 63 5a ff ff       	call   c0007e5d <malloc>
c00123fa:	89 c3                	mov    ebx,eax
c00123fc:	58                   	pop    eax
c00123fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00123ff:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012403:	57                   	push   edi
c0012404:	53                   	push   ebx
c0012405:	6a 00                	push   0x0
c0012407:	6a 34                	push   0x34
c0012409:	56                   	push   esi
c001240a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001240d:	83 c4 20             	add    esp,0x20
c0012410:	85 c0                	test   eax,eax
c0012412:	0f 85 17 01 00 00    	jne    c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012418:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001241e:	0f 85 0b 01 00 00    	jne    c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012424:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012427:	85 c0                	test   eax,eax
c0012429:	0f 84 00 01 00 00    	je     c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001242f:	31 d2                	xor    edx,edx
c0012431:	55                   	push   ebp
c0012432:	52                   	push   edx
c0012433:	50                   	push   eax
c0012434:	56                   	push   esi
c0012435:	e8 a6 8e ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c001243a:	83 c4 10             	add    esp,0x10
c001243d:	85 c0                	test   eax,eax
c001243f:	0f 85 ea 00 00 00    	jne    c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012445:	83 ec 0c             	sub    esp,0xc
c0012448:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001244b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001244f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012453:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012457:	0f af c2             	imul   eax,edx
c001245a:	50                   	push   eax
c001245b:	e8 fd 59 ff ff       	call   c0007e5d <malloc>
c0012460:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012462:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012466:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012469:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001246d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012471:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012475:	0f af c2             	imul   eax,edx
c0012478:	99                   	cdq    
c0012479:	52                   	push   edx
c001247a:	50                   	push   eax
c001247b:	56                   	push   esi
c001247c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001247f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012482:	83 c4 20             	add    esp,0x20
c0012485:	85 c0                	test   eax,eax
c0012487:	0f 84 a2 00 00 00    	je     c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001248d:	31 d2                	xor    edx,edx
c001248f:	51                   	push   ecx
c0012490:	52                   	push   edx
c0012491:	50                   	push   eax
c0012492:	56                   	push   esi
c0012493:	e8 48 8e ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	85 c0                	test   eax,eax
c001249d:	0f 85 8c 00 00 00    	jne    c001252f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124aa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124ae:	31 ed                	xor    ebp,ebp
c00124b0:	0f af c2             	imul   eax,edx
c00124b3:	50                   	push   eax
c00124b4:	e8 a4 59 ff ff       	call   c0007e5d <malloc>
c00124b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00124bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124ca:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124ce:	0f af c2             	imul   eax,edx
c00124d1:	99                   	cdq    
c00124d2:	52                   	push   edx
c00124d3:	50                   	push   eax
c00124d4:	56                   	push   esi
c00124d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124d8:	83 c4 20             	add    esp,0x20
c00124db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00124e3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00124e7:	0f 86 80 00 00 00    	jbe    c001256d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00124ed:	0f b7 fd             	movzx  edi,bp
c00124f0:	c1 e7 05             	shl    edi,0x5
c00124f3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00124f7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00124fa:	75 6b                	jne    c0012567 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00124fc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012503:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012506:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001250a:	52                   	push   edx
c001250b:	31 d2                	xor    edx,edx
c001250d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012510:	52                   	push   edx
c0012511:	50                   	push   eax
c0012512:	56                   	push   esi
c0012513:	e8 c8 8d ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012518:	83 c4 10             	add    esp,0x10
c001251b:	85 c0                	test   eax,eax
c001251d:	74 17                	je     c0012536 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001251f:	83 ec 0c             	sub    esp,0xc
c0012522:	68 91 e7 01 c0       	push   0xc001e791
c0012527:	e8 c0 86 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	31 c0                	xor    eax,eax
c0012531:	e9 87 00 00 00       	jmp    c00125bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012536:	83 ec 0c             	sub    esp,0xc
c0012539:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001253c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001253f:	50                   	push   eax
c0012540:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012548:	56                   	push   esi
c0012549:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001254d:	e8 d1 fb ff ff       	call   c0012123 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012552:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012556:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001255a:	83 c4 20             	add    esp,0x20
c001255d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012561:	73 04                	jae    c0012567 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012567:	45                   	inc    ebp
c0012568:	e9 76 ff ff ff       	jmp    c00124e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001256d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012571:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012579:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001257f:	83 ec 0c             	sub    esp,0xc
c0012582:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012588:	25 00 f0 ff ff       	and    eax,0xfffff000
c001258d:	05 00 10 00 00       	add    eax,0x1000
c0012592:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012599:	e8 cf 58 ff ff       	call   c0007e6d <free>
c001259e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125a1:	e8 c7 58 ff ff       	call   c0007e6d <free>
c00125a6:	58                   	pop    eax
c00125a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125ab:	e8 bd 58 ff ff       	call   c0007e6d <free>
c00125b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00125b3:	e8 c8 8c ff ff       	call   c000b280 <File::close()>
c00125b8:	83 c4 10             	add    esp,0x10
c00125bb:	b0 01                	mov    al,0x1
c00125bd:	83 c4 3c             	add    esp,0x3c
c00125c0:	5b                   	pop    ebx
c00125c1:	5e                   	pop    esi
c00125c2:	5f                   	pop    edi
c00125c3:	5d                   	pop    ebp
c00125c4:	c3                   	ret    

c00125c5 <Thr::runtimeReferenceHelper()>:
c00125c5:	83 ec 18             	sub    esp,0x18
c00125c8:	68 99 e7 01 c0       	push   0xc001e799
c00125cd:	e8 1a 86 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00125d2:	fa                   	cli    
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	eb fe                	jmp    c00125d6 <Thr::runtimeReferenceHelper()+0x11>

c00125d8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00125d8:	57                   	push   edi
c00125d9:	56                   	push   esi
c00125da:	53                   	push   ebx
c00125db:	31 db                	xor    ebx,ebx
c00125dd:	39 1d e0 3c 02 c0    	cmp    DWORD PTR ds:0xc0023ce0,ebx
c00125e3:	7e 3c                	jle    c0012621 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00125e5:	8b 34 9d 60 3c 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc3a0]
c00125ec:	31 ff                	xor    edi,edi
c00125ee:	39 3c 9d 60 3b 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc4a0],edi
c00125f5:	7e 27                	jle    c001261e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00125f7:	50                   	push   eax
c00125f8:	50                   	push   eax
c00125f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00125ff:	03 04 9d e0 3b 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc420]
c0012606:	50                   	push   eax
c0012607:	e8 f4 e0 fe ff       	call   c0000700 <strcmp>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	85 c0                	test   eax,eax
c0012611:	75 05                	jne    c0012618 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012613:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012616:	eb 0b                	jmp    c0012623 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012618:	83 c6 10             	add    esi,0x10
c001261b:	47                   	inc    edi
c001261c:	eb d0                	jmp    c00125ee <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001261e:	43                   	inc    ebx
c001261f:	eb bc                	jmp    c00125dd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012621:	31 c0                	xor    eax,eax
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	c3                   	ret    

c0012627 <Thr::loadKernelSymbolTable(char const*)>:
c0012627:	55                   	push   ebp
c0012628:	57                   	push   edi
c0012629:	56                   	push   esi
c001262a:	53                   	push   ebx
c001262b:	83 ec 68             	sub    esp,0x68
c001262e:	8b 35 30 3d 02 c0    	mov    esi,DWORD PTR ds:0xc0023d30
c0012634:	68 14 01 00 00       	push   0x114
c0012639:	e8 1f 58 ff ff       	call   c0007e5d <malloc>
c001263e:	83 c4 0c             	add    esp,0xc
c0012641:	89 c3                	mov    ebx,eax
c0012643:	56                   	push   esi
c0012644:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012648:	50                   	push   eax
c0012649:	e8 14 8b ff ff       	call   c000b162 <File::File(char const*, Process*)>
c001264e:	5e                   	pop    esi
c001264f:	5f                   	pop    edi
c0012650:	6a 01                	push   0x1
c0012652:	53                   	push   ebx
c0012653:	e8 ca 8b ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	85 c0                	test   eax,eax
c001265d:	74 0a                	je     c0012669 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001265f:	83 ec 0c             	sub    esp,0xc
c0012662:	68 bb e7 01 c0       	push   0xc001e7bb
c0012667:	eb 34                	jmp    c001269d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012669:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012671:	83 ec 0c             	sub    esp,0xc
c0012674:	6a 34                	push   0x34
c0012676:	e8 e2 57 ff ff       	call   c0007e5d <malloc>
c001267b:	59                   	pop    ecx
c001267c:	89 c7                	mov    edi,eax
c001267e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012682:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012684:	56                   	push   esi
c0012685:	57                   	push   edi
c0012686:	6a 00                	push   0x0
c0012688:	6a 34                	push   0x34
c001268a:	53                   	push   ebx
c001268b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001268e:	83 c4 20             	add    esp,0x20
c0012691:	85 c0                	test   eax,eax
c0012693:	74 17                	je     c00126ac <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012695:	83 ec 0c             	sub    esp,0xc
c0012698:	68 d2 e7 01 c0       	push   0xc001e7d2
c001269d:	e8 99 e0 ff ff       	call   c001073b <Krnl::panic(char const*)>
c00126a2:	83 c4 10             	add    esp,0x10
c00126a5:	31 c0                	xor    eax,eax
c00126a7:	e9 31 02 00 00       	jmp    c00128dd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00126ac:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126b2:	75 e1                	jne    c0012695 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126b4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126b7:	85 c0                	test   eax,eax
c00126b9:	74 da                	je     c0012695 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126bb:	52                   	push   edx
c00126bc:	31 d2                	xor    edx,edx
c00126be:	52                   	push   edx
c00126bf:	50                   	push   eax
c00126c0:	53                   	push   ebx
c00126c1:	e8 1a 8c ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c00126c6:	83 c4 10             	add    esp,0x10
c00126c9:	85 c0                	test   eax,eax
c00126cb:	75 c8                	jne    c0012695 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126cd:	83 ec 0c             	sub    esp,0xc
c00126d0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126d4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126d8:	31 ed                	xor    ebp,ebp
c00126da:	0f af c2             	imul   eax,edx
c00126dd:	50                   	push   eax
c00126de:	e8 7a 57 ff ff       	call   c0007e5d <malloc>
c00126e3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00126ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126f0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126f4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126f8:	0f af c2             	imul   eax,edx
c00126fb:	99                   	cdq    
c00126fc:	52                   	push   edx
c00126fd:	50                   	push   eax
c00126fe:	53                   	push   ebx
c00126ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012702:	83 c4 20             	add    esp,0x20
c0012705:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001270d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012715:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001271d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012725:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012729:	0f 86 aa 00 00 00    	jbe    c00127d9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001272f:	0f b7 f5             	movzx  esi,bp
c0012732:	6b f6 28             	imul   esi,esi,0x28
c0012735:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012739:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001273c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012740:	50                   	push   eax
c0012741:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012745:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012749:	8b 16                	mov    edx,DWORD PTR [esi]
c001274b:	6b c0 28             	imul   eax,eax,0x28
c001274e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012752:	89 d0                	mov    eax,edx
c0012754:	31 d2                	xor    edx,edx
c0012756:	52                   	push   edx
c0012757:	50                   	push   eax
c0012758:	53                   	push   ebx
c0012759:	e8 82 8b ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c001275e:	83 c4 0c             	add    esp,0xc
c0012761:	6a 20                	push   0x20
c0012763:	6a 00                	push   0x0
c0012765:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012769:	52                   	push   edx
c001276a:	e8 81 dd fe ff       	call   c00004f0 <memset>
c001276f:	58                   	pop    eax
c0012770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012772:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012776:	51                   	push   ecx
c0012777:	8d 54 24 40          	lea    edx,[esp+0x40]
c001277b:	52                   	push   edx
c001277c:	6a 00                	push   0x0
c001277e:	6a 1f                	push   0x1f
c0012780:	53                   	push   ebx
c0012781:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012784:	83 c4 18             	add    esp,0x18
c0012787:	68 e9 e7 01 c0       	push   0xc001e7e9
c001278c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012790:	52                   	push   edx
c0012791:	e8 6a df fe ff       	call   c0000700 <strcmp>
c0012796:	83 c4 10             	add    esp,0x10
c0012799:	85 c0                	test   eax,eax
c001279b:	75 0f                	jne    c00127ac <Thr::loadKernelSymbolTable(char const*)+0x185>
c001279d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127ac:	50                   	push   eax
c00127ad:	50                   	push   eax
c00127ae:	68 f1 e7 01 c0       	push   0xc001e7f1
c00127b3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00127b7:	50                   	push   eax
c00127b8:	e8 43 df fe ff       	call   c0000700 <strcmp>
c00127bd:	83 c4 10             	add    esp,0x10
c00127c0:	85 c0                	test   eax,eax
c00127c2:	75 0f                	jne    c00127d3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00127c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127d3:	45                   	inc    ebp
c00127d4:	e9 4c ff ff ff       	jmp    c0012725 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00127d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00127de:	75 10                	jne    c00127f0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	68 f9 e7 01 c0       	push   0xc001e7f9
c00127e8:	e8 4e df ff ff       	call   c001073b <Krnl::panic(char const*)>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00127f5:	75 10                	jne    c0012807 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00127f7:	83 ec 0c             	sub    esp,0xc
c00127fa:	68 f9 e7 01 c0       	push   0xc001e7f9
c00127ff:	e8 37 df ff ff       	call   c001073b <Krnl::panic(char const*)>
c0012804:	83 c4 10             	add    esp,0x10
c0012807:	31 d2                	xor    edx,edx
c0012809:	50                   	push   eax
c001280a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001280e:	52                   	push   edx
c001280f:	50                   	push   eax
c0012810:	53                   	push   ebx
c0012811:	e8 ca 8a ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012816:	5a                   	pop    edx
c0012817:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001281b:	e8 3d 56 ff ff       	call   c0007e5d <malloc>
c0012820:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012824:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012828:	31 c9                	xor    ecx,ecx
c001282a:	5e                   	pop    esi
c001282b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001282d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012831:	55                   	push   ebp
c0012832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012836:	51                   	push   ecx
c0012837:	52                   	push   edx
c0012838:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001283c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012840:	53                   	push   ebx
c0012841:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012844:	83 c4 14             	add    esp,0x14
c0012847:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001284b:	e8 0d 56 ff ff       	call   c0007e5d <malloc>
c0012850:	89 c6                	mov    esi,eax
c0012852:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012854:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012857:	56                   	push   esi
c0012858:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001285c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012860:	51                   	push   ecx
c0012861:	52                   	push   edx
c0012862:	53                   	push   ebx
c0012863:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012866:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001286a:	8b 15 e0 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023ce0
c0012870:	83 c4 1c             	add    esp,0x1c
c0012873:	c1 e8 04             	shr    eax,0x4
c0012876:	89 04 95 60 3b 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc4a0],eax
c001287d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012881:	31 d2                	xor    edx,edx
c0012883:	52                   	push   edx
c0012884:	50                   	push   eax
c0012885:	53                   	push   ebx
c0012886:	e8 55 8a ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c001288b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001288d:	31 d2                	xor    edx,edx
c001288f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012892:	56                   	push   esi
c0012893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012897:	52                   	push   edx
c0012898:	50                   	push   eax
c0012899:	53                   	push   ebx
c001289a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001289d:	83 c4 14             	add    esp,0x14
c00128a0:	53                   	push   ebx
c00128a1:	e8 da 89 ff ff       	call   c000b280 <File::close()>
c00128a6:	5d                   	pop    ebp
c00128a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128ab:	e8 bd 55 ff ff       	call   c0007e6d <free>
c00128b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128b3:	e8 b5 55 ff ff       	call   c0007e6d <free>
c00128b8:	a1 e0 3c 02 c0       	mov    eax,ds:0xc0023ce0
c00128bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00128c1:	8d 50 01             	lea    edx,[eax+0x1]
c00128c4:	89 0c 85 60 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc3a0],ecx
c00128cb:	89 34 85 e0 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc420],esi
c00128d2:	89 15 e0 3c 02 c0    	mov    DWORD PTR ds:0xc0023ce0,edx
c00128d8:	83 c4 10             	add    esp,0x10
c00128db:	b0 01                	mov    al,0x1
c00128dd:	83 c4 5c             	add    esp,0x5c
c00128e0:	5b                   	pop    ebx
c00128e1:	5e                   	pop    esi
c00128e2:	5f                   	pop    edi
c00128e3:	5d                   	pop    ebp
c00128e4:	c3                   	ret    

c00128e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00128e5:	55                   	push   ebp
c00128e6:	57                   	push   edi
c00128e7:	56                   	push   esi
c00128e8:	53                   	push   ebx
c00128e9:	81 ec 68 03 00 00    	sub    esp,0x368
c00128ef:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00128f6:	8b 1d 30 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d30
c00128fc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012900:	68 14 01 00 00       	push   0x114
c0012905:	e8 53 55 ff ff       	call   c0007e5d <malloc>
c001290a:	83 c4 0c             	add    esp,0xc
c001290d:	89 c5                	mov    ebp,eax
c001290f:	53                   	push   ebx
c0012910:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012917:	50                   	push   eax
c0012918:	e8 45 88 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c001291d:	5e                   	pop    esi
c001291e:	5f                   	pop    edi
c001291f:	6a 01                	push   0x1
c0012921:	55                   	push   ebp
c0012922:	e8 fb 88 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	85 c0                	test   eax,eax
c001292c:	0f 85 a7 06 00 00    	jne    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012932:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001293a:	83 ec 0c             	sub    esp,0xc
c001293d:	6a 34                	push   0x34
c001293f:	e8 19 55 ff ff       	call   c0007e5d <malloc>
c0012944:	5b                   	pop    ebx
c0012945:	89 c7                	mov    edi,eax
c0012947:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001294b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001294e:	53                   	push   ebx
c001294f:	57                   	push   edi
c0012950:	6a 00                	push   0x0
c0012952:	6a 34                	push   0x34
c0012954:	55                   	push   ebp
c0012955:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012958:	83 c4 20             	add    esp,0x20
c001295b:	85 c0                	test   eax,eax
c001295d:	0f 85 76 06 00 00    	jne    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012963:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012969:	0f 85 6a 06 00 00    	jne    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001296f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012972:	85 c0                	test   eax,eax
c0012974:	0f 84 5f 06 00 00    	je     c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001297a:	31 d2                	xor    edx,edx
c001297c:	51                   	push   ecx
c001297d:	52                   	push   edx
c001297e:	50                   	push   eax
c001297f:	55                   	push   ebp
c0012980:	e8 5b 89 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012985:	83 c4 10             	add    esp,0x10
c0012988:	85 c0                	test   eax,eax
c001298a:	0f 85 49 06 00 00    	jne    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012990:	83 ec 0c             	sub    esp,0xc
c0012993:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012996:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001299a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001299e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129a2:	0f af c2             	imul   eax,edx
c00129a5:	50                   	push   eax
c00129a6:	e8 b2 54 ff ff       	call   c0007e5d <malloc>
c00129ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129b9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129bd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129c1:	0f af c2             	imul   eax,edx
c00129c4:	99                   	cdq    
c00129c5:	52                   	push   edx
c00129c6:	50                   	push   eax
c00129c7:	55                   	push   ebp
c00129c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129cb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00129ce:	83 c4 20             	add    esp,0x20
c00129d1:	85 c0                	test   eax,eax
c00129d3:	0f 84 00 06 00 00    	je     c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129d9:	52                   	push   edx
c00129da:	31 d2                	xor    edx,edx
c00129dc:	52                   	push   edx
c00129dd:	50                   	push   eax
c00129de:	55                   	push   ebp
c00129df:	e8 fc 88 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c00129e4:	83 c4 10             	add    esp,0x10
c00129e7:	85 c0                	test   eax,eax
c00129e9:	0f 85 ea 05 00 00    	jne    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129ef:	83 ec 0c             	sub    esp,0xc
c00129f2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129f6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129fa:	31 f6                	xor    esi,esi
c00129fc:	0f af c2             	imul   eax,edx
c00129ff:	50                   	push   eax
c0012a00:	e8 58 54 ff ff       	call   c0007e5d <malloc>
c0012a05:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a13:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a17:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a1b:	0f af c2             	imul   eax,edx
c0012a1e:	99                   	cdq    
c0012a1f:	52                   	push   edx
c0012a20:	50                   	push   eax
c0012a21:	55                   	push   ebp
c0012a22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a25:	83 c4 20             	add    esp,0x20
c0012a28:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012a2c:	0f 86 8a 00 00 00    	jbe    c0012abc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012a32:	0f b7 de             	movzx  ebx,si
c0012a35:	c1 e3 05             	shl    ebx,0x5
c0012a38:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012a3c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012a3f:	75 75                	jne    c0012ab6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012a41:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a44:	31 d2                	xor    edx,edx
c0012a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012a4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a51:	50                   	push   eax
c0012a52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a55:	52                   	push   edx
c0012a56:	50                   	push   eax
c0012a57:	55                   	push   ebp
c0012a58:	e8 83 88 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012a5d:	83 c4 10             	add    esp,0x10
c0012a60:	85 c0                	test   eax,eax
c0012a62:	0f 85 71 05 00 00    	jne    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a68:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a6f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a72:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a76:	31 d2                	xor    edx,edx
c0012a78:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a7c:	83 ec 0c             	sub    esp,0xc
c0012a7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a83:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a8a:	50                   	push   eax
c0012a8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a93:	52                   	push   edx
c0012a94:	50                   	push   eax
c0012a95:	55                   	push   ebp
c0012a96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a99:	83 c4 1c             	add    esp,0x1c
c0012a9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012a9f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012aa2:	50                   	push   eax
c0012aa3:	6a 00                	push   0x0
c0012aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012aad:	50                   	push   eax
c0012aae:	e8 3d da fe ff       	call   c00004f0 <memset>
c0012ab3:	83 c4 10             	add    esp,0x10
c0012ab6:	46                   	inc    esi
c0012ab7:	e9 6c ff ff ff       	jmp    c0012a28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012abc:	53                   	push   ebx
c0012abd:	31 db                	xor    ebx,ebx
c0012abf:	68 00 01 00 00       	push   0x100
c0012ac4:	6a 00                	push   0x0
c0012ac6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012aca:	50                   	push   eax
c0012acb:	e8 20 da fe ff       	call   c00004f0 <memset>
c0012ad0:	83 c4 0c             	add    esp,0xc
c0012ad3:	68 00 01 00 00       	push   0x100
c0012ad8:	6a 00                	push   0x0
c0012ada:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012ae1:	50                   	push   eax
c0012ae2:	e8 09 da fe ff       	call   c00004f0 <memset>
c0012ae7:	83 c4 10             	add    esp,0x10
c0012aea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012af2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012afa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012b02:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b0a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b12:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012b16:	0f 86 30 01 00 00    	jbe    c0012c4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012b1c:	0f b7 f3             	movzx  esi,bx
c0012b1f:	6b f6 28             	imul   esi,esi,0x28
c0012b22:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012b26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012b29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b2d:	52                   	push   edx
c0012b2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b32:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012b36:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b38:	6b d2 28             	imul   edx,edx,0x28
c0012b3b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012b3f:	31 d2                	xor    edx,edx
c0012b41:	52                   	push   edx
c0012b42:	50                   	push   eax
c0012b43:	55                   	push   ebp
c0012b44:	e8 97 87 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012b49:	83 c4 0c             	add    esp,0xc
c0012b4c:	6a 20                	push   0x20
c0012b4e:	6a 00                	push   0x0
c0012b50:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b57:	51                   	push   ecx
c0012b58:	e8 93 d9 fe ff       	call   c00004f0 <memset>
c0012b5d:	59                   	pop    ecx
c0012b5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b61:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b65:	52                   	push   edx
c0012b66:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b6d:	51                   	push   ecx
c0012b6e:	6a 00                	push   0x0
c0012b70:	6a 1f                	push   0x1f
c0012b72:	55                   	push   ebp
c0012b73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b76:	83 c4 1c             	add    esp,0x1c
c0012b79:	6a 09                	push   0x9
c0012b7b:	68 13 e8 01 c0       	push   0xc001e813
c0012b80:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b87:	51                   	push   ecx
c0012b88:	e8 23 d8 fe ff       	call   c00003b0 <memcmp>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	85 c0                	test   eax,eax
c0012b92:	75 21                	jne    c0012bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b9c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012ba0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ba4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012ba7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bae:	89 d0                	mov    eax,edx
c0012bb0:	40                   	inc    eax
c0012bb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bb5:	50                   	push   eax
c0012bb6:	6a 09                	push   0x9
c0012bb8:	68 1d e8 01 c0       	push   0xc001e81d
c0012bbd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bc4:	50                   	push   eax
c0012bc5:	e8 e6 d7 fe ff       	call   c00003b0 <memcmp>
c0012bca:	83 c4 10             	add    esp,0x10
c0012bcd:	85 c0                	test   eax,eax
c0012bcf:	75 21                	jne    c0012bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012bd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bd9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012bdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012be4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012beb:	89 d0                	mov    eax,edx
c0012bed:	40                   	inc    eax
c0012bee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bf2:	50                   	push   eax
c0012bf3:	50                   	push   eax
c0012bf4:	68 e9 e7 01 c0       	push   0xc001e7e9
c0012bf9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c00:	50                   	push   eax
c0012c01:	e8 fa da fe ff       	call   c0000700 <strcmp>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	85 c0                	test   eax,eax
c0012c0b:	75 0f                	jne    c0012c1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012c0d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c1c:	50                   	push   eax
c0012c1d:	50                   	push   eax
c0012c1e:	68 f1 e7 01 c0       	push   0xc001e7f1
c0012c23:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c2a:	50                   	push   eax
c0012c2b:	e8 d0 da fe ff       	call   c0000700 <strcmp>
c0012c30:	83 c4 10             	add    esp,0x10
c0012c33:	85 c0                	test   eax,eax
c0012c35:	75 0f                	jne    c0012c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012c37:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012c3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012c46:	43                   	inc    ebx
c0012c47:	e9 c6 fe ff ff       	jmp    c0012b12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012c4c:	31 d2                	xor    edx,edx
c0012c4e:	50                   	push   eax
c0012c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c53:	52                   	push   edx
c0012c54:	50                   	push   eax
c0012c55:	55                   	push   ebp
c0012c56:	e8 85 86 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012c5b:	58                   	pop    eax
c0012c5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c60:	e8 f8 51 ff ff       	call   c0007e5d <malloc>
c0012c65:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c68:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c6c:	31 d2                	xor    edx,edx
c0012c6e:	58                   	pop    eax
c0012c6f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c73:	53                   	push   ebx
c0012c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c7c:	52                   	push   edx
c0012c7d:	50                   	push   eax
c0012c7e:	55                   	push   ebp
c0012c7f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c82:	83 c4 14             	add    esp,0x14
c0012c85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c89:	e8 cf 51 ff ff       	call   c0007e5d <malloc>
c0012c8e:	31 d2                	xor    edx,edx
c0012c90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c94:	83 c4 0c             	add    esp,0xc
c0012c97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c9b:	52                   	push   edx
c0012c9c:	50                   	push   eax
c0012c9d:	55                   	push   ebp
c0012c9e:	e8 3d 86 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012ca3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ca6:	31 d2                	xor    edx,edx
c0012ca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012caf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cb3:	52                   	push   edx
c0012cb4:	50                   	push   eax
c0012cb5:	55                   	push   ebp
c0012cb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cb9:	83 c4 20             	add    esp,0x20
c0012cbc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012cc4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cc8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012ccc:	0f 84 0b 03 00 00    	je     c0012fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012cd2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012cd9:	31 d2                	xor    edx,edx
c0012cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cdf:	c1 e8 03             	shr    eax,0x3
c0012ce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012ce6:	51                   	push   ecx
c0012ce7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ceb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012cef:	52                   	push   edx
c0012cf0:	50                   	push   eax
c0012cf1:	55                   	push   ebp
c0012cf2:	e8 e9 85 ff ff       	call   c000b2e0 <File::seek(unsigned long long)>
c0012cf7:	5b                   	pop    ebx
c0012cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cfc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012d03:	e8 55 51 ff ff       	call   c0007e5d <malloc>
c0012d08:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d0f:	31 d2                	xor    edx,edx
c0012d11:	5e                   	pop    esi
c0012d12:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012d16:	50                   	push   eax
c0012d17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d1f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012d26:	52                   	push   edx
c0012d27:	50                   	push   eax
c0012d28:	55                   	push   ebp
c0012d29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d2c:	83 c4 20             	add    esp,0x20
c0012d2f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012d37:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012d3b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012d3f:	0f 8d 7c 02 00 00    	jge    c0012fc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012d45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d4d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d52:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d5d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d61:	89 d8                	mov    eax,ebx
c0012d63:	c1 e8 08             	shr    eax,0x8
c0012d66:	89 c6                	mov    esi,eax
c0012d68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d6c:	c1 e6 04             	shl    esi,0x4
c0012d6f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d73:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d76:	85 d2                	test   edx,edx
c0012d78:	0f 85 bf 00 00 00    	jne    c0012e3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d7e:	83 ec 0c             	sub    esp,0xc
c0012d81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d85:	03 06                	add    eax,DWORD PTR [esi]
c0012d87:	50                   	push   eax
c0012d88:	e8 4b f8 ff ff       	call   c00125d8 <Thr::getAddressOfKernelSymbol(char const*)>
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	89 c2                	mov    edx,eax
c0012d92:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d97:	85 c0                	test   eax,eax
c0012d99:	0f 85 9e 00 00 00    	jne    c0012e3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d9f:	83 ec 0c             	sub    esp,0xc
c0012da2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012da6:	03 06                	add    eax,DWORD PTR [esi]
c0012da8:	50                   	push   eax
c0012da9:	e8 96 41 ff ff       	call   c0006f44 <Krnl::resolveCompatibilitySymbol(char*)>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	89 c2                	mov    edx,eax
c0012db3:	85 c0                	test   eax,eax
c0012db5:	0f 85 82 00 00 00    	jne    c0012e3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012dbb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012dbf:	50                   	push   eax
c0012dc0:	50                   	push   eax
c0012dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc5:	03 06                	add    eax,DWORD PTR [esi]
c0012dc7:	50                   	push   eax
c0012dc8:	68 27 e8 01 c0       	push   0xc001e827
c0012dcd:	e8 1a 7e ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0012dd2:	58                   	pop    eax
c0012dd3:	5a                   	pop    edx
c0012dd4:	68 41 e8 01 c0       	push   0xc001e841
c0012dd9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012de0:	50                   	push   eax
c0012de1:	e8 3a d8 fe ff       	call   c0000620 <strcpy>
c0012de6:	59                   	pop    ecx
c0012de7:	58                   	pop    eax
c0012de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dec:	03 06                	add    eax,DWORD PTR [esi]
c0012dee:	50                   	push   eax
c0012def:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012df6:	50                   	push   eax
c0012df7:	e8 e4 d9 fe ff       	call   c00007e0 <strcat>
c0012dfc:	58                   	pop    eax
c0012dfd:	5a                   	pop    edx
c0012dfe:	68 d7 e8 01 c0       	push   0xc001e8d7
c0012e03:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e0a:	50                   	push   eax
c0012e0b:	e8 d0 d9 fe ff       	call   c00007e0 <strcat>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e18:	0f 84 5d 01 00 00    	je     c0012f7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e1e:	83 ec 0c             	sub    esp,0xc
c0012e21:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e28:	50                   	push   eax
c0012e29:	e8 0d d9 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012e35:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e39:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012e3d:	80 fb 01             	cmp    bl,0x1
c0012e40:	0f 85 88 00 00 00    	jne    c0012ece <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012e46:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012e4d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e51:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e55:	01 ce                	add    esi,ecx
c0012e57:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e5d:	0f 94 c0             	sete   al
c0012e60:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e66:	0f 94 c3             	sete   bl
c0012e69:	09 c3                	or     ebx,eax
c0012e6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e6d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e72:	74 41                	je     c0012eb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e74:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e77:	84 db                	test   bl,bl
c0012e79:	75 15                	jne    c0012e90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e7f:	66 83 f8 0c          	cmp    ax,0xc
c0012e83:	76 05                	jbe    c0012e8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e85:	b8 0c 00 00 00       	mov    eax,0xc
c0012e8a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e8e:	76 37                	jbe    c0012ec7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e90:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e94:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e99:	0f 84 dc 00 00 00    	je     c0012f7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e9f:	83 ec 0c             	sub    esp,0xc
c0012ea2:	68 58 e8 01 c0       	push   0xc001e858
c0012ea7:	e8 8f d8 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0012eac:	83 c4 10             	add    esp,0x10
c0012eaf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012eb3:	eb 12                	jmp    c0012ec7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012eb5:	01 c1                	add    ecx,eax
c0012eb7:	84 db                	test   bl,bl
c0012eb9:	75 0c                	jne    c0012ec7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ebb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ebf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012ec3:	77 02                	ja     c0012ec7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ec5:	01 d1                	add    ecx,edx
c0012ec7:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ec9:	e9 ea 00 00 00       	jmp    c0012fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ece:	80 fb 02             	cmp    bl,0x2
c0012ed1:	75 7c                	jne    c0012f4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012ed3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012eda:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012ede:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012ee2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012ee8:	74 20                	je     c0012f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012eea:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012ef0:	74 18                	je     c0012f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ef2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012ef6:	b9 0a 00 00 00       	mov    ecx,0xa
c0012efb:	66 83 f8 0e          	cmp    ax,0xe
c0012eff:	77 03                	ja     c0012f04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012f01:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012f04:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012f08:	76 1f                	jbe    c0012f29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012f0a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012f0e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f13:	74 66                	je     c0012f7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f15:	83 ec 0c             	sub    esp,0xc
c0012f18:	68 74 e8 01 c0       	push   0xc001e874
c0012f1d:	e8 19 d8 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0012f22:	83 c4 10             	add    esp,0x10
c0012f25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f29:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f2b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012f30:	74 13                	je     c0012f45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012f32:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012f36:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012f3d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012f41:	01 c8                	add    eax,ecx
c0012f43:	eb 04                	jmp    c0012f49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012f45:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012f49:	01 c2                	add    edx,eax
c0012f4b:	89 16                	mov    DWORD PTR [esi],edx
c0012f4d:	eb 69                	jmp    c0012fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f4f:	0f b6 db             	movzx  ebx,bl
c0012f52:	50                   	push   eax
c0012f53:	50                   	push   eax
c0012f54:	53                   	push   ebx
c0012f55:	68 90 e8 01 c0       	push   0xc001e890
c0012f5a:	e8 8d 7c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f67:	74 12                	je     c0012f7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	68 9b e8 01 c0       	push   0xc001e89b
c0012f71:	e8 c5 d7 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	eb 3d                	jmp    c0012fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f7b:	83 ec 0c             	sub    esp,0xc
c0012f7e:	55                   	push   ebp
c0012f7f:	e8 fc 82 ff ff       	call   c000b280 <File::close()>
c0012f84:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f87:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f8d:	59                   	pop    ecx
c0012f8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f92:	e8 d6 4e ff ff       	call   c0007e6d <free>
c0012f97:	5b                   	pop    ebx
c0012f98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f9c:	e8 cc 4e ff ff       	call   c0007e6d <free>
c0012fa1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fa4:	e8 c4 4e ff ff       	call   c0007e6d <free>
c0012fa9:	5e                   	pop    esi
c0012faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fae:	e8 ba 4e ff ff       	call   c0007e6d <free>
c0012fb3:	83 c4 10             	add    esp,0x10
c0012fb6:	eb 21                	jmp    c0012fd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012fb8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012fbc:	e9 76 fd ff ff       	jmp    c0012d37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012fc1:	83 ec 0c             	sub    esp,0xc
c0012fc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fc8:	e8 a0 4e ff ff       	call   c0007e6d <free>
c0012fcd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012fd1:	83 c4 10             	add    esp,0x10
c0012fd4:	e9 eb fc ff ff       	jmp    c0012cc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012fd9:	31 c0                	xor    eax,eax
c0012fdb:	eb 33                	jmp    c0013010 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012fdd:	83 ec 0c             	sub    esp,0xc
c0012fe0:	55                   	push   ebp
c0012fe1:	e8 9a 82 ff ff       	call   c000b280 <File::close()>
c0012fe6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fef:	58                   	pop    eax
c0012ff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ff4:	e8 74 4e ff ff       	call   c0007e6d <free>
c0012ff9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ffc:	e8 6c 4e ff ff       	call   c0007e6d <free>
c0013001:	5a                   	pop    edx
c0013002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013006:	e8 62 4e ff ff       	call   c0007e6d <free>
c001300b:	83 c4 10             	add    esp,0x10
c001300e:	b0 01                	mov    al,0x1
c0013010:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013016:	5b                   	pop    ebx
c0013017:	5e                   	pop    esi
c0013018:	5f                   	pop    edi
c0013019:	5d                   	pop    ebp
c001301a:	c3                   	ret    

c001301b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001301b:	56                   	push   esi
c001301c:	31 d2                	xor    edx,edx
c001301e:	53                   	push   ebx
c001301f:	8b 1d 40 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023540
c0013025:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013029:	39 d3                	cmp    ebx,edx
c001302b:	7e 1b                	jle    c0013048 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001302d:	8b 04 95 60 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8a0]
c0013034:	39 c8                	cmp    eax,ecx
c0013036:	77 0d                	ja     c0013045 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013038:	8b 34 95 60 35 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcaa0]
c001303f:	01 c6                	add    esi,eax
c0013041:	39 ce                	cmp    esi,ecx
c0013043:	77 05                	ja     c001304a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013045:	42                   	inc    edx
c0013046:	eb e1                	jmp    c0013029 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013048:	31 c0                	xor    eax,eax
c001304a:	5b                   	pop    ebx
c001304b:	5e                   	pop    esi
c001304c:	c3                   	ret    

c001304d <Thr::getDriverNameFromAddress(unsigned long)>:
c001304d:	53                   	push   ebx
c001304e:	31 c0                	xor    eax,eax
c0013050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013054:	8b 1d 40 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023540
c001305a:	39 c3                	cmp    ebx,eax
c001305c:	7e 22                	jle    c0013080 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001305e:	8b 14 85 60 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8a0]
c0013065:	39 ca                	cmp    edx,ecx
c0013067:	77 14                	ja     c001307d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013069:	03 14 85 60 35 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcaa0]
c0013070:	39 ca                	cmp    edx,ecx
c0013072:	76 09                	jbe    c001307d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013074:	8b 04 85 60 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6a0]
c001307b:	eb 05                	jmp    c0013082 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001307d:	40                   	inc    eax
c001307e:	eb da                	jmp    c001305a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013080:	31 c0                	xor    eax,eax
c0013082:	5b                   	pop    ebx
c0013083:	c3                   	ret    

c0013084 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013084:	53                   	push   ebx
c0013085:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013089:	53                   	push   ebx
c001308a:	e8 8c ff ff ff       	call   c001301b <Thr::getDriverBaseFromAddress(unsigned long)>
c001308f:	5a                   	pop    edx
c0013090:	31 d2                	xor    edx,edx
c0013092:	85 c0                	test   eax,eax
c0013094:	74 04                	je     c001309a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013096:	89 da                	mov    edx,ebx
c0013098:	29 c2                	sub    edx,eax
c001309a:	89 d0                	mov    eax,edx
c001309c:	5b                   	pop    ebx
c001309d:	c3                   	ret    

c001309e <Thr::loadDLL(char const*, bool)>:
c001309e:	55                   	push   ebp
c001309f:	57                   	push   edi
c00130a0:	56                   	push   esi
c00130a1:	53                   	push   ebx
c00130a2:	81 ec 34 01 00 00    	sub    esp,0x134
c00130a8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00130af:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00130b6:	56                   	push   esi
c00130b7:	68 b3 e8 01 c0       	push   0xc001e8b3
c00130bc:	e8 2b 7b ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00130c1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00130c8:	e8 90 4d ff ff       	call   c0007e5d <malloc>
c00130cd:	83 c4 0c             	add    esp,0xc
c00130d0:	89 c3                	mov    ebx,eax
c00130d2:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00130d8:	56                   	push   esi
c00130d9:	50                   	push   eax
c00130da:	e8 83 80 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00130df:	83 c4 10             	add    esp,0x10
c00130e2:	85 db                	test   ebx,ebx
c00130e4:	75 3c                	jne    c0013122 <Thr::loadDLL(char const*, bool)+0x84>
c00130e6:	89 f8                	mov    eax,edi
c00130e8:	84 c0                	test   al,al
c00130ea:	0f 84 d2 01 00 00    	je     c00132c2 <Thr::loadDLL(char const*, bool)+0x224>
c00130f0:	55                   	push   ebp
c00130f1:	55                   	push   ebp
c00130f2:	68 c4 e8 01 c0       	push   0xc001e8c4
c00130f7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00130fb:	55                   	push   ebp
c00130fc:	e8 1f d5 fe ff       	call   c0000620 <strcpy>
c0013101:	58                   	pop    eax
c0013102:	5a                   	pop    edx
c0013103:	56                   	push   esi
c0013104:	55                   	push   ebp
c0013105:	e8 d6 d6 fe ff       	call   c00007e0 <strcat>
c001310a:	59                   	pop    ecx
c001310b:	58                   	pop    eax
c001310c:	68 d7 e8 01 c0       	push   0xc001e8d7
c0013111:	55                   	push   ebp
c0013112:	e8 c9 d6 fe ff       	call   c00007e0 <strcat>
c0013117:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001311a:	e8 1c d6 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	51                   	push   ecx
c0013123:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013127:	50                   	push   eax
c0013128:	8d 44 24 20          	lea    eax,[esp+0x20]
c001312c:	50                   	push   eax
c001312d:	53                   	push   ebx
c001312e:	e8 9b 83 ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	85 db                	test   ebx,ebx
c0013138:	74 0c                	je     c0013146 <Thr::loadDLL(char const*, bool)+0xa8>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001313f:	53                   	push   ebx
c0013140:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001314b:	75 0a                	jne    c0013157 <Thr::loadDLL(char const*, bool)+0xb9>
c001314d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013151:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013155:	75 3c                	jne    c0013193 <Thr::loadDLL(char const*, bool)+0xf5>
c0013157:	89 f8                	mov    eax,edi
c0013159:	84 c0                	test   al,al
c001315b:	0f 84 49 01 00 00    	je     c00132aa <Thr::loadDLL(char const*, bool)+0x20c>
c0013161:	51                   	push   ecx
c0013162:	51                   	push   ecx
c0013163:	68 c4 e8 01 c0       	push   0xc001e8c4
c0013168:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001316c:	53                   	push   ebx
c001316d:	e8 ae d4 fe ff       	call   c0000620 <strcpy>
c0013172:	5d                   	pop    ebp
c0013173:	58                   	pop    eax
c0013174:	56                   	push   esi
c0013175:	53                   	push   ebx
c0013176:	e8 65 d6 fe ff       	call   c00007e0 <strcat>
c001317b:	58                   	pop    eax
c001317c:	5a                   	pop    edx
c001317d:	68 d7 e8 01 c0       	push   0xc001e8d7
c0013182:	53                   	push   ebx
c0013183:	e8 58 d6 fe ff       	call   c00007e0 <strcat>
c0013188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001318b:	e8 ab d5 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	52                   	push   edx
c0013194:	6a 03                	push   0x3
c0013196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001319e:	05 ff 0f 00 00       	add    eax,0xfff
c00131a3:	83 d2 00             	adc    edx,0x0
c00131a6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00131aa:	50                   	push   eax
c00131ab:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c00131b1:	e8 7c 6f ff ff       	call   c000a132 <VAS::allocatePages(int, int)>
c00131b6:	59                   	pop    ecx
c00131b7:	89 c3                	mov    ebx,eax
c00131b9:	5d                   	pop    ebp
c00131ba:	50                   	push   eax
c00131bb:	68 be d6 01 c0       	push   0xc001d6be
c00131c0:	e8 27 7a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00131c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00131c8:	e8 93 d3 fe ff       	call   c0000560 <strlen>
c00131cd:	8b 2d 40 35 02 c0    	mov    ebp,DWORD PTR ds:0xc0023540
c00131d3:	40                   	inc    eax
c00131d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00131d7:	e8 81 4c ff ff       	call   c0007e5d <malloc>
c00131dc:	89 04 ad 60 39 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc6a0],eax
c00131e3:	58                   	pop    eax
c00131e4:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c00131e9:	5a                   	pop    edx
c00131ea:	56                   	push   esi
c00131eb:	ff 34 85 60 39 02 c0 	push   DWORD PTR [eax*4-0x3ffdc6a0]
c00131f2:	e8 29 d4 fe ff       	call   c0000620 <strcpy>
c00131f7:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c00131fc:	8d 50 01             	lea    edx,[eax+0x1]
c00131ff:	89 1c 85 60 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8a0],ebx
c0013206:	89 15 40 35 02 c0    	mov    DWORD PTR ds:0xc0023540,edx
c001320c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013210:	83 c4 0c             	add    esp,0xc
c0013213:	89 14 85 60 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcaa0],edx
c001321a:	6a 01                	push   0x1
c001321c:	53                   	push   ebx
c001321d:	56                   	push   esi
c001321e:	e8 c2 f6 ff ff       	call   c00128e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013223:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001322f:	0f 85 89 00 00 00    	jne    c00132be <Thr::loadDLL(char const*, bool)+0x220>
c0013235:	89 f8                	mov    eax,edi
c0013237:	84 c0                	test   al,al
c0013239:	74 73                	je     c00132ae <Thr::loadDLL(char const*, bool)+0x210>
c001323b:	83 ec 0c             	sub    esp,0xc
c001323e:	68 d9 e8 01 c0       	push   0xc001e8d9
c0013243:	e8 f3 d4 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	eb 61                	jmp    c00132ae <Thr::loadDLL(char const*, bool)+0x210>
c001324d:	50                   	push   eax
c001324e:	50                   	push   eax
c001324f:	89 e8                	mov    eax,ebp
c0013251:	c1 e0 0c             	shl    eax,0xc
c0013254:	01 d8                	add    eax,ebx
c0013256:	50                   	push   eax
c0013257:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c001325d:	e8 48 6a ff ff       	call   c0009caa <VAS::getPageTableEntry(unsigned long)>
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	8b 00                	mov    eax,DWORD PTR [eax]
c0013267:	a8 60                	test   al,0x60
c0013269:	75 11                	jne    c001327c <Thr::loadDLL(char const*, bool)+0x1de>
c001326b:	83 ec 0c             	sub    esp,0xc
c001326e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013273:	50                   	push   eax
c0013274:	e8 4f 4f ff ff       	call   c00081c8 <Phys::freePage(unsigned long)>
c0013279:	83 c4 10             	add    esp,0x10
c001327c:	45                   	inc    ebp
c001327d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013285:	05 ff 0f 00 00       	add    eax,0xfff
c001328a:	bf 00 00 00 00       	mov    edi,0x0
c001328f:	83 d2 00             	adc    edx,0x0
c0013292:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013296:	c1 ea 0c             	shr    edx,0xc
c0013299:	39 c5                	cmp    ebp,eax
c001329b:	89 d1                	mov    ecx,edx
c001329d:	89 f8                	mov    eax,edi
c001329f:	19 c8                	sbb    eax,ecx
c00132a1:	72 aa                	jb     c001324d <Thr::loadDLL(char const*, bool)+0x1af>
c00132a3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00132a8:	75 18                	jne    c00132c2 <Thr::loadDLL(char const*, bool)+0x224>
c00132aa:	31 db                	xor    ebx,ebx
c00132ac:	eb 14                	jmp    c00132c2 <Thr::loadDLL(char const*, bool)+0x224>
c00132ae:	83 ec 0c             	sub    esp,0xc
c00132b1:	68 f8 e8 01 c0       	push   0xc001e8f8
c00132b6:	e8 80 d4 ff ff       	call   c001073b <Krnl::panic(char const*)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	31 ed                	xor    ebp,ebp
c00132c0:	eb bb                	jmp    c001327d <Thr::loadDLL(char const*, bool)+0x1df>
c00132c2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00132c8:	89 d8                	mov    eax,ebx
c00132ca:	5b                   	pop    ebx
c00132cb:	5e                   	pop    esi
c00132cc:	5f                   	pop    edi
c00132cd:	5d                   	pop    ebp
c00132ce:	c3                   	ret    

c00132cf <Thr::executeDLL(unsigned long, void*)>:
c00132cf:	56                   	push   esi
c00132d0:	53                   	push   ebx
c00132d1:	52                   	push   edx
c00132d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132da:	85 db                	test   ebx,ebx
c00132dc:	75 10                	jne    c00132ee <Thr::executeDLL(unsigned long, void*)+0x1f>
c00132de:	83 ec 0c             	sub    esp,0xc
c00132e1:	68 14 e9 01 c0       	push   0xc001e914
c00132e6:	e8 50 d4 ff ff       	call   c001073b <Krnl::panic(char const*)>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	50                   	push   eax
c00132ef:	50                   	push   eax
c00132f0:	53                   	push   ebx
c00132f1:	68 3e e9 01 c0       	push   0xc001e93e
c00132f6:	e8 f1 78 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00132fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132ff:	89 d8                	mov    eax,ebx
c0013301:	83 c4 14             	add    esp,0x14
c0013304:	5b                   	pop    ebx
c0013305:	5e                   	pop    esi
c0013306:	ff e0                	jmp    eax

c0013308 <userModeEntryPoint(void*)>:
c0013308:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001330d:	48                   	dec    eax
c001330e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013313:	75 03                	jne    c0013318 <userModeEntryPoint(void*)+0x10>
c0013315:	fb                   	sti    
c0013316:	66 90                	xchg   ax,ax
c0013318:	fb                   	sti    
c0013319:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001331e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013321:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013327:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001332b:	e9 2f cf fe ff       	jmp    c000025f <goToUsermode>

c0013330 <changeTSS>:
c0013330:	83 ec 14             	sub    esp,0x14
c0013333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013338:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001333b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013340:	c1 e2 15             	shl    edx,0x15
c0013343:	29 d0                	sub    eax,edx
c0013345:	50                   	push   eax
c0013346:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001334b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013351:	05 7c 11 00 00       	add    eax,0x117c
c0013356:	50                   	push   eax
c0013357:	e8 90 5f ff ff       	call   c00092ec <TSS::setESP(unsigned long)>
c001335c:	83 c4 1c             	add    esp,0x1c
c001335f:	c3                   	ret    

c0013360 <switchToThread(ThreadControlBlock*)>:
c0013360:	57                   	push   edi
c0013361:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013366:	56                   	push   esi
c0013367:	85 c0                	test   eax,eax
c0013369:	53                   	push   ebx
c001336a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001336e:	0f 85 90 00 00 00    	jne    c0013404 <switchToThread(ThreadControlBlock*)+0xa4>
c0013374:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013377:	80 fa ff             	cmp    dl,0xff
c001337a:	0f 84 80 00 00 00    	je     c0013400 <switchToThread(ThreadControlBlock*)+0xa0>
c0013380:	81 e2 ff 00 00 00    	and    edx,0xff
c0013386:	b8 00 04 00 00       	mov    eax,0x400
c001338b:	29 d0                	sub    eax,edx
c001338d:	d1 f8                	sar    eax,1
c001338f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013392:	66 90                	xchg   ax,ax
c0013394:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013397:	e8 7b 24 00 00       	call   c0015817 <HalQueryPerformanceCounter()>
c001339c:	a3 48 3d 02 c0       	mov    ds:0xc0023d48,eax
c00133a1:	89 15 4c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d4c,edx
c00133a7:	89 c6                	mov    esi,eax
c00133a9:	89 d7                	mov    edi,edx
c00133ab:	2b 35 38 3d 02 c0    	sub    esi,DWORD PTR ds:0xc0023d38
c00133b1:	a3 38 3d 02 c0       	mov    ds:0xc0023d38,eax
c00133b6:	1b 3d 3c 3d 02 c0    	sbb    edi,DWORD PTR ds:0xc0023d3c
c00133bc:	89 35 40 3d 02 c0    	mov    DWORD PTR ds:0xc0023d40,esi
c00133c2:	89 3d 44 3d 02 c0    	mov    DWORD PTR ds:0xc0023d44,edi
c00133c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00133ce:	89 15 3c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d3c,edx
c00133d4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00133d7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00133da:	01 c6                	add    esi,eax
c00133dc:	11 d7                	adc    edi,edx
c00133de:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00133e1:	83 ec 0c             	sub    esp,0xc
c00133e4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00133e7:	53                   	push   ebx
c00133e8:	e8 aa ce fe ff       	call   c0000297 <switchToThreadASM>
c00133ed:	0f 20 c0             	mov    eax,cr0
c00133f0:	83 c8 08             	or     eax,0x8
c00133f3:	0f 22 c0             	mov    cr0,eax
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	5b                   	pop    ebx
c00133fa:	5e                   	pop    esi
c00133fb:	5f                   	pop    edi
c00133fc:	c3                   	ret    
c00133fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013400:	31 c0                	xor    eax,eax
c0013402:	eb 90                	jmp    c0013394 <switchToThread(ThreadControlBlock*)+0x34>
c0013404:	5b                   	pop    ebx
c0013405:	c7 05 00 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x1
c001340f:	5e                   	pop    esi
c0013410:	5f                   	pop    edi
c0013411:	c3                   	ret    
c0013412:	66 90                	xchg   ax,ax

c0013414 <Process::addArgs(char**)>:
c0013414:	57                   	push   edi
c0013415:	56                   	push   esi
c0013416:	53                   	push   ebx
c0013417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001341b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001341f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013429:	85 ff                	test   edi,edi
c001342b:	74 43                	je     c0013470 <Process::addArgs(char**)+0x5c>
c001342d:	8b 07                	mov    eax,DWORD PTR [edi]
c001342f:	85 c0                	test   eax,eax
c0013431:	74 3d                	je     c0013470 <Process::addArgs(char**)+0x5c>
c0013433:	31 db                	xor    ebx,ebx
c0013435:	8d 76 00             	lea    esi,[esi+0x0]
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	50                   	push   eax
c001343c:	e8 1f d1 fe ff       	call   c0000560 <strlen>
c0013441:	40                   	inc    eax
c0013442:	89 04 24             	mov    DWORD PTR [esp],eax
c0013445:	e8 13 4a ff ff       	call   c0007e5d <malloc>
c001344a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013451:	5a                   	pop    edx
c0013452:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013455:	59                   	pop    ecx
c0013456:	43                   	inc    ebx
c0013457:	52                   	push   edx
c0013458:	50                   	push   eax
c0013459:	e8 c2 d1 fe ff       	call   c0000620 <strcpy>
c001345e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001346a:	85 c0                	test   eax,eax
c001346c:	75 ca                	jne    c0013438 <Process::addArgs(char**)+0x24>
c001346e:	66 90                	xchg   ax,ax
c0013470:	5b                   	pop    ebx
c0013471:	5e                   	pop    esi
c0013472:	5f                   	pop    edi
c0013473:	c3                   	ret    

c0013474 <Process::Process(char const*, Process*, char**)>:
c0013474:	56                   	push   esi
c0013475:	53                   	push   ebx
c0013476:	83 ec 14             	sub    esp,0x14
c0013479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001347d:	05 0c 02 00 00       	add    eax,0x20c
c0013482:	bb 07 00 00 00       	mov    ebx,0x7
c0013487:	89 c6                	mov    esi,eax
c0013489:	8d 76 00             	lea    esi,[esi+0x0]
c001348c:	85 db                	test   ebx,ebx
c001348e:	78 14                	js     c00134a4 <Process::Process(char const*, Process*, char**)+0x30>
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	56                   	push   esi
c0013494:	e8 b3 94 00 00       	call   c001c94c <ThreadControlBlock::ThreadControlBlock()>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	83 c6 5f             	add    esi,0x5f
c001349f:	4b                   	dec    ebx
c00134a0:	eb ea                	jmp    c001348c <Process::Process(char const*, Process*, char**)+0x18>
c00134a2:	66 90                	xchg   ax,ax
c00134a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134a8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134b6:	e8 09 d1 ff ff       	call   c00105c4 <Krnl::newProcessEnv(Process*)>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	89 c2                	mov    edx,eax
c00134c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ce:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134d7:	a1 10 f8 01 c0       	mov    eax,ds:0xc001f810
c00134dc:	8d 50 01             	lea    edx,[eax+0x1]
c00134df:	89 15 10 f8 01 c0    	mov    DWORD PTR ds:0xc001f810,edx
c00134e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134e9:	89 02                	mov    DWORD PTR [edx],eax
c00134eb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00134f3:	83 ec 0c             	sub    esp,0xc
c00134f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134fa:	e8 5e 49 ff ff       	call   c0007e5d <malloc>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	89 c3                	mov    ebx,eax
c0013504:	83 ec 08             	sub    esp,0x8
c0013507:	6a 00                	push   0x0
c0013509:	53                   	push   ebx
c001350a:	e8 cd 6f ff ff       	call   c000a4dc <VAS::VAS(bool)>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013516:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001351c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013520:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001352a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001352e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013532:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001353c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013542:	85 c0                	test   eax,eax
c0013544:	74 42                	je     c0013588 <Process::Process(char const*, Process*, char**)+0x114>
c0013546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001354a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013550:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001355a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013564:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001356a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013574:	05 0c 01 00 00       	add    eax,0x10c
c0013579:	83 ec 08             	sub    esp,0x8
c001357c:	52                   	push   edx
c001357d:	50                   	push   eax
c001357e:	e8 9d d0 fe ff       	call   c0000620 <strcpy>
c0013583:	83 c4 10             	add    esp,0x10
c0013586:	eb 64                	jmp    c00135ec <Process::Process(char const*, Process*, char**)+0x178>
c0013588:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013597:	e8 c1 48 ff ff       	call   c0007e5d <malloc>
c001359c:	83 c4 10             	add    esp,0x10
c001359f:	89 c3                	mov    ebx,eax
c00135a1:	83 ec 08             	sub    esp,0x8
c00135a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135a8:	53                   	push   ebx
c00135a9:	e8 e2 5a ff ff       	call   c0009090 <VgaText::VgaText(char const*)>
c00135ae:	83 c4 10             	add    esp,0x10
c00135b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135c5:	83 ec 0c             	sub    esp,0xc
c00135c8:	50                   	push   eax
c00135c9:	e8 62 53 ff ff       	call   c0008930 <addToTerminalCycle(VgaText*)>
c00135ce:	83 c4 10             	add    esp,0x10
c00135d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135d5:	05 0c 01 00 00       	add    eax,0x10c
c00135da:	83 ec 08             	sub    esp,0x8
c00135dd:	68 5d e9 01 c0       	push   0xc001e95d
c00135e2:	50                   	push   eax
c00135e3:	e8 38 d0 fe ff       	call   c0000620 <strcpy>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	90                   	nop
c00135ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135f0:	83 c0 0c             	add    eax,0xc
c00135f3:	83 ec 08             	sub    esp,0x8
c00135f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135fa:	50                   	push   eax
c00135fb:	e8 20 d0 fe ff       	call   c0000620 <strcpy>
c0013600:	83 c4 10             	add    esp,0x10
c0013603:	83 ec 08             	sub    esp,0x8
c0013606:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001360a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001360e:	e8 01 fe ff ff       	call   c0013414 <Process::addArgs(char**)>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	83 ec 08             	sub    esp,0x8
c0013619:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001361d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013621:	e8 89 ed ff ff       	call   c00123af <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001362d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013631:	83 f0 01             	xor    eax,0x1
c0013634:	88 c2                	mov    dl,al
c0013636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001363a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013640:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013644:	25 ff 00 00 00       	and    eax,0xff
c0013649:	83 ec 08             	sub    esp,0x8
c001364c:	50                   	push   eax
c001364d:	68 b4 e9 01 c0       	push   0xc001e9b4
c0013652:	e8 95 75 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	90                   	nop
c001365b:	83 c4 14             	add    esp,0x14
c001365e:	5b                   	pop    ebx
c001365f:	5e                   	pop    esi
c0013660:	c3                   	ret    
c0013661:	90                   	nop
c0013662:	66 90                	xchg   ax,ax

c0013664 <Process::Process(bool, char const*, Process*, char**)>:
c0013664:	56                   	push   esi
c0013665:	53                   	push   ebx
c0013666:	83 ec 24             	sub    esp,0x24
c0013669:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001366d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013675:	05 0c 02 00 00       	add    eax,0x20c
c001367a:	bb 07 00 00 00       	mov    ebx,0x7
c001367f:	89 c6                	mov    esi,eax
c0013681:	8d 76 00             	lea    esi,[esi+0x0]
c0013684:	85 db                	test   ebx,ebx
c0013686:	78 14                	js     c001369c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013688:	83 ec 0c             	sub    esp,0xc
c001368b:	56                   	push   esi
c001368c:	e8 bb 92 00 00       	call   c001c94c <ThreadControlBlock::ThreadControlBlock()>
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	83 c6 5f             	add    esi,0x5f
c0013697:	4b                   	dec    ebx
c0013698:	eb ea                	jmp    c0013684 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001369a:	66 90                	xchg   ax,ax
c001369c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136a0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00136a7:	83 ec 0c             	sub    esp,0xc
c00136aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136ae:	e8 11 cf ff ff       	call   c00105c4 <Krnl::newProcessEnv(Process*)>
c00136b3:	83 c4 10             	add    esp,0x10
c00136b6:	89 c2                	mov    edx,eax
c00136b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136bc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00136c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00136cf:	a1 10 f8 01 c0       	mov    eax,ds:0xc001f810
c00136d4:	8d 50 01             	lea    edx,[eax+0x1]
c00136d7:	89 15 10 f8 01 c0    	mov    DWORD PTR ds:0xc001f810,edx
c00136dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00136e1:	89 02                	mov    DWORD PTR [edx],eax
c00136e3:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00136eb:	83 ec 0c             	sub    esp,0xc
c00136ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00136f2:	e8 66 47 ff ff       	call   c0007e5d <malloc>
c00136f7:	83 c4 10             	add    esp,0x10
c00136fa:	89 c3                	mov    ebx,eax
c00136fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013700:	25 ff 00 00 00       	and    eax,0xff
c0013705:	83 ec 08             	sub    esp,0x8
c0013708:	50                   	push   eax
c0013709:	53                   	push   ebx
c001370a:	e8 cd 6d ff ff       	call   c000a4dc <VAS::VAS(bool)>
c001370f:	83 c4 10             	add    esp,0x10
c0013712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013716:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001371c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013720:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001372a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001372e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013732:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001373c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013742:	85 c0                	test   eax,eax
c0013744:	74 42                	je     c0013788 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0013746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001374a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013750:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013756:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001375a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013760:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013764:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001376a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013774:	05 0c 01 00 00       	add    eax,0x10c
c0013779:	83 ec 08             	sub    esp,0x8
c001377c:	52                   	push   edx
c001377d:	50                   	push   eax
c001377e:	e8 9d ce fe ff       	call   c0000620 <strcpy>
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	eb 64                	jmp    c00137ec <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013788:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013790:	83 ec 0c             	sub    esp,0xc
c0013793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013797:	e8 c1 46 ff ff       	call   c0007e5d <malloc>
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	89 c3                	mov    ebx,eax
c00137a1:	83 ec 08             	sub    esp,0x8
c00137a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137a8:	53                   	push   ebx
c00137a9:	e8 e2 58 ff ff       	call   c0009090 <VgaText::VgaText(char const*)>
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137b5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00137bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00137c5:	83 ec 0c             	sub    esp,0xc
c00137c8:	50                   	push   eax
c00137c9:	e8 62 51 ff ff       	call   c0008930 <addToTerminalCycle(VgaText*)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137d5:	05 0c 01 00 00       	add    eax,0x10c
c00137da:	83 ec 08             	sub    esp,0x8
c00137dd:	68 5d e9 01 c0       	push   0xc001e95d
c00137e2:	50                   	push   eax
c00137e3:	e8 38 ce fe ff       	call   c0000620 <strcpy>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	90                   	nop
c00137ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137f0:	83 c0 0c             	add    eax,0xc
c00137f3:	83 ec 08             	sub    esp,0x8
c00137f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137fa:	50                   	push   eax
c00137fb:	e8 20 ce fe ff       	call   c0000620 <strcpy>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	83 ec 08             	sub    esp,0x8
c0013806:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001380a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001380e:	e8 01 fc ff ff       	call   c0013414 <Process::addArgs(char**)>
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	90                   	nop
c0013817:	83 c4 24             	add    esp,0x24
c001381a:	5b                   	pop    ebx
c001381b:	5e                   	pop    esi
c001381c:	c3                   	ret    
c001381d:	8d 76 00             	lea    esi,[esi+0x0]

c0013820 <taskStartupFunction>:
c0013820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013825:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013828:	c3                   	ret    
c0013829:	90                   	nop
c001382a:	66 90                	xchg   ax,ax

c001382c <Semaphore::Semaphore(int)>:
c001382c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013830:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013834:	89 10                	mov    DWORD PTR [eax],edx
c0013836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001383a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013845:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001384c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013850:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013857:	90                   	nop
c0013858:	c3                   	ret    
c0013859:	90                   	nop
c001385a:	66 90                	xchg   ax,ax

c001385c <Mutex::Mutex()>:
c001385c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013860:	6a 01                	push   0x1
c0013862:	50                   	push   eax
c0013863:	e8 c4 ff ff ff       	call   c001382c <Semaphore::Semaphore(int)>
c0013868:	83 c4 08             	add    esp,0x8
c001386b:	90                   	nop
c001386c:	c3                   	ret    
c001386d:	90                   	nop
c001386e:	66 90                	xchg   ax,ax

c0013870 <Process::createThread(void (*)(void*), void*, int)>:
c0013870:	57                   	push   edi
c0013871:	31 c9                	xor    ecx,ecx
c0013873:	56                   	push   esi
c0013874:	53                   	push   ebx
c0013875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013879:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013880:	89 f2                	mov    edx,esi
c0013882:	66 90                	xchg   ax,ax
c0013884:	31 c0                	xor    eax,eax
c0013886:	66 89 d0             	mov    ax,dx
c0013889:	83 e2 01             	and    edx,0x1
c001388c:	74 12                	je     c00138a0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001388e:	d1 f8                	sar    eax,1
c0013890:	41                   	inc    ecx
c0013891:	89 c2                	mov    edx,eax
c0013893:	83 f9 10             	cmp    ecx,0x10
c0013896:	75 ec                	jne    c0013884 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013898:	31 db                	xor    ebx,ebx
c001389a:	89 d8                	mov    eax,ebx
c001389c:	5b                   	pop    ebx
c001389d:	5e                   	pop    esi
c001389e:	5f                   	pop    edi
c001389f:	c3                   	ret    
c00138a0:	b8 01 00 00 00       	mov    eax,0x1
c00138a5:	d3 e0                	shl    eax,cl
c00138a7:	09 c6                	or     esi,eax
c00138a9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138ac:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00138b3:	01 c0                	add    eax,eax
c00138b5:	01 c8                	add    eax,ecx
c00138b7:	8d 04 80             	lea    eax,[eax+eax*4]
c00138ba:	01 d8                	add    eax,ebx
c00138bc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00138c3:	75 0b                	jne    c00138d0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00138c5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00138cf:	90                   	nop
c00138d0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00138d6:	83 ec 08             	sub    esp,0x8
c00138d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00138dc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138df:	01 c0                	add    eax,eax
c00138e1:	01 c8                	add    eax,ecx
c00138e3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00138e6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00138e9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00138ef:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00138f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00138f9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00138ff:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013905:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001390c:	89 ca                	mov    edx,ecx
c001390e:	f7 da                	neg    edx
c0013910:	c1 e2 15             	shl    edx,0x15
c0013913:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013919:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001391f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013923:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001392d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013933:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013937:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001393d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013947:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013951:	53                   	push   ebx
c0013952:	68 24 3d 02 c0       	push   0xc0023d24
c0013957:	e8 90 8d 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	89 d8                	mov    eax,ebx
c0013961:	5b                   	pop    ebx
c0013962:	5e                   	pop    esi
c0013963:	5f                   	pop    edi
c0013964:	c3                   	ret    
c0013965:	90                   	nop
c0013966:	66 90                	xchg   ax,ax

c0013968 <Process::createUserThread()>:
c0013968:	83 ec 0c             	sub    esp,0xc
c001396b:	68 80 00 00 00       	push   0x80
c0013970:	6a 00                	push   0x0
c0013972:	68 08 33 01 c0       	push   0xc0013308
c0013977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001397b:	50                   	push   eax
c001397c:	e8 ef fe ff ff       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c0013981:	83 c4 1c             	add    esp,0x1c
c0013984:	c3                   	ret    
c0013985:	8d 76 00             	lea    esi,[esi+0x0]

c0013988 <setupMultitasking(void (*)())>:
c0013988:	56                   	push   esi
c0013989:	53                   	push   ebx
c001398a:	53                   	push   ebx
c001398b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001398f:	eb 13                	jmp    c00139a4 <setupMultitasking(void (*)())+0x1c>
c0013991:	8d 76 00             	lea    esi,[esi+0x0]
c0013994:	83 ec 0c             	sub    esp,0xc
c0013997:	68 24 3d 02 c0       	push   0xc0023d24
c001399c:	e8 93 8c 00 00       	call   c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	68 24 3d 02 c0       	push   0xc0023d24
c00139ac:	e8 5f 8c 00 00       	call   c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	84 c0                	test   al,al
c00139b6:	74 dc                	je     c0013994 <setupMultitasking(void (*)())+0xc>
c00139b8:	83 ec 0c             	sub    esp,0xc
c00139bb:	68 1f 07 00 00       	push   0x71f
c00139c0:	e8 98 44 ff ff       	call   c0007e5d <malloc>
c00139c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00139cc:	89 c3                	mov    ebx,eax
c00139ce:	6a 00                	push   0x0
c00139d0:	68 61 e9 01 c0       	push   0xc001e961
c00139d5:	6a 01                	push   0x1
c00139d7:	50                   	push   eax
c00139d8:	e8 87 fc ff ff       	call   c0013664 <Process::Process(bool, char const*, Process*, char**)>
c00139dd:	83 c4 14             	add    esp,0x14
c00139e0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00139e6:	89 1d 30 3d 02 c0    	mov    DWORD PTR ds:0xc0023d30,ebx
c00139ec:	50                   	push   eax
c00139ed:	e8 9b 51 ff ff       	call   c0008b8d <setActiveTerminal(VgaText*)>
c00139f2:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00139fa:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013a04:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013a0a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a0d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013a17:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013a1d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013a23:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013a2d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013a37:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013a41:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013a47:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013a4d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a57:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a5d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a67:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a6d:	5a                   	pop    edx
c0013a6e:	59                   	pop    ecx
c0013a6f:	68 5d e9 01 c0       	push   0xc001e95d
c0013a74:	50                   	push   eax
c0013a75:	e8 a6 cb fe ff       	call   c0000620 <strcpy>
c0013a7a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a81:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a85:	83 c4 14             	add    esp,0x14
c0013a88:	5b                   	pop    ebx
c0013a89:	5e                   	pop    esi
c0013a8a:	e9 fa c7 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a8f:	90                   	nop

c0013a90 <schedule()>:
c0013a90:	8b 15 04 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d04
c0013a96:	85 d2                	test   edx,edx
c0013a98:	74 0e                	je     c0013aa8 <schedule()+0x18>
c0013a9a:	c7 05 00 3d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x1
c0013aa4:	c3                   	ret    
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	53                   	push   ebx
c0013aa9:	83 ec 14             	sub    esp,0x14
c0013aac:	68 24 3d 02 c0       	push   0xc0023d24
c0013ab1:	e8 5a 8b 00 00       	call   c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	84 c0                	test   al,al
c0013abb:	75 3b                	jne    c0013af8 <schedule()+0x68>
c0013abd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ac2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013ac5:	4a                   	dec    edx
c0013ac6:	74 38                	je     c0013b00 <schedule()+0x70>
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	68 24 3d 02 c0       	push   0xc0023d24
c0013ad0:	e8 57 8b 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ad5:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0013adc:	89 c3                	mov    ebx,eax
c0013ade:	e8 51 8b 00 00       	call   c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ae3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013aea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aed:	e8 6e f8 ff ff       	call   c0013360 <switchToThread(ThreadControlBlock*)>
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	8d 76 00             	lea    esi,[esi+0x0]
c0013af8:	83 c4 08             	add    esp,0x8
c0013afb:	5b                   	pop    ebx
c0013afc:	c3                   	ret    
c0013afd:	8d 76 00             	lea    esi,[esi+0x0]
c0013b00:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013b07:	83 ec 08             	sub    esp,0x8
c0013b0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b0f:	50                   	push   eax
c0013b10:	68 24 3d 02 c0       	push   0xc0023d24
c0013b15:	e8 d2 8b 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b1a:	83 c4 10             	add    esp,0x10
c0013b1d:	eb a9                	jmp    c0013ac8 <schedule()+0x38>
c0013b1f:	90                   	nop

c0013b20 <Semaphore::tryAcquire()>:
c0013b20:	53                   	push   ebx
c0013b21:	83 ec 08             	sub    esp,0x8
c0013b24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b28:	fa                   	cli    
c0013b29:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013b2e:	8d 50 01             	lea    edx,[eax+0x1]
c0013b31:	89 15 08 3d 02 c0    	mov    DWORD PTR ds:0xc0023d08,edx
c0013b37:	8b 15 04 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d04
c0013b3d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013b40:	89 1d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ebx
c0013b46:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013b49:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013b4b:	7c 33                	jl     c0013b80 <Semaphore::tryAcquire()+0x60>
c0013b4d:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c0013b53:	85 d2                	test   edx,edx
c0013b55:	75 0d                	jne    c0013b64 <Semaphore::tryAcquire()+0x44>
c0013b57:	8b 15 00 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d00
c0013b5d:	85 d2                	test   edx,edx
c0013b5f:	75 6b                	jne    c0013bcc <Semaphore::tryAcquire()+0xac>
c0013b61:	8d 76 00             	lea    esi,[esi+0x0]
c0013b64:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013b69:	85 c0                	test   eax,eax
c0013b6b:	74 0b                	je     c0013b78 <Semaphore::tryAcquire()+0x58>
c0013b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b70:	31 c0                	xor    eax,eax
c0013b72:	83 c4 08             	add    esp,0x8
c0013b75:	5b                   	pop    ebx
c0013b76:	c3                   	ret    
c0013b77:	90                   	nop
c0013b78:	fb                   	sti    
c0013b79:	83 c4 08             	add    esp,0x8
c0013b7c:	5b                   	pop    ebx
c0013b7d:	c3                   	ret    
c0013b7e:	66 90                	xchg   ax,ax
c0013b80:	43                   	inc    ebx
c0013b81:	89 15 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,edx
c0013b87:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b8a:	85 d2                	test   edx,edx
c0013b8c:	75 22                	jne    c0013bb0 <Semaphore::tryAcquire()+0x90>
c0013b8e:	8b 0d 00 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d00
c0013b94:	85 c9                	test   ecx,ecx
c0013b96:	74 18                	je     c0013bb0 <Semaphore::tryAcquire()+0x90>
c0013b98:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013ba2:	e8 e9 fe ff ff       	call   c0013a90 <schedule()>
c0013ba7:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013bac:	48                   	dec    eax
c0013bad:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb0:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013bb5:	85 c0                	test   eax,eax
c0013bb7:	75 0b                	jne    c0013bc4 <Semaphore::tryAcquire()+0xa4>
c0013bb9:	fb                   	sti    
c0013bba:	b0 01                	mov    al,0x1
c0013bbc:	83 c4 08             	add    esp,0x8
c0013bbf:	5b                   	pop    ebx
c0013bc0:	c3                   	ret    
c0013bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc4:	b0 01                	mov    al,0x1
c0013bc6:	83 c4 08             	add    esp,0x8
c0013bc9:	5b                   	pop    ebx
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop
c0013bcc:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013bd6:	e8 b5 fe ff ff       	call   c0013a90 <schedule()>
c0013bdb:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013be0:	48                   	dec    eax
c0013be1:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013be6:	85 c0                	test   eax,eax
c0013be8:	75 86                	jne    c0013b70 <Semaphore::tryAcquire()+0x50>
c0013bea:	eb 8c                	jmp    c0013b78 <Semaphore::tryAcquire()+0x58>

c0013bec <Semaphore::assertLocked(char const*)>:
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bf3:	fa                   	cli    
c0013bf4:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013bfa:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013bff:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c02:	89 0d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ecx
c0013c08:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013c0a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013c0d:	7c 29                	jl     c0013c38 <Semaphore::assertLocked(char const*)+0x4c>
c0013c0f:	90                   	nop
c0013c10:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0013c15:	85 c0                	test   eax,eax
c0013c17:	75 0b                	jne    c0013c24 <Semaphore::assertLocked(char const*)+0x38>
c0013c19:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0013c1e:	85 c0                	test   eax,eax
c0013c20:	75 2e                	jne    c0013c50 <Semaphore::assertLocked(char const*)+0x64>
c0013c22:	66 90                	xchg   ax,ax
c0013c24:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013c29:	48                   	dec    eax
c0013c2a:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013c2f:	75 03                	jne    c0013c34 <Semaphore::assertLocked(char const*)+0x48>
c0013c31:	fb                   	sti    
c0013c32:	66 90                	xchg   ax,ax
c0013c34:	83 c4 0c             	add    esp,0xc
c0013c37:	c3                   	ret    
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c3f:	52                   	push   edx
c0013c40:	e8 f6 ca ff ff       	call   c001073b <Krnl::panic(char const*)>
c0013c45:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	48                   	dec    eax
c0013c4e:	eb c0                	jmp    c0013c10 <Semaphore::assertLocked(char const*)+0x24>
c0013c50:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013c5a:	e8 31 fe ff ff       	call   c0013a90 <schedule()>
c0013c5f:	eb c3                	jmp    c0013c24 <Semaphore::assertLocked(char const*)+0x38>
c0013c61:	8d 76 00             	lea    esi,[esi+0x0]

c0013c64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c70:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c73:	e8 18 fe ff ff       	call   c0013a90 <schedule()>
c0013c78:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013c7d:	48                   	dec    eax
c0013c7e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013c83:	75 03                	jne    c0013c88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c85:	fb                   	sti    
c0013c86:	66 90                	xchg   ax,ax
c0013c88:	83 c4 0c             	add    esp,0xc
c0013c8b:	c3                   	ret    

c0013c8c <blockTask(TaskState)>:
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	fa                   	cli    
c0013c90:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013ca2:	e8 e9 fd ff ff       	call   c0013a90 <schedule()>
c0013ca7:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013cac:	48                   	dec    eax
c0013cad:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013cb2:	75 04                	jne    c0013cb8 <blockTask(TaskState)+0x2c>
c0013cb4:	fb                   	sti    
c0013cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cb8:	83 c4 0c             	add    esp,0xc
c0013cbb:	c3                   	ret    

c0013cbc <waitTask(int, int*, int)>:
c0013cbc:	83 ec 18             	sub    esp,0x18
c0013cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cc8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013ccb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013cd7:	6a 07                	push   0x7
c0013cd9:	e8 ae ff ff ff       	call   c0013c8c <blockTask(TaskState)>
c0013cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce3:	83 c4 10             	add    esp,0x10
c0013ce6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013ce9:	85 d2                	test   edx,edx
c0013ceb:	74 0b                	je     c0013cf8 <waitTask(int, int*, int)+0x3c>
c0013ced:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013cf0:	89 02                	mov    DWORD PTR [edx],eax
c0013cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cf7:	90                   	nop
c0013cf8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013cfb:	83 c4 0c             	add    esp,0xc
c0013cfe:	c3                   	ret    
c0013cff:	90                   	nop

c0013d00 <milliTenthSleepUntil(unsigned int)>:
c0013d00:	83 ec 0c             	sub    esp,0xc
c0013d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d07:	39 05 0c 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e0c,eax
c0013d0d:	76 05                	jbe    c0013d14 <milliTenthSleepUntil(unsigned int)+0x14>
c0013d0f:	90                   	nop
c0013d10:	83 c4 0c             	add    esp,0xc
c0013d13:	c3                   	ret    
c0013d14:	fa                   	cli    
c0013d15:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013d1b:	83 ec 08             	sub    esp,0x8
c0013d1e:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c0013d24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d2a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013d2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d33:	52                   	push   edx
c0013d34:	68 18 3d 02 c0       	push   0xc0023d18
c0013d39:	e8 ae 89 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d3e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d45:	e8 42 ff ff ff       	call   c0013c8c <blockTask(TaskState)>
c0013d4a:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013d4f:	83 c4 10             	add    esp,0x10
c0013d52:	48                   	dec    eax
c0013d53:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0013d58:	85 c0                	test   eax,eax
c0013d5a:	75 0c                	jne    c0013d68 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d5c:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0013d61:	85 c0                	test   eax,eax
c0013d63:	75 17                	jne    c0013d7c <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d65:	8d 76 00             	lea    esi,[esi+0x0]
c0013d68:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013d6d:	48                   	dec    eax
c0013d6e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013d73:	75 9b                	jne    c0013d10 <milliTenthSleepUntil(unsigned int)+0x10>
c0013d75:	fb                   	sti    
c0013d76:	83 c4 0c             	add    esp,0xc
c0013d79:	c3                   	ret    
c0013d7a:	66 90                	xchg   ax,ax
c0013d7c:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013d86:	e8 05 fd ff ff       	call   c0013a90 <schedule()>
c0013d8b:	eb db                	jmp    c0013d68 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d8d:	8d 76 00             	lea    esi,[esi+0x0]

c0013d90 <milliTenthSleep(unsigned int)>:
c0013d90:	a1 0c 2e 02 c0       	mov    eax,ds:0xc0022e0c
c0013d95:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d99:	e9 62 ff ff ff       	jmp    c0013d00 <milliTenthSleepUntil(unsigned int)>
c0013d9e:	66 90                	xchg   ax,ax

c0013da0 <sleep(unsigned int)>:
c0013da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013da4:	8d 04 80             	lea    eax,[eax+eax*4]
c0013da7:	8d 04 80             	lea    eax,[eax+eax*4]
c0013daa:	8d 04 80             	lea    eax,[eax+eax*4]
c0013dad:	8d 04 80             	lea    eax,[eax+eax*4]
c0013db0:	c1 e0 04             	shl    eax,0x4
c0013db3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013db7:	eb d7                	jmp    c0013d90 <milliTenthSleep(unsigned int)>
c0013db9:	90                   	nop
c0013dba:	66 90                	xchg   ax,ax

c0013dbc <Semaphore::acquire()>:
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dc3:	fa                   	cli    
c0013dc4:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013dc9:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013dcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013dd2:	89 0d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ecx
c0013dd8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013ddb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013ddd:	7d 2d                	jge    c0013e0c <Semaphore::acquire()+0x50>
c0013ddf:	41                   	inc    ecx
c0013de0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013de3:	90                   	nop
c0013de4:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0013de9:	85 c0                	test   eax,eax
c0013deb:	75 0b                	jne    c0013df8 <Semaphore::acquire()+0x3c>
c0013ded:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0013df2:	85 c0                	test   eax,eax
c0013df4:	75 62                	jne    c0013e58 <Semaphore::acquire()+0x9c>
c0013df6:	66 90                	xchg   ax,ax
c0013df8:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013dfd:	48                   	dec    eax
c0013dfe:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013e03:	75 03                	jne    c0013e08 <Semaphore::acquire()+0x4c>
c0013e05:	fb                   	sti    
c0013e06:	66 90                	xchg   ax,ax
c0013e08:	83 c4 0c             	add    esp,0xc
c0013e0b:	c3                   	ret    
c0013e0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013e18:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013e1b:	85 c9                	test   ecx,ecx
c0013e1d:	74 4d                	je     c0013e6c <Semaphore::acquire()+0xb0>
c0013e1f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013e22:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013e28:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013e2b:	90                   	nop
c0013e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e31:	83 ec 0c             	sub    esp,0xc
c0013e34:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013e37:	68 dc e9 01 c0       	push   0xc001e9dc
c0013e3c:	e8 ab 6d ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013e41:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013e48:	e8 3f fe ff ff       	call   c0013c8c <blockTask(TaskState)>
c0013e4d:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	48                   	dec    eax
c0013e56:	eb 8c                	jmp    c0013de4 <Semaphore::acquire()+0x28>
c0013e58:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0013e62:	e8 29 fc ff ff       	call   c0013a90 <schedule()>
c0013e67:	eb 8f                	jmp    c0013df8 <Semaphore::acquire()+0x3c>
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e74:	eb b6                	jmp    c0013e2c <Semaphore::acquire()+0x70>
c0013e76:	66 90                	xchg   ax,ax

c0013e78 <taskReturned>:
c0013e78:	83 ec 18             	sub    esp,0x18
c0013e7b:	68 fc e9 01 c0       	push   0xc001e9fc
c0013e80:	e8 b6 c8 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 ec 0c             	sub    esp,0xc
c0013e8b:	6a 02                	push   0x2
c0013e8d:	e8 fa fd ff ff       	call   c0013c8c <blockTask(TaskState)>
c0013e92:	fa                   	cli    
c0013e93:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013e99:	e8 f2 fb ff ff       	call   c0013a90 <schedule()>
c0013e9e:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	48                   	dec    eax
c0013ea7:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013eac:	85 c0                	test   eax,eax
c0013eae:	75 d8                	jne    c0013e88 <taskReturned+0x10>
c0013eb0:	fb                   	sti    
c0013eb1:	eb d5                	jmp    c0013e88 <taskReturned+0x10>
c0013eb3:	90                   	nop

c0013eb4 <Thr::processFromPID(int)>:
c0013eb4:	57                   	push   edi
c0013eb5:	56                   	push   esi
c0013eb6:	53                   	push   ebx
c0013eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ebb:	fa                   	cli    
c0013ebc:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	68 24 3d 02 c0       	push   0xc0023d24
c0013eca:	e8 5d 87 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	89 c7                	mov    edi,eax
c0013ed4:	eb 16                	jmp    c0013eec <Thr::processFromPID(int)+0x38>
c0013ed6:	66 90                	xchg   ax,ax
c0013ed8:	83 ec 0c             	sub    esp,0xc
c0013edb:	68 24 3d 02 c0       	push   0xc0023d24
c0013ee0:	e8 47 87 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ee5:	83 c4 10             	add    esp,0x10
c0013ee8:	39 f8                	cmp    eax,edi
c0013eea:	74 4c                	je     c0013f38 <Thr::processFromPID(int)+0x84>
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	68 24 3d 02 c0       	push   0xc0023d24
c0013ef4:	e8 33 87 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ef9:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0013f00:	89 c3                	mov    ebx,eax
c0013f02:	e8 2d 87 00 00       	call   c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f07:	58                   	pop    eax
c0013f08:	5a                   	pop    edx
c0013f09:	53                   	push   ebx
c0013f0a:	68 24 3d 02 c0       	push   0xc0023d24
c0013f0f:	e8 d8 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	39 30                	cmp    DWORD PTR [eax],esi
c0013f1c:	75 ba                	jne    c0013ed8 <Thr::processFromPID(int)+0x24>
c0013f1e:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013f23:	48                   	dec    eax
c0013f24:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013f29:	74 09                	je     c0013f34 <Thr::processFromPID(int)+0x80>
c0013f2b:	90                   	nop
c0013f2c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f2f:	5b                   	pop    ebx
c0013f30:	5e                   	pop    esi
c0013f31:	5f                   	pop    edi
c0013f32:	c3                   	ret    
c0013f33:	90                   	nop
c0013f34:	fb                   	sti    
c0013f35:	eb f5                	jmp    c0013f2c <Thr::processFromPID(int)+0x78>
c0013f37:	90                   	nop
c0013f38:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013f3d:	48                   	dec    eax
c0013f3e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013f43:	75 07                	jne    c0013f4c <Thr::processFromPID(int)+0x98>
c0013f45:	fb                   	sti    
c0013f46:	5b                   	pop    ebx
c0013f47:	5e                   	pop    esi
c0013f48:	5f                   	pop    edi
c0013f49:	c3                   	ret    
c0013f4a:	66 90                	xchg   ax,ax
c0013f4c:	5b                   	pop    ebx
c0013f4d:	31 c0                	xor    eax,eax
c0013f4f:	5e                   	pop    esi
c0013f50:	5f                   	pop    edi
c0013f51:	c3                   	ret    
c0013f52:	66 90                	xchg   ax,ax

c0013f54 <unblockTask(ThreadControlBlock*)>:
c0013f54:	53                   	push   ebx
c0013f55:	83 ec 08             	sub    esp,0x8
c0013f58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f5c:	fa                   	cli    
c0013f5d:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0013f63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f66:	85 c0                	test   eax,eax
c0013f68:	74 66                	je     c0013fd0 <unblockTask(ThreadControlBlock*)+0x7c>
c0013f6a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f6d:	48                   	dec    eax
c0013f6e:	74 38                	je     c0013fa8 <unblockTask(ThreadControlBlock*)+0x54>
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	68 24 3d 02 c0       	push   0xc0023d24
c0013f78:	e8 af 86 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	85 c0                	test   eax,eax
c0013f82:	75 1c                	jne    c0013fa0 <unblockTask(ThreadControlBlock*)+0x4c>
c0013f84:	eb 5e                	jmp    c0013fe4 <unblockTask(ThreadControlBlock*)+0x90>
c0013f86:	66 90                	xchg   ax,ax
c0013f88:	83 ec 08             	sub    esp,0x8
c0013f8b:	50                   	push   eax
c0013f8c:	68 24 3d 02 c0       	push   0xc0023d24
c0013f91:	e8 46 8a 00 00       	call   c001c9dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	85 c0                	test   eax,eax
c0013f9b:	74 47                	je     c0013fe4 <unblockTask(ThreadControlBlock*)+0x90>
c0013f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa0:	39 c3                	cmp    ebx,eax
c0013fa2:	75 e4                	jne    c0013f88 <unblockTask(ThreadControlBlock*)+0x34>
c0013fa4:	eb 12                	jmp    c0013fb8 <unblockTask(ThreadControlBlock*)+0x64>
c0013fa6:	66 90                	xchg   ax,ax
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	68 7f e9 01 c0       	push   0xc001e97f
c0013fb0:	e8 37 6c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0013fbd:	48                   	dec    eax
c0013fbe:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0013fc3:	75 03                	jne    c0013fc8 <unblockTask(ThreadControlBlock*)+0x74>
c0013fc5:	fb                   	sti    
c0013fc6:	66 90                	xchg   ax,ax
c0013fc8:	83 c4 08             	add    esp,0x8
c0013fcb:	5b                   	pop    ebx
c0013fcc:	c3                   	ret    
c0013fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	68 68 e9 01 c0       	push   0xc001e968
c0013fd8:	e8 0f 6c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0013fdd:	83 c4 10             	add    esp,0x10
c0013fe0:	eb d6                	jmp    c0013fb8 <unblockTask(ThreadControlBlock*)+0x64>
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	83 ec 08             	sub    esp,0x8
c0013fe7:	53                   	push   ebx
c0013fe8:	68 24 3d 02 c0       	push   0xc0023d24
c0013fed:	e8 fa 86 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	eb c1                	jmp    c0013fb8 <unblockTask(ThreadControlBlock*)+0x64>
c0013ff7:	90                   	nop

c0013ff8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013ff8:	55                   	push   ebp
c0013ff9:	57                   	push   edi
c0013ffa:	56                   	push   esi
c0013ffb:	53                   	push   ebx
c0013ffc:	83 ec 1c             	sub    esp,0x1c
c0013fff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014003:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014006:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001400c:	85 ed                	test   ebp,ebp
c001400e:	7e 24                	jle    c0014034 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014010:	31 f6                	xor    esi,esi
c0014012:	66 90                	xchg   ax,ax
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001401e:	46                   	inc    esi
c001401f:	57                   	push   edi
c0014020:	e8 48 3e ff ff       	call   c0007e6d <free>
c0014025:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014028:	83 c4 10             	add    esp,0x10
c001402b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014031:	7f e1                	jg     c0014014 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014033:	90                   	nop
c0014034:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001403e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014043:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014046:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014049:	d3 c0                	rol    eax,cl
c001404b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014052:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014055:	89 f7                	mov    edi,esi
c0014057:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001405f:	0f 85 77 01 00 00    	jne    c00141dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014065:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001406b:	85 ed                	test   ebp,ebp
c001406d:	74 1d                	je     c001408c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001406f:	83 ec 0c             	sub    esp,0xc
c0014072:	55                   	push   ebp
c0014073:	e8 68 c4 ff ff       	call   c00104e0 <EnvVarContainer::~EnvVarContainer()>
c0014078:	59                   	pop    ecx
c0014079:	5e                   	pop    esi
c001407a:	6a 0c                	push   0xc
c001407c:	55                   	push   ebp
c001407d:	e8 74 6a ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0014082:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014085:	83 c4 10             	add    esp,0x10
c0014088:	89 f7                	mov    edi,esi
c001408a:	66 90                	xchg   ax,ax
c001408c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014092:	85 c0                	test   eax,eax
c0014094:	0f 84 b6 00 00 00    	je     c0014150 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001409a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001409d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00140a1:	31 c9                	xor    ecx,ecx
c00140a3:	eb 17                	jmp    c00140bc <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00140a5:	8d 76 00             	lea    esi,[esi+0x0]
c00140a8:	41                   	inc    ecx
c00140a9:	83 f9 10             	cmp    ecx,0x10
c00140ac:	0f 84 9e 00 00 00    	je     c0014150 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140b2:	66 90                	xchg   ax,ax
c00140b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140ba:	66 90                	xchg   ax,ax
c00140bc:	31 d2                	xor    edx,edx
c00140be:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00140c5:	d3 fa                	sar    edx,cl
c00140c7:	83 e2 01             	and    edx,0x1
c00140ca:	74 dc                	je     c00140a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140cc:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00140cf:	01 d2                	add    edx,edx
c00140d1:	01 ca                	add    edx,ecx
c00140d3:	8d 14 92             	lea    edx,[edx+edx*4]
c00140d6:	01 d0                	add    eax,edx
c00140d8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00140de:	83 fd 07             	cmp    ebp,0x7
c00140e1:	75 c5                	jne    c00140a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140e3:	05 40 02 00 00       	add    eax,0x240
c00140e8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00140eb:	83 fd ff             	cmp    ebp,0xffffffff
c00140ee:	0f 8c f0 00 00 00    	jl     c00141e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00140f4:	0f 84 ae 01 00 00    	je     c00142a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00140fa:	85 ed                	test   ebp,ebp
c00140fc:	0f 84 92 01 00 00    	je     c0014294 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014102:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014104:	75 a2                	jne    c00140a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014106:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001410c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014110:	01 d0                	add    eax,edx
c0014112:	66 90                	xchg   ax,ax
c0014114:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014121:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014124:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001412a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014131:	50                   	push   eax
c0014132:	e8 1d fe ff ff       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c0014137:	83 c4 10             	add    esp,0x10
c001413a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001413d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014141:	89 f7                	mov    edi,esi
c0014143:	41                   	inc    ecx
c0014144:	83 f9 10             	cmp    ecx,0x10
c0014147:	0f 85 67 ff ff ff    	jne    c00140b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001414d:	8d 76 00             	lea    esi,[esi+0x0]
c0014150:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014156:	85 c0                	test   eax,eax
c0014158:	74 62                	je     c00141bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001415a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014160:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014166:	74 54                	je     c00141bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	68 24 3d 02 c0       	push   0xc0023d24
c0014170:	e8 b7 84 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014175:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c001417c:	89 c7                	mov    edi,eax
c001417e:	e8 8d 84 00 00       	call   c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014183:	83 c4 10             	add    esp,0x10
c0014186:	84 c0                	test   al,al
c0014188:	0f 84 ce 00 00 00    	je     c001425c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001418e:	66 90                	xchg   ax,ax
c0014190:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014193:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014199:	85 d2                	test   edx,edx
c001419b:	74 0f                	je     c00141ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c001419d:	83 ec 0c             	sub    esp,0xc
c00141a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00141a2:	52                   	push   edx
c00141a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00141a9:	83 c4 10             	add    esp,0x10
c00141ac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00141b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00141b9:	8d 76 00             	lea    esi,[esi+0x0]
c00141bc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00141c2:	85 db                	test   ebx,ebx
c00141c4:	74 16                	je     c00141dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	53                   	push   ebx
c00141ca:	e8 fb 5c ff ff       	call   c0009eca <VAS::~VAS()>
c00141cf:	58                   	pop    eax
c00141d0:	5a                   	pop    edx
c00141d1:	6a 14                	push   0x14
c00141d3:	53                   	push   ebx
c00141d4:	e8 1d 69 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	83 c4 1c             	add    esp,0x1c
c00141df:	5b                   	pop    ebx
c00141e0:	5e                   	pop    esi
c00141e1:	5f                   	pop    edi
c00141e2:	5d                   	pop    ebp
c00141e3:	c3                   	ret    
c00141e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00141e8:	83 ec 0c             	sub    esp,0xc
c00141eb:	68 30 ea 01 c0       	push   0xc001ea30
c00141f0:	e8 46 c5 ff ff       	call   c001073b <Krnl::panic(char const*)>
c00141f5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00141f8:	83 c4 10             	add    esp,0x10
c00141fb:	89 f7                	mov    edi,esi
c00141fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014201:	e9 a2 fe ff ff       	jmp    c00140a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014206:	66 90                	xchg   ax,ax
c0014208:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001420e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014214:	75 1e                	jne    c0014234 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	68 98 ea 01 c0       	push   0xc001ea98
c001421e:	e8 c9 69 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0014223:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001422a:	e8 5d fa ff ff       	call   c0013c8c <blockTask(TaskState)>
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	66 90                	xchg   ax,ax
c0014234:	83 ec 08             	sub    esp,0x8
c0014237:	56                   	push   esi
c0014238:	68 24 3d 02 c0       	push   0xc0023d24
c001423d:	e8 aa 84 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014242:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0014249:	e8 de 83 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001424e:	83 c4 10             	add    esp,0x10
c0014251:	39 f8                	cmp    eax,edi
c0014253:	0f 84 37 ff ff ff    	je     c0014190 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014259:	8d 76 00             	lea    esi,[esi+0x0]
c001425c:	83 ec 0c             	sub    esp,0xc
c001425f:	68 24 3d 02 c0       	push   0xc0023d24
c0014264:	e8 c3 83 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014269:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0014270:	89 c6                	mov    esi,eax
c0014272:	e8 bd 83 00 00       	call   c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	39 f3                	cmp    ebx,esi
c001427c:	74 b6                	je     c0014234 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001427e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014281:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014284:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001428a:	75 a8                	jne    c0014234 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001428c:	e9 77 ff ff ff       	jmp    c0014208 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014291:	8d 76 00             	lea    esi,[esi+0x0]
c0014294:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	68 64 ea 01 c0       	push   0xc001ea64
c00142a0:	e9 4b ff ff ff       	jmp    c00141f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00142a5:	8d 76 00             	lea    esi,[esi+0x0]
c00142a8:	8b 36                	mov    esi,DWORD PTR [esi]
c00142aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142ae:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00142b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142b4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00142ba:	01 d7                	add    edi,edx
c00142bc:	89 f8                	mov    eax,edi
c00142be:	e9 51 fe ff ff       	jmp    c0014114 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00142c3:	90                   	nop

c00142c4 <cleanerTaskFunction(void*)>:
c00142c4:	53                   	push   ebx
c00142c5:	83 ec 08             	sub    esp,0x8
c00142c8:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00142cd:	48                   	dec    eax
c00142ce:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00142d3:	75 03                	jne    c00142d8 <cleanerTaskFunction(void*)+0x14>
c00142d5:	fb                   	sti    
c00142d6:	66 90                	xchg   ax,ax
c00142d8:	fa                   	cli    
c00142d9:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00142de:	80 3d ec 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023cec,0x0
c00142e5:	8d 50 01             	lea    edx,[eax+0x1]
c00142e8:	89 15 08 3d 02 c0    	mov    DWORD PTR ds:0xc0023d08,edx
c00142ee:	0f 84 ac 00 00 00    	je     c00143a0 <cleanerTaskFunction(void*)+0xdc>
c00142f4:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00142f9:	85 c0                	test   eax,eax
c00142fb:	75 03                	jne    c0014300 <cleanerTaskFunction(void*)+0x3c>
c00142fd:	fb                   	sti    
c00142fe:	66 90                	xchg   ax,ax
c0014300:	c6 05 ec 3c 02 c0 00 	mov    BYTE PTR ds:0xc0023cec,0x0
c0014307:	fa                   	cli    
c0014308:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001430e:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c0014314:	fa                   	cli    
c0014315:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001431b:	eb 2b                	jmp    c0014348 <cleanerTaskFunction(void*)+0x84>
c001431d:	8d 76 00             	lea    esi,[esi+0x0]
c0014320:	83 ec 0c             	sub    esp,0xc
c0014323:	68 0c 3d 02 c0       	push   0xc0023d0c
c0014328:	e8 ff 82 00 00       	call   c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001432d:	c7 04 24 0c 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d0c
c0014334:	89 c3                	mov    ebx,eax
c0014336:	e8 f9 82 00 00       	call   c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001433b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001433e:	e8 b5 fc ff ff       	call   c0013ff8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0014343:	83 c4 10             	add    esp,0x10
c0014346:	66 90                	xchg   ax,ax
c0014348:	83 ec 0c             	sub    esp,0xc
c001434b:	68 0c 3d 02 c0       	push   0xc0023d0c
c0014350:	e8 bb 82 00 00       	call   c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014355:	83 c4 10             	add    esp,0x10
c0014358:	84 c0                	test   al,al
c001435a:	74 c4                	je     c0014320 <cleanerTaskFunction(void*)+0x5c>
c001435c:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014361:	48                   	dec    eax
c0014362:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014367:	75 03                	jne    c001436c <cleanerTaskFunction(void*)+0xa8>
c0014369:	fb                   	sti    
c001436a:	66 90                	xchg   ax,ax
c001436c:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0014371:	48                   	dec    eax
c0014372:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0014377:	0f 85 4b ff ff ff    	jne    c00142c8 <cleanerTaskFunction(void*)+0x4>
c001437d:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c0014382:	85 c0                	test   eax,eax
c0014384:	0f 84 3e ff ff ff    	je     c00142c8 <cleanerTaskFunction(void*)+0x4>
c001438a:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0014394:	e8 f7 f6 ff ff       	call   c0013a90 <schedule()>
c0014399:	e9 2a ff ff ff       	jmp    c00142c8 <cleanerTaskFunction(void*)+0x4>
c001439e:	66 90                	xchg   ax,ax
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	6a 02                	push   0x2
c00143a5:	e8 ba f8 ff ff       	call   c0013c64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143aa:	83 c4 10             	add    esp,0x10
c00143ad:	e9 4e ff ff ff       	jmp    c0014300 <cleanerTaskFunction(void*)+0x3c>
c00143b2:	66 90                	xchg   ax,ax

c00143b4 <terminateTask(int)>:
c00143b4:	83 ec 14             	sub    esp,0x14
c00143b7:	fa                   	cli    
c00143b8:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00143be:	ff 05 04 3d 02 c0    	inc    DWORD PTR ds:0xc0023d04
c00143c4:	fa                   	cli    
c00143c5:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00143cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00143d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143dc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00143df:	50                   	push   eax
c00143e0:	68 0c 3d 02 c0       	push   0xc0023d0c
c00143e5:	e8 02 83 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00143ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00143f9:	a1 e8 3c 02 c0       	mov    eax,ds:0xc0023ce8
c00143fe:	85 c0                	test   eax,eax
c0014400:	74 5e                	je     c0014460 <terminateTask(int)+0xac>
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	c6 05 ec 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023cec,0x1
c001440c:	50                   	push   eax
c001440d:	e8 42 fb ff ff       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c0014412:	83 c4 10             	add    esp,0x10
c0014415:	8d 76 00             	lea    esi,[esi+0x0]
c0014418:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001441d:	48                   	dec    eax
c001441e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014423:	75 03                	jne    c0014428 <terminateTask(int)+0x74>
c0014425:	fb                   	sti    
c0014426:	66 90                	xchg   ax,ax
c0014428:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c001442d:	48                   	dec    eax
c001442e:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c0014433:	75 0b                	jne    c0014440 <terminateTask(int)+0x8c>
c0014435:	83 3d 00 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d00,0x0
c001443c:	75 36                	jne    c0014474 <terminateTask(int)+0xc0>
c001443e:	66 90                	xchg   ax,ax
c0014440:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014445:	48                   	dec    eax
c0014446:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001444b:	75 03                	jne    c0014450 <terminateTask(int)+0x9c>
c001444d:	fb                   	sti    
c001444e:	66 90                	xchg   ax,ax
c0014450:	fa                   	cli    
c0014451:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0014457:	90                   	nop
c0014458:	e8 33 f6 ff ff       	call   c0013a90 <schedule()>
c001445d:	eb e1                	jmp    c0014440 <terminateTask(int)+0x8c>
c001445f:	90                   	nop
c0014460:	83 ec 0c             	sub    esp,0xc
c0014463:	68 96 e9 01 c0       	push   0xc001e996
c0014468:	e8 7f 67 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001446d:	83 c4 10             	add    esp,0x10
c0014470:	eb a6                	jmp    c0014418 <terminateTask(int)+0x64>
c0014472:	66 90                	xchg   ax,ax
c0014474:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c001447e:	eb d8                	jmp    c0014458 <terminateTask(int)+0xa4>

c0014480 <Thr::terminateFromIRQ(int)>:
c0014480:	83 ec 18             	sub    esp,0x18
c0014483:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014487:	50                   	push   eax
c0014488:	e8 27 ff ff ff       	call   c00143b4 <terminateTask(int)>
c001448d:	90                   	nop
c001448e:	66 90                	xchg   ax,ax

c0014490 <Semaphore::release()>:
c0014490:	83 ec 0c             	sub    esp,0xc
c0014493:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014497:	fa                   	cli    
c0014498:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c001449d:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00144a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00144a6:	89 0d 04 3d 02 c0    	mov    DWORD PTR ds:0xc0023d04,ecx
c00144ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00144af:	85 c9                	test   ecx,ecx
c00144b1:	74 41                	je     c00144f4 <Semaphore::release()+0x64>
c00144b3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144bc:	51                   	push   ecx
c00144bd:	e8 92 fa ff ff       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c00144c2:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00144c7:	83 c4 10             	add    esp,0x10
c00144ca:	48                   	dec    eax
c00144cb:	90                   	nop
c00144cc:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c00144d1:	85 c0                	test   eax,eax
c00144d3:	75 0b                	jne    c00144e0 <Semaphore::release()+0x50>
c00144d5:	a1 00 3d 02 c0       	mov    eax,ds:0xc0023d00
c00144da:	85 c0                	test   eax,eax
c00144dc:	75 1e                	jne    c00144fc <Semaphore::release()+0x6c>
c00144de:	66 90                	xchg   ax,ax
c00144e0:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00144e5:	48                   	dec    eax
c00144e6:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00144eb:	75 03                	jne    c00144f0 <Semaphore::release()+0x60>
c00144ed:	fb                   	sti    
c00144ee:	66 90                	xchg   ax,ax
c00144f0:	83 c4 0c             	add    esp,0xc
c00144f3:	c3                   	ret    
c00144f4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00144f7:	eb d3                	jmp    c00144cc <Semaphore::release()+0x3c>
c00144f9:	8d 76 00             	lea    esi,[esi+0x0]
c00144fc:	c7 05 00 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d00,0x0
c0014506:	e8 85 f5 ff ff       	call   c0013a90 <schedule()>
c001450b:	eb d3                	jmp    c00144e0 <Semaphore::release()+0x50>
c001450d:	8d 76 00             	lea    esi,[esi+0x0]

c0014510 <__static_initialization_and_destruction_0(int, int)>:
c0014510:	83 ec 0c             	sub    esp,0xc
c0014513:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014518:	0f 85 8e 00 00 00    	jne    c00145ac <__static_initialization_and_destruction_0(int, int)+0x9c>
c001451e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014526:	0f 85 80 00 00 00    	jne    c00145ac <__static_initialization_and_destruction_0(int, int)+0x9c>
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	68 24 3d 02 c0       	push   0xc0023d24
c0014534:	e8 5f 84 00 00       	call   c001c998 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014539:	83 c4 10             	add    esp,0x10
c001453c:	83 ec 04             	sub    esp,0x4
c001453f:	68 a4 f5 01 c0       	push   0xc001f5a4
c0014544:	68 24 3d 02 c0       	push   0xc0023d24
c0014549:	68 48 c9 01 c0       	push   0xc001c948
c001454e:	e8 53 65 ff ff       	call   c000aaa6 <__cxa_atexit>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	83 ec 0c             	sub    esp,0xc
c0014559:	68 18 3d 02 c0       	push   0xc0023d18
c001455e:	e8 35 84 00 00       	call   c001c998 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	83 ec 04             	sub    esp,0x4
c0014569:	68 a4 f5 01 c0       	push   0xc001f5a4
c001456e:	68 18 3d 02 c0       	push   0xc0023d18
c0014573:	68 48 c9 01 c0       	push   0xc001c948
c0014578:	e8 29 65 ff ff       	call   c000aaa6 <__cxa_atexit>
c001457d:	83 c4 10             	add    esp,0x10
c0014580:	83 ec 0c             	sub    esp,0xc
c0014583:	68 0c 3d 02 c0       	push   0xc0023d0c
c0014588:	e8 0b 84 00 00       	call   c001c998 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	83 ec 04             	sub    esp,0x4
c0014593:	68 a4 f5 01 c0       	push   0xc001f5a4
c0014598:	68 0c 3d 02 c0       	push   0xc0023d0c
c001459d:	68 48 c9 01 c0       	push   0xc001c948
c00145a2:	e8 ff 64 ff ff       	call   c000aaa6 <__cxa_atexit>
c00145a7:	83 c4 10             	add    esp,0x10
c00145aa:	66 90                	xchg   ax,ax
c00145ac:	90                   	nop
c00145ad:	83 c4 0c             	add    esp,0xc
c00145b0:	c3                   	ret    
c00145b1:	8d 76 00             	lea    esi,[esi+0x0]

c00145b4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00145b4:	83 ec 0c             	sub    esp,0xc
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	68 ff ff 00 00       	push   0xffff
c00145bf:	6a 01                	push   0x1
c00145c1:	e8 4a ff ff ff       	call   c0014510 <__static_initialization_and_destruction_0(int, int)>
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	83 c4 0c             	add    esp,0xc
c00145cc:	c3                   	ret    

c00145cd <Vm::inbv(unsigned short)>:
c00145cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145d1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145d6:	75 06                	jne    c00145de <Vm::inbv(unsigned short)+0x11>
c00145d8:	a0 6c 3d 02 c0       	mov    al,ds:0xc0023d6c
c00145dd:	c3                   	ret    
c00145de:	ec                   	in     al,dx
c00145df:	c3                   	ret    

c00145e0 <Vm::outbv(unsigned short, unsigned char)>:
c00145e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145e8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145ed:	75 25                	jne    c0014614 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00145ef:	8b 0d 6c 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d6c
c00145f5:	8d 51 01             	lea    edx,[ecx+0x1]
c00145f8:	88 81 80 3d 02 c0    	mov    BYTE PTR [ecx-0x3ffdc280],al
c00145fe:	89 15 6c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d6c,edx
c0014604:	83 fa 20             	cmp    edx,0x20
c0014607:	75 0c                	jne    c0014615 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014609:	c7 05 6c 3d 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x1f
c0014613:	c3                   	ret    
c0014614:	ee                   	out    dx,al
c0014615:	c3                   	ret    

c0014616 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014616:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001461b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014620:	c1 e0 04             	shl    eax,0x4
c0014623:	01 d0                	add    eax,edx
c0014625:	c3                   	ret    

c0014626 <Vm::getSegment(unsigned int)>:
c0014626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001462a:	c1 e8 10             	shr    eax,0x10
c001462d:	c3                   	ret    

c001462e <Vm::getOffset(unsigned int)>:
c001462e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014632:	c3                   	ret    

c0014633 <Vm::mainloop2()>:
c0014633:	83 ec 18             	sub    esp,0x18
c0014636:	fa                   	cli    
c0014637:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001463d:	6a 02                	push   0x2
c001463f:	c6 05 65 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d65,0x1
c0014646:	e8 19 f6 ff ff       	call   c0013c64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001464b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014650:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014654:	52                   	push   edx
c0014655:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014659:	52                   	push   edx
c001465a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001465e:	52                   	push   edx
c001465f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014663:	50                   	push   eax
c0014664:	e8 c6 bb fe ff       	call   c000022f <goToVM86>
c0014669:	83 c4 2c             	add    esp,0x2c
c001466c:	c3                   	ret    

c001466d <Vm::mainVm8086Loop(void*)>:
c001466d:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014672:	48                   	dec    eax
c0014673:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014678:	75 01                	jne    c001467b <Vm::mainVm8086Loop(void*)+0xe>
c001467a:	fb                   	sti    
c001467b:	eb b6                	jmp    c0014633 <Vm::mainloop2()>

c001467d <Vm::mainloop3(unsigned long)>:
c001467d:	83 ec 18             	sub    esp,0x18
c0014680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014684:	fa                   	cli    
c0014685:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001468b:	6a 02                	push   0x2
c001468d:	c6 05 64 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d64,0x1
c0014694:	a3 60 3d 02 c0       	mov    ds:0xc0023d60,eax
c0014699:	e8 c6 f5 ff ff       	call   c0013c64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001469e:	83 c4 1c             	add    esp,0x1c
c00146a1:	eb 90                	jmp    c0014633 <Vm::mainloop2()>

c00146a3 <Vm::initialise8086()>:
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	68 80 00 00 00       	push   0x80
c00146ab:	6a 00                	push   0x0
c00146ad:	68 6d 46 01 c0       	push   0xc001466d
c00146b2:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00146b8:	e8 b3 f1 ff ff       	call   c0013870 <Process::createThread(void (*)(void*), void*, int)>
c00146bd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00146c4:	a3 68 3d 02 c0       	mov    ds:0xc0023d68,eax
c00146c9:	68 00 01 00 00       	push   0x100
c00146ce:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00146d3:	6a 00                	push   0x0
c00146d5:	6a 00                	push   0x0
c00146d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146dd:	e8 46 5c ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146e2:	83 c4 2c             	add    esp,0x2c
c00146e5:	c3                   	ret    

c00146e6 <Vm::finish8086()>:
c00146e6:	53                   	push   ebx
c00146e7:	83 ec 08             	sub    esp,0x8
c00146ea:	fa                   	cli    
c00146eb:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c00146f1:	80 3d 64 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d64,0x0
c00146f8:	75 15                	jne    c001470f <Vm::finish8086()+0x29>
c00146fa:	e8 91 f3 ff ff       	call   c0013a90 <schedule()>
c00146ff:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014704:	48                   	dec    eax
c0014705:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001470a:	75 de                	jne    c00146ea <Vm::finish8086()+0x4>
c001470c:	fb                   	sti    
c001470d:	eb db                	jmp    c00146ea <Vm::finish8086()+0x4>
c001470f:	83 ec 0c             	sub    esp,0xc
c0014712:	8b 1d 60 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d60
c0014718:	ff 35 68 3d 02 c0    	push   DWORD PTR ds:0xc0023d68
c001471e:	c6 05 64 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d64,0x0
c0014725:	e8 2a f8 ff ff       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c001472a:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001472f:	83 c4 10             	add    esp,0x10
c0014732:	8d 50 ff             	lea    edx,[eax-0x1]
c0014735:	89 15 08 3d 02 c0    	mov    DWORD PTR ds:0xc0023d08,edx
c001473b:	85 d2                	test   edx,edx
c001473d:	75 01                	jne    c0014740 <Vm::finish8086()+0x5a>
c001473f:	fb                   	sti    
c0014740:	89 d8                	mov    eax,ebx
c0014742:	83 c4 08             	add    esp,0x8
c0014745:	5b                   	pop    ebx
c0014746:	c3                   	ret    

c0014747 <Vm::getOutput8086(unsigned char*)>:
c0014747:	57                   	push   edi
c0014748:	8b 0d 6c 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d6c
c001474e:	56                   	push   esi
c001474f:	be 80 3d 02 c0       	mov    esi,0xc0023d80
c0014754:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014758:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001475a:	a1 6c 3d 02 c0       	mov    eax,ds:0xc0023d6c
c001475f:	5e                   	pop    esi
c0014760:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c001476a:	5f                   	pop    edi
c001476b:	c3                   	ret    

c001476c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001476c:	55                   	push   ebp
c001476d:	57                   	push   edi
c001476e:	56                   	push   esi
c001476f:	53                   	push   ebx
c0014770:	83 ec 0c             	sub    esp,0xc
c0014773:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014777:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001477b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001477f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014783:	fa                   	cli    
c0014784:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001478a:	80 3d 65 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d65,0x0
c0014791:	75 15                	jne    c00147a8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014793:	e8 f8 f2 ff ff       	call   c0013a90 <schedule()>
c0014798:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001479d:	48                   	dec    eax
c001479e:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c00147a3:	75 de                	jne    c0014783 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147a5:	fb                   	sti    
c00147a6:	eb db                	jmp    c0014783 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00147a8:	a1 68 3d 02 c0       	mov    eax,ds:0xc0023d68
c00147ad:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c00147b7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00147bb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00147bf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00147c3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00147c7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00147cb:	0f b7 ff             	movzx  edi,di
c00147ce:	0f b7 f6             	movzx  esi,si
c00147d1:	50                   	push   eax
c00147d2:	6a 20                	push   0x20
c00147d4:	6a 00                	push   0x0
c00147d6:	68 80 3d 02 c0       	push   0xc0023d80
c00147db:	e8 10 bd fe ff       	call   c00004f0 <memset>
c00147e0:	5a                   	pop    edx
c00147e1:	59                   	pop    ecx
c00147e2:	57                   	push   edi
c00147e3:	56                   	push   esi
c00147e4:	e8 2d fe ff ff       	call   c0014616 <Vm::realToLinear(unsigned short, unsigned short)>
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	89 c7                	mov    edi,eax
c00147ee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147f8:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c00147fd:	c6 05 65 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d65,0x0
c0014804:	48                   	dec    eax
c0014805:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001480a:	75 01                	jne    c001480d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001480c:	fb                   	sti    
c001480d:	83 ec 0c             	sub    esp,0xc
c0014810:	ff 35 68 3d 02 c0    	push   DWORD PTR ds:0xc0023d68
c0014816:	e8 39 f7 ff ff       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c001481b:	83 c4 1c             	add    esp,0x1c
c001481e:	b0 01                	mov    al,0x1
c0014820:	5b                   	pop    ebx
c0014821:	5e                   	pop    esi
c0014822:	5f                   	pop    edi
c0014823:	5d                   	pop    ebp
c0014824:	c3                   	ret    

c0014825 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014825:	55                   	push   ebp
c0014826:	57                   	push   edi
c0014827:	56                   	push   esi
c0014828:	53                   	push   ebx
c0014829:	83 ec 2c             	sub    esp,0x2c
c001482c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014830:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014834:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014838:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001483c:	fa                   	cli    
c001483d:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c0014843:	0f b6 35 65 3d 02 c0 	movzx  esi,BYTE PTR ds:0xc0023d65
c001484a:	89 f0                	mov    eax,esi
c001484c:	84 c0                	test   al,al
c001484e:	75 1d                	jne    c001486d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014850:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014854:	e8 37 f2 ff ff       	call   c0013a90 <schedule()>
c0014859:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001485e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014862:	48                   	dec    eax
c0014863:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014868:	75 d2                	jne    c001483c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001486a:	fb                   	sti    
c001486b:	eb cf                	jmp    c001483c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001486d:	a1 68 3d 02 c0       	mov    eax,ds:0xc0023d68
c0014872:	c7 05 6c 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d6c,0x0
c001487c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014880:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014884:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014888:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001488c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014890:	50                   	push   eax
c0014891:	6a 20                	push   0x20
c0014893:	6a 00                	push   0x0
c0014895:	68 80 3d 02 c0       	push   0xc0023d80
c001489a:	e8 51 bc fe ff       	call   c00004f0 <memset>
c001489f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00148a6:	e8 b2 35 ff ff       	call   c0007e5d <malloc>
c00148ab:	83 c4 0c             	add    esp,0xc
c00148ae:	89 c3                	mov    ebx,eax
c00148b0:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00148b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00148ba:	50                   	push   eax
c00148bb:	e8 a2 68 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	85 db                	test   ebx,ebx
c00148c5:	75 0a                	jne    c00148d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00148c7:	83 ec 0c             	sub    esp,0xc
c00148ca:	68 c0 ea 01 c0       	push   0xc001eac0
c00148cf:	eb 3e                	jmp    c001490f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148d1:	50                   	push   eax
c00148d2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00148d6:	50                   	push   eax
c00148d7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00148db:	50                   	push   eax
c00148dc:	53                   	push   ebx
c00148dd:	e8 ec 6b ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00148ea:	74 0a                	je     c00148f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00148ec:	83 ec 0c             	sub    esp,0xc
c00148ef:	68 d4 ea 01 c0       	push   0xc001ead4
c00148f4:	eb 19                	jmp    c001490f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148f6:	51                   	push   ecx
c00148f7:	51                   	push   ecx
c00148f8:	6a 01                	push   0x1
c00148fa:	53                   	push   ebx
c00148fb:	e8 22 69 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0014900:	83 c4 10             	add    esp,0x10
c0014903:	85 c0                	test   eax,eax
c0014905:	74 24                	je     c001492b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014907:	83 ec 0c             	sub    esp,0xc
c001490a:	68 ed ea 01 c0       	push   0xc001eaed
c001490f:	e8 27 be ff ff       	call   c001073b <Krnl::panic(char const*)>
c0014914:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0014919:	83 c4 10             	add    esp,0x10
c001491c:	48                   	dec    eax
c001491d:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c0014922:	85 c0                	test   eax,eax
c0014924:	75 01                	jne    c0014927 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014926:	fb                   	sti    
c0014927:	31 f6                	xor    esi,esi
c0014929:	eb 58                	jmp    c0014983 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001492b:	0f b7 ed             	movzx  ebp,bp
c001492e:	50                   	push   eax
c001492f:	0f b7 ff             	movzx  edi,di
c0014932:	50                   	push   eax
c0014933:	55                   	push   ebp
c0014934:	57                   	push   edi
c0014935:	e8 dc fc ff ff       	call   c0014616 <Vm::realToLinear(unsigned short, unsigned short)>
c001493a:	5a                   	pop    edx
c001493b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001493d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014941:	51                   	push   ecx
c0014942:	50                   	push   eax
c0014943:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014947:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001494b:	53                   	push   ebx
c001494c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001494f:	83 c4 14             	add    esp,0x14
c0014952:	53                   	push   ebx
c0014953:	e8 28 69 ff ff       	call   c000b280 <File::close()>
c0014958:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	48                   	dec    eax
c0014961:	c6 05 65 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023d65,0x0
c0014968:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001496d:	85 c0                	test   eax,eax
c001496f:	75 01                	jne    c0014972 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014971:	fb                   	sti    
c0014972:	83 ec 0c             	sub    esp,0xc
c0014975:	ff 35 68 3d 02 c0    	push   DWORD PTR ds:0xc0023d68
c001497b:	e8 d4 f5 ff ff       	call   c0013f54 <unblockTask(ThreadControlBlock*)>
c0014980:	83 c4 10             	add    esp,0x10
c0014983:	83 c4 2c             	add    esp,0x2c
c0014986:	89 f0                	mov    eax,esi
c0014988:	5b                   	pop    ebx
c0014989:	5e                   	pop    esi
c001498a:	5f                   	pop    edi
c001498b:	5d                   	pop    ebp
c001498c:	c3                   	ret    

c001498d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001498d:	57                   	push   edi
c001498e:	56                   	push   esi
c001498f:	53                   	push   ebx
c0014990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014998:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001499c:	83 e8 06             	sub    eax,0x6
c001499f:	0f b7 c0             	movzx  eax,ax
c00149a2:	50                   	push   eax
c00149a3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00149a8:	50                   	push   eax
c00149a9:	e8 68 fc ff ff       	call   c0014616 <Vm::realToLinear(unsigned short, unsigned short)>
c00149ae:	5a                   	pop    edx
c00149af:	5e                   	pop    esi
c00149b0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00149b3:	8d 56 fa             	lea    edx,[esi-0x6]
c00149b6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00149bc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00149bf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00149c2:	83 c2 02             	add    edx,0x2
c00149c5:	66 89 10             	mov    WORD PTR [eax],dx
c00149c8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00149cb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00149cf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00149d2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00149d6:	89 d6                	mov    esi,edx
c00149d8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00149de:	66 81 e6 ff fd       	and    si,0xfdff
c00149e3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00149e7:	74 07                	je     c00149f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00149e9:	89 d6                	mov    esi,edx
c00149eb:	66 81 ce 00 02       	or     si,0x200
c00149f0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00149f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149f9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00149fd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014a05:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014a08:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014a10:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014a13:	5b                   	pop    ebx
c0014a14:	5e                   	pop    esi
c0014a15:	5f                   	pop    edi
c0014a16:	c3                   	ret    

c0014a17 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014a17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a1c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a21:	c1 e0 04             	shl    eax,0x4
c0014a24:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014a27:	c3                   	ret    

c0014a28 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014a28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a32:	c1 e0 04             	shl    eax,0x4
c0014a35:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014a39:	c3                   	ret    

c0014a3a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014a3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a44:	c1 e0 04             	shl    eax,0x4
c0014a47:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014a4a:	c3                   	ret    

c0014a4b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014a4b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a50:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a55:	c1 e0 04             	shl    eax,0x4
c0014a58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a5c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a5f:	c3                   	ret    

c0014a60 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a6a:	c1 e0 04             	shl    eax,0x4
c0014a6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a71:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a75:	c3                   	ret    

c0014a76 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a80:	c1 e0 04             	shl    eax,0x4
c0014a83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a87:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a8a:	c3                   	ret    

c0014a8b <Vm::faultHandler(regs*)>:
c0014a8b:	55                   	push   ebp
c0014a8c:	57                   	push   edi
c0014a8d:	56                   	push   esi
c0014a8e:	53                   	push   ebx
c0014a8f:	83 ec 1c             	sub    esp,0x1c
c0014a92:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a96:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a99:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014a9d:	0f b7 f8             	movzx  edi,ax
c0014aa0:	52                   	push   edx
c0014aa1:	0f b7 c0             	movzx  eax,ax
c0014aa4:	50                   	push   eax
c0014aa5:	e8 6c fb ff ff       	call   c0014616 <Vm::realToLinear(unsigned short, unsigned short)>
c0014aaa:	5a                   	pop    edx
c0014aab:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014aae:	59                   	pop    ecx
c0014aaf:	89 c1                	mov    ecx,eax
c0014ab1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ab8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014abd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ac1:	0f b7 c5             	movzx  eax,bp
c0014ac4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ac8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014acc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ad0:	e8 41 fb ff ff       	call   c0014616 <Vm::realToLinear(unsigned short, unsigned short)>
c0014ad5:	5e                   	pop    esi
c0014ad6:	be 06 00 00 00       	mov    esi,0x6
c0014adb:	5a                   	pop    edx
c0014adc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014ae1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014ae6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014ae9:	80 fa 9d             	cmp    dl,0x9d
c0014aec:	0f 84 2c 02 00 00    	je     c0014d1e <Vm::faultHandler(regs*)+0x293>
c0014af2:	0f 87 91 00 00 00    	ja     c0014b89 <Vm::faultHandler(regs*)+0xfe>
c0014af8:	80 fa 66             	cmp    dl,0x66
c0014afb:	0f 84 98 01 00 00    	je     c0014c99 <Vm::faultHandler(regs*)+0x20e>
c0014b01:	77 47                	ja     c0014b4a <Vm::faultHandler(regs*)+0xbf>
c0014b03:	80 fa 36             	cmp    dl,0x36
c0014b06:	0f 84 80 01 00 00    	je     c0014c8c <Vm::faultHandler(regs*)+0x201>
c0014b0c:	77 1a                	ja     c0014b28 <Vm::faultHandler(regs*)+0x9d>
c0014b0e:	80 fa 26             	cmp    dl,0x26
c0014b11:	0f 84 4e 01 00 00    	je     c0014c65 <Vm::faultHandler(regs*)+0x1da>
c0014b17:	80 fa 2e             	cmp    dl,0x2e
c0014b1a:	0f 85 e2 05 00 00    	jne    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014b20:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b23:	31 f6                	xor    esi,esi
c0014b25:	41                   	inc    ecx
c0014b26:	eb be                	jmp    c0014ae6 <Vm::faultHandler(regs*)+0x5b>
c0014b28:	80 fa 64             	cmp    dl,0x64
c0014b2b:	0f 84 41 01 00 00    	je     c0014c72 <Vm::faultHandler(regs*)+0x1e7>
c0014b31:	0f 87 48 01 00 00    	ja     c0014c7f <Vm::faultHandler(regs*)+0x1f4>
c0014b37:	80 fa 3e             	cmp    dl,0x3e
c0014b3a:	0f 85 c2 05 00 00    	jne    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014b40:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b43:	be 01 00 00 00       	mov    esi,0x1
c0014b48:	eb db                	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014b4a:	80 fa 6d             	cmp    dl,0x6d
c0014b4d:	0f 84 ec 02 00 00    	je     c0014e3f <Vm::faultHandler(regs*)+0x3b4>
c0014b53:	77 17                	ja     c0014b6c <Vm::faultHandler(regs*)+0xe1>
c0014b55:	80 fa 67             	cmp    dl,0x67
c0014b58:	0f 84 48 01 00 00    	je     c0014ca6 <Vm::faultHandler(regs*)+0x21b>
c0014b5e:	80 fa 6c             	cmp    dl,0x6c
c0014b61:	0f 84 69 02 00 00    	je     c0014dd0 <Vm::faultHandler(regs*)+0x345>
c0014b67:	e9 96 05 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014b6c:	80 fa 6f             	cmp    dl,0x6f
c0014b6f:	0f 84 f4 03 00 00    	je     c0014f69 <Vm::faultHandler(regs*)+0x4de>
c0014b75:	0f 82 59 03 00 00    	jb     c0014ed4 <Vm::faultHandler(regs*)+0x449>
c0014b7b:	80 fa 9c             	cmp    dl,0x9c
c0014b7e:	0f 84 2f 01 00 00    	je     c0014cb3 <Vm::faultHandler(regs*)+0x228>
c0014b84:	e9 79 05 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014b89:	80 fa ec             	cmp    dl,0xec
c0014b8c:	0f 84 14 05 00 00    	je     c00150a6 <Vm::faultHandler(regs*)+0x61b>
c0014b92:	77 7b                	ja     c0014c0f <Vm::faultHandler(regs*)+0x184>
c0014b94:	80 fa e4             	cmp    dl,0xe4
c0014b97:	0f 84 93 04 00 00    	je     c0015030 <Vm::faultHandler(regs*)+0x5a5>
c0014b9d:	77 53                	ja     c0014bf2 <Vm::faultHandler(regs*)+0x167>
c0014b9f:	80 fa cd             	cmp    dl,0xcd
c0014ba2:	0f 84 d9 01 00 00    	je     c0014d81 <Vm::faultHandler(regs*)+0x2f6>
c0014ba8:	80 fa cf             	cmp    dl,0xcf
c0014bab:	0f 85 51 05 00 00    	jne    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014bb1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bb4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014bb7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014bbb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014bbe:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014bc2:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bc8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bcb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bcf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bd5:	66 c1 e8 09          	shr    ax,0x9
c0014bd9:	83 e0 01             	and    eax,0x1
c0014bdc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bdf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014be2:	83 c0 06             	add    eax,0x6
c0014be5:	25 ff ff 00 00       	and    eax,0xffff
c0014bea:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014bed:	e9 0c 05 00 00       	jmp    c00150fe <Vm::faultHandler(regs*)+0x673>
c0014bf2:	80 fa e6             	cmp    dl,0xe6
c0014bf5:	0f 84 7f 04 00 00    	je     c001507a <Vm::faultHandler(regs*)+0x5ef>
c0014bfb:	0f 82 4b 04 00 00    	jb     c001504c <Vm::faultHandler(regs*)+0x5c1>
c0014c01:	80 fa e7             	cmp    dl,0xe7
c0014c04:	0f 84 87 04 00 00    	je     c0015091 <Vm::faultHandler(regs*)+0x606>
c0014c0a:	e9 f3 04 00 00       	jmp    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014c0f:	80 fa ef             	cmp    dl,0xef
c0014c12:	0f 84 d1 04 00 00    	je     c00150e9 <Vm::faultHandler(regs*)+0x65e>
c0014c18:	77 28                	ja     c0014c42 <Vm::faultHandler(regs*)+0x1b7>
c0014c1a:	80 fa ed             	cmp    dl,0xed
c0014c1d:	0f 84 9f 04 00 00    	je     c00150c2 <Vm::faultHandler(regs*)+0x637>
c0014c23:	80 fa ee             	cmp    dl,0xee
c0014c26:	0f 85 d6 04 00 00    	jne    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014c2c:	50                   	push   eax
c0014c2d:	50                   	push   eax
c0014c2e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014c32:	50                   	push   eax
c0014c33:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c37:	50                   	push   eax
c0014c38:	e8 a3 f9 ff ff       	call   c00145e0 <Vm::outbv(unsigned short, unsigned char)>
c0014c3d:	e9 9f 04 00 00       	jmp    c00150e1 <Vm::faultHandler(regs*)+0x656>
c0014c42:	80 fa fa             	cmp    dl,0xfa
c0014c45:	0f 84 69 01 00 00    	je     c0014db4 <Vm::faultHandler(regs*)+0x329>
c0014c4b:	80 fa fb             	cmp    dl,0xfb
c0014c4e:	0f 84 6e 01 00 00    	je     c0014dc2 <Vm::faultHandler(regs*)+0x337>
c0014c54:	80 fa f3             	cmp    dl,0xf3
c0014c57:	0f 85 a5 04 00 00    	jne    c0015102 <Vm::faultHandler(regs*)+0x677>
c0014c5d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c60:	e9 c0 fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014c65:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c68:	be 02 00 00 00       	mov    esi,0x2
c0014c6d:	e9 b3 fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014c72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c75:	be 03 00 00 00       	mov    esi,0x3
c0014c7a:	e9 a6 fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014c7f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c82:	be 04 00 00 00       	mov    esi,0x4
c0014c87:	e9 99 fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014c8c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c8f:	be 05 00 00 00       	mov    esi,0x5
c0014c94:	e9 8c fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014c99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c9c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014ca1:	e9 7f fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014ca6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ca9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014cae:	e9 72 fe ff ff       	jmp    c0014b25 <Vm::faultHandler(regs*)+0x9a>
c0014cb3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014cb6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014cba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cbf:	74 30                	je     c0014cf1 <Vm::faultHandler(regs*)+0x266>
c0014cc1:	83 e9 04             	sub    ecx,0x4
c0014cc4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cd0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cd3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014cd6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cdc:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ce0:	0f 84 15 04 00 00    	je     c00150fb <Vm::faultHandler(regs*)+0x670>
c0014ce6:	80 ce 02             	or     dh,0x2
c0014ce9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014cec:	e9 0a 04 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014cf1:	83 e9 02             	sub    ecx,0x2
c0014cf4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cfa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cfd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d07:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014d0b:	74 05                	je     c0014d12 <Vm::faultHandler(regs*)+0x287>
c0014d0d:	80 ce 02             	or     dh,0x2
c0014d10:	eb 03                	jmp    c0014d15 <Vm::faultHandler(regs*)+0x28a>
c0014d12:	80 e6 fd             	and    dh,0xfd
c0014d15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d19:	e9 dd 03 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014d1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d23:	74 2a                	je     c0014d4f <Vm::faultHandler(regs*)+0x2c4>
c0014d25:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d27:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014d2d:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d33:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d3e:	c1 e8 09             	shr    eax,0x9
c0014d41:	83 e0 01             	and    eax,0x1
c0014d44:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d47:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d4a:	83 c0 04             	add    eax,0x4
c0014d4d:	eb 25                	jmp    c0014d74 <Vm::faultHandler(regs*)+0x2e9>
c0014d4f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d52:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d58:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d5b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d64:	66 c1 e8 09          	shr    ax,0x9
c0014d68:	83 e0 01             	and    eax,0x1
c0014d6b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d6e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d71:	83 c0 02             	add    eax,0x2
c0014d74:	25 ff ff 00 00       	and    eax,0xffff
c0014d79:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d7c:	e9 7a 03 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014d81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d85:	3c ee                	cmp    al,0xee
c0014d87:	75 10                	jne    c0014d99 <Vm::faultHandler(regs*)+0x30e>
c0014d89:	83 ec 0c             	sub    esp,0xc
c0014d8c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d8f:	e8 e9 f8 ff ff       	call   c001467d <Vm::mainloop3(unsigned long)>
c0014d94:	e9 4b 03 00 00       	jmp    c00150e4 <Vm::faultHandler(regs*)+0x659>
c0014d99:	83 ec 0c             	sub    esp,0xc
c0014d9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014da4:	51                   	push   ecx
c0014da5:	50                   	push   eax
c0014da6:	53                   	push   ebx
c0014da7:	e8 e1 fb ff ff       	call   c001498d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014dac:	83 c4 20             	add    esp,0x20
c0014daf:	e9 4a 03 00 00       	jmp    c00150fe <Vm::faultHandler(regs*)+0x673>
c0014db4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014dbd:	e9 39 03 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014dc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dc7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014dcb:	e9 2b 03 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014dd0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014dd3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014dd8:	74 2b                	je     c0014e05 <Vm::faultHandler(regs*)+0x37a>
c0014dda:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014de1:	76 22                	jbe    c0014e05 <Vm::faultHandler(regs*)+0x37a>
c0014de3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014de7:	50                   	push   eax
c0014de8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014dec:	50                   	push   eax
c0014ded:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014df1:	50                   	push   eax
c0014df2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014df6:	50                   	push   eax
c0014df7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dfb:	50                   	push   eax
c0014dfc:	6a 6c                	push   0x6c
c0014dfe:	6a 6c                	push   0x6c
c0014e00:	e9 b9 01 00 00       	jmp    c0014fbe <Vm::faultHandler(regs*)+0x533>
c0014e05:	83 ec 0c             	sub    esp,0xc
c0014e08:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e0c:	0f b7 f6             	movzx  esi,si
c0014e0f:	50                   	push   eax
c0014e10:	e8 b8 f7 ff ff       	call   c00145cd <Vm::inbv(unsigned short)>
c0014e15:	83 c4 0c             	add    esp,0xc
c0014e18:	0f b6 c0             	movzx  eax,al
c0014e1b:	50                   	push   eax
c0014e1c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014e20:	50                   	push   eax
c0014e21:	56                   	push   esi
c0014e22:	e8 24 fc ff ff       	call   c0014a4b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e2d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e31:	74 03                	je     c0014e36 <Vm::faultHandler(regs*)+0x3ab>
c0014e33:	48                   	dec    eax
c0014e34:	eb 01                	jmp    c0014e37 <Vm::faultHandler(regs*)+0x3ac>
c0014e36:	40                   	inc    eax
c0014e37:	0f b7 c0             	movzx  eax,ax
c0014e3a:	e9 8d 00 00 00       	jmp    c0014ecc <Vm::faultHandler(regs*)+0x441>
c0014e3f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014e42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e45:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e4a:	74 29                	je     c0014e75 <Vm::faultHandler(regs*)+0x3ea>
c0014e4c:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e51:	76 22                	jbe    c0014e75 <Vm::faultHandler(regs*)+0x3ea>
c0014e53:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e57:	50                   	push   eax
c0014e58:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e5c:	50                   	push   eax
c0014e5d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e61:	50                   	push   eax
c0014e62:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e66:	50                   	push   eax
c0014e67:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e6b:	50                   	push   eax
c0014e6c:	6a 6d                	push   0x6d
c0014e6e:	6a 6d                	push   0x6d
c0014e70:	e9 49 01 00 00       	jmp    c0014fbe <Vm::faultHandler(regs*)+0x533>
c0014e75:	0f b7 c8             	movzx  ecx,ax
c0014e78:	0f b7 f6             	movzx  esi,si
c0014e7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e83:	74 20                	je     c0014ea5 <Vm::faultHandler(regs*)+0x41a>
c0014e85:	ed                   	in     eax,dx
c0014e86:	55                   	push   ebp
c0014e87:	50                   	push   eax
c0014e88:	51                   	push   ecx
c0014e89:	56                   	push   esi
c0014e8a:	e8 e7 fb ff ff       	call   c0014a76 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e8f:	83 c4 10             	add    esp,0x10
c0014e92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e95:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e99:	74 05                	je     c0014ea0 <Vm::faultHandler(regs*)+0x415>
c0014e9b:	83 e8 04             	sub    eax,0x4
c0014e9e:	eb 27                	jmp    c0014ec7 <Vm::faultHandler(regs*)+0x43c>
c0014ea0:	83 c0 04             	add    eax,0x4
c0014ea3:	eb 22                	jmp    c0014ec7 <Vm::faultHandler(regs*)+0x43c>
c0014ea5:	66 ed                	in     ax,dx
c0014ea7:	0f b7 c0             	movzx  eax,ax
c0014eaa:	57                   	push   edi
c0014eab:	50                   	push   eax
c0014eac:	51                   	push   ecx
c0014ead:	56                   	push   esi
c0014eae:	e8 ad fb ff ff       	call   c0014a60 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014eb3:	83 c4 10             	add    esp,0x10
c0014eb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014eb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ebd:	74 05                	je     c0014ec4 <Vm::faultHandler(regs*)+0x439>
c0014ebf:	83 e8 02             	sub    eax,0x2
c0014ec2:	eb 03                	jmp    c0014ec7 <Vm::faultHandler(regs*)+0x43c>
c0014ec4:	83 c0 02             	add    eax,0x2
c0014ec7:	25 ff ff 00 00       	and    eax,0xffff
c0014ecc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014ecf:	e9 27 02 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014ed4:	8d 46 ff             	lea    eax,[esi-0x1]
c0014ed7:	3c 05                	cmp    al,0x5
c0014ed9:	77 24                	ja     c0014eff <Vm::faultHandler(regs*)+0x474>
c0014edb:	0f b6 c0             	movzx  eax,al
c0014ede:	ff 24 85 60 eb 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe14a0]
c0014ee5:	0f b7 fd             	movzx  edi,bp
c0014ee8:	eb 15                	jmp    c0014eff <Vm::faultHandler(regs*)+0x474>
c0014eea:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014eee:	eb 0f                	jmp    c0014eff <Vm::faultHandler(regs*)+0x474>
c0014ef0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014ef4:	eb 09                	jmp    c0014eff <Vm::faultHandler(regs*)+0x474>
c0014ef6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014efa:	eb 03                	jmp    c0014eff <Vm::faultHandler(regs*)+0x474>
c0014efc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014eff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f02:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f07:	74 29                	je     c0014f32 <Vm::faultHandler(regs*)+0x4a7>
c0014f09:	3d ff ff 00 00       	cmp    eax,0xffff
c0014f0e:	76 22                	jbe    c0014f32 <Vm::faultHandler(regs*)+0x4a7>
c0014f10:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f14:	50                   	push   eax
c0014f15:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f19:	50                   	push   eax
c0014f1a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f1e:	50                   	push   eax
c0014f1f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f23:	50                   	push   eax
c0014f24:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f28:	50                   	push   eax
c0014f29:	6a 6e                	push   0x6e
c0014f2b:	6a 6e                	push   0x6e
c0014f2d:	e9 8c 00 00 00       	jmp    c0014fbe <Vm::faultHandler(regs*)+0x533>
c0014f32:	0f b7 c0             	movzx  eax,ax
c0014f35:	52                   	push   edx
c0014f36:	52                   	push   edx
c0014f37:	50                   	push   eax
c0014f38:	57                   	push   edi
c0014f39:	e8 d9 fa ff ff       	call   c0014a17 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014f3e:	59                   	pop    ecx
c0014f3f:	0f b6 c0             	movzx  eax,al
c0014f42:	5e                   	pop    esi
c0014f43:	50                   	push   eax
c0014f44:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f48:	50                   	push   eax
c0014f49:	e8 92 f6 ff ff       	call   c00145e0 <Vm::outbv(unsigned short, unsigned char)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f54:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f58:	74 03                	je     c0014f5d <Vm::faultHandler(regs*)+0x4d2>
c0014f5a:	48                   	dec    eax
c0014f5b:	eb 01                	jmp    c0014f5e <Vm::faultHandler(regs*)+0x4d3>
c0014f5d:	40                   	inc    eax
c0014f5e:	0f b7 c0             	movzx  eax,ax
c0014f61:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f64:	e9 92 01 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0014f69:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f6c:	3c 05                	cmp    al,0x5
c0014f6e:	77 1f                	ja     c0014f8f <Vm::faultHandler(regs*)+0x504>
c0014f70:	0f b6 c0             	movzx  eax,al
c0014f73:	ff 24 85 78 eb 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1488]
c0014f7a:	89 ef                	mov    edi,ebp
c0014f7c:	eb 11                	jmp    c0014f8f <Vm::faultHandler(regs*)+0x504>
c0014f7e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f81:	eb 0c                	jmp    c0014f8f <Vm::faultHandler(regs*)+0x504>
c0014f83:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f86:	eb 07                	jmp    c0014f8f <Vm::faultHandler(regs*)+0x504>
c0014f88:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f8b:	eb 02                	jmp    c0014f8f <Vm::faultHandler(regs*)+0x504>
c0014f8d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f8f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f92:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f97:	74 37                	je     c0014fd0 <Vm::faultHandler(regs*)+0x545>
c0014f99:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014f9f:	76 2f                	jbe    c0014fd0 <Vm::faultHandler(regs*)+0x545>
c0014fa1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014fa5:	50                   	push   eax
c0014fa6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014faa:	50                   	push   eax
c0014fab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014faf:	50                   	push   eax
c0014fb0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fb4:	50                   	push   eax
c0014fb5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fb9:	50                   	push   eax
c0014fba:	6a 6f                	push   0x6f
c0014fbc:	6a 6f                	push   0x6f
c0014fbe:	68 06 eb 01 c0       	push   0xc001eb06
c0014fc3:	e8 24 5c ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0014fc8:	83 c4 20             	add    esp,0x20
c0014fcb:	e9 86 01 00 00       	jmp    c0015156 <Vm::faultHandler(regs*)+0x6cb>
c0014fd0:	0f b7 d7             	movzx  edx,di
c0014fd3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014fd6:	0f b7 c6             	movzx  eax,si
c0014fd9:	81 e1 00 04 00 00    	and    ecx,0x400
c0014fdf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014fe2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014fe7:	74 1d                	je     c0015006 <Vm::faultHandler(regs*)+0x57b>
c0014fe9:	55                   	push   ebp
c0014fea:	55                   	push   ebp
c0014feb:	50                   	push   eax
c0014fec:	52                   	push   edx
c0014fed:	e8 48 fa ff ff       	call   c0014a3a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	89 fa                	mov    edx,edi
c0014ff7:	ef                   	out    dx,eax
c0014ff8:	85 c9                	test   ecx,ecx
c0014ffa:	74 05                	je     c0015001 <Vm::faultHandler(regs*)+0x576>
c0014ffc:	83 ee 04             	sub    esi,0x4
c0014fff:	eb 21                	jmp    c0015022 <Vm::faultHandler(regs*)+0x597>
c0015001:	83 c6 04             	add    esi,0x4
c0015004:	eb 1c                	jmp    c0015022 <Vm::faultHandler(regs*)+0x597>
c0015006:	55                   	push   ebp
c0015007:	55                   	push   ebp
c0015008:	50                   	push   eax
c0015009:	52                   	push   edx
c001500a:	e8 19 fa ff ff       	call   c0014a28 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001500f:	83 c4 10             	add    esp,0x10
c0015012:	89 fa                	mov    edx,edi
c0015014:	66 ef                	out    dx,ax
c0015016:	85 c9                	test   ecx,ecx
c0015018:	74 05                	je     c001501f <Vm::faultHandler(regs*)+0x594>
c001501a:	83 ee 02             	sub    esi,0x2
c001501d:	eb 03                	jmp    c0015022 <Vm::faultHandler(regs*)+0x597>
c001501f:	83 c6 02             	add    esi,0x2
c0015022:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015028:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001502b:	e9 cb 00 00 00       	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c0015030:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015037:	83 ec 0c             	sub    esp,0xc
c001503a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001503e:	50                   	push   eax
c001503f:	e8 89 f5 ff ff       	call   c00145cd <Vm::inbv(unsigned short)>
c0015044:	0f b6 c0             	movzx  eax,al
c0015047:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001504a:	eb 3f                	jmp    c001508b <Vm::faultHandler(regs*)+0x600>
c001504c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015051:	74 07                	je     c001505a <Vm::faultHandler(regs*)+0x5cf>
c0015053:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015057:	ed                   	in     eax,dx
c0015058:	eb 14                	jmp    c001506e <Vm::faultHandler(regs*)+0x5e3>
c001505a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001505d:	66 31 f6             	xor    si,si
c0015060:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015063:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015067:	66 ed                	in     ax,dx
c0015069:	0f b7 c0             	movzx  eax,ax
c001506c:	09 f0                	or     eax,esi
c001506e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015071:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015075:	e9 84 00 00 00       	jmp    c00150fe <Vm::faultHandler(regs*)+0x673>
c001507a:	52                   	push   edx
c001507b:	52                   	push   edx
c001507c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015080:	50                   	push   eax
c0015081:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015085:	50                   	push   eax
c0015086:	e8 55 f5 ff ff       	call   c00145e0 <Vm::outbv(unsigned short, unsigned char)>
c001508b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001508f:	eb 53                	jmp    c00150e4 <Vm::faultHandler(regs*)+0x659>
c0015091:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015094:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015098:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001509d:	74 03                	je     c00150a2 <Vm::faultHandler(regs*)+0x617>
c001509f:	ef                   	out    dx,eax
c00150a0:	eb cf                	jmp    c0015071 <Vm::faultHandler(regs*)+0x5e6>
c00150a2:	66 ef                	out    dx,ax
c00150a4:	eb cb                	jmp    c0015071 <Vm::faultHandler(regs*)+0x5e6>
c00150a6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00150ad:	83 ec 0c             	sub    esp,0xc
c00150b0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00150b4:	50                   	push   eax
c00150b5:	e8 13 f5 ff ff       	call   c00145cd <Vm::inbv(unsigned short)>
c00150ba:	0f b6 c0             	movzx  eax,al
c00150bd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00150c0:	eb 1f                	jmp    c00150e1 <Vm::faultHandler(regs*)+0x656>
c00150c2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150c5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150ca:	74 03                	je     c00150cf <Vm::faultHandler(regs*)+0x644>
c00150cc:	ed                   	in     eax,dx
c00150cd:	eb 0d                	jmp    c00150dc <Vm::faultHandler(regs*)+0x651>
c00150cf:	66 ed                	in     ax,dx
c00150d1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00150d4:	0f b7 c0             	movzx  eax,ax
c00150d7:	66 31 d2             	xor    dx,dx
c00150da:	09 d0                	or     eax,edx
c00150dc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00150df:	eb 1a                	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c00150e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150e4:	83 c4 10             	add    esp,0x10
c00150e7:	eb 15                	jmp    c00150fe <Vm::faultHandler(regs*)+0x673>
c00150e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150ec:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150ef:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150f4:	74 03                	je     c00150f9 <Vm::faultHandler(regs*)+0x66e>
c00150f6:	ef                   	out    dx,eax
c00150f7:	eb 02                	jmp    c00150fb <Vm::faultHandler(regs*)+0x670>
c00150f9:	66 ef                	out    dx,ax
c00150fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150fe:	b0 01                	mov    al,0x1
c0015100:	eb 56                	jmp    c0015158 <Vm::faultHandler(regs*)+0x6cd>
c0015102:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015106:	50                   	push   eax
c0015107:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001510b:	50                   	push   eax
c001510c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015110:	50                   	push   eax
c0015111:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015115:	50                   	push   eax
c0015116:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001511a:	50                   	push   eax
c001511b:	52                   	push   edx
c001511c:	52                   	push   edx
c001511d:	68 33 eb 01 c0       	push   0xc001eb33
c0015122:	e8 c5 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015127:	83 c4 20             	add    esp,0x20
c001512a:	83 ec 0c             	sub    esp,0xc
c001512d:	6a 60                	push   0x60
c001512f:	e8 99 f4 ff ff       	call   c00145cd <Vm::inbv(unsigned short)>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	3c 1c                	cmp    al,0x1c
c0015139:	74 04                	je     c001513f <Vm::faultHandler(regs*)+0x6b4>
c001513b:	3c 5a                	cmp    al,0x5a
c001513d:	75 eb                	jne    c001512a <Vm::faultHandler(regs*)+0x69f>
c001513f:	3c 5a                	cmp    al,0x5a
c0015141:	74 04                	je     c0015147 <Vm::faultHandler(regs*)+0x6bc>
c0015143:	3c 1c                	cmp    al,0x1c
c0015145:	75 0f                	jne    c0015156 <Vm::faultHandler(regs*)+0x6cb>
c0015147:	83 ec 0c             	sub    esp,0xc
c001514a:	6a 60                	push   0x60
c001514c:	e8 7c f4 ff ff       	call   c00145cd <Vm::inbv(unsigned short)>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	eb e9                	jmp    c001513f <Vm::faultHandler(regs*)+0x6b4>
c0015156:	31 c0                	xor    eax,eax
c0015158:	83 c4 1c             	add    esp,0x1c
c001515b:	5b                   	pop    ebx
c001515c:	5e                   	pop    esi
c001515d:	5f                   	pop    edi
c001515e:	5d                   	pop    ebp
c001515f:	c3                   	ret    

c0015160 <noCopro(unsigned long)>:
c0015160:	c3                   	ret    

c0015161 <nmiHandler(regs*, void*)>:
c0015161:	83 ec 0c             	sub    esp,0xc
c0015164:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0015169:	83 ec 0c             	sub    esp,0xc
c001516c:	50                   	push   eax
c001516d:	e8 10 25 ff ff       	call   c0007682 <Computer::handleNMI()>
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	90                   	nop
c0015176:	83 c4 0c             	add    esp,0xc
c0015179:	c3                   	ret    

c001517a <doubleFault(regs*, void*)>:
c001517a:	55                   	push   ebp
c001517b:	89 e5                	mov    ebp,esp
c001517d:	83 ec 08             	sub    esp,0x8
c0015180:	83 ec 0c             	sub    esp,0xc
c0015183:	68 90 eb 01 c0       	push   0xc001eb90
c0015188:	e8 ae b5 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	90                   	nop
c0015191:	c9                   	leave  
c0015192:	c3                   	ret    

c0015193 <displayDebugInfo(regs*)>:
c0015193:	83 ec 1c             	sub    esp,0x1c
c0015196:	0f 20 c0             	mov    eax,cr0
c0015199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001519d:	0f 20 d0             	mov    eax,cr2
c00151a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00151a4:	0f 20 d8             	mov    eax,cr3
c00151a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151ab:	0f 20 e0             	mov    eax,cr4
c00151ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00151b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151b8:	83 ec 08             	sub    esp,0x8
c00151bb:	50                   	push   eax
c00151bc:	68 ac eb 01 c0       	push   0xc001ebac
c00151c1:	e8 26 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151c6:	83 c4 10             	add    esp,0x10
c00151c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151cd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151d0:	83 ec 08             	sub    esp,0x8
c00151d3:	50                   	push   eax
c00151d4:	68 9d eb 01 c0       	push   0xc001eb9d
c00151d9:	e8 0e 5a ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151e5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151e8:	83 ec 08             	sub    esp,0x8
c00151eb:	50                   	push   eax
c00151ec:	68 a8 eb 01 c0       	push   0xc001eba8
c00151f1:	e8 f6 59 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015200:	83 ec 08             	sub    esp,0x8
c0015203:	50                   	push   eax
c0015204:	68 b7 eb 01 c0       	push   0xc001ebb7
c0015209:	e8 de 59 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015215:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015218:	83 ec 08             	sub    esp,0x8
c001521b:	50                   	push   eax
c001521c:	68 c2 eb 01 c0       	push   0xc001ebc2
c0015221:	e8 c6 59 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	83 ec 08             	sub    esp,0x8
c001522c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015230:	68 cd eb 01 c0       	push   0xc001ebcd
c0015235:	e8 b2 59 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	83 ec 08             	sub    esp,0x8
c0015240:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015244:	68 d8 eb 01 c0       	push   0xc001ebd8
c0015249:	e8 9e 59 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001524e:	83 c4 10             	add    esp,0x10
c0015251:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015256:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001525c:	83 ec 0c             	sub    esp,0xc
c001525f:	50                   	push   eax
c0015260:	e8 28 39 ff ff       	call   c0008b8d <setActiveTerminal(VgaText*)>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001526d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015273:	83 ec 08             	sub    esp,0x8
c0015276:	68 e3 eb 01 c0       	push   0xc001ebe3
c001527b:	50                   	push   eax
c001527c:	e8 4b 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015289:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001528f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015294:	8b 12                	mov    edx,DWORD PTR [edx]
c0015296:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015299:	83 c2 0c             	add    edx,0xc
c001529c:	83 ec 08             	sub    esp,0x8
c001529f:	52                   	push   edx
c00152a0:	50                   	push   eax
c00152a1:	e8 26 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00152ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b4:	83 ec 08             	sub    esp,0x8
c00152b7:	68 ec eb 01 c0       	push   0xc001ebec
c00152bc:	50                   	push   eax
c00152bd:	e8 0a 3c ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00152ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152d4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00152d7:	83 ec 08             	sub    esp,0x8
c00152da:	52                   	push   edx
c00152db:	50                   	push   eax
c00152dc:	e8 a5 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00152e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ef:	83 ec 08             	sub    esp,0x8
c00152f2:	68 f4 eb 01 c0       	push   0xc001ebf4
c00152f7:	50                   	push   eax
c00152f8:	e8 cf 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015305:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001530b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001530f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015312:	83 ec 08             	sub    esp,0x8
c0015315:	52                   	push   edx
c0015316:	50                   	push   eax
c0015317:	e8 6a 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015324:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001532a:	83 ec 08             	sub    esp,0x8
c001532d:	68 fc eb 01 c0       	push   0xc001ebfc
c0015332:	50                   	push   eax
c0015333:	e8 94 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015338:	83 c4 10             	add    esp,0x10
c001533b:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015340:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015346:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001534a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001534d:	83 ec 08             	sub    esp,0x8
c0015350:	52                   	push   edx
c0015351:	50                   	push   eax
c0015352:	e8 2f 3b ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015357:	83 c4 10             	add    esp,0x10
c001535a:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001535f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015365:	83 ec 08             	sub    esp,0x8
c0015368:	68 04 ec 01 c0       	push   0xc001ec04
c001536d:	50                   	push   eax
c001536e:	e8 59 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001537b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015381:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015385:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015388:	83 ec 08             	sub    esp,0x8
c001538b:	52                   	push   edx
c001538c:	50                   	push   eax
c001538d:	e8 f4 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015392:	83 c4 10             	add    esp,0x10
c0015395:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001539a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153a0:	83 ec 08             	sub    esp,0x8
c00153a3:	68 0c ec 01 c0       	push   0xc001ec0c
c00153a8:	50                   	push   eax
c00153a9:	e8 1e 3b ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00153b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153c0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00153c3:	83 ec 08             	sub    esp,0x8
c00153c6:	52                   	push   edx
c00153c7:	50                   	push   eax
c00153c8:	e8 b9 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00153d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153db:	83 ec 08             	sub    esp,0x8
c00153de:	68 14 ec 01 c0       	push   0xc001ec14
c00153e3:	50                   	push   eax
c00153e4:	e8 e3 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c00153f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153fb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00153fe:	83 ec 08             	sub    esp,0x8
c0015401:	52                   	push   edx
c0015402:	50                   	push   eax
c0015403:	e8 7e 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015410:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015416:	83 ec 08             	sub    esp,0x8
c0015419:	68 1c ec 01 c0       	push   0xc001ec1c
c001541e:	50                   	push   eax
c001541f:	e8 a8 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001542c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015432:	83 ec 08             	sub    esp,0x8
c0015435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015439:	50                   	push   eax
c001543a:	e8 47 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015447:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001544d:	83 ec 08             	sub    esp,0x8
c0015450:	68 25 ec 01 c0       	push   0xc001ec25
c0015455:	50                   	push   eax
c0015456:	e8 71 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0015463:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015469:	83 ec 08             	sub    esp,0x8
c001546c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015470:	50                   	push   eax
c0015471:	e8 10 3a ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001547e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015484:	83 ec 08             	sub    esp,0x8
c0015487:	68 2d ec 01 c0       	push   0xc001ec2d
c001548c:	50                   	push   eax
c001548d:	e8 3a 3a ff ff       	call   c0008ecc <VgaText::puts(char const*)>
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c001549a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154a0:	83 ec 08             	sub    esp,0x8
c00154a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00154a7:	50                   	push   eax
c00154a8:	e8 d9 39 ff ff       	call   c0008e86 <VgaText::putx(unsigned int)>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	fa                   	cli    
c00154b1:	f4                   	hlt    
c00154b2:	eb fe                	jmp    c00154b2 <displayDebugInfo(regs*)+0x31f>

c00154b4 <displayProgramFault(char const*)>:
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	83 ec 0c             	sub    esp,0xc
c00154ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154be:	e8 29 57 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154d6:	85 c0                	test   eax,eax
c00154d8:	74 21                	je     c00154fb <displayProgramFault(char const*)+0x47>
c00154da:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154df:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154ea:	6a 04                	push   0x4
c00154ec:	6a 0f                	push   0xf
c00154ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154f2:	50                   	push   eax
c00154f3:	e8 46 3a ff ff       	call   c0008f3e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	90                   	nop
c00154fc:	83 c4 0c             	add    esp,0xc
c00154ff:	c3                   	ret    

c0015500 <gpFault(regs*, void*)>:
c0015500:	83 ec 1c             	sub    esp,0x1c
c0015503:	c7 05 b0 3d 02 c0 8b 4a 01 c0 	mov    DWORD PTR ds:0xc0023db0,0xc0014a8b
c001550d:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c0015512:	85 c0                	test   eax,eax
c0015514:	74 1c                	je     c0015532 <gpFault(regs*, void*)+0x32>
c0015516:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c001551b:	83 ec 0c             	sub    esp,0xc
c001551e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015522:	ff d0                	call   eax
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001552b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015530:	75 2e                	jne    c0015560 <gpFault(regs*, void*)+0x60>
c0015532:	83 ec 0c             	sub    esp,0xc
c0015535:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015539:	e8 55 fc ff ff       	call   c0015193 <displayDebugInfo(regs*)>
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	68 35 ec 01 c0       	push   0xc001ec35
c0015549:	e8 66 ff ff ff       	call   c00154b4 <displayProgramFault(char const*)>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	83 ec 0c             	sub    esp,0xc
c0015554:	6a 00                	push   0x0
c0015556:	e8 25 ef ff ff       	call   c0014480 <Thr::terminateFromIRQ(int)>
c001555b:	83 c4 10             	add    esp,0x10
c001555e:	eb 01                	jmp    c0015561 <gpFault(regs*, void*)+0x61>
c0015560:	90                   	nop
c0015561:	83 c4 1c             	add    esp,0x1c
c0015564:	c3                   	ret    

c0015565 <pgFault(regs*, void*)>:
c0015565:	83 ec 1c             	sub    esp,0x1c
c0015568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001556f:	0f 20 d0             	mov    eax,cr2
c0015572:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001557a:	83 ec 04             	sub    esp,0x4
c001557d:	52                   	push   edx
c001557e:	50                   	push   eax
c001557f:	68 a0 ec 01 c0       	push   0xc001eca0
c0015584:	e8 63 56 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015589:	83 c4 10             	add    esp,0x10
c001558c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015591:	8b 00                	mov    eax,DWORD PTR [eax]
c0015593:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015596:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001559c:	0f 20 d2             	mov    edx,cr2
c001559f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155a7:	83 ec 08             	sub    esp,0x8
c00155aa:	52                   	push   edx
c00155ab:	50                   	push   eax
c00155ac:	e8 6d 52 ff ff       	call   c000a81e <VAS::tryLoadBackOffDisk(unsigned long)>
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	84 c0                	test   al,al
c00155b6:	75 2e                	jne    c00155e6 <pgFault(regs*, void*)+0x81>
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155bf:	e8 cf fb ff ff       	call   c0015193 <displayDebugInfo(regs*)>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	83 ec 0c             	sub    esp,0xc
c00155ca:	68 4e ec 01 c0       	push   0xc001ec4e
c00155cf:	e8 e0 fe ff ff       	call   c00154b4 <displayProgramFault(char const*)>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	83 ec 0c             	sub    esp,0xc
c00155da:	6a 00                	push   0x0
c00155dc:	e8 9f ee ff ff       	call   c0014480 <Thr::terminateFromIRQ(int)>
c00155e1:	83 c4 10             	add    esp,0x10
c00155e4:	eb 01                	jmp    c00155e7 <pgFault(regs*, void*)+0x82>
c00155e6:	90                   	nop
c00155e7:	83 c4 1c             	add    esp,0x1c
c00155ea:	c3                   	ret    

c00155eb <otherISRHandler(regs*, void*)>:
c00155eb:	83 ec 0c             	sub    esp,0xc
c00155ee:	83 ec 0c             	sub    esp,0xc
c00155f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155f5:	e8 99 fb ff ff       	call   c0015193 <displayDebugInfo(regs*)>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	83 ec 0c             	sub    esp,0xc
c0015600:	68 c8 ec 01 c0       	push   0xc001ecc8
c0015605:	e8 aa fe ff ff       	call   c00154b4 <displayProgramFault(char const*)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	83 ec 0c             	sub    esp,0xc
c0015610:	6a 00                	push   0x0
c0015612:	e8 69 ee ff ff       	call   c0014480 <Thr::terminateFromIRQ(int)>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	90                   	nop
c001561b:	83 c4 0c             	add    esp,0xc
c001561e:	c3                   	ret    

c001561f <opcodeFault(regs*, void*)>:
c001561f:	55                   	push   ebp
c0015620:	89 e5                	mov    ebp,esp
c0015622:	83 ec 08             	sub    esp,0x8
c0015625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015628:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001562b:	83 ec 08             	sub    esp,0x8
c001562e:	50                   	push   eax
c001562f:	68 59 ec 01 c0       	push   0xc001ec59
c0015634:	e8 b3 55 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015639:	83 c4 10             	add    esp,0x10
c001563c:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0015641:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015647:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001564d:	84 c0                	test   al,al
c001564f:	74 21                	je     c0015672 <opcodeFault(regs*, void*)+0x53>
c0015651:	83 ec 0c             	sub    esp,0xc
c0015654:	68 f0 ec 01 c0       	push   0xc001ecf0
c0015659:	e8 8e 55 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015667:	8d 50 19             	lea    edx,[eax+0x19]
c001566a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015670:	eb 2b                	jmp    c001569d <opcodeFault(regs*, void*)+0x7e>
c0015672:	83 ec 0c             	sub    esp,0xc
c0015675:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015678:	e8 16 fb ff ff       	call   c0015193 <displayDebugInfo(regs*)>
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	83 ec 0c             	sub    esp,0xc
c0015683:	68 67 ec 01 c0       	push   0xc001ec67
c0015688:	e8 27 fe ff ff       	call   c00154b4 <displayProgramFault(char const*)>
c001568d:	83 c4 10             	add    esp,0x10
c0015690:	83 ec 0c             	sub    esp,0xc
c0015693:	6a 00                	push   0x0
c0015695:	e8 e6 ed ff ff       	call   c0014480 <Thr::terminateFromIRQ(int)>
c001569a:	83 c4 10             	add    esp,0x10
c001569d:	c9                   	leave  
c001569e:	c3                   	ret    

c001569f <i386SaveCoprocessor(void*)>:
c001569f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a3:	83 c0 3f             	add    eax,0x3f
c00156a6:	83 e0 c0             	and    eax,0xffffffc0
c00156a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156ad:	ff 25 ac 3d 02 c0    	jmp    DWORD PTR ds:0xc0023dac

c00156b3 <i386LoadCoprocessor(void*)>:
c00156b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156b7:	83 c0 3f             	add    eax,0x3f
c00156ba:	83 e0 c0             	and    eax,0xffffffc0
c00156bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156c1:	ff 25 a8 3d 02 c0    	jmp    DWORD PTR ds:0xc0023da8

c00156c7 <x87EmulHandler(regs*, void*)>:
c00156c7:	53                   	push   ebx
c00156c8:	83 ec 08             	sub    esp,0x8
c00156cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156d0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00156d4:	74 10                	je     c00156e6 <x87EmulHandler(regs*, void*)+0x1f>
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	68 74 ec 01 c0       	push   0xc001ec74
c00156de:	e8 58 b0 ff ff       	call   c001073b <Krnl::panic(char const*)>
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	0f 20 c0             	mov    eax,cr0
c00156e9:	a8 08                	test   al,0x8
c00156eb:	74 59                	je     c0015746 <x87EmulHandler(regs*, void*)+0x7f>
c00156ed:	0f 06                	clts   
c00156ef:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c00156f4:	85 c0                	test   eax,eax
c00156f6:	74 0e                	je     c0015706 <x87EmulHandler(regs*, void*)+0x3f>
c00156f8:	83 ec 0c             	sub    esp,0xc
c00156fb:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156fe:	e8 9c ff ff ff       	call   c001569f <i386SaveCoprocessor(void*)>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001570c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015710:	75 12                	jne    c0015724 <x87EmulHandler(regs*, void*)+0x5d>
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	68 40 02 00 00       	push   0x240
c001571a:	e8 3e 27 ff ff       	call   c0007e5d <malloc>
c001571f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015722:	eb 10                	jmp    c0015734 <x87EmulHandler(regs*, void*)+0x6d>
c0015724:	83 ec 0c             	sub    esp,0xc
c0015727:	a1 a4 3d 02 c0       	mov    eax,ds:0xc0023da4
c001572c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001572f:	e8 7f ff ff ff       	call   c00156b3 <i386LoadCoprocessor(void*)>
c0015734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015739:	83 c4 10             	add    esp,0x10
c001573c:	a3 a4 3d 02 c0       	mov    ds:0xc0023da4,eax
c0015741:	83 c4 08             	add    esp,0x8
c0015744:	5b                   	pop    ebx
c0015745:	c3                   	ret    
c0015746:	83 ec 0c             	sub    esp,0xc
c0015749:	68 88 ec 01 c0       	push   0xc001ec88
c001574e:	e8 99 54 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0015753:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001575b:	83 c4 18             	add    esp,0x18
c001575e:	5b                   	pop    ebx
c001575f:	e9 1c ed ff ff       	jmp    c0014480 <Thr::terminateFromIRQ(int)>

c0015764 <HalInitialiseCoprocessor()>:
c0015764:	83 ec 10             	sub    esp,0x10
c0015767:	c7 05 a4 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023da4,0x0
c0015771:	6a 00                	push   0x0
c0015773:	68 c7 56 01 c0       	push   0xc00156c7
c0015778:	6a 07                	push   0x7
c001577a:	e8 e1 6d ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001577f:	e8 bc 62 00 00       	call   c001ba40 <avxDetect>
c0015784:	83 c4 10             	add    esp,0x10
c0015787:	85 c0                	test   eax,eax
c0015789:	74 1c                	je     c00157a7 <HalInitialiseCoprocessor()+0x43>
c001578b:	c7 05 ac 3d 02 c0 6a ba 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001ba6a
c0015795:	c7 05 a8 3d 02 c0 7b ba 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc001ba7b
c001579f:	83 c4 0c             	add    esp,0xc
c00157a2:	e9 e5 62 00 00       	jmp    c001ba8c <avxInit>
c00157a7:	e8 14 65 00 00       	call   c001bcc0 <absolutelyNoChanceInHell>
c00157ac:	85 c0                	test   eax,eax
c00157ae:	74 1c                	je     c00157cc <HalInitialiseCoprocessor()+0x68>
c00157b0:	c7 05 ac 3d 02 c0 d8 bc 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001bcd8
c00157ba:	c7 05 a8 3d 02 c0 e0 bc 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc001bce0
c00157c4:	83 c4 0c             	add    esp,0xc
c00157c7:	e9 1c 65 00 00       	jmp    c001bce8 <sseInit>
c00157cc:	e8 35 65 00 00       	call   c001bd06 <x87Detect>
c00157d1:	85 c0                	test   eax,eax
c00157d3:	74 1c                	je     c00157f1 <HalInitialiseCoprocessor()+0x8d>
c00157d5:	c7 05 ac 3d 02 c0 21 bd 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001bd21
c00157df:	c7 05 a8 3d 02 c0 28 bd 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc001bd28
c00157e9:	83 c4 0c             	add    esp,0xc
c00157ec:	e9 3e 65 00 00       	jmp    c001bd2f <x87Init>
c00157f1:	c7 05 ac 3d 02 c0 60 51 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc0015160
c00157fb:	c7 05 a8 3d 02 c0 60 51 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc0015160
c0015805:	0f 20 c0             	mov    eax,cr0
c0015808:	83 c8 04             	or     eax,0x4
c001580b:	0f 22 c0             	mov    cr0,eax
c001580e:	83 c4 0c             	add    esp,0xc
c0015811:	c3                   	ret    

c0015812 <HalPanic(char const*)>:
c0015812:	e9 24 af ff ff       	jmp    c001073b <Krnl::panic(char const*)>

c0015817 <HalQueryPerformanceCounter()>:
c0015817:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001581c:	31 d2                	xor    edx,edx
c001581e:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015824:	31 c0                	xor    eax,eax
c0015826:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001582d:	74 02                	je     c0015831 <HalQueryPerformanceCounter()+0x1a>
c001582f:	0f 31                	rdtsc  
c0015831:	c3                   	ret    

c0015832 <HalInitialise()>:
c0015832:	53                   	push   ebx
c0015833:	83 ec 08             	sub    esp,0x8
c0015836:	e8 58 6f ff ff       	call   c000c793 <setupINTS()>
c001583b:	80 3d 00 31 02 c0 00 	cmp    BYTE PTR ds:0xc0023100,0x0
c0015842:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0015847:	75 07                	jne    c0015850 <HalInitialise()+0x1e>
c0015849:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015850:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015856:	83 e0 01             	and    eax,0x1
c0015859:	a2 a0 3d 02 c0       	mov    ds:0xc0023da0,al
c001585e:	e8 a9 02 00 00       	call   c0015b0c <picOpen()>
c0015863:	80 3d a0 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023da0,0x0
c001586a:	74 0a                	je     c0015876 <HalInitialise()+0x44>
c001586c:	e8 e3 01 00 00       	call   c0015a54 <picDisable()>
c0015871:	e8 42 5b 00 00       	call   c001b3b8 <apicOpen()>
c0015876:	bb 0f 00 00 00       	mov    ebx,0xf
c001587b:	50                   	push   eax
c001587c:	6a 00                	push   0x0
c001587e:	68 eb 55 01 c0       	push   0xc00155eb
c0015883:	6a 00                	push   0x0
c0015885:	e8 d6 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588a:	83 c4 0c             	add    esp,0xc
c001588d:	6a 00                	push   0x0
c001588f:	68 eb 55 01 c0       	push   0xc00155eb
c0015894:	6a 01                	push   0x1
c0015896:	e8 c5 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589b:	83 c4 0c             	add    esp,0xc
c001589e:	6a 00                	push   0x0
c00158a0:	68 61 51 01 c0       	push   0xc0015161
c00158a5:	6a 02                	push   0x2
c00158a7:	e8 b4 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ac:	83 c4 0c             	add    esp,0xc
c00158af:	6a 00                	push   0x0
c00158b1:	68 eb 55 01 c0       	push   0xc00155eb
c00158b6:	6a 03                	push   0x3
c00158b8:	e8 a3 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158bd:	83 c4 0c             	add    esp,0xc
c00158c0:	6a 00                	push   0x0
c00158c2:	68 eb 55 01 c0       	push   0xc00155eb
c00158c7:	6a 04                	push   0x4
c00158c9:	e8 92 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ce:	83 c4 0c             	add    esp,0xc
c00158d1:	6a 00                	push   0x0
c00158d3:	68 eb 55 01 c0       	push   0xc00155eb
c00158d8:	6a 05                	push   0x5
c00158da:	e8 81 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158df:	83 c4 0c             	add    esp,0xc
c00158e2:	6a 00                	push   0x0
c00158e4:	68 1f 56 01 c0       	push   0xc001561f
c00158e9:	6a 06                	push   0x6
c00158eb:	e8 70 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f0:	83 c4 0c             	add    esp,0xc
c00158f3:	6a 00                	push   0x0
c00158f5:	68 7a 51 01 c0       	push   0xc001517a
c00158fa:	6a 08                	push   0x8
c00158fc:	e8 5f 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015901:	83 c4 0c             	add    esp,0xc
c0015904:	6a 00                	push   0x0
c0015906:	68 eb 55 01 c0       	push   0xc00155eb
c001590b:	6a 09                	push   0x9
c001590d:	e8 4e 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015912:	83 c4 0c             	add    esp,0xc
c0015915:	6a 00                	push   0x0
c0015917:	68 eb 55 01 c0       	push   0xc00155eb
c001591c:	6a 0a                	push   0xa
c001591e:	e8 3d 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015923:	83 c4 0c             	add    esp,0xc
c0015926:	6a 00                	push   0x0
c0015928:	68 eb 55 01 c0       	push   0xc00155eb
c001592d:	6a 0b                	push   0xb
c001592f:	e8 2c 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015934:	83 c4 0c             	add    esp,0xc
c0015937:	6a 00                	push   0x0
c0015939:	68 00 55 01 c0       	push   0xc0015500
c001593e:	6a 0d                	push   0xd
c0015940:	e8 1b 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015945:	83 c4 0c             	add    esp,0xc
c0015948:	6a 00                	push   0x0
c001594a:	68 65 55 01 c0       	push   0xc0015565
c001594f:	6a 0e                	push   0xe
c0015951:	e8 0a 6c ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	50                   	push   eax
c001595a:	6a 00                	push   0x0
c001595c:	68 eb 55 01 c0       	push   0xc00155eb
c0015961:	53                   	push   ebx
c0015962:	43                   	inc    ebx
c0015963:	e8 f8 6b ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015968:	83 c4 10             	add    esp,0x10
c001596b:	83 fb 1e             	cmp    ebx,0x1e
c001596e:	75 e9                	jne    c0015959 <HalInitialise()+0x127>
c0015970:	50                   	push   eax
c0015971:	6a 00                	push   0x0
c0015973:	68 e1 20 01 c0       	push   0xc00120e1
c0015978:	6a 60                	push   0x60
c001597a:	e8 e1 6b ff ff       	call   c000c560 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001597f:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0015984:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001598e:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015995:	e8 c3 24 ff ff       	call   c0007e5d <malloc>
c001599a:	89 04 24             	mov    DWORD PTR [esp],eax
c001599d:	89 c3                	mov    ebx,eax
c001599f:	e8 30 09 00 00       	call   c00162d4 <RTC::RTC()>
c00159a4:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159ae:	5a                   	pop    edx
c00159af:	59                   	pop    ecx
c00159b0:	53                   	push   ebx
c00159b1:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c00159b7:	e8 70 66 ff ff       	call   c000c02c <Device::addChild(Device*)>
c00159bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159be:	6a 00                	push   0x0
c00159c0:	6a 00                	push   0x0
c00159c2:	6a 00                	push   0x0
c00159c4:	53                   	push   ebx
c00159c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159c8:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c00159cd:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159d3:	83 c4 28             	add    esp,0x28
c00159d6:	5b                   	pop    ebx
c00159d7:	c3                   	ret    

c00159d8 <HalMakeBeep(int)>:
c00159d8:	53                   	push   ebx
c00159d9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159dd:	85 db                	test   ebx,ebx
c00159df:	75 07                	jne    c00159e8 <HalMakeBeep(int)+0x10>
c00159e1:	e4 61                	in     al,0x61
c00159e3:	83 e0 fc             	and    eax,0xfffffffc
c00159e6:	eb 26                	jmp    c0015a0e <HalMakeBeep(int)+0x36>
c00159e8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159ed:	99                   	cdq    
c00159ee:	f7 fb                	idiv   ebx
c00159f0:	89 c1                	mov    ecx,eax
c00159f2:	b0 b6                	mov    al,0xb6
c00159f4:	e6 43                	out    0x43,al
c00159f6:	88 c8                	mov    al,cl
c00159f8:	e6 42                	out    0x42,al
c00159fa:	89 c8                	mov    eax,ecx
c00159fc:	c1 e8 08             	shr    eax,0x8
c00159ff:	e6 42                	out    0x42,al
c0015a01:	e4 61                	in     al,0x61
c0015a03:	88 c2                	mov    dl,al
c0015a05:	83 ca 03             	or     edx,0x3
c0015a08:	38 c2                	cmp    dl,al
c0015a0a:	74 04                	je     c0015a10 <HalMakeBeep(int)+0x38>
c0015a0c:	88 d0                	mov    al,dl
c0015a0e:	e6 61                	out    0x61,al
c0015a10:	5b                   	pop    ebx
c0015a11:	c3                   	ret    

c0015a12 <HalGetRand()>:
c0015a12:	31 c0                	xor    eax,eax
c0015a14:	c3                   	ret    

c0015a15 <HalEndOfInterrupt(int)>:
c0015a15:	80 3d a0 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023da0,0x0
c0015a1c:	74 23                	je     c0015a41 <HalEndOfInterrupt(int)+0x2c>
c0015a1e:	83 ec 14             	sub    esp,0x14
c0015a21:	6a 1b                	push   0x1b
c0015a23:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015a29:	e8 6c 1a ff ff       	call   c000749a <Computer::rdmsr(unsigned int)>
c0015a2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a33:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a3d:	83 c4 1c             	add    esp,0x1c
c0015a40:	c3                   	ret    
c0015a41:	e9 56 02 00 00       	jmp    c0015c9c <picEOI(int)>

c0015a46 <HalRestart()>:
c0015a46:	c3                   	ret    

c0015a47 <HalShutdown()>:
c0015a47:	c3                   	ret    

c0015a48 <HalSleep()>:
c0015a48:	c3                   	ret    
c0015a49:	66 90                	xchg   ax,ax
c0015a4b:	90                   	nop

c0015a4c <picIoWait()>:
c0015a4c:	eb 00                	jmp    c0015a4e <picIoWait()+0x2>
c0015a4e:	eb 00                	jmp    c0015a50 <picIoWait()+0x4>
c0015a50:	90                   	nop
c0015a51:	c3                   	ret    
c0015a52:	66 90                	xchg   ax,ax

c0015a54 <picDisable()>:
c0015a54:	83 ec 10             	sub    esp,0x10
c0015a57:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a5e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a6c:	ee                   	out    dx,al
c0015a6d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a74:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a79:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a7d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a82:	ee                   	out    dx,al
c0015a83:	90                   	nop
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	c3                   	ret    

c0015a88 <picGetIRQReg(int)>:
c0015a88:	83 ec 10             	sub    esp,0x10
c0015a8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a8f:	25 ff 00 00 00       	and    eax,0xff
c0015a94:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a9b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a9f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015aa3:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015aa8:	ee                   	out    dx,al
c0015aa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aad:	25 ff 00 00 00       	and    eax,0xff
c0015ab2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015ab9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015abd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ac1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015ac6:	ee                   	out    dx,al
c0015ac7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ace:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ad3:	89 c2                	mov    edx,eax
c0015ad5:	ec                   	in     al,dx
c0015ad6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015ada:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ade:	25 ff 00 00 00       	and    eax,0xff
c0015ae3:	c1 e0 08             	shl    eax,0x8
c0015ae6:	89 c1                	mov    ecx,eax
c0015ae8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015aef:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015af4:	89 c2                	mov    edx,eax
c0015af6:	ec                   	in     al,dx
c0015af7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015afb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015aff:	25 ff 00 00 00       	and    eax,0xff
c0015b04:	09 c8                	or     eax,ecx
c0015b06:	83 c4 10             	add    esp,0x10
c0015b09:	c3                   	ret    
c0015b0a:	66 90                	xchg   ax,ax

c0015b0c <picOpen()>:
c0015b0c:	83 ec 50             	sub    esp,0x50
c0015b0f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b16:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b23:	ee                   	out    dx,al
c0015b24:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b2b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b30:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b38:	ee                   	out    dx,al
c0015b39:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b41:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b49:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b54:	89 c2                	mov    edx,eax
c0015b56:	ec                   	in     al,dx
c0015b57:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b5b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b5f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b63:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b6e:	89 c2                	mov    edx,eax
c0015b70:	ec                   	in     al,dx
c0015b71:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b75:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b79:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b7d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b84:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b89:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b91:	ee                   	out    dx,al
c0015b92:	e8 b5 fe ff ff       	call   c0015a4c <picIoWait()>
c0015b97:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b9e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015ba3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015ba7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015bab:	ee                   	out    dx,al
c0015bac:	e8 9b fe ff ff       	call   c0015a4c <picIoWait()>
c0015bb1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bb5:	25 ff 00 00 00       	and    eax,0xff
c0015bba:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bc1:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bc5:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bcd:	ee                   	out    dx,al
c0015bce:	e8 79 fe ff ff       	call   c0015a4c <picIoWait()>
c0015bd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bd7:	25 ff 00 00 00       	and    eax,0xff
c0015bdc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015be3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015be7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015beb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bef:	ee                   	out    dx,al
c0015bf0:	e8 57 fe ff ff       	call   c0015a4c <picIoWait()>
c0015bf5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bfc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c01:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c09:	ee                   	out    dx,al
c0015c0a:	e8 3d fe ff ff       	call   c0015a4c <picIoWait()>
c0015c0f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c16:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c1b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c23:	ee                   	out    dx,al
c0015c24:	e8 23 fe ff ff       	call   c0015a4c <picIoWait()>
c0015c29:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c30:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c35:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c3d:	ee                   	out    dx,al
c0015c3e:	e8 09 fe ff ff       	call   c0015a4c <picIoWait()>
c0015c43:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c4a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c4f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c57:	ee                   	out    dx,al
c0015c58:	e8 ef fd ff ff       	call   c0015a4c <picIoWait()>
c0015c5d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c61:	25 ff 00 00 00       	and    eax,0xff
c0015c66:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c6d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c71:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c79:	ee                   	out    dx,al
c0015c7a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c7e:	25 ff 00 00 00       	and    eax,0xff
c0015c83:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c8a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c8e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c92:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c96:	ee                   	out    dx,al
c0015c97:	90                   	nop
c0015c98:	83 c4 50             	add    esp,0x50
c0015c9b:	c3                   	ret    

c0015c9c <picEOI(int)>:
c0015c9c:	83 ec 10             	sub    esp,0x10
c0015c9f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ca4:	75 22                	jne    c0015cc8 <picEOI(int)+0x2c>
c0015ca6:	6a 0b                	push   0xb
c0015ca8:	e8 db fd ff ff       	call   c0015a88 <picGetIRQReg(int)>
c0015cad:	83 c4 04             	add    esp,0x4
c0015cb0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cb5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cba:	25 ff ff 00 00       	and    eax,0xffff
c0015cbf:	25 80 00 00 00       	and    eax,0x80
c0015cc4:	74 72                	je     c0015d38 <picEOI(int)+0x9c>
c0015cc6:	66 90                	xchg   ax,ax
c0015cc8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015ccd:	75 31                	jne    c0015d00 <picEOI(int)+0x64>
c0015ccf:	6a 0b                	push   0xb
c0015cd1:	e8 b2 fd ff ff       	call   c0015a88 <picGetIRQReg(int)>
c0015cd6:	83 c4 04             	add    esp,0x4
c0015cd9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce2:	66 85 c0             	test   ax,ax
c0015ce5:	78 19                	js     c0015d00 <picEOI(int)+0x64>
c0015ce7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015cee:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015cf3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015cf7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cfc:	ee                   	out    dx,al
c0015cfd:	eb 3d                	jmp    c0015d3c <picEOI(int)+0xa0>
c0015cff:	90                   	nop
c0015d00:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d05:	7e 19                	jle    c0015d20 <picEOI(int)+0x84>
c0015d07:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d0e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d13:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d17:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d1c:	ee                   	out    dx,al
c0015d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d20:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d27:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d2c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d30:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d35:	ee                   	out    dx,al
c0015d36:	eb 04                	jmp    c0015d3c <picEOI(int)+0xa0>
c0015d38:	90                   	nop
c0015d39:	8d 76 00             	lea    esi,[esi+0x0]
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	c3                   	ret    

c0015d40 <RTC::open(int, int, void*)>:
c0015d40:	31 c0                	xor    eax,eax
c0015d42:	c3                   	ret    
c0015d43:	90                   	nop

c0015d44 <RTC::close(int, int, void*)>:
c0015d44:	31 c0                	xor    eax,eax
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <RTC::timeInSecondsUTC()>:
c0015d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d4c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d52:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d58:	c3                   	ret    
c0015d59:	90                   	nop

c0015d5a <RTC::timeInDatetimeUTC()>:
c0015d5a:	53                   	push   ebx
c0015d5b:	83 ec 14             	sub    esp,0x14
c0015d5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d66:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d68:	50                   	push   eax
c0015d69:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d6c:	83 c4 0c             	add    esp,0xc
c0015d6f:	52                   	push   edx
c0015d70:	50                   	push   eax
c0015d71:	53                   	push   ebx
c0015d72:	e8 29 60 ff ff       	call   c000bda0 <secondsToDatetime(unsigned long long)>
c0015d77:	89 d8                	mov    eax,ebx
c0015d79:	83 c4 14             	add    esp,0x14
c0015d7c:	5b                   	pop    ebx
c0015d7d:	c2 04 00             	ret    0x4

c0015d80 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d80:	56                   	push   esi
c0015d81:	53                   	push   ebx
c0015d82:	83 ec 14             	sub    esp,0x14
c0015d85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d8b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d92:	52                   	push   edx
c0015d93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d9b:	50                   	push   eax
c0015d9c:	e8 ff 5f ff ff       	call   c000bda0 <secondsToDatetime(unsigned long long)>
c0015da1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015da5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015da9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015dad:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015db1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015db5:	89 f0                	mov    eax,esi
c0015db7:	83 c4 20             	add    esp,0x20
c0015dba:	5b                   	pop    ebx
c0015dbb:	5e                   	pop    esi
c0015dbc:	ff e0                	jmp    eax

c0015dbe <RTC::~RTC()>:
c0015dbe:	83 ec 0c             	sub    esp,0xc
c0015dc1:	ba 30 ed 01 c0       	mov    edx,0xc001ed30
c0015dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dca:	89 10                	mov    DWORD PTR [eax],edx
c0015dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd0:	83 ec 0c             	sub    esp,0xc
c0015dd3:	50                   	push   eax
c0015dd4:	e8 4b 5d ff ff       	call   c000bb24 <Clock::~Clock()>
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	90                   	nop
c0015ddd:	83 c4 0c             	add    esp,0xc
c0015de0:	c3                   	ret    
c0015de1:	90                   	nop

c0015de2 <RTC::~RTC()>:
c0015de2:	83 ec 0c             	sub    esp,0xc
c0015de5:	83 ec 0c             	sub    esp,0xc
c0015de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dec:	e8 cd ff ff ff       	call   c0015dbe <RTC::~RTC()>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	83 ec 08             	sub    esp,0x8
c0015df7:	68 60 01 00 00       	push   0x160
c0015dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e00:	e8 f1 4c ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	83 c4 0c             	add    esp,0xc
c0015e0b:	c3                   	ret    

c0015e0c <RTC::get_update_in_progress_flag()>:
c0015e0c:	83 ec 14             	sub    esp,0x14
c0015e0f:	6a 0a                	push   0xa
c0015e11:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015e17:	e8 32 17 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015e1c:	83 c4 1c             	add    esp,0x1c
c0015e1f:	c0 e8 07             	shr    al,0x7
c0015e22:	c3                   	ret    
c0015e23:	90                   	nop

c0015e24 <RTC::completeRTCRefresh()>:
c0015e24:	55                   	push   ebp
c0015e25:	57                   	push   edi
c0015e26:	56                   	push   esi
c0015e27:	53                   	push   ebx
c0015e28:	83 ec 2c             	sub    esp,0x2c
c0015e2b:	8b 1d 0c 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e0c
c0015e31:	83 ec 0c             	sub    esp,0xc
c0015e34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e38:	e8 cf ff ff ff       	call   c0015e0c <RTC::get_update_in_progress_flag()>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	84 c0                	test   al,al
c0015e42:	74 0e                	je     c0015e52 <RTC::completeRTCRefresh()+0x2e>
c0015e44:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e4a:	3b 05 0c 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022e0c
c0015e50:	73 df                	jae    c0015e31 <RTC::completeRTCRefresh()+0xd>
c0015e52:	55                   	push   ebp
c0015e53:	55                   	push   ebp
c0015e54:	6a 00                	push   0x0
c0015e56:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015e5c:	e8 ed 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015e61:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e65:	58                   	pop    eax
c0015e66:	5a                   	pop    edx
c0015e67:	6a 02                	push   0x2
c0015e69:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015e6f:	e8 da 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015e74:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e78:	59                   	pop    ecx
c0015e79:	5b                   	pop    ebx
c0015e7a:	6a 04                	push   0x4
c0015e7c:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015e82:	e8 c7 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015e87:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e8b:	5e                   	pop    esi
c0015e8c:	5f                   	pop    edi
c0015e8d:	6a 07                	push   0x7
c0015e8f:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015e95:	e8 b4 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015e9a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e9e:	5d                   	pop    ebp
c0015e9f:	58                   	pop    eax
c0015ea0:	6a 08                	push   0x8
c0015ea2:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015ea8:	e8 a1 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015ead:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015eb1:	58                   	pop    eax
c0015eb2:	5a                   	pop    edx
c0015eb3:	6a 09                	push   0x9
c0015eb5:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015ebb:	e8 8e 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015ec0:	83 c4 10             	add    esp,0x10
c0015ec3:	0f b6 e8             	movzx  ebp,al
c0015ec6:	8b 1d 0c 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e0c
c0015ecc:	83 ec 0c             	sub    esp,0xc
c0015ecf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ed3:	e8 34 ff ff ff       	call   c0015e0c <RTC::get_update_in_progress_flag()>
c0015ed8:	83 c4 10             	add    esp,0x10
c0015edb:	84 c0                	test   al,al
c0015edd:	74 0e                	je     c0015eed <RTC::completeRTCRefresh()+0xc9>
c0015edf:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ee5:	3b 05 0c 2e 02 c0    	cmp    eax,DWORD PTR ds:0xc0022e0c
c0015eeb:	73 df                	jae    c0015ecc <RTC::completeRTCRefresh()+0xa8>
c0015eed:	50                   	push   eax
c0015eee:	50                   	push   eax
c0015eef:	6a 00                	push   0x0
c0015ef1:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015ef7:	e8 52 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015efc:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f00:	58                   	pop    eax
c0015f01:	5a                   	pop    edx
c0015f02:	6a 02                	push   0x2
c0015f04:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015f0a:	e8 3f 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015f0f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f13:	59                   	pop    ecx
c0015f14:	5b                   	pop    ebx
c0015f15:	6a 04                	push   0x4
c0015f17:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015f1d:	e8 2c 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015f22:	5e                   	pop    esi
c0015f23:	88 c3                	mov    bl,al
c0015f25:	5f                   	pop    edi
c0015f26:	6a 07                	push   0x7
c0015f28:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015f2e:	e8 1b 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015f33:	89 c6                	mov    esi,eax
c0015f35:	58                   	pop    eax
c0015f36:	5a                   	pop    edx
c0015f37:	6a 08                	push   0x8
c0015f39:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015f3f:	e8 0a 16 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015f44:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f48:	59                   	pop    ecx
c0015f49:	5f                   	pop    edi
c0015f4a:	6a 09                	push   0x9
c0015f4c:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015f52:	e8 f7 15 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015f57:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f5b:	0f b6 f8             	movzx  edi,al
c0015f5e:	83 c4 10             	add    esp,0x10
c0015f61:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f65:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f69:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f6d:	89 f1                	mov    ecx,esi
c0015f6f:	0f 94 c0             	sete   al
c0015f72:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f76:	0f 94 c2             	sete   dl
c0015f79:	21 d0                	and    eax,edx
c0015f7b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f7f:	0f 94 c2             	sete   dl
c0015f82:	21 c2                	and    edx,eax
c0015f84:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f88:	0f 94 c0             	sete   al
c0015f8b:	21 d0                	and    eax,edx
c0015f8d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f91:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f95:	0f 94 c1             	sete   cl
c0015f98:	84 c8                	test   al,cl
c0015f9a:	75 29                	jne    c0015fc5 <RTC::completeRTCRefresh()+0x1a1>
c0015f9c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fa0:	89 fd                	mov    ebp,edi
c0015fa2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015fa6:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015faa:	89 f0                	mov    eax,esi
c0015fac:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fb0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fb4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fb8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fbc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fc0:	e9 01 ff ff ff       	jmp    c0015ec6 <RTC::completeRTCRefresh()+0xa2>
c0015fc5:	39 fd                	cmp    ebp,edi
c0015fc7:	75 d3                	jne    c0015f9c <RTC::completeRTCRefresh()+0x178>
c0015fc9:	55                   	push   ebp
c0015fca:	55                   	push   ebp
c0015fcb:	6a 0b                	push   0xb
c0015fcd:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0015fd3:	e8 76 15 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c0015fd8:	83 c4 10             	add    esp,0x10
c0015fdb:	89 c5                	mov    ebp,eax
c0015fdd:	a8 04                	test   al,0x4
c0015fdf:	75 78                	jne    c0016059 <RTC::completeRTCRefresh()+0x235>
c0015fe1:	b1 0a                	mov    cl,0xa
c0015fe3:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fe7:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015feb:	83 e2 0f             	and    edx,0xf
c0015fee:	c0 e8 04             	shr    al,0x4
c0015ff1:	c1 ef 04             	shr    edi,0x4
c0015ff4:	f6 e1                	mul    cl
c0015ff6:	6b ff 0a             	imul   edi,edi,0xa
c0015ff9:	01 d0                	add    eax,edx
c0015ffb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fff:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016003:	83 e2 0f             	and    edx,0xf
c0016006:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001600a:	c0 e8 04             	shr    al,0x4
c001600d:	f6 e1                	mul    cl
c001600f:	01 d0                	add    eax,edx
c0016011:	88 da                	mov    dl,bl
c0016013:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016017:	83 e2 0f             	and    edx,0xf
c001601a:	88 d8                	mov    al,bl
c001601c:	83 e3 80             	and    ebx,0xffffff80
c001601f:	c0 e8 04             	shr    al,0x4
c0016022:	83 e0 07             	and    eax,0x7
c0016025:	f6 e1                	mul    cl
c0016027:	01 d0                	add    eax,edx
c0016029:	89 f2                	mov    edx,esi
c001602b:	09 c3                	or     ebx,eax
c001602d:	83 e2 0f             	and    edx,0xf
c0016030:	89 f0                	mov    eax,esi
c0016032:	c0 e8 04             	shr    al,0x4
c0016035:	f6 e1                	mul    cl
c0016037:	8d 34 02             	lea    esi,[edx+eax*1]
c001603a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001603e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016042:	83 e2 0f             	and    edx,0xf
c0016045:	c0 e8 04             	shr    al,0x4
c0016048:	f6 e1                	mul    cl
c001604a:	01 d0                	add    eax,edx
c001604c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016050:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016054:	83 e0 0f             	and    eax,0xf
c0016057:	01 c7                	add    edi,eax
c0016059:	83 e5 02             	and    ebp,0x2
c001605c:	75 14                	jne    c0016072 <RTC::completeRTCRefresh()+0x24e>
c001605e:	84 db                	test   bl,bl
c0016060:	79 10                	jns    c0016072 <RTC::completeRTCRefresh()+0x24e>
c0016062:	83 e3 7f             	and    ebx,0x7f
c0016065:	b9 18 00 00 00       	mov    ecx,0x18
c001606a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001606d:	99                   	cdq    
c001606e:	f7 f9                	idiv   ecx
c0016070:	88 d3                	mov    bl,dl
c0016072:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016078:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001607e:	77 06                	ja     c0016086 <RTC::completeRTCRefresh()+0x262>
c0016080:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016086:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001608b:	31 d2                	xor    edx,edx
c001608d:	c1 e1 10             	shl    ecx,0x10
c0016090:	89 d7                	mov    edi,edx
c0016092:	c1 e5 10             	shl    ebp,0x10
c0016095:	31 c0                	xor    eax,eax
c0016097:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001609d:	09 cf                	or     edi,ecx
c001609f:	89 fa                	mov    edx,edi
c00160a1:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160a5:	88 da                	mov    dl,bl
c00160a7:	89 f3                	mov    ebx,esi
c00160a9:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160ad:	88 d8                	mov    al,bl
c00160af:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160b3:	0f b7 c8             	movzx  ecx,ax
c00160b6:	09 e9                	or     ecx,ebp
c00160b8:	89 c8                	mov    eax,ecx
c00160ba:	51                   	push   ecx
c00160bb:	51                   	push   ecx
c00160bc:	52                   	push   edx
c00160bd:	50                   	push   eax
c00160be:	e8 50 5b ff ff       	call   c000bc13 <datetimeToSeconds(datetime_t)>
c00160c3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160c7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160cd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160d3:	83 c4 3c             	add    esp,0x3c
c00160d6:	5b                   	pop    ebx
c00160d7:	5e                   	pop    esi
c00160d8:	5f                   	pop    edi
c00160d9:	5d                   	pop    ebp
c00160da:	c3                   	ret    
c00160db:	90                   	nop

c00160dc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160dc:	55                   	push   ebp
c00160dd:	57                   	push   edi
c00160de:	56                   	push   esi
c00160df:	53                   	push   ebx
c00160e0:	83 ec 30             	sub    esp,0x30
c00160e3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160eb:	6a 00                	push   0x0
c00160ed:	6a 00                	push   0x0
c00160ef:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c00160f5:	e8 6a 15 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160fa:	83 c4 0c             	add    esp,0xc
c00160fd:	6a 00                	push   0x0
c00160ff:	6a 02                	push   0x2
c0016101:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0016107:	e8 58 15 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c001610c:	31 d2                	xor    edx,edx
c001610e:	89 f9                	mov    ecx,edi
c0016110:	89 f8                	mov    eax,edi
c0016112:	c1 e9 10             	shr    ecx,0x10
c0016115:	0f b6 c4             	movzx  eax,ah
c0016118:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c001611c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016120:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016124:	b9 64 00 00 00       	mov    ecx,0x64
c0016129:	89 f0                	mov    eax,esi
c001612b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001612f:	89 f0                	mov    eax,esi
c0016131:	0f b6 c4             	movzx  eax,ah
c0016134:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016138:	89 f0                	mov    eax,esi
c001613a:	c1 e8 10             	shr    eax,0x10
c001613d:	66 f7 f1             	div    cx
c0016140:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016145:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001614a:	59                   	pop    ecx
c001614b:	5b                   	pop    ebx
c001614c:	89 fb                	mov    ebx,edi
c001614e:	6a 0b                	push   0xb
c0016150:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0016156:	e8 f3 13 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c001615b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016167:	75 74                	jne    c00161dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016169:	b2 0a                	mov    dl,0xa
c001616b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001616f:	0f b6 c1             	movzx  eax,cl
c0016172:	f6 f2                	div    dl
c0016174:	88 c3                	mov    bl,al
c0016176:	88 e0                	mov    al,ah
c0016178:	c1 e3 04             	shl    ebx,0x4
c001617b:	09 c3                	or     ebx,eax
c001617d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016182:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016186:	f6 f2                	div    dl
c0016188:	88 c1                	mov    cl,al
c001618a:	88 e0                	mov    al,ah
c001618c:	c1 e1 04             	shl    ecx,0x4
c001618f:	09 c1                	or     ecx,eax
c0016191:	89 f8                	mov    eax,edi
c0016193:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016197:	0f b6 c0             	movzx  eax,al
c001619a:	f6 f2                	div    dl
c001619c:	88 c3                	mov    bl,al
c001619e:	88 e0                	mov    al,ah
c00161a0:	c1 e3 04             	shl    ebx,0x4
c00161a3:	09 c3                	or     ebx,eax
c00161a5:	89 f0                	mov    eax,esi
c00161a7:	0f b6 c0             	movzx  eax,al
c00161aa:	f6 f2                	div    dl
c00161ac:	88 c1                	mov    cl,al
c00161ae:	88 e0                	mov    al,ah
c00161b0:	c1 e1 04             	shl    ecx,0x4
c00161b3:	09 c1                	or     ecx,eax
c00161b5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161ba:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161be:	f6 f2                	div    dl
c00161c0:	88 c1                	mov    cl,al
c00161c2:	88 e0                	mov    al,ah
c00161c4:	c1 e1 04             	shl    ecx,0x4
c00161c7:	09 c1                	or     ecx,eax
c00161c9:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161ce:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161d2:	f6 f2                	div    dl
c00161d4:	89 c5                	mov    ebp,eax
c00161d6:	88 e0                	mov    al,ah
c00161d8:	c1 e5 04             	shl    ebp,0x4
c00161db:	09 c5                	or     ebp,eax
c00161dd:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161e2:	75 17                	jne    c00161fb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161e4:	80 fb 0b             	cmp    bl,0xb
c00161e7:	76 0c                	jbe    c00161f5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161e9:	80 eb 0c             	sub    bl,0xc
c00161ec:	75 02                	jne    c00161f0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161ee:	b3 0c                	mov    bl,0xc
c00161f0:	83 cb 80             	or     ebx,0xffffff80
c00161f3:	eb 06                	jmp    c00161fb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161f5:	84 db                	test   bl,bl
c00161f7:	75 02                	jne    c00161fb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161f9:	b3 0c                	mov    bl,0xc
c00161fb:	0f b6 db             	movzx  ebx,bl
c00161fe:	50                   	push   eax
c00161ff:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016204:	50                   	push   eax
c0016205:	6a 00                	push   0x0
c0016207:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c001620d:	e8 52 14 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016212:	83 c4 0c             	add    esp,0xc
c0016215:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001621a:	50                   	push   eax
c001621b:	6a 02                	push   0x2
c001621d:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0016223:	e8 3c 14 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016228:	83 c4 0c             	add    esp,0xc
c001622b:	53                   	push   ebx
c001622c:	6a 04                	push   0x4
c001622e:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0016234:	e8 2b 14 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016239:	83 c4 0c             	add    esp,0xc
c001623c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016241:	50                   	push   eax
c0016242:	6a 07                	push   0x7
c0016244:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c001624a:	e8 15 14 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c001624f:	83 c4 0c             	add    esp,0xc
c0016252:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016257:	50                   	push   eax
c0016258:	6a 08                	push   0x8
c001625a:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0016260:	e8 ff 13 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016265:	83 c4 0c             	add    esp,0xc
c0016268:	89 e8                	mov    eax,ebp
c001626a:	0f b6 e8             	movzx  ebp,al
c001626d:	55                   	push   ebp
c001626e:	6a 09                	push   0x9
c0016270:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c0016276:	e8 e9 13 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c001627b:	5a                   	pop    edx
c001627c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016280:	e8 9f fb ff ff       	call   c0015e24 <RTC::completeRTCRefresh()>
c0016285:	83 c4 3c             	add    esp,0x3c
c0016288:	b0 01                	mov    al,0x1
c001628a:	5b                   	pop    ebx
c001628b:	5e                   	pop    esi
c001628c:	5f                   	pop    edi
c001628d:	5d                   	pop    ebp
c001628e:	c3                   	ret    

c001628f <rtcIRQHandler(regs*, void*)>:
c001628f:	53                   	push   ebx
c0016290:	83 ec 10             	sub    esp,0x10
c0016293:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016297:	6a 0c                	push   0xc
c0016299:	ff 35 38 08 02 c0    	push   DWORD PTR ds:0xc0020838
c001629f:	e8 aa 12 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	84 c0                	test   al,al
c00162a9:	79 24                	jns    c00162cf <rtcIRQHandler(regs*, void*)+0x40>
c00162ab:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162b2:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162b9:	66 ff 05 b4 3d 02 c0 	inc    WORD PTR ds:0xc0023db4
c00162c0:	75 0d                	jne    c00162cf <rtcIRQHandler(regs*, void*)+0x40>
c00162c2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162c6:	83 c4 08             	add    esp,0x8
c00162c9:	5b                   	pop    ebx
c00162ca:	e9 55 fb ff ff       	jmp    c0015e24 <RTC::completeRTCRefresh()>
c00162cf:	83 c4 08             	add    esp,0x8
c00162d2:	5b                   	pop    ebx
c00162d3:	c3                   	ret    

c00162d4 <RTC::RTC()>:
c00162d4:	83 ec 1c             	sub    esp,0x1c
c00162d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162db:	83 ec 08             	sub    esp,0x8
c00162de:	68 13 ed 01 c0       	push   0xc001ed13
c00162e3:	50                   	push   eax
c00162e4:	e8 05 58 ff ff       	call   c000baee <Clock::Clock(char const*)>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	ba 30 ed 01 c0       	mov    edx,0xc001ed30
c00162f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f5:	89 10                	mov    DWORD PTR [eax],edx
c00162f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162fb:	83 ec 0c             	sub    esp,0xc
c00162fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016302:	6a 01                	push   0x1
c0016304:	68 8f 62 01 c0       	push   0xc001628f
c0016309:	6a 08                	push   0x8
c001630b:	50                   	push   eax
c001630c:	e8 c7 5c ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016311:	83 c4 20             	add    esp,0x20
c0016314:	89 c2                	mov    edx,eax
c0016316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001631a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016320:	fa                   	cli    
c0016321:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0016326:	40                   	inc    eax
c0016327:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001632c:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0016331:	83 ec 08             	sub    esp,0x8
c0016334:	6a 0b                	push   0xb
c0016336:	50                   	push   eax
c0016337:	e8 12 12 ff ff       	call   c000754e <Computer::readCMOS(unsigned char)>
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016343:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0016348:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001634c:	83 ca 10             	or     edx,0x10
c001634f:	81 e2 ff 00 00 00    	and    edx,0xff
c0016355:	83 ec 04             	sub    esp,0x4
c0016358:	52                   	push   edx
c0016359:	6a 0b                	push   0xb
c001635b:	50                   	push   eax
c001635c:	e8 03 13 ff ff       	call   c0007664 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	83 ec 0c             	sub    esp,0xc
c0016367:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001636b:	e8 b4 fa ff ff       	call   c0015e24 <RTC::completeRTCRefresh()>
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0016378:	48                   	dec    eax
c0016379:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001637e:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c0016383:	85 c0                	test   eax,eax
c0016385:	75 01                	jne    c0016388 <RTC::RTC()+0xb4>
c0016387:	fb                   	sti    
c0016388:	90                   	nop
c0016389:	83 c4 1c             	add    esp,0x1c
c001638c:	c3                   	ret    
c001638d:	66 90                	xchg   ax,ax
c001638f:	90                   	nop

c0016390 <HalConsoleScroll(int, int)>:
c0016390:	83 ec 10             	sub    esp,0x10
c0016393:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001639b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163a3:	90                   	nop
c00163a4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163a9:	0f 8f e1 00 00 00    	jg     c0016490 <HalConsoleScroll(int, int)+0x100>
c00163af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163b7:	90                   	nop
c00163b8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163c0:	0f 8f be 00 00 00    	jg     c0016484 <HalConsoleScroll(int, int)+0xf4>
c00163c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ca:	89 d0                	mov    eax,edx
c00163cc:	c1 e0 02             	shl    eax,0x2
c00163cf:	01 d0                	add    eax,edx
c00163d1:	c1 e0 05             	shl    eax,0x5
c00163d4:	89 c2                	mov    edx,eax
c00163d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163da:	01 d0                	add    eax,edx
c00163dc:	89 c2                	mov    edx,eax
c00163de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163e9:	89 d0                	mov    eax,edx
c00163eb:	c1 e0 02             	shl    eax,0x2
c00163ee:	01 d0                	add    eax,edx
c00163f0:	c1 e0 05             	shl    eax,0x5
c00163f3:	89 c2                	mov    edx,eax
c00163f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163f9:	01 d0                	add    eax,edx
c00163fb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016405:	01 c2                	add    edx,eax
c0016407:	8a 01                	mov    al,BYTE PTR [ecx]
c0016409:	88 02                	mov    BYTE PTR [edx],al
c001640b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016410:	75 66                	jne    c0016478 <HalConsoleScroll(int, int)+0xe8>
c0016412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016416:	83 e0 01             	and    eax,0x1
c0016419:	74 39                	je     c0016454 <HalConsoleScroll(int, int)+0xc4>
c001641b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001641f:	83 e0 0f             	and    eax,0xf
c0016422:	88 c2                	mov    dl,al
c0016424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016428:	c1 e0 04             	shl    eax,0x4
c001642b:	88 d1                	mov    cl,dl
c001642d:	09 c1                	or     ecx,eax
c001642f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016433:	89 d0                	mov    eax,edx
c0016435:	c1 e0 02             	shl    eax,0x2
c0016438:	01 d0                	add    eax,edx
c001643a:	c1 e0 05             	shl    eax,0x5
c001643d:	89 c2                	mov    edx,eax
c001643f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016443:	01 d0                	add    eax,edx
c0016445:	89 c2                	mov    edx,eax
c0016447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001644b:	01 d0                	add    eax,edx
c001644d:	88 ca                	mov    dl,cl
c001644f:	88 10                	mov    BYTE PTR [eax],dl
c0016451:	eb 25                	jmp    c0016478 <HalConsoleScroll(int, int)+0xe8>
c0016453:	90                   	nop
c0016454:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016458:	89 d0                	mov    eax,edx
c001645a:	c1 e0 02             	shl    eax,0x2
c001645d:	01 d0                	add    eax,edx
c001645f:	c1 e0 05             	shl    eax,0x5
c0016462:	89 c2                	mov    edx,eax
c0016464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016468:	01 d0                	add    eax,edx
c001646a:	89 c2                	mov    edx,eax
c001646c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016470:	01 d0                	add    eax,edx
c0016472:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001647c:	e9 37 ff ff ff       	jmp    c00163b8 <HalConsoleScroll(int, int)+0x28>
c0016481:	8d 76 00             	lea    esi,[esi+0x0]
c0016484:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016488:	e9 17 ff ff ff       	jmp    c00163a4 <HalConsoleScroll(int, int)+0x14>
c001648d:	8d 76 00             	lea    esi,[esi+0x0]
c0016490:	90                   	nop
c0016491:	83 c4 10             	add    esp,0x10
c0016494:	c3                   	ret    
c0016495:	8d 76 00             	lea    esi,[esi+0x0]

c0016498 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016498:	83 ec 14             	sub    esp,0x14
c001649b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001649f:	88 04 24             	mov    BYTE PTR [esp],al
c00164a2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164a5:	25 ff 00 00 00       	and    eax,0xff
c00164aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164ae:	89 d1                	mov    ecx,edx
c00164b0:	83 e1 0f             	and    ecx,0xf
c00164b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164b7:	c1 e2 04             	shl    edx,0x4
c00164ba:	81 e2 ff 00 00 00    	and    edx,0xff
c00164c0:	09 ca                	or     edx,ecx
c00164c2:	c1 e2 08             	shl    edx,0x8
c00164c5:	09 d0                	or     eax,edx
c00164c7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164cc:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164d8:	89 d0                	mov    eax,edx
c00164da:	c1 e0 02             	shl    eax,0x2
c00164dd:	01 d0                	add    eax,edx
c00164df:	c1 e0 04             	shl    eax,0x4
c00164e2:	89 c2                	mov    edx,eax
c00164e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164e8:	01 d0                	add    eax,edx
c00164ea:	01 c0                	add    eax,eax
c00164ec:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164f9:	66 89 02             	mov    WORD PTR [edx],ax
c00164fc:	90                   	nop
c00164fd:	83 c4 14             	add    esp,0x14
c0016500:	c3                   	ret    
c0016501:	8d 76 00             	lea    esi,[esi+0x0]

c0016504 <HalConsoleCursorUpdate(int, int)>:
c0016504:	83 ec 20             	sub    esp,0x20
c0016507:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001650b:	89 c2                	mov    edx,eax
c001650d:	89 d0                	mov    eax,edx
c001650f:	c1 e0 02             	shl    eax,0x2
c0016512:	01 d0                	add    eax,edx
c0016514:	c1 e0 04             	shl    eax,0x4
c0016517:	89 c2                	mov    edx,eax
c0016519:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001651d:	01 d0                	add    eax,edx
c001651f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016524:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001652b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016530:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016534:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016538:	ee                   	out    dx,al
c0016539:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001653e:	25 ff 00 00 00       	and    eax,0xff
c0016543:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001654a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001654e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016552:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016556:	ee                   	out    dx,al
c0016557:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001655e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016563:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016567:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001656b:	ee                   	out    dx,al
c001656c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016571:	66 c1 e8 08          	shr    ax,0x8
c0016575:	25 ff 00 00 00       	and    eax,0xff
c001657a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016581:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016585:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016589:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001658d:	ee                   	out    dx,al
c001658e:	90                   	nop
c001658f:	83 c4 20             	add    esp,0x20
c0016592:	c3                   	ret    
c0016593:	90                   	nop

c0016594 <FAT::getName()>:
c0016594:	b8 64 ed 01 c0       	mov    eax,0xc001ed64
c0016599:	c3                   	ret    
c001659a:	66 90                	xchg   ax,ax

c001659c <FAT::tell(void*, unsigned long long*)>:
c001659c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165a1:	75 09                	jne    c00165ac <FAT::tell(void*, unsigned long long*)+0x10>
c00165a3:	b8 04 00 00 00       	mov    eax,0x4
c00165a8:	c3                   	ret    
c00165a9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165b1:	75 09                	jne    c00165bc <FAT::tell(void*, unsigned long long*)+0x20>
c00165b3:	b8 04 00 00 00       	mov    eax,0x4
c00165b8:	c3                   	ret    
c00165b9:	8d 76 00             	lea    esi,[esi+0x0]
c00165bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165c3:	ba 00 00 00 00       	mov    edx,0x0
c00165c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165cc:	89 01                	mov    DWORD PTR [ecx],eax
c00165ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165d1:	b8 00 00 00 00       	mov    eax,0x0
c00165d6:	c3                   	ret    
c00165d7:	90                   	nop

c00165d8 <FAT::stat(void*, unsigned long long*)>:
c00165d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165dd:	75 09                	jne    c00165e8 <FAT::stat(void*, unsigned long long*)+0x10>
c00165df:	b8 04 00 00 00       	mov    eax,0x4
c00165e4:	c3                   	ret    
c00165e5:	8d 76 00             	lea    esi,[esi+0x0]
c00165e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165ed:	75 09                	jne    c00165f8 <FAT::stat(void*, unsigned long long*)+0x20>
c00165ef:	b8 04 00 00 00       	mov    eax,0x4
c00165f4:	c3                   	ret    
c00165f5:	8d 76 00             	lea    esi,[esi+0x0]
c00165f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165ff:	ba 00 00 00 00       	mov    edx,0x0
c0016604:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016608:	89 01                	mov    DWORD PTR [ecx],eax
c001660a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001660d:	b8 00 00 00 00       	mov    eax,0x0
c0016612:	c3                   	ret    
c0016613:	90                   	nop

c0016614 <FAT::~FAT()>:
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	ba b0 ed 01 c0       	mov    edx,0xc001edb0
c001661c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016620:	89 10                	mov    DWORD PTR [eax],edx
c0016622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016626:	83 ec 0c             	sub    esp,0xc
c0016629:	50                   	push   eax
c001662a:	e8 03 49 ff ff       	call   c000af32 <Filesystem::~Filesystem()>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	90                   	nop
c0016633:	83 c4 0c             	add    esp,0xc
c0016636:	c3                   	ret    
c0016637:	90                   	nop

c0016638 <FAT::~FAT()>:
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	83 ec 0c             	sub    esp,0xc
c001663e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016642:	e8 cd ff ff ff       	call   c0016614 <FAT::~FAT()>
c0016647:	83 c4 10             	add    esp,0x10
c001664a:	83 ec 08             	sub    esp,0x8
c001664d:	6a 08                	push   0x8
c001664f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016653:	e8 9e 44 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0016658:	83 c4 10             	add    esp,0x10
c001665b:	83 c4 0c             	add    esp,0xc
c001665e:	c3                   	ret    
c001665f:	90                   	nop

c0016660 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016660:	83 ec 1c             	sub    esp,0x1c
c0016663:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001666a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001666f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016673:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001667a:	83 f8 ff             	cmp    eax,0xffffffff
c001667d:	75 35                	jne    c00166b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001667f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016683:	88 c2                	mov    dl,al
c0016685:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001668a:	01 d0                	add    eax,edx
c001668c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016690:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c0016696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001669a:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c00166a1:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00166a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166aa:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c00166b1:	eb 19                	jmp    c00166cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166b3:	90                   	nop
c00166b4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166b8:	88 c2                	mov    dl,al
c00166ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166be:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00166c5:	01 d0                	add    eax,edx
c00166c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166cb:	90                   	nop
c00166cc:	83 ec 04             	sub    esp,0x4
c00166cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166db:	50                   	push   eax
c00166dc:	e8 93 e7 fe ff       	call   c0004e74 <f_getlabel>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166ed:	75 09                	jne    c00166f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166ef:	b8 00 00 00 00       	mov    eax,0x0
c00166f4:	eb 0a                	jmp    c0016700 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166f6:	66 90                	xchg   ax,ax
c00166f8:	b8 01 00 00 00       	mov    eax,0x1
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	83 c4 1c             	add    esp,0x1c
c0016703:	c3                   	ret    

c0016704 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016704:	57                   	push   edi
c0016705:	83 ec 58             	sub    esp,0x58
c0016708:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016710:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016714:	b8 00 00 00 00       	mov    eax,0x0
c0016719:	b9 0f 00 00 00       	mov    ecx,0xf
c001671e:	fc                   	cld    
c001671f:	89 d7                	mov    edi,edx
c0016721:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016723:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016727:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001672e:	83 f8 ff             	cmp    eax,0xffffffff
c0016731:	75 35                	jne    c0016768 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016733:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016737:	88 c2                	mov    dl,al
c0016739:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001673e:	01 d0                	add    eax,edx
c0016740:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016744:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c001674a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001674e:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c0016755:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001675a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001675e:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c0016765:	eb 19                	jmp    c0016780 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016767:	90                   	nop
c0016768:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001676c:	88 c2                	mov    dl,al
c001676e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016772:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c0016779:	01 d0                	add    eax,edx
c001677b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001677f:	90                   	nop
c0016780:	83 ec 08             	sub    esp,0x8
c0016783:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016787:	8d 44 24 18          	lea    eax,[esp+0x18]
c001678b:	50                   	push   eax
c001678c:	e8 4f a0 fe ff       	call   c00007e0 <strcat>
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	8d 44 24 18          	lea    eax,[esp+0x18]
c001679b:	50                   	push   eax
c001679c:	e8 24 e8 fe ff       	call   c0004fc5 <f_setlabel>
c00167a1:	83 c4 10             	add    esp,0x10
c00167a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167a8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167ad:	75 09                	jne    c00167b8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167af:	b8 00 00 00 00       	mov    eax,0x0
c00167b4:	eb 0a                	jmp    c00167c0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167b6:	66 90                	xchg   ax,ax
c00167b8:	b8 01 00 00 00       	mov    eax,0x1
c00167bd:	8d 76 00             	lea    esi,[esi+0x0]
c00167c0:	83 c4 58             	add    esp,0x58
c00167c3:	5f                   	pop    edi
c00167c4:	c3                   	ret    
c00167c5:	90                   	nop
c00167c6:	66 90                	xchg   ax,ax

c00167c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167c8:	83 ec 2c             	sub    esp,0x2c
c00167cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167d3:	83 ec 08             	sub    esp,0x8
c00167d6:	68 88 ed 01 c0       	push   0xc001ed88
c00167db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167df:	e8 1c 9f fe ff       	call   c0000700 <strcmp>
c00167e4:	83 c4 10             	add    esp,0x10
c00167e7:	85 c0                	test   eax,eax
c00167e9:	0f 94 c0             	sete   al
c00167ec:	84 c0                	test   al,al
c00167ee:	74 10                	je     c0016800 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167f8:	e9 b3 00 00 00       	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016800:	83 ec 08             	sub    esp,0x8
c0016803:	68 7a ed 01 c0       	push   0xc001ed7a
c0016808:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001680c:	e8 ef 9e fe ff       	call   c0000700 <strcmp>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	85 c0                	test   eax,eax
c0016816:	0f 94 c0             	sete   al
c0016819:	84 c0                	test   al,al
c001681b:	74 0f                	je     c001682c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001681d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016825:	e9 86 00 00 00       	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001682a:	66 90                	xchg   ax,ax
c001682c:	83 ec 08             	sub    esp,0x8
c001682f:	68 80 ed 01 c0       	push   0xc001ed80
c0016834:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016838:	e8 c3 9e fe ff       	call   c0000700 <strcmp>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	85 c0                	test   eax,eax
c0016842:	0f 94 c0             	sete   al
c0016845:	84 c0                	test   al,al
c0016847:	74 0b                	je     c0016854 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016849:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016851:	eb 5d                	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016853:	90                   	nop
c0016854:	83 ec 08             	sub    esp,0x8
c0016857:	68 3c ce 01 c0       	push   0xc001ce3c
c001685c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016860:	e8 9b 9e fe ff       	call   c0000700 <strcmp>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	85 c0                	test   eax,eax
c001686a:	0f 94 c0             	sete   al
c001686d:	84 c0                	test   al,al
c001686f:	74 0b                	je     c001687c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016871:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016879:	eb 35                	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001687b:	90                   	nop
c001687c:	83 ec 08             	sub    esp,0x8
c001687f:	68 86 ed 01 c0       	push   0xc001ed86
c0016884:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016888:	e8 73 9e fe ff       	call   c0000700 <strcmp>
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	85 c0                	test   eax,eax
c0016892:	0f 94 c0             	sete   al
c0016895:	84 c0                	test   al,al
c0016897:	74 0b                	je     c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016899:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168a1:	eb 0d                	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168a3:	90                   	nop
c00168a4:	b8 08 00 00 00       	mov    eax,0x8
c00168a9:	e9 ea 00 00 00       	jmp    c0016998 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168ae:	66 90                	xchg   ax,ax
c00168b0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168b7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168c0:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00168c7:	83 f8 ff             	cmp    eax,0xffffffff
c00168ca:	75 34                	jne    c0016900 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168cc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168d0:	88 c2                	mov    dl,al
c00168d2:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00168d7:	01 d0                	add    eax,edx
c00168d9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168dd:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c00168e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168e7:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c00168ee:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00168f3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168f7:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c00168fe:	eb 18                	jmp    c0016918 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016900:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016904:	88 c2                	mov    dl,al
c0016906:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001690a:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c0016911:	01 d0                	add    eax,edx
c0016913:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016917:	90                   	nop
c0016918:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001691c:	88 04 24             	mov    BYTE PTR [esp],al
c001691f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016927:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001692f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016934:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001693c:	83 ec 0c             	sub    esp,0xc
c001693f:	68 00 20 00 00       	push   0x2000
c0016944:	e8 14 15 ff ff       	call   c0007e5d <malloc>
c0016949:	83 c4 10             	add    esp,0x10
c001694c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016950:	68 00 20 00 00       	push   0x2000
c0016955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016959:	8d 44 24 08          	lea    eax,[esp+0x8]
c001695d:	50                   	push   eax
c001695e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016962:	50                   	push   eax
c0016963:	e8 4d e9 fe ff       	call   c00052b5 <f_mkfs>
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001696f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016974:	75 0a                	jne    c0016980 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016976:	b8 00 00 00 00       	mov    eax,0x0
c001697b:	eb 1b                	jmp    c0016998 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001697d:	8d 76 00             	lea    esi,[esi+0x0]
c0016980:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016985:	75 09                	jne    c0016990 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016987:	b8 09 00 00 00       	mov    eax,0x9
c001698c:	eb 0a                	jmp    c0016998 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001698e:	66 90                	xchg   ax,ax
c0016990:	b8 01 00 00 00       	mov    eax,0x1
c0016995:	8d 76 00             	lea    esi,[esi+0x0]
c0016998:	83 c4 2c             	add    esp,0x2c
c001699b:	c3                   	ret    

c001699c <FAT::tryMount(LogicalDisk*, int)>:
c001699c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169a2:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c00169a7:	83 f8 14             	cmp    eax,0x14
c00169aa:	75 18                	jne    c00169c4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	68 8c ed 01 c0       	push   0xc001ed8c
c00169b4:	e8 82 9d ff ff       	call   c001073b <Krnl::panic(char const*)>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	b0 00                	mov    al,0x0
c00169be:	e9 e9 01 00 00       	jmp    c0016bac <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c3:	90                   	nop
c00169c4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169d7:	3d 00 02 00 00       	cmp    eax,0x200
c00169dc:	74 0a                	je     c00169e8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169de:	b0 00                	mov    al,0x0
c00169e0:	e9 c7 01 00 00       	jmp    c0016bac <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169e5:	8d 76 00             	lea    esi,[esi+0x0]
c00169e8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169f0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169f7:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00169fe:	83 f8 ff             	cmp    eax,0xffffffff
c0016a01:	74 09                	je     c0016a0c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a03:	b0 01                	mov    al,0x1
c0016a05:	e9 a2 01 00 00       	jmp    c0016bac <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a0a:	66 90                	xchg   ax,ax
c0016a0c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a16:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a1e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a25:	88 c2                	mov    dl,al
c0016a27:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016a2c:	01 d0                	add    eax,edx
c0016a2e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a35:	8b 15 c0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023dc0
c0016a3b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a42:	89 14 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],edx
c0016a49:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016a4e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a55:	89 14 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],edx
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	68 34 02 00 00       	push   0x234
c0016a64:	e8 f4 13 ff ff       	call   c0007e5d <malloc>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a73:	83 ec 04             	sub    esp,0x4
c0016a76:	6a 00                	push   0x0
c0016a78:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a7f:	50                   	push   eax
c0016a80:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a87:	e8 4f d0 fe ff       	call   c0003adb <f_mount>
c0016a8c:	83 c4 10             	add    esp,0x10
c0016a8f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a96:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a9e:	74 1c                	je     c0016abc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016aa0:	83 ec 0c             	sub    esp,0xc
c0016aa3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016aaa:	e8 ce 13 ff ff       	call   c0007e7d <rfree>
c0016aaf:	83 c4 10             	add    esp,0x10
c0016ab2:	b0 00                	mov    al,0x0
c0016ab4:	e9 f3 00 00 00       	jmp    c0016bac <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0016abc:	83 ec 04             	sub    esp,0x4
c0016abf:	68 00 01 00 00       	push   0x100
c0016ac4:	6a 00                	push   0x0
c0016ac6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016acd:	50                   	push   eax
c0016ace:	e8 1d 9a fe ff       	call   c00004f0 <memset>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	83 ec 08             	sub    esp,0x8
c0016ad9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ae0:	50                   	push   eax
c0016ae1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ae8:	50                   	push   eax
c0016ae9:	e8 f2 9c fe ff       	call   c00007e0 <strcat>
c0016aee:	83 c4 10             	add    esp,0x10
c0016af1:	83 ec 08             	sub    esp,0x8
c0016af4:	68 9a ed 01 c0       	push   0xc001ed9a
c0016af9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b00:	50                   	push   eax
c0016b01:	e8 da 9c fe ff       	call   c00007e0 <strcat>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	83 ec 04             	sub    esp,0x4
c0016b0c:	6a 01                	push   0x1
c0016b0e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b15:	50                   	push   eax
c0016b16:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b1a:	50                   	push   eax
c0016b1b:	e8 1d d0 fe ff       	call   c0003b3d <f_open>
c0016b20:	83 c4 10             	add    esp,0x10
c0016b23:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b2a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b31:	85 c0                	test   eax,eax
c0016b33:	74 0b                	je     c0016b40 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b35:	78 31                	js     c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b37:	83 e8 04             	sub    eax,0x4
c0016b3a:	83 f8 01             	cmp    eax,0x1
c0016b3d:	77 29                	ja     c0016b68 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b3f:	90                   	nop
c0016b40:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b48:	83 ec 0c             	sub    esp,0xc
c0016b4b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b4f:	50                   	push   eax
c0016b50:	e8 9b d7 fe ff       	call   c00042f0 <f_close>
c0016b55:	83 c4 10             	add    esp,0x10
c0016b58:	90                   	nop
c0016b59:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b61:	74 41                	je     c0016ba4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b63:	eb 33                	jmp    c0016b98 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b65:	8d 76 00             	lea    esi,[esi+0x0]
c0016b68:	83 ec 0c             	sub    esp,0xc
c0016b6b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b72:	e8 06 13 ff ff       	call   c0007e7d <rfree>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	83 ec 04             	sub    esp,0x4
c0016b7d:	6a 00                	push   0x0
c0016b7f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b86:	50                   	push   eax
c0016b87:	6a 00                	push   0x0
c0016b89:	e8 4d cf fe ff       	call   c0003adb <f_mount>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	b0 00                	mov    al,0x0
c0016b93:	eb 17                	jmp    c0016bac <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b95:	8d 76 00             	lea    esi,[esi+0x0]
c0016b98:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0016b9d:	40                   	inc    eax
c0016b9e:	a3 c0 3d 02 c0       	mov    ds:0xc0023dc0,eax
c0016ba3:	90                   	nop
c0016ba4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016bab:	90                   	nop
c0016bac:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bb2:	c3                   	ret    
c0016bb3:	90                   	nop

c0016bb4 <FAT::allocateSwapfile(char const*, int)>:
c0016bb4:	55                   	push   ebp
c0016bb5:	57                   	push   edi
c0016bb6:	56                   	push   esi
c0016bb7:	53                   	push   ebx
c0016bb8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bbe:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bc9:	83 ec 0c             	sub    esp,0xc
c0016bcc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bd3:	e8 85 12 ff ff       	call   c0007e5d <malloc>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	89 c7                	mov    edi,eax
c0016bdd:	a1 30 3d 02 c0       	mov    eax,ds:0xc0023d30
c0016be2:	83 ec 04             	sub    esp,0x4
c0016be5:	50                   	push   eax
c0016be6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016bed:	57                   	push   edi
c0016bee:	e8 6f 45 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bfd:	83 ec 04             	sub    esp,0x4
c0016c00:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c04:	50                   	push   eax
c0016c05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c09:	50                   	push   eax
c0016c0a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c11:	e8 b8 48 ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0016c16:	83 c4 10             	add    esp,0x10
c0016c19:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c20:	c1 e0 14             	shl    eax,0x14
c0016c23:	89 c7                	mov    edi,eax
c0016c25:	89 c5                	mov    ebp,eax
c0016c27:	c1 fd 1f             	sar    ebp,0x1f
c0016c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c32:	89 f9                	mov    ecx,edi
c0016c34:	31 c1                	xor    ecx,eax
c0016c36:	89 cb                	mov    ebx,ecx
c0016c38:	89 e9                	mov    ecx,ebp
c0016c3a:	31 d1                	xor    ecx,edx
c0016c3c:	89 ce                	mov    esi,ecx
c0016c3e:	89 f0                	mov    eax,esi
c0016c40:	09 d8                	or     eax,ebx
c0016c42:	0f 84 9c 00 00 00    	je     c0016ce4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c52:	e8 43 47 ff ff       	call   c000b39a <File::unlink()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	83 ec 08             	sub    esp,0x8
c0016c5d:	6a 12                	push   0x12
c0016c5f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c66:	e8 b7 45 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0016c6b:	83 c4 10             	add    esp,0x10
c0016c6e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c75:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c7b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c82:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c89:	c1 e0 14             	shl    eax,0x14
c0016c8c:	83 ec 04             	sub    esp,0x4
c0016c8f:	6a 01                	push   0x1
c0016c91:	50                   	push   eax
c0016c92:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c99:	e8 b7 e4 fe ff       	call   c0005155 <f_expand>
c0016c9e:	83 c4 10             	add    esp,0x10
c0016ca1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016caa:	83 c0 10             	add    eax,0x10
c0016cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0016caf:	83 ec 0c             	sub    esp,0xc
c0016cb2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cb6:	52                   	push   edx
c0016cb7:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016cbb:	52                   	push   edx
c0016cbc:	6a 00                	push   0x0
c0016cbe:	68 00 04 00 00       	push   0x400
c0016cc3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cca:	ff d0                	call   eax
c0016ccc:	83 c4 20             	add    esp,0x20
c0016ccf:	83 ec 0c             	sub    esp,0xc
c0016cd2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cd9:	e8 a2 45 ff ff       	call   c000b280 <File::close()>
c0016cde:	83 c4 10             	add    esp,0x10
c0016ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce4:	83 ec 08             	sub    esp,0x8
c0016ce7:	6a 01                	push   0x1
c0016ce9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cf0:	e8 2d 45 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d01:	83 c0 0c             	add    eax,0xc
c0016d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d06:	83 ec 0c             	sub    esp,0xc
c0016d09:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d0d:	52                   	push   edx
c0016d0e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d12:	52                   	push   edx
c0016d13:	6a 00                	push   0x0
c0016d15:	6a 04                	push   0x4
c0016d17:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d1e:	ff d0                	call   eax
c0016d20:	83 c4 20             	add    esp,0x20
c0016d23:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d2a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d30:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d37:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d3e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d41:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d52:	e8 29 45 ff ff       	call   c000b280 <File::close()>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d61:	ba 00 00 00 00       	mov    edx,0x0
c0016d66:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d6c:	5b                   	pop    ebx
c0016d6d:	5e                   	pop    esi
c0016d6e:	5f                   	pop    edi
c0016d6f:	5d                   	pop    ebp
c0016d70:	c3                   	ret    
c0016d71:	90                   	nop
c0016d72:	66 90                	xchg   ax,ax

c0016d74 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d74:	57                   	push   edi
c0016d75:	56                   	push   esi
c0016d76:	53                   	push   ebx
c0016d77:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d7d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d85:	74 0d                	je     c0016d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d87:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d8f:	75 0f                	jne    c0016da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d91:	8d 76 00             	lea    esi,[esi+0x0]
c0016d94:	b8 04 00 00 00       	mov    eax,0x4
c0016d99:	e9 36 01 00 00       	jmp    c0016ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d9e:	66 90                	xchg   ax,ax
c0016da0:	83 ec 08             	sub    esp,0x8
c0016da3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016daa:	50                   	push   eax
c0016dab:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016db2:	e8 fc d7 fe ff       	call   c00045b3 <f_readdir>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016dc1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dd2:	83 c0 16             	add    eax,0x16
c0016dd5:	50                   	push   eax
c0016dd6:	e8 85 97 fe ff       	call   c0000560 <strlen>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	ba 00 00 00 00       	mov    edx,0x0
c0016de3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016deb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016df2:	25 ff 00 00 00       	and    eax,0xff
c0016df7:	83 e0 10             	and    eax,0x10
c0016dfa:	74 08                	je     c0016e04 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016dfc:	b8 02 00 00 00       	mov    eax,0x2
c0016e01:	eb 09                	jmp    c0016e0c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e03:	90                   	nop
c0016e04:	b8 01 00 00 00       	mov    eax,0x1
c0016e09:	8d 76 00             	lea    esi,[esi+0x0]
c0016e0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e10:	83 ec 08             	sub    esp,0x8
c0016e13:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e1a:	83 c0 16             	add    eax,0x16
c0016e1d:	50                   	push   eax
c0016e1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e22:	83 c0 10             	add    eax,0x10
c0016e25:	50                   	push   eax
c0016e26:	e8 f5 97 fe ff       	call   c0000620 <strcpy>
c0016e2b:	83 c4 10             	add    esp,0x10
c0016e2e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e35:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e40:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e47:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e4e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e55:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e5c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e63:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e6a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e71:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e78:	89 c6                	mov    esi,eax
c0016e7a:	89 d7                	mov    edi,edx
c0016e7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e7e:	89 c8                	mov    eax,ecx
c0016e80:	89 fa                	mov    edx,edi
c0016e82:	89 f3                	mov    ebx,esi
c0016e84:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e8b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e92:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e99:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016ea0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016ea6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ead:	84 c0                	test   al,al
c0016eaf:	75 07                	jne    c0016eb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016eb1:	b8 07 00 00 00       	mov    eax,0x7
c0016eb6:	eb 1c                	jmp    c0016ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eb8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016ebf:	85 c0                	test   eax,eax
c0016ec1:	75 09                	jne    c0016ecc <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ec3:	b8 00 00 00 00       	mov    eax,0x0
c0016ec8:	eb 0a                	jmp    c0016ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eca:	66 90                	xchg   ax,ax
c0016ecc:	b8 01 00 00 00       	mov    eax,0x1
c0016ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed4:	81 c4 50 02 00 00    	add    esp,0x250
c0016eda:	5b                   	pop    ebx
c0016edb:	5e                   	pop    esi
c0016edc:	5f                   	pop    edi
c0016edd:	c3                   	ret    
c0016ede:	66 90                	xchg   ax,ax

c0016ee0 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ee0:	83 ec 1c             	sub    esp,0x1c
c0016ee3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ee8:	74 0a                	je     c0016ef4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016eea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016eef:	75 0b                	jne    c0016efc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef4:	b8 04 00 00 00       	mov    eax,0x4
c0016ef9:	eb 41                	jmp    c0016f3c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016efb:	90                   	nop
c0016efc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f00:	50                   	push   eax
c0016f01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f0d:	e8 f6 ce fe ff       	call   c0003e08 <f_read>
c0016f12:	83 c4 10             	add    esp,0x10
c0016f15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f1d:	89 c2                	mov    edx,eax
c0016f1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f23:	89 10                	mov    DWORD PTR [eax],edx
c0016f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f29:	85 c0                	test   eax,eax
c0016f2b:	75 07                	jne    c0016f34 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f2d:	b8 00 00 00 00       	mov    eax,0x0
c0016f32:	eb 08                	jmp    c0016f3c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f34:	b8 01 00 00 00       	mov    eax,0x1
c0016f39:	8d 76 00             	lea    esi,[esi+0x0]
c0016f3c:	83 c4 1c             	add    esp,0x1c
c0016f3f:	c3                   	ret    

c0016f40 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f40:	83 ec 1c             	sub    esp,0x1c
c0016f43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f48:	74 0a                	je     c0016f54 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f4a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f4f:	75 0b                	jne    c0016f5c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]
c0016f54:	b8 04 00 00 00       	mov    eax,0x4
c0016f59:	eb 41                	jmp    c0016f9c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f5b:	90                   	nop
c0016f5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f60:	50                   	push   eax
c0016f61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f6d:	e8 95 d0 fe ff       	call   c0004007 <f_write>
c0016f72:	83 c4 10             	add    esp,0x10
c0016f75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f7d:	89 c2                	mov    edx,eax
c0016f7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f83:	89 10                	mov    DWORD PTR [eax],edx
c0016f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f89:	85 c0                	test   eax,eax
c0016f8b:	75 07                	jne    c0016f94 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f8d:	b8 00 00 00 00       	mov    eax,0x0
c0016f92:	eb 08                	jmp    c0016f9c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f94:	b8 01 00 00 00       	mov    eax,0x1
c0016f99:	8d 76 00             	lea    esi,[esi+0x0]
c0016f9c:	83 c4 1c             	add    esp,0x1c
c0016f9f:	c3                   	ret    

c0016fa0 <FAT::close(void*)>:
c0016fa0:	83 ec 1c             	sub    esp,0x1c
c0016fa3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fa8:	75 0a                	jne    c0016fb4 <FAT::close(void*)+0x14>
c0016faa:	b8 04 00 00 00       	mov    eax,0x4
c0016faf:	eb 3f                	jmp    c0016ff0 <FAT::close(void*)+0x50>
c0016fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fbb:	e8 30 d3 fe ff       	call   c00042f0 <f_close>
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fc7:	83 ec 0c             	sub    esp,0xc
c0016fca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fce:	e8 9a 0e ff ff       	call   c0007e6d <free>
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fda:	85 c0                	test   eax,eax
c0016fdc:	75 0a                	jne    c0016fe8 <FAT::close(void*)+0x48>
c0016fde:	b8 00 00 00 00       	mov    eax,0x0
c0016fe3:	eb 0b                	jmp    c0016ff0 <FAT::close(void*)+0x50>
c0016fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe8:	b8 01 00 00 00       	mov    eax,0x1
c0016fed:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff0:	83 c4 1c             	add    esp,0x1c
c0016ff3:	c3                   	ret    

c0016ff4 <FAT::closeDir(void*)>:
c0016ff4:	83 ec 1c             	sub    esp,0x1c
c0016ff7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ffc:	75 0a                	jne    c0017008 <FAT::closeDir(void*)+0x14>
c0016ffe:	b8 04 00 00 00       	mov    eax,0x4
c0017003:	eb 3f                	jmp    c0017044 <FAT::closeDir(void*)+0x50>
c0017005:	8d 76 00             	lea    esi,[esi+0x0]
c0017008:	83 ec 0c             	sub    esp,0xc
c001700b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001700f:	e8 7d d5 fe ff       	call   c0004591 <f_closedir>
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001701b:	83 ec 0c             	sub    esp,0xc
c001701e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017022:	e8 46 0e ff ff       	call   c0007e6d <free>
c0017027:	83 c4 10             	add    esp,0x10
c001702a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001702e:	85 c0                	test   eax,eax
c0017030:	75 0a                	jne    c001703c <FAT::closeDir(void*)+0x48>
c0017032:	b8 00 00 00 00       	mov    eax,0x0
c0017037:	eb 0b                	jmp    c0017044 <FAT::closeDir(void*)+0x50>
c0017039:	8d 76 00             	lea    esi,[esi+0x0]
c001703c:	b8 01 00 00 00       	mov    eax,0x1
c0017041:	8d 76 00             	lea    esi,[esi+0x0]
c0017044:	83 c4 1c             	add    esp,0x1c
c0017047:	c3                   	ret    

c0017048 <FAT::seek(void*, unsigned long long)>:
c0017048:	83 ec 2c             	sub    esp,0x2c
c001704b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001704f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017053:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001705b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017060:	75 0a                	jne    c001706c <FAT::seek(void*, unsigned long long)+0x24>
c0017062:	b8 04 00 00 00       	mov    eax,0x4
c0017067:	eb 33                	jmp    c001709c <FAT::seek(void*, unsigned long long)+0x54>
c0017069:	8d 76 00             	lea    esi,[esi+0x0]
c001706c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017070:	83 ec 08             	sub    esp,0x8
c0017073:	50                   	push   eax
c0017074:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017078:	e8 a2 d2 fe ff       	call   c000431f <f_lseek>
c001707d:	83 c4 10             	add    esp,0x10
c0017080:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017088:	85 c0                	test   eax,eax
c001708a:	75 08                	jne    c0017094 <FAT::seek(void*, unsigned long long)+0x4c>
c001708c:	b8 00 00 00 00       	mov    eax,0x0
c0017091:	eb 09                	jmp    c001709c <FAT::seek(void*, unsigned long long)+0x54>
c0017093:	90                   	nop
c0017094:	b8 01 00 00 00       	mov    eax,0x1
c0017099:	8d 76 00             	lea    esi,[esi+0x0]
c001709c:	83 c4 2c             	add    esp,0x2c
c001709f:	c3                   	ret    

c00170a0 <fatWrapperReadDisk>:
c00170a0:	53                   	push   ebx
c00170a1:	83 ec 18             	sub    esp,0x18
c00170a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b0:	25 ff 00 00 00       	and    eax,0xff
c00170b5:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c00170bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c4:	ba 00 00 00 00       	mov    edx,0x0
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170d0:	53                   	push   ebx
c00170d1:	52                   	push   edx
c00170d2:	50                   	push   eax
c00170d3:	51                   	push   ecx
c00170d4:	e8 fb 61 ff ff       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c00170d9:	83 c4 20             	add    esp,0x20
c00170dc:	83 c4 18             	add    esp,0x18
c00170df:	5b                   	pop    ebx
c00170e0:	c3                   	ret    
c00170e1:	8d 76 00             	lea    esi,[esi+0x0]

c00170e4 <fatWrapperWriteDisk>:
c00170e4:	53                   	push   ebx
c00170e5:	83 ec 18             	sub    esp,0x18
c00170e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170f4:	25 ff 00 00 00       	and    eax,0xff
c00170f9:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c0017100:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017108:	ba 00 00 00 00       	mov    edx,0x0
c001710d:	83 ec 0c             	sub    esp,0xc
c0017110:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017114:	53                   	push   ebx
c0017115:	52                   	push   edx
c0017116:	50                   	push   eax
c0017117:	51                   	push   ecx
c0017118:	e8 23 62 ff ff       	call   c000d340 <LogicalDisk::write(unsigned long long, int, void*)>
c001711d:	83 c4 20             	add    esp,0x20
c0017120:	83 c4 18             	add    esp,0x18
c0017123:	5b                   	pop    ebx
c0017124:	c3                   	ret    
c0017125:	8d 76 00             	lea    esi,[esi+0x0]

c0017128 <fatWrapperIoctl>:
c0017128:	53                   	push   ebx
c0017129:	83 ec 28             	sub    esp,0x28
c001712c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017130:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017134:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017138:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001713c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017141:	75 35                	jne    c0017178 <fatWrapperIoctl+0x50>
c0017143:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017147:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001714b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001714f:	25 ff 00 00 00       	and    eax,0xff
c0017154:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c001715b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017161:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017167:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001716b:	66 89 02             	mov    WORD PTR [edx],ax
c001716e:	b8 00 00 00 00       	mov    eax,0x0
c0017173:	e9 c4 00 00 00       	jmp    c001723c <fatWrapperIoctl+0x114>
c0017178:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001717d:	75 75                	jne    c00171f4 <fatWrapperIoctl+0xcc>
c001717f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017183:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017187:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001718b:	25 ff 00 00 00       	and    eax,0xff
c0017190:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c0017197:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001719d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171a3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171a9:	89 c8                	mov    eax,ecx
c00171ab:	89 da                	mov    edx,ebx
c00171ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171b1:	c1 e0 0a             	shl    eax,0xa
c00171b4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171b8:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171be:	8b 0c 8d a0 2d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd260]
c00171c5:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171cb:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171d1:	89 cb                	mov    ebx,ecx
c00171d3:	c1 fb 1f             	sar    ebx,0x1f
c00171d6:	53                   	push   ebx
c00171d7:	51                   	push   ecx
c00171d8:	52                   	push   edx
c00171d9:	50                   	push   eax
c00171da:	e8 61 4e 00 00       	call   c001c040 <__udivdi3>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	89 c2                	mov    edx,eax
c00171e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171e8:	89 10                	mov    DWORD PTR [eax],edx
c00171ea:	b8 00 00 00 00       	mov    eax,0x0
c00171ef:	eb 4b                	jmp    c001723c <fatWrapperIoctl+0x114>
c00171f1:	8d 76 00             	lea    esi,[esi+0x0]
c00171f4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171f9:	75 09                	jne    c0017204 <fatWrapperIoctl+0xdc>
c00171fb:	b8 00 00 00 00       	mov    eax,0x0
c0017200:	eb 3a                	jmp    c001723c <fatWrapperIoctl+0x114>
c0017202:	66 90                	xchg   ax,ax
c0017204:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017209:	75 19                	jne    c0017224 <fatWrapperIoctl+0xfc>
c001720b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001720f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017217:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001721d:	b8 00 00 00 00       	mov    eax,0x0
c0017222:	eb 18                	jmp    c001723c <fatWrapperIoctl+0x114>
c0017224:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017229:	75 09                	jne    c0017234 <fatWrapperIoctl+0x10c>
c001722b:	b8 00 00 00 00       	mov    eax,0x0
c0017230:	eb 0a                	jmp    c001723c <fatWrapperIoctl+0x114>
c0017232:	66 90                	xchg   ax,ax
c0017234:	b8 04 00 00 00       	mov    eax,0x4
c0017239:	8d 76 00             	lea    esi,[esi+0x0]
c001723c:	83 c4 28             	add    esp,0x28
c001723f:	5b                   	pop    ebx
c0017240:	c3                   	ret    
c0017241:	90                   	nop
c0017242:	66 90                	xchg   ax,ax

c0017244 <FAT::FAT()>:
c0017244:	83 ec 1c             	sub    esp,0x1c
c0017247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001724b:	83 ec 0c             	sub    esp,0xc
c001724e:	50                   	push   eax
c001724f:	e8 ba 3c ff ff       	call   c000af0e <Filesystem::Filesystem()>
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	ba b0 ed 01 c0       	mov    edx,0xc001edb0
c001725c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017260:	89 10                	mov    DWORD PTR [eax],edx
c0017262:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c001726c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017274:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017279:	7f 15                	jg     c0017290 <FAT::FAT()+0x4c>
c001727b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001727f:	c7 04 85 e0 3d 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc220],0xffffffff
c001728a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001728e:	eb e4                	jmp    c0017274 <FAT::FAT()+0x30>
c0017290:	90                   	nop
c0017291:	83 c4 1c             	add    esp,0x1c
c0017294:	c3                   	ret    
c0017295:	90                   	nop
c0017296:	66 90                	xchg   ax,ax

c0017298 <FAT::fixFilepath(char*)>:
c0017298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001729c:	8a 00                	mov    al,BYTE PTR [eax]
c001729e:	3c 40                	cmp    al,0x40
c00172a0:	7e 2e                	jle    c00172d0 <FAT::fixFilepath(char*)+0x38>
c00172a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a6:	8a 00                	mov    al,BYTE PTR [eax]
c00172a8:	83 e8 41             	sub    eax,0x41
c00172ab:	88 c2                	mov    dl,al
c00172ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b1:	88 10                	mov    BYTE PTR [eax],dl
c00172b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b7:	8a 00                	mov    al,BYTE PTR [eax]
c00172b9:	0f be c0             	movsx  eax,al
c00172bc:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c00172c3:	83 c0 30             	add    eax,0x30
c00172c6:	88 c2                	mov    dl,al
c00172c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172cc:	88 10                	mov    BYTE PTR [eax],dl
c00172ce:	66 90                	xchg   ax,ax
c00172d0:	90                   	nop
c00172d1:	c3                   	ret    
c00172d2:	66 90                	xchg   ax,ax

c00172d4 <FAT::open(char const*, void**, FileOpenMode)>:
c00172d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172da:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172e2:	74 0c                	je     c00172f0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172e4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172ec:	75 0e                	jne    c00172fc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	b8 04 00 00 00       	mov    eax,0x4
c00172f5:	e9 0a 01 00 00       	jmp    c0017404 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172fa:	66 90                	xchg   ax,ax
c00172fc:	83 ec 08             	sub    esp,0x8
c00172ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017306:	8d 44 24 14          	lea    eax,[esp+0x14]
c001730a:	50                   	push   eax
c001730b:	e8 10 93 fe ff       	call   c0000620 <strcpy>
c0017310:	83 c4 10             	add    esp,0x10
c0017313:	83 ec 08             	sub    esp,0x8
c0017316:	8d 44 24 10          	lea    eax,[esp+0x10]
c001731a:	50                   	push   eax
c001731b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017322:	e8 71 ff ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c0017327:	83 c4 10             	add    esp,0x10
c001732a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017332:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017339:	83 e0 01             	and    eax,0x1
c001733c:	74 0a                	je     c0017348 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001733e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017346:	66 90                	xchg   ax,ax
c0017348:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001734f:	83 e0 04             	and    eax,0x4
c0017352:	74 10                	je     c0017364 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017354:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001735c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017364:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001736b:	83 e0 02             	and    eax,0x2
c001736e:	74 08                	je     c0017378 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017370:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017378:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001737f:	83 e0 08             	and    eax,0x8
c0017382:	74 08                	je     c001738c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017384:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001738c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017393:	83 e0 10             	and    eax,0x10
c0017396:	74 08                	je     c00173a0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017398:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173a0:	83 ec 0c             	sub    esp,0xc
c00173a3:	68 28 02 00 00       	push   0x228
c00173a8:	e8 b0 0a ff ff       	call   c0007e5d <malloc>
c00173ad:	83 c4 10             	add    esp,0x10
c00173b0:	89 c2                	mov    edx,eax
c00173b2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173b9:	89 10                	mov    DWORD PTR [eax],edx
c00173bb:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173c2:	31 d2                	xor    edx,edx
c00173c4:	88 c2                	mov    dl,al
c00173c6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00173cf:	83 ec 04             	sub    esp,0x4
c00173d2:	52                   	push   edx
c00173d3:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173d7:	52                   	push   edx
c00173d8:	50                   	push   eax
c00173d9:	e8 5f c7 fe ff       	call   c0003b3d <f_open>
c00173de:	83 c4 10             	add    esp,0x10
c00173e1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173e8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173f0:	74 0a                	je     c00173fc <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173f2:	b8 01 00 00 00       	mov    eax,0x1
c00173f7:	eb 0b                	jmp    c0017404 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173f9:	8d 76 00             	lea    esi,[esi+0x0]
c00173fc:	b8 00 00 00 00       	mov    eax,0x0
c0017401:	8d 76 00             	lea    esi,[esi+0x0]
c0017404:	81 c4 1c 01 00 00    	add    esp,0x11c
c001740a:	c3                   	ret    
c001740b:	90                   	nop

c001740c <FAT::openDir(char const*, void**)>:
c001740c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017412:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001741a:	74 0c                	je     c0017428 <FAT::openDir(char const*, void**)+0x1c>
c001741c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017424:	75 0e                	jne    c0017434 <FAT::openDir(char const*, void**)+0x28>
c0017426:	66 90                	xchg   ax,ax
c0017428:	b8 04 00 00 00       	mov    eax,0x4
c001742d:	e9 82 00 00 00       	jmp    c00174b4 <FAT::openDir(char const*, void**)+0xa8>
c0017432:	66 90                	xchg   ax,ax
c0017434:	83 ec 08             	sub    esp,0x8
c0017437:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001743e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017442:	50                   	push   eax
c0017443:	e8 d8 91 fe ff       	call   c0000620 <strcpy>
c0017448:	83 c4 10             	add    esp,0x10
c001744b:	83 ec 08             	sub    esp,0x8
c001744e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017452:	50                   	push   eax
c0017453:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001745a:	e8 39 fe ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c001745f:	83 c4 10             	add    esp,0x10
c0017462:	83 ec 0c             	sub    esp,0xc
c0017465:	6a 30                	push   0x30
c0017467:	e8 f1 09 ff ff       	call   c0007e5d <malloc>
c001746c:	83 c4 10             	add    esp,0x10
c001746f:	89 c2                	mov    edx,eax
c0017471:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017478:	89 10                	mov    DWORD PTR [eax],edx
c001747a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017481:	8b 00                	mov    eax,DWORD PTR [eax]
c0017483:	83 ec 08             	sub    esp,0x8
c0017486:	8d 54 24 14          	lea    edx,[esp+0x14]
c001748a:	52                   	push   edx
c001748b:	50                   	push   eax
c001748c:	e8 35 d0 fe ff       	call   c00044c6 <f_opendir>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001749b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174a3:	74 07                	je     c00174ac <FAT::openDir(char const*, void**)+0xa0>
c00174a5:	b8 01 00 00 00       	mov    eax,0x1
c00174aa:	eb 08                	jmp    c00174b4 <FAT::openDir(char const*, void**)+0xa8>
c00174ac:	b8 00 00 00 00       	mov    eax,0x0
c00174b1:	8d 76 00             	lea    esi,[esi+0x0]
c00174b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ba:	c3                   	ret    
c00174bb:	90                   	nop

c00174bc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174c2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174ca:	75 0c                	jne    c00174d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174cc:	b8 04 00 00 00       	mov    eax,0x4
c00174d1:	e9 d6 00 00 00       	jmp    c00175ac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174d6:	66 90                	xchg   ax,ax
c00174d8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174e0:	75 0a                	jne    c00174ec <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174e2:	b8 04 00 00 00       	mov    eax,0x4
c00174e7:	e9 c0 00 00 00       	jmp    c00175ac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ec:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174f4:	75 0a                	jne    c0017500 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174f6:	b8 04 00 00 00       	mov    eax,0x4
c00174fb:	e9 ac 00 00 00       	jmp    c00175ac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017500:	83 ec 08             	sub    esp,0x8
c0017503:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001750a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017511:	50                   	push   eax
c0017512:	e8 09 91 fe ff       	call   c0000620 <strcpy>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	83 ec 08             	sub    esp,0x8
c001751d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017524:	50                   	push   eax
c0017525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001752c:	e8 67 fd ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c0017531:	83 c4 10             	add    esp,0x10
c0017534:	83 ec 08             	sub    esp,0x8
c0017537:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001753b:	50                   	push   eax
c001753c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017543:	50                   	push   eax
c0017544:	e8 fc d0 fe ff       	call   c0004645 <f_stat>
c0017549:	83 c4 10             	add    esp,0x10
c001754c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017553:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001755a:	85 c0                	test   eax,eax
c001755c:	74 0a                	je     c0017568 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001755e:	83 f8 04             	cmp    eax,0x4
c0017561:	74 39                	je     c001759c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017563:	eb 3f                	jmp    c00175a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017565:	8d 76 00             	lea    esi,[esi+0x0]
c0017568:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001756c:	25 ff 00 00 00       	and    eax,0xff
c0017571:	83 e0 10             	and    eax,0x10
c0017574:	0f 95 c2             	setne  dl
c0017577:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001757e:	88 10                	mov    BYTE PTR [eax],dl
c0017580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017584:	ba 00 00 00 00       	mov    edx,0x0
c0017589:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017590:	89 01                	mov    DWORD PTR [ecx],eax
c0017592:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017595:	b8 00 00 00 00       	mov    eax,0x0
c001759a:	eb 10                	jmp    c00175ac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001759c:	b8 02 00 00 00       	mov    eax,0x2
c00175a1:	eb 09                	jmp    c00175ac <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175a3:	90                   	nop
c00175a4:	b8 01 00 00 00       	mov    eax,0x1
c00175a9:	8d 76 00             	lea    esi,[esi+0x0]
c00175ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175b2:	c3                   	ret    
c00175b3:	90                   	nop

c00175b4 <FAT::unlink(char const*)>:
c00175b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175c2:	75 08                	jne    c00175cc <FAT::unlink(char const*)+0x18>
c00175c4:	b8 04 00 00 00       	mov    eax,0x4
c00175c9:	eb 61                	jmp    c001762c <FAT::unlink(char const*)+0x78>
c00175cb:	90                   	nop
c00175cc:	83 ec 08             	sub    esp,0x8
c00175cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175da:	50                   	push   eax
c00175db:	e8 40 90 fe ff       	call   c0000620 <strcpy>
c00175e0:	83 c4 10             	add    esp,0x10
c00175e3:	83 ec 08             	sub    esp,0x8
c00175e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175ea:	50                   	push   eax
c00175eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175f2:	e8 a1 fc ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c00175f7:	83 c4 10             	add    esp,0x10
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017601:	50                   	push   eax
c0017602:	e8 a3 d2 fe ff       	call   c00048aa <f_unlink>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017611:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017618:	85 c0                	test   eax,eax
c001761a:	75 08                	jne    c0017624 <FAT::unlink(char const*)+0x70>
c001761c:	b8 00 00 00 00       	mov    eax,0x0
c0017621:	eb 09                	jmp    c001762c <FAT::unlink(char const*)+0x78>
c0017623:	90                   	nop
c0017624:	b8 01 00 00 00       	mov    eax,0x1
c0017629:	8d 76 00             	lea    esi,[esi+0x0]
c001762c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017632:	c3                   	ret    
c0017633:	90                   	nop

c0017634 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017634:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001763a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017641:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017648:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001764c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017650:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017658:	75 0a                	jne    c0017664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001765a:	b8 04 00 00 00       	mov    eax,0x4
c001765f:	e9 54 01 00 00       	jmp    c00177b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017664:	83 ec 08             	sub    esp,0x8
c0017667:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001766e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017672:	50                   	push   eax
c0017673:	e8 a8 8f fe ff       	call   c0000620 <strcpy>
c0017678:	83 c4 10             	add    esp,0x10
c001767b:	83 ec 08             	sub    esp,0x8
c001767e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017682:	50                   	push   eax
c0017683:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001768a:	e8 09 fc ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c001768f:	83 c4 10             	add    esp,0x10
c0017692:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001769a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176a2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176a6:	25 ff 00 00 00       	and    eax,0xff
c00176ab:	83 e0 01             	and    eax,0x1
c00176ae:	74 08                	je     c00176b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176b0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176b8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176bc:	25 ff 00 00 00       	and    eax,0xff
c00176c1:	83 e0 02             	and    eax,0x2
c00176c4:	74 0a                	je     c00176d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176c6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176ce:	66 90                	xchg   ax,ax
c00176d0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176d4:	25 ff 00 00 00       	and    eax,0xff
c00176d9:	83 e0 04             	and    eax,0x4
c00176dc:	74 0a                	je     c00176e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176de:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176e6:	66 90                	xchg   ax,ax
c00176e8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176ec:	25 ff 00 00 00       	and    eax,0xff
c00176f1:	83 e0 08             	and    eax,0x8
c00176f4:	74 0a                	je     c0017700 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176f6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176fe:	66 90                	xchg   ax,ax
c0017700:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017704:	25 ff 00 00 00       	and    eax,0xff
c0017709:	83 e0 01             	and    eax,0x1
c001770c:	74 0a                	je     c0017718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001770e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017716:	66 90                	xchg   ax,ax
c0017718:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001771c:	25 ff 00 00 00       	and    eax,0xff
c0017721:	83 e0 02             	and    eax,0x2
c0017724:	74 0a                	je     c0017730 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017726:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001772e:	66 90                	xchg   ax,ax
c0017730:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017734:	25 ff 00 00 00       	and    eax,0xff
c0017739:	83 e0 04             	and    eax,0x4
c001773c:	74 0a                	je     c0017748 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001773e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017746:	66 90                	xchg   ax,ax
c0017748:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001774c:	25 ff 00 00 00       	and    eax,0xff
c0017751:	83 e0 08             	and    eax,0x8
c0017754:	74 0a                	je     c0017760 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017756:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001775e:	66 90                	xchg   ax,ax
c0017760:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017767:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001776e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017775:	31 d2                	xor    edx,edx
c0017777:	88 c2                	mov    dl,al
c0017779:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017780:	25 ff 00 00 00       	and    eax,0xff
c0017785:	83 ec 04             	sub    esp,0x4
c0017788:	52                   	push   edx
c0017789:	50                   	push   eax
c001778a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001778e:	50                   	push   eax
c001778f:	e8 89 d5 fe ff       	call   c0004d1d <f_chmod>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001779e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177a5:	85 c0                	test   eax,eax
c00177a7:	75 07                	jne    c00177b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177a9:	b8 00 00 00 00       	mov    eax,0x0
c00177ae:	eb 08                	jmp    c00177b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177b0:	b8 01 00 00 00       	mov    eax,0x1
c00177b5:	8d 76 00             	lea    esi,[esi+0x0]
c00177b8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177be:	c3                   	ret    
c00177bf:	90                   	nop

c00177c0 <FAT::rename(char const*, char const*)>:
c00177c0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177c6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177ce:	74 0c                	je     c00177dc <FAT::rename(char const*, char const*)+0x1c>
c00177d0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177d8:	75 0e                	jne    c00177e8 <FAT::rename(char const*, char const*)+0x28>
c00177da:	66 90                	xchg   ax,ax
c00177dc:	b8 04 00 00 00       	mov    eax,0x4
c00177e1:	e9 9e 00 00 00       	jmp    c0017884 <FAT::rename(char const*, char const*)+0xc4>
c00177e6:	66 90                	xchg   ax,ax
c00177e8:	83 ec 08             	sub    esp,0x8
c00177eb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177f9:	50                   	push   eax
c00177fa:	e8 21 8e fe ff       	call   c0000620 <strcpy>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	83 ec 08             	sub    esp,0x8
c0017805:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001780c:	50                   	push   eax
c001780d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017814:	e8 7f fa ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c0017819:	83 c4 10             	add    esp,0x10
c001781c:	83 ec 08             	sub    esp,0x8
c001781f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017826:	8d 44 24 18          	lea    eax,[esp+0x18]
c001782a:	50                   	push   eax
c001782b:	e8 f0 8d fe ff       	call   c0000620 <strcpy>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	83 ec 08             	sub    esp,0x8
c0017836:	8d 44 24 14          	lea    eax,[esp+0x14]
c001783a:	50                   	push   eax
c001783b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017842:	e8 51 fa ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	83 ec 08             	sub    esp,0x8
c001784d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017851:	50                   	push   eax
c0017852:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017859:	50                   	push   eax
c001785a:	e8 08 d3 fe ff       	call   c0004b67 <f_rename>
c001785f:	83 c4 10             	add    esp,0x10
c0017862:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017869:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017870:	85 c0                	test   eax,eax
c0017872:	75 08                	jne    c001787c <FAT::rename(char const*, char const*)+0xbc>
c0017874:	b8 00 00 00 00       	mov    eax,0x0
c0017879:	eb 09                	jmp    c0017884 <FAT::rename(char const*, char const*)+0xc4>
c001787b:	90                   	nop
c001787c:	b8 01 00 00 00       	mov    eax,0x1
c0017881:	8d 76 00             	lea    esi,[esi+0x0]
c0017884:	81 c4 1c 02 00 00    	add    esp,0x21c
c001788a:	c3                   	ret    
c001788b:	90                   	nop

c001788c <FAT::mkdir(char const*)>:
c001788c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017892:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001789a:	75 08                	jne    c00178a4 <FAT::mkdir(char const*)+0x18>
c001789c:	b8 04 00 00 00       	mov    eax,0x4
c00178a1:	eb 61                	jmp    c0017904 <FAT::mkdir(char const*)+0x78>
c00178a3:	90                   	nop
c00178a4:	83 ec 08             	sub    esp,0x8
c00178a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178b2:	50                   	push   eax
c00178b3:	e8 68 8d fe ff       	call   c0000620 <strcpy>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	83 ec 08             	sub    esp,0x8
c00178be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178c2:	50                   	push   eax
c00178c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ca:	e8 c9 f9 ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178d9:	50                   	push   eax
c00178da:	e8 ed d0 fe ff       	call   c00049cc <f_mkdir>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178e9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178f0:	85 c0                	test   eax,eax
c00178f2:	75 08                	jne    c00178fc <FAT::mkdir(char const*)+0x70>
c00178f4:	b8 00 00 00 00       	mov    eax,0x0
c00178f9:	eb 09                	jmp    c0017904 <FAT::mkdir(char const*)+0x78>
c00178fb:	90                   	nop
c00178fc:	b8 01 00 00 00       	mov    eax,0x1
c0017901:	8d 76 00             	lea    esi,[esi+0x0]
c0017904:	81 c4 1c 01 00 00    	add    esp,0x11c
c001790a:	c3                   	ret    
c001790b:	90                   	nop

c001790c <FAT::exists(char const*)>:
c001790c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017912:	83 ec 08             	sub    esp,0x8
c0017915:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001791c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017920:	50                   	push   eax
c0017921:	e8 fa 8c fe ff       	call   c0000620 <strcpy>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	83 ec 08             	sub    esp,0x8
c001792c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017930:	50                   	push   eax
c0017931:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017938:	e8 5b f9 ff ff       	call   c0017298 <FAT::fixFilepath(char*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	83 ec 08             	sub    esp,0x8
c0017943:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001794a:	50                   	push   eax
c001794b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001794f:	50                   	push   eax
c0017950:	e8 f0 cc fe ff       	call   c0004645 <f_stat>
c0017955:	83 c4 10             	add    esp,0x10
c0017958:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001795f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017966:	85 c0                	test   eax,eax
c0017968:	75 06                	jne    c0017970 <FAT::exists(char const*)+0x64>
c001796a:	b0 01                	mov    al,0x1
c001796c:	eb 06                	jmp    c0017974 <FAT::exists(char const*)+0x68>
c001796e:	66 90                	xchg   ax,ax
c0017970:	b0 00                	mov    al,0x0
c0017972:	66 90                	xchg   ax,ax
c0017974:	81 c4 2c 02 00 00    	add    esp,0x22c
c001797a:	c3                   	ret    
c001797b:	90                   	nop

c001797c <isoReadDiscSectorHelper>:
c001797c:	83 ec 2c             	sub    esp,0x2c
c001797f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017987:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001798c:	83 e8 41             	sub    eax,0x41
c001798f:	8b 0c 85 a0 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd260]
c0017996:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001799a:	ba 00 00 00 00       	mov    edx,0x0
c001799f:	83 ec 0c             	sub    esp,0xc
c00179a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179aa:	52                   	push   edx
c00179ab:	50                   	push   eax
c00179ac:	51                   	push   ecx
c00179ad:	e8 22 59 ff ff       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c00179b2:	83 c4 20             	add    esp,0x20
c00179b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179b9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179be:	74 0c                	je     c00179cc <isoReadDiscSectorHelper+0x50>
c00179c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179c4:	c1 e0 0b             	shl    eax,0xb
c00179c7:	eb 0b                	jmp    c00179d4 <isoReadDiscSectorHelper+0x58>
c00179c9:	8d 76 00             	lea    esi,[esi+0x0]
c00179cc:	b8 00 00 00 00       	mov    eax,0x0
c00179d1:	8d 76 00             	lea    esi,[esi+0x0]
c00179d4:	83 c4 2c             	add    esp,0x2c
c00179d7:	c3                   	ret    

c00179d8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179d8:	b8 08 00 00 00       	mov    eax,0x8
c00179dd:	c3                   	ret    

c00179de <ISO9660::getName()>:
c00179de:	b8 10 ee 01 c0       	mov    eax,0xc001ee10
c00179e3:	c3                   	ret    

c00179e4 <ISO9660::closeDir(void*)>:
c00179e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00179ea:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179ed:	90                   	nop

c00179ee <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179ee:	b8 01 00 00 00       	mov    eax,0x1
c00179f3:	c3                   	ret    

c00179f4 <ISO9660::unlink(char const*)>:
c00179f4:	b8 01 00 00 00       	mov    eax,0x1
c00179f9:	c3                   	ret    

c00179fa <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179fa:	b8 03 00 00 00       	mov    eax,0x3
c00179ff:	c3                   	ret    

c0017a00 <ISO9660::rename(char const*, char const*)>:
c0017a00:	b8 01 00 00 00       	mov    eax,0x1
c0017a05:	c3                   	ret    

c0017a06 <ISO9660::mkdir(char const*)>:
c0017a06:	b8 01 00 00 00       	mov    eax,0x1
c0017a0b:	c3                   	ret    

c0017a0c <ISO9660::~ISO9660()>:
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	ba dc ee 01 c0       	mov    edx,0xc001eedc
c0017a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a18:	89 10                	mov    DWORD PTR [eax],edx
c0017a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a1e:	83 ec 0c             	sub    esp,0xc
c0017a21:	50                   	push   eax
c0017a22:	e8 0b 35 ff ff       	call   c000af32 <Filesystem::~Filesystem()>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	90                   	nop
c0017a2b:	83 c4 0c             	add    esp,0xc
c0017a2e:	c3                   	ret    
c0017a2f:	90                   	nop

c0017a30 <ISO9660::~ISO9660()>:
c0017a30:	83 ec 0c             	sub    esp,0xc
c0017a33:	83 ec 0c             	sub    esp,0xc
c0017a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a3a:	e8 cd ff ff ff       	call   c0017a0c <ISO9660::~ISO9660()>
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	83 ec 08             	sub    esp,0x8
c0017a45:	6a 08                	push   0x8
c0017a47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a4b:	e8 a6 30 ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0017a50:	83 c4 10             	add    esp,0x10
c0017a53:	83 c4 0c             	add    esp,0xc
c0017a56:	c3                   	ret    
c0017a57:	90                   	nop

c0017a58 <ISO9660::exists(char const*)>:
c0017a58:	83 ec 18             	sub    esp,0x18
c0017a5b:	68 2b ee 01 c0       	push   0xc001ee2b
c0017a60:	e8 ad dd ff ff       	call   c0015812 <HalPanic(char const*)>
c0017a65:	31 c0                	xor    eax,eax
c0017a67:	83 c4 1c             	add    esp,0x1c
c0017a6a:	c3                   	ret    
c0017a6b:	90                   	nop

c0017a6c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017a6c:	53                   	push   ebx
c0017a6d:	83 ec 08             	sub    esp,0x8
c0017a70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a78:	85 c0                	test   eax,eax
c0017a7a:	0f 94 c3             	sete   bl
c0017a7d:	85 d2                	test   edx,edx
c0017a7f:	0f 94 c1             	sete   cl
c0017a82:	08 cb                	or     bl,cl
c0017a84:	75 2e                	jne    c0017ab4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c0017a86:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a8b:	74 27                	je     c0017ab4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c0017a8d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0017a99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017aa0:	68 49 ee 01 c0       	push   0xc001ee49
c0017aa5:	e8 68 dd ff ff       	call   c0015812 <HalPanic(char const*)>
c0017aaa:	83 c4 10             	add    esp,0x10
c0017aad:	b8 01 00 00 00       	mov    eax,0x1
c0017ab2:	eb 05                	jmp    c0017ab9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x4d>
c0017ab4:	b8 04 00 00 00       	mov    eax,0x4
c0017ab9:	83 c4 08             	add    esp,0x8
c0017abc:	5b                   	pop    ebx
c0017abd:	c3                   	ret    

c0017abe <ISO9660::openDir(char const*, void**)>:
c0017abe:	83 ec 0c             	sub    esp,0xc
c0017ac1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017ac6:	74 1b                	je     c0017ae3 <ISO9660::openDir(char const*, void**)+0x25>
c0017ac8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017acd:	74 14                	je     c0017ae3 <ISO9660::openDir(char const*, void**)+0x25>
c0017acf:	83 ec 0c             	sub    esp,0xc
c0017ad2:	68 69 ee 01 c0       	push   0xc001ee69
c0017ad7:	e8 36 dd ff ff       	call   c0015812 <HalPanic(char const*)>
c0017adc:	83 c4 10             	add    esp,0x10
c0017adf:	31 c0                	xor    eax,eax
c0017ae1:	eb 05                	jmp    c0017ae8 <ISO9660::openDir(char const*, void**)+0x2a>
c0017ae3:	b8 04 00 00 00       	mov    eax,0x4
c0017ae8:	83 c4 0c             	add    esp,0xc
c0017aeb:	c3                   	ret    

c0017aec <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017aec:	83 ec 0c             	sub    esp,0xc
c0017aef:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0017af4:	74 1b                	je     c0017b11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25>
c0017af6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017afb:	74 14                	je     c0017b11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25>
c0017afd:	83 ec 0c             	sub    esp,0xc
c0017b00:	68 88 ee 01 c0       	push   0xc001ee88
c0017b05:	e8 08 dd ff ff       	call   c0015812 <HalPanic(char const*)>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	31 c0                	xor    eax,eax
c0017b0f:	eb 05                	jmp    c0017b16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2a>
c0017b11:	b8 04 00 00 00       	mov    eax,0x4
c0017b16:	83 c4 0c             	add    esp,0xc
c0017b19:	c3                   	ret    

c0017b1a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017b1a:	56                   	push   esi
c0017b1b:	53                   	push   ebx
c0017b1c:	51                   	push   ecx
c0017b1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b25:	85 db                	test   ebx,ebx
c0017b27:	74 71                	je     c0017b9a <ISO9660::open(char const*, void**, FileOpenMode)+0x80>
c0017b29:	85 f6                	test   esi,esi
c0017b2b:	74 6d                	je     c0017b9a <ISO9660::open(char const*, void**, FileOpenMode)+0x80>
c0017b2d:	ba 03 00 00 00       	mov    edx,0x3
c0017b32:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017b37:	75 66                	jne    c0017b9f <ISO9660::open(char const*, void**, FileOpenMode)+0x85>
c0017b39:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b3c:	3a 05 c0 3e 02 c0    	cmp    al,BYTE PTR ds:0xc0023ec0
c0017b42:	74 34                	je     c0017b78 <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017b44:	83 ec 0c             	sub    esp,0xc
c0017b47:	50                   	push   eax
c0017b48:	e8 4b f1 fe ff       	call   c0006c98 <init_percd>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	ba 0b 00 00 00       	mov    edx,0xb
c0017b55:	40                   	inc    eax
c0017b56:	74 47                	je     c0017b9f <ISO9660::open(char const*, void**, FileOpenMode)+0x85>
c0017b58:	80 3d c0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ec0,0x0
c0017b5f:	74 10                	je     c0017b71 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017b61:	83 ec 0c             	sub    esp,0xc
c0017b64:	68 a7 ee 01 c0       	push   0xc001eea7
c0017b69:	e8 a4 dc ff ff       	call   c0015812 <HalPanic(char const*)>
c0017b6e:	83 c4 10             	add    esp,0x10
c0017b71:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b73:	a2 c0 3e 02 c0       	mov    ds:0xc0023ec0,al
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	83 c3 03             	add    ebx,0x3
c0017b7e:	53                   	push   ebx
c0017b7f:	e8 7e e9 fe ff       	call   c0006502 <iso_open>
c0017b84:	83 c4 10             	add    esp,0x10
c0017b87:	ba 01 00 00 00       	mov    edx,0x1
c0017b8c:	83 f8 ff             	cmp    eax,0xffffffff
c0017b8f:	74 0e                	je     c0017b9f <ISO9660::open(char const*, void**, FileOpenMode)+0x85>
c0017b91:	83 c0 64             	add    eax,0x64
c0017b94:	31 d2                	xor    edx,edx
c0017b96:	89 06                	mov    DWORD PTR [esi],eax
c0017b98:	eb 05                	jmp    c0017b9f <ISO9660::open(char const*, void**, FileOpenMode)+0x85>
c0017b9a:	ba 04 00 00 00       	mov    edx,0x4
c0017b9f:	89 d0                	mov    eax,edx
c0017ba1:	5a                   	pop    edx
c0017ba2:	5b                   	pop    ebx
c0017ba3:	5e                   	pop    esi
c0017ba4:	c3                   	ret    
c0017ba5:	90                   	nop

c0017ba6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017ba6:	53                   	push   ebx
c0017ba7:	83 ec 08             	sub    esp,0x8
c0017baa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bb2:	85 c0                	test   eax,eax
c0017bb4:	74 25                	je     c0017bdb <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bb6:	85 db                	test   ebx,ebx
c0017bb8:	74 21                	je     c0017bdb <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bba:	83 e8 64             	sub    eax,0x64
c0017bbd:	52                   	push   edx
c0017bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bc6:	50                   	push   eax
c0017bc7:	e8 21 ea fe ff       	call   c00065ed <iso_read>
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	89 03                	mov    DWORD PTR [ebx],eax
c0017bd1:	09 d0                	or     eax,edx
c0017bd3:	0f 94 c0             	sete   al
c0017bd6:	0f b6 c0             	movzx  eax,al
c0017bd9:	eb 05                	jmp    c0017be0 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017bdb:	b8 04 00 00 00       	mov    eax,0x4
c0017be0:	83 c4 08             	add    esp,0x8
c0017be3:	5b                   	pop    ebx
c0017be4:	c3                   	ret    
c0017be5:	90                   	nop

c0017be6 <ISO9660::seek(void*, unsigned long long)>:
c0017be6:	57                   	push   edi
c0017be7:	56                   	push   esi
c0017be8:	b8 04 00 00 00       	mov    eax,0x4
c0017bed:	51                   	push   ecx
c0017bee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bf2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bf6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bfa:	85 d2                	test   edx,edx
c0017bfc:	74 1c                	je     c0017c1a <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bfe:	6a 00                	push   0x0
c0017c00:	83 ea 64             	sub    edx,0x64
c0017c03:	57                   	push   edi
c0017c04:	56                   	push   esi
c0017c05:	52                   	push   edx
c0017c06:	e8 e0 eb fe ff       	call   c00067eb <iso_seek>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	31 f0                	xor    eax,esi
c0017c10:	31 fa                	xor    edx,edi
c0017c12:	09 d0                	or     eax,edx
c0017c14:	0f 95 c0             	setne  al
c0017c17:	0f b6 c0             	movzx  eax,al
c0017c1a:	5a                   	pop    edx
c0017c1b:	5e                   	pop    esi
c0017c1c:	5f                   	pop    edi
c0017c1d:	c3                   	ret    

c0017c1e <ISO9660::tell(void*, unsigned long long*)>:
c0017c1e:	53                   	push   ebx
c0017c1f:	83 ec 08             	sub    esp,0x8
c0017c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c2a:	85 c0                	test   eax,eax
c0017c2c:	74 1c                	je     c0017c4a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c2e:	85 db                	test   ebx,ebx
c0017c30:	74 18                	je     c0017c4a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	83 e8 64             	sub    eax,0x64
c0017c38:	50                   	push   eax
c0017c39:	e8 8b ec fe ff       	call   c00068c9 <iso_tell>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	89 03                	mov    DWORD PTR [ebx],eax
c0017c43:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c46:	31 c0                	xor    eax,eax
c0017c48:	eb 05                	jmp    c0017c4f <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c4a:	b8 04 00 00 00       	mov    eax,0x4
c0017c4f:	83 c4 08             	add    esp,0x8
c0017c52:	5b                   	pop    ebx
c0017c53:	c3                   	ret    

c0017c54 <ISO9660::stat(void*, unsigned long long*)>:
c0017c54:	53                   	push   ebx
c0017c55:	83 ec 08             	sub    esp,0x8
c0017c58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c60:	85 c0                	test   eax,eax
c0017c62:	74 20                	je     c0017c84 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c64:	85 db                	test   ebx,ebx
c0017c66:	74 1c                	je     c0017c84 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	83 e8 64             	sub    eax,0x64
c0017c6e:	50                   	push   eax
c0017c6f:	e8 b2 ec fe ff       	call   c0006926 <iso_total>
c0017c74:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c7b:	89 03                	mov    DWORD PTR [ebx],eax
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	31 c0                	xor    eax,eax
c0017c82:	eb 05                	jmp    c0017c89 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c84:	b8 04 00 00 00       	mov    eax,0x4
c0017c89:	83 c4 08             	add    esp,0x8
c0017c8c:	5b                   	pop    ebx
c0017c8d:	c3                   	ret    

c0017c8e <ISO9660::close(void*)>:
c0017c8e:	83 ec 0c             	sub    esp,0xc
c0017c91:	b8 04 00 00 00       	mov    eax,0x4
c0017c96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c9a:	85 d2                	test   edx,edx
c0017c9c:	74 11                	je     c0017caf <ISO9660::close(void*)+0x21>
c0017c9e:	83 ec 0c             	sub    esp,0xc
c0017ca1:	83 ea 64             	sub    edx,0x64
c0017ca4:	52                   	push   edx
c0017ca5:	e8 28 e9 fe ff       	call   c00065d2 <iso_close>
c0017caa:	83 c4 10             	add    esp,0x10
c0017cad:	31 c0                	xor    eax,eax
c0017caf:	83 c4 0c             	add    esp,0xc
c0017cb2:	c3                   	ret    

c0017cb3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017cb3:	57                   	push   edi
c0017cb4:	56                   	push   esi
c0017cb5:	53                   	push   ebx
c0017cb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017cba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017cbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017cc2:	39 35 c4 3e 02 c0    	cmp    DWORD PTR ds:0xc0023ec4,esi
c0017cc8:	75 08                	jne    c0017cd2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017cca:	38 1d 14 f8 01 c0    	cmp    BYTE PTR ds:0xc001f814,bl
c0017cd0:	74 59                	je     c0017d2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017cd2:	83 ec 0c             	sub    esp,0xc
c0017cd5:	31 d2                	xor    edx,edx
c0017cd7:	68 e0 3e 02 c0       	push   0xc0023ee0
c0017cdc:	0f be c3             	movsx  eax,bl
c0017cdf:	6a 01                	push   0x1
c0017ce1:	52                   	push   edx
c0017ce2:	56                   	push   esi
c0017ce3:	ff 34 85 9c 2c 02 c0 	push   DWORD PTR [eax*4-0x3ffdd364]
c0017cea:	e8 e5 55 ff ff       	call   c000d2d4 <LogicalDisk::read(unsigned long long, int, void*)>
c0017cef:	83 c4 20             	add    esp,0x20
c0017cf2:	85 c0                	test   eax,eax
c0017cf4:	75 0e                	jne    c0017d04 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017cf6:	89 35 c4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec4,esi
c0017cfc:	88 1d 14 f8 01 c0    	mov    BYTE PTR ds:0xc001f814,bl
c0017d02:	eb 27                	jmp    c0017d2b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017d04:	83 ec 0c             	sub    esp,0xc
c0017d07:	68 b7 ee 01 c0       	push   0xc001eeb7
c0017d0c:	e8 db 2e ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0017d11:	83 c4 0c             	add    esp,0xc
c0017d14:	68 00 08 00 00       	push   0x800
c0017d19:	6a 00                	push   0x0
c0017d1b:	57                   	push   edi
c0017d1c:	e8 cf 87 fe ff       	call   c00004f0 <memset>
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	b8 01 00 00 00       	mov    eax,0x1
c0017d29:	eb 0e                	jmp    c0017d39 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017d2b:	be e0 3e 02 c0       	mov    esi,0xc0023ee0
c0017d30:	b9 00 08 00 00       	mov    ecx,0x800
c0017d35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d37:	31 c0                	xor    eax,eax
c0017d39:	5b                   	pop    ebx
c0017d3a:	5e                   	pop    esi
c0017d3b:	5f                   	pop    edi
c0017d3c:	c3                   	ret    
c0017d3d:	90                   	nop

c0017d3e <ISO9660::tryMount(LogicalDisk*, int)>:
c0017d3e:	53                   	push   ebx
c0017d3f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017d45:	c7 05 c4 3e 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023ec4,0xdeadbeef
c0017d4f:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017d56:	8d 58 41             	lea    ebx,[eax+0x41]
c0017d59:	0f be db             	movsx  ebx,bl
c0017d5c:	53                   	push   ebx
c0017d5d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017d61:	50                   	push   eax
c0017d62:	6a 10                	push   0x10
c0017d64:	e8 4a ff ff ff       	call   c0017cb3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	31 d2                	xor    edx,edx
c0017d6e:	85 c0                	test   eax,eax
c0017d70:	75 33                	jne    c0017da5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017d72:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017d77:	75 2c                	jne    c0017da5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017d79:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017d7e:	75 25                	jne    c0017da5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017d80:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017d85:	75 1e                	jne    c0017da5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017d87:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017d8c:	75 17                	jne    c0017da5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017d8e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017d93:	75 10                	jne    c0017da5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017d95:	83 ec 0c             	sub    esp,0xc
c0017d98:	53                   	push   ebx
c0017d99:	e8 fa ee fe ff       	call   c0006c98 <init_percd>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	40                   	inc    eax
c0017da2:	0f 95 c2             	setne  dl
c0017da5:	88 d0                	mov    al,dl
c0017da7:	81 c4 08 08 00 00    	add    esp,0x808
c0017dad:	5b                   	pop    ebx
c0017dae:	c3                   	ret    
c0017daf:	90                   	nop

c0017db0 <ISO9660::ISO9660()>:
c0017db0:	83 ec 0c             	sub    esp,0xc
c0017db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db7:	83 ec 0c             	sub    esp,0xc
c0017dba:	50                   	push   eax
c0017dbb:	e8 4e 31 ff ff       	call   c000af0e <Filesystem::Filesystem()>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	ba dc ee 01 c0       	mov    edx,0xc001eedc
c0017dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dcc:	89 10                	mov    DWORD PTR [eax],edx
c0017dce:	e8 d5 ef fe ff       	call   c0006da8 <fs_iso9660_init>
c0017dd3:	90                   	nop
c0017dd4:	83 c4 0c             	add    esp,0xc
c0017dd7:	c3                   	ret    

c0017dd8 <SoundCard::beginPlayback()>:
c0017dd8:	c7 44 24 04 3c ef 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ef3c
c0017de0:	e9 56 89 ff ff       	jmp    c001073b <Krnl::panic(char const*)>
c0017de5:	90                   	nop

c0017de6 <SoundCard::stopPlayback()>:
c0017de6:	c7 44 24 04 3c ef 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ef3c
c0017dee:	e9 48 89 ff ff       	jmp    c001073b <Krnl::panic(char const*)>
c0017df3:	90                   	nop

c0017df4 <SoundCard::SoundCard(char const*)>:
c0017df4:	83 ec 1c             	sub    esp,0x1c
c0017df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dfb:	83 ec 08             	sub    esp,0x8
c0017dfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e02:	50                   	push   eax
c0017e03:	e8 bc 43 ff ff       	call   c000c1c4 <Device::Device(char const*)>
c0017e08:	83 c4 10             	add    esp,0x10
c0017e0b:	ba 88 ef 01 c0       	mov    edx,0xc001ef88
c0017e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e14:	89 10                	mov    DWORD PTR [eax],edx
c0017e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e1a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e25:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e33:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017e3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e41:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017e4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e4f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017e59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e61:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017e66:	7f 19                	jg     c0017e81 <SoundCard::SoundCard(char const*)+0x8d>
c0017e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e70:	83 c2 54             	add    edx,0x54
c0017e73:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017e7b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e7f:	eb e0                	jmp    c0017e61 <SoundCard::SoundCard(char const*)+0x6d>
c0017e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e85:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e8c:	90                   	nop
c0017e8d:	83 c4 1c             	add    esp,0x1c
c0017e90:	c3                   	ret    
c0017e91:	90                   	nop

c0017e92 <SoundCard::~SoundCard()>:
c0017e92:	83 ec 0c             	sub    esp,0xc
c0017e95:	ba 88 ef 01 c0       	mov    edx,0xc001ef88
c0017e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e9e:	89 10                	mov    DWORD PTR [eax],edx
c0017ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea4:	83 ec 0c             	sub    esp,0xc
c0017ea7:	50                   	push   eax
c0017ea8:	e8 81 40 ff ff       	call   c000bf2e <Device::~Device()>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	90                   	nop
c0017eb1:	83 c4 0c             	add    esp,0xc
c0017eb4:	c3                   	ret    
c0017eb5:	90                   	nop

c0017eb6 <SoundCard::~SoundCard()>:
c0017eb6:	83 ec 0c             	sub    esp,0xc
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ec0:	e8 cd ff ff ff       	call   c0017e92 <SoundCard::~SoundCard()>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	83 ec 08             	sub    esp,0x8
c0017ecb:	68 e8 01 00 00       	push   0x1e8
c0017ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ed4:	e8 1d 2c ff ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c0017ed9:	83 c4 10             	add    esp,0x10
c0017edc:	83 c4 0c             	add    esp,0xc
c0017edf:	c3                   	ret    

c0017ee0 <SoundCard::configureRates(int, int, int)>:
c0017ee0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ee4:	31 c0                	xor    eax,eax
c0017ee6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017eed:	75 20                	jne    c0017f0f <SoundCard::configureRates(int, int, int)+0x2f>
c0017eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ef3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017ef9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017efd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f07:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f0d:	b0 01                	mov    al,0x1
c0017f0f:	c3                   	ret    

c0017f10 <SoundCard::getSamples16(int, short*)>:
c0017f10:	55                   	push   ebp
c0017f11:	57                   	push   edi
c0017f12:	31 ff                	xor    edi,edi
c0017f14:	56                   	push   esi
c0017f15:	53                   	push   ebx
c0017f16:	31 db                	xor    ebx,ebx
c0017f18:	83 ec 10             	sub    esp,0x10
c0017f1b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f1f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f23:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f26:	50                   	push   eax
c0017f27:	6a 00                	push   0x0
c0017f29:	55                   	push   ebp
c0017f2a:	e8 c1 85 fe ff       	call   c00004f0 <memset>
c0017f2f:	83 c4 10             	add    esp,0x10
c0017f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f36:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017f3d:	85 c0                	test   eax,eax
c0017f3f:	74 1b                	je     c0017f5c <SoundCard::getSamples16(int, short*)+0x4c>
c0017f41:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017f45:	75 15                	jne    c0017f5c <SoundCard::getSamples16(int, short*)+0x4c>
c0017f47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f4b:	55                   	push   ebp
c0017f4c:	56                   	push   esi
c0017f4d:	50                   	push   eax
c0017f4e:	e8 ed 02 00 00       	call   c0018240 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017f53:	83 c4 10             	add    esp,0x10
c0017f56:	39 c7                	cmp    edi,eax
c0017f58:	7d 02                	jge    c0017f5c <SoundCard::getSamples16(int, short*)+0x4c>
c0017f5a:	89 c7                	mov    edi,eax
c0017f5c:	43                   	inc    ebx
c0017f5d:	83 fb 20             	cmp    ebx,0x20
c0017f60:	75 d0                	jne    c0017f32 <SoundCard::getSamples16(int, short*)+0x22>
c0017f62:	83 c4 0c             	add    esp,0xc
c0017f65:	89 f8                	mov    eax,edi
c0017f67:	5b                   	pop    ebx
c0017f68:	5e                   	pop    esi
c0017f69:	5f                   	pop    edi
c0017f6a:	5d                   	pop    ebp
c0017f6b:	c3                   	ret    

c0017f6c <SoundCard::getSamples32(int, int*)>:
c0017f6c:	55                   	push   ebp
c0017f6d:	57                   	push   edi
c0017f6e:	31 ff                	xor    edi,edi
c0017f70:	56                   	push   esi
c0017f71:	31 f6                	xor    esi,esi
c0017f73:	53                   	push   ebx
c0017f74:	83 ec 10             	sub    esp,0x10
c0017f77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017f7f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f83:	c1 e0 02             	shl    eax,0x2
c0017f86:	50                   	push   eax
c0017f87:	6a 00                	push   0x0
c0017f89:	55                   	push   ebp
c0017f8a:	e8 61 85 fe ff       	call   c00004f0 <memset>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017f99:	85 c0                	test   eax,eax
c0017f9b:	74 1b                	je     c0017fb8 <SoundCard::getSamples32(int, int*)+0x4c>
c0017f9d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fa1:	75 15                	jne    c0017fb8 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fa3:	53                   	push   ebx
c0017fa4:	55                   	push   ebp
c0017fa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fa9:	50                   	push   eax
c0017faa:	e8 55 03 00 00       	call   c0018304 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	39 c6                	cmp    esi,eax
c0017fb4:	7d 02                	jge    c0017fb8 <SoundCard::getSamples32(int, int*)+0x4c>
c0017fb6:	89 c6                	mov    esi,eax
c0017fb8:	47                   	inc    edi
c0017fb9:	83 ff 20             	cmp    edi,0x20
c0017fbc:	75 d4                	jne    c0017f92 <SoundCard::getSamples32(int, int*)+0x26>
c0017fbe:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017fc4:	85 f6                	test   esi,esi
c0017fc6:	75 0f                	jne    c0017fd7 <SoundCard::getSamples32(int, int*)+0x6b>
c0017fc8:	84 c0                	test   al,al
c0017fca:	74 1b                	je     c0017fe7 <SoundCard::getSamples32(int, int*)+0x7b>
c0017fcc:	83 ec 0c             	sub    esp,0xc
c0017fcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fd1:	53                   	push   ebx
c0017fd2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017fd5:	eb 0d                	jmp    c0017fe4 <SoundCard::getSamples32(int, int*)+0x78>
c0017fd7:	84 c0                	test   al,al
c0017fd9:	75 0c                	jne    c0017fe7 <SoundCard::getSamples32(int, int*)+0x7b>
c0017fdb:	83 ec 0c             	sub    esp,0xc
c0017fde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fe0:	53                   	push   ebx
c0017fe1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017fe4:	83 c4 10             	add    esp,0x10
c0017fe7:	83 c4 0c             	add    esp,0xc
c0017fea:	89 f0                	mov    eax,esi
c0017fec:	5b                   	pop    ebx
c0017fed:	5e                   	pop    esi
c0017fee:	5f                   	pop    edi
c0017fef:	5d                   	pop    ebp
c0017ff0:	c3                   	ret    
c0017ff1:	90                   	nop

c0017ff2 <SoundCard::addChannel(SoundPort*)>:
c0017ff2:	83 ec 0c             	sub    esp,0xc
c0017ff5:	31 c0                	xor    eax,eax
c0017ff7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ffb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018003:	74 1b                	je     c0018020 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018005:	40                   	inc    eax
c0018006:	83 f8 20             	cmp    eax,0x20
c0018009:	75 f0                	jne    c0017ffb <SoundCard::addChannel(SoundPort*)+0x9>
c001800b:	83 ec 0c             	sub    esp,0xc
c001800e:	68 61 ef 01 c0       	push   0xc001ef61
c0018013:	e8 23 87 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0018018:	83 c4 10             	add    esp,0x10
c001801b:	83 c8 ff             	or     eax,0xffffffff
c001801e:	eb 0b                	jmp    c001802b <SoundCard::addChannel(SoundPort*)+0x39>
c0018020:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018024:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001802b:	83 c4 0c             	add    esp,0xc
c001802e:	c3                   	ret    
c001802f:	90                   	nop

c0018030 <SoundCard::removeChannel(int)>:
c0018030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018034:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018038:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018043:	c3                   	ret    

c0018044 <SoundPort::SoundPort(int, int, int, int)>:
c0018044:	83 ec 0c             	sub    esp,0xc
c0018047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001804b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018056:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001805a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018062:	89 10                	mov    DWORD PTR [eax],edx
c0018064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018068:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001806c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001806f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018073:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018077:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001807a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001807f:	75 13                	jne    c0018094 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018085:	8b 00                	mov    eax,DWORD PTR [eax]
c0018087:	05 a0 0f 00 00       	add    eax,0xfa0
c001808c:	01 c0                	add    eax,eax
c001808e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018092:	66 90                	xchg   ax,ax
c0018094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018098:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001809c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001809f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00180aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00180b1:	c1 e0 02             	shl    eax,0x2
c00180b4:	83 ec 0c             	sub    esp,0xc
c00180b7:	50                   	push   eax
c00180b8:	e8 a0 fd fe ff       	call   c0007e5d <malloc>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	89 c2                	mov    edx,eax
c00180c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00180c9:	90                   	nop
c00180ca:	83 c4 0c             	add    esp,0xc
c00180cd:	c3                   	ret    
c00180ce:	66 90                	xchg   ax,ax

c00180d0 <SoundPort::~SoundPort()>:
c00180d0:	83 ec 0c             	sub    esp,0xc
c00180d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00180da:	85 c0                	test   eax,eax
c00180dc:	74 1e                	je     c00180fc <SoundPort::~SoundPort()+0x2c>
c00180de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00180e5:	83 ec 0c             	sub    esp,0xc
c00180e8:	50                   	push   eax
c00180e9:	e8 7f fd fe ff       	call   c0007e6d <free>
c00180ee:	83 c4 10             	add    esp,0x10
c00180f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180fc:	90                   	nop
c00180fd:	83 c4 0c             	add    esp,0xc
c0018100:	c3                   	ret    
c0018101:	90                   	nop
c0018102:	66 90                	xchg   ax,ax

c0018104 <SoundPort::unpause()>:
c0018104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018108:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001810c:	c3                   	ret    
c001810d:	90                   	nop
c001810e:	66 90                	xchg   ax,ax

c0018110 <SoundPort::pause()>:
c0018110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018114:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018118:	c3                   	ret    
c0018119:	90                   	nop
c001811a:	66 90                	xchg   ax,ax

c001811c <SoundPort::getBufferUsed()>:
c001811c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018120:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018123:	c3                   	ret    

c0018124 <SoundPort::getBufferSize()>:
c0018124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001812b:	c3                   	ret    

c001812c <SoundPort::buffer16(short*, int)>:
c001812c:	55                   	push   ebp
c001812d:	57                   	push   edi
c001812e:	56                   	push   esi
c001812f:	53                   	push   ebx
c0018130:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018134:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018138:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001813b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001813e:	74 68                	je     c00181a8 <SoundPort::buffer16(short*, int)+0x7c>
c0018140:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018144:	85 c9                	test   ecx,ecx
c0018146:	7e 60                	jle    c00181a8 <SoundPort::buffer16(short*, int)+0x7c>
c0018148:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001814c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001814f:	c1 e1 0f             	shl    ecx,0xf
c0018152:	8d 70 01             	lea    esi,[eax+0x1]
c0018155:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018158:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001815b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001815e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018161:	74 4d                	je     c00181b0 <SoundPort::buffer16(short*, int)+0x84>
c0018163:	31 f6                	xor    esi,esi
c0018165:	eb 21                	jmp    c0018188 <SoundPort::buffer16(short*, int)+0x5c>
c0018167:	90                   	nop
c0018168:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001816d:	8d 79 01             	lea    edi,[ecx+0x1]
c0018170:	c1 e3 0f             	shl    ebx,0xf
c0018173:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018176:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018179:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001817c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001817f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018182:	74 1c                	je     c00181a0 <SoundPort::buffer16(short*, int)+0x74>
c0018184:	89 c6                	mov    esi,eax
c0018186:	66 90                	xchg   ax,ax
c0018188:	8d 46 01             	lea    eax,[esi+0x1]
c001818b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001818f:	75 d7                	jne    c0018168 <SoundPort::buffer16(short*, int)+0x3c>
c0018191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018195:	8d 76 00             	lea    esi,[esi+0x0]
c0018198:	5b                   	pop    ebx
c0018199:	5e                   	pop    esi
c001819a:	5f                   	pop    edi
c001819b:	5d                   	pop    ebp
c001819c:	c3                   	ret    
c001819d:	8d 76 00             	lea    esi,[esi+0x0]
c00181a0:	5b                   	pop    ebx
c00181a1:	8d 46 02             	lea    eax,[esi+0x2]
c00181a4:	5e                   	pop    esi
c00181a5:	5f                   	pop    edi
c00181a6:	5d                   	pop    ebp
c00181a7:	c3                   	ret    
c00181a8:	5b                   	pop    ebx
c00181a9:	31 c0                	xor    eax,eax
c00181ab:	5e                   	pop    esi
c00181ac:	5f                   	pop    edi
c00181ad:	5d                   	pop    ebp
c00181ae:	c3                   	ret    
c00181af:	90                   	nop
c00181b0:	b8 01 00 00 00       	mov    eax,0x1
c00181b5:	eb e1                	jmp    c0018198 <SoundPort::buffer16(short*, int)+0x6c>
c00181b7:	90                   	nop

c00181b8 <SoundPort::buffer32(int*, int)>:
c00181b8:	55                   	push   ebp
c00181b9:	57                   	push   edi
c00181ba:	56                   	push   esi
c00181bb:	53                   	push   ebx
c00181bc:	51                   	push   ecx
c00181bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00181cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00181cf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181d2:	74 5c                	je     c0018230 <SoundPort::buffer32(int*, int)+0x78>
c00181d4:	85 c0                	test   eax,eax
c00181d6:	7e 58                	jle    c0018230 <SoundPort::buffer32(int*, int)+0x78>
c00181d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00181db:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181de:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181e1:	8b 37                	mov    esi,DWORD PTR [edi]
c00181e3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00181e6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181e9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181ec:	74 4a                	je     c0018238 <SoundPort::buffer32(int*, int)+0x80>
c00181ee:	31 f6                	xor    esi,esi
c00181f0:	eb 1e                	jmp    c0018210 <SoundPort::buffer32(int*, int)+0x58>
c00181f2:	66 90                	xchg   ax,ax
c00181f4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00181f7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00181fa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00181fd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018200:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018204:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018207:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001820a:	74 18                	je     c0018224 <SoundPort::buffer32(int*, int)+0x6c>
c001820c:	89 de                	mov    esi,ebx
c001820e:	66 90                	xchg   ax,ax
c0018210:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018213:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018216:	75 dc                	jne    c00181f4 <SoundPort::buffer32(int*, int)+0x3c>
c0018218:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001821b:	90                   	nop
c001821c:	5a                   	pop    edx
c001821d:	5b                   	pop    ebx
c001821e:	5e                   	pop    esi
c001821f:	5f                   	pop    edi
c0018220:	5d                   	pop    ebp
c0018221:	c3                   	ret    
c0018222:	66 90                	xchg   ax,ax
c0018224:	5a                   	pop    edx
c0018225:	8d 46 02             	lea    eax,[esi+0x2]
c0018228:	5b                   	pop    ebx
c0018229:	5e                   	pop    esi
c001822a:	5f                   	pop    edi
c001822b:	5d                   	pop    ebp
c001822c:	c3                   	ret    
c001822d:	8d 76 00             	lea    esi,[esi+0x0]
c0018230:	5a                   	pop    edx
c0018231:	31 c0                	xor    eax,eax
c0018233:	5b                   	pop    ebx
c0018234:	5e                   	pop    esi
c0018235:	5f                   	pop    edi
c0018236:	5d                   	pop    ebp
c0018237:	c3                   	ret    
c0018238:	b8 01 00 00 00       	mov    eax,0x1
c001823d:	eb dd                	jmp    c001821c <SoundPort::buffer32(int*, int)+0x64>
c001823f:	90                   	nop

c0018240 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018240:	57                   	push   edi
c0018241:	56                   	push   esi
c0018242:	53                   	push   ebx
c0018243:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018247:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001824b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018251:	39 03                	cmp    DWORD PTR [ebx],eax
c0018253:	74 13                	je     c0018268 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	68 b4 ef 01 c0       	push   0xc001efb4
c001825d:	e8 d9 84 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0018262:	83 c4 10             	add    esp,0x10
c0018265:	8d 76 00             	lea    esi,[esi+0x0]
c0018268:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001826e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018271:	74 11                	je     c0018284 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018273:	83 ec 0c             	sub    esp,0xc
c0018276:	68 f3 ef 01 c0       	push   0xc001eff3
c001827b:	e8 bb 84 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	90                   	nop
c0018284:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001828a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001828d:	74 11                	je     c00182a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	68 f3 ef 01 c0       	push   0xc001eff3
c0018297:	e8 9f 84 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	90                   	nop
c00182a0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00182a3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00182a7:	7e 07                	jle    c00182b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00182a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	85 f6                	test   esi,esi
c00182b2:	7e 2c                	jle    c00182e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00182b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182b8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00182bb:	31 c9                	xor    ecx,ecx
c00182bd:	01 d7                	add    edi,edx
c00182bf:	90                   	nop
c00182c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00182c3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00182c6:	85 c0                	test   eax,eax
c00182c8:	79 06                	jns    c00182d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00182ca:	05 ff 7f 00 00       	add    eax,0x7fff
c00182cf:	90                   	nop
c00182d0:	c1 f8 0f             	sar    eax,0xf
c00182d3:	83 c1 04             	add    ecx,0x4
c00182d6:	66 01 02             	add    WORD PTR [edx],ax
c00182d9:	83 c2 02             	add    edx,0x2
c00182dc:	39 d7                	cmp    edi,edx
c00182de:	75 e0                	jne    c00182c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00182e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00182e3:	50                   	push   eax
c00182e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182e7:	29 f0                	sub    eax,esi
c00182e9:	c1 e0 02             	shl    eax,0x2
c00182ec:	50                   	push   eax
c00182ed:	8d 04 b2             	lea    eax,[edx+esi*4]
c00182f0:	50                   	push   eax
c00182f1:	52                   	push   edx
c00182f2:	e8 09 81 fe ff       	call   c0000400 <memmove>
c00182f7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	89 f0                	mov    eax,esi
c00182ff:	5b                   	pop    ebx
c0018300:	5e                   	pop    esi
c0018301:	5f                   	pop    edi
c0018302:	c3                   	ret    
c0018303:	90                   	nop

c0018304 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018304:	57                   	push   edi
c0018305:	56                   	push   esi
c0018306:	53                   	push   ebx
c0018307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001830b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001830f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018313:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018319:	39 06                	cmp    DWORD PTR [esi],eax
c001831b:	74 13                	je     c0018330 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001831d:	83 ec 0c             	sub    esp,0xc
c0018320:	68 d4 ef 01 c0       	push   0xc001efd4
c0018325:	e8 11 84 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001832a:	83 c4 10             	add    esp,0x10
c001832d:	8d 76 00             	lea    esi,[esi+0x0]
c0018330:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018336:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018339:	74 11                	je     c001834c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001833b:	83 ec 0c             	sub    esp,0xc
c001833e:	68 0f f0 01 c0       	push   0xc001f00f
c0018343:	e8 f3 83 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0018348:	83 c4 10             	add    esp,0x10
c001834b:	90                   	nop
c001834c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018352:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018355:	74 11                	je     c0018368 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018357:	83 ec 0c             	sub    esp,0xc
c001835a:	68 0f f0 01 c0       	push   0xc001f00f
c001835f:	e8 d7 83 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0018364:	83 c4 10             	add    esp,0x10
c0018367:	90                   	nop
c0018368:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001836b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001836f:	7e 07                	jle    c0018378 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018371:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018375:	8d 76 00             	lea    esi,[esi+0x0]
c0018378:	85 ff                	test   edi,edi
c001837a:	7e 1c                	jle    c0018398 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001837c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018383:	31 c0                	xor    eax,eax
c0018385:	8d 76 00             	lea    esi,[esi+0x0]
c0018388:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001838b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001838e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018391:	83 c0 04             	add    eax,0x4
c0018394:	39 c1                	cmp    ecx,eax
c0018396:	75 f0                	jne    c0018388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018398:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001839b:	50                   	push   eax
c001839c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001839f:	29 f8                	sub    eax,edi
c00183a1:	c1 e0 02             	shl    eax,0x2
c00183a4:	50                   	push   eax
c00183a5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00183a8:	50                   	push   eax
c00183a9:	52                   	push   edx
c00183aa:	e8 51 80 fe ff       	call   c0000400 <memmove>
c00183af:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00183b2:	83 c4 10             	add    esp,0x10
c00183b5:	89 f8                	mov    eax,edi
c00183b7:	5b                   	pop    ebx
c00183b8:	5e                   	pop    esi
c00183b9:	5f                   	pop    edi
c00183ba:	c3                   	ret    
c00183bb:	90                   	nop

c00183bc <PCI::open(int, int, void*)>:
c00183bc:	83 ec 18             	sub    esp,0x18
c00183bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00183cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00183cf:	50                   	push   eax
c00183d0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00183d3:	31 c0                	xor    eax,eax
c00183d5:	83 c4 1c             	add    esp,0x1c
c00183d8:	c3                   	ret    
c00183d9:	90                   	nop

c00183da <PCI::close(int, int, void*)>:
c00183da:	31 c0                	xor    eax,eax
c00183dc:	c3                   	ret    
c00183dd:	90                   	nop

c00183de <PCI::PCI()>:
c00183de:	83 ec 0c             	sub    esp,0xc
c00183e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183e5:	83 ec 08             	sub    esp,0x8
c00183e8:	68 2b f0 01 c0       	push   0xc001f02b
c00183ed:	50                   	push   eax
c00183ee:	e8 8d 35 ff ff       	call   c000b980 <Bus::Bus(char const*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	ba d4 f0 01 c0       	mov    edx,0xc001f0d4
c00183fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183ff:	89 10                	mov    DWORD PTR [eax],edx
c0018401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018405:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001840f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018413:	a3 e0 46 02 c0       	mov    ds:0xc00246e0,eax
c0018418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001841c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018422:	31 d2                	xor    edx,edx
c0018424:	88 c2                	mov    dl,al
c0018426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001842a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018435:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001843b:	31 d2                	xor    edx,edx
c001843d:	88 c2                	mov    dl,al
c001843f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018443:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018452:	8d 50 01             	lea    edx,[eax+0x1]
c0018455:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018459:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001845f:	31 d2                	xor    edx,edx
c0018461:	88 c2                	mov    dl,al
c0018463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018467:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001846b:	83 c9 c0             	or     ecx,0xffffffc0
c001846e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018472:	90                   	nop
c0018473:	83 c4 0c             	add    esp,0xc
c0018476:	c3                   	ret    
c0018477:	90                   	nop

c0018478 <PCI::readBAR8(unsigned int, int)>:
c0018478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001847c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018480:	f6 c2 01             	test   dl,0x1
c0018483:	74 07                	je     c001848c <PCI::readBAR8(unsigned int, int)+0x14>
c0018485:	83 e2 fc             	and    edx,0xfffffffc
c0018488:	01 c2                	add    edx,eax
c001848a:	ec                   	in     al,dx
c001848b:	c3                   	ret    
c001848c:	83 e2 f0             	and    edx,0xfffffff0
c001848f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018492:	c3                   	ret    
c0018493:	90                   	nop

c0018494 <PCI::readBAR16(unsigned int, int)>:
c0018494:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001849c:	f6 c2 01             	test   dl,0x1
c001849f:	74 08                	je     c00184a9 <PCI::readBAR16(unsigned int, int)+0x15>
c00184a1:	83 e2 fc             	and    edx,0xfffffffc
c00184a4:	01 c2                	add    edx,eax
c00184a6:	66 ed                	in     ax,dx
c00184a8:	c3                   	ret    
c00184a9:	83 e2 f0             	and    edx,0xfffffff0
c00184ac:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00184b0:	c3                   	ret    
c00184b1:	90                   	nop

c00184b2 <PCI::readBAR32(unsigned int, int)>:
c00184b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184ba:	f6 c2 01             	test   dl,0x1
c00184bd:	74 07                	je     c00184c6 <PCI::readBAR32(unsigned int, int)+0x14>
c00184bf:	83 e2 fc             	and    edx,0xfffffffc
c00184c2:	01 c2                	add    edx,eax
c00184c4:	ed                   	in     eax,dx
c00184c5:	c3                   	ret    
c00184c6:	83 e2 f0             	and    edx,0xfffffff0
c00184c9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00184cc:	c3                   	ret    
c00184cd:	90                   	nop

c00184ce <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00184ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184da:	f6 c2 01             	test   dl,0x1
c00184dd:	74 07                	je     c00184e6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00184df:	83 e2 fc             	and    edx,0xfffffffc
c00184e2:	01 ca                	add    edx,ecx
c00184e4:	ee                   	out    dx,al
c00184e5:	c3                   	ret    
c00184e6:	83 e2 f0             	and    edx,0xfffffff0
c00184e9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00184ec:	c3                   	ret    
c00184ed:	90                   	nop

c00184ee <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00184ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184fa:	f6 c2 01             	test   dl,0x1
c00184fd:	74 08                	je     c0018507 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00184ff:	83 e2 fc             	and    edx,0xfffffffc
c0018502:	01 ca                	add    edx,ecx
c0018504:	66 ef                	out    dx,ax
c0018506:	c3                   	ret    
c0018507:	83 e2 f0             	and    edx,0xfffffff0
c001850a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001850e:	c3                   	ret    
c001850f:	90                   	nop

c0018510 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001851c:	f6 c2 01             	test   dl,0x1
c001851f:	74 07                	je     c0018528 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018521:	83 e2 fc             	and    edx,0xfffffffc
c0018524:	01 ca                	add    edx,ecx
c0018526:	ef                   	out    dx,eax
c0018527:	c3                   	ret    
c0018528:	83 e2 f0             	and    edx,0xfffffff0
c001852b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001852e:	c3                   	ret    
c001852f:	90                   	nop

c0018530 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018530:	55                   	push   ebp
c0018531:	57                   	push   edi
c0018532:	56                   	push   esi
c0018533:	53                   	push   ebx
c0018534:	83 ec 0c             	sub    esp,0xc
c0018537:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001853b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001853f:	89 f0                	mov    eax,esi
c0018541:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018545:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018549:	3c 07                	cmp    al,0x7
c001854b:	76 10                	jbe    c001855d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001854d:	83 ec 0c             	sub    esp,0xc
c0018550:	68 33 f0 01 c0       	push   0xc001f033
c0018555:	e8 e1 81 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001855a:	83 c4 10             	add    esp,0x10
c001855d:	80 fb 0f             	cmp    bl,0xf
c0018560:	76 10                	jbe    c0018572 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018562:	83 ec 0c             	sub    esp,0xc
c0018565:	68 63 f0 01 c0       	push   0xc001f063
c001856a:	e8 cc 81 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001856f:	83 c4 10             	add    esp,0x10
c0018572:	8d 04 36             	lea    eax,[esi+esi*1]
c0018575:	ba f8 0c 00 00       	mov    edx,0xcf8
c001857a:	83 c8 f0             	or     eax,0xfffffff0
c001857d:	ee                   	out    dx,al
c001857e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018583:	89 e8                	mov    eax,ebp
c0018585:	ee                   	out    dx,al
c0018586:	83 c4 0c             	add    esp,0xc
c0018589:	89 d8                	mov    eax,ebx
c001858b:	66 81 e7 fc 00       	and    di,0xfc
c0018590:	5b                   	pop    ebx
c0018591:	c1 e0 08             	shl    eax,0x8
c0018594:	5e                   	pop    esi
c0018595:	09 f8                	or     eax,edi
c0018597:	5f                   	pop    edi
c0018598:	66 0d 00 c0          	or     ax,0xc000
c001859c:	5d                   	pop    ebp
c001859d:	c3                   	ret    

c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001859e:	57                   	push   edi
c001859f:	56                   	push   esi
c00185a0:	53                   	push   ebx
c00185a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185a9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00185af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185b3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00185b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00185bb:	83 ff 01             	cmp    edi,0x1
c00185be:	75 3e                	jne    c00185fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00185c0:	89 de                	mov    esi,ebx
c00185c2:	0f b6 c0             	movzx  eax,al
c00185c5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00185cb:	c1 e0 10             	shl    eax,0x10
c00185ce:	0f b6 c9             	movzx  ecx,cl
c00185d1:	09 f0                	or     eax,esi
c00185d3:	c1 e1 08             	shl    ecx,0x8
c00185d6:	0f b6 d2             	movzx  edx,dl
c00185d9:	09 c8                	or     eax,ecx
c00185db:	c1 e2 0b             	shl    edx,0xb
c00185de:	09 d0                	or     eax,edx
c00185e0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185e5:	0d 00 00 00 80       	or     eax,0x80000000
c00185ea:	ef                   	out    dx,eax
c00185eb:	ba fc 0c 00 00       	mov    edx,0xcfc
c00185f0:	ed                   	in     eax,dx
c00185f1:	83 e3 02             	and    ebx,0x2
c00185f4:	0f b6 cb             	movzx  ecx,bl
c00185f7:	c1 e1 03             	shl    ecx,0x3
c00185fa:	d3 e8                	shr    eax,cl
c00185fc:	eb 43                	jmp    c0018641 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00185fe:	83 ff 02             	cmp    edi,0x2
c0018601:	75 2c                	jne    c001862f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018603:	83 ec 0c             	sub    esp,0xc
c0018606:	0f b6 c9             	movzx  ecx,cl
c0018609:	0f b6 d2             	movzx  edx,dl
c001860c:	0f b6 fb             	movzx  edi,bl
c001860f:	0f b6 c0             	movzx  eax,al
c0018612:	57                   	push   edi
c0018613:	51                   	push   ecx
c0018614:	52                   	push   edx
c0018615:	50                   	push   eax
c0018616:	56                   	push   esi
c0018617:	e8 14 ff ff ff       	call   c0018530 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001861c:	89 c2                	mov    edx,eax
c001861e:	ed                   	in     eax,dx
c001861f:	83 e3 02             	and    ebx,0x2
c0018622:	83 c4 20             	add    esp,0x20
c0018625:	0f b6 cb             	movzx  ecx,bl
c0018628:	c1 e1 03             	shl    ecx,0x3
c001862b:	d3 e8                	shr    eax,cl
c001862d:	eb 12                	jmp    c0018641 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001862f:	83 ec 0c             	sub    esp,0xc
c0018632:	68 93 f0 01 c0       	push   0xc001f093
c0018637:	e8 ff 80 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001863c:	83 c4 10             	add    esp,0x10
c001863f:	31 c0                	xor    eax,eax
c0018641:	5b                   	pop    ebx
c0018642:	5e                   	pop    esi
c0018643:	5f                   	pop    edi
c0018644:	c3                   	ret    
c0018645:	90                   	nop

c0018646 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018646:	83 ec 18             	sub    esp,0x18
c0018649:	6a 00                	push   0x0
c001864b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018650:	50                   	push   eax
c0018651:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018656:	50                   	push   eax
c0018657:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001865c:	50                   	push   eax
c001865d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018661:	e8 38 ff ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018666:	83 c4 2c             	add    esp,0x2c
c0018669:	c3                   	ret    

c001866a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001866a:	83 ec 18             	sub    esp,0x18
c001866d:	6a 0e                	push   0xe
c001866f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018674:	50                   	push   eax
c0018675:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001867a:	50                   	push   eax
c001867b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018680:	50                   	push   eax
c0018681:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018685:	e8 14 ff ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001868a:	83 c4 2c             	add    esp,0x2c
c001868d:	0f b6 c0             	movzx  eax,al
c0018690:	c3                   	ret    
c0018691:	90                   	nop

c0018692 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018692:	55                   	push   ebp
c0018693:	57                   	push   edi
c0018694:	56                   	push   esi
c0018695:	53                   	push   ebx
c0018696:	83 ec 18             	sub    esp,0x18
c0018699:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001869e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00186a3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00186a8:	6a 0a                	push   0xa
c00186aa:	56                   	push   esi
c00186ab:	55                   	push   ebp
c00186ac:	57                   	push   edi
c00186ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186b1:	e8 e8 fe ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186b6:	83 c4 14             	add    esp,0x14
c00186b9:	89 c3                	mov    ebx,eax
c00186bb:	6a 0a                	push   0xa
c00186bd:	0f b6 db             	movzx  ebx,bl
c00186c0:	56                   	push   esi
c00186c1:	55                   	push   ebp
c00186c2:	57                   	push   edi
c00186c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186c7:	e8 d2 fe ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186cc:	83 c4 2c             	add    esp,0x2c
c00186cf:	25 00 ff 00 00       	and    eax,0xff00
c00186d4:	09 d8                	or     eax,ebx
c00186d6:	5b                   	pop    ebx
c00186d7:	5e                   	pop    esi
c00186d8:	5f                   	pop    edi
c00186d9:	5d                   	pop    ebp
c00186da:	c3                   	ret    
c00186db:	90                   	nop

c00186dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00186dc:	83 ec 18             	sub    esp,0x18
c00186df:	6a 08                	push   0x8
c00186e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e6:	50                   	push   eax
c00186e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186ec:	50                   	push   eax
c00186ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186f2:	50                   	push   eax
c00186f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f7:	e8 a2 fe ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186fc:	83 c4 2c             	add    esp,0x2c
c00186ff:	0f b6 c4             	movzx  eax,ah
c0018702:	c3                   	ret    
c0018703:	90                   	nop

c0018704 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018704:	83 ec 18             	sub    esp,0x18
c0018707:	6a 08                	push   0x8
c0018709:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001870e:	50                   	push   eax
c001870f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018714:	50                   	push   eax
c0018715:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001871a:	50                   	push   eax
c001871b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001871f:	e8 7a fe ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018724:	83 c4 2c             	add    esp,0x2c
c0018727:	c3                   	ret    

c0018728 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018728:	83 ec 18             	sub    esp,0x18
c001872b:	6a 3c                	push   0x3c
c001872d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018732:	50                   	push   eax
c0018733:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018738:	50                   	push   eax
c0018739:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873e:	50                   	push   eax
c001873f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018743:	e8 56 fe ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018748:	83 c4 2c             	add    esp,0x2c
c001874b:	c3                   	ret    

c001874c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001874c:	83 ec 18             	sub    esp,0x18
c001874f:	6a 18                	push   0x18
c0018751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018756:	50                   	push   eax
c0018757:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875c:	50                   	push   eax
c001875d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018762:	50                   	push   eax
c0018763:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018767:	e8 32 fe ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001876c:	83 c4 2c             	add    esp,0x2c
c001876f:	0f b6 c4             	movzx  eax,ah
c0018772:	c3                   	ret    
c0018773:	90                   	nop

c0018774 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018774:	55                   	push   ebp
c0018775:	57                   	push   edi
c0018776:	56                   	push   esi
c0018777:	53                   	push   ebx
c0018778:	83 ec 28             	sub    esp,0x28
c001877b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001877f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018784:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018789:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001878e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018795:	8d 43 12             	lea    eax,[ebx+0x12]
c0018798:	83 c3 10             	add    ebx,0x10
c001879b:	0f b6 c0             	movzx  eax,al
c001879e:	0f b6 db             	movzx  ebx,bl
c00187a1:	50                   	push   eax
c00187a2:	51                   	push   ecx
c00187a3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00187a7:	57                   	push   edi
c00187a8:	55                   	push   ebp
c00187a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187ad:	e8 ec fd ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b2:	83 c4 14             	add    esp,0x14
c00187b5:	89 c6                	mov    esi,eax
c00187b7:	53                   	push   ebx
c00187b8:	c1 e6 10             	shl    esi,0x10
c00187bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00187bf:	51                   	push   ecx
c00187c0:	57                   	push   edi
c00187c1:	55                   	push   ebp
c00187c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00187c6:	e8 d3 fd ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187cb:	83 c4 3c             	add    esp,0x3c
c00187ce:	0f b7 c0             	movzx  eax,ax
c00187d1:	5b                   	pop    ebx
c00187d2:	09 f0                	or     eax,esi
c00187d4:	5e                   	pop    esi
c00187d5:	5f                   	pop    edi
c00187d6:	5d                   	pop    ebp
c00187d7:	c3                   	ret    

c00187d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00187d8:	55                   	push   ebp
c00187d9:	57                   	push   edi
c00187da:	56                   	push   esi
c00187db:	53                   	push   ebx
c00187dc:	83 ec 0c             	sub    esp,0xc
c00187df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00187e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00187e7:	89 f5                	mov    ebp,esi
c00187e9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00187ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00187f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00187fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00187ff:	83 f9 01             	cmp    ecx,0x1
c0018802:	75 5d                	jne    c0018861 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018804:	0f b6 c8             	movzx  ecx,al
c0018807:	0f b6 d2             	movzx  edx,dl
c001880a:	c1 e1 10             	shl    ecx,0x10
c001880d:	c1 e2 0b             	shl    edx,0xb
c0018810:	89 f0                	mov    eax,esi
c0018812:	25 fc 00 00 00       	and    eax,0xfc
c0018817:	09 c1                	or     ecx,eax
c0018819:	89 e8                	mov    eax,ebp
c001881b:	0f b6 c0             	movzx  eax,al
c001881e:	c1 e0 08             	shl    eax,0x8
c0018821:	09 c1                	or     ecx,eax
c0018823:	09 d1                	or     ecx,edx
c0018825:	ba f8 0c 00 00       	mov    edx,0xcf8
c001882a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018830:	89 c8                	mov    eax,ecx
c0018832:	ef                   	out    dx,eax
c0018833:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018838:	ed                   	in     eax,dx
c0018839:	0f b7 db             	movzx  ebx,bx
c001883c:	83 e6 02             	and    esi,0x2
c001883f:	74 0a                	je     c001884b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018841:	0f b7 d0             	movzx  edx,ax
c0018844:	c1 e3 10             	shl    ebx,0x10
c0018847:	09 d3                	or     ebx,edx
c0018849:	eb 05                	jmp    c0018850 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001884b:	66 31 c0             	xor    ax,ax
c001884e:	09 c3                	or     ebx,eax
c0018850:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018855:	89 c8                	mov    eax,ecx
c0018857:	ef                   	out    dx,eax
c0018858:	ba fc 0c 00 00       	mov    edx,0xcfc
c001885d:	89 d8                	mov    eax,ebx
c001885f:	eb 41                	jmp    c00188a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018861:	83 f9 02             	cmp    ecx,0x2
c0018864:	75 45                	jne    c00188ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018866:	83 ec 0c             	sub    esp,0xc
c0018869:	0f b6 d2             	movzx  edx,dl
c001886c:	89 f1                	mov    ecx,esi
c001886e:	0f b6 c0             	movzx  eax,al
c0018871:	0f b6 f1             	movzx  esi,cl
c0018874:	89 e9                	mov    ecx,ebp
c0018876:	56                   	push   esi
c0018877:	0f b6 c9             	movzx  ecx,cl
c001887a:	51                   	push   ecx
c001887b:	52                   	push   edx
c001887c:	50                   	push   eax
c001887d:	57                   	push   edi
c001887e:	e8 ad fc ff ff       	call   c0018530 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018883:	89 c2                	mov    edx,eax
c0018885:	ed                   	in     eax,dx
c0018886:	83 c4 20             	add    esp,0x20
c0018889:	0f b7 db             	movzx  ebx,bx
c001888c:	f6 c2 02             	test   dl,0x2
c001888f:	74 0c                	je     c001889d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018891:	0f b7 c8             	movzx  ecx,ax
c0018894:	89 d8                	mov    eax,ebx
c0018896:	c1 e0 10             	shl    eax,0x10
c0018899:	09 c8                	or     eax,ecx
c001889b:	eb 05                	jmp    c00188a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001889d:	66 31 c0             	xor    ax,ax
c00188a0:	09 d8                	or     eax,ebx
c00188a2:	ef                   	out    dx,eax
c00188a3:	83 c4 0c             	add    esp,0xc
c00188a6:	5b                   	pop    ebx
c00188a7:	5e                   	pop    esi
c00188a8:	5f                   	pop    edi
c00188a9:	5d                   	pop    ebp
c00188aa:	c3                   	ret    
c00188ab:	c7 44 24 20 93 f0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f093
c00188b3:	83 c4 0c             	add    esp,0xc
c00188b6:	5b                   	pop    ebx
c00188b7:	5e                   	pop    esi
c00188b8:	5f                   	pop    edi
c00188b9:	5d                   	pop    ebp
c00188ba:	e9 7c 7e ff ff       	jmp    c001073b <Krnl::panic(char const*)>
c00188bf:	90                   	nop

c00188c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00188c0:	55                   	push   ebp
c00188c1:	57                   	push   edi
c00188c2:	56                   	push   esi
c00188c3:	53                   	push   ebx
c00188c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00188ca:	80 3d ec 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246ec,0x0
c00188d1:	0f 85 84 00 00 00    	jne    c001895b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00188d7:	83 ec 0c             	sub    esp,0xc
c00188da:	68 14 01 00 00       	push   0x114
c00188df:	e8 79 f5 fe ff       	call   c0007e5d <malloc>
c00188e4:	83 c4 0c             	add    esp,0xc
c00188e7:	89 c3                	mov    ebx,eax
c00188e9:	ff 35 30 3d 02 c0    	push   DWORD PTR ds:0xc0023d30
c00188ef:	68 99 f0 01 c0       	push   0xc001f099
c00188f4:	50                   	push   eax
c00188f5:	e8 68 28 ff ff       	call   c000b162 <File::File(char const*, Process*)>
c00188fa:	5a                   	pop    edx
c00188fb:	59                   	pop    ecx
c00188fc:	6a 01                	push   0x1
c00188fe:	53                   	push   ebx
c00188ff:	e8 1e 29 ff ff       	call   c000b222 <File::open(FileOpenMode)>
c0018904:	83 c4 0c             	add    esp,0xc
c0018907:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001890b:	50                   	push   eax
c001890c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018910:	50                   	push   eax
c0018911:	53                   	push   ebx
c0018912:	e8 b7 2b ff ff       	call   c000b4ce <File::stat(unsigned long long*, bool*)>
c0018917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001891b:	40                   	inc    eax
c001891c:	89 04 24             	mov    DWORD PTR [esp],eax
c001891f:	e8 39 f5 fe ff       	call   c0007e5d <malloc>
c0018924:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018928:	a3 e8 46 02 c0       	mov    ds:0xc00246e8,eax
c001892d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018931:	5e                   	pop    esi
c0018932:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018934:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018938:	51                   	push   ecx
c0018939:	50                   	push   eax
c001893a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001893e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018942:	53                   	push   ebx
c0018943:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018946:	83 c4 14             	add    esp,0x14
c0018949:	53                   	push   ebx
c001894a:	e8 31 29 ff ff       	call   c000b280 <File::close()>
c001894f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	a3 e4 46 02 c0       	mov    ds:0xc00246e4,eax
c001895b:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0018960:	8b 15 e8 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246e8
c0018966:	89 04 24             	mov    DWORD PTR [esp],eax
c0018969:	31 ff                	xor    edi,edi
c001896b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018973:	31 f6                	xor    esi,esi
c0018975:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001897a:	31 db                	xor    ebx,ebx
c001897c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018984:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018989:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018990:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018994:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001899b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001899f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00189a2:	0f 8e 6b 01 00 00    	jle    c0018b13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00189a8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00189ab:	d4 40                	aam    0x40
c00189ad:	d5 39                	aad    0x39
c00189af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189b3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00189b7:	d4 40                	aam    0x40
c00189b9:	d5 39                	aad    0x39
c00189bb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00189bf:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00189c3:	d4 40                	aam    0x40
c00189c5:	d5 39                	aad    0x39
c00189c7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00189cb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00189cf:	d4 40                	aam    0x40
c00189d1:	d5 39                	aad    0x39
c00189d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00189d7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00189db:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00189df:	3c 56                	cmp    al,0x56
c00189e1:	74 45                	je     c0018a28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00189e3:	d4 40                	aam    0x40
c00189e5:	d5 39                	aad    0x39
c00189e7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00189ea:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00189ee:	0f b6 c9             	movzx  ecx,cl
c00189f1:	c1 e1 04             	shl    ecx,0x4
c00189f4:	d4 40                	aam    0x40
c00189f6:	d5 39                	aad    0x39
c00189f8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00189fb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00189ff:	0f b6 db             	movzx  ebx,bl
c0018a02:	09 cb                	or     ebx,ecx
c0018a04:	c1 e3 04             	shl    ebx,0x4
c0018a07:	d4 40                	aam    0x40
c0018a09:	d5 39                	aad    0x39
c0018a0b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a0e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a12:	0f b6 c9             	movzx  ecx,cl
c0018a15:	09 cb                	or     ebx,ecx
c0018a17:	c1 e3 04             	shl    ebx,0x4
c0018a1a:	89 d9                	mov    ecx,ebx
c0018a1c:	d4 40                	aam    0x40
c0018a1e:	d5 39                	aad    0x39
c0018a20:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a23:	0f b6 db             	movzx  ebx,bl
c0018a26:	09 cb                	or     ebx,ecx
c0018a28:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a2c:	80 f9 44             	cmp    cl,0x44
c0018a2f:	74 47                	je     c0018a78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a31:	88 c8                	mov    al,cl
c0018a33:	d4 40                	aam    0x40
c0018a35:	d5 39                	aad    0x39
c0018a37:	83 e8 30             	sub    eax,0x30
c0018a3a:	0f b6 e8             	movzx  ebp,al
c0018a3d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018a41:	c1 e5 04             	shl    ebp,0x4
c0018a44:	d4 40                	aam    0x40
c0018a46:	d5 39                	aad    0x39
c0018a48:	83 e8 30             	sub    eax,0x30
c0018a4b:	0f b6 f0             	movzx  esi,al
c0018a4e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018a52:	09 ee                	or     esi,ebp
c0018a54:	c1 e6 04             	shl    esi,0x4
c0018a57:	d4 40                	aam    0x40
c0018a59:	d5 39                	aad    0x39
c0018a5b:	83 e8 30             	sub    eax,0x30
c0018a5e:	0f b6 e8             	movzx  ebp,al
c0018a61:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018a65:	09 ee                	or     esi,ebp
c0018a67:	c1 e6 04             	shl    esi,0x4
c0018a6a:	89 f5                	mov    ebp,esi
c0018a6c:	d4 40                	aam    0x40
c0018a6e:	d5 39                	aad    0x39
c0018a70:	83 e8 30             	sub    eax,0x30
c0018a73:	0f b6 f0             	movzx  esi,al
c0018a76:	09 ee                	or     esi,ebp
c0018a78:	83 c7 10             	add    edi,0x10
c0018a7b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018a7f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a82:	3c 0a                	cmp    al,0xa
c0018a84:	74 09                	je     c0018a8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018a86:	45                   	inc    ebp
c0018a87:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a8a:	75 16                	jne    c0018aa2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018a8c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018a8f:	3c 0a                	cmp    al,0xa
c0018a91:	0f 94 c0             	sete   al
c0018a94:	0f b6 c0             	movzx  eax,al
c0018a97:	01 c7                	add    edi,eax
c0018a99:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018a9e:	75 0c                	jne    c0018aac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018aa0:	eb 15                	jmp    c0018ab7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018aa2:	47                   	inc    edi
c0018aa3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018aa6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018aaa:	eb d3                	jmp    c0018a7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018aac:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018ab1:	0f 85 e8 fe ff ff    	jne    c001899f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ab7:	80 f9 44             	cmp    cl,0x44
c0018aba:	74 0b                	je     c0018ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018abc:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018ac1:	0f 85 d8 fe ff ff    	jne    c001899f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ac7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018acb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018acf:	c1 e1 04             	shl    ecx,0x4
c0018ad2:	83 e8 30             	sub    eax,0x30
c0018ad5:	09 c8                	or     eax,ecx
c0018ad7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018adb:	0f 85 be fe ff ff    	jne    c001899f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ae1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018ae5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ae9:	c1 e1 04             	shl    ecx,0x4
c0018aec:	83 e8 30             	sub    eax,0x30
c0018aef:	09 c8                	or     eax,ecx
c0018af1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018af5:	0f 85 a4 fe ff ff    	jne    c001899f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018afb:	50                   	push   eax
c0018afc:	50                   	push   eax
c0018afd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b01:	50                   	push   eax
c0018b02:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b09:	e8 12 7b fe ff       	call   c0000620 <strcpy>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	eb 15                	jmp    c0018b28 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b13:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b1a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b25:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b28:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b2f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b35:	5b                   	pop    ebx
c0018b36:	5e                   	pop    esi
c0018b37:	5f                   	pop    edi
c0018b38:	5d                   	pop    ebp
c0018b39:	c3                   	ret    

c0018b3a <PCI::checkBus(unsigned char)>:
c0018b3a:	56                   	push   esi
c0018b3b:	53                   	push   ebx
c0018b3c:	31 f6                	xor    esi,esi
c0018b3e:	51                   	push   ecx
c0018b3f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018b43:	0f b6 c3             	movzx  eax,bl
c0018b46:	52                   	push   edx
c0018b47:	56                   	push   esi
c0018b48:	46                   	inc    esi
c0018b49:	50                   	push   eax
c0018b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b4e:	e8 f3 02 00 00       	call   c0018e46 <PCI::checkDevice(unsigned char, unsigned char)>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	83 fe 20             	cmp    esi,0x20
c0018b59:	75 e8                	jne    c0018b43 <PCI::checkBus(unsigned char)+0x9>
c0018b5b:	58                   	pop    eax
c0018b5c:	5b                   	pop    ebx
c0018b5d:	5e                   	pop    esi
c0018b5e:	c3                   	ret    
c0018b5f:	90                   	nop

c0018b60 <PCI::foundDevice(PCIDeviceInfo)>:
c0018b60:	55                   	push   ebp
c0018b61:	57                   	push   edi
c0018b62:	56                   	push   esi
c0018b63:	53                   	push   ebx
c0018b64:	83 ec 1c             	sub    esp,0x1c
c0018b67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018b6b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018b71:	0f 84 52 01 00 00    	je     c0018cc9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018b77:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018b7b:	66 81 f9 06 04       	cmp    cx,0x406
c0018b80:	75 2c                	jne    c0018bae <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018b82:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018b87:	50                   	push   eax
c0018b88:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018b8d:	50                   	push   eax
c0018b8e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018b93:	50                   	push   eax
c0018b94:	56                   	push   esi
c0018b95:	e8 b2 fb ff ff       	call   c001874c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018b9a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018b9e:	0f b6 c0             	movzx  eax,al
c0018ba1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018ba5:	83 c4 2c             	add    esp,0x2c
c0018ba8:	5b                   	pop    ebx
c0018ba9:	5e                   	pop    esi
c0018baa:	5f                   	pop    edi
c0018bab:	5d                   	pop    ebp
c0018bac:	eb 8c                	jmp    c0018b3a <PCI::checkBus(unsigned char)>
c0018bae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bb2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018bb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bbc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018bc0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018bc4:	88 d3                	mov    bl,dl
c0018bc6:	85 c0                	test   eax,eax
c0018bc8:	74 33                	je     c0018bfd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018bca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018bcd:	85 d2                	test   edx,edx
c0018bcf:	74 28                	je     c0018bf9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018bd1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018bd7:	31 ef                	xor    edi,ebp
c0018bd9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018bdf:	75 18                	jne    c0018bf9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018be1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018be5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018beb:	75 0c                	jne    c0018bf9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018bed:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018bf3:	0f 84 d0 00 00 00    	je     c0018cc9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bfb:	eb c9                	jmp    c0018bc6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018bfd:	66 81 f9 01 06       	cmp    cx,0x601
c0018c02:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c06:	75 19                	jne    c0018c21 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c08:	83 ec 0c             	sub    esp,0xc
c0018c0b:	68 64 01 00 00       	push   0x164
c0018c10:	e8 48 f2 fe ff       	call   c0007e5d <malloc>
c0018c15:	89 c5                	mov    ebp,eax
c0018c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c1a:	e8 47 0e 00 00       	call   c0019a66 <SATABus::SATABus()>
c0018c1f:	eb 1e                	jmp    c0018c3f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c21:	66 81 f9 01 01       	cmp    cx,0x101
c0018c26:	75 60                	jne    c0018c88 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c28:	83 ec 0c             	sub    esp,0xc
c0018c2b:	68 70 02 00 00       	push   0x270
c0018c30:	e8 28 f2 fe ff       	call   c0007e5d <malloc>
c0018c35:	89 c5                	mov    ebp,eax
c0018c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c3a:	e8 cb 02 00 00       	call   c0018f0a <IDE::IDE()>
c0018c3f:	58                   	pop    eax
c0018c40:	5a                   	pop    edx
c0018c41:	55                   	push   ebp
c0018c42:	56                   	push   esi
c0018c43:	e8 e4 33 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0018c48:	83 ec 1c             	sub    esp,0x1c
c0018c4b:	b9 09 00 00 00       	mov    ecx,0x9
c0018c50:	fc                   	cld    
c0018c51:	89 e7                	mov    edi,esp
c0018c53:	89 de                	mov    esi,ebx
c0018c55:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018c57:	55                   	push   ebp
c0018c58:	e8 15 33 ff ff       	call   c000bf72 <Device::preOpenPCI(PCIDeviceInfo)>
c0018c5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c60:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018c64:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018c6c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018c74:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018c7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018c7f:	83 c4 4c             	add    esp,0x4c
c0018c82:	5b                   	pop    ebx
c0018c83:	5e                   	pop    esi
c0018c84:	5f                   	pop    edi
c0018c85:	5d                   	pop    ebp
c0018c86:	ff e0                	jmp    eax
c0018c88:	83 ec 0c             	sub    esp,0xc
c0018c8b:	68 58 01 00 00       	push   0x158
c0018c90:	e8 c8 f1 fe ff       	call   c0007e5d <malloc>
c0018c95:	89 c5                	mov    ebp,eax
c0018c97:	58                   	pop    eax
c0018c98:	5a                   	pop    edx
c0018c99:	68 b2 f0 01 c0       	push   0xc001f0b2
c0018c9e:	55                   	push   ebp
c0018c9f:	e8 26 36 ff ff       	call   c000c2ca <DriverlessDevice::DriverlessDevice(char const*)>
c0018ca4:	59                   	pop    ecx
c0018ca5:	5f                   	pop    edi
c0018ca6:	55                   	push   ebp
c0018ca7:	56                   	push   esi
c0018ca8:	e8 7f 33 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0018cad:	b9 09 00 00 00       	mov    ecx,0x9
c0018cb2:	fc                   	cld    
c0018cb3:	89 df                	mov    edi,ebx
c0018cb5:	89 de                	mov    esi,ebx
c0018cb7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cb9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018cbd:	83 c4 2c             	add    esp,0x2c
c0018cc0:	5b                   	pop    ebx
c0018cc1:	5e                   	pop    esi
c0018cc2:	5f                   	pop    edi
c0018cc3:	5d                   	pop    ebp
c0018cc4:	e9 a9 32 ff ff       	jmp    c000bf72 <Device::preOpenPCI(PCIDeviceInfo)>
c0018cc9:	83 c4 1c             	add    esp,0x1c
c0018ccc:	5b                   	pop    ebx
c0018ccd:	5e                   	pop    esi
c0018cce:	5f                   	pop    edi
c0018ccf:	5d                   	pop    ebp
c0018cd0:	c3                   	ret    
c0018cd1:	90                   	nop

c0018cd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018cd2:	55                   	push   ebp
c0018cd3:	57                   	push   edi
c0018cd4:	56                   	push   esi
c0018cd5:	53                   	push   ebx
c0018cd6:	83 ec 68             	sub    esp,0x68
c0018cd9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018cdd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018ce4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ce8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018cef:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018cf4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018cf8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018cff:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d08:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d0d:	6a 0c                	push   0xc
c0018d0f:	57                   	push   edi
c0018d10:	53                   	push   ebx
c0018d11:	56                   	push   esi
c0018d12:	55                   	push   ebp
c0018d13:	e8 86 f8 ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d18:	83 c4 20             	add    esp,0x20
c0018d1b:	57                   	push   edi
c0018d1c:	53                   	push   ebx
c0018d1d:	56                   	push   esi
c0018d1e:	55                   	push   ebp
c0018d1f:	e8 6e f9 ff ff       	call   c0018692 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d24:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d29:	57                   	push   edi
c0018d2a:	53                   	push   ebx
c0018d2b:	56                   	push   esi
c0018d2c:	55                   	push   ebp
c0018d2d:	e8 f6 f9 ff ff       	call   c0018728 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d32:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018d36:	83 c4 14             	add    esp,0x14
c0018d39:	6a 3c                	push   0x3c
c0018d3b:	57                   	push   edi
c0018d3c:	53                   	push   ebx
c0018d3d:	56                   	push   esi
c0018d3e:	55                   	push   ebp
c0018d3f:	e8 5a f8 ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d44:	0f b6 c4             	movzx  eax,ah
c0018d47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018d4b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018d4f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018d53:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c0018d58:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018d5e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018d64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018d68:	83 c4 20             	add    esp,0x20
c0018d6b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d70:	74 30                	je     c0018da2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018d72:	31 c0                	xor    eax,eax
c0018d74:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018d78:	7e 28                	jle    c0018da2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018d7a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018d82:	39 cb                	cmp    ebx,ecx
c0018d84:	75 19                	jne    c0018d9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018d86:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018d8e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018d92:	75 0b                	jne    c0018d9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018d94:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018d9b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018d9f:	40                   	inc    eax
c0018da0:	eb d2                	jmp    c0018d74 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018da2:	31 d2                	xor    edx,edx
c0018da4:	83 ec 0c             	sub    esp,0xc
c0018da7:	57                   	push   edi
c0018da8:	53                   	push   ebx
c0018da9:	56                   	push   esi
c0018daa:	52                   	push   edx
c0018dab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018daf:	55                   	push   ebp
c0018db0:	e8 bf f9 ff ff       	call   c0018774 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018db5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018db9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018dbd:	42                   	inc    edx
c0018dbe:	83 c4 20             	add    esp,0x20
c0018dc1:	83 fa 06             	cmp    edx,0x6
c0018dc4:	75 de                	jne    c0018da4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018dc6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018dcb:	83 ec 0c             	sub    esp,0xc
c0018dce:	86 e0                	xchg   al,ah
c0018dd0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018dd5:	6a 02                	push   0x2
c0018dd7:	57                   	push   edi
c0018dd8:	53                   	push   ebx
c0018dd9:	56                   	push   esi
c0018dda:	55                   	push   ebp
c0018ddb:	e8 be f7 ff ff       	call   c001859e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018de0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018de5:	83 c4 20             	add    esp,0x20
c0018de8:	57                   	push   edi
c0018de9:	53                   	push   ebx
c0018dea:	56                   	push   esi
c0018deb:	55                   	push   ebp
c0018dec:	e8 eb f8 ff ff       	call   c00186dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018df1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018df5:	57                   	push   edi
c0018df6:	53                   	push   ebx
c0018df7:	56                   	push   esi
c0018df8:	55                   	push   ebp
c0018df9:	e8 48 f8 ff ff       	call   c0018646 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018dfe:	b9 09 00 00 00       	mov    ecx,0x9
c0018e03:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e08:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e0c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e10:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e14:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e18:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e1c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e20:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e24:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	fc                   	cld    
c0018e2c:	89 e7                	mov    edi,esp
c0018e2e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e34:	55                   	push   ebp
c0018e35:	e8 26 fd ff ff       	call   c0018b60 <PCI::foundDevice(PCIDeviceInfo)>
c0018e3a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018e40:	5b                   	pop    ebx
c0018e41:	5e                   	pop    esi
c0018e42:	5f                   	pop    edi
c0018e43:	5d                   	pop    ebp
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018e46:	55                   	push   ebp
c0018e47:	57                   	push   edi
c0018e48:	56                   	push   esi
c0018e49:	53                   	push   ebx
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018e51:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018e56:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e5b:	6a 00                	push   0x0
c0018e5d:	56                   	push   esi
c0018e5e:	57                   	push   edi
c0018e5f:	55                   	push   ebp
c0018e60:	e8 e1 f7 ff ff       	call   c0018646 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e65:	6a 00                	push   0x0
c0018e67:	56                   	push   esi
c0018e68:	57                   	push   edi
c0018e69:	55                   	push   ebp
c0018e6a:	e8 63 fe ff ff       	call   c0018cd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018e6f:	83 c4 20             	add    esp,0x20
c0018e72:	6a 00                	push   0x0
c0018e74:	56                   	push   esi
c0018e75:	57                   	push   edi
c0018e76:	55                   	push   ebp
c0018e77:	e8 ee f7 ff ff       	call   c001866a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	84 c0                	test   al,al
c0018e81:	79 27                	jns    c0018eaa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018e83:	bb 01 00 00 00       	mov    ebx,0x1
c0018e88:	53                   	push   ebx
c0018e89:	56                   	push   esi
c0018e8a:	57                   	push   edi
c0018e8b:	55                   	push   ebp
c0018e8c:	e8 b5 f7 ff ff       	call   c0018646 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e91:	83 c4 10             	add    esp,0x10
c0018e94:	66 40                	inc    ax
c0018e96:	74 0c                	je     c0018ea4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018e98:	53                   	push   ebx
c0018e99:	56                   	push   esi
c0018e9a:	57                   	push   edi
c0018e9b:	55                   	push   ebp
c0018e9c:	e8 31 fe ff ff       	call   c0018cd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	43                   	inc    ebx
c0018ea5:	83 fb 08             	cmp    ebx,0x8
c0018ea8:	75 de                	jne    c0018e88 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018eaa:	83 c4 0c             	add    esp,0xc
c0018ead:	5b                   	pop    ebx
c0018eae:	5e                   	pop    esi
c0018eaf:	5f                   	pop    edi
c0018eb0:	5d                   	pop    ebp
c0018eb1:	c3                   	ret    

c0018eb2 <PCI::detect()>:
c0018eb2:	56                   	push   esi
c0018eb3:	53                   	push   ebx
c0018eb4:	53                   	push   ebx
c0018eb5:	31 db                	xor    ebx,ebx
c0018eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018ebb:	6a 00                	push   0x0
c0018ebd:	6a 00                	push   0x0
c0018ebf:	6a 00                	push   0x0
c0018ec1:	56                   	push   esi
c0018ec2:	e8 a3 f7 ff ff       	call   c001866a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ec7:	83 c4 10             	add    esp,0x10
c0018eca:	a8 80                	test   al,0x80
c0018ecc:	75 21                	jne    c0018eef <PCI::detect()+0x3d>
c0018ece:	51                   	push   ecx
c0018ecf:	51                   	push   ecx
c0018ed0:	6a 00                	push   0x0
c0018ed2:	56                   	push   esi
c0018ed3:	e8 62 fc ff ff       	call   c0018b3a <PCI::checkBus(unsigned char)>
c0018ed8:	83 c4 10             	add    esp,0x10
c0018edb:	eb 24                	jmp    c0018f01 <PCI::detect()+0x4f>
c0018edd:	52                   	push   edx
c0018ede:	52                   	push   edx
c0018edf:	53                   	push   ebx
c0018ee0:	43                   	inc    ebx
c0018ee1:	56                   	push   esi
c0018ee2:	e8 53 fc ff ff       	call   c0018b3a <PCI::checkBus(unsigned char)>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	83 fb 08             	cmp    ebx,0x8
c0018eed:	74 12                	je     c0018f01 <PCI::detect()+0x4f>
c0018eef:	53                   	push   ebx
c0018ef0:	6a 00                	push   0x0
c0018ef2:	6a 00                	push   0x0
c0018ef4:	56                   	push   esi
c0018ef5:	e8 4c f7 ff ff       	call   c0018646 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018efa:	83 c4 10             	add    esp,0x10
c0018efd:	66 40                	inc    ax
c0018eff:	74 dc                	je     c0018edd <PCI::detect()+0x2b>
c0018f01:	58                   	pop    eax
c0018f02:	5b                   	pop    ebx
c0018f03:	5e                   	pop    esi
c0018f04:	c3                   	ret    
c0018f05:	90                   	nop

c0018f06 <IDE::close(int, int, void*)>:
c0018f06:	83 c8 ff             	or     eax,0xffffffff
c0018f09:	c3                   	ret    

c0018f0a <IDE::IDE()>:
c0018f0a:	83 ec 0c             	sub    esp,0xc
c0018f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f11:	83 ec 08             	sub    esp,0x8
c0018f14:	68 f8 f0 01 c0       	push   0xc001f0f8
c0018f19:	50                   	push   eax
c0018f1a:	e8 51 34 ff ff       	call   c000c370 <HardDiskController::HardDiskController(char const*)>
c0018f1f:	83 c4 10             	add    esp,0x10
c0018f22:	ba 88 f1 01 c0       	mov    edx,0xc001f188
c0018f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f2b:	89 10                	mov    DWORD PTR [eax],edx
c0018f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f31:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018f38:	90                   	nop
c0018f39:	83 c4 0c             	add    esp,0xc
c0018f3c:	c3                   	ret    
c0018f3d:	90                   	nop

c0018f3e <IDE::prepareInterrupt(unsigned char)>:
c0018f3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f43:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f47:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018f4f:	c3                   	ret    

c0018f50 <selectDrive(unsigned char, unsigned char)>:
c0018f50:	c3                   	ret    
c0018f51:	90                   	nop

c0018f52 <IDE::getBase(unsigned char)>:
c0018f52:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f5b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018f63:	c3                   	ret    

c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018f64:	55                   	push   ebp
c0018f65:	57                   	push   edi
c0018f66:	56                   	push   esi
c0018f67:	53                   	push   ebx
c0018f68:	83 ec 1c             	sub    esp,0x1c
c0018f6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018f6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018f73:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018f76:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018f7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018f7e:	80 f9 03             	cmp    cl,0x3
c0018f81:	77 51                	ja     c0018fd4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018f83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f87:	0f b6 f2             	movzx  esi,dl
c0018f8a:	0f b6 db             	movzx  ebx,bl
c0018f8d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018f90:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018f94:	83 ca 80             	or     edx,0xffffff80
c0018f97:	0f b6 d2             	movzx  edx,dl
c0018f9a:	52                   	push   edx
c0018f9b:	6a 0c                	push   0xc
c0018f9d:	56                   	push   esi
c0018f9e:	57                   	push   edi
c0018f9f:	e8 c0 ff ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018fa4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fad:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018fb1:	ee                   	out    dx,al
c0018fb2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018fb7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018fbb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018fbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018fc3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018fcb:	83 c4 2c             	add    esp,0x2c
c0018fce:	5b                   	pop    ebx
c0018fcf:	5e                   	pop    esi
c0018fd0:	5f                   	pop    edi
c0018fd1:	5d                   	pop    ebp
c0018fd2:	eb 90                	jmp    c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018fd4:	80 fb 07             	cmp    bl,0x7
c0018fd7:	77 12                	ja     c0018feb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018fd9:	0f b6 d2             	movzx  edx,dl
c0018fdc:	0f b6 db             	movzx  ebx,bl
c0018fdf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018fe7:	89 da                	mov    edx,ebx
c0018fe9:	eb 2f                	jmp    c001901a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018feb:	80 fb 0d             	cmp    bl,0xd
c0018fee:	77 13                	ja     c0019003 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018ff0:	0f b6 d2             	movzx  edx,dl
c0018ff3:	0f b6 db             	movzx  ebx,bl
c0018ff6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018ffd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019001:	eb 17                	jmp    c001901a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019003:	80 fb 15             	cmp    bl,0x15
c0019006:	77 13                	ja     c001901b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019008:	0f b6 d2             	movzx  edx,dl
c001900b:	0f b6 db             	movzx  ebx,bl
c001900e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019016:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001901a:	ee                   	out    dx,al
c001901b:	83 c4 1c             	add    esp,0x1c
c001901e:	5b                   	pop    ebx
c001901f:	5e                   	pop    esi
c0019020:	5f                   	pop    edi
c0019021:	5d                   	pop    ebp
c0019022:	c3                   	ret    
c0019023:	90                   	nop

c0019024 <IDE::read(unsigned char, unsigned char)>:
c0019024:	55                   	push   ebp
c0019025:	57                   	push   edi
c0019026:	56                   	push   esi
c0019027:	53                   	push   ebx
c0019028:	83 ec 1c             	sub    esp,0x1c
c001902b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001902f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019033:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019036:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001903a:	3c 03                	cmp    al,0x3
c001903c:	77 43                	ja     c0019081 <IDE::read(unsigned char, unsigned char)+0x5d>
c001903e:	0f b6 f2             	movzx  esi,dl
c0019041:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019044:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019048:	83 c8 80             	or     eax,0xffffff80
c001904b:	0f b6 c0             	movzx  eax,al
c001904e:	50                   	push   eax
c001904f:	6a 0c                	push   0xc
c0019051:	56                   	push   esi
c0019052:	57                   	push   edi
c0019053:	e8 0c ff ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019058:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001905d:	0f b6 c3             	movzx  eax,bl
c0019060:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019064:	ec                   	in     al,dx
c0019065:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019069:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001906e:	52                   	push   edx
c001906f:	6a 0c                	push   0xc
c0019071:	56                   	push   esi
c0019072:	57                   	push   edi
c0019073:	e8 ec fe ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019078:	83 c4 20             	add    esp,0x20
c001907b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001907f:	eb 49                	jmp    c00190ca <IDE::read(unsigned char, unsigned char)+0xa6>
c0019081:	80 fb 07             	cmp    bl,0x7
c0019084:	77 12                	ja     c0019098 <IDE::read(unsigned char, unsigned char)+0x74>
c0019086:	0f b6 d2             	movzx  edx,dl
c0019089:	0f b6 c3             	movzx  eax,bl
c001908c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019094:	89 c2                	mov    edx,eax
c0019096:	eb 31                	jmp    c00190c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019098:	80 fb 0d             	cmp    bl,0xd
c001909b:	77 13                	ja     c00190b0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001909d:	0f b6 d2             	movzx  edx,dl
c00190a0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00190a7:	0f b6 d3             	movzx  edx,bl
c00190aa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00190ae:	eb 19                	jmp    c00190c9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00190b0:	31 c0                	xor    eax,eax
c00190b2:	80 fb 15             	cmp    bl,0x15
c00190b5:	77 13                	ja     c00190ca <IDE::read(unsigned char, unsigned char)+0xa6>
c00190b7:	0f b6 d2             	movzx  edx,dl
c00190ba:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00190c2:	0f b6 d3             	movzx  edx,bl
c00190c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00190c9:	ec                   	in     al,dx
c00190ca:	83 c4 1c             	add    esp,0x1c
c00190cd:	5b                   	pop    ebx
c00190ce:	5e                   	pop    esi
c00190cf:	5f                   	pop    edi
c00190d0:	5d                   	pop    ebp
c00190d1:	c3                   	ret    

c00190d2 <IDE::waitInterrupt(unsigned char)>:
c00190d2:	57                   	push   edi
c00190d3:	56                   	push   esi
c00190d4:	31 f6                	xor    esi,esi
c00190d6:	53                   	push   ebx
c00190d7:	83 ec 10             	sub    esp,0x10
c00190da:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00190de:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190e2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00190e6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00190eb:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00190f2:	84 db                	test   bl,bl
c00190f4:	75 33                	jne    c0019129 <IDE::waitInterrupt(unsigned char)+0x57>
c00190f6:	52                   	push   edx
c00190f7:	6a 0c                	push   0xc
c00190f9:	50                   	push   eax
c00190fa:	57                   	push   edi
c00190fb:	e8 24 ff ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019100:	83 c4 10             	add    esp,0x10
c0019103:	a8 01                	test   al,0x1
c0019105:	75 2a                	jne    c0019131 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019107:	f7 c6 04 00 00 00    	test   esi,0x4
c001910d:	75 12                	jne    c0019121 <IDE::waitInterrupt(unsigned char)+0x4f>
c001910f:	83 fe 32             	cmp    esi,0x32
c0019112:	7e 0d                	jle    c0019121 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019114:	83 ec 0c             	sub    esp,0xc
c0019117:	6a 64                	push   0x64
c0019119:	e8 72 ac ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	83 fe 3c             	cmp    esi,0x3c
c0019124:	74 0b                	je     c0019131 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019126:	46                   	inc    esi
c0019127:	eb bd                	jmp    c00190e6 <IDE::waitInterrupt(unsigned char)+0x14>
c0019129:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	88 d8                	mov    al,bl
c0019136:	5b                   	pop    ebx
c0019137:	5e                   	pop    esi
c0019138:	5f                   	pop    edi
c0019139:	c3                   	ret    

c001913a <ideChannel0IRQHandler(regs*, void*)>:
c001913a:	83 ec 10             	sub    esp,0x10
c001913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019141:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019148:	6a 07                	push   0x7
c001914a:	6a 00                	push   0x0
c001914c:	50                   	push   eax
c001914d:	e8 d2 fe ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019152:	83 c4 1c             	add    esp,0x1c
c0019155:	c3                   	ret    

c0019156 <ideChannel1IRQHandler(regs*, void*)>:
c0019156:	83 ec 10             	sub    esp,0x10
c0019159:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001915d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019164:	6a 07                	push   0x7
c0019166:	6a 01                	push   0x1
c0019168:	50                   	push   eax
c0019169:	e8 b6 fe ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001916e:	83 c4 1c             	add    esp,0x1c
c0019171:	c3                   	ret    

c0019172 <IDE::enableIRQs(unsigned char, bool)>:
c0019172:	57                   	push   edi
c0019173:	56                   	push   esi
c0019174:	be 04 00 00 00       	mov    esi,0x4
c0019179:	53                   	push   ebx
c001917a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001917f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019183:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019188:	0f 94 c0             	sete   al
c001918b:	01 c0                	add    eax,eax
c001918d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019194:	0f b6 c0             	movzx  eax,al
c0019197:	50                   	push   eax
c0019198:	6a 0c                	push   0xc
c001919a:	57                   	push   edi
c001919b:	53                   	push   ebx
c001919c:	e8 c3 fd ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	50                   	push   eax
c00191a5:	6a 0c                	push   0xc
c00191a7:	57                   	push   edi
c00191a8:	53                   	push   ebx
c00191a9:	e8 76 fe ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c00191ae:	83 c4 10             	add    esp,0x10
c00191b1:	4e                   	dec    esi
c00191b2:	75 f0                	jne    c00191a4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00191b4:	5b                   	pop    ebx
c00191b5:	5e                   	pop    esi
c00191b6:	5f                   	pop    edi
c00191b7:	c3                   	ret    

c00191b8 <IDE::open(int, int, void*)>:
c00191b8:	55                   	push   ebp
c00191b9:	57                   	push   edi
c00191ba:	56                   	push   esi
c00191bb:	53                   	push   ebx
c00191bc:	83 ec 1c             	sub    esp,0x1c
c00191bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00191c3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00191cc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00191d5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00191dc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00191e3:	0f 85 b0 02 00 00    	jne    c0019499 <IDE::open(int, int, void*)+0x2e1>
c00191e9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00191ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00191f3:	83 e0 7f             	and    eax,0x7f
c00191f6:	3c 05                	cmp    al,0x5
c00191f8:	74 04                	je     c00191fe <IDE::open(int, int, void*)+0x46>
c00191fa:	3c 0f                	cmp    al,0xf
c00191fc:	75 32                	jne    c0019230 <IDE::open(int, int, void*)+0x78>
c00191fe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019204:	83 e0 fc             	and    eax,0xfffffffc
c0019207:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001920e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019214:	83 e0 fc             	and    eax,0xfffffffc
c0019217:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001921e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019224:	83 e0 fc             	and    eax,0xfffffffc
c0019227:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001922e:	eb 14                	jmp    c0019244 <IDE::open(int, int, void*)+0x8c>
c0019230:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001923a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019244:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001924b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019256:	89 c6                	mov    esi,eax
c0019258:	bf f8 0c 00 00       	mov    edi,0xcf8
c001925d:	c1 e6 10             	shl    esi,0x10
c0019260:	89 e8                	mov    eax,ebp
c0019262:	89 fa                	mov    edx,edi
c0019264:	c1 e0 0b             	shl    eax,0xb
c0019267:	09 f0                	or     eax,esi
c0019269:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019270:	c1 e6 08             	shl    esi,0x8
c0019273:	09 c6                	or     esi,eax
c0019275:	89 f0                	mov    eax,esi
c0019277:	0d 08 00 00 80       	or     eax,0x80000008
c001927c:	ef                   	out    dx,eax
c001927d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019282:	89 ca                	mov    edx,ecx
c0019284:	ed                   	in     eax,dx
c0019285:	c1 e8 10             	shr    eax,0x10
c0019288:	3d ff ff 00 00       	cmp    eax,0xffff
c001928d:	0f 84 f5 00 00 00    	je     c0019388 <IDE::open(int, int, void*)+0x1d0>
c0019293:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019299:	89 fa                	mov    edx,edi
c001929b:	89 f0                	mov    eax,esi
c001929d:	ef                   	out    dx,eax
c001929e:	b0 fe                	mov    al,0xfe
c00192a0:	89 ca                	mov    edx,ecx
c00192a2:	ee                   	out    dx,al
c00192a3:	89 f0                	mov    eax,esi
c00192a5:	89 fa                	mov    edx,edi
c00192a7:	ef                   	out    dx,eax
c00192a8:	89 ca                	mov    edx,ecx
c00192aa:	ed                   	in     eax,dx
c00192ab:	3c fe                	cmp    al,0xfe
c00192ad:	0f 85 a9 00 00 00    	jne    c001935c <IDE::open(int, int, void*)+0x1a4>
c00192b3:	8b 15 38 08 02 c0    	mov    edx,DWORD PTR ds:0xc0020838
c00192b9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00192c0:	74 33                	je     c00192f5 <IDE::open(int, int, void*)+0x13d>
c00192c2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00192c8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00192cc:	40                   	inc    eax
c00192cd:	83 ec 0c             	sub    esp,0xc
c00192d0:	0f b6 c0             	movzx  eax,al
c00192d3:	50                   	push   eax
c00192d4:	55                   	push   ebp
c00192d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192d9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00192df:	51                   	push   ecx
c00192e0:	e8 d3 5a ff ff       	call   c000edb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00192e5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00192ea:	83 c4 1c             	add    esp,0x1c
c00192ed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00192f3:	eb 0a                	jmp    c00192ff <IDE::open(int, int, void*)+0x147>
c00192f5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00192ff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019306:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001930d:	c1 e1 10             	shl    ecx,0x10
c0019310:	c1 e0 08             	shl    eax,0x8
c0019313:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019318:	09 c1                	or     ecx,eax
c001931a:	89 fa                	mov    edx,edi
c001931c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019323:	c1 e0 0b             	shl    eax,0xb
c0019326:	09 c1                	or     ecx,eax
c0019328:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001932e:	89 c8                	mov    eax,ecx
c0019330:	ef                   	out    dx,eax
c0019331:	be fc 0c 00 00       	mov    esi,0xcfc
c0019336:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001933c:	89 f2                	mov    edx,esi
c001933e:	ee                   	out    dx,al
c001933f:	89 c8                	mov    eax,ecx
c0019341:	89 fa                	mov    edx,edi
c0019343:	ef                   	out    dx,eax
c0019344:	89 f2                	mov    edx,esi
c0019346:	ed                   	in     eax,dx
c0019347:	0f b6 c0             	movzx  eax,al
c001934a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019350:	74 46                	je     c0019398 <IDE::open(int, int, void*)+0x1e0>
c0019352:	83 ec 0c             	sub    esp,0xc
c0019355:	68 10 f1 01 c0       	push   0xc001f110
c001935a:	eb 34                	jmp    c0019390 <IDE::open(int, int, void*)+0x1d8>
c001935c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019365:	75 17                	jne    c001937e <IDE::open(int, int, void*)+0x1c6>
c0019367:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001936c:	74 07                	je     c0019375 <IDE::open(int, int, void*)+0x1bd>
c001936e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019373:	75 09                	jne    c001937e <IDE::open(int, int, void*)+0x1c6>
c0019375:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001937c:	eb 1a                	jmp    c0019398 <IDE::open(int, int, void*)+0x1e0>
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	68 18 f1 01 c0       	push   0xc001f118
c0019386:	eb 08                	jmp    c0019390 <IDE::open(int, int, void*)+0x1d8>
c0019388:	83 ec 0c             	sub    esp,0xc
c001938b:	68 49 f1 01 c0       	push   0xc001f149
c0019390:	e8 a6 73 ff ff       	call   c001073b <Krnl::panic(char const*)>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001939f:	79 1a                	jns    c00193bb <IDE::open(int, int, void*)+0x203>
c00193a1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00193a7:	83 e0 fc             	and    eax,0xfffffffc
c00193aa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00193b1:	83 c0 08             	add    eax,0x8
c00193b4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00193bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193c1:	89 c2                	mov    edx,eax
c00193c3:	83 e2 0f             	and    edx,0xf
c00193c6:	66 83 fa 08          	cmp    dx,0x8
c00193ca:	75 0a                	jne    c00193d6 <IDE::open(int, int, void*)+0x21e>
c00193cc:	83 e8 02             	sub    eax,0x2
c00193cf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193d6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00193dc:	89 c2                	mov    edx,eax
c00193de:	83 e2 0f             	and    edx,0xf
c00193e1:	66 83 fa 08          	cmp    dx,0x8
c00193e5:	75 0a                	jne    c00193f1 <IDE::open(int, int, void*)+0x239>
c00193e7:	83 e8 02             	sub    eax,0x2
c00193ea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00193f1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00193f8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00193ff:	89 d0                	mov    eax,edx
c0019401:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019404:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019408:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001940c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001940f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019414:	0f b6 c9             	movzx  ecx,cl
c0019417:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001941e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019421:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019425:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019429:	8d 50 02             	lea    edx,[eax+0x2]
c001942c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019431:	0f b6 d2             	movzx  edx,dl
c0019434:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001943a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001943d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019441:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019445:	8d 48 03             	lea    ecx,[eax+0x3]
c0019448:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001944d:	0f b6 c9             	movzx  ecx,cl
c0019450:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019456:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019459:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001945d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019461:	8d 50 04             	lea    edx,[eax+0x4]
c0019464:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001946a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001946f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019476:	66 85 f6             	test   si,si
c0019479:	74 5b                	je     c00194d6 <IDE::open(int, int, void*)+0x31e>
c001947b:	0f b6 d2             	movzx  edx,dl
c001947e:	83 c0 05             	add    eax,0x5
c0019481:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019484:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019488:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001948c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019492:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019497:	eb 3d                	jmp    c00194d6 <IDE::open(int, int, void*)+0x31e>
c0019499:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001949f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194a6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00194ad:	66 05 06 02          	add    ax,0x206
c00194b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194b8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00194bf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00194c6:	66 05 06 02          	add    ax,0x206
c00194ca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194d1:	e9 e5 fe ff ff       	jmp    c00193bb <IDE::open(int, int, void*)+0x203>
c00194d6:	50                   	push   eax
c00194d7:	50                   	push   eax
c00194d8:	6a 00                	push   0x0
c00194da:	53                   	push   ebx
c00194db:	e8 5e fa ff ff       	call   c0018f3e <IDE::prepareInterrupt(unsigned char)>
c00194e0:	5a                   	pop    edx
c00194e1:	59                   	pop    ecx
c00194e2:	6a 01                	push   0x1
c00194e4:	53                   	push   ebx
c00194e5:	e8 54 fa ff ff       	call   c0018f3e <IDE::prepareInterrupt(unsigned char)>
c00194ea:	83 c4 0c             	add    esp,0xc
c00194ed:	6a 00                	push   0x0
c00194ef:	6a 00                	push   0x0
c00194f1:	53                   	push   ebx
c00194f2:	e8 7b fc ff ff       	call   c0019172 <IDE::enableIRQs(unsigned char, bool)>
c00194f7:	83 c4 0c             	add    esp,0xc
c00194fa:	6a 00                	push   0x0
c00194fc:	6a 01                	push   0x1
c00194fe:	53                   	push   ebx
c00194ff:	e8 6e fc ff ff       	call   c0019172 <IDE::enableIRQs(unsigned char, bool)>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001950e:	74 34                	je     c0019544 <IDE::open(int, int, void*)+0x38c>
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	53                   	push   ebx
c0019514:	6a 01                	push   0x1
c0019516:	68 3a 91 01 c0       	push   0xc001913a
c001951b:	6a 0e                	push   0xe
c001951d:	53                   	push   ebx
c001951e:	e8 b5 2a ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019523:	83 c4 14             	add    esp,0x14
c0019526:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001952c:	53                   	push   ebx
c001952d:	6a 01                	push   0x1
c001952f:	68 56 91 01 c0       	push   0xc0019156
c0019534:	6a 0f                	push   0xf
c0019536:	53                   	push   ebx
c0019537:	e8 9c 2a ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001953c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019542:	eb 38                	jmp    c001957c <IDE::open(int, int, void*)+0x3c4>
c0019544:	83 ec 0c             	sub    esp,0xc
c0019547:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019551:	53                   	push   ebx
c0019552:	6a 00                	push   0x0
c0019554:	68 3a 91 01 c0       	push   0xc001913a
c0019559:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001955f:	53                   	push   ebx
c0019560:	e8 73 2a ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019565:	83 c4 14             	add    esp,0x14
c0019568:	53                   	push   ebx
c0019569:	6a 00                	push   0x0
c001956b:	68 56 91 01 c0       	push   0xc0019156
c0019570:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019576:	53                   	push   ebx
c0019577:	e8 5c 2a ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001957c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001957e:	83 c4 20             	add    esp,0x20
c0019581:	83 ec 0c             	sub    esp,0xc
c0019584:	53                   	push   ebx
c0019585:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019588:	83 c4 0c             	add    esp,0xc
c001958b:	6a 07                	push   0x7
c001958d:	6a 00                	push   0x0
c001958f:	53                   	push   ebx
c0019590:	e8 8f fa ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019595:	83 c4 0c             	add    esp,0xc
c0019598:	6a 07                	push   0x7
c001959a:	6a 01                	push   0x1
c001959c:	53                   	push   ebx
c001959d:	e8 82 fa ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c00195a2:	83 c4 0c             	add    esp,0xc
c00195a5:	6a 01                	push   0x1
c00195a7:	6a 00                	push   0x0
c00195a9:	53                   	push   ebx
c00195aa:	e8 c3 fb ff ff       	call   c0019172 <IDE::enableIRQs(unsigned char, bool)>
c00195af:	83 c4 0c             	add    esp,0xc
c00195b2:	6a 01                	push   0x1
c00195b4:	6a 01                	push   0x1
c00195b6:	53                   	push   ebx
c00195b7:	e8 b6 fb ff ff       	call   c0019172 <IDE::enableIRQs(unsigned char, bool)>
c00195bc:	83 c4 2c             	add    esp,0x2c
c00195bf:	31 c0                	xor    eax,eax
c00195c1:	5b                   	pop    ebx
c00195c2:	5e                   	pop    esi
c00195c3:	5f                   	pop    edi
c00195c4:	5d                   	pop    ebp
c00195c5:	c3                   	ret    

c00195c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00195c6:	55                   	push   ebp
c00195c7:	57                   	push   edi
c00195c8:	56                   	push   esi
c00195c9:	53                   	push   ebx
c00195ca:	83 ec 1c             	sub    esp,0x1c
c00195cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00195d5:	8d 50 f8             	lea    edx,[eax-0x8]
c00195d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00195dc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00195e0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00195e4:	80 fa 03             	cmp    dl,0x3
c00195e7:	77 5d                	ja     c0019646 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00195e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00195ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195f1:	0f b6 db             	movzx  ebx,bl
c00195f4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00195f7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00195fb:	83 ca 80             	or     edx,0xffffff80
c00195fe:	0f b6 d2             	movzx  edx,dl
c0019601:	52                   	push   edx
c0019602:	6a 0c                	push   0xc
c0019604:	53                   	push   ebx
c0019605:	56                   	push   esi
c0019606:	e8 59 f9 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001960b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019610:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019614:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019618:	0f b6 c0             	movzx  eax,al
c001961b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001961f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019621:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019626:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001962a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001962e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019632:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001963a:	83 c4 2c             	add    esp,0x2c
c001963d:	5b                   	pop    ebx
c001963e:	5e                   	pop    esi
c001963f:	5f                   	pop    edi
c0019640:	5d                   	pop    ebp
c0019641:	e9 1e f9 ff ff       	jmp    c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019646:	3c 07                	cmp    al,0x7
c0019648:	77 10                	ja     c001965a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001964a:	0f b6 db             	movzx  ebx,bl
c001964d:	0f b6 d0             	movzx  edx,al
c0019650:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019658:	eb 2d                	jmp    c0019687 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001965a:	3c 0d                	cmp    al,0xd
c001965c:	77 13                	ja     c0019671 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001965e:	0f b6 db             	movzx  ebx,bl
c0019661:	0f b6 c0             	movzx  eax,al
c0019664:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001966b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001966f:	eb 16                	jmp    c0019687 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019671:	3c 15                	cmp    al,0x15
c0019673:	77 14                	ja     c0019689 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019675:	0f b6 db             	movzx  ebx,bl
c0019678:	0f b6 c0             	movzx  eax,al
c001967b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019683:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019687:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019689:	83 c4 1c             	add    esp,0x1c
c001968c:	5b                   	pop    ebx
c001968d:	5e                   	pop    esi
c001968e:	5f                   	pop    edi
c001968f:	5d                   	pop    ebp
c0019690:	c3                   	ret    
c0019691:	90                   	nop

c0019692 <IDE::detect()>:
c0019692:	55                   	push   ebp
c0019693:	57                   	push   edi
c0019694:	56                   	push   esi
c0019695:	53                   	push   ebx
c0019696:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001969c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00196a3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00196aa:	0f 85 97 02 00 00    	jne    c0019947 <IDE::detect()+0x2b5>
c00196b0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00196b7:	31 f6                	xor    esi,esi
c00196b9:	31 ed                	xor    ebp,ebp
c00196bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00196c3:	89 e8                	mov    eax,ebp
c00196c5:	c1 e0 06             	shl    eax,0x6
c00196c8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00196d0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00196d4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196d8:	c1 e0 04             	shl    eax,0x4
c00196db:	83 c8 a0             	or     eax,0xffffffa0
c00196de:	0f b6 c0             	movzx  eax,al
c00196e1:	50                   	push   eax
c00196e2:	6a 06                	push   0x6
c00196e4:	56                   	push   esi
c00196e5:	53                   	push   ebx
c00196e6:	e8 79 f8 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196eb:	83 c4 0c             	add    esp,0xc
c00196ee:	6a 0c                	push   0xc
c00196f0:	56                   	push   esi
c00196f1:	53                   	push   ebx
c00196f2:	e8 2d f9 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c00196f7:	83 c4 0c             	add    esp,0xc
c00196fa:	6a 0c                	push   0xc
c00196fc:	56                   	push   esi
c00196fd:	53                   	push   ebx
c00196fe:	e8 21 f9 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019703:	83 c4 0c             	add    esp,0xc
c0019706:	6a 0c                	push   0xc
c0019708:	56                   	push   esi
c0019709:	53                   	push   ebx
c001970a:	e8 15 f9 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001970f:	83 c4 0c             	add    esp,0xc
c0019712:	6a 0c                	push   0xc
c0019714:	56                   	push   esi
c0019715:	53                   	push   ebx
c0019716:	e8 09 f9 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001971b:	68 ec 00 00 00       	push   0xec
c0019720:	6a 07                	push   0x7
c0019722:	56                   	push   esi
c0019723:	53                   	push   ebx
c0019724:	e8 3b f8 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019729:	83 c4 1c             	add    esp,0x1c
c001972c:	6a 0c                	push   0xc
c001972e:	56                   	push   esi
c001972f:	53                   	push   ebx
c0019730:	e8 ef f8 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019735:	83 c4 0c             	add    esp,0xc
c0019738:	6a 0c                	push   0xc
c001973a:	56                   	push   esi
c001973b:	53                   	push   ebx
c001973c:	e8 e3 f8 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019741:	83 c4 0c             	add    esp,0xc
c0019744:	6a 0c                	push   0xc
c0019746:	56                   	push   esi
c0019747:	53                   	push   ebx
c0019748:	e8 d7 f8 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001974d:	83 c4 0c             	add    esp,0xc
c0019750:	6a 0c                	push   0xc
c0019752:	56                   	push   esi
c0019753:	53                   	push   ebx
c0019754:	e8 cb f8 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019759:	83 c4 0c             	add    esp,0xc
c001975c:	6a 0c                	push   0xc
c001975e:	56                   	push   esi
c001975f:	53                   	push   ebx
c0019760:	e8 bf f8 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019765:	83 c4 10             	add    esp,0x10
c0019768:	84 c0                	test   al,al
c001976a:	0f 84 5f 01 00 00    	je     c00198cf <IDE::detect()+0x23d>
c0019770:	31 ff                	xor    edi,edi
c0019772:	50                   	push   eax
c0019773:	6a 0c                	push   0xc
c0019775:	56                   	push   esi
c0019776:	53                   	push   ebx
c0019777:	e8 a8 f8 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	a8 01                	test   al,0x1
c0019781:	0f 85 69 01 00 00    	jne    c00198f0 <IDE::detect()+0x25e>
c0019787:	84 c0                	test   al,al
c0019789:	78 04                	js     c001978f <IDE::detect()+0xfd>
c001978b:	a8 08                	test   al,0x8
c001978d:	75 23                	jne    c00197b2 <IDE::detect()+0x120>
c001978f:	47                   	inc    edi
c0019790:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019796:	7e da                	jle    c0019772 <IDE::detect()+0xe0>
c0019798:	83 ec 0c             	sub    esp,0xc
c001979b:	6a 32                	push   0x32
c001979d:	e8 ee a5 ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c00197a2:	83 c4 10             	add    esp,0x10
c00197a5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00197ab:	75 c5                	jne    c0019772 <IDE::detect()+0xe0>
c00197ad:	e9 3e 01 00 00       	jmp    c00198f0 <IDE::detect()+0x25e>
c00197b2:	31 c9                	xor    ecx,ecx
c00197b4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00197b8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00197bc:	83 ec 0c             	sub    esp,0xc
c00197bf:	68 80 00 00 00       	push   0x80
c00197c4:	57                   	push   edi
c00197c5:	6a 00                	push   0x0
c00197c7:	56                   	push   esi
c00197c8:	53                   	push   ebx
c00197c9:	e8 f8 fd ff ff       	call   c00195c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00197ce:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00197d3:	89 e8                	mov    eax,ebp
c00197d5:	89 d1                	mov    ecx,edx
c00197d7:	c1 e0 06             	shl    eax,0x6
c00197da:	01 d8                	add    eax,ebx
c00197dc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00197e3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00197ea:	89 f2                	mov    edx,esi
c00197ec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00197f2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00197f6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00197fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019800:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019807:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001980f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019816:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001981e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019824:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001982b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019831:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019835:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019839:	83 c4 20             	add    esp,0x20
c001983c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001983f:	83 c0 02             	add    eax,0x2
c0019842:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019848:	83 c7 02             	add    edi,0x2
c001984b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001984e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019854:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019858:	75 e2                	jne    c001983c <IDE::detect()+0x1aa>
c001985a:	89 e8                	mov    eax,ebp
c001985c:	c1 e0 06             	shl    eax,0x6
c001985f:	01 d8                	add    eax,ebx
c0019861:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019867:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001986e:	66 c1 ea 09          	shr    dx,0x9
c0019872:	83 e2 01             	and    edx,0x1
c0019875:	84 c9                	test   cl,cl
c0019877:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001987d:	75 22                	jne    c00198a1 <IDE::detect()+0x20f>
c001987f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019886:	74 46                	je     c00198ce <IDE::detect()+0x23c>
c0019888:	83 ec 0c             	sub    esp,0xc
c001988b:	68 7c 01 00 00       	push   0x17c
c0019890:	e8 c8 e5 fe ff       	call   c0007e5d <malloc>
c0019895:	89 c7                	mov    edi,eax
c0019897:	89 04 24             	mov    DWORD PTR [esp],eax
c001989a:	e8 11 05 00 00       	call   c0019db0 <ATA::ATA()>
c001989f:	eb 17                	jmp    c00198b8 <IDE::detect()+0x226>
c00198a1:	83 ec 0c             	sub    esp,0xc
c00198a4:	68 84 01 00 00       	push   0x184
c00198a9:	e8 af e5 fe ff       	call   c0007e5d <malloc>
c00198ae:	89 c7                	mov    edi,eax
c00198b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00198b3:	e8 f0 0a 00 00       	call   c001a3a8 <ATAPI::ATAPI()>
c00198b8:	5a                   	pop    edx
c00198b9:	59                   	pop    ecx
c00198ba:	57                   	push   edi
c00198bb:	53                   	push   ebx
c00198bc:	e8 6b 27 ff ff       	call   c000c02c <Device::addChild(Device*)>
c00198c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00198c3:	53                   	push   ebx
c00198c4:	55                   	push   ebp
c00198c5:	6a 00                	push   0x0
c00198c7:	57                   	push   edi
c00198c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00198cb:	83 c4 20             	add    esp,0x20
c00198ce:	45                   	inc    ebp
c00198cf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00198d4:	74 0d                	je     c00198e3 <IDE::detect()+0x251>
c00198d6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00198de:	e9 e0 fd ff ff       	jmp    c00196c3 <IDE::detect()+0x31>
c00198e3:	4e                   	dec    esi
c00198e4:	74 61                	je     c0019947 <IDE::detect()+0x2b5>
c00198e6:	be 01 00 00 00       	mov    esi,0x1
c00198eb:	e9 cb fd ff ff       	jmp    c00196bb <IDE::detect()+0x29>
c00198f0:	50                   	push   eax
c00198f1:	6a 04                	push   0x4
c00198f3:	56                   	push   esi
c00198f4:	53                   	push   ebx
c00198f5:	e8 2a f7 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c00198fa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00198fe:	83 c4 0c             	add    esp,0xc
c0019901:	6a 05                	push   0x5
c0019903:	56                   	push   esi
c0019904:	53                   	push   ebx
c0019905:	e8 1a f7 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001990a:	83 c4 10             	add    esp,0x10
c001990d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019911:	80 fa 14             	cmp    dl,0x14
c0019914:	75 04                	jne    c001991a <IDE::detect()+0x288>
c0019916:	3c eb                	cmp    al,0xeb
c0019918:	eb 07                	jmp    c0019921 <IDE::detect()+0x28f>
c001991a:	3c 96                	cmp    al,0x96
c001991c:	75 b1                	jne    c00198cf <IDE::detect()+0x23d>
c001991e:	80 fa 69             	cmp    dl,0x69
c0019921:	75 ac                	jne    c00198cf <IDE::detect()+0x23d>
c0019923:	68 a1 00 00 00       	push   0xa1
c0019928:	6a 07                	push   0x7
c001992a:	56                   	push   esi
c001992b:	53                   	push   ebx
c001992c:	e8 33 f6 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019931:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019938:	e8 53 a4 ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c001993d:	83 c4 10             	add    esp,0x10
c0019940:	b1 01                	mov    cl,0x1
c0019942:	e9 6d fe ff ff       	jmp    c00197b4 <IDE::detect()+0x122>
c0019947:	81 c4 1c 02 00 00    	add    esp,0x21c
c001994d:	5b                   	pop    ebx
c001994e:	5e                   	pop    esi
c001994f:	5f                   	pop    edi
c0019950:	5d                   	pop    ebp
c0019951:	c3                   	ret    

c0019952 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019952:	55                   	push   ebp
c0019953:	57                   	push   edi
c0019954:	56                   	push   esi
c0019955:	53                   	push   ebx
c0019956:	83 ec 1c             	sub    esp,0x1c
c0019959:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001995d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019961:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019965:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019969:	88 c3                	mov    bl,al
c001996b:	84 c0                	test   al,al
c001996d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019971:	0f 84 81 00 00 00    	je     c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019977:	83 ec 0c             	sub    esp,0xc
c001997a:	68 73 f1 01 c0       	push   0xc001f173
c001997f:	e8 68 12 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c0019984:	83 c4 10             	add    esp,0x10
c0019987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001998b:	3c 01                	cmp    al,0x1
c001998d:	74 63                	je     c00199f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001998f:	3c 02                	cmp    al,0x2
c0019991:	75 53                	jne    c00199e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019993:	01 f6                	add    esi,esi
c0019995:	09 ee                	or     esi,ebp
c0019997:	50                   	push   eax
c0019998:	89 f0                	mov    eax,esi
c001999a:	6a 01                	push   0x1
c001999c:	0f b6 f0             	movzx  esi,al
c001999f:	c1 e6 06             	shl    esi,0x6
c00199a2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00199aa:	50                   	push   eax
c00199ab:	57                   	push   edi
c00199ac:	e8 73 f6 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c00199b1:	83 c4 10             	add    esp,0x10
c00199b4:	a8 01                	test   al,0x1
c00199b6:	74 02                	je     c00199ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00199b8:	b3 07                	mov    bl,0x7
c00199ba:	a8 02                	test   al,0x2
c00199bc:	74 02                	je     c00199c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00199be:	b3 03                	mov    bl,0x3
c00199c0:	a8 04                	test   al,0x4
c00199c2:	74 02                	je     c00199c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00199c4:	b3 14                	mov    bl,0x14
c00199c6:	a8 08                	test   al,0x8
c00199c8:	74 02                	je     c00199cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00199ca:	b3 03                	mov    bl,0x3
c00199cc:	a8 10                	test   al,0x10
c00199ce:	74 02                	je     c00199d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00199d0:	b3 15                	mov    bl,0x15
c00199d2:	a8 20                	test   al,0x20
c00199d4:	74 02                	je     c00199d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00199d6:	b3 03                	mov    bl,0x3
c00199d8:	a8 40                	test   al,0x40
c00199da:	74 02                	je     c00199de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00199dc:	b3 16                	mov    bl,0x16
c00199de:	84 c0                	test   al,al
c00199e0:	79 16                	jns    c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199e2:	b3 0d                	mov    bl,0xd
c00199e4:	eb 12                	jmp    c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199e6:	3c 03                	cmp    al,0x3
c00199e8:	74 0c                	je     c00199f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00199ea:	3c 04                	cmp    al,0x4
c00199ec:	75 0a                	jne    c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199ee:	b3 08                	mov    bl,0x8
c00199f0:	eb 06                	jmp    c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199f2:	b3 13                	mov    bl,0x13
c00199f4:	eb 02                	jmp    c00199f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199f6:	b3 17                	mov    bl,0x17
c00199f8:	83 c4 1c             	add    esp,0x1c
c00199fb:	88 d8                	mov    al,bl
c00199fd:	5b                   	pop    ebx
c00199fe:	5e                   	pop    esi
c00199ff:	5f                   	pop    edi
c0019a00:	5d                   	pop    ebp
c0019a01:	c3                   	ret    

c0019a02 <IDE::polling(unsigned char, unsigned int)>:
c0019a02:	55                   	push   ebp
c0019a03:	bd 04 00 00 00       	mov    ebp,0x4
c0019a08:	57                   	push   edi
c0019a09:	56                   	push   esi
c0019a0a:	53                   	push   ebx
c0019a0b:	83 ec 0c             	sub    esp,0xc
c0019a0e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a12:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a16:	0f b6 f3             	movzx  esi,bl
c0019a19:	52                   	push   edx
c0019a1a:	6a 0c                	push   0xc
c0019a1c:	56                   	push   esi
c0019a1d:	57                   	push   edi
c0019a1e:	e8 01 f6 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	4d                   	dec    ebp
c0019a27:	75 ed                	jne    c0019a16 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a29:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a2e:	50                   	push   eax
c0019a2f:	6a 0c                	push   0xc
c0019a31:	56                   	push   esi
c0019a32:	57                   	push   edi
c0019a33:	e8 ec f5 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	a8 01                	test   al,0x1
c0019a3d:	75 17                	jne    c0019a56 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a3f:	a8 20                	test   al,0x20
c0019a41:	75 0f                	jne    c0019a52 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019a43:	4b                   	dec    ebx
c0019a44:	74 10                	je     c0019a56 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019a46:	84 c0                	test   al,al
c0019a48:	78 e4                	js     c0019a2e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019a4a:	a8 08                	test   al,0x8
c0019a4c:	74 e0                	je     c0019a2e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019a4e:	31 c0                	xor    eax,eax
c0019a50:	eb 06                	jmp    c0019a58 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019a52:	b0 01                	mov    al,0x1
c0019a54:	eb 02                	jmp    c0019a58 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019a56:	b0 02                	mov    al,0x2
c0019a58:	83 c4 0c             	add    esp,0xc
c0019a5b:	5b                   	pop    ebx
c0019a5c:	5e                   	pop    esi
c0019a5d:	5f                   	pop    edi
c0019a5e:	5d                   	pop    ebp
c0019a5f:	c3                   	ret    

c0019a60 <SATABus::close(int, int, void*)>:
c0019a60:	31 c0                	xor    eax,eax
c0019a62:	c3                   	ret    
c0019a63:	90                   	nop

c0019a64 <SATABus::detect()>:
c0019a64:	c3                   	ret    
c0019a65:	90                   	nop

c0019a66 <SATABus::SATABus()>:
c0019a66:	83 ec 0c             	sub    esp,0xc
c0019a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a6d:	83 ec 08             	sub    esp,0x8
c0019a70:	68 ac f1 01 c0       	push   0xc001f1ac
c0019a75:	50                   	push   eax
c0019a76:	e8 f5 28 ff ff       	call   c000c370 <HardDiskController::HardDiskController(char const*)>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	ba d8 f1 01 c0       	mov    edx,0xc001f1d8
c0019a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a87:	89 10                	mov    DWORD PTR [eax],edx
c0019a89:	83 ec 0c             	sub    esp,0xc
c0019a8c:	6a 50                	push   0x50
c0019a8e:	e8 55 e8 fe ff       	call   c00082e8 <Phys::allocateContiguousPages(int)>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	89 c2                	mov    edx,eax
c0019a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a9c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019aa2:	83 ec 0c             	sub    esp,0xc
c0019aa5:	6a 50                	push   0x50
c0019aa7:	e8 ed fe fe ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c0019aac:	83 c4 10             	add    esp,0x10
c0019aaf:	89 c2                	mov    edx,eax
c0019ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019abb:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0019ac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ac4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ace:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019ad4:	83 ec 0c             	sub    esp,0xc
c0019ad7:	6a 03                	push   0x3
c0019ad9:	6a 50                	push   0x50
c0019adb:	51                   	push   ecx
c0019adc:	52                   	push   edx
c0019add:	50                   	push   eax
c0019ade:	e8 45 08 ff ff       	call   c000a328 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019ae3:	83 c4 20             	add    esp,0x20
c0019ae6:	90                   	nop
c0019ae7:	83 c4 0c             	add    esp,0xc
c0019aea:	c3                   	ret    
c0019aeb:	90                   	nop

c0019aec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019af0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019af3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019af6:	09 c2                	or     edx,eax
c0019af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b04:	31 c0                	xor    eax,eax
c0019b06:	c1 e9 08             	shr    ecx,0x8
c0019b09:	83 e1 0f             	and    ecx,0xf
c0019b0c:	39 c8                	cmp    eax,ecx
c0019b0e:	74 0a                	je     c0019b1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b10:	f6 c2 01             	test   dl,0x1
c0019b13:	74 08                	je     c0019b1d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b15:	d1 ea                	shr    edx,1
c0019b17:	40                   	inc    eax
c0019b18:	eb f2                	jmp    c0019b0c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b1a:	83 c8 ff             	or     eax,0xffffffff
c0019b1d:	c3                   	ret    

c0019b1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b22:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b25:	89 c2                	mov    edx,eax
c0019b27:	c1 ea 08             	shr    edx,0x8
c0019b2a:	83 e2 0f             	and    edx,0xf
c0019b2d:	fe ca                	dec    dl
c0019b2f:	75 31                	jne    c0019b62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b31:	83 e0 0f             	and    eax,0xf
c0019b34:	3c 03                	cmp    al,0x3
c0019b36:	75 2a                	jne    c0019b62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b38:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019b3b:	b8 02 00 00 00       	mov    eax,0x2
c0019b40:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019b46:	74 1c                	je     c0019b64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019b48:	b8 04 00 00 00       	mov    eax,0x4
c0019b4d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019b53:	74 0f                	je     c0019b64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019b55:	31 c0                	xor    eax,eax
c0019b57:	83 fa 03             	cmp    edx,0x3
c0019b5a:	0f 94 c0             	sete   al
c0019b5d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019b61:	c3                   	ret    
c0019b62:	31 c0                	xor    eax,eax
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019b66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b6d:	0f ba e2 0f          	bt     edx,0xf
c0019b71:	72 f7                	jb     c0019b6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019b73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b76:	83 ca 10             	or     edx,0x10
c0019b79:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019b7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b7f:	83 ca 01             	or     edx,0x1
c0019b82:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019b85:	c3                   	ret    

c0019b86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019b86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b8d:	83 e2 fe             	and    edx,0xfffffffe
c0019b90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019b93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b96:	83 e2 ef             	and    edx,0xffffffef
c0019b99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019b9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019b9f:	0f ba e2 0e          	bt     edx,0xe
c0019ba3:	72 f7                	jb     c0019b9c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019ba5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ba8:	0f ba e2 0f          	bt     edx,0xf
c0019bac:	72 ee                	jb     c0019b9c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019bb0:	55                   	push   ebp
c0019bb1:	57                   	push   edi
c0019bb2:	56                   	push   esi
c0019bb3:	53                   	push   ebx
c0019bb4:	83 ec 1c             	sub    esp,0x1c
c0019bb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019bbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019bbf:	53                   	push   ebx
c0019bc0:	56                   	push   esi
c0019bc1:	e8 c0 ff ff ff       	call   c0019b86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019bc6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019bca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019bd0:	83 ec 0c             	sub    esp,0xc
c0019bd3:	c1 e5 0a             	shl    ebp,0xa
c0019bd6:	01 e8                	add    eax,ebp
c0019bd8:	89 03                	mov    DWORD PTR [ebx],eax
c0019bda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bdc:	68 00 04 00 00       	push   0x400
c0019be1:	6a 00                	push   0x0
c0019be3:	50                   	push   eax
c0019be4:	e8 07 69 fe ff       	call   c00004f0 <memset>
c0019be9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019bef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019bf3:	01 e8                	add    eax,ebp
c0019bf5:	83 c4 1c             	add    esp,0x1c
c0019bf8:	89 03                	mov    DWORD PTR [ebx],eax
c0019bfa:	c1 e2 08             	shl    edx,0x8
c0019bfd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c04:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c0a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c10:	01 f8                	add    eax,edi
c0019c12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c18:	68 00 01 00 00       	push   0x100
c0019c1d:	6a 00                	push   0x0
c0019c1f:	50                   	push   eax
c0019c20:	e8 cb 68 fe ff       	call   c00004f0 <memset>
c0019c25:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c2b:	01 fa                	add    edx,edi
c0019c2d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c31:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019c34:	c1 e7 0d             	shl    edi,0xd
c0019c37:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019c3e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019c44:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019c4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c4e:	31 ff                	xor    edi,edi
c0019c50:	83 c4 10             	add    esp,0x10
c0019c53:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019c59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c5d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019c63:	83 c5 20             	add    ebp,0x20
c0019c66:	01 f8                	add    eax,edi
c0019c68:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019c6b:	52                   	push   edx
c0019c6c:	68 00 01 00 00       	push   0x100
c0019c71:	6a 00                	push   0x0
c0019c73:	50                   	push   eax
c0019c74:	e8 77 68 fe ff       	call   c00004f0 <memset>
c0019c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c7d:	83 c4 10             	add    esp,0x10
c0019c80:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019c86:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019c8d:	01 f8                	add    eax,edi
c0019c8f:	81 c7 00 01 00 00    	add    edi,0x100
c0019c95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019c98:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019c9e:	75 b3                	jne    c0019c53 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019ca0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019ca7:	50                   	push   eax
c0019ca8:	50                   	push   eax
c0019ca9:	53                   	push   ebx
c0019caa:	56                   	push   esi
c0019cab:	e8 b6 fe ff ff       	call   c0019b66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019cb0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019cb7:	83 c4 2c             	add    esp,0x2c
c0019cba:	5b                   	pop    ebx
c0019cbb:	5e                   	pop    esi
c0019cbc:	5f                   	pop    edi
c0019cbd:	5d                   	pop    ebp
c0019cbe:	c3                   	ret    
c0019cbf:	90                   	nop

c0019cc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019cc0:	55                   	push   ebp
c0019cc1:	57                   	push   edi
c0019cc2:	56                   	push   esi
c0019cc3:	53                   	push   ebx
c0019cc4:	31 db                	xor    ebx,ebx
c0019cc6:	83 ec 0c             	sub    esp,0xc
c0019cc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ccd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019cd1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019cd4:	f7 c7 01 00 00 00    	test   edi,0x1
c0019cda:	74 7a                	je     c0019d56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019cdc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019ce0:	89 d8                	mov    eax,ebx
c0019ce2:	c1 e0 07             	shl    eax,0x7
c0019ce5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019cec:	55                   	push   ebp
c0019ced:	56                   	push   esi
c0019cee:	e8 2b fe ff ff       	call   c0019b1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019cf3:	5a                   	pop    edx
c0019cf4:	83 f8 01             	cmp    eax,0x1
c0019cf7:	59                   	pop    ecx
c0019cf8:	75 21                	jne    c0019d1b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019cfa:	50                   	push   eax
c0019cfb:	53                   	push   ebx
c0019cfc:	55                   	push   ebp
c0019cfd:	56                   	push   esi
c0019cfe:	e8 ad fe ff ff       	call   c0019bb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d03:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d0a:	e8 4e e1 fe ff       	call   c0007e5d <malloc>
c0019d0f:	89 c5                	mov    ebp,eax
c0019d11:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d14:	e8 43 0d 00 00       	call   c001aa5c <SATA::SATA()>
c0019d19:	eb 24                	jmp    c0019d3f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d1b:	83 f8 04             	cmp    eax,0x4
c0019d1e:	75 36                	jne    c0019d56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d20:	51                   	push   ecx
c0019d21:	53                   	push   ebx
c0019d22:	55                   	push   ebp
c0019d23:	56                   	push   esi
c0019d24:	e8 87 fe ff ff       	call   c0019bb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d29:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d30:	e8 28 e1 fe ff       	call   c0007e5d <malloc>
c0019d35:	89 c5                	mov    ebp,eax
c0019d37:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d3a:	e8 71 11 00 00       	call   c001aeb0 <SATAPI::SATAPI()>
c0019d3f:	58                   	pop    eax
c0019d40:	5a                   	pop    edx
c0019d41:	55                   	push   ebp
c0019d42:	56                   	push   esi
c0019d43:	e8 e4 22 ff ff       	call   c000c02c <Device::addChild(Device*)>
c0019d48:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d4b:	56                   	push   esi
c0019d4c:	6a 00                	push   0x0
c0019d4e:	53                   	push   ebx
c0019d4f:	55                   	push   ebp
c0019d50:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019d53:	83 c4 20             	add    esp,0x20
c0019d56:	d1 ef                	shr    edi,1
c0019d58:	43                   	inc    ebx
c0019d59:	83 fb 20             	cmp    ebx,0x20
c0019d5c:	0f 85 72 ff ff ff    	jne    c0019cd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019d62:	83 c4 0c             	add    esp,0xc
c0019d65:	5b                   	pop    ebx
c0019d66:	5e                   	pop    esi
c0019d67:	5f                   	pop    edi
c0019d68:	5d                   	pop    ebp
c0019d69:	c3                   	ret    

c0019d6a <SATABus::open(int, int, void*)>:
c0019d6a:	83 ec 14             	sub    esp,0x14
c0019d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d71:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019d77:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019d7d:	52                   	push   edx
c0019d7e:	50                   	push   eax
c0019d7f:	e8 3c ff ff ff       	call   c0019cc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019d84:	31 c0                	xor    eax,eax
c0019d86:	83 c4 1c             	add    esp,0x1c
c0019d89:	c3                   	ret    

c0019d8a <ATA::close(int, int, void*)>:
c0019d8a:	83 ec 0c             	sub    esp,0xc
c0019d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019d97:	85 c0                	test   eax,eax
c0019d99:	74 0c                	je     c0019da7 <ATA::close(int, int, void*)+0x1d>
c0019d9b:	83 ec 0c             	sub    esp,0xc
c0019d9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019da0:	50                   	push   eax
c0019da1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019da4:	83 c4 10             	add    esp,0x10
c0019da7:	31 c0                	xor    eax,eax
c0019da9:	83 c4 0c             	add    esp,0xc
c0019dac:	c3                   	ret    
c0019dad:	90                   	nop

c0019dae <ATA::powerSaving(PowerSavingLevel)>:
c0019dae:	c3                   	ret    
c0019daf:	90                   	nop

c0019db0 <ATA::ATA()>:
c0019db0:	83 ec 0c             	sub    esp,0xc
c0019db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db7:	83 ec 04             	sub    esp,0x4
c0019dba:	68 00 02 00 00       	push   0x200
c0019dbf:	68 a5 f2 01 c0       	push   0xc001f2a5
c0019dc4:	50                   	push   eax
c0019dc5:	e8 30 26 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019dca:	83 c4 10             	add    esp,0x10
c0019dcd:	ba 18 f2 01 c0       	mov    edx,0xc001f218
c0019dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd6:	89 10                	mov    DWORD PTR [eax],edx
c0019dd8:	90                   	nop
c0019dd9:	83 c4 0c             	add    esp,0xc
c0019ddc:	c3                   	ret    
c0019ddd:	90                   	nop

c0019dde <ATA::flush(bool)>:
c0019dde:	53                   	push   ebx
c0019ddf:	83 ec 08             	sub    esp,0x8
c0019de2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019de7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019deb:	19 c0                	sbb    eax,eax
c0019ded:	83 e0 fd             	and    eax,0xfffffffd
c0019df0:	05 ea 00 00 00       	add    eax,0xea
c0019df5:	50                   	push   eax
c0019df6:	6a 07                	push   0x7
c0019df8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019dff:	50                   	push   eax
c0019e00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e06:	e8 59 f1 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e0b:	83 c4 0c             	add    esp,0xc
c0019e0e:	6a 00                	push   0x0
c0019e10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e17:	50                   	push   eax
c0019e18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e1e:	e8 df fb ff ff       	call   c0019a02 <IDE::polling(unsigned char, unsigned int)>
c0019e23:	83 c4 18             	add    esp,0x18
c0019e26:	5b                   	pop    ebx
c0019e27:	c3                   	ret    

c0019e28 <ATA::readyForCommand()>:
c0019e28:	56                   	push   esi
c0019e29:	53                   	push   ebx
c0019e2a:	53                   	push   ebx
c0019e2b:	31 db                	xor    ebx,ebx
c0019e2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e31:	51                   	push   ecx
c0019e32:	6a 0c                	push   0xc
c0019e34:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019e3b:	50                   	push   eax
c0019e3c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019e42:	e8 dd f1 ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c0019e47:	83 c4 10             	add    esp,0x10
c0019e4a:	a8 88                	test   al,0x88
c0019e4c:	74 1f                	je     c0019e6d <ATA::readyForCommand()+0x45>
c0019e4e:	43                   	inc    ebx
c0019e4f:	83 fb 63             	cmp    ebx,0x63
c0019e52:	7e dd                	jle    c0019e31 <ATA::readyForCommand()+0x9>
c0019e54:	83 ec 0c             	sub    esp,0xc
c0019e57:	6a 0a                	push   0xa
c0019e59:	e8 32 9f ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c0019e5e:	83 c4 10             	add    esp,0x10
c0019e61:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019e67:	75 c8                	jne    c0019e31 <ATA::readyForCommand()+0x9>
c0019e69:	31 c0                	xor    eax,eax
c0019e6b:	eb 02                	jmp    c0019e6f <ATA::readyForCommand()+0x47>
c0019e6d:	b0 01                	mov    al,0x1
c0019e6f:	5a                   	pop    edx
c0019e70:	5b                   	pop    ebx
c0019e71:	5e                   	pop    esi
c0019e72:	c3                   	ret    
c0019e73:	90                   	nop

c0019e74 <ATA::access(unsigned long long, int, void*, bool)>:
c0019e74:	55                   	push   ebp
c0019e75:	57                   	push   edi
c0019e76:	56                   	push   esi
c0019e77:	53                   	push   ebx
c0019e78:	83 ec 2c             	sub    esp,0x2c
c0019e7b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019e7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019e83:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019e87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e8b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019e8f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019e93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019e97:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ea1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019ea7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019eab:	c1 e0 06             	shl    eax,0x6
c0019eae:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019eb6:	74 5d                	je     c0019f15 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019eb8:	89 fa                	mov    edx,edi
c0019eba:	89 f0                	mov    eax,esi
c0019ebc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ec0:	c1 ea 1c             	shr    edx,0x1c
c0019ec3:	89 d1                	mov    ecx,edx
c0019ec5:	09 c1                	or     ecx,eax
c0019ec7:	74 25                	je     c0019eee <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019ec9:	31 ed                	xor    ebp,ebp
c0019ecb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019ed2:	89 fa                	mov    edx,edi
c0019ed4:	89 f0                	mov    eax,esi
c0019ed6:	0f ad d0             	shrd   eax,edx,cl
c0019ed9:	d3 ea                	shr    edx,cl
c0019edb:	f6 c1 20             	test   cl,0x20
c0019ede:	74 02                	je     c0019ee2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019ee0:	89 d0                	mov    eax,edx
c0019ee2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019ee6:	45                   	inc    ebp
c0019ee7:	83 fd 06             	cmp    ebp,0x6
c0019eea:	75 df                	jne    c0019ecb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019eec:	eb 76                	jmp    c0019f64 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019eee:	89 f0                	mov    eax,esi
c0019ef0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019ef5:	89 fa                	mov    edx,edi
c0019ef7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019efe:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f02:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f07:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f0b:	c1 ee 18             	shr    esi,0x18
c0019f0e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f13:	eb 56                	jmp    c0019f6b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f15:	6a 00                	push   0x0
c0019f17:	6a 3f                	push   0x3f
c0019f19:	57                   	push   edi
c0019f1a:	56                   	push   esi
c0019f1b:	e8 20 22 00 00       	call   c001c140 <__umoddi3>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	40                   	inc    eax
c0019f24:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f28:	6a 00                	push   0x0
c0019f2a:	68 f0 03 00 00       	push   0x3f0
c0019f2f:	57                   	push   edi
c0019f30:	56                   	push   esi
c0019f31:	e8 0a 21 00 00       	call   c001c040 <__udivdi3>
c0019f36:	83 c4 10             	add    esp,0x10
c0019f39:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019f3e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f45:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f4a:	6a 00                	push   0x0
c0019f4c:	6a 3f                	push   0x3f
c0019f4e:	57                   	push   edi
c0019f4f:	56                   	push   esi
c0019f50:	e8 eb 20 00 00       	call   c001c040 <__udivdi3>
c0019f55:	83 c4 10             	add    esp,0x10
c0019f58:	89 c6                	mov    esi,eax
c0019f5a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019f5f:	83 e6 0f             	and    esi,0xf
c0019f62:	eb 07                	jmp    c0019f6b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f64:	31 f6                	xor    esi,esi
c0019f66:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019f6b:	bf 01 00 00 00       	mov    edi,0x1
c0019f70:	50                   	push   eax
c0019f71:	6a 00                	push   0x0
c0019f73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f7a:	50                   	push   eax
c0019f7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f7f:	e8 ee f1 ff ff       	call   c0019172 <IDE::enableIRQs(unsigned char, bool)>
c0019f84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f87:	e8 9c fe ff ff       	call   c0019e28 <ATA::readyForCommand()>
c0019f8c:	83 c4 10             	add    esp,0x10
c0019f8f:	84 c0                	test   al,al
c0019f91:	0f 84 4e 02 00 00    	je     c001a1e5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019f97:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019f9d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019fa3:	c1 e0 04             	shl    eax,0x4
c0019fa6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019fad:	09 c6                	or     esi,eax
c0019faf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019fb4:	75 05                	jne    c0019fbb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019fb6:	83 ce a0             	or     esi,0xffffffa0
c0019fb9:	eb 03                	jmp    c0019fbe <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019fbb:	83 ce e0             	or     esi,0xffffffe0
c0019fbe:	89 f0                	mov    eax,esi
c0019fc0:	0f b6 f0             	movzx  esi,al
c0019fc3:	56                   	push   esi
c0019fc4:	6a 06                	push   0x6
c0019fc6:	51                   	push   ecx
c0019fc7:	52                   	push   edx
c0019fc8:	e8 97 ef ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	6a 00                	push   0x0
c0019fd2:	6a 01                	push   0x1
c0019fd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fdb:	50                   	push   eax
c0019fdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fe2:	e8 7d ef ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fe7:	83 c4 10             	add    esp,0x10
c0019fea:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019fef:	75 6e                	jne    c001a05f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019ff1:	6a 00                	push   0x0
c0019ff3:	6a 08                	push   0x8
c0019ff5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ffc:	50                   	push   eax
c0019ffd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a003:	e8 5c ef ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a008:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a00d:	50                   	push   eax
c001a00e:	6a 09                	push   0x9
c001a010:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a017:	50                   	push   eax
c001a018:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a01e:	e8 41 ef ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a023:	83 c4 20             	add    esp,0x20
c001a026:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a02b:	50                   	push   eax
c001a02c:	6a 0a                	push   0xa
c001a02e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a035:	50                   	push   eax
c001a036:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a03c:	e8 23 ef ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a041:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a046:	50                   	push   eax
c001a047:	6a 0b                	push   0xb
c001a049:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a050:	50                   	push   eax
c001a051:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a057:	e8 08 ef ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a05c:	83 c4 20             	add    esp,0x20
c001a05f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a064:	50                   	push   eax
c001a065:	6a 02                	push   0x2
c001a067:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a06e:	50                   	push   eax
c001a06f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a075:	e8 ea ee ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a07a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a07f:	50                   	push   eax
c001a080:	6a 03                	push   0x3
c001a082:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a089:	50                   	push   eax
c001a08a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a090:	e8 cf ee ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a095:	83 c4 20             	add    esp,0x20
c001a098:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a09d:	50                   	push   eax
c001a09e:	6a 04                	push   0x4
c001a0a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0a7:	50                   	push   eax
c001a0a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0ae:	e8 b1 ee ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a0b8:	50                   	push   eax
c001a0b9:	6a 05                	push   0x5
c001a0bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0c2:	50                   	push   eax
c001a0c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c9:	e8 96 ee ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ce:	83 c4 20             	add    esp,0x20
c001a0d1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0d6:	0f 94 c0             	sete   al
c001a0d9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a0de:	74 09                	je     c001a0e9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a0e0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a0e7:	eb 07                	jmp    c001a0f0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a0e9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a0f0:	0f b6 c0             	movzx  eax,al
c001a0f3:	50                   	push   eax
c001a0f4:	6a 07                	push   0x7
c001a0f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0fd:	50                   	push   eax
c001a0fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a104:	e8 5b ee ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a109:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	85 f6                	test   esi,esi
c001a112:	0f 84 ae 00 00 00    	je     c001a1c6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a118:	50                   	push   eax
c001a119:	6a 01                	push   0x1
c001a11b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a122:	50                   	push   eax
c001a123:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a129:	e8 d4 f8 ff ff       	call   c0019a02 <IDE::polling(unsigned char, unsigned int)>
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a137:	84 c0                	test   al,al
c001a139:	74 20                	je     c001a15b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a13b:	0f b6 f8             	movzx  edi,al
c001a13e:	0f b6 d2             	movzx  edx,dl
c001a141:	57                   	push   edi
c001a142:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a149:	50                   	push   eax
c001a14a:	52                   	push   edx
c001a14b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a151:	e8 fc f7 ff ff       	call   c0019952 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a156:	e9 87 00 00 00       	jmp    c001a1e2 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a15b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a160:	74 33                	je     c001a195 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a162:	31 ed                	xor    ebp,ebp
c001a164:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a168:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a16c:	50                   	push   eax
c001a16d:	50                   	push   eax
c001a16e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a175:	50                   	push   eax
c001a176:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a17c:	e8 d1 ed ff ff       	call   c0018f52 <IDE::getBase(unsigned char)>
c001a181:	89 c2                	mov    edx,eax
c001a183:	89 f8                	mov    eax,edi
c001a185:	66 ef                	out    dx,ax
c001a187:	45                   	inc    ebp
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a191:	75 d1                	jne    c001a164 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a193:	eb 23                	jmp    c001a1b8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a195:	0f b6 d2             	movzx  edx,dl
c001a198:	51                   	push   ecx
c001a199:	51                   	push   ecx
c001a19a:	52                   	push   edx
c001a19b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a1:	e8 ac ed ff ff       	call   c0018f52 <IDE::getBase(unsigned char)>
c001a1a6:	b9 00 01 00 00       	mov    ecx,0x100
c001a1ab:	89 c2                	mov    edx,eax
c001a1ad:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a1b1:	fc                   	cld    
c001a1b2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a1b5:	83 c4 10             	add    esp,0x10
c001a1b8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a1c0:	4e                   	dec    esi
c001a1c1:	e9 4a ff ff ff       	jmp    c001a110 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a1c6:	31 ff                	xor    edi,edi
c001a1c8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a1cd:	74 16                	je     c001a1e5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a1cf:	50                   	push   eax
c001a1d0:	50                   	push   eax
c001a1d1:	31 c0                	xor    eax,eax
c001a1d3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a1d8:	0f 94 c0             	sete   al
c001a1db:	50                   	push   eax
c001a1dc:	53                   	push   ebx
c001a1dd:	e8 fc fb ff ff       	call   c0019dde <ATA::flush(bool)>
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	83 c4 2c             	add    esp,0x2c
c001a1e8:	89 f8                	mov    eax,edi
c001a1ea:	5b                   	pop    ebx
c001a1eb:	5e                   	pop    esi
c001a1ec:	5f                   	pop    edi
c001a1ed:	5d                   	pop    ebp
c001a1ee:	c3                   	ret    
c001a1ef:	90                   	nop

c001a1f0 <ATA::read(unsigned long long, int, void*)>:
c001a1f0:	57                   	push   edi
c001a1f1:	b8 04 00 00 00       	mov    eax,0x4
c001a1f6:	56                   	push   esi
c001a1f7:	53                   	push   ebx
c001a1f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a200:	8d 7a ff             	lea    edi,[edx-0x1]
c001a203:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a207:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a20b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a211:	77 25                	ja     c001a238 <ATA::read(unsigned long long, int, void*)+0x48>
c001a213:	b8 06 00 00 00       	mov    eax,0x6
c001a218:	85 f6                	test   esi,esi
c001a21a:	74 1c                	je     c001a238 <ATA::read(unsigned long long, int, void*)+0x48>
c001a21c:	50                   	push   eax
c001a21d:	50                   	push   eax
c001a21e:	6a 00                	push   0x0
c001a220:	56                   	push   esi
c001a221:	52                   	push   edx
c001a222:	53                   	push   ebx
c001a223:	51                   	push   ecx
c001a224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a228:	e8 47 fc ff ff       	call   c0019e74 <ATA::access(unsigned long long, int, void*, bool)>
c001a22d:	83 c4 20             	add    esp,0x20
c001a230:	85 c0                	test   eax,eax
c001a232:	0f 95 c0             	setne  al
c001a235:	0f b6 c0             	movzx  eax,al
c001a238:	5b                   	pop    ebx
c001a239:	5e                   	pop    esi
c001a23a:	5f                   	pop    edi
c001a23b:	c3                   	ret    

c001a23c <ATA::write(unsigned long long, int, void*)>:
c001a23c:	57                   	push   edi
c001a23d:	b8 04 00 00 00       	mov    eax,0x4
c001a242:	56                   	push   esi
c001a243:	53                   	push   ebx
c001a244:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a248:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a24c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a24f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a253:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a257:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a25d:	77 25                	ja     c001a284 <ATA::write(unsigned long long, int, void*)+0x48>
c001a25f:	b8 06 00 00 00       	mov    eax,0x6
c001a264:	85 f6                	test   esi,esi
c001a266:	74 1c                	je     c001a284 <ATA::write(unsigned long long, int, void*)+0x48>
c001a268:	50                   	push   eax
c001a269:	50                   	push   eax
c001a26a:	6a 01                	push   0x1
c001a26c:	56                   	push   esi
c001a26d:	52                   	push   edx
c001a26e:	53                   	push   ebx
c001a26f:	51                   	push   ecx
c001a270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a274:	e8 fb fb ff ff       	call   c0019e74 <ATA::access(unsigned long long, int, void*, bool)>
c001a279:	83 c4 20             	add    esp,0x20
c001a27c:	85 c0                	test   eax,eax
c001a27e:	0f 95 c0             	setne  al
c001a281:	0f b6 c0             	movzx  eax,al
c001a284:	5b                   	pop    ebx
c001a285:	5e                   	pop    esi
c001a286:	5f                   	pop    edi
c001a287:	c3                   	ret    

c001a288 <ATA::detectCHS()>:
c001a288:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a28c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a292:	c1 e0 06             	shl    eax,0x6
c001a295:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a29b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a2a5:	c7 44 24 04 fc f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1fc
c001a2ad:	e9 89 64 ff ff       	jmp    c001073b <Krnl::panic(char const*)>

c001a2b2 <ATA::open(int, int, void*)>:
c001a2b2:	53                   	push   ebx
c001a2b3:	83 ec 08             	sub    esp,0x8
c001a2b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a2c8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a2ce:	c1 e0 06             	shl    eax,0x6
c001a2d1:	01 d0                	add    eax,edx
c001a2d3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a2da:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a2e0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a2e7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a2f1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a2f7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a2fe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a305:	75 0c                	jne    c001a313 <ATA::open(int, int, void*)+0x61>
c001a307:	83 ec 0c             	sub    esp,0xc
c001a30a:	53                   	push   ebx
c001a30b:	e8 78 ff ff ff       	call   c001a288 <ATA::detectCHS()>
c001a310:	83 c4 10             	add    esp,0x10
c001a313:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a319:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a31f:	c1 e0 06             	shl    eax,0x6
c001a322:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a329:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a333:	d1 e8                	shr    eax,1
c001a335:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a33b:	6a 04                	push   0x4
c001a33d:	6a 0c                	push   0xc
c001a33f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a346:	50                   	push   eax
c001a347:	52                   	push   edx
c001a348:	e8 17 ec ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a34d:	90                   	nop
c001a34e:	90                   	nop
c001a34f:	6a 00                	push   0x0
c001a351:	6a 0c                	push   0xc
c001a353:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a35a:	50                   	push   eax
c001a35b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a361:	e8 fe eb ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a366:	83 c4 14             	add    esp,0x14
c001a369:	53                   	push   ebx
c001a36a:	e8 f3 20 ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001a36f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a372:	e8 63 31 ff ff       	call   c000d4da <createPartitionsForDisk(PhysicalDisk*)>
c001a377:	31 c0                	xor    eax,eax
c001a379:	83 c4 18             	add    esp,0x18
c001a37c:	5b                   	pop    ebx
c001a37d:	c3                   	ret    

c001a37e <ATAPI::write(unsigned long long, int, void*)>:
c001a37e:	b8 03 00 00 00       	mov    eax,0x3
c001a383:	c3                   	ret    

c001a384 <ATAPI::close(int, int, void*)>:
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a38b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a391:	85 c0                	test   eax,eax
c001a393:	74 0c                	je     c001a3a1 <ATAPI::close(int, int, void*)+0x1d>
c001a395:	83 ec 0c             	sub    esp,0xc
c001a398:	8b 10                	mov    edx,DWORD PTR [eax]
c001a39a:	50                   	push   eax
c001a39b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a39e:	83 c4 10             	add    esp,0x10
c001a3a1:	31 c0                	xor    eax,eax
c001a3a3:	83 c4 0c             	add    esp,0xc
c001a3a6:	c3                   	ret    
c001a3a7:	90                   	nop

c001a3a8 <ATAPI::ATAPI()>:
c001a3a8:	83 ec 0c             	sub    esp,0xc
c001a3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3af:	83 ec 04             	sub    esp,0x4
c001a3b2:	68 00 08 00 00       	push   0x800
c001a3b7:	68 69 f3 01 c0       	push   0xc001f369
c001a3bc:	50                   	push   eax
c001a3bd:	e8 38 20 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a3c2:	83 c4 10             	add    esp,0x10
c001a3c5:	ba 60 f2 01 c0       	mov    edx,0xc001f260
c001a3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ce:	89 10                	mov    DWORD PTR [eax],edx
c001a3d0:	90                   	nop
c001a3d1:	83 c4 0c             	add    esp,0xc
c001a3d4:	c3                   	ret    
c001a3d5:	90                   	nop

c001a3d6 <ATAPI::readyForCommand()>:
c001a3d6:	56                   	push   esi
c001a3d7:	53                   	push   ebx
c001a3d8:	53                   	push   ebx
c001a3d9:	31 db                	xor    ebx,ebx
c001a3db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3df:	51                   	push   ecx
c001a3e0:	6a 0c                	push   0xc
c001a3e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a3e9:	50                   	push   eax
c001a3ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a3f0:	e8 2f ec ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001a3f5:	83 c4 10             	add    esp,0x10
c001a3f8:	a8 88                	test   al,0x88
c001a3fa:	74 25                	je     c001a421 <ATAPI::readyForCommand()+0x4b>
c001a3fc:	43                   	inc    ebx
c001a3fd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a403:	7e da                	jle    c001a3df <ATAPI::readyForCommand()+0x9>
c001a405:	83 ec 0c             	sub    esp,0xc
c001a408:	68 5e 01 00 00       	push   0x15e
c001a40d:	e8 7e 99 ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c001a412:	83 c4 10             	add    esp,0x10
c001a415:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a41b:	75 c2                	jne    c001a3df <ATAPI::readyForCommand()+0x9>
c001a41d:	31 c0                	xor    eax,eax
c001a41f:	eb 02                	jmp    c001a423 <ATAPI::readyForCommand()+0x4d>
c001a421:	b0 01                	mov    al,0x1
c001a423:	5a                   	pop    edx
c001a424:	5b                   	pop    ebx
c001a425:	5e                   	pop    esi
c001a426:	c3                   	ret    
c001a427:	90                   	nop

c001a428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a428:	55                   	push   ebp
c001a429:	57                   	push   edi
c001a42a:	56                   	push   esi
c001a42b:	53                   	push   ebx
c001a42c:	83 ec 20             	sub    esp,0x20
c001a42f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a433:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a437:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a43b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a43f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a443:	6a 01                	push   0x1
c001a445:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a44c:	50                   	push   eax
c001a44d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a453:	e8 1a ed ff ff       	call   c0019172 <IDE::enableIRQs(unsigned char, bool)>
c001a458:	5e                   	pop    esi
c001a459:	58                   	pop    eax
c001a45a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a461:	50                   	push   eax
c001a462:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a468:	e8 d1 ea ff ff       	call   c0018f3e <IDE::prepareInterrupt(unsigned char)>
c001a46d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a470:	e8 61 ff ff ff       	call   c001a3d6 <ATAPI::readyForCommand()>
c001a475:	83 c4 10             	add    esp,0x10
c001a478:	84 c0                	test   al,al
c001a47a:	75 0a                	jne    c001a486 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a47c:	bb 01 00 00 00       	mov    ebx,0x1
c001a481:	e9 57 02 00 00       	jmp    c001a6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a486:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a48c:	c1 e0 04             	shl    eax,0x4
c001a48f:	0f b6 c0             	movzx  eax,al
c001a492:	50                   	push   eax
c001a493:	6a 06                	push   0x6
c001a495:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a49c:	50                   	push   eax
c001a49d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4a3:	e8 bc ea ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4a8:	6a 00                	push   0x0
c001a4aa:	6a 01                	push   0x1
c001a4ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4b3:	50                   	push   eax
c001a4b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4ba:	e8 a5 ea ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4bf:	83 c4 20             	add    esp,0x20
c001a4c2:	0f b6 c3             	movzx  eax,bl
c001a4c5:	0f b6 df             	movzx  ebx,bh
c001a4c8:	50                   	push   eax
c001a4c9:	6a 04                	push   0x4
c001a4cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4d2:	50                   	push   eax
c001a4d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4d9:	e8 86 ea ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4de:	53                   	push   ebx
c001a4df:	6a 05                	push   0x5
c001a4e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4e8:	50                   	push   eax
c001a4e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4ef:	e8 70 ea ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f4:	83 c4 20             	add    esp,0x20
c001a4f7:	68 a0 00 00 00       	push   0xa0
c001a4fc:	6a 07                	push   0x7
c001a4fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a505:	50                   	push   eax
c001a506:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a50c:	e8 53 ea ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a511:	83 c4 0c             	add    esp,0xc
c001a514:	6a 01                	push   0x1
c001a516:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a51d:	50                   	push   eax
c001a51e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a524:	e8 d9 f4 ff ff       	call   c0019a02 <IDE::polling(unsigned char, unsigned int)>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a532:	84 c0                	test   al,al
c001a534:	74 23                	je     c001a559 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a536:	0f b6 d8             	movzx  ebx,al
c001a539:	0f b6 d2             	movzx  edx,dl
c001a53c:	53                   	push   ebx
c001a53d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a544:	50                   	push   eax
c001a545:	52                   	push   edx
c001a546:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a54c:	e8 01 f4 ff ff       	call   c0019952 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a551:	83 c4 10             	add    esp,0x10
c001a554:	e9 84 01 00 00       	jmp    c001a6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a559:	0f b6 d2             	movzx  edx,dl
c001a55c:	53                   	push   ebx
c001a55d:	53                   	push   ebx
c001a55e:	52                   	push   edx
c001a55f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a565:	e8 e8 e9 ff ff       	call   c0018f52 <IDE::getBase(unsigned char)>
c001a56a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a56e:	b9 06 00 00 00       	mov    ecx,0x6
c001a573:	89 c2                	mov    edx,eax
c001a575:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a578:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a585:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a58c:	85 db                	test   ebx,ebx
c001a58e:	0f 84 ec 00 00 00    	je     c001a680 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a594:	51                   	push   ecx
c001a595:	51                   	push   ecx
c001a596:	52                   	push   edx
c001a597:	50                   	push   eax
c001a598:	e8 35 eb ff ff       	call   c00190d2 <IDE::waitInterrupt(unsigned char)>
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	84 c0                	test   al,al
c001a5a2:	0f 84 d4 fe ff ff    	je     c001a47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a5a8:	56                   	push   esi
c001a5a9:	56                   	push   esi
c001a5aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5b1:	50                   	push   eax
c001a5b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5b8:	e8 81 e9 ff ff       	call   c0018f3e <IDE::prepareInterrupt(unsigned char)>
c001a5bd:	83 c4 0c             	add    esp,0xc
c001a5c0:	6a 04                	push   0x4
c001a5c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5c9:	50                   	push   eax
c001a5ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d0:	e8 4f ea ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001a5d5:	83 c4 0c             	add    esp,0xc
c001a5d8:	89 c6                	mov    esi,eax
c001a5da:	6a 05                	push   0x5
c001a5dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5e3:	50                   	push   eax
c001a5e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ea:	e8 35 ea ff ff       	call   c0019024 <IDE::read(unsigned char, unsigned char)>
c001a5ef:	89 f1                	mov    ecx,esi
c001a5f1:	0f b6 c0             	movzx  eax,al
c001a5f4:	0f b6 f1             	movzx  esi,cl
c001a5f7:	c1 e0 08             	shl    eax,0x8
c001a5fa:	09 c6                	or     esi,eax
c001a5fc:	d1 fe                	sar    esi,1
c001a5fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a602:	83 c4 10             	add    esp,0x10
c001a605:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a60a:	74 41                	je     c001a64d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a60c:	31 c9                	xor    ecx,ecx
c001a60e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a614:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a61b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a61f:	75 0a                	jne    c001a62b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a621:	01 c9                	add    ecx,ecx
c001a623:	01 cd                	add    ebp,ecx
c001a625:	4b                   	dec    ebx
c001a626:	e9 54 ff ff ff       	jmp    c001a57f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a62b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a630:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a634:	51                   	push   ecx
c001a635:	51                   	push   ecx
c001a636:	52                   	push   edx
c001a637:	50                   	push   eax
c001a638:	e8 15 e9 ff ff       	call   c0018f52 <IDE::getBase(unsigned char)>
c001a63d:	89 c2                	mov    edx,eax
c001a63f:	89 f0                	mov    eax,esi
c001a641:	66 ef                	out    dx,ax
c001a643:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a647:	83 c4 10             	add    esp,0x10
c001a64a:	41                   	inc    ecx
c001a64b:	eb c1                	jmp    c001a60e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a64d:	31 f6                	xor    esi,esi
c001a64f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a655:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a65c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a660:	75 06                	jne    c001a668 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a662:	01 f6                	add    esi,esi
c001a664:	01 f5                	add    ebp,esi
c001a666:	eb bd                	jmp    c001a625 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a668:	51                   	push   ecx
c001a669:	51                   	push   ecx
c001a66a:	52                   	push   edx
c001a66b:	50                   	push   eax
c001a66c:	e8 e1 e8 ff ff       	call   c0018f52 <IDE::getBase(unsigned char)>
c001a671:	89 c2                	mov    edx,eax
c001a673:	66 ed                	in     ax,dx
c001a675:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a67a:	83 c4 10             	add    esp,0x10
c001a67d:	46                   	inc    esi
c001a67e:	eb cf                	jmp    c001a64f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a680:	51                   	push   ecx
c001a681:	51                   	push   ecx
c001a682:	52                   	push   edx
c001a683:	50                   	push   eax
c001a684:	e8 49 ea ff ff       	call   c00190d2 <IDE::waitInterrupt(unsigned char)>
c001a689:	83 c4 10             	add    esp,0x10
c001a68c:	84 c0                	test   al,al
c001a68e:	0f 84 e8 fd ff ff    	je     c001a47c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a694:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a699:	52                   	push   edx
c001a69a:	52                   	push   edx
c001a69b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6a2:	50                   	push   eax
c001a6a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6a9:	e8 90 e8 ff ff       	call   c0018f3e <IDE::prepareInterrupt(unsigned char)>
c001a6ae:	83 c4 10             	add    esp,0x10
c001a6b1:	50                   	push   eax
c001a6b2:	50                   	push   eax
c001a6b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6ba:	50                   	push   eax
c001a6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6c1:	e8 8c e8 ff ff       	call   c0018f52 <IDE::getBase(unsigned char)>
c001a6c6:	8d 50 07             	lea    edx,[eax+0x7]
c001a6c9:	ec                   	in     al,dx
c001a6ca:	83 c4 10             	add    esp,0x10
c001a6cd:	a8 88                	test   al,0x88
c001a6cf:	74 0a                	je     c001a6db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a6d1:	4b                   	dec    ebx
c001a6d2:	75 dd                	jne    c001a6b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a6d4:	bb 02 00 00 00       	mov    ebx,0x2
c001a6d9:	eb 02                	jmp    c001a6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a6db:	31 db                	xor    ebx,ebx
c001a6dd:	83 c4 1c             	add    esp,0x1c
c001a6e0:	89 d8                	mov    eax,ebx
c001a6e2:	5b                   	pop    ebx
c001a6e3:	5e                   	pop    esi
c001a6e4:	5f                   	pop    edi
c001a6e5:	5d                   	pop    ebp
c001a6e6:	c3                   	ret    
c001a6e7:	90                   	nop

c001a6e8 <ATAPI::diskRemoved()>:
c001a6e8:	53                   	push   ebx
c001a6e9:	83 ec 14             	sub    esp,0x14
c001a6ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a6f0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a6f7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a6fd:	e8 58 2b ff ff       	call   c000d25a <LogicalDisk::unmount()>
c001a702:	58                   	pop    eax
c001a703:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a709:	e8 92 34 ff ff       	call   c000dba0 <VCache::writeWriteBuffer()>
c001a70e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a714:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a718:	83 c4 18             	add    esp,0x18
c001a71b:	5b                   	pop    ebx
c001a71c:	e9 6f 34 ff ff       	jmp    c000db90 <VCache::invalidateReadBuffer()>
c001a721:	90                   	nop

c001a722 <ATAPI::eject()>:
c001a722:	57                   	push   edi
c001a723:	b9 03 00 00 00       	mov    ecx,0x3
c001a728:	53                   	push   ebx
c001a729:	83 ec 14             	sub    esp,0x14
c001a72c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a730:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a734:	fc                   	cld    
c001a735:	31 c0                	xor    eax,eax
c001a737:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a739:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a73e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a743:	50                   	push   eax
c001a744:	50                   	push   eax
c001a745:	6a 00                	push   0x0
c001a747:	6a 00                	push   0x0
c001a749:	6a 00                	push   0x0
c001a74b:	6a 02                	push   0x2
c001a74d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a751:	50                   	push   eax
c001a752:	53                   	push   ebx
c001a753:	e8 d0 fc ff ff       	call   c001a428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a758:	83 c4 14             	add    esp,0x14
c001a75b:	53                   	push   ebx
c001a75c:	e8 87 ff ff ff       	call   c001a6e8 <ATAPI::diskRemoved()>
c001a761:	83 c4 24             	add    esp,0x24
c001a764:	31 c0                	xor    eax,eax
c001a766:	5b                   	pop    ebx
c001a767:	5f                   	pop    edi
c001a768:	c3                   	ret    
c001a769:	90                   	nop

c001a76a <ATAPI::diskInserted()>:
c001a76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a76e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a775:	c3                   	ret    

c001a776 <ATAPI::detectMedia()>:
c001a776:	56                   	push   esi
c001a777:	53                   	push   ebx
c001a778:	83 ec 28             	sub    esp,0x28
c001a77b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a77f:	6a 0c                	push   0xc
c001a781:	6a 00                	push   0x0
c001a783:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a787:	56                   	push   esi
c001a788:	e8 63 5d fe ff       	call   c00004f0 <memset>
c001a78d:	58                   	pop    eax
c001a78e:	5a                   	pop    edx
c001a78f:	6a 00                	push   0x0
c001a791:	6a 00                	push   0x0
c001a793:	6a 00                	push   0x0
c001a795:	6a 00                	push   0x0
c001a797:	56                   	push   esi
c001a798:	53                   	push   ebx
c001a799:	e8 8a fc ff ff       	call   c001a428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a79e:	83 c4 1c             	add    esp,0x1c
c001a7a1:	6a 0c                	push   0xc
c001a7a3:	6a 00                	push   0x0
c001a7a5:	56                   	push   esi
c001a7a6:	e8 45 5d fe ff       	call   c00004f0 <memset>
c001a7ab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a7b0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a7b5:	59                   	pop    ecx
c001a7b6:	58                   	pop    eax
c001a7b7:	6a 01                	push   0x1
c001a7b9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a7bd:	50                   	push   eax
c001a7be:	6a 00                	push   0x0
c001a7c0:	6a 12                	push   0x12
c001a7c2:	56                   	push   esi
c001a7c3:	53                   	push   ebx
c001a7c4:	e8 5f fc ff ff       	call   c001a428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7c9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a7cd:	83 c4 20             	add    esp,0x20
c001a7d0:	83 e0 7f             	and    eax,0x7f
c001a7d3:	3c 70                	cmp    al,0x70
c001a7d5:	74 15                	je     c001a7ec <ATAPI::detectMedia()+0x76>
c001a7d7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a7de:	75 0c                	jne    c001a7ec <ATAPI::detectMedia()+0x76>
c001a7e0:	83 ec 0c             	sub    esp,0xc
c001a7e3:	53                   	push   ebx
c001a7e4:	e8 81 ff ff ff       	call   c001a76a <ATAPI::diskInserted()>
c001a7e9:	83 c4 10             	add    esp,0x10
c001a7ec:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a7f0:	83 e0 0f             	and    eax,0xf
c001a7f3:	3c 02                	cmp    al,0x2
c001a7f5:	75 1b                	jne    c001a812 <ATAPI::detectMedia()+0x9c>
c001a7f7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a7fc:	75 2d                	jne    c001a82b <ATAPI::detectMedia()+0xb5>
c001a7fe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a805:	74 24                	je     c001a82b <ATAPI::detectMedia()+0xb5>
c001a807:	83 ec 0c             	sub    esp,0xc
c001a80a:	53                   	push   ebx
c001a80b:	e8 d8 fe ff ff       	call   c001a6e8 <ATAPI::diskRemoved()>
c001a810:	eb 16                	jmp    c001a828 <ATAPI::detectMedia()+0xb2>
c001a812:	84 c0                	test   al,al
c001a814:	75 15                	jne    c001a82b <ATAPI::detectMedia()+0xb5>
c001a816:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a81d:	75 0c                	jne    c001a82b <ATAPI::detectMedia()+0xb5>
c001a81f:	83 ec 0c             	sub    esp,0xc
c001a822:	53                   	push   ebx
c001a823:	e8 42 ff ff ff       	call   c001a76a <ATAPI::diskInserted()>
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	83 c4 24             	add    esp,0x24
c001a82e:	5b                   	pop    ebx
c001a82f:	5e                   	pop    esi
c001a830:	c3                   	ret    
c001a831:	90                   	nop

c001a832 <ATAPI::open(int, int, void*)>:
c001a832:	56                   	push   esi
c001a833:	53                   	push   ebx
c001a834:	50                   	push   eax
c001a835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a839:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a83d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a841:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a847:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a84d:	c1 e0 06             	shl    eax,0x6
c001a850:	01 d0                	add    eax,edx
c001a852:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a859:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a85f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a866:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a870:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a876:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a87d:	6a 04                	push   0x4
c001a87f:	6a 0c                	push   0xc
c001a881:	51                   	push   ecx
c001a882:	52                   	push   edx
c001a883:	e8 dc e6 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a888:	90                   	nop
c001a889:	90                   	nop
c001a88a:	6a 00                	push   0x0
c001a88c:	6a 0c                	push   0xc
c001a88e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a895:	50                   	push   eax
c001a896:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a89c:	e8 c3 e6 ff ff       	call   c0018f64 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8a1:	83 c4 14             	add    esp,0x14
c001a8a4:	68 74 01 00 00       	push   0x174
c001a8a9:	e8 af d5 fe ff       	call   c0007e5d <malloc>
c001a8ae:	83 c4 0c             	add    esp,0xc
c001a8b1:	89 c6                	mov    esi,eax
c001a8b3:	6a 00                	push   0x0
c001a8b5:	68 ff ff ff 7f       	push   0x7fffffff
c001a8ba:	6a 00                	push   0x0
c001a8bc:	6a 00                	push   0x0
c001a8be:	53                   	push   ebx
c001a8bf:	68 5b f3 01 c0       	push   0xc001f35b
c001a8c4:	50                   	push   eax
c001a8c5:	e8 dc 27 ff ff       	call   c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a8ca:	83 c4 14             	add    esp,0x14
c001a8cd:	56                   	push   esi
c001a8ce:	e8 89 28 ff ff       	call   c000d15c <LogicalDisk::assignDriveLetter()>
c001a8d3:	5a                   	pop    edx
c001a8d4:	0f be c0             	movsx  eax,al
c001a8d7:	59                   	pop    ecx
c001a8d8:	50                   	push   eax
c001a8d9:	68 48 f2 01 c0       	push   0xc001f248
c001a8de:	e8 09 03 ff ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001a8e3:	58                   	pop    eax
c001a8e4:	5a                   	pop    edx
c001a8e5:	56                   	push   esi
c001a8e6:	53                   	push   ebx
c001a8e7:	e8 40 17 ff ff       	call   c000c02c <Device::addChild(Device*)>
c001a8ec:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a8f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8f5:	e8 68 1b ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001a8fa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a901:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a904:	e8 6d fe ff ff       	call   c001a776 <ATAPI::detectMedia()>
c001a909:	83 c4 14             	add    esp,0x14
c001a90c:	31 c0                	xor    eax,eax
c001a90e:	5b                   	pop    ebx
c001a90f:	5e                   	pop    esi
c001a910:	c3                   	ret    
c001a911:	90                   	nop

c001a912 <ATAPI::read(unsigned long long, int, void*)>:
c001a912:	55                   	push   ebp
c001a913:	57                   	push   edi
c001a914:	56                   	push   esi
c001a915:	53                   	push   ebx
c001a916:	83 ec 1c             	sub    esp,0x1c
c001a919:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a91d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a921:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a925:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a92c:	74 3c                	je     c001a96a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a92e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a932:	b9 03 00 00 00       	mov    ecx,0x3
c001a937:	fc                   	cld    
c001a938:	31 c0                	xor    eax,eax
c001a93a:	0f ce                	bswap  esi
c001a93c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a93e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a943:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a947:	89 e8                	mov    eax,ebp
c001a949:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a94d:	50                   	push   eax
c001a94e:	50                   	push   eax
c001a94f:	55                   	push   ebp
c001a950:	c1 e5 0b             	shl    ebp,0xb
c001a953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a957:	6a 00                	push   0x0
c001a959:	55                   	push   ebp
c001a95a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a95e:	50                   	push   eax
c001a95f:	53                   	push   ebx
c001a960:	e8 c3 fa ff ff       	call   c001a428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a965:	83 c4 20             	add    esp,0x20
c001a968:	eb 1a                	jmp    c001a984 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a96a:	83 ec 0c             	sub    esp,0xc
c001a96d:	53                   	push   ebx
c001a96e:	e8 03 fe ff ff       	call   c001a776 <ATAPI::detectMedia()>
c001a973:	83 c4 10             	add    esp,0x10
c001a976:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a97d:	75 af                	jne    c001a92e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a97f:	b8 02 00 00 00       	mov    eax,0x2
c001a984:	83 c4 1c             	add    esp,0x1c
c001a987:	5b                   	pop    ebx
c001a988:	5e                   	pop    esi
c001a989:	5f                   	pop    edi
c001a98a:	5d                   	pop    ebp
c001a98b:	c3                   	ret    

c001a98c <SATA::close(int, int, void*)>:
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a993:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a999:	85 c0                	test   eax,eax
c001a99b:	74 0c                	je     c001a9a9 <SATA::close(int, int, void*)+0x1d>
c001a99d:	83 ec 0c             	sub    esp,0xc
c001a9a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9a2:	50                   	push   eax
c001a9a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	31 c0                	xor    eax,eax
c001a9ab:	83 c4 0c             	add    esp,0xc
c001a9ae:	c3                   	ret    
c001a9af:	90                   	nop

c001a9b0 <SATA::powerSaving(PowerSavingLevel)>:
c001a9b0:	c3                   	ret    
c001a9b1:	90                   	nop

c001a9b2 <SATA::open(int, int, void*)>:
c001a9b2:	56                   	push   esi
c001a9b3:	53                   	push   ebx
c001a9b4:	50                   	push   eax
c001a9b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9bd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a9c7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a9cd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a9d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9db:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a9e5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a9eb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a9f2:	e8 33 d8 fe ff       	call   c000822a <Phys::allocatePage()>
c001a9f7:	89 c6                	mov    esi,eax
c001a9f9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9ff:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa05:	e8 20 d8 fe ff       	call   c000822a <Phys::allocatePage()>
c001aa0a:	39 c6                	cmp    esi,eax
c001aa0c:	74 10                	je     c001aa1e <SATA::open(int, int, void*)+0x6c>
c001aa0e:	83 ec 0c             	sub    esp,0xc
c001aa11:	68 90 f2 01 c0       	push   0xc001f290
c001aa16:	e8 20 5d ff ff       	call   c001073b <Krnl::panic(char const*)>
c001aa1b:	83 c4 10             	add    esp,0x10
c001aa1e:	83 ec 0c             	sub    esp,0xc
c001aa21:	6a 02                	push   0x2
c001aa23:	e8 71 ef fe ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c001aa28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa2e:	6a 03                	push   0x3
c001aa30:	50                   	push   eax
c001aa31:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aa37:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c001aa3d:	e8 ec f5 fe ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c001aa42:	83 c4 14             	add    esp,0x14
c001aa45:	53                   	push   ebx
c001aa46:	e8 17 1a ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001aa4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa4e:	e8 87 2a ff ff       	call   c000d4da <createPartitionsForDisk(PhysicalDisk*)>
c001aa53:	83 c4 14             	add    esp,0x14
c001aa56:	31 c0                	xor    eax,eax
c001aa58:	5b                   	pop    ebx
c001aa59:	5e                   	pop    esi
c001aa5a:	c3                   	ret    
c001aa5b:	90                   	nop

c001aa5c <SATA::SATA()>:
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa63:	83 ec 04             	sub    esp,0x4
c001aa66:	68 00 02 00 00       	push   0x200
c001aa6b:	68 a4 f2 01 c0       	push   0xc001f2a4
c001aa70:	50                   	push   eax
c001aa71:	e8 84 19 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	ba 14 f3 01 c0       	mov    edx,0xc001f314
c001aa7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa82:	89 10                	mov    DWORD PTR [eax],edx
c001aa84:	90                   	nop
c001aa85:	83 c4 0c             	add    esp,0xc
c001aa88:	c3                   	ret    
c001aa89:	90                   	nop

c001aa8a <SATA::access(unsigned long long, int, void*, bool)>:
c001aa8a:	55                   	push   ebp
c001aa8b:	57                   	push   edi
c001aa8c:	56                   	push   esi
c001aa8d:	53                   	push   ebx
c001aa8e:	83 ec 2c             	sub    esp,0x2c
c001aa91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aa95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aa99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa9d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aaa1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aaa5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001aaaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aaae:	7e 10                	jle    c001aac0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	68 b4 f2 01 c0       	push   0xc001f2b4
c001aab8:	e8 7e 5c ff ff       	call   c001073b <Krnl::panic(char const*)>
c001aabd:	83 c4 10             	add    esp,0x10
c001aac0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001aac6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001aacc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aad2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aad6:	89 d0                	mov    eax,edx
c001aad8:	c1 e0 07             	shl    eax,0x7
c001aadb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aadf:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aae9:	51                   	push   ecx
c001aaea:	8d 42 02             	lea    eax,[edx+0x2]
c001aaed:	51                   	push   ecx
c001aaee:	c1 e0 07             	shl    eax,0x7
c001aaf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aaf5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001aaf9:	50                   	push   eax
c001aafa:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab00:	e8 e7 ef ff ff       	call   c0019aec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab15:	0f 84 4f 01 00 00    	je     c001ac6a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab1f:	c1 e0 09             	shl    eax,0x9
c001ab22:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab2b:	74 0e                	je     c001ab3b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab2d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ab33:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ab37:	89 c1                	mov    ecx,eax
c001ab39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab3f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ab45:	8d 42 02             	lea    eax,[edx+0x2]
c001ab48:	c1 e0 07             	shl    eax,0x7
c001ab4b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab51:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ab57:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ab5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab61:	c1 e1 05             	shl    ecx,0x5
c001ab64:	01 c8                	add    eax,ecx
c001ab66:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ab6a:	83 e1 01             	and    ecx,0x1
c001ab6d:	89 ce                	mov    esi,ecx
c001ab6f:	8a 08                	mov    cl,BYTE PTR [eax]
c001ab71:	c1 e6 06             	shl    esi,0x6
c001ab74:	83 e1 bf             	and    ecx,0xffffffbf
c001ab77:	09 f1                	or     ecx,esi
c001ab79:	88 08                	mov    BYTE PTR [eax],cl
c001ab7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab7d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ab83:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ab89:	89 08                	mov    DWORD PTR [eax],ecx
c001ab8b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ab91:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ab97:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ab9d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001aba0:	50                   	push   eax
c001aba1:	68 90 00 00 00       	push   0x90
c001aba6:	6a 00                	push   0x0
c001aba8:	56                   	push   esi
c001aba9:	e8 42 59 fe ff       	call   c00004f0 <memset>
c001abae:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001abb4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001abb8:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001abbe:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001abc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	48                   	dec    eax
c001abca:	25 ff ff 3f 00       	and    eax,0x3fffff
c001abcf:	89 c1                	mov    ecx,eax
c001abd1:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001abd7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001abdc:	09 c8                	or     eax,ecx
c001abde:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001abe4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001abe7:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001abee:	66 25 00 7f          	and    ax,0x7f00
c001abf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001abf6:	66 0d 27 80          	or     ax,0x8027
c001abfa:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001abff:	66 89 06             	mov    WORD PTR [esi],ax
c001ac02:	19 c0                	sbb    eax,eax
c001ac04:	83 e0 f0             	and    eax,0xfffffff0
c001ac07:	83 c0 35             	add    eax,0x35
c001ac0a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac0d:	89 e8                	mov    eax,ebp
c001ac0f:	c1 e8 10             	shr    eax,0x10
c001ac12:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac15:	89 e8                	mov    eax,ebp
c001ac17:	c1 e8 18             	shr    eax,0x18
c001ac1a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac1d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac21:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac28:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac2b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac2f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ac33:	89 d6                	mov    esi,edx
c001ac35:	31 c0                	xor    eax,eax
c001ac37:	c1 e6 07             	shl    esi,0x7
c001ac3a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ac3e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ac44:	80 e1 88             	and    cl,0x88
c001ac47:	74 0a                	je     c001ac53 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ac49:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ac4e:	74 0a                	je     c001ac5a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ac50:	40                   	inc    eax
c001ac51:	eb eb                	jmp    c001ac3e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ac53:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ac58:	75 17                	jne    c001ac71 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	68 ed f2 01 c0       	push   0xc001f2ed
c001ac62:	e8 85 ff fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	b8 01 00 00 00       	mov    eax,0x1
c001ac6f:	eb 5d                	jmp    c001acce <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ac71:	b8 01 00 00 00       	mov    eax,0x1
c001ac76:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac7a:	c1 e2 07             	shl    edx,0x7
c001ac7d:	d3 e0                	shl    eax,cl
c001ac7f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ac83:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ac89:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ac8f:	85 c8                	test   eax,ecx
c001ac91:	74 16                	je     c001aca9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ac93:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ac99:	0f ba e1 1e          	bt     ecx,0x1e
c001ac9d:	73 ea                	jae    c001ac89 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ac9f:	83 ec 0c             	sub    esp,0xc
c001aca2:	68 fb f2 01 c0       	push   0xc001f2fb
c001aca7:	eb b9                	jmp    c001ac62 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001aca9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001acaf:	0f ba e0 1e          	bt     eax,0x1e
c001acb3:	72 b5                	jb     c001ac6a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acb5:	31 c0                	xor    eax,eax
c001acb7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acbc:	75 10                	jne    c001acce <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acbe:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001acc4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001acc8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001accc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acce:	83 c4 2c             	add    esp,0x2c
c001acd1:	5b                   	pop    ebx
c001acd2:	5e                   	pop    esi
c001acd3:	5f                   	pop    edi
c001acd4:	5d                   	pop    ebp
c001acd5:	c3                   	ret    

c001acd6 <SATA::read(unsigned long long, int, void*)>:
c001acd6:	57                   	push   edi
c001acd7:	b8 04 00 00 00       	mov    eax,0x4
c001acdc:	56                   	push   esi
c001acdd:	53                   	push   ebx
c001acde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ace2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ace6:	8d 7a ff             	lea    edi,[edx-0x1]
c001ace9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aced:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001acf1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001acf7:	77 25                	ja     c001ad1e <SATA::read(unsigned long long, int, void*)+0x48>
c001acf9:	b8 06 00 00 00       	mov    eax,0x6
c001acfe:	85 f6                	test   esi,esi
c001ad00:	74 1c                	je     c001ad1e <SATA::read(unsigned long long, int, void*)+0x48>
c001ad02:	50                   	push   eax
c001ad03:	50                   	push   eax
c001ad04:	6a 00                	push   0x0
c001ad06:	56                   	push   esi
c001ad07:	52                   	push   edx
c001ad08:	53                   	push   ebx
c001ad09:	51                   	push   ecx
c001ad0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad0e:	e8 77 fd ff ff       	call   c001aa8a <SATA::access(unsigned long long, int, void*, bool)>
c001ad13:	83 c4 20             	add    esp,0x20
c001ad16:	85 c0                	test   eax,eax
c001ad18:	0f 95 c0             	setne  al
c001ad1b:	0f b6 c0             	movzx  eax,al
c001ad1e:	5b                   	pop    ebx
c001ad1f:	5e                   	pop    esi
c001ad20:	5f                   	pop    edi
c001ad21:	c3                   	ret    

c001ad22 <SATA::write(unsigned long long, int, void*)>:
c001ad22:	55                   	push   ebp
c001ad23:	b8 04 00 00 00       	mov    eax,0x4
c001ad28:	57                   	push   edi
c001ad29:	56                   	push   esi
c001ad2a:	53                   	push   ebx
c001ad2b:	83 ec 0c             	sub    esp,0xc
c001ad2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad36:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ad39:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ad3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ad41:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ad47:	77 3d                	ja     c001ad86 <SATA::write(unsigned long long, int, void*)+0x64>
c001ad49:	b8 06 00 00 00       	mov    eax,0x6
c001ad4e:	85 ed                	test   ebp,ebp
c001ad50:	74 34                	je     c001ad86 <SATA::write(unsigned long long, int, void*)+0x64>
c001ad52:	c1 e3 09             	shl    ebx,0x9
c001ad55:	01 eb                	add    ebx,ebp
c001ad57:	89 d6                	mov    esi,edx
c001ad59:	89 cf                	mov    edi,ecx
c001ad5b:	83 c6 01             	add    esi,0x1
c001ad5e:	83 d7 00             	adc    edi,0x0
c001ad61:	50                   	push   eax
c001ad62:	50                   	push   eax
c001ad63:	6a 01                	push   0x1
c001ad65:	55                   	push   ebp
c001ad66:	81 c5 00 02 00 00    	add    ebp,0x200
c001ad6c:	6a 01                	push   0x1
c001ad6e:	51                   	push   ecx
c001ad6f:	52                   	push   edx
c001ad70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad74:	e8 11 fd ff ff       	call   c001aa8a <SATA::access(unsigned long long, int, void*, bool)>
c001ad79:	83 c4 20             	add    esp,0x20
c001ad7c:	89 f2                	mov    edx,esi
c001ad7e:	89 f9                	mov    ecx,edi
c001ad80:	39 dd                	cmp    ebp,ebx
c001ad82:	75 d3                	jne    c001ad57 <SATA::write(unsigned long long, int, void*)+0x35>
c001ad84:	31 c0                	xor    eax,eax
c001ad86:	83 c4 0c             	add    esp,0xc
c001ad89:	5b                   	pop    ebx
c001ad8a:	5e                   	pop    esi
c001ad8b:	5f                   	pop    edi
c001ad8c:	5d                   	pop    ebp
c001ad8d:	c3                   	ret    

c001ad8e <SATAPI::write(unsigned long long, int, void*)>:
c001ad8e:	b8 03 00 00 00       	mov    eax,0x3
c001ad93:	c3                   	ret    

c001ad94 <SATAPI::close(int, int, void*)>:
c001ad94:	83 ec 0c             	sub    esp,0xc
c001ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ada1:	85 c0                	test   eax,eax
c001ada3:	74 0c                	je     c001adb1 <SATAPI::close(int, int, void*)+0x1d>
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	8b 10                	mov    edx,DWORD PTR [eax]
c001adaa:	50                   	push   eax
c001adab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	31 c0                	xor    eax,eax
c001adb3:	83 c4 0c             	add    esp,0xc
c001adb6:	c3                   	ret    
c001adb7:	90                   	nop

c001adb8 <SATAPI::open(int, int, void*)>:
c001adb8:	56                   	push   esi
c001adb9:	53                   	push   ebx
c001adba:	51                   	push   ecx
c001adbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adc3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001adcd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001add3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001addd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001adeb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001adf1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001adf8:	e8 2d d4 fe ff       	call   c000822a <Phys::allocatePage()>
c001adfd:	89 c6                	mov    esi,eax
c001adff:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ae05:	81 c6 00 10 00 00    	add    esi,0x1000
c001ae0b:	e8 1a d4 fe ff       	call   c000822a <Phys::allocatePage()>
c001ae10:	39 c6                	cmp    esi,eax
c001ae12:	74 10                	je     c001ae24 <SATAPI::open(int, int, void*)+0x6c>
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	68 44 f3 01 c0       	push   0xc001f344
c001ae1c:	e8 1a 59 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001ae21:	83 c4 10             	add    esp,0x10
c001ae24:	83 ec 0c             	sub    esp,0xc
c001ae27:	6a 02                	push   0x2
c001ae29:	e8 6b eb fe ff       	call   c0009999 <Virt::allocateKernelVirtualPages(int)>
c001ae2e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ae34:	6a 03                	push   0x3
c001ae36:	50                   	push   eax
c001ae37:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ae3d:	ff 35 30 09 02 c0    	push   DWORD PTR ds:0xc0020930
c001ae43:	e8 e6 f1 fe ff       	call   c000a02e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae48:	83 c4 14             	add    esp,0x14
c001ae4b:	68 74 01 00 00       	push   0x174
c001ae50:	e8 08 d0 fe ff       	call   c0007e5d <malloc>
c001ae55:	83 c4 0c             	add    esp,0xc
c001ae58:	89 c6                	mov    esi,eax
c001ae5a:	6a 00                	push   0x0
c001ae5c:	68 ff ff ff 7f       	push   0x7fffffff
c001ae61:	6a 00                	push   0x0
c001ae63:	6a 00                	push   0x0
c001ae65:	53                   	push   ebx
c001ae66:	68 5a f3 01 c0       	push   0xc001f35a
c001ae6b:	50                   	push   eax
c001ae6c:	e8 35 22 ff ff       	call   c000d0a6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae71:	83 c4 14             	add    esp,0x14
c001ae74:	56                   	push   esi
c001ae75:	e8 e2 22 ff ff       	call   c000d15c <LogicalDisk::assignDriveLetter()>
c001ae7a:	5a                   	pop    edx
c001ae7b:	0f be c0             	movsx  eax,al
c001ae7e:	59                   	pop    ecx
c001ae7f:	50                   	push   eax
c001ae80:	68 48 f2 01 c0       	push   0xc001f248
c001ae85:	e8 62 fd fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001ae8a:	58                   	pop    eax
c001ae8b:	5a                   	pop    edx
c001ae8c:	56                   	push   esi
c001ae8d:	53                   	push   ebx
c001ae8e:	e8 99 11 ff ff       	call   c000c02c <Device::addChild(Device*)>
c001ae93:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae9c:	e8 c1 15 ff ff       	call   c000c462 <PhysicalDisk::startCache()>
c001aea1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001aea8:	31 c0                	xor    eax,eax
c001aeaa:	83 c4 14             	add    esp,0x14
c001aead:	5b                   	pop    ebx
c001aeae:	5e                   	pop    esi
c001aeaf:	c3                   	ret    

c001aeb0 <SATAPI::SATAPI()>:
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb7:	83 ec 04             	sub    esp,0x4
c001aeba:	68 00 08 00 00       	push   0x800
c001aebf:	68 68 f3 01 c0       	push   0xc001f368
c001aec4:	50                   	push   eax
c001aec5:	e8 30 15 ff ff       	call   c000c3fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	ba a4 f4 01 c0       	mov    edx,0xc001f4a4
c001aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed6:	89 10                	mov    DWORD PTR [eax],edx
c001aed8:	90                   	nop
c001aed9:	83 c4 0c             	add    esp,0xc
c001aedc:	c3                   	ret    
c001aedd:	90                   	nop

c001aede <SATAPI::diskRemoved()>:
c001aede:	c3                   	ret    
c001aedf:	90                   	nop

c001aee0 <SATAPI::diskInserted()>:
c001aee0:	83 ec 18             	sub    esp,0x18
c001aee3:	68 74 f3 01 c0       	push   0xc001f374
c001aee8:	e8 ff fc fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001aeed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aef1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aef8:	83 c4 1c             	add    esp,0x1c
c001aefb:	c3                   	ret    

c001aefc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aefc:	55                   	push   ebp
c001aefd:	57                   	push   edi
c001aefe:	56                   	push   esi
c001aeff:	53                   	push   ebx
c001af00:	83 ec 38             	sub    esp,0x38
c001af03:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af17:	68 8c f3 01 c0       	push   0xc001f38c
c001af1c:	e8 cb fc fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001af21:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af31:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af3b:	c1 e0 07             	shl    eax,0x7
c001af3e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af46:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af50:	58                   	pop    eax
c001af51:	5a                   	pop    edx
c001af52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af56:	8d 58 02             	lea    ebx,[eax+0x2]
c001af59:	c1 e3 07             	shl    ebx,0x7
c001af5c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001af60:	53                   	push   ebx
c001af61:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af67:	e8 80 eb ff ff       	call   c0019aec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af70:	83 c4 10             	add    esp,0x10
c001af73:	b8 01 00 00 00       	mov    eax,0x1
c001af78:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af7d:	0f 84 4c 02 00 00    	je     c001b1cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001af83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af91:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af9b:	c1 e1 05             	shl    ecx,0x5
c001af9e:	01 c8                	add    eax,ecx
c001afa0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afa2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001afa8:	81 c9 25 00 01 00    	or     ecx,0x10025
c001afae:	89 08                	mov    DWORD PTR [eax],ecx
c001afb0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afb6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001afbc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001afc2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001afc5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001afc8:	50                   	push   eax
c001afc9:	68 90 00 00 00       	push   0x90
c001afce:	6a 00                	push   0x0
c001afd0:	53                   	push   ebx
c001afd1:	e8 1a 55 fe ff       	call   c00004f0 <memset>
c001afd6:	b9 0c 00 00 00       	mov    ecx,0xc
c001afdb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001afdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afe1:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001afe7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001afeb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001aff1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001aff5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aff9:	48                   	dec    eax
c001affa:	25 ff ff 3f 00       	and    eax,0x3fffff
c001afff:	89 c1                	mov    ecx,eax
c001b001:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b007:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b00c:	09 c8                	or     eax,ecx
c001b00e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b014:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b017:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b01e:	66 25 00 7f          	and    ax,0x7f00
c001b022:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b026:	66 0d 27 80          	or     ax,0x8027
c001b02a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b02e:	66 89 03             	mov    WORD PTR [ebx],ax
c001b031:	89 d0                	mov    eax,edx
c001b033:	c1 ea 18             	shr    edx,0x18
c001b036:	c1 e8 10             	shr    eax,0x10
c001b039:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b03c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b03f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b043:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b046:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b04a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b04d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b051:	83 c4 10             	add    esp,0x10
c001b054:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b058:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b05c:	31 c0                	xor    eax,eax
c001b05e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b064:	80 e1 88             	and    cl,0x88
c001b067:	74 0a                	je     c001b073 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b069:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b06e:	74 0a                	je     c001b07a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b070:	40                   	inc    eax
c001b071:	eb eb                	jmp    c001b05e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b073:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b078:	75 16                	jne    c001b090 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b07a:	83 ec 0c             	sub    esp,0xc
c001b07d:	68 a6 f3 01 c0       	push   0xc001f3a6
c001b082:	e8 65 fb fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b087:	5f                   	pop    edi
c001b088:	5d                   	pop    ebp
c001b089:	68 bb f3 01 c0       	push   0xc001f3bb
c001b08e:	eb 4f                	jmp    c001b0df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b090:	be 01 00 00 00       	mov    esi,0x1
c001b095:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b09d:	d3 e6                	shl    esi,cl
c001b09f:	c1 e7 07             	shl    edi,0x7
c001b0a2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0a8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0ad:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0b1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0b7:	85 c6                	test   esi,eax
c001b0b9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0bf:	0f 84 cb 00 00 00    	je     c001b190 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b0c5:	0f ba e0 1e          	bt     eax,0x1e
c001b0c9:	73 2c                	jae    c001b0f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b0cb:	83 ec 0c             	sub    esp,0xc
c001b0ce:	68 cd f3 01 c0       	push   0xc001f3cd
c001b0d3:	e8 14 fb fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b0d8:	5b                   	pop    ebx
c001b0d9:	5e                   	pop    esi
c001b0da:	68 e0 f3 01 c0       	push   0xc001f3e0
c001b0df:	ff 35 84 08 02 c0    	push   DWORD PTR ds:0xc0020884
c001b0e5:	e8 e2 dd fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b0ea:	83 c4 10             	add    esp,0x10
c001b0ed:	b8 01 00 00 00       	mov    eax,0x1
c001b0f2:	e9 d8 00 00 00       	jmp    c001b1cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b0f7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b0fd:	83 f8 0d             	cmp    eax,0xd
c001b100:	77 0a                	ja     c001b10c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b102:	83 ec 0c             	sub    esp,0xc
c001b105:	68 c8 00 00 00       	push   0xc8
c001b10a:	eb 28                	jmp    c001b134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b10c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b112:	83 f8 0d             	cmp    eax,0xd
c001b115:	77 0a                	ja     c001b121 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b117:	83 ec 0c             	sub    esp,0xc
c001b11a:	68 58 02 00 00       	push   0x258
c001b11f:	eb 13                	jmp    c001b134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b121:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b127:	83 f8 06             	cmp    eax,0x6
c001b12a:	77 10                	ja     c001b13c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b12c:	83 ec 0c             	sub    esp,0xc
c001b12f:	68 dc 05 00 00       	push   0x5dc
c001b134:	e8 57 8c ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c001b139:	83 c4 10             	add    esp,0x10
c001b13c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b140:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b143:	75 06                	jne    c001b14b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b145:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b149:	74 15                	je     c001b160 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b14b:	83 fb 06             	cmp    ebx,0x6
c001b14e:	77 10                	ja     c001b160 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b150:	83 ec 0c             	sub    esp,0xc
c001b153:	68 c4 09 00 00       	push   0x9c4
c001b158:	e8 33 8c ff ff       	call   c0013d90 <milliTenthSleep(unsigned int)>
c001b15d:	83 c4 10             	add    esp,0x10
c001b160:	43                   	inc    ebx
c001b161:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b167:	0f 85 44 ff ff ff    	jne    c001b0b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b16d:	51                   	push   ecx
c001b16e:	51                   	push   ecx
c001b16f:	68 f1 f3 01 c0       	push   0xc001f3f1
c001b174:	ff 35 84 08 02 c0    	push   DWORD PTR ds:0xc0020884
c001b17a:	e8 4d dd fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b17f:	c7 04 24 01 f4 01 c0 	mov    DWORD PTR [esp],0xc001f401
c001b186:	e8 61 fa fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b18b:	e9 5a ff ff ff       	jmp    c001b0ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b190:	0f ba e0 1e          	bt     eax,0x1e
c001b194:	73 19                	jae    c001b1af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b196:	83 ec 0c             	sub    esp,0xc
c001b199:	68 15 f4 01 c0       	push   0xc001f415
c001b19e:	e8 49 fa fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b1a3:	58                   	pop    eax
c001b1a4:	5a                   	pop    edx
c001b1a5:	68 2a f4 01 c0       	push   0xc001f42a
c001b1aa:	e9 30 ff ff ff       	jmp    c001b0df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b1af:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b1b4:	74 17                	je     c001b1cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1b6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b1bb:	74 10                	je     c001b1cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1bd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b1c3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b1c7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b1cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1cd:	31 c0                	xor    eax,eax
c001b1cf:	83 c4 2c             	add    esp,0x2c
c001b1d2:	5b                   	pop    ebx
c001b1d3:	5e                   	pop    esi
c001b1d4:	5f                   	pop    edi
c001b1d5:	5d                   	pop    ebp
c001b1d6:	c3                   	ret    
c001b1d7:	90                   	nop

c001b1d8 <SATAPI::eject()>:
c001b1d8:	57                   	push   edi
c001b1d9:	b9 03 00 00 00       	mov    ecx,0x3
c001b1de:	83 ec 18             	sub    esp,0x18
c001b1e1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1e5:	fc                   	cld    
c001b1e6:	31 c0                	xor    eax,eax
c001b1e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b1ea:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b1ef:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b1f4:	50                   	push   eax
c001b1f5:	6a 00                	push   0x0
c001b1f7:	6a 00                	push   0x0
c001b1f9:	6a 00                	push   0x0
c001b1fb:	6a 00                	push   0x0
c001b1fd:	6a 02                	push   0x2
c001b1ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b203:	50                   	push   eax
c001b204:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b208:	e8 ef fc ff ff       	call   c001aefc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b20d:	31 c0                	xor    eax,eax
c001b20f:	83 c4 38             	add    esp,0x38
c001b212:	5f                   	pop    edi
c001b213:	c3                   	ret    

c001b214 <SATAPI::read(unsigned long long, int, void*)>:
c001b214:	57                   	push   edi
c001b215:	56                   	push   esi
c001b216:	53                   	push   ebx
c001b217:	83 ec 3c             	sub    esp,0x3c
c001b21a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b21e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b222:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b226:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b22a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b22e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b232:	68 3d f4 01 c0       	push   0xc001f43d
c001b237:	e8 b0 f9 fe ff       	call   c000abec <Dbg::kprintf(char const*, ...)>
c001b23c:	83 c4 10             	add    esp,0x10
c001b23f:	83 fe 04             	cmp    esi,0x4
c001b242:	7e 10                	jle    c001b254 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b244:	83 ec 0c             	sub    esp,0xc
c001b247:	68 4e f4 01 c0       	push   0xc001f44e
c001b24c:	e8 ea 54 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b25a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b260:	51                   	push   ecx
c001b261:	50                   	push   eax
c001b262:	83 c0 02             	add    eax,0x2
c001b265:	c1 e0 07             	shl    eax,0x7
c001b268:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b26e:	50                   	push   eax
c001b26f:	52                   	push   edx
c001b270:	e8 3b e9 ff ff       	call   c0019bb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b275:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b279:	b9 03 00 00 00       	mov    ecx,0x3
c001b27e:	fc                   	cld    
c001b27f:	31 c0                	xor    eax,eax
c001b281:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b283:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b288:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b28d:	83 c4 0c             	add    esp,0xc
c001b290:	6a 00                	push   0x0
c001b292:	6a 00                	push   0x0
c001b294:	6a 00                	push   0x0
c001b296:	6a 00                	push   0x0
c001b298:	6a 02                	push   0x2
c001b29a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b29e:	50                   	push   eax
c001b29f:	53                   	push   ebx
c001b2a0:	e8 57 fc ff ff       	call   c001aefc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2a5:	83 c4 20             	add    esp,0x20
c001b2a8:	85 c0                	test   eax,eax
c001b2aa:	74 1f                	je     c001b2cb <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001b2ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2b0:	50                   	push   eax
c001b2b1:	50                   	push   eax
c001b2b2:	68 78 f4 01 c0       	push   0xc001f478
c001b2b7:	ff 35 84 08 02 c0    	push   DWORD PTR ds:0xc0020884
c001b2bd:	e8 0a dc fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b2c2:	58                   	pop    eax
c001b2c3:	5a                   	pop    edx
c001b2c4:	68 80 f4 01 c0       	push   0xc001f480
c001b2c9:	eb 61                	jmp    c001b32c <SATAPI::read(unsigned long long, int, void*)+0x118>
c001b2cb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b2cf:	b9 03 00 00 00       	mov    ecx,0x3
c001b2d4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2da:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b2df:	0f c8                	bswap  eax
c001b2e1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b2e5:	89 f0                	mov    eax,esi
c001b2e7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b2eb:	57                   	push   edi
c001b2ec:	56                   	push   esi
c001b2ed:	c1 e6 0b             	shl    esi,0xb
c001b2f0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2fc:	56                   	push   esi
c001b2fd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b301:	50                   	push   eax
c001b302:	53                   	push   ebx
c001b303:	e8 f4 fb ff ff       	call   c001aefc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b308:	83 c4 20             	add    esp,0x20
c001b30b:	85 c0                	test   eax,eax
c001b30d:	74 2f                	je     c001b33e <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001b30f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b313:	50                   	push   eax
c001b314:	50                   	push   eax
c001b315:	68 8a f4 01 c0       	push   0xc001f48a
c001b31a:	ff 35 84 08 02 c0    	push   DWORD PTR ds:0xc0020884
c001b320:	e8 a7 db fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b325:	5a                   	pop    edx
c001b326:	59                   	pop    ecx
c001b327:	68 92 f4 01 c0       	push   0xc001f492
c001b32c:	ff 35 84 08 02 c0    	push   DWORD PTR ds:0xc0020884
c001b332:	e8 95 db fe ff       	call   c0008ecc <VgaText::puts(char const*)>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b33e:	83 c4 30             	add    esp,0x30
c001b341:	5b                   	pop    ebx
c001b342:	5e                   	pop    esi
c001b343:	5f                   	pop    edi
c001b344:	c3                   	ret    
c001b345:	90                   	nop

c001b346 <SATAPI::detectMedia()>:
c001b346:	c3                   	ret    
c001b347:	90                   	nop

c001b348 <IOAPIC::close(int, int, void*)>:
c001b348:	b8 00 00 00 00       	mov    eax,0x0
c001b34d:	c3                   	ret    

c001b34e <apicGetBase()>:
c001b34e:	55                   	push   ebp
c001b34f:	89 e5                	mov    ebp,esp
c001b351:	83 ec 18             	sub    esp,0x18
c001b354:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001b359:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b35f:	83 e0 08             	and    eax,0x8
c001b362:	84 c0                	test   al,al
c001b364:	75 07                	jne    c001b36d <apicGetBase()+0x1f>
c001b366:	b8 00 00 00 00       	mov    eax,0x0
c001b36b:	eb 21                	jmp    c001b38e <apicGetBase()+0x40>
c001b36d:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001b372:	83 ec 08             	sub    esp,0x8
c001b375:	6a 1b                	push   0x1b
c001b377:	50                   	push   eax
c001b378:	e8 1d c1 fe ff       	call   c000749a <Computer::rdmsr(unsigned int)>
c001b37d:	83 c4 10             	add    esp,0x10
c001b380:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b383:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b386:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b389:	25 00 00 ff ff       	and    eax,0xffff0000
c001b38e:	c9                   	leave  
c001b38f:	c3                   	ret    

c001b390 <IOAPIC::IOAPIC()>:
c001b390:	83 ec 0c             	sub    esp,0xc
c001b393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b397:	83 ec 08             	sub    esp,0x8
c001b39a:	68 d4 f4 01 c0       	push   0xc001f4d4
c001b39f:	50                   	push   eax
c001b3a0:	e8 1f 0e ff ff       	call   c000c1c4 <Device::Device(char const*)>
c001b3a5:	83 c4 10             	add    esp,0x10
c001b3a8:	ba e4 f4 01 c0       	mov    edx,0xc001f4e4
c001b3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b1:	89 10                	mov    DWORD PTR [eax],edx
c001b3b3:	90                   	nop
c001b3b4:	83 c4 0c             	add    esp,0xc
c001b3b7:	c3                   	ret    

c001b3b8 <apicOpen()>:
c001b3b8:	55                   	push   ebp
c001b3b9:	89 e5                	mov    ebp,esp
c001b3bb:	53                   	push   ebx
c001b3bc:	83 ec 34             	sub    esp,0x34
c001b3bf:	a0 40 47 02 c0       	mov    al,ds:0xc0024740
c001b3c4:	83 f0 01             	xor    eax,0x1
c001b3c7:	84 c0                	test   al,al
c001b3c9:	0f 84 9d 00 00 00    	je     c001b46c <apicOpen()+0xb4>
c001b3cf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b3d3:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c001b3d8:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b3db:	0f 83 84 00 00 00    	jae    c001b465 <apicOpen()+0xad>
c001b3e1:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b3e8:	83 ec 0c             	sub    esp,0xc
c001b3eb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b3ee:	e8 6a ca fe ff       	call   c0007e5d <malloc>
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	89 c3                	mov    ebx,eax
c001b3f8:	83 ec 0c             	sub    esp,0xc
c001b3fb:	53                   	push   ebx
c001b3fc:	e8 8f ff ff ff       	call   c001b390 <IOAPIC::IOAPIC()>
c001b401:	83 c4 10             	add    esp,0x10
c001b404:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b407:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b40a:	25 ff 00 00 00       	and    eax,0xff
c001b40f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b412:	89 14 85 20 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb8e0],edx
c001b419:	a1 00 47 02 c0       	mov    eax,ds:0xc0024700
c001b41e:	40                   	inc    eax
c001b41f:	a3 00 47 02 c0       	mov    ds:0xc0024700,eax
c001b424:	a1 38 08 02 c0       	mov    eax,ds:0xc0020838
c001b429:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b42f:	83 ec 08             	sub    esp,0x8
c001b432:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b435:	50                   	push   eax
c001b436:	e8 f1 0b ff ff       	call   c000c02c <Device::addChild(Device*)>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b441:	8b 00                	mov    eax,DWORD PTR [eax]
c001b443:	83 c0 08             	add    eax,0x8
c001b446:	8b 10                	mov    edx,DWORD PTR [eax]
c001b448:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b44b:	25 ff 00 00 00       	and    eax,0xff
c001b450:	6a 00                	push   0x0
c001b452:	6a 00                	push   0x0
c001b454:	50                   	push   eax
c001b455:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b458:	ff d2                	call   edx
c001b45a:	83 c4 10             	add    esp,0x10
c001b45d:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b460:	e9 6e ff ff ff       	jmp    c001b3d3 <apicOpen()+0x1b>
c001b465:	c6 05 40 47 02 c0 01 	mov    BYTE PTR ds:0xc0024740,0x1
c001b46c:	e8 dd fe ff ff       	call   c001b34e <apicGetBase()>
c001b471:	05 f0 00 00 00       	add    eax,0xf0
c001b476:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b479:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b47c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b47e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b481:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b488:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b48f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b492:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b495:	89 10                	mov    DWORD PTR [eax],edx
c001b497:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b49e:	a1 50 30 02 c0       	mov    eax,ds:0xc0023050
c001b4a3:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b4a6:	7d 70                	jge    c001b518 <apicOpen()+0x160>
c001b4a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4ab:	8b 04 85 60 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfa0]
c001b4b2:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b4b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4b8:	8b 04 85 60 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfa0]
c001b4bf:	c1 e8 08             	shr    eax,0x8
c001b4c2:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b4c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4c9:	8b 04 85 60 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfa0]
c001b4d0:	c1 e8 18             	shr    eax,0x18
c001b4d3:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b4d6:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b4da:	75 37                	jne    c001b513 <apicOpen()+0x15b>
c001b4dc:	e8 6d fe ff ff       	call   c001b34e <apicGetBase()>
c001b4e1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b4e5:	75 07                	jne    c001b4ee <apicOpen()+0x136>
c001b4e7:	ba 60 03 00 00       	mov    edx,0x360
c001b4ec:	eb 05                	jmp    c001b4f3 <apicOpen()+0x13b>
c001b4ee:	ba 50 03 00 00       	mov    edx,0x350
c001b4f3:	01 d0                	add    eax,edx
c001b4f5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b4f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4fd:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b500:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b507:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b50b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b50e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b511:	89 10                	mov    DWORD PTR [eax],edx
c001b513:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b516:	eb 86                	jmp    c001b49e <apicOpen()+0xe6>
c001b518:	90                   	nop
c001b519:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b51c:	c9                   	leave  
c001b51d:	c3                   	ret    

c001b51e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b51e:	55                   	push   ebp
c001b51f:	89 e5                	mov    ebp,esp
c001b521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b524:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b52a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b52d:	72 1d                	jb     c001b54c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b532:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b53b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b541:	01 d0                	add    eax,edx
c001b543:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b546:	73 04                	jae    c001b54c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b548:	b0 01                	mov    al,0x1
c001b54a:	eb 02                	jmp    c001b54e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b54c:	b0 00                	mov    al,0x0
c001b54e:	5d                   	pop    ebp
c001b54f:	c3                   	ret    

c001b550 <IOAPIC::read(int)>:
c001b550:	55                   	push   ebp
c001b551:	89 e5                	mov    ebp,esp
c001b553:	83 ec 10             	sub    esp,0x10
c001b556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b559:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b55f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b562:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b565:	31 d2                	xor    edx,edx
c001b567:	88 c2                	mov    dl,al
c001b569:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b56c:	89 10                	mov    DWORD PTR [eax],edx
c001b56e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b571:	83 c0 10             	add    eax,0x10
c001b574:	8b 00                	mov    eax,DWORD PTR [eax]
c001b576:	c9                   	leave  
c001b577:	c3                   	ret    

c001b578 <IOAPIC::open(int, int, void*)>:
c001b578:	55                   	push   ebp
c001b579:	89 e5                	mov    ebp,esp
c001b57b:	57                   	push   edi
c001b57c:	56                   	push   esi
c001b57d:	53                   	push   ebx
c001b57e:	83 ec 04             	sub    esp,0x4
c001b581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b584:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b587:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b590:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b596:	8b 14 85 40 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcec0]
c001b59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5af:	8b 14 85 c0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce40]
c001b5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5b9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5cb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b5d1:	89 c6                	mov    esi,eax
c001b5d3:	81 e6 ff 00 00 00    	and    esi,0xff
c001b5d9:	89 d0                	mov    eax,edx
c001b5db:	ba 00 00 00 00       	mov    edx,0x0
c001b5e0:	89 c7                	mov    edi,eax
c001b5e2:	83 e7 ff             	and    edi,0xffffffff
c001b5e5:	89 f9                	mov    ecx,edi
c001b5e7:	89 d0                	mov    eax,edx
c001b5e9:	25 ff 00 00 00       	and    eax,0xff
c001b5ee:	89 c3                	mov    ebx,eax
c001b5f0:	89 c8                	mov    eax,ecx
c001b5f2:	89 da                	mov    edx,ebx
c001b5f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b5f7:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b5fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b5fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b602:	83 e0 00             	and    eax,0x0
c001b605:	09 d0                	or     eax,edx
c001b607:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b614:	8d 50 01             	lea    edx,[eax+0x1]
c001b617:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b61a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b620:	31 d2                	xor    edx,edx
c001b622:	88 c2                	mov    dl,al
c001b624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b627:	83 c2 08             	add    edx,0x8
c001b62a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b62e:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b634:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b63a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b63e:	6a 01                	push   0x1
c001b640:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b643:	e8 08 ff ff ff       	call   c001b550 <IOAPIC::read(int)>
c001b648:	83 c4 08             	add    esp,0x8
c001b64b:	c1 f8 10             	sar    eax,0x10
c001b64e:	25 ff 00 00 00       	and    eax,0xff
c001b653:	8d 50 01             	lea    edx,[eax+0x1]
c001b656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b659:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b65f:	b8 00 00 00 00       	mov    eax,0x0
c001b664:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b667:	5b                   	pop    ebx
c001b668:	5e                   	pop    esi
c001b669:	5f                   	pop    edi
c001b66a:	5d                   	pop    ebp
c001b66b:	c3                   	ret    

c001b66c <IOAPIC::write(int, int)>:
c001b66c:	55                   	push   ebp
c001b66d:	89 e5                	mov    ebp,esp
c001b66f:	83 ec 10             	sub    esp,0x10
c001b672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b675:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b67b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b67e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b681:	31 d2                	xor    edx,edx
c001b683:	88 c2                	mov    dl,al
c001b685:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b688:	89 10                	mov    DWORD PTR [eax],edx
c001b68a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b68d:	8d 50 10             	lea    edx,[eax+0x10]
c001b690:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b693:	89 02                	mov    DWORD PTR [edx],eax
c001b695:	90                   	nop
c001b696:	c9                   	leave  
c001b697:	c3                   	ret    

c001b698 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b698:	55                   	push   ebp
c001b699:	89 e5                	mov    ebp,esp
c001b69b:	53                   	push   ebx
c001b69c:	83 ec 2c             	sub    esp,0x2c
c001b69f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6a2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b6a5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b6a8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b6ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b6ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6b1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6b4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b6b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b6ba:	88 d8                	mov    al,bl
c001b6bc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b6bf:	88 c8                	mov    al,cl
c001b6c1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b6c4:	88 d0                	mov    al,dl
c001b6c6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b6c9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b6cc:	25 ff 00 00 00       	and    eax,0xff
c001b6d1:	83 c0 08             	add    eax,0x8
c001b6d4:	01 c0                	add    eax,eax
c001b6d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b6d9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b6dc:	25 ff 00 00 00       	and    eax,0xff
c001b6e1:	83 c0 08             	add    eax,0x8
c001b6e4:	01 c0                	add    eax,eax
c001b6e6:	40                   	inc    eax
c001b6e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b6ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b6ed:	50                   	push   eax
c001b6ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6f1:	e8 5a fe ff ff       	call   c001b550 <IOAPIC::read(int)>
c001b6f6:	83 c4 08             	add    esp,0x8
c001b6f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b6fc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b703:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b706:	c1 e0 18             	shl    eax,0x18
c001b709:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b70c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b70f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b712:	52                   	push   edx
c001b713:	50                   	push   eax
c001b714:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b717:	e8 50 ff ff ff       	call   c001b66c <IOAPIC::write(int, int)>
c001b71c:	83 c4 0c             	add    esp,0xc
c001b71f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b722:	50                   	push   eax
c001b723:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b726:	e8 25 fe ff ff       	call   c001b550 <IOAPIC::read(int)>
c001b72b:	83 c4 08             	add    esp,0x8
c001b72e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b731:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b738:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b73f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b746:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b74a:	74 09                	je     c001b755 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b74c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b753:	eb 07                	jmp    c001b75c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b755:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b75c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b760:	74 09                	je     c001b76b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b762:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b769:	eb 07                	jmp    c001b772 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b76b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b772:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b779:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b77c:	25 ff 00 00 00       	and    eax,0xff
c001b781:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b784:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b787:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b78a:	52                   	push   edx
c001b78b:	50                   	push   eax
c001b78c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b78f:	e8 d8 fe ff ff       	call   c001b66c <IOAPIC::write(int, int)>
c001b794:	83 c4 0c             	add    esp,0xc
c001b797:	90                   	nop
c001b798:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b79b:	c9                   	leave  
c001b79c:	c3                   	ret    
c001b79d:	66 90                	xchg   ax,ax
c001b79f:	90                   	nop

c001b7a0 <APICTimer::close(int, int, void*)>:
c001b7a0:	b8 00 00 00 00       	mov    eax,0x0
c001b7a5:	c3                   	ret    
c001b7a6:	66 90                	xchg   ax,ax

c001b7a8 <apicTimerHandler(regs*, void*)>:
c001b7a8:	83 ec 0c             	sub    esp,0xc
c001b7ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7af:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7b1:	b8 10 27 00 00       	mov    eax,0x2710
c001b7b6:	ba 00 00 00 00       	mov    edx,0x0
c001b7bb:	f7 f1                	div    ecx
c001b7bd:	83 ec 0c             	sub    esp,0xc
c001b7c0:	50                   	push   eax
c001b7c1:	e8 fa 20 ff ff       	call   c000d8c0 <timerHandler(unsigned int)>
c001b7c6:	83 c4 10             	add    esp,0x10
c001b7c9:	90                   	nop
c001b7ca:	83 c4 0c             	add    esp,0xc
c001b7cd:	c3                   	ret    
c001b7ce:	66 90                	xchg   ax,ax

c001b7d0 <APICTimer::open(int, int, void*)>:
c001b7d0:	83 ec 0c             	sub    esp,0xc
c001b7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7d9:	83 c0 24             	add    eax,0x24
c001b7dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7de:	83 ec 08             	sub    esp,0x8
c001b7e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7e9:	ff d0                	call   eax
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b800:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b804:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b80a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b80e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b814:	83 ec 0c             	sub    esp,0xc
c001b817:	51                   	push   ecx
c001b818:	6a 01                	push   0x1
c001b81a:	68 a8 b7 01 c0       	push   0xc001b7a8
c001b81f:	52                   	push   edx
c001b820:	50                   	push   eax
c001b821:	e8 b2 07 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b826:	83 c4 20             	add    esp,0x20
c001b829:	89 c2                	mov    edx,eax
c001b82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b835:	b8 00 00 00 00       	mov    eax,0x0
c001b83a:	83 c4 0c             	add    esp,0xc
c001b83d:	c3                   	ret    
c001b83e:	66 90                	xchg   ax,ax

c001b840 <APICTimer::write(int)>:
c001b840:	83 ec 0c             	sub    esp,0xc
c001b843:	83 ec 0c             	sub    esp,0xc
c001b846:	68 08 f5 01 c0       	push   0xc001f508
c001b84b:	e8 eb 4e ff ff       	call   c001073b <Krnl::panic(char const*)>
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b857:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b85b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b861:	90                   	nop
c001b862:	83 c4 0c             	add    esp,0xc
c001b865:	c3                   	ret    
c001b866:	66 90                	xchg   ax,ax

c001b868 <APICTimer::APICTimer()>:
c001b868:	83 ec 0c             	sub    esp,0xc
c001b86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86f:	83 ec 08             	sub    esp,0x8
c001b872:	68 18 f5 01 c0       	push   0xc001f518
c001b877:	50                   	push   eax
c001b878:	e8 77 1f ff ff       	call   c000d7f4 <Timer::Timer(char const*)>
c001b87d:	83 c4 10             	add    esp,0x10
c001b880:	ba 2c f5 01 c0       	mov    edx,0xc001f52c
c001b885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b889:	89 10                	mov    DWORD PTR [eax],edx
c001b88b:	90                   	nop
c001b88c:	83 c4 0c             	add    esp,0xc
c001b88f:	c3                   	ret    

c001b890 <PIT::write(int)>:
c001b890:	83 ec 10             	sub    esp,0x10
c001b893:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b89b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8a5:	a3 44 47 02 c0       	mov    ds:0xc0024744,eax
c001b8aa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b8af:	99                   	cdq    
c001b8b0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b8b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8b8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b8bf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b8c4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b8c8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b8cd:	ee                   	out    dx,al
c001b8ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8d2:	25 ff 00 00 00       	and    eax,0xff
c001b8d7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b8de:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b8e2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b8e6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b8eb:	ee                   	out    dx,al
c001b8ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f0:	c1 f8 08             	sar    eax,0x8
c001b8f3:	25 ff 00 00 00       	and    eax,0xff
c001b8f8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b8ff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b903:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b907:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b90c:	ee                   	out    dx,al
c001b90d:	90                   	nop
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	c3                   	ret    
c001b912:	66 90                	xchg   ax,ax

c001b914 <pitHandler(regs*, void*)>:
c001b914:	83 ec 0c             	sub    esp,0xc
c001b917:	8b 0d 44 47 02 c0    	mov    ecx,DWORD PTR ds:0xc0024744
c001b91d:	b8 10 27 00 00       	mov    eax,0x2710
c001b922:	99                   	cdq    
c001b923:	f7 f9                	idiv   ecx
c001b925:	83 ec 0c             	sub    esp,0xc
c001b928:	50                   	push   eax
c001b929:	e8 92 1f ff ff       	call   c000d8c0 <timerHandler(unsigned int)>
c001b92e:	83 c4 10             	add    esp,0x10
c001b931:	90                   	nop
c001b932:	83 c4 0c             	add    esp,0xc
c001b935:	c3                   	ret    
c001b936:	66 90                	xchg   ax,ax

c001b938 <PIT::open(int, int, void*)>:
c001b938:	83 ec 0c             	sub    esp,0xc
c001b93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b941:	83 c0 24             	add    eax,0x24
c001b944:	8b 00                	mov    eax,DWORD PTR [eax]
c001b946:	83 ec 08             	sub    esp,0x8
c001b949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b951:	ff d0                	call   eax
c001b953:	83 c4 10             	add    esp,0x10
c001b956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	6a 00                	push   0x0
c001b95f:	6a 01                	push   0x1
c001b961:	68 14 b9 01 c0       	push   0xc001b914
c001b966:	6a 00                	push   0x0
c001b968:	50                   	push   eax
c001b969:	e8 6a 06 ff ff       	call   c000bfd8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b96e:	83 c4 20             	add    esp,0x20
c001b971:	89 c2                	mov    edx,eax
c001b973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b977:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b97d:	b8 00 00 00 00       	mov    eax,0x0
c001b982:	83 c4 0c             	add    esp,0xc
c001b985:	c3                   	ret    
c001b986:	66 90                	xchg   ax,ax

c001b988 <PIT::close(int, int, void*)>:
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99d:	6a 01                	push   0x1
c001b99f:	68 14 b9 01 c0       	push   0xc001b914
c001b9a4:	6a 00                	push   0x0
c001b9a6:	50                   	push   eax
c001b9a7:	e8 62 06 ff ff       	call   c000c00e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b9ac:	83 c4 10             	add    esp,0x10
c001b9af:	b8 00 00 00 00       	mov    eax,0x0
c001b9b4:	83 c4 0c             	add    esp,0xc
c001b9b7:	c3                   	ret    

c001b9b8 <PIT::PIT()>:
c001b9b8:	83 ec 0c             	sub    esp,0xc
c001b9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bf:	83 ec 08             	sub    esp,0x8
c001b9c2:	68 54 f5 01 c0       	push   0xc001f554
c001b9c7:	50                   	push   eax
c001b9c8:	e8 27 1e ff ff       	call   c000d7f4 <Timer::Timer(char const*)>
c001b9cd:	83 c4 10             	add    esp,0x10
c001b9d0:	ba 7c f5 01 c0       	mov    edx,0xc001f57c
c001b9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d9:	89 10                	mov    DWORD PTR [eax],edx
c001b9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9e5:	31 d2                	xor    edx,edx
c001b9e7:	88 c2                	mov    dl,al
c001b9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ed:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9fe:	31 d2                	xor    edx,edx
c001ba00:	88 c2                	mov    dl,al
c001ba02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba06:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba15:	8d 50 01             	lea    edx,[eax+0x1]
c001ba18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba1c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba22:	31 d2                	xor    edx,edx
c001ba24:	88 c2                	mov    dl,al
c001ba26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba2e:	83 e1 3f             	and    ecx,0x3f
c001ba31:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba35:	90                   	nop
c001ba36:	83 c4 0c             	add    esp,0xc
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax
c001ba3c:	66 90                	xchg   ax,ax
c001ba3e:	66 90                	xchg   ax,ax

c001ba40 <avxDetect>:
c001ba40:	b8 01 00 00 00       	mov    eax,0x1
c001ba45:	0f a2                	cpuid  
c001ba47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ba4d:	74 15                	je     c001ba64 <avxDetect.noAVX>
c001ba4f:	b8 01 00 00 00       	mov    eax,0x1
c001ba54:	0f a2                	cpuid  
c001ba56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ba5c:	74 06                	je     c001ba64 <avxDetect.noAVX>
c001ba5e:	b8 01 00 00 00       	mov    eax,0x1
c001ba63:	c3                   	ret    

c001ba64 <avxDetect.noAVX>:
c001ba64:	b8 00 00 00 00       	mov    eax,0x0
c001ba69:	c3                   	ret    

c001ba6a <avxSave>:
c001ba6a:	53                   	push   ebx
c001ba6b:	52                   	push   edx
c001ba6c:	31 c0                	xor    eax,eax
c001ba6e:	48                   	dec    eax
c001ba6f:	89 c2                	mov    edx,eax
c001ba71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ba75:	0f ae 23             	xsave  [ebx]
c001ba78:	5a                   	pop    edx
c001ba79:	5b                   	pop    ebx
c001ba7a:	c3                   	ret    

c001ba7b <avxLoad>:
c001ba7b:	53                   	push   ebx
c001ba7c:	52                   	push   edx
c001ba7d:	31 c0                	xor    eax,eax
c001ba7f:	48                   	dec    eax
c001ba80:	89 c2                	mov    edx,eax
c001ba82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ba86:	0f ae 2b             	xrstor [ebx]
c001ba89:	5a                   	pop    edx
c001ba8a:	5b                   	pop    ebx
c001ba8b:	c3                   	ret    

c001ba8c <avxInit>:
c001ba8c:	e8 57 02 00 00       	call   c001bce8 <sseInit>
c001ba91:	50                   	push   eax
c001ba92:	51                   	push   ecx
c001ba93:	0f 20 e0             	mov    eax,cr4
c001ba96:	0d 00 00 04 00       	or     eax,0x40000
c001ba9b:	0f 22 e0             	mov    cr4,eax
c001ba9e:	31 c9                	xor    ecx,ecx
c001baa0:	0f 01 d0             	xgetbv 
c001baa3:	0d 07 00 00 00       	or     eax,0x7
c001baa8:	0f 01 d1             	xsetbv 
c001baab:	59                   	pop    ecx
c001baac:	58                   	pop    eax
c001baad:	c3                   	ret    

c001baae <avxClose>:
c001baae:	c3                   	ret    

c001baaf <wouldSheSayYes>:
c001baaf:	c3                   	ret    
c001bab0:	49                   	dec    ecx
c001bab1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bab5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bab9:	75 20                	jne    c001badb <isr0+0xb>
c001babb:	4e                   	dec    esi
c001babc:	79 61                	jns    c001bb1f <isr7+0x3>
c001babe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bac3:	66 90                	xchg   ax,ax
c001bac5:	66 90                	xchg   ax,ax
c001bac7:	66 90                	xchg   ax,ax
c001bac9:	66 90                	xchg   ax,ax
c001bacb:	66 90                	xchg   ax,ax
c001bacd:	66 90                	xchg   ax,ax
c001bacf:	90                   	nop

c001bad0 <isr0>:
c001bad0:	fa                   	cli    
c001bad1:	68 00 00 00 00       	push   0x0
c001bad6:	68 00 00 00 00       	push   0x0
c001badb:	e9 44 01 00 00       	jmp    c001bc24 <int_common_stub>

c001bae0 <isr1>:
c001bae0:	fa                   	cli    
c001bae1:	6a 00                	push   0x0
c001bae3:	6a 01                	push   0x1
c001bae5:	e9 3a 01 00 00       	jmp    c001bc24 <int_common_stub>

c001baea <isr2>:
c001baea:	fa                   	cli    
c001baeb:	6a 00                	push   0x0
c001baed:	6a 02                	push   0x2
c001baef:	e9 30 01 00 00       	jmp    c001bc24 <int_common_stub>

c001baf4 <isr3>:
c001baf4:	fa                   	cli    
c001baf5:	6a 00                	push   0x0
c001baf7:	6a 03                	push   0x3
c001baf9:	e9 26 01 00 00       	jmp    c001bc24 <int_common_stub>

c001bafe <isr4>:
c001bafe:	fa                   	cli    
c001baff:	6a 00                	push   0x0
c001bb01:	6a 04                	push   0x4
c001bb03:	e9 1c 01 00 00       	jmp    c001bc24 <int_common_stub>

c001bb08 <isr5>:
c001bb08:	fa                   	cli    
c001bb09:	6a 00                	push   0x0
c001bb0b:	6a 05                	push   0x5
c001bb0d:	e9 12 01 00 00       	jmp    c001bc24 <int_common_stub>

c001bb12 <isr6>:
c001bb12:	fa                   	cli    
c001bb13:	6a 00                	push   0x0
c001bb15:	6a 06                	push   0x6
c001bb17:	e9 08 01 00 00       	jmp    c001bc24 <int_common_stub>

c001bb1c <isr7>:
c001bb1c:	fa                   	cli    
c001bb1d:	6a 00                	push   0x0
c001bb1f:	6a 07                	push   0x7
c001bb21:	e9 fe 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb26 <isr8>:
c001bb26:	fa                   	cli    
c001bb27:	6a 08                	push   0x8
c001bb29:	e9 f6 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb2e <isr9>:
c001bb2e:	fa                   	cli    
c001bb2f:	6a 00                	push   0x0
c001bb31:	6a 09                	push   0x9
c001bb33:	e9 ec 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb38 <isr10>:
c001bb38:	fa                   	cli    
c001bb39:	6a 0a                	push   0xa
c001bb3b:	e9 e4 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb40 <isr11>:
c001bb40:	fa                   	cli    
c001bb41:	6a 0b                	push   0xb
c001bb43:	e9 dc 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb48 <isr12>:
c001bb48:	fa                   	cli    
c001bb49:	6a 0c                	push   0xc
c001bb4b:	e9 d4 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb50 <isr13>:
c001bb50:	fa                   	cli    
c001bb51:	6a 0d                	push   0xd
c001bb53:	e9 cc 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb58 <isr14>:
c001bb58:	fa                   	cli    
c001bb59:	6a 0e                	push   0xe
c001bb5b:	e9 c4 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb60 <isr15>:
c001bb60:	fa                   	cli    
c001bb61:	6a 00                	push   0x0
c001bb63:	6a 0f                	push   0xf
c001bb65:	e9 ba 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb6a <isr16>:
c001bb6a:	fa                   	cli    
c001bb6b:	6a 00                	push   0x0
c001bb6d:	6a 10                	push   0x10
c001bb6f:	e9 b0 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb74 <isr17>:
c001bb74:	fa                   	cli    
c001bb75:	6a 00                	push   0x0
c001bb77:	6a 11                	push   0x11
c001bb79:	e9 a6 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb7e <isr18>:
c001bb7e:	fa                   	cli    
c001bb7f:	6a 00                	push   0x0
c001bb81:	6a 12                	push   0x12
c001bb83:	e9 9c 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb88 <irq3>:
c001bb88:	fa                   	cli    
c001bb89:	6a 00                	push   0x0
c001bb8b:	6a 23                	push   0x23
c001bb8d:	e9 92 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb92 <irq4>:
c001bb92:	fa                   	cli    
c001bb93:	6a 00                	push   0x0
c001bb95:	6a 24                	push   0x24
c001bb97:	e9 88 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bb9c <irq5>:
c001bb9c:	fa                   	cli    
c001bb9d:	6a 00                	push   0x0
c001bb9f:	6a 25                	push   0x25
c001bba1:	e9 7e 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bba6 <irq6>:
c001bba6:	fa                   	cli    
c001bba7:	6a 00                	push   0x0
c001bba9:	6a 26                	push   0x26
c001bbab:	e9 74 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbb0 <irq7>:
c001bbb0:	fa                   	cli    
c001bbb1:	6a 00                	push   0x0
c001bbb3:	6a 27                	push   0x27
c001bbb5:	e9 6a 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbba <irq8>:
c001bbba:	fa                   	cli    
c001bbbb:	6a 00                	push   0x0
c001bbbd:	6a 28                	push   0x28
c001bbbf:	e9 60 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbc4 <irq9>:
c001bbc4:	fa                   	cli    
c001bbc5:	6a 00                	push   0x0
c001bbc7:	6a 29                	push   0x29
c001bbc9:	e9 56 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbce <irq10>:
c001bbce:	fa                   	cli    
c001bbcf:	6a 00                	push   0x0
c001bbd1:	6a 2a                	push   0x2a
c001bbd3:	e9 4c 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbd8 <irq11>:
c001bbd8:	fa                   	cli    
c001bbd9:	6a 00                	push   0x0
c001bbdb:	6a 2b                	push   0x2b
c001bbdd:	e9 42 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbe2 <irq12>:
c001bbe2:	fa                   	cli    
c001bbe3:	6a 00                	push   0x0
c001bbe5:	6a 2c                	push   0x2c
c001bbe7:	e9 38 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbec <irq13>:
c001bbec:	fa                   	cli    
c001bbed:	6a 00                	push   0x0
c001bbef:	6a 2d                	push   0x2d
c001bbf1:	e9 2e 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bbf6 <irq14>:
c001bbf6:	fa                   	cli    
c001bbf7:	6a 00                	push   0x0
c001bbf9:	6a 2e                	push   0x2e
c001bbfb:	e9 24 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bc00 <irq15>:
c001bc00:	fa                   	cli    
c001bc01:	6a 00                	push   0x0
c001bc03:	6a 2f                	push   0x2f
c001bc05:	e9 1a 00 00 00       	jmp    c001bc24 <int_common_stub>

c001bc0a <irq1>:
c001bc0a:	fa                   	cli    
c001bc0b:	6a 00                	push   0x0
c001bc0d:	6a 21                	push   0x21
c001bc0f:	eb 13                	jmp    c001bc24 <int_common_stub>

c001bc11 <irq2>:
c001bc11:	fa                   	cli    
c001bc12:	6a 00                	push   0x0
c001bc14:	6a 22                	push   0x22
c001bc16:	eb 0c                	jmp    c001bc24 <int_common_stub>

c001bc18 <isr96>:
c001bc18:	6a 00                	push   0x0
c001bc1a:	6a 60                	push   0x60
c001bc1c:	fb                   	sti    
c001bc1d:	eb 05                	jmp    c001bc24 <int_common_stub>

c001bc1f <irq0>:
c001bc1f:	fa                   	cli    
c001bc20:	6a 00                	push   0x0
c001bc22:	6a 20                	push   0x20

c001bc24 <int_common_stub>:
c001bc24:	60                   	pusha  
c001bc25:	1e                   	push   ds
c001bc26:	06                   	push   es
c001bc27:	0f a0                	push   fs
c001bc29:	0f a8                	push   gs
c001bc2b:	66 b8 10 00          	mov    ax,0x10
c001bc2f:	66 8e d8             	mov    ds,ax
c001bc32:	66 8e c0             	mov    es,ax
c001bc35:	66 8e e0             	mov    fs,ax
c001bc38:	66 8e e8             	mov    gs,ax
c001bc3b:	54                   	push   esp
c001bc3c:	fc                   	cld    
c001bc3d:	e8 96 08 ff ff       	call   c000c4d8 <int_handler>
c001bc42:	81 c4 04 00 00 00    	add    esp,0x4
c001bc48:	0f a9                	pop    gs
c001bc4a:	0f a1                	pop    fs
c001bc4c:	07                   	pop    es
c001bc4d:	1f                   	pop    ds
c001bc4e:	61                   	popa   
c001bc4f:	81 c4 08 00 00 00    	add    esp,0x8
c001bc55:	cf                   	iret   

c001bc56 <irq16>:
c001bc56:	fa                   	cli    
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 30                	push   0x30
c001bc5b:	e9 c4 ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc60 <irq17>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 31                	push   0x31
c001bc65:	e9 ba ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc6a <irq18>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 32                	push   0x32
c001bc6f:	e9 b0 ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc74 <irq19>:
c001bc74:	fa                   	cli    
c001bc75:	6a 00                	push   0x0
c001bc77:	6a 33                	push   0x33
c001bc79:	e9 a6 ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc7e <irq20>:
c001bc7e:	fa                   	cli    
c001bc7f:	6a 00                	push   0x0
c001bc81:	6a 34                	push   0x34
c001bc83:	e9 9c ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc88 <irq21>:
c001bc88:	fa                   	cli    
c001bc89:	6a 00                	push   0x0
c001bc8b:	6a 35                	push   0x35
c001bc8d:	e9 92 ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc92 <irq22>:
c001bc92:	fa                   	cli    
c001bc93:	6a 00                	push   0x0
c001bc95:	6a 36                	push   0x36
c001bc97:	e9 88 ff ff ff       	jmp    c001bc24 <int_common_stub>

c001bc9c <irq23>:
c001bc9c:	fa                   	cli    
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 37                	push   0x37
c001bca1:	e9 7e ff ff ff       	jmp    c001bc24 <int_common_stub>
c001bca6:	66 90                	xchg   ax,ax
c001bca8:	66 90                	xchg   ax,ax
c001bcaa:	66 90                	xchg   ax,ax
c001bcac:	66 90                	xchg   ax,ax
c001bcae:	66 90                	xchg   ax,ax

c001bcb0 <i386GetRDRAND>:
c001bcb0:	b9 64 00 00 00       	mov    ecx,0x64

c001bcb5 <retry>:
c001bcb5:	0f c7 f0             	rdrand eax
c001bcb8:	72 05                	jb     c001bcbf <retry.done>
c001bcba:	e2 f9                	loop   c001bcb5 <retry>

c001bcbc <retry.fail>:
c001bcbc:	31 c0                	xor    eax,eax
c001bcbe:	c3                   	ret    

c001bcbf <retry.done>:
c001bcbf:	c3                   	ret    

c001bcc0 <absolutelyNoChanceInHell>:
c001bcc0:	b8 01 00 00 00       	mov    eax,0x1
c001bcc5:	0f a2                	cpuid  
c001bcc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bccd:	74 06                	je     c001bcd5 <sseDetect.noSSE>
c001bccf:	b8 01 00 00 00       	mov    eax,0x1
c001bcd4:	c3                   	ret    

c001bcd5 <sseDetect.noSSE>:
c001bcd5:	31 c0                	xor    eax,eax
c001bcd7:	c3                   	ret    

c001bcd8 <sseSave>:
c001bcd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcdc:	0f ae 00             	fxsave [eax]
c001bcdf:	c3                   	ret    

c001bce0 <sseLoad>:
c001bce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce4:	0f ae 08             	fxrstor [eax]
c001bce7:	c3                   	ret    

c001bce8 <sseInit>:
c001bce8:	e8 42 00 00 00       	call   c001bd2f <x87Init>
c001bced:	0f 20 e0             	mov    eax,cr4
c001bcf0:	66 0d 00 06          	or     ax,0x600
c001bcf4:	0f 22 e0             	mov    cr4,eax
c001bcf7:	c3                   	ret    

c001bcf8 <sseClose>:
c001bcf8:	c3                   	ret    
c001bcf9:	66 90                	xchg   ax,ax
c001bcfb:	66 90                	xchg   ax,ax
c001bcfd:	66 90                	xchg   ax,ax
c001bcff:	90                   	nop

c001bd00 <value_37F>:
c001bd00:	7f 03                	jg     c001bd05 <value_37A+0x1>

c001bd02 <value_37E>:
c001bd02:	7e 03                	jle    c001bd07 <x87Detect+0x1>

c001bd04 <value_37A>:
c001bd04:	7a 03                	jp     c001bd09 <x87Detect+0x3>

c001bd06 <x87Detect>:
c001bd06:	b8 01 00 00 00       	mov    eax,0x1
c001bd0b:	0f a2                	cpuid  
c001bd0d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bd13:	74 06                	je     c001bd1b <x87Detect.nox87>
c001bd15:	b8 01 00 00 00       	mov    eax,0x1
c001bd1a:	c3                   	ret    

c001bd1b <x87Detect.nox87>:
c001bd1b:	b8 00 00 00 00       	mov    eax,0x0
c001bd20:	c3                   	ret    

c001bd21 <x87Save>:
c001bd21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd25:	dd 30                	fnsave [eax]
c001bd27:	c3                   	ret    

c001bd28 <x87Load>:
c001bd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd2c:	dd 20                	frstor [eax]
c001bd2e:	c3                   	ret    

c001bd2f <x87Init>:
c001bd2f:	0f 20 c0             	mov    eax,cr0
c001bd32:	66 25 fb ff          	and    ax,0xfffb
c001bd36:	66 0d 22 00          	or     ax,0x22
c001bd3a:	0f 22 c0             	mov    cr0,eax
c001bd3d:	db e3                	fninit 
c001bd3f:	0f 06                	clts   
c001bd41:	d9 2d 04 bd 01 c0    	fldcw  WORD PTR ds:0xc001bd04
c001bd47:	c3                   	ret    

c001bd48 <x87Close>:
c001bd48:	c3                   	ret    
c001bd49:	66 90                	xchg   ax,ax
c001bd4b:	90                   	nop

c001bd4c <__do_global_ctors_aux>:
c001bd4c:	a1 fc cc 01 c0       	mov    eax,ds:0xc001ccfc
c001bd51:	83 f8 ff             	cmp    eax,0xffffffff
c001bd54:	74 1a                	je     c001bd70 <__do_global_ctors_aux+0x24>
c001bd56:	55                   	push   ebp
c001bd57:	89 e5                	mov    ebp,esp
c001bd59:	53                   	push   ebx
c001bd5a:	52                   	push   edx
c001bd5b:	bb fc cc 01 c0       	mov    ebx,0xc001ccfc
c001bd60:	ff d0                	call   eax
c001bd62:	83 eb 04             	sub    ebx,0x4
c001bd65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd67:	83 f8 ff             	cmp    eax,0xffffffff
c001bd6a:	75 f4                	jne    c001bd60 <__do_global_ctors_aux+0x14>
c001bd6c:	58                   	pop    eax
c001bd6d:	5b                   	pop    ebx
c001bd6e:	5d                   	pop    ebp
c001bd6f:	c3                   	ret    
c001bd70:	c3                   	ret    
c001bd71:	66 90                	xchg   ax,ax
c001bd73:	90                   	nop

c001bd74 <__divdi3>:
c001bd74:	55                   	push   ebp
c001bd75:	57                   	push   edi
c001bd76:	56                   	push   esi
c001bd77:	53                   	push   ebx
c001bd78:	83 ec 1c             	sub    esp,0x1c
c001bd7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bd86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bd8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bd92:	85 db                	test   ebx,ebx
c001bd94:	0f 88 8e 00 00 00    	js     c001be28 <__divdi3+0xb4>
c001bd9a:	89 dd                	mov    ebp,ebx
c001bd9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bda4:	89 d3                	mov    ebx,edx
c001bda6:	85 d2                	test   edx,edx
c001bda8:	79 0d                	jns    c001bdb7 <__divdi3+0x43>
c001bdaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bdae:	f7 d8                	neg    eax
c001bdb0:	83 d2 00             	adc    edx,0x0
c001bdb3:	f7 da                	neg    edx
c001bdb5:	89 d3                	mov    ebx,edx
c001bdb7:	89 c7                	mov    edi,eax
c001bdb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bdbc:	85 db                	test   ebx,ebx
c001bdbe:	75 48                	jne    c001be08 <__divdi3+0x94>
c001bdc0:	39 ef                	cmp    edi,ebp
c001bdc2:	76 24                	jbe    c001bde8 <__divdi3+0x74>
c001bdc4:	89 ea                	mov    edx,ebp
c001bdc6:	f7 f7                	div    edi
c001bdc8:	89 c1                	mov    ecx,eax
c001bdca:	31 f6                	xor    esi,esi
c001bdcc:	89 c8                	mov    eax,ecx
c001bdce:	89 f2                	mov    edx,esi
c001bdd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bdd4:	85 c9                	test   ecx,ecx
c001bdd6:	74 07                	je     c001bddf <__divdi3+0x6b>
c001bdd8:	f7 d8                	neg    eax
c001bdda:	83 d2 00             	adc    edx,0x0
c001bddd:	f7 da                	neg    edx
c001bddf:	83 c4 1c             	add    esp,0x1c
c001bde2:	5b                   	pop    ebx
c001bde3:	5e                   	pop    esi
c001bde4:	5f                   	pop    edi
c001bde5:	5d                   	pop    ebp
c001bde6:	c3                   	ret    
c001bde7:	90                   	nop
c001bde8:	85 ff                	test   edi,edi
c001bdea:	75 0b                	jne    c001bdf7 <__divdi3+0x83>
c001bdec:	b8 01 00 00 00       	mov    eax,0x1
c001bdf1:	31 d2                	xor    edx,edx
c001bdf3:	f7 f3                	div    ebx
c001bdf5:	89 c7                	mov    edi,eax
c001bdf7:	31 d2                	xor    edx,edx
c001bdf9:	89 e8                	mov    eax,ebp
c001bdfb:	f7 f7                	div    edi
c001bdfd:	89 c6                	mov    esi,eax
c001bdff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be02:	f7 f7                	div    edi
c001be04:	89 c1                	mov    ecx,eax
c001be06:	eb c4                	jmp    c001bdcc <__divdi3+0x58>
c001be08:	39 eb                	cmp    ebx,ebp
c001be0a:	77 3c                	ja     c001be48 <__divdi3+0xd4>
c001be0c:	0f bd f3             	bsr    esi,ebx
c001be0f:	83 f6 1f             	xor    esi,0x1f
c001be12:	75 40                	jne    c001be54 <__divdi3+0xe0>
c001be14:	39 eb                	cmp    ebx,ebp
c001be16:	72 09                	jb     c001be21 <__divdi3+0xad>
c001be18:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001be1b:	0f 87 97 00 00 00    	ja     c001beb8 <__divdi3+0x144>
c001be21:	b9 01 00 00 00       	mov    ecx,0x1
c001be26:	eb a4                	jmp    c001bdcc <__divdi3+0x58>
c001be28:	f7 d9                	neg    ecx
c001be2a:	83 d3 00             	adc    ebx,0x0
c001be2d:	f7 db                	neg    ebx
c001be2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be32:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be36:	89 dd                	mov    ebp,ebx
c001be38:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001be40:	e9 5f ff ff ff       	jmp    c001bda4 <__divdi3+0x30>
c001be45:	8d 76 00             	lea    esi,[esi+0x0]
c001be48:	31 f6                	xor    esi,esi
c001be4a:	31 c9                	xor    ecx,ecx
c001be4c:	e9 7b ff ff ff       	jmp    c001bdcc <__divdi3+0x58>
c001be51:	8d 76 00             	lea    esi,[esi+0x0]
c001be54:	b8 20 00 00 00       	mov    eax,0x20
c001be59:	29 f0                	sub    eax,esi
c001be5b:	89 f1                	mov    ecx,esi
c001be5d:	d3 e3                	shl    ebx,cl
c001be5f:	89 fa                	mov    edx,edi
c001be61:	88 c1                	mov    cl,al
c001be63:	d3 ea                	shr    edx,cl
c001be65:	09 da                	or     edx,ebx
c001be67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be6b:	89 f1                	mov    ecx,esi
c001be6d:	d3 e7                	shl    edi,cl
c001be6f:	89 eb                	mov    ebx,ebp
c001be71:	88 c1                	mov    cl,al
c001be73:	d3 eb                	shr    ebx,cl
c001be75:	89 f1                	mov    ecx,esi
c001be77:	d3 e5                	shl    ebp,cl
c001be79:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001be7c:	88 c1                	mov    cl,al
c001be7e:	d3 ea                	shr    edx,cl
c001be80:	09 d5                	or     ebp,edx
c001be82:	89 e8                	mov    eax,ebp
c001be84:	89 da                	mov    edx,ebx
c001be86:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001be8a:	89 d3                	mov    ebx,edx
c001be8c:	89 c5                	mov    ebp,eax
c001be8e:	f7 e7                	mul    edi
c001be90:	39 d3                	cmp    ebx,edx
c001be92:	72 18                	jb     c001beac <__divdi3+0x138>
c001be94:	74 0a                	je     c001bea0 <__divdi3+0x12c>
c001be96:	89 e9                	mov    ecx,ebp
c001be98:	31 f6                	xor    esi,esi
c001be9a:	e9 2d ff ff ff       	jmp    c001bdcc <__divdi3+0x58>
c001be9f:	90                   	nop
c001bea0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bea3:	89 f1                	mov    ecx,esi
c001bea5:	d3 e7                	shl    edi,cl
c001bea7:	39 c7                	cmp    edi,eax
c001bea9:	73 eb                	jae    c001be96 <__divdi3+0x122>
c001beab:	90                   	nop
c001beac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001beaf:	31 f6                	xor    esi,esi
c001beb1:	e9 16 ff ff ff       	jmp    c001bdcc <__divdi3+0x58>
c001beb6:	66 90                	xchg   ax,ax
c001beb8:	31 c9                	xor    ecx,ecx
c001beba:	e9 0d ff ff ff       	jmp    c001bdcc <__divdi3+0x58>
c001bebf:	90                   	nop

c001bec0 <__moddi3>:
c001bec0:	55                   	push   ebp
c001bec1:	57                   	push   edi
c001bec2:	56                   	push   esi
c001bec3:	53                   	push   ebx
c001bec4:	83 ec 2c             	sub    esp,0x2c
c001bec7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001becb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001becf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bed3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bed7:	85 db                	test   ebx,ebx
c001bed9:	0f 88 85 00 00 00    	js     c001bf64 <__moddi3+0xa4>
c001bedf:	89 de                	mov    esi,ebx
c001bee1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bee9:	89 d7                	mov    edi,edx
c001beeb:	85 d2                	test   edx,edx
c001beed:	79 09                	jns    c001bef8 <__moddi3+0x38>
c001beef:	f7 d8                	neg    eax
c001bef1:	83 d2 00             	adc    edx,0x0
c001bef4:	f7 da                	neg    edx
c001bef6:	89 d7                	mov    edi,edx
c001bef8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001befc:	89 cd                	mov    ebp,ecx
c001befe:	85 ff                	test   edi,edi
c001bf00:	75 52                	jne    c001bf54 <__moddi3+0x94>
c001bf02:	89 c3                	mov    ebx,eax
c001bf04:	39 f0                	cmp    eax,esi
c001bf06:	76 24                	jbe    c001bf2c <__moddi3+0x6c>
c001bf08:	89 c8                	mov    eax,ecx
c001bf0a:	89 f2                	mov    edx,esi
c001bf0c:	f7 f3                	div    ebx
c001bf0e:	89 d6                	mov    esi,edx
c001bf10:	89 f0                	mov    eax,esi
c001bf12:	31 d2                	xor    edx,edx
c001bf14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf18:	85 c9                	test   ecx,ecx
c001bf1a:	74 07                	je     c001bf23 <__moddi3+0x63>
c001bf1c:	f7 d8                	neg    eax
c001bf1e:	83 d2 00             	adc    edx,0x0
c001bf21:	f7 da                	neg    edx
c001bf23:	83 c4 2c             	add    esp,0x2c
c001bf26:	5b                   	pop    ebx
c001bf27:	5e                   	pop    esi
c001bf28:	5f                   	pop    edi
c001bf29:	5d                   	pop    ebp
c001bf2a:	c3                   	ret    
c001bf2b:	90                   	nop
c001bf2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bf30:	85 db                	test   ebx,ebx
c001bf32:	75 0d                	jne    c001bf41 <__moddi3+0x81>
c001bf34:	b8 01 00 00 00       	mov    eax,0x1
c001bf39:	31 d2                	xor    edx,edx
c001bf3b:	f7 f7                	div    edi
c001bf3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf41:	89 f0                	mov    eax,esi
c001bf43:	31 d2                	xor    edx,edx
c001bf45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bf49:	f7 f7                	div    edi
c001bf4b:	89 e8                	mov    eax,ebp
c001bf4d:	f7 f7                	div    edi
c001bf4f:	89 d6                	mov    esi,edx
c001bf51:	eb bd                	jmp    c001bf10 <__moddi3+0x50>
c001bf53:	90                   	nop
c001bf54:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bf58:	39 f7                	cmp    edi,esi
c001bf5a:	76 20                	jbe    c001bf7c <__moddi3+0xbc>
c001bf5c:	89 c8                	mov    eax,ecx
c001bf5e:	89 f2                	mov    edx,esi
c001bf60:	eb b2                	jmp    c001bf14 <__moddi3+0x54>
c001bf62:	66 90                	xchg   ax,ax
c001bf64:	f7 d9                	neg    ecx
c001bf66:	83 d3 00             	adc    ebx,0x0
c001bf69:	f7 db                	neg    ebx
c001bf6b:	89 de                	mov    esi,ebx
c001bf6d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bf75:	e9 6f ff ff ff       	jmp    c001bee9 <__moddi3+0x29>
c001bf7a:	66 90                	xchg   ax,ax
c001bf7c:	0f bd c7             	bsr    eax,edi
c001bf7f:	83 f0 1f             	xor    eax,0x1f
c001bf82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf86:	75 24                	jne    c001bfac <__moddi3+0xec>
c001bf88:	39 f7                	cmp    edi,esi
c001bf8a:	72 06                	jb     c001bf92 <__moddi3+0xd2>
c001bf8c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bf90:	77 0c                	ja     c001bf9e <__moddi3+0xde>
c001bf92:	89 e9                	mov    ecx,ebp
c001bf94:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bf98:	19 fe                	sbb    esi,edi
c001bf9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bf9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfa2:	89 f2                	mov    edx,esi
c001bfa4:	e9 6b ff ff ff       	jmp    c001bf14 <__moddi3+0x54>
c001bfa9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfac:	b8 20 00 00 00       	mov    eax,0x20
c001bfb1:	89 c2                	mov    edx,eax
c001bfb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bfb7:	29 da                	sub    edx,ebx
c001bfb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bfbd:	88 d9                	mov    cl,bl
c001bfbf:	d3 e7                	shl    edi,cl
c001bfc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfc5:	88 d1                	mov    cl,dl
c001bfc7:	d3 e8                	shr    eax,cl
c001bfc9:	09 c7                	or     edi,eax
c001bfcb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bfcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bfd3:	89 d8                	mov    eax,ebx
c001bfd5:	88 d9                	mov    cl,bl
c001bfd7:	d3 e7                	shl    edi,cl
c001bfd9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bfdd:	89 f3                	mov    ebx,esi
c001bfdf:	88 d1                	mov    cl,dl
c001bfe1:	d3 eb                	shr    ebx,cl
c001bfe3:	89 c7                	mov    edi,eax
c001bfe5:	88 c1                	mov    cl,al
c001bfe7:	d3 e6                	shl    esi,cl
c001bfe9:	89 e8                	mov    eax,ebp
c001bfeb:	88 d1                	mov    cl,dl
c001bfed:	d3 e8                	shr    eax,cl
c001bfef:	09 f0                	or     eax,esi
c001bff1:	89 f9                	mov    ecx,edi
c001bff3:	d3 e5                	shl    ebp,cl
c001bff5:	89 da                	mov    edx,ebx
c001bff7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bffb:	89 d3                	mov    ebx,edx
c001bffd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c001:	89 c6                	mov    esi,eax
c001c003:	89 d1                	mov    ecx,edx
c001c005:	39 d3                	cmp    ebx,edx
c001c007:	72 27                	jb     c001c030 <__moddi3+0x170>
c001c009:	74 21                	je     c001c02c <__moddi3+0x16c>
c001c00b:	29 f5                	sub    ebp,esi
c001c00d:	19 cb                	sbb    ebx,ecx
c001c00f:	89 de                	mov    esi,ebx
c001c011:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c015:	d3 e6                	shl    esi,cl
c001c017:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c01b:	89 f9                	mov    ecx,edi
c001c01d:	d3 ed                	shr    ebp,cl
c001c01f:	09 ee                	or     esi,ebp
c001c021:	89 f0                	mov    eax,esi
c001c023:	d3 eb                	shr    ebx,cl
c001c025:	89 da                	mov    edx,ebx
c001c027:	e9 e8 fe ff ff       	jmp    c001bf14 <__moddi3+0x54>
c001c02c:	39 c5                	cmp    ebp,eax
c001c02e:	73 db                	jae    c001c00b <__moddi3+0x14b>
c001c030:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c034:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c038:	89 d1                	mov    ecx,edx
c001c03a:	89 c6                	mov    esi,eax
c001c03c:	eb cd                	jmp    c001c00b <__moddi3+0x14b>
c001c03e:	66 90                	xchg   ax,ax

c001c040 <__udivdi3>:
c001c040:	55                   	push   ebp
c001c041:	57                   	push   edi
c001c042:	56                   	push   esi
c001c043:	53                   	push   ebx
c001c044:	83 ec 1c             	sub    esp,0x1c
c001c047:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c04b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c04f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c053:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c057:	85 d2                	test   edx,edx
c001c059:	75 41                	jne    c001c09c <__udivdi3+0x5c>
c001c05b:	39 f7                	cmp    edi,esi
c001c05d:	76 15                	jbe    c001c074 <__udivdi3+0x34>
c001c05f:	89 e8                	mov    eax,ebp
c001c061:	89 f2                	mov    edx,esi
c001c063:	f7 f7                	div    edi
c001c065:	31 db                	xor    ebx,ebx
c001c067:	89 da                	mov    edx,ebx
c001c069:	83 c4 1c             	add    esp,0x1c
c001c06c:	5b                   	pop    ebx
c001c06d:	5e                   	pop    esi
c001c06e:	5f                   	pop    edi
c001c06f:	5d                   	pop    ebp
c001c070:	c3                   	ret    
c001c071:	8d 76 00             	lea    esi,[esi+0x0]
c001c074:	89 f9                	mov    ecx,edi
c001c076:	85 ff                	test   edi,edi
c001c078:	75 0b                	jne    c001c085 <__udivdi3+0x45>
c001c07a:	b8 01 00 00 00       	mov    eax,0x1
c001c07f:	31 d2                	xor    edx,edx
c001c081:	f7 f7                	div    edi
c001c083:	89 c1                	mov    ecx,eax
c001c085:	31 d2                	xor    edx,edx
c001c087:	89 f0                	mov    eax,esi
c001c089:	f7 f1                	div    ecx
c001c08b:	89 c3                	mov    ebx,eax
c001c08d:	89 e8                	mov    eax,ebp
c001c08f:	f7 f1                	div    ecx
c001c091:	89 da                	mov    edx,ebx
c001c093:	83 c4 1c             	add    esp,0x1c
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	5f                   	pop    edi
c001c099:	5d                   	pop    ebp
c001c09a:	c3                   	ret    
c001c09b:	90                   	nop
c001c09c:	39 f2                	cmp    edx,esi
c001c09e:	77 1c                	ja     c001c0bc <__udivdi3+0x7c>
c001c0a0:	0f bd da             	bsr    ebx,edx
c001c0a3:	83 f3 1f             	xor    ebx,0x1f
c001c0a6:	75 24                	jne    c001c0cc <__udivdi3+0x8c>
c001c0a8:	39 f2                	cmp    edx,esi
c001c0aa:	72 08                	jb     c001c0b4 <__udivdi3+0x74>
c001c0ac:	39 ef                	cmp    edi,ebp
c001c0ae:	0f 87 84 00 00 00    	ja     c001c138 <__udivdi3+0xf8>
c001c0b4:	b8 01 00 00 00       	mov    eax,0x1
c001c0b9:	eb ac                	jmp    c001c067 <__udivdi3+0x27>
c001c0bb:	90                   	nop
c001c0bc:	31 db                	xor    ebx,ebx
c001c0be:	31 c0                	xor    eax,eax
c001c0c0:	89 da                	mov    edx,ebx
c001c0c2:	83 c4 1c             	add    esp,0x1c
c001c0c5:	5b                   	pop    ebx
c001c0c6:	5e                   	pop    esi
c001c0c7:	5f                   	pop    edi
c001c0c8:	5d                   	pop    ebp
c001c0c9:	c3                   	ret    
c001c0ca:	66 90                	xchg   ax,ax
c001c0cc:	b8 20 00 00 00       	mov    eax,0x20
c001c0d1:	29 d8                	sub    eax,ebx
c001c0d3:	88 d9                	mov    cl,bl
c001c0d5:	d3 e2                	shl    edx,cl
c001c0d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0db:	89 fa                	mov    edx,edi
c001c0dd:	88 c1                	mov    cl,al
c001c0df:	d3 ea                	shr    edx,cl
c001c0e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c0e5:	09 d1                	or     ecx,edx
c001c0e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c0eb:	88 d9                	mov    cl,bl
c001c0ed:	d3 e7                	shl    edi,cl
c001c0ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c0f3:	89 f7                	mov    edi,esi
c001c0f5:	88 c1                	mov    cl,al
c001c0f7:	d3 ef                	shr    edi,cl
c001c0f9:	88 d9                	mov    cl,bl
c001c0fb:	d3 e6                	shl    esi,cl
c001c0fd:	89 ea                	mov    edx,ebp
c001c0ff:	88 c1                	mov    cl,al
c001c101:	d3 ea                	shr    edx,cl
c001c103:	09 d6                	or     esi,edx
c001c105:	89 f0                	mov    eax,esi
c001c107:	89 fa                	mov    edx,edi
c001c109:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c10d:	89 d7                	mov    edi,edx
c001c10f:	89 c6                	mov    esi,eax
c001c111:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c115:	39 d7                	cmp    edi,edx
c001c117:	72 13                	jb     c001c12c <__udivdi3+0xec>
c001c119:	74 09                	je     c001c124 <__udivdi3+0xe4>
c001c11b:	89 f0                	mov    eax,esi
c001c11d:	31 db                	xor    ebx,ebx
c001c11f:	e9 43 ff ff ff       	jmp    c001c067 <__udivdi3+0x27>
c001c124:	88 d9                	mov    cl,bl
c001c126:	d3 e5                	shl    ebp,cl
c001c128:	39 c5                	cmp    ebp,eax
c001c12a:	73 ef                	jae    c001c11b <__udivdi3+0xdb>
c001c12c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c12f:	31 db                	xor    ebx,ebx
c001c131:	e9 31 ff ff ff       	jmp    c001c067 <__udivdi3+0x27>
c001c136:	66 90                	xchg   ax,ax
c001c138:	31 c0                	xor    eax,eax
c001c13a:	e9 28 ff ff ff       	jmp    c001c067 <__udivdi3+0x27>
c001c13f:	90                   	nop

c001c140 <__umoddi3>:
c001c140:	55                   	push   ebp
c001c141:	57                   	push   edi
c001c142:	56                   	push   esi
c001c143:	53                   	push   ebx
c001c144:	83 ec 1c             	sub    esp,0x1c
c001c147:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c14b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c14f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c153:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c157:	89 da                	mov    edx,ebx
c001c159:	85 c0                	test   eax,eax
c001c15b:	75 37                	jne    c001c194 <__umoddi3+0x54>
c001c15d:	39 df                	cmp    edi,ebx
c001c15f:	76 13                	jbe    c001c174 <__umoddi3+0x34>
c001c161:	89 f0                	mov    eax,esi
c001c163:	f7 f7                	div    edi
c001c165:	89 d0                	mov    eax,edx
c001c167:	31 d2                	xor    edx,edx
c001c169:	83 c4 1c             	add    esp,0x1c
c001c16c:	5b                   	pop    ebx
c001c16d:	5e                   	pop    esi
c001c16e:	5f                   	pop    edi
c001c16f:	5d                   	pop    ebp
c001c170:	c3                   	ret    
c001c171:	8d 76 00             	lea    esi,[esi+0x0]
c001c174:	89 fd                	mov    ebp,edi
c001c176:	85 ff                	test   edi,edi
c001c178:	75 0b                	jne    c001c185 <__umoddi3+0x45>
c001c17a:	b8 01 00 00 00       	mov    eax,0x1
c001c17f:	31 d2                	xor    edx,edx
c001c181:	f7 f7                	div    edi
c001c183:	89 c5                	mov    ebp,eax
c001c185:	89 d8                	mov    eax,ebx
c001c187:	31 d2                	xor    edx,edx
c001c189:	f7 f5                	div    ebp
c001c18b:	89 f0                	mov    eax,esi
c001c18d:	f7 f5                	div    ebp
c001c18f:	89 d0                	mov    eax,edx
c001c191:	eb d4                	jmp    c001c167 <__umoddi3+0x27>
c001c193:	90                   	nop
c001c194:	89 f1                	mov    ecx,esi
c001c196:	39 d8                	cmp    eax,ebx
c001c198:	76 0a                	jbe    c001c1a4 <__umoddi3+0x64>
c001c19a:	89 f0                	mov    eax,esi
c001c19c:	83 c4 1c             	add    esp,0x1c
c001c19f:	5b                   	pop    ebx
c001c1a0:	5e                   	pop    esi
c001c1a1:	5f                   	pop    edi
c001c1a2:	5d                   	pop    ebp
c001c1a3:	c3                   	ret    
c001c1a4:	0f bd e8             	bsr    ebp,eax
c001c1a7:	83 f5 1f             	xor    ebp,0x1f
c001c1aa:	75 1c                	jne    c001c1c8 <__umoddi3+0x88>
c001c1ac:	39 d8                	cmp    eax,ebx
c001c1ae:	72 04                	jb     c001c1b4 <__umoddi3+0x74>
c001c1b0:	39 f7                	cmp    edi,esi
c001c1b2:	77 08                	ja     c001c1bc <__umoddi3+0x7c>
c001c1b4:	89 da                	mov    edx,ebx
c001c1b6:	29 fe                	sub    esi,edi
c001c1b8:	19 c2                	sbb    edx,eax
c001c1ba:	89 f1                	mov    ecx,esi
c001c1bc:	89 c8                	mov    eax,ecx
c001c1be:	83 c4 1c             	add    esp,0x1c
c001c1c1:	5b                   	pop    ebx
c001c1c2:	5e                   	pop    esi
c001c1c3:	5f                   	pop    edi
c001c1c4:	5d                   	pop    ebp
c001c1c5:	c3                   	ret    
c001c1c6:	66 90                	xchg   ax,ax
c001c1c8:	ba 20 00 00 00       	mov    edx,0x20
c001c1cd:	29 ea                	sub    edx,ebp
c001c1cf:	89 e9                	mov    ecx,ebp
c001c1d1:	d3 e0                	shl    eax,cl
c001c1d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1d7:	89 f8                	mov    eax,edi
c001c1d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c1dd:	88 d1                	mov    cl,dl
c001c1df:	d3 e8                	shr    eax,cl
c001c1e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1e5:	09 c1                	or     ecx,eax
c001c1e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1eb:	89 e9                	mov    ecx,ebp
c001c1ed:	d3 e7                	shl    edi,cl
c001c1ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1f3:	89 d8                	mov    eax,ebx
c001c1f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c1f9:	88 d1                	mov    cl,dl
c001c1fb:	d3 e8                	shr    eax,cl
c001c1fd:	89 c7                	mov    edi,eax
c001c1ff:	89 e9                	mov    ecx,ebp
c001c201:	d3 e3                	shl    ebx,cl
c001c203:	89 f0                	mov    eax,esi
c001c205:	88 d1                	mov    cl,dl
c001c207:	d3 e8                	shr    eax,cl
c001c209:	09 d8                	or     eax,ebx
c001c20b:	89 e9                	mov    ecx,ebp
c001c20d:	d3 e6                	shl    esi,cl
c001c20f:	89 f3                	mov    ebx,esi
c001c211:	89 fa                	mov    edx,edi
c001c213:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c217:	89 d1                	mov    ecx,edx
c001c219:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c21d:	89 c6                	mov    esi,eax
c001c21f:	89 d7                	mov    edi,edx
c001c221:	39 d1                	cmp    ecx,edx
c001c223:	72 27                	jb     c001c24c <__umoddi3+0x10c>
c001c225:	74 21                	je     c001c248 <__umoddi3+0x108>
c001c227:	89 ca                	mov    edx,ecx
c001c229:	29 f3                	sub    ebx,esi
c001c22b:	19 fa                	sbb    edx,edi
c001c22d:	89 d0                	mov    eax,edx
c001c22f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c233:	d3 e0                	shl    eax,cl
c001c235:	89 e9                	mov    ecx,ebp
c001c237:	d3 eb                	shr    ebx,cl
c001c239:	09 d8                	or     eax,ebx
c001c23b:	d3 ea                	shr    edx,cl
c001c23d:	83 c4 1c             	add    esp,0x1c
c001c240:	5b                   	pop    ebx
c001c241:	5e                   	pop    esi
c001c242:	5f                   	pop    edi
c001c243:	5d                   	pop    ebp
c001c244:	c3                   	ret    
c001c245:	8d 76 00             	lea    esi,[esi+0x0]
c001c248:	39 c3                	cmp    ebx,eax
c001c24a:	73 db                	jae    c001c227 <__umoddi3+0xe7>
c001c24c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c250:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c254:	89 d7                	mov    edi,edx
c001c256:	89 c6                	mov    esi,eax
c001c258:	eb cd                	jmp    c001c227 <__umoddi3+0xe7>

Disassembly of section .init:

c001c25a <_init>:
c001c25a:	55                   	push   ebp
c001c25b:	89 e5                	mov    ebp,esp
c001c25d:	e8 b6 3e fe ff       	call   c0000118 <frame_dummy>
c001c262:	e8 e5 fa ff ff       	call   c001bd4c <__do_global_ctors_aux>
c001c267:	5d                   	pop    ebp
c001c268:	c3                   	ret    

Disassembly of section .fini:

c001c269 <_fini>:
c001c269:	55                   	push   ebp
c001c26a:	89 e5                	mov    ebp,esp
c001c26c:	e8 37 3e fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c271:	5d                   	pop    ebp
c001c272:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c274 <Computer::~Computer()>:
c001c274:	83 ec 0c             	sub    esp,0xc
c001c277:	ba 80 d5 01 c0       	mov    edx,0xc001d580
c001c27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c280:	89 10                	mov    DWORD PTR [eax],edx
c001c282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c286:	83 ec 0c             	sub    esp,0xc
c001c289:	50                   	push   eax
c001c28a:	e8 9f fc fe ff       	call   c000bf2e <Device::~Device()>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	90                   	nop
c001c293:	83 c4 0c             	add    esp,0xc
c001c296:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c298 <Computer::~Computer()>:
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	83 ec 0c             	sub    esp,0xc
c001c29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2a2:	e8 cd ff ff ff       	call   c001c274 <Computer::~Computer()>
c001c2a7:	83 c4 10             	add    esp,0x10
c001c2aa:	83 ec 08             	sub    esp,0x8
c001c2ad:	68 70 01 00 00       	push   0x170
c001c2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2b6:	e8 3b e8 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	83 c4 0c             	add    esp,0xc
c001c2c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c2c2 <idleCommon()>:
c001c2c2:	83 ec 0c             	sub    esp,0xc
c001c2c5:	fa                   	cli    
c001c2c6:	ff 05 08 3d 02 c0    	inc    DWORD PTR ds:0xc0023d08
c001c2cc:	e8 bf 77 ff ff       	call   c0013a90 <schedule()>
c001c2d1:	a1 08 3d 02 c0       	mov    eax,ds:0xc0023d08
c001c2d6:	48                   	dec    eax
c001c2d7:	a3 08 3d 02 c0       	mov    ds:0xc0023d08,eax
c001c2dc:	75 01                	jne    c001c2df <idleCommon()+0x1d>
c001c2de:	fb                   	sti    
c001c2df:	83 c4 0c             	add    esp,0xc
c001c2e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c2e4 <LinkedList<UnixFile>::~LinkedList()>:
c001c2e4:	90                   	nop
c001c2e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c2e6 <LinkedList<UnixFile>::LinkedList()>:
c001c2e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c2f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c30a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c314:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c31b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c31f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c326:	90                   	nop
c001c327:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c328 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c330:	75 10                	jne    c001c342 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c332:	83 ec 0c             	sub    esp,0xc
c001c335:	68 d4 d7 01 c0       	push   0xc001d7d4
c001c33a:	e8 fc 43 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c33f:	83 c4 10             	add    esp,0x10
c001c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c346:	8b 00                	mov    eax,DWORD PTR [eax]
c001c348:	85 c0                	test   eax,eax
c001c34a:	74 34                	je     c001c380 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c353:	85 c0                	test   eax,eax
c001c355:	74 29                	je     c001c380 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c35e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c362:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c36d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c377:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c37e:	eb 65                	jmp    c001c3e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c384:	8b 00                	mov    eax,DWORD PTR [eax]
c001c386:	85 c0                	test   eax,eax
c001c388:	75 4b                	jne    c001c3d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c391:	85 c0                	test   eax,eax
c001c393:	75 40                	jne    c001c3d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c399:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c39d:	89 10                	mov    DWORD PTR [eax],edx
c001c39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3bf:	85 c0                	test   eax,eax
c001c3c1:	74 22                	je     c001c3e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c3c3:	83 ec 0c             	sub    esp,0xc
c001c3c6:	68 f6 d7 01 c0       	push   0xc001d7f6
c001c3cb:	e8 6b 43 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	eb 10                	jmp    c001c3e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	68 00 d8 01 c0       	push   0xc001d800
c001c3dd:	e8 59 43 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3ec:	8d 50 01             	lea    edx,[eax+0x1]
c001c3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3f6:	90                   	nop
c001c3f7:	83 c4 0c             	add    esp,0xc
c001c3fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c3fc <LinkedList<UnixFile>::getFirstElement()>:
c001c3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c400:	8b 00                	mov    eax,DWORD PTR [eax]
c001c402:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c404 <LinkedList<UnixFile>::removeFirst()>:
c001c404:	83 ec 0c             	sub    esp,0xc
c001c407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c40d:	85 c0                	test   eax,eax
c001c40f:	75 12                	jne    c001c423 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c411:	83 ec 0c             	sub    esp,0xc
c001c414:	68 0c d8 01 c0       	push   0xc001d80c
c001c419:	e8 1d 43 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c41e:	83 c4 10             	add    esp,0x10
c001c421:	eb 7e                	jmp    c001c4a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c427:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c42a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c42d:	85 c0                	test   eax,eax
c001c42f:	74 10                	je     c001c441 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c431:	83 ec 0c             	sub    esp,0xc
c001c434:	68 57 d8 01 c0       	push   0xc001d857
c001c439:	e8 fd 42 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c445:	8b 00                	mov    eax,DWORD PTR [eax]
c001c447:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c44a:	85 c0                	test   eax,eax
c001c44c:	75 33                	jne    c001c481 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c452:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c467:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c46a:	83 f8 01             	cmp    eax,0x1
c001c46d:	74 21                	je     c001c490 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c46f:	83 ec 0c             	sub    esp,0xc
c001c472:	68 30 d8 01 c0       	push   0xc001d830
c001c477:	e8 bf 42 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c47c:	83 c4 10             	add    esp,0x10
c001c47f:	eb 0f                	jmp    c001c490 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c485:	8b 00                	mov    eax,DWORD PTR [eax]
c001c487:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48e:	89 10                	mov    DWORD PTR [eax],edx
c001c490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c494:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c497:	8d 50 ff             	lea    edx,[eax-0x1]
c001c49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4a1:	83 c4 0c             	add    esp,0xc
c001c4a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c4a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c4a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c4ae <DriverlessDevice::~DriverlessDevice()>:
c001c4ae:	ba 9c de 01 c0       	mov    edx,0xc001de9c
c001c4b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b7:	89 10                	mov    DWORD PTR [eax],edx
c001c4b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4bd:	50                   	push   eax
c001c4be:	e8 6b fa fe ff       	call   c000bf2e <Device::~Device()>
c001c4c3:	83 c4 04             	add    esp,0x4
c001c4c6:	90                   	nop
c001c4c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c4c8 <DriverlessDevice::~DriverlessDevice()>:
c001c4c8:	83 ec 0c             	sub    esp,0xc
c001c4cb:	83 ec 0c             	sub    esp,0xc
c001c4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4d2:	e8 d7 ff ff ff       	call   c001c4ae <DriverlessDevice::~DriverlessDevice()>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	83 ec 08             	sub    esp,0x8
c001c4dd:	68 58 01 00 00       	push   0x158
c001c4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4e6:	e8 0b e6 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	83 c4 0c             	add    esp,0xc
c001c4f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c4f2 <LinkedList<Device>::addElement(Device*)>:
c001c4f2:	83 ec 0c             	sub    esp,0xc
c001c4f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4fa:	75 10                	jne    c001c50c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c4fc:	83 ec 0c             	sub    esp,0xc
c001c4ff:	68 d4 d7 01 c0       	push   0xc001d7d4
c001c504:	e8 32 42 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c510:	8b 00                	mov    eax,DWORD PTR [eax]
c001c512:	85 c0                	test   eax,eax
c001c514:	74 3a                	je     c001c550 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c51d:	85 c0                	test   eax,eax
c001c51f:	74 2f                	je     c001c550 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c525:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c528:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c52c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c536:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c53a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c53d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c541:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c544:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c54e:	eb 68                	jmp    c001c5b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 00                	mov    eax,DWORD PTR [eax]
c001c556:	85 c0                	test   eax,eax
c001c558:	75 4e                	jne    c001c5a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c561:	85 c0                	test   eax,eax
c001c563:	75 43                	jne    c001c5a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c56d:	89 10                	mov    DWORD PTR [eax],edx
c001c56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c573:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c577:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c581:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c592:	85 c0                	test   eax,eax
c001c594:	74 22                	je     c001c5b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c596:	83 ec 0c             	sub    esp,0xc
c001c599:	68 f6 d7 01 c0       	push   0xc001d7f6
c001c59e:	e8 98 41 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	eb 10                	jmp    c001c5b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c5a8:	83 ec 0c             	sub    esp,0xc
c001c5ab:	68 00 d8 01 c0       	push   0xc001d800
c001c5b0:	e8 86 41 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c5b5:	83 c4 10             	add    esp,0x10
c001c5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bf:	8d 50 01             	lea    edx,[eax+0x1]
c001c5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5c9:	90                   	nop
c001c5ca:	83 c4 0c             	add    esp,0xc
c001c5cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c5ce <LinkedList<Device>::LinkedList()>:
c001c5ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c607:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c60e:	90                   	nop
c001c60f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c610 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c614:	8b 00                	mov    eax,DWORD PTR [eax]
c001c616:	85 c0                	test   eax,eax
c001c618:	75 0e                	jne    c001c628 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c621:	85 c0                	test   eax,eax
c001c623:	75 03                	jne    c001c628 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c625:	b0 01                	mov    al,0x1
c001c627:	c3                   	ret    
c001c628:	b0 00                	mov    al,0x0
c001c62a:	90                   	nop
c001c62b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c62c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c630:	8b 00                	mov    eax,DWORD PTR [eax]
c001c632:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c634 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c634:	83 ec 0c             	sub    esp,0xc
c001c637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c63d:	85 c0                	test   eax,eax
c001c63f:	75 17                	jne    c001c658 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c641:	83 ec 0c             	sub    esp,0xc
c001c644:	68 0c d8 01 c0       	push   0xc001d80c
c001c649:	e8 ed 40 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c64e:	83 c4 10             	add    esp,0x10
c001c651:	e9 92 00 00 00       	jmp    c001c6e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c656:	66 90                	xchg   ax,ax
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c65f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c662:	85 c0                	test   eax,eax
c001c664:	0f 95 c0             	setne  al
c001c667:	84 c0                	test   al,al
c001c669:	74 11                	je     c001c67c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c66b:	83 ec 0c             	sub    esp,0xc
c001c66e:	68 57 d8 01 c0       	push   0xc001d857
c001c673:	e8 c3 40 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c678:	83 c4 10             	add    esp,0x10
c001c67b:	90                   	nop
c001c67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c680:	8b 00                	mov    eax,DWORD PTR [eax]
c001c682:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c685:	85 c0                	test   eax,eax
c001c687:	0f 94 c0             	sete   al
c001c68a:	84 c0                	test   al,al
c001c68c:	74 36                	je     c001c6c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c692:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6aa:	83 f8 01             	cmp    eax,0x1
c001c6ad:	74 25                	je     c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c6af:	83 ec 0c             	sub    esp,0xc
c001c6b2:	68 30 d8 01 c0       	push   0xc001d830
c001c6b7:	e8 7f 40 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c6bc:	83 c4 10             	add    esp,0x10
c001c6bf:	eb 13                	jmp    c001c6d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d1:	89 10                	mov    DWORD PTR [eax],edx
c001c6d3:	90                   	nop
c001c6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6db:	8d 50 ff             	lea    edx,[eax-0x1]
c001c6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e8:	83 c4 0c             	add    esp,0xc
c001c6eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c6ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6f4:	75 12                	jne    c001c708 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c6f6:	83 ec 0c             	sub    esp,0xc
c001c6f9:	68 d4 d7 01 c0       	push   0xc001d7d4
c001c6fe:	e8 38 40 ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	66 90                	xchg   ax,ax
c001c708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c70e:	85 c0                	test   eax,eax
c001c710:	74 36                	je     c001c748 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c719:	85 c0                	test   eax,eax
c001c71b:	74 2b                	je     c001c748 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c724:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c728:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c733:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c73d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c744:	eb 6a                	jmp    c001c7b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c746:	66 90                	xchg   ax,ax
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c74e:	85 c0                	test   eax,eax
c001c750:	75 4e                	jne    c001c7a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c759:	85 c0                	test   eax,eax
c001c75b:	75 43                	jne    c001c7a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c765:	89 10                	mov    DWORD PTR [eax],edx
c001c767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c76f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c779:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c787:	85 c0                	test   eax,eax
c001c789:	74 25                	je     c001c7b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	68 f6 d7 01 c0       	push   0xc001d7f6
c001c793:	e8 a3 3f ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	eb 13                	jmp    c001c7b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c79d:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	68 00 d8 01 c0       	push   0xc001d800
c001c7a8:	e8 8e 3f ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7b7:	8d 50 01             	lea    edx,[eax+0x1]
c001c7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7c1:	90                   	nop
c001c7c2:	83 c4 0c             	add    esp,0xc
c001c7c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c7c8 <ACPI::~ACPI()>:
c001c7c8:	83 ec 0c             	sub    esp,0xc
c001c7cb:	ba 04 e4 01 c0       	mov    edx,0xc001e404
c001c7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d4:	89 10                	mov    DWORD PTR [eax],edx
c001c7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7da:	83 ec 0c             	sub    esp,0xc
c001c7dd:	50                   	push   eax
c001c7de:	e8 4b f7 fe ff       	call   c000bf2e <Device::~Device()>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	90                   	nop
c001c7e7:	83 c4 0c             	add    esp,0xc
c001c7ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c7ec <ACPI::~ACPI()>:
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	83 ec 0c             	sub    esp,0xc
c001c7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f6:	e8 cd ff ff ff       	call   c001c7c8 <ACPI::~ACPI()>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	83 ec 08             	sub    esp,0x8
c001c801:	68 64 12 00 00       	push   0x1264
c001c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c80a:	e8 e7 e2 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	83 c4 0c             	add    esp,0xc
c001c815:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c818 <LinkedList<Device>::~LinkedList()>:
c001c818:	90                   	nop
c001c819:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c81c <LinkedList<Device>::isEmpty()>:
c001c81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c820:	8b 00                	mov    eax,DWORD PTR [eax]
c001c822:	85 c0                	test   eax,eax
c001c824:	75 0e                	jne    c001c834 <LinkedList<Device>::isEmpty()+0x18>
c001c826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c82a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c82d:	85 c0                	test   eax,eax
c001c82f:	75 03                	jne    c001c834 <LinkedList<Device>::isEmpty()+0x18>
c001c831:	b0 01                	mov    al,0x1
c001c833:	c3                   	ret    
c001c834:	b0 00                	mov    al,0x0
c001c836:	90                   	nop
c001c837:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c838 <LinkedList<Device>::getFirstElement()>:
c001c838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c83c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c83e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c840 <LinkedList<Device>::removeFirst()>:
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c847:	8b 00                	mov    eax,DWORD PTR [eax]
c001c849:	85 c0                	test   eax,eax
c001c84b:	75 17                	jne    c001c864 <LinkedList<Device>::removeFirst()+0x24>
c001c84d:	83 ec 0c             	sub    esp,0xc
c001c850:	68 0c d8 01 c0       	push   0xc001d80c
c001c855:	e8 e1 3e ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c85a:	83 c4 10             	add    esp,0x10
c001c85d:	e9 92 00 00 00       	jmp    c001c8f4 <LinkedList<Device>::removeFirst()+0xb4>
c001c862:	66 90                	xchg   ax,ax
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c86b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c871:	85 c0                	test   eax,eax
c001c873:	74 13                	je     c001c888 <LinkedList<Device>::removeFirst()+0x48>
c001c875:	83 ec 0c             	sub    esp,0xc
c001c878:	68 57 d8 01 c0       	push   0xc001d857
c001c87d:	e8 b9 3e ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c882:	83 c4 10             	add    esp,0x10
c001c885:	8d 76 00             	lea    esi,[esi+0x0]
c001c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c88e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c894:	85 c0                	test   eax,eax
c001c896:	75 34                	jne    c001c8cc <LinkedList<Device>::removeFirst()+0x8c>
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8b4:	83 f8 01             	cmp    eax,0x1
c001c8b7:	74 27                	je     c001c8e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c8b9:	83 ec 0c             	sub    esp,0xc
c001c8bc:	68 30 d8 01 c0       	push   0xc001d830
c001c8c1:	e8 75 3e ff ff       	call   c001073b <Krnl::panic(char const*)>
c001c8c6:	83 c4 10             	add    esp,0x10
c001c8c9:	eb 15                	jmp    c001c8e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c8cb:	90                   	nop
c001c8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	89 10                	mov    DWORD PTR [eax],edx
c001c8de:	66 90                	xchg   ax,ax
c001c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8f4:	83 c4 0c             	add    esp,0xc
c001c8f7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c8f8 <CPU::~CPU()>:
c001c8f8:	83 ec 0c             	sub    esp,0xc
c001c8fb:	ba a0 e5 01 c0       	mov    edx,0xc001e5a0
c001c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c904:	89 10                	mov    DWORD PTR [eax],edx
c001c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90a:	83 ec 0c             	sub    esp,0xc
c001c90d:	50                   	push   eax
c001c90e:	e8 1b f6 fe ff       	call   c000bf2e <Device::~Device()>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	90                   	nop
c001c917:	83 c4 0c             	add    esp,0xc
c001c91a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c91c <CPU::~CPU()>:
c001c91c:	83 ec 0c             	sub    esp,0xc
c001c91f:	83 ec 0c             	sub    esp,0xc
c001c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c926:	e8 cd ff ff ff       	call   c001c8f8 <CPU::~CPU()>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	83 ec 08             	sub    esp,0x8
c001c931:	68 94 11 00 00       	push   0x1194
c001c936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c93a:	e8 b7 e1 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001c93f:	83 c4 10             	add    esp,0x10
c001c942:	83 c4 0c             	add    esp,0xc
c001c945:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c948 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c948:	90                   	nop
c001c949:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c94c <ThreadControlBlock::ThreadControlBlock()>:
c001c94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c950:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c95b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c966:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c96d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c971:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c97c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c987:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c98b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c993:	90                   	nop
c001c994:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c998 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c9d8:	90                   	nop
c001c9d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c9dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c9e3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c9e4 <PCI::~PCI()>:
c001c9e4:	83 ec 0c             	sub    esp,0xc
c001c9e7:	ba d4 f0 01 c0       	mov    edx,0xc001f0d4
c001c9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f0:	89 10                	mov    DWORD PTR [eax],edx
c001c9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f6:	83 ec 0c             	sub    esp,0xc
c001c9f9:	50                   	push   eax
c001c9fa:	e8 b9 ef fe ff       	call   c000b9b8 <Bus::~Bus()>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	90                   	nop
c001ca03:	83 c4 0c             	add    esp,0xc
c001ca06:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ca08 <PCI::~PCI()>:
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	83 ec 0c             	sub    esp,0xc
c001ca0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca12:	e8 cd ff ff ff       	call   c001c9e4 <PCI::~PCI()>
c001ca17:	83 c4 10             	add    esp,0x10
c001ca1a:	83 ec 08             	sub    esp,0x8
c001ca1d:	68 5c 01 00 00       	push   0x15c
c001ca22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca26:	e8 cb e0 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001ca2b:	83 c4 10             	add    esp,0x10
c001ca2e:	83 c4 0c             	add    esp,0xc
c001ca31:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ca32 <IDE::~IDE()>:
c001ca32:	83 ec 0c             	sub    esp,0xc
c001ca35:	ba 88 f1 01 c0       	mov    edx,0xc001f188
c001ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3e:	89 10                	mov    DWORD PTR [eax],edx
c001ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca44:	83 ec 0c             	sub    esp,0xc
c001ca47:	50                   	push   eax
c001ca48:	e8 5b f9 fe ff       	call   c000c3a8 <HardDiskController::~HardDiskController()>
c001ca4d:	83 c4 10             	add    esp,0x10
c001ca50:	90                   	nop
c001ca51:	83 c4 0c             	add    esp,0xc
c001ca54:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ca56 <IDE::~IDE()>:
c001ca56:	83 ec 0c             	sub    esp,0xc
c001ca59:	83 ec 0c             	sub    esp,0xc
c001ca5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca60:	e8 cd ff ff ff       	call   c001ca32 <IDE::~IDE()>
c001ca65:	83 c4 10             	add    esp,0x10
c001ca68:	83 ec 08             	sub    esp,0x8
c001ca6b:	68 70 02 00 00       	push   0x270
c001ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca74:	e8 7d e0 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	83 c4 0c             	add    esp,0xc
c001ca7f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ca80 <SATABus::~SATABus()>:
c001ca80:	83 ec 0c             	sub    esp,0xc
c001ca83:	ba d8 f1 01 c0       	mov    edx,0xc001f1d8
c001ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8c:	89 10                	mov    DWORD PTR [eax],edx
c001ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca92:	83 ec 0c             	sub    esp,0xc
c001ca95:	50                   	push   eax
c001ca96:	e8 0d f9 fe ff       	call   c000c3a8 <HardDiskController::~HardDiskController()>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	90                   	nop
c001ca9f:	83 c4 0c             	add    esp,0xc
c001caa2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001caa4 <SATABus::~SATABus()>:
c001caa4:	83 ec 0c             	sub    esp,0xc
c001caa7:	83 ec 0c             	sub    esp,0xc
c001caaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caae:	e8 cd ff ff ff       	call   c001ca80 <SATABus::~SATABus()>
c001cab3:	83 c4 10             	add    esp,0x10
c001cab6:	83 ec 08             	sub    esp,0x8
c001cab9:	68 64 01 00 00       	push   0x164
c001cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac2:	e8 2f e0 fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cac7:	83 c4 10             	add    esp,0x10
c001caca:	83 c4 0c             	add    esp,0xc
c001cacd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cace <ATA::~ATA()>:
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	ba 18 f2 01 c0       	mov    edx,0xc001f218
c001cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cada:	89 10                	mov    DWORD PTR [eax],edx
c001cadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	50                   	push   eax
c001cae4:	e8 a1 f9 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cae9:	83 c4 10             	add    esp,0x10
c001caec:	90                   	nop
c001caed:	83 c4 0c             	add    esp,0xc
c001caf0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001caf2 <ATA::~ATA()>:
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	83 ec 0c             	sub    esp,0xc
c001caf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cafc:	e8 cd ff ff ff       	call   c001cace <ATA::~ATA()>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	83 ec 08             	sub    esp,0x8
c001cb07:	68 7c 01 00 00       	push   0x17c
c001cb0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb10:	e8 e1 df fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	83 c4 0c             	add    esp,0xc
c001cb1b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cb1c <ATAPI::~ATAPI()>:
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	ba 60 f2 01 c0       	mov    edx,0xc001f260
c001cb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb28:	89 10                	mov    DWORD PTR [eax],edx
c001cb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2e:	83 ec 0c             	sub    esp,0xc
c001cb31:	50                   	push   eax
c001cb32:	e8 53 f9 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cb37:	83 c4 10             	add    esp,0x10
c001cb3a:	90                   	nop
c001cb3b:	83 c4 0c             	add    esp,0xc
c001cb3e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cb40 <ATAPI::~ATAPI()>:
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	83 ec 0c             	sub    esp,0xc
c001cb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb4a:	e8 cd ff ff ff       	call   c001cb1c <ATAPI::~ATAPI()>
c001cb4f:	83 c4 10             	add    esp,0x10
c001cb52:	83 ec 08             	sub    esp,0x8
c001cb55:	68 84 01 00 00       	push   0x184
c001cb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb5e:	e8 93 df fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cb63:	83 c4 10             	add    esp,0x10
c001cb66:	83 c4 0c             	add    esp,0xc
c001cb69:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cb6a <SATA::~SATA()>:
c001cb6a:	83 ec 0c             	sub    esp,0xc
c001cb6d:	ba 14 f3 01 c0       	mov    edx,0xc001f314
c001cb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb76:	89 10                	mov    DWORD PTR [eax],edx
c001cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7c:	83 ec 0c             	sub    esp,0xc
c001cb7f:	50                   	push   eax
c001cb80:	e8 05 f9 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cb85:	83 c4 10             	add    esp,0x10
c001cb88:	90                   	nop
c001cb89:	83 c4 0c             	add    esp,0xc
c001cb8c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cb8e <SATA::~SATA()>:
c001cb8e:	83 ec 0c             	sub    esp,0xc
c001cb91:	83 ec 0c             	sub    esp,0xc
c001cb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb98:	e8 cd ff ff ff       	call   c001cb6a <SATA::~SATA()>
c001cb9d:	83 c4 10             	add    esp,0x10
c001cba0:	83 ec 08             	sub    esp,0x8
c001cba3:	68 7c 01 00 00       	push   0x17c
c001cba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbac:	e8 45 df fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cbb1:	83 c4 10             	add    esp,0x10
c001cbb4:	83 c4 0c             	add    esp,0xc
c001cbb7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cbb8 <SATAPI::~SATAPI()>:
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	ba a4 f4 01 c0       	mov    edx,0xc001f4a4
c001cbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc4:	89 10                	mov    DWORD PTR [eax],edx
c001cbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbca:	83 ec 0c             	sub    esp,0xc
c001cbcd:	50                   	push   eax
c001cbce:	e8 b7 f8 fe ff       	call   c000c48a <PhysicalDisk::~PhysicalDisk()>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	90                   	nop
c001cbd7:	83 c4 0c             	add    esp,0xc
c001cbda:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cbdc <SATAPI::~SATAPI()>:
c001cbdc:	83 ec 0c             	sub    esp,0xc
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 cd ff ff ff       	call   c001cbb8 <SATAPI::~SATAPI()>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 ec 08             	sub    esp,0x8
c001cbf1:	68 84 01 00 00       	push   0x184
c001cbf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfa:	e8 f7 de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	83 c4 0c             	add    esp,0xc
c001cc05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cc06 <IOAPIC::~IOAPIC()>:
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	ba e4 f4 01 c0       	mov    edx,0xc001f4e4
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	89 10                	mov    DWORD PTR [eax],edx
c001cc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc18:	83 ec 0c             	sub    esp,0xc
c001cc1b:	50                   	push   eax
c001cc1c:	e8 0d f3 fe ff       	call   c000bf2e <Device::~Device()>
c001cc21:	83 c4 10             	add    esp,0x10
c001cc24:	90                   	nop
c001cc25:	83 c4 0c             	add    esp,0xc
c001cc28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cc2a <IOAPIC::~IOAPIC()>:
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	83 ec 0c             	sub    esp,0xc
c001cc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc34:	e8 cd ff ff ff       	call   c001cc06 <IOAPIC::~IOAPIC()>
c001cc39:	83 c4 10             	add    esp,0x10
c001cc3c:	83 ec 08             	sub    esp,0x8
c001cc3f:	68 68 01 00 00       	push   0x168
c001cc44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc48:	e8 a9 de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cc4d:	83 c4 10             	add    esp,0x10
c001cc50:	83 c4 0c             	add    esp,0xc
c001cc53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cc54 <APICTimer::~APICTimer()>:
c001cc54:	83 ec 0c             	sub    esp,0xc
c001cc57:	ba 2c f5 01 c0       	mov    edx,0xc001f52c
c001cc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc60:	89 10                	mov    DWORD PTR [eax],edx
c001cc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc66:	83 ec 0c             	sub    esp,0xc
c001cc69:	50                   	push   eax
c001cc6a:	e8 bd 0b ff ff       	call   c000d82c <Timer::~Timer()>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	90                   	nop
c001cc73:	83 c4 0c             	add    esp,0xc
c001cc76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cc78 <APICTimer::~APICTimer()>:
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	83 ec 0c             	sub    esp,0xc
c001cc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc82:	e8 cd ff ff ff       	call   c001cc54 <APICTimer::~APICTimer()>
c001cc87:	83 c4 10             	add    esp,0x10
c001cc8a:	83 ec 08             	sub    esp,0x8
c001cc8d:	68 60 01 00 00       	push   0x160
c001cc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc96:	e8 5b de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cc9b:	83 c4 10             	add    esp,0x10
c001cc9e:	83 c4 0c             	add    esp,0xc
c001cca1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cca4 <PIT::~PIT()>:
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	ba 7c f5 01 c0       	mov    edx,0xc001f57c
c001ccac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb0:	89 10                	mov    DWORD PTR [eax],edx
c001ccb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb6:	83 ec 0c             	sub    esp,0xc
c001ccb9:	50                   	push   eax
c001ccba:	e8 6d 0b ff ff       	call   c000d82c <Timer::~Timer()>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	90                   	nop
c001ccc3:	83 c4 0c             	add    esp,0xc
c001ccc6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ccc8 <PIT::~PIT()>:
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	83 ec 0c             	sub    esp,0xc
c001ccce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd2:	e8 cd ff ff ff       	call   c001cca4 <PIT::~PIT()>
c001ccd7:	83 c4 10             	add    esp,0x10
c001ccda:	83 ec 08             	sub    esp,0x8
c001ccdd:	68 5c 01 00 00       	push   0x15c
c001cce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce6:	e8 0b de fe ff       	call   c000aaf6 <operator delete(void*, unsigned long)>
c001cceb:	83 c4 10             	add    esp,0x10
c001ccee:	83 c4 0c             	add    esp,0xc
c001ccf1:	c3                   	ret    
