
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d5 f7 00 00       	call   c000f7f5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 70 02 00       	call   c0027058 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b4 7b 02 c0       	mov    ebx,0xc0027bb4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 7b 02 c0    	cmp    ebx,0xc0027bc0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 be 02 c0       	mov    eax,0xc002bef8
c0000049:	3d f8 be 02 c0       	cmp    eax,0xc002bef8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 be 02 c0       	push   0xc002bef8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 be 02 c0       	mov    eax,0xc002bef8
c0000075:	2d f8 be 02 c0       	sub    eax,0xc002bef8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 be 02 c0       	push   0xc002bef8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c528,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 7b 02 c0       	mov    ebx,0xc0027bc8
c00000bb:	81 eb c4 7b 02 c0    	sub    ebx,0xc0027bc4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 7b 02 c0       	mov    esi,0xc0027bc4
c00000ca:	a1 2c c5 02 c0       	mov    eax,ds:0xc002c52c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c c5 02 c0       	mov    ds:0xc002c52c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c c5 02 c0       	mov    eax,ds:0xc002c52c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 be 02 c0       	push   0xc002bef8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c528,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 c5 02 c0       	push   0xc002c530
c000012c:	68 f8 be 02 c0       	push   0xc002bef8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 a8 c5 01 00       	call   c001c8f8 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 ff 21 01 00       	call   c0012567 <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 86 c5 01 00       	call   c001c8f8 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 d4 c9 01 00       	call   c001cd65 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 82 cf 01 00       	call   c001d31c <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 70 c9 02 c0 	lgdtd  ds:0xc002c970
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 91 3e 01 00       	call   c001441f <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 48 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c548
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 48 c5 02 c0       	mov    ds:0xc002c548,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 48 c5 02 c0       	mov    eax,ds:0xc002c548
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 48 c5 02 c0    	mov    DWORD PTR ds:0xc002c548,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 e0 7b 02 c0 02 	test   BYTE PTR [edx-0x3ffd8420],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 e0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8420],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 e0 7b 02 c0 08 	test   BYTE PTR [edx-0x3ffd8420],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 e0 7b 02 c0 04 	test   BYTE PTR [edi-0x3ffd8420],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 e0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8420],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 60 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c560
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 64 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3a9c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 64 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a9c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 8c c5 02 c0    	cmp    DWORD PTR ds:0xc002c58c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 9c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c59c
c0000c10:	c7 42 0c 94 c5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c594
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 9c c5 02 c0    	mov    DWORD PTR ds:0xc002c59c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 8c c5 02 c0    	mov    DWORD PTR ds:0xc002c58c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 60 c5 02 c0 02 	test   BYTE PTR ds:0xc002c560,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 60 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c560
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 64 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3a9c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 64 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3a9c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 94 c5 02 c0 	lea    edx,[eax*8-0x3ffd3a6c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d a0 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5a0
c0000f92:	81 fb 94 c5 02 c0    	cmp    ebx,0xc002c594
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 94 c5 02 c0       	cmp    eax,0xc002c594
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 90 c5 02 c0    	cmp    DWORD PTR ds:0xc002c590,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 9c c5 02 c0       	mov    ds:0xc002c59c,eax
c0000fce:	a3 a0 c5 02 c0       	mov    ds:0xc002c5a0,eax
c0000fd3:	a3 90 c5 02 c0       	mov    ds:0xc002c590,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 94 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c594
c0000fe1:	c7 40 0c 94 c5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c594
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 a0 c5 02 c0       	mov    ds:0xc002c5a0,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 94 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c594
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 58 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3aa8]
c0001032:	8b 14 95 60 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3aa0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 60 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3aa0]
c000104d:	8b 14 95 60 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3aa0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 94 c8 02 c0 	or     DWORD PTR [edi*4-0x3ffd376c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 94 c5 02 c0 	lea    eax,[eax*8-0x3ffd3a6c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 9c c5 02 c0    	mov    DWORD PTR ds:0xc002c59c,ecx
c0001107:	89 0d a0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5a0,ecx
c000110d:	c7 41 08 94 c5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c594
c0001114:	c7 41 0c 94 c5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c594
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 8c c5 02 c0 	lea    edx,[ecx*8-0x3ffd3a74]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 94 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd376c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 94 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd376c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 8c c5 02 c0 	lea    edx,[eax*4-0x3ffd3a74]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 94 c8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd376c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 9c c5 02 c0    	mov    DWORD PTR ds:0xc002c59c,edi
c00011da:	89 3d a0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5a0,edi
c00011e0:	c7 47 08 94 c5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c594
c00011e7:	c7 47 0c 94 c5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c594
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 90 c5 02 c0    	mov    DWORD PTR ds:0xc002c590,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 8c c5 02 c0       	mov    eax,ds:0xc002c58c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 8c c5 02 c0    	mov    DWORD PTR ds:0xc002c58c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 60 c5 02 c0       	mov    edx,0xc002c560
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 60 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c560,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d b4 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8b4
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 b4 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8b4,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d b4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8b4,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 8c c5 02 c0    	cmp    DWORD PTR ds:0xc002c58c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 8c c5 02 c0    	mov    DWORD PTR ds:0xc002c58c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 60 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c560,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 bc c8 02 c0    	push   DWORD PTR ds:0xc002c8bc
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 60 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c560,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 bc c8 02 c0       	mov    eax,ds:0xc002c8bc
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 8c c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c58c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 8c c5 02 c0       	mov    eax,ds:0xc002c58c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 64 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3a9c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 94 c5 02 c0       	mov    eax,0xc002c594
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 8c c8 02 c0       	cmp    eax,0xc002c88c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 c8 c8 02 c0       	mov    eax,ds:0xc002c8c8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 b0 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8b0
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 c4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8c4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 d4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8d4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 e4 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd831c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 60 c5 02 c0       	mov    eax,ds:0xc002c560
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 60 c5 02 c0       	mov    ds:0xc002c560,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d a8 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a8,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d ac c8 02 c0    	mov    DWORD PTR ds:0xc002c8ac,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 b4 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8b4,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 20 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fe0]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 38 e3 01 00       	jmp    c001fd14 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 20 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fe0]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 69 e3 01 00       	jmp    c001fd5b <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 20 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fe0]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 91 e3 01 00       	jmp    c001fda2 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 c8 36 02 00       	call   c00253bc <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 00 7e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8200]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 00 7e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8200]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 00 7d 02 c0       	mov    edx,0xc0027d00
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 20 7e 02 c0       	mov    edx,0xc0027e20
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 2c 7e 02 c0       	mov    edx,0xc0027e2c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 00 c9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3700]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 e0 c8 02 c0    	mov    ax,ds:0xc002c8e0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 e0 c8 02 c0    	mov    ds:0xc002c8e0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 c5 24 02 00       	call   c00253bc <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 32 7e 02 c0       	mov    eax,0xc0027e32
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 80 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8280]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 3b 7e 02 c0       	mov    eax,0xc0027e3b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 00 7e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8200]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 90 0e 02 00       	call   c00253bc <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 00 7d 02 c0       	mov    edx,0xc0027d00
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 00 c9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3700]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 00 c9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3700],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 57 f8 01 00       	call   c00253bc <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 3d f8 01 00       	call   c00253bc <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 57 7d 02 c0       	mov    eax,0xc0027d57
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 50 7d 02 c0       	mov    eax,0xc0027d50
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 00 c9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3700]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 40 7d 02 c0       	mov    esi,0xc0027d40
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 80 df 01 00       	call   c00253bc <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 20 7e 02 c0       	mov    edx,0xc0027e20
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 30 7d 02 c0       	mov    edx,0xc0027d30
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 42 7e 02 c0       	mov    edx,0xc0027e42
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 4e 7e 02 c0       	mov    edx,0xc0027e4e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 62 7e 02 c0       	mov    edx,0xc0027e62
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 80 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028180
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 80 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028180
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 80 7f 02 c0       	mov    eax,0xc0027f80
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 c0 7e 02 c0       	mov    eax,0xc0027ec0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 80 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8180]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 d4 e8 01 00       	call   c0026e8f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 97 e8 01 00       	call   c0026e71 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 6b e8 01 00       	call   c0026e8f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 1e df 01 00       	call   c0026594 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 98 e9 01 00       	call   c0027020 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 e5 e7 01 00       	call   c0026e8f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 27 e7 01 00       	call   c0026e8f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 f4 e6 01 00       	call   c0026e71 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 e1 e5 01 00       	call   c0026e8f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 a9 e5 01 00       	call   c0026e71 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 80 82 02 c0       	mov    eax,0xc0028280
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 b5 e3 01 00       	call   c0026e8f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 7a e3 01 00       	call   c0026e71 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 e0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7920]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 8a e0 01 00       	call   c0026c23 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 08 da 01 00       	call   c00265c0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 c4 e2 01 00       	call   c0026e93 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 b2 e3 01 00       	call   c0026fb7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 9c d9 01 00       	call   c00265c0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 47 e2 01 00       	call   c0026e8d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 28 e2 01 00       	call   c0026e91 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 b6 e3 01 00       	call   c0027040 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 68 df 01 00       	call   c0026c23 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 e6 d8 01 00       	call   c00265c0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 a2 e1 01 00       	call   c0026e93 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 90 e2 01 00       	call   c0026fb7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 7a d8 01 00       	call   c00265c0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 25 e1 01 00       	call   c0026e8d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 05 e1 01 00       	call   c0026e91 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 92 e2 01 00       	call   c0027040 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 40 e0 01 00       	call   c0026e8f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 fe df 01 00       	call   c0026e71 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 e6 df 01 00       	call   c0026e8f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 58 dd 01 00       	call   c0026c23 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 5a d0 01 00       	call   c0025f43 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 bd d6 01 00       	call   c00265c0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 0f dd 01 00       	call   c0026c23 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 15 d0 01 00       	call   c0025f43 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 e4 dc 01 00       	call   c0026c23 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 34 df 01 00       	call   c0026e8d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 11 d6 01 00       	call   c0026594 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 8b e0 01 00       	call   c0027020 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 ba de 01 00       	call   c0026e71 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 b5 d5 01 00       	call   c0026594 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 33 dc 01 00       	call   c0026c23 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 b6 d5 01 00       	call   c00265c0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 08 dc 01 00       	call   c0026c23 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 6f d8 01 00       	call   c00268a4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 ee ce 01 00       	call   c0025f43 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 4e c8 01 00       	call   c00258d8 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 25 df 01 00       	call   c0026fb7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 0e d5 01 00       	call   c00265c0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 f5 de 01 00       	call   c0026fb7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 67 ce 01 00       	call   c0025f43 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 a0 dd 01 00       	call   c0026e93 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 88 d7 01 00       	call   c00268a4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 0e ce 01 00       	call   c0025f43 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 f4 de 01 00       	call   c0027040 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 ce da 01 00       	call   c0026c23 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 25 d4 01 00       	call   c0026594 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 04 dd 01 00       	call   c0026e8f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 9d cd 01 00       	call   c0025f43 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 c9 d3 01 00       	call   c0026594 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 63 de 01 00       	call   c0027040 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 1c da 01 00       	call   c0026c23 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 99 d3 01 00       	call   c00265c0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 ec d9 01 00       	call   c0026c23 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 f2 cc 01 00       	call   c0025f43 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 c2 d9 01 00       	call   c0026c23 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 14 dc 01 00       	call   c0026e8f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 eb d2 01 00       	call   c0026594 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 65 dd 01 00       	call   c0027020 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 94 db 01 00       	call   c0026e71 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 8e d2 01 00       	call   c0026594 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 0c d9 01 00       	call   c0026c23 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 8f d2 01 00       	call   c00265c0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 e1 d8 01 00       	call   c0026c23 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 48 d5 01 00       	call   c00268a4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 c7 cb 01 00       	call   c0025f43 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 17 c5 01 00       	call   c00258d8 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 ee db 01 00       	call   c0026fb7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 d7 d1 01 00       	call   c00265c0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 be db 01 00       	call   c0026fb7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 30 cb 01 00       	call   c0025f43 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 69 da 01 00       	call   c0026e93 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 50 d4 01 00       	call   c00268a4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 cf ca 01 00       	call   c0025f43 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 b5 db 01 00       	call   c0027040 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 8f d7 01 00       	call   c0026c23 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 e6 d0 01 00       	call   c0026594 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 c5 d9 01 00       	call   c0026e8f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 5e ca 01 00       	call   c0025f43 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 8a d0 01 00       	call   c0026594 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 ff d6 01 00       	call   c0026c23 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 05 ca 01 00       	call   c0025f43 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 40 87 02 c0       	mov    eax,0xc0028740
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 54 87 02 c0       	mov    eax,0xc0028754
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 7a d5 01 00       	call   c0026c23 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 f8 ce 01 00       	call   c00265c0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 8a c1 01 00       	call   c00258d8 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 61 d8 01 00       	call   c0026fb7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 4a ce 01 00       	call   c00265c0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 2d d8 01 00       	call   c0026fb7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 9f c7 01 00       	call   c0025f43 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 ff d7 01 00       	call   c0026fb7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 ee cd 01 00       	call   c00265c0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 57 c7 01 00       	call   c0025f43 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 78 c0 01 00       	call   c00258d8 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 4f d7 01 00       	call   c0026fb7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 38 cd 01 00       	call   c00265c0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 1b d7 01 00       	call   c0026fb7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 8d c6 01 00       	call   c0025f43 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 ed d6 01 00       	call   c0026fb7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 dc cc 01 00       	call   c00265c0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 45 c6 01 00       	call   c0025f43 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 23 c6 01 00       	call   c0025f43 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 ff be 01 00       	call   c00258d8 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 d6 d5 01 00       	call   c0026fb7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 bf cb 01 00       	call   c00265c0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 a2 d5 01 00       	call   c0026fb7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 14 c5 01 00       	call   c0025f43 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 74 d5 01 00       	call   c0026fb7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 5d cb 01 00       	call   c00265c0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 c6 c4 01 00       	call   c0025f43 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 26 d5 01 00       	call   c0026fb7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 0f cb 01 00       	call   c00265c0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 78 c4 01 00       	call   c0025f43 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 8d bd 01 00       	call   c00258d8 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 64 d4 01 00       	call   c0026fb7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 4d ca 01 00       	call   c00265c0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 34 d4 01 00       	call   c0026fb7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 a6 c3 01 00       	call   c0025f43 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 06 d4 01 00       	call   c0026fb7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 ef c9 01 00       	call   c00265c0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 58 c3 01 00       	call   c0025f43 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 b8 d3 01 00       	call   c0026fb7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 a1 c9 01 00       	call   c00265c0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 0a c3 01 00       	call   c0025f43 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 de c2 01 00       	call   c0025f43 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 3b c9 01 00       	call   c00265c0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 f7 d1 01 00       	call   c0026e93 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 86 c2 01 00       	call   c0025f43 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 e3 c8 01 00       	call   c00265c0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 9f d1 01 00       	call   c0026e93 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 19 bb 01 00       	call   c00258d8 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 f0 d1 01 00       	call   c0026fb7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 d9 c7 01 00       	call   c00265c0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 bc d1 01 00       	call   c0026fb7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 2e c1 01 00       	call   c0025f43 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 8e d1 01 00       	call   c0026fb7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 77 c7 01 00       	call   c00265c0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 e0 c0 01 00       	call   c0025f43 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 40 d1 01 00       	call   c0026fb7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 29 c7 01 00       	call   c00265c0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 92 c0 01 00       	call   c0025f43 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 f2 d0 01 00       	call   c0026fb7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 db c6 01 00       	call   c00265c0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 44 c0 01 00       	call   c0025f43 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 a4 d0 01 00       	call   c0026fb7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 8d c6 01 00       	call   c00265c0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 f6 bf 01 00       	call   c0025f43 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 f8 b8 01 00       	call   c00258d8 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 cf cf 01 00       	call   c0026fb7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 b8 c5 01 00       	call   c00265c0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 9f cf 01 00       	call   c0026fb7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 11 bf 01 00       	call   c0025f43 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 71 cf 01 00       	call   c0026fb7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 5a c5 01 00       	call   c00265c0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 c3 be 01 00       	call   c0025f43 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 23 cf 01 00       	call   c0026fb7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 0c c5 01 00       	call   c00265c0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 75 be 01 00       	call   c0025f43 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 d5 ce 01 00       	call   c0026fb7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 be c4 01 00       	call   c00265c0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 27 be 01 00       	call   c0025f43 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 87 ce 01 00       	call   c0026fb7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 70 c4 01 00       	call   c00265c0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 d9 bd 01 00       	call   c0025f43 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 ad bd 01 00       	call   c0025f43 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 0a c4 01 00       	call   c00265c0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 c6 cc 01 00       	call   c0026e93 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 55 bd 01 00       	call   c0025f43 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 b2 c3 01 00       	call   c00265c0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 6e cc 01 00       	call   c0026e93 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 fc bc 01 00       	call   c0025f43 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 59 c3 01 00       	call   c00265c0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 15 cc 01 00       	call   c0026e93 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 a3 bc 01 00       	call   c0025f43 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 00 c3 01 00       	call   c00265c0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 bc cb 01 00       	call   c0026e93 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 1a b5 01 00       	call   c00258d8 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 f1 cb 01 00       	call   c0026fb7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 da c1 01 00       	call   c00265c0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 bd cb 01 00       	call   c0026fb7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 2f bb 01 00       	call   c0025f43 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 8f cb 01 00       	call   c0026fb7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 78 c1 01 00       	call   c00265c0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 e1 ba 01 00       	call   c0025f43 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 41 cb 01 00       	call   c0026fb7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 2a c1 01 00       	call   c00265c0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 93 ba 01 00       	call   c0025f43 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 f3 ca 01 00       	call   c0026fb7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 dc c0 01 00       	call   c00265c0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 45 ba 01 00       	call   c0025f43 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 a5 ca 01 00       	call   c0026fb7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 8e c0 01 00       	call   c00265c0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 f7 b9 01 00       	call   c0025f43 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 57 ca 01 00       	call   c0026fb7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 40 c0 01 00       	call   c00265c0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 a6 b9 01 00       	call   c0025f43 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 06 ca 01 00       	call   c0026fb7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 ef bf 01 00       	call   c00265c0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 58 b9 01 00       	call   c0025f43 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 52 b2 01 00       	call   c00258d8 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 29 c9 01 00       	call   c0026fb7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 12 bf 01 00       	call   c00265c0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 f2 c8 01 00       	call   c0026fb7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 64 b8 01 00       	call   c0025f43 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 c4 c8 01 00       	call   c0026fb7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 ad be 01 00       	call   c00265c0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 16 b8 01 00       	call   c0025f43 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 76 c8 01 00       	call   c0026fb7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 5f be 01 00       	call   c00265c0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 c8 b7 01 00       	call   c0025f43 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 28 c8 01 00       	call   c0026fb7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 11 be 01 00       	call   c00265c0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 7a b7 01 00       	call   c0025f43 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 da c7 01 00       	call   c0026fb7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 c3 bd 01 00       	call   c00265c0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 2c b7 01 00       	call   c0025f43 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 8c c7 01 00       	call   c0026fb7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 75 bd 01 00       	call   c00265c0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 db b6 01 00       	call   c0025f43 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 3b c7 01 00       	call   c0026fb7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 24 bd 01 00       	call   c00265c0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 93 b6 01 00       	call   c0025f43 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 6c b6 01 00       	call   c0025f43 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 ca bc 01 00       	call   c00265c0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 86 c5 01 00       	call   c0026e93 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 15 b6 01 00       	call   c0025f43 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 73 bc 01 00       	call   c00265c0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 2f c5 01 00       	call   c0026e93 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 bd b5 01 00       	call   c0025f43 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 1b bc 01 00       	call   c00265c0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 d7 c4 01 00       	call   c0026e93 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 65 b5 01 00       	call   c0025f43 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 c3 bb 01 00       	call   c00265c0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 7f c4 01 00       	call   c0026e93 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 0d b5 01 00       	call   c0025f43 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 6b bb 01 00       	call   c00265c0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 27 c4 01 00       	call   c0026e93 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 bb b4 01 00       	call   c0025f43 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 19 bb 01 00       	call   c00265c0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 d5 c3 01 00       	call   c0026e93 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 e9 ac 01 00       	call   c00258d8 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 c0 c3 01 00       	call   c0026fb7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 a9 b9 01 00       	call   c00265c0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 90 c3 01 00       	call   c0026fb7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 02 b3 01 00       	call   c0025f43 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 84 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd787c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 36 c3 01 00       	call   c0026fb7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 1f b9 01 00       	call   c00265c0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 8a b2 01 00       	call   c0025f43 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 d7 c2 01 00       	call   c0026fb7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 c0 b8 01 00       	call   c00265c0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 2b b2 01 00       	call   c0025f43 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 78 c2 01 00       	call   c0026fb7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 61 b8 01 00       	call   c00265c0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 cc b1 01 00       	call   c0025f43 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 19 c2 01 00       	call   c0026fb7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 02 b8 01 00       	call   c00265c0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 6d b1 01 00       	call   c0025f43 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 ba c1 01 00       	call   c0026fb7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 a3 b7 01 00       	call   c00265c0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 0e b1 01 00       	call   c0025f43 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 5b c1 01 00       	call   c0026fb7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 44 b7 01 00       	call   c00265c0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 af b0 01 00       	call   c0025f43 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 fc c0 01 00       	call   c0026fb7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 e5 b6 01 00       	call   c00265c0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 50 b0 01 00       	call   c0025f43 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 9d c0 01 00       	call   c0026fb7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 86 b6 01 00       	call   c00265c0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 f1 af 01 00       	call   c0025f43 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 fb a8 01 00       	call   c00258d8 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 d2 bf 01 00       	call   c0026fb7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 bb b5 01 00       	call   c00265c0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 a2 bf 01 00       	call   c0026fb7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 14 af 01 00       	call   c0025f43 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 a0 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7860]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 47 bf 01 00       	call   c0026fb7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 30 b5 01 00       	call   c00265c0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 9b ae 01 00       	call   c0025f43 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 e7 be 01 00       	call   c0026fb7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 d0 b4 01 00       	call   c00265c0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 3b ae 01 00       	call   c0025f43 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 87 be 01 00       	call   c0026fb7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 70 b4 01 00       	call   c00265c0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 db ad 01 00       	call   c0025f43 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 27 be 01 00       	call   c0026fb7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 10 b4 01 00       	call   c00265c0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 7b ad 01 00       	call   c0025f43 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 c7 bd 01 00       	call   c0026fb7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 b0 b3 01 00       	call   c00265c0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 1b ad 01 00       	call   c0025f43 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 67 bd 01 00       	call   c0026fb7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 50 b3 01 00       	call   c00265c0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 bb ac 01 00       	call   c0025f43 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 07 bd 01 00       	call   c0026fb7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 f0 b2 01 00       	call   c00265c0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 5b ac 01 00       	call   c0025f43 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 a7 bc 01 00       	call   c0026fb7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 90 b2 01 00       	call   c00265c0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 fb ab 01 00       	call   c0025f43 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 bc 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7844]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 a0 ab 01 00       	call   c0025f43 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 fd b1 01 00       	call   c00265c0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 b9 ba 01 00       	call   c0026e93 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 43 ab 01 00       	call   c0025f43 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 a0 b1 01 00       	call   c00265c0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 5c ba 01 00       	call   c0026e93 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 e6 aa 01 00       	call   c0025f43 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 43 b1 01 00       	call   c00265c0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 ff b9 01 00       	call   c0026e93 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 89 aa 01 00       	call   c0025f43 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 e6 b0 01 00       	call   c00265c0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 a2 b9 01 00       	call   c0026e93 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 2c aa 01 00       	call   c0025f43 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 89 b0 01 00       	call   c00265c0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 45 b9 01 00       	call   c0026e93 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 cf a9 01 00       	call   c0025f43 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 2c b0 01 00       	call   c00265c0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 e8 b8 01 00       	call   c0026e93 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 72 a9 01 00       	call   c0025f43 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 cf af 01 00       	call   c00265c0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 8b b8 01 00       	call   c0026e93 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 15 a9 01 00       	call   c0025f43 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 72 af 01 00       	call   c00265c0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 2e b8 01 00       	call   c0026e93 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 2a af 01 00       	call   c00265c0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 9a b9 01 00       	jmp    c0027040 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 0c b6 01 00       	call   c0026e8f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 ca b5 01 00       	call   c0026e71 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 61 b3 01 00       	call   c0026c23 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 62 a6 01 00       	call   c0025f43 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 31 b3 01 00       	call   c0026c23 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 98 af 01 00       	call   c00268a4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 37 b5 01 00       	call   c0026e71 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 3a b5 01 00       	call   c0026e8f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 0d b5 01 00       	call   c0026e8f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 06 af 01 00       	call   c00268a4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 88 b6 01 00       	call   c0027040 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 63 b6 01 00       	call   c0027040 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 3d b2 01 00       	call   c0026c23 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 94 ab 01 00       	call   c0026594 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 73 b4 01 00       	call   c0026e8f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 0c a5 01 00       	call   c0025f43 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 30 ab 01 00       	call   c0026594 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 ca b5 01 00       	call   c0027040 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 0a ae 01 00       	call   c00268a4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 87 a4 01 00       	call   c0025f43 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 b3 b0 01 00       	call   c0026c23 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 b3 a3 01 00       	call   c0025f43 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 93 a3 01 00       	call   c0025f43 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 63 b0 01 00       	call   c0026c23 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 b3 b2 01 00       	call   c0026e8d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 92 a9 01 00       	call   c0026594 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 0c b4 01 00       	call   c0027020 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 3b b2 01 00       	call   c0026e71 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 39 a9 01 00       	call   c0026594 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 b7 af 01 00       	call   c0026c23 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 3a a9 01 00       	call   c00265c0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 8c af 01 00       	call   c0026c23 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 f3 ab 01 00       	call   c00268a4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 72 a2 01 00       	call   c0025f43 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 3c af 01 00       	call   c0026c23 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 88 b1 01 00       	call   c0026e8f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 7d a8 01 00       	call   c00265c0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 4f a8 01 00       	call   c00265c0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 88 ae 01 00       	call   c0026c23 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 ec aa 01 00       	call   c00268a4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 b4 aa 01 00       	call   c00268a4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 33 a1 01 00       	call   c0025f43 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 18 b2 01 00       	call   c0027040 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 f2 ad 01 00       	call   c0026c23 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 49 a7 01 00       	call   c0026594 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 28 b0 01 00       	call   c0026e8f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 c0 a0 01 00       	call   c0025f43 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 e4 a6 01 00       	call   c0026594 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 7e b1 01 00       	call   c0027040 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 47 af 01 00       	call   c0026e8f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 05 af 01 00       	call   c0026e71 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 9c ac 01 00       	call   c0026c23 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 9d 9f 01 00       	call   c0025f43 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 6c ac 01 00       	call   c0026c23 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 d3 a8 01 00       	call   c00268a4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 72 ae 01 00       	call   c0026e71 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 75 ae 01 00       	call   c0026e8f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 48 ae 01 00       	call   c0026e8f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 41 a8 01 00       	call   c00268a4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 c3 af 01 00       	call   c0027040 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 9e af 01 00       	call   c0027040 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 78 ab 01 00       	call   c0026c23 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 cf a4 01 00       	call   c0026594 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 ae ad 01 00       	call   c0026e8f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 47 9e 01 00       	call   c0025f43 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 6b a4 01 00       	call   c0026594 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 05 af 01 00       	call   c0027040 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 45 a7 01 00       	call   c00268a4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 c2 9d 01 00       	call   c0025f43 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 ed a9 01 00       	call   c0026c23 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 ed 9c 01 00       	call   c0025f43 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 cd 9c 01 00       	call   c0025f43 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 9d a9 01 00       	call   c0026c23 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 ed ab 01 00       	call   c0026e8d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 cb a2 01 00       	call   c0026594 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 45 ad 01 00       	call   c0027020 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 74 ab 01 00       	call   c0026e71 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 71 a2 01 00       	call   c0026594 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 ef a8 01 00       	call   c0026c23 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 72 a2 01 00       	call   c00265c0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 c4 a8 01 00       	call   c0026c23 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 2b a5 01 00       	call   c00268a4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 aa 9b 01 00       	call   c0025f43 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 74 a8 01 00       	call   c0026c23 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 c0 aa 01 00       	call   c0026e8f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 b5 a1 01 00       	call   c00265c0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 87 a1 01 00       	call   c00265c0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 be a7 01 00       	call   c0026c23 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 22 a4 01 00       	call   c00268a4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 ef a3 01 00       	call   c00268a4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 6e 9a 01 00       	call   c0025f43 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 53 ab 01 00       	call   c0027040 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 2d a7 01 00       	call   c0026c23 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 84 a0 01 00       	call   c0026594 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 63 a9 01 00       	call   c0026e8f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 fb 99 01 00       	call   c0025f43 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 1f a0 01 00       	call   c0026594 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 b9 aa 01 00       	call   c0027040 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 82 a8 01 00       	call   c0026e8f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 40 a8 01 00       	call   c0026e71 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 d7 a5 01 00       	call   c0026c23 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 d8 98 01 00       	call   c0025f43 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 a7 a5 01 00       	call   c0026c23 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 0e a2 01 00       	call   c00268a4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 ad a7 01 00       	call   c0026e71 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 b0 a7 01 00       	call   c0026e8f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 83 a7 01 00       	call   c0026e8f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 7c a1 01 00       	call   c00268a4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 fe a8 01 00       	call   c0027040 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 d9 a8 01 00       	call   c0027040 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 b3 a4 01 00       	call   c0026c23 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 0a 9e 01 00       	call   c0026594 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 e9 a6 01 00       	call   c0026e8f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 82 97 01 00       	call   c0025f43 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 a6 9d 01 00       	call   c0026594 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 40 a8 01 00       	call   c0027040 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 80 a0 01 00       	call   c00268a4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 fd 96 01 00       	call   c0025f43 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 28 a3 01 00       	call   c0026c23 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 28 96 01 00       	call   c0025f43 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 08 96 01 00       	call   c0025f43 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 d8 a2 01 00       	call   c0026c23 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 28 a5 01 00       	call   c0026e8d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 06 9c 01 00       	call   c0026594 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 80 a6 01 00       	call   c0027020 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 af a4 01 00       	call   c0026e71 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 ac 9b 01 00       	call   c0026594 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 2a a2 01 00       	call   c0026c23 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 ad 9b 01 00       	call   c00265c0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 ff a1 01 00       	call   c0026c23 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 66 9e 01 00       	call   c00268a4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 e5 94 01 00       	call   c0025f43 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 af a1 01 00       	call   c0026c23 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 fb a3 01 00       	call   c0026e8f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 f0 9a 01 00       	call   c00265c0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 c2 9a 01 00       	call   c00265c0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 f9 a0 01 00       	call   c0026c23 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 5d 9d 01 00       	call   c00268a4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 2a 9d 01 00       	call   c00268a4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 a9 93 01 00       	call   c0025f43 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 8e a4 01 00       	call   c0027040 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 68 a0 01 00       	call   c0026c23 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 bf 99 01 00       	call   c0026594 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 9e a2 01 00       	call   c0026e8f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 36 93 01 00       	call   c0025f43 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 5a 99 01 00       	call   c0026594 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 f4 a3 01 00       	call   c0027040 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 bd a1 01 00       	call   c0026e8f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 7b a1 01 00       	call   c0026e71 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 12 9f 01 00       	call   c0026c23 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 13 92 01 00       	call   c0025f43 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 e2 9e 01 00       	call   c0026c23 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 49 9b 01 00       	call   c00268a4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 e8 a0 01 00       	call   c0026e71 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 eb a0 01 00       	call   c0026e8f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 be a0 01 00       	call   c0026e8f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 b7 9a 01 00       	call   c00268a4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 39 a2 01 00       	call   c0027040 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 14 a2 01 00       	call   c0027040 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 ee 9d 01 00       	call   c0026c23 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 45 97 01 00       	call   c0026594 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 24 a0 01 00       	call   c0026e8f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 bd 90 01 00       	call   c0025f43 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 e1 96 01 00       	call   c0026594 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 7b a1 01 00       	call   c0027040 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 bb 99 01 00       	call   c00268a4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 38 90 01 00       	call   c0025f43 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 63 9c 01 00       	call   c0026c23 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 63 8f 01 00       	call   c0025f43 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 43 8f 01 00       	call   c0025f43 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 13 9c 01 00       	call   c0026c23 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 63 9e 01 00       	call   c0026e8d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 41 95 01 00       	call   c0026594 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 bb 9f 01 00       	call   c0027020 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 ea 9d 01 00       	call   c0026e71 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 e7 94 01 00       	call   c0026594 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 65 9b 01 00       	call   c0026c23 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 e8 94 01 00       	call   c00265c0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 3a 9b 01 00       	call   c0026c23 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 a1 97 01 00       	call   c00268a4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 20 8e 01 00       	call   c0025f43 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 ea 9a 01 00       	call   c0026c23 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 36 9d 01 00       	call   c0026e8f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 2b 94 01 00       	call   c00265c0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 fd 93 01 00       	call   c00265c0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 34 9a 01 00       	call   c0026c23 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 98 96 01 00       	call   c00268a4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 65 96 01 00       	call   c00268a4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 e4 8c 01 00       	call   c0025f43 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 c9 9d 01 00       	call   c0027040 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 a3 99 01 00       	call   c0026c23 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 fa 92 01 00       	call   c0026594 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 d9 9b 01 00       	call   c0026e8f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 71 8c 01 00       	call   c0025f43 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 95 92 01 00       	call   c0026594 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 2f 9d 01 00       	call   c0027040 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 f5 9a 01 00       	call   c0026e8f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 b3 9a 01 00       	call   c0026e71 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 4a 98 01 00       	call   c0026c23 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 4b 8b 01 00       	call   c0025f43 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 1a 98 01 00       	call   c0026c23 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 81 94 01 00       	call   c00268a4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 20 9a 01 00       	call   c0026e71 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 23 9a 01 00       	call   c0026e8f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 f6 99 01 00       	call   c0026e8f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 ef 93 01 00       	call   c00268a4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 71 9b 01 00       	call   c0027040 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 48 9b 01 00       	call   c0027040 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 22 97 01 00       	call   c0026c23 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 79 90 01 00       	call   c0026594 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 58 99 01 00       	call   c0026e8f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 f1 89 01 00       	call   c0025f43 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 19 90 01 00       	call   c0026594 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 b3 9a 01 00       	call   c0027040 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 f4 92 01 00       	call   c00268a4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 71 89 01 00       	call   c0025f43 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 9d 95 01 00       	call   c0026c23 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 9d 88 01 00       	call   c0025f43 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 7d 88 01 00       	call   c0025f43 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 4d 95 01 00       	call   c0026c23 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 81 97 01 00       	call   c0026e71 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 78 8e 01 00       	call   c0026594 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 f2 98 01 00       	call   c0027020 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 21 97 01 00       	call   c0026e71 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 1b 8e 01 00       	call   c0026594 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 99 94 01 00       	call   c0026c23 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 1c 8e 01 00       	call   c00265c0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 6e 94 01 00       	call   c0026c23 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 d5 90 01 00       	call   c00268a4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 54 87 01 00       	call   c0025f43 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 1e 94 01 00       	call   c0026c23 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 6a 96 01 00       	call   c0026e8f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 5f 8d 01 00       	call   c00265c0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 31 8d 01 00       	call   c00265c0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 75 93 01 00       	call   c0026c23 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 dc 8f 01 00       	call   c00268a4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 c5 8c 01 00       	call   c00265c0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 81 95 01 00       	call   c0026e93 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 74 8f 01 00       	call   c00268a4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 f3 85 01 00       	call   c0025f43 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 d8 96 01 00       	call   c0027040 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 b2 92 01 00       	call   c0026c23 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 09 8c 01 00       	call   c0026594 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 e8 94 01 00       	call   c0026e8f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 80 85 01 00       	call   c0025f43 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 a8 8b 01 00       	call   c0026594 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 42 96 01 00       	call   c0027040 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 e4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd781c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 d8 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7828]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 fd 92 01 00       	call   c0026e8f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 bb 92 01 00       	call   c0026e71 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 a7 92 01 00       	call   c0026e8f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 19 90 01 00       	call   c0026c23 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 97 89 01 00       	call   c00265c0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 e9 8f 01 00       	call   c0026c23 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 ef 82 01 00       	call   c0025f43 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 be 8f 01 00       	call   c0026c23 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 0e 92 01 00       	call   c0026e8d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 ef 88 01 00       	call   c0026594 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 69 93 01 00       	call   c0027020 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 98 91 01 00       	call   c0026e71 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 97 88 01 00       	call   c0026594 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 15 8f 01 00       	call   c0026c23 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 98 88 01 00       	call   c00265c0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 ea 8e 01 00       	call   c0026c23 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 51 8b 01 00       	call   c00268a4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 d0 81 01 00       	call   c0025f43 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 f8 8a 01 00       	call   c00268a4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 7e 81 01 00       	call   c0025f43 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 64 92 01 00       	call   c0027040 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 3e 8e 01 00       	call   c0026c23 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 95 87 01 00       	call   c0026594 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 74 90 01 00       	call   c0026e8f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 0d 81 01 00       	call   c0025f43 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 39 87 01 00       	call   c0026594 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 d3 91 01 00       	call   c0027040 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 88 8d 01 00       	call   c0026c23 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 05 87 01 00       	call   c00265c0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 56 8d 01 00       	call   c0026c23 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 5c 80 01 00       	call   c0025f43 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 2c 8d 01 00       	call   c0026c23 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 80 8f 01 00       	call   c0026e91 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 59 86 01 00       	call   c0026594 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 d3 90 01 00       	call   c0027020 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 02 8f 01 00       	call   c0026e71 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 00 86 01 00       	call   c0026594 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 7e 8c 01 00       	call   c0026c23 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 01 86 01 00       	call   c00265c0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 53 8c 01 00       	call   c0026c23 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 ba 88 01 00       	call   c00268a4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 39 7f 01 00       	call   c0025f43 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 55 88 01 00       	call   c00268a4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 d4 7e 01 00       	call   c0025f43 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 ba 8f 01 00       	call   c0027040 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 94 8b 01 00       	call   c0026c23 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 eb 84 01 00       	call   c0026594 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 ca 8d 01 00       	call   c0026e8f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 63 7e 01 00       	call   c0025f43 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 8f 84 01 00       	call   c0026594 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 00 8b 01 00       	call   c0026c23 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 06 7e 01 00       	call   c0025f43 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 fe 88 02 c0       	mov    eax,0xc00288fe
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 0f 89 02 c0       	mov    eax,0xc002890f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 2b 5a 00 00       	call   c0013cee <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 46 89 02 c0       	push   0xc0028946
c000e2f9:	50                   	push   eax
c000e2fa:	e8 69 5a 00 00       	call   c0013d68 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c000e46b:	68 4f 89 02 c0       	push   0xc002894f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 ee e6 00 00       	call   c001cb66 <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 d7 e9 00 00       	call   c001ce64 <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 c2 d6 01 c0       	push   0xc001d6c2
c000e496:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c000e49c:	e8 c3 e9 00 00       	call   c001ce64 <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 68 de 02 c0       	mov    ds:0xc002de68,eax
c000e4a9:	e8 95 f5 00 00       	call   c001da43 <Vm::initialise8086()>
c000e4ae:	c6 05 6d c9 02 c0 01 	mov    BYTE PTR ds:0xc002c96d,0x1
c000e4b5:	e8 2a 46 00 00       	call   c0012ae4 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 99 b2 00 00       	call   c001976a <Krnl::loadSystemEnv()>
c000e4d1:	e8 38 d0 00 00       	call   c001b50e <setupSystemCalls()>
c000e4d6:	e8 1b 51 00 00       	call   c00135f6 <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 df 57 00 00       	call   c0013cc2 <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 5c 89 02 c0       	push   0xc002895c
c000e4f2:	e8 c7 e1 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 cd e3 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 d8 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bd8
c000e507:	e8 7d 42 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 af ec 00 00       	call   c001d1c8 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 81 c9 02 c0 04 	test   BYTE PTR ds:0xc002c981,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 0f 6b 01 00       	call   c0025086 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 7a 9b 00 00       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 53 9b 00 00       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 31 9b 00 00       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 0f 9b 00 00       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 80 c9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c980,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 1d 9a 00 00       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 f8 99 00 00       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 79 69 01 00       	call   c0025040 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 36 69 01 00       	call   c0025020 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 14 9a 00 00       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 7f 89 02 c0       	push   0xc002897f
c000e743:	e8 41 40 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 92 89 02 c0       	push   0xc0028992
c000e766:	e8 1e 40 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 a3 89 02 c0       	push   0xc00289a3
c000e789:	e8 fb 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 b4 89 02 c0       	push   0xc00289b4
c000e7ac:	e8 d8 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 c5 89 02 c0       	push   0xc00289c5
c000e7cf:	e8 b5 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 d6 89 02 c0       	push   0xc00289d6
c000e7f2:	e8 92 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 e7 89 02 c0       	push   0xc00289e7
c000e815:	e8 6f 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 f8 89 02 c0       	push   0xc00289f8
c000e838:	e8 4c 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 09 8a 02 c0       	push   0xc0028a09
c000e85b:	e8 29 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 1a 8a 02 c0       	push   0xc0028a1a
c000e87e:	e8 06 3f 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 2b 8a 02 c0       	push   0xc0028a2b
c000e8a1:	e8 e3 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 3c 8a 02 c0       	push   0xc0028a3c
c000e8c4:	e8 c0 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 4d 8a 02 c0       	push   0xc0028a4d
c000e8e7:	e8 9d 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 5e 8a 02 c0       	push   0xc0028a5e
c000e90a:	e8 7a 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 6f 8a 02 c0       	push   0xc0028a6f
c000e92d:	e8 57 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 80 8a 02 c0       	push   0xc0028a80
c000e950:	e8 34 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 91 8a 02 c0       	push   0xc0028a91
c000e973:	e8 11 3e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 a2 8a 02 c0       	push   0xc0028aa2
c000e996:	e8 ee 3d 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 b3 8a 02 c0       	push   0xc0028ab3
c000e9b5:	e8 cf 3d 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 7b a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a27b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 be 3d 00 00       	jmp    c0012789 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 78 89 02 c0       	mov    eax,0xc0028978
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 c4 8a 02 c0       	push   0xc0028ac4
c000ea9e:	e8 00 ae 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 ca 8a 02 c0       	push   0xc0028aca
c000ead6:	e8 c8 ad 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 80 c9 02 c0 04 	test   BYTE PTR ds:0xc002c980,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 a4 b8 02 c0 	sete   BYTE PTR ds:0xc002b8a4
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 ef 8b 00 00       	call   c0017738 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 20 50 00 00       	call   c0013b78 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 5c 96 00 00       	call   c00181e4 <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 e1 4f 00 00       	call   c0013b78 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 37 55 00 00       	call   c00140ea <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 b1 4f 00 00       	call   c0013b78 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 7b e3 00 00       	call   c001cf64 <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 d0 8a 02 c0       	push   0xc0028ad0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 52 3b 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 e1 8a 02 c0       	push   0xc0028ae1
c000ec54:	e8 4a ac 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ee 8a 02 c0       	push   0xc0028aee
c000ec69:	e8 35 ac 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 f8 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028af8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 1e ac 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 34 8b 02 c0       	push   0xc0028b34
c000ed1a:	e8 6a 3a 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 72 c9 02 c0       	mov    ds:0xc002c972,eax
c000ed5b:	66 89 15 70 c9 02 c0 	mov    WORD PTR ds:0xc002c970,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 c2 de 00 00       	call   c001cd34 <unlockScheduler()>
c000ee72:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 00 82 01 00       	call   c00270c0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 f7 81 01 00       	call   c00270c0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 78 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c978,0x7ff
c000efb7:	a3 7a c9 02 c0       	mov    ds:0xc002c97a,eax
c000efbc:	0f 01 1d 78 c9 02 c0 	lidtd  ds:0xc002c978
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 80 26 00 00       	call   c0011929 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 b0 2c 00 00       	call   c0011f64 <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 f8 1d 00 00       	call   c00110ca <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 29 1e 00 00       	call   c001110a <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 8c b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b88c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 8c b8 02 c0       	mov    eax,ds:0xc002b88c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 50 8b 02 c0       	push   0xc0028b50
c000f388:	e8 fc 33 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 8c b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b88c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 76 25 00 00       	call   c0011929 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 8c b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b88c
c000f3bb:	e8 f0 06 00 00       	call   c000fab0 <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 97 2a 00 00       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 8c b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b88c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 80 8b 02 c0       	push   0xc0028b80
c000f441:	e8 5d a4 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 85 8b 02 c0       	push   0xc0028b85
c000f457:	e8 47 a4 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 c5 d8 00 00       	call   c001cd32 <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 b6 d8 00 00       	call   c001cd34 <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 9a 24 00 00       	call   c0011929 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 c6 2a 00 00       	call   c0011f64 <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 7f 24 00 00       	call   c0011929 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 69 27 00 00       	call   c0011c20 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 a0 b8 02 c0       	mov    eax,ds:0xc002b8a0
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	57                   	push   edi
c000f57a:	8b 15 a0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8a0
c000f580:	56                   	push   esi
c000f581:	8d b2 a0 00 00 00    	lea    esi,[edx+0xa0]
c000f587:	53                   	push   ebx
c000f588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f58c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f590:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f596:	8b bb d8 0f 00 00    	mov    edi,DWORD PTR [ebx+0xfd8]
c000f59c:	c1 e0 04             	shl    eax,0x4
c000f59f:	83 e7 0f             	and    edi,0xf
c000f5a2:	0f b6 c0             	movzx  eax,al
c000f5a5:	41                   	inc    ecx
c000f5a6:	09 f8                	or     eax,edi
c000f5a8:	83 c2 02             	add    edx,0x2
c000f5ab:	0f b6 79 ff          	movzx  edi,BYTE PTR [ecx-0x1]
c000f5af:	c1 e0 08             	shl    eax,0x8
c000f5b2:	09 f8                	or     eax,edi
c000f5b4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5b8:	39 f2                	cmp    edx,esi
c000f5ba:	75 d4                	jne    c000f590 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>
c000f5bc:	5b                   	pop    ebx
c000f5bd:	5e                   	pop    esi
c000f5be:	5f                   	pop    edi
c000f5bf:	c3                   	ret    

c000f5c0 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5c0:	56                   	push   esi
c000f5c1:	53                   	push   ebx
c000f5c2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5c7:	74 38                	je     c000f601 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5c9:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5ce:	b0 0a                	mov    al,0xa
c000f5d0:	89 da                	mov    edx,ebx
c000f5d2:	ee                   	out    dx,al
c000f5d3:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5d8:	89 ca                	mov    edx,ecx
c000f5da:	ec                   	in     al,dx
c000f5db:	b2 0f                	mov    dl,0xf
c000f5dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5e1:	83 e0 c0             	and    eax,0xffffffc0
c000f5e4:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5ea:	09 d0                	or     eax,edx
c000f5ec:	89 ca                	mov    edx,ecx
c000f5ee:	ee                   	out    dx,al
c000f5ef:	b0 0b                	mov    al,0xb
c000f5f1:	89 da                	mov    edx,ebx
c000f5f3:	ee                   	out    dx,al
c000f5f4:	89 ca                	mov    edx,ecx
c000f5f6:	ec                   	in     al,dx
c000f5f7:	83 e0 e0             	and    eax,0xffffffe0
c000f5fa:	83 c8 0f             	or     eax,0xf
c000f5fd:	ee                   	out    dx,al
c000f5fe:	5b                   	pop    ebx
c000f5ff:	5e                   	pop    esi
c000f600:	c3                   	ret    
c000f601:	b0 0a                	mov    al,0xa
c000f603:	ba d4 03 00 00       	mov    edx,0x3d4
c000f608:	ee                   	out    dx,al
c000f609:	b0 20                	mov    al,0x20
c000f60b:	ba d5 03 00 00       	mov    edx,0x3d5
c000f610:	ee                   	out    dx,al
c000f611:	5b                   	pop    ebx
c000f612:	5e                   	pop    esi
c000f613:	c3                   	ret    

c000f614 <hwTextMode_update(VgaText*)>:
c000f614:	c3                   	ret    

c000f615 <hwTextMode_updateCursor(VgaText*)>:
c000f615:	56                   	push   esi
c000f616:	b9 19 00 00 00       	mov    ecx,0x19
c000f61b:	53                   	push   ebx
c000f61c:	be d4 03 00 00       	mov    esi,0x3d4
c000f621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f625:	89 f2                	mov    edx,esi
c000f627:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f62d:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f633:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f636:	c1 e1 04             	shl    ecx,0x4
c000f639:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f63f:	b0 0f                	mov    al,0xf
c000f641:	ee                   	out    dx,al
c000f642:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f647:	88 c8                	mov    al,cl
c000f649:	89 da                	mov    edx,ebx
c000f64b:	ee                   	out    dx,al
c000f64c:	b0 0e                	mov    al,0xe
c000f64e:	89 f2                	mov    edx,esi
c000f650:	ee                   	out    dx,al
c000f651:	89 c8                	mov    eax,ecx
c000f653:	89 da                	mov    edx,ebx
c000f655:	66 c1 e8 08          	shr    ax,0x8
c000f659:	ee                   	out    dx,al
c000f65a:	5b                   	pop    ebx
c000f65b:	5e                   	pop    esi
c000f65c:	c3                   	ret    

c000f65d <hwTextMode_disableBlink(VgaText*, bool)>:
c000f65d:	ba da 03 00 00       	mov    edx,0x3da
c000f662:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f667:	75 18                	jne    c000f681 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f669:	ec                   	in     al,dx
c000f66a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f66f:	b0 30                	mov    al,0x30
c000f671:	89 ca                	mov    edx,ecx
c000f673:	ee                   	out    dx,al
c000f674:	ba c1 03 00 00       	mov    edx,0x3c1
c000f679:	ec                   	in     al,dx
c000f67a:	83 c8 08             	or     eax,0x8
c000f67d:	89 ca                	mov    edx,ecx
c000f67f:	ee                   	out    dx,al
c000f680:	c3                   	ret    
c000f681:	ec                   	in     al,dx
c000f682:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f687:	b0 30                	mov    al,0x30
c000f689:	89 ca                	mov    edx,ecx
c000f68b:	ee                   	out    dx,al
c000f68c:	ba c1 03 00 00       	mov    edx,0x3c1
c000f691:	ec                   	in     al,dx
c000f692:	83 e0 f7             	and    eax,0xfffffff7
c000f695:	89 ca                	mov    edx,ecx
c000f697:	ee                   	out    dx,al
c000f698:	c3                   	ret    

c000f699 <hwTextMode_scrollScreen(VgaText*)>:
c000f699:	55                   	push   ebp
c000f69a:	bd 02 00 00 00       	mov    ebp,0x2
c000f69f:	57                   	push   edi
c000f6a0:	56                   	push   esi
c000f6a1:	53                   	push   ebx
c000f6a2:	83 ec 1c             	sub    esp,0x1c
c000f6a5:	a1 a0 b8 02 c0       	mov    eax,ds:0xc002b8a0
c000f6aa:	05 a0 00 00 00       	add    eax,0xa0
c000f6af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6b7:	31 c0                	xor    eax,eax
c000f6b9:	eb 0b                	jmp    c000f6c6 <hwTextMode_scrollScreen(VgaText*)+0x2d>
c000f6bb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c1:	74 57                	je     c000f71a <hwTextMode_scrollScreen(VgaText*)+0x81>
c000f6c3:	43                   	inc    ebx
c000f6c4:	89 f0                	mov    eax,esi
c000f6c6:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6cc:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6d2:	88 13                	mov    BYTE PTR [ebx],dl
c000f6d4:	8d 70 01             	lea    esi,[eax+0x1]
c000f6d7:	83 fd 18             	cmp    ebp,0x18
c000f6da:	75 df                	jne    c000f6bb <hwTextMode_scrollScreen(VgaText*)+0x22>
c000f6dc:	a8 01                	test   al,0x1
c000f6de:	75 13                	jne    c000f6f3 <hwTextMode_scrollScreen(VgaText*)+0x5a>
c000f6e0:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6e3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6e9:	75 d8                	jne    c000f6c3 <hwTextMode_scrollScreen(VgaText*)+0x2a>
c000f6eb:	83 c4 1c             	add    esp,0x1c
c000f6ee:	5b                   	pop    ebx
c000f6ef:	5e                   	pop    esi
c000f6f0:	5f                   	pop    edi
c000f6f1:	5d                   	pop    ebp
c000f6f2:	c3                   	ret    
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6fa:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f701:	50                   	push   eax
c000f702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f706:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f70d:	50                   	push   eax
c000f70e:	e8 e1 0b 00 00       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c000f713:	83 c4 10             	add    esp,0x10
c000f716:	88 07                	mov    BYTE PTR [edi],al
c000f718:	eb c9                	jmp    c000f6e3 <hwTextMode_scrollScreen(VgaText*)+0x4a>
c000f71a:	45                   	inc    ebp
c000f71b:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f723:	eb 8e                	jmp    c000f6b3 <hwTextMode_scrollScreen(VgaText*)+0x1a>

c000f725 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f725:	56                   	push   esi
c000f726:	53                   	push   ebx
c000f727:	83 ec 0c             	sub    esp,0xc
c000f72a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f72e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f732:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f737:	50                   	push   eax
c000f738:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f73d:	50                   	push   eax
c000f73e:	e8 b1 0b 00 00       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c000f743:	5a                   	pop    edx
c000f744:	0f b6 c0             	movzx  eax,al
c000f747:	59                   	pop    ecx
c000f748:	50                   	push   eax
c000f749:	89 f0                	mov    eax,esi
c000f74b:	0f be f0             	movsx  esi,al
c000f74e:	56                   	push   esi
c000f74f:	e8 5a 0c 00 00       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c000f754:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f758:	ba 19 00 00 00       	mov    edx,0x19
c000f75d:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f763:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f766:	8d 14 92             	lea    edx,[edx+edx*4]
c000f769:	c1 e1 04             	shl    ecx,0x4
c000f76c:	c1 e2 04             	shl    edx,0x4
c000f76f:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f773:	01 ca                	add    edx,ecx
c000f775:	8b 0d a0 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8a0
c000f77b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000f77f:	83 c4 14             	add    esp,0x14
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	c3                   	ret    

c000f785 <setupTextMode()>:
c000f785:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f78a:	83 e0 30             	and    eax,0x30
c000f78d:	66 83 f8 30          	cmp    ax,0x30
c000f791:	74 11                	je     c000f7a4 <setupTextMode()+0x1f>
c000f793:	81 2d a0 b8 02 c0 00 40 00 00 	sub    DWORD PTR ds:0xc002b8a0,0x4000
c000f79d:	c6 05 00 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca00,0x1
c000f7a4:	c7 05 38 ca 02 c0 5d f6 00 c0 	mov    DWORD PTR ds:0xc002ca38,0xc000f65d
c000f7ae:	c7 05 24 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002ca24,0xc000f52e
c000f7b8:	c7 05 20 ca 02 c0 79 f5 00 c0 	mov    DWORD PTR ds:0xc002ca20,0xc000f579
c000f7c2:	c7 05 2c ca 02 c0 99 f6 00 c0 	mov    DWORD PTR ds:0xc002ca2c,0xc000f699
c000f7cc:	c7 05 34 ca 02 c0 c0 f5 00 c0 	mov    DWORD PTR ds:0xc002ca34,0xc000f5c0
c000f7d6:	c7 05 28 ca 02 c0 14 f6 00 c0 	mov    DWORD PTR ds:0xc002ca28,0xc000f614
c000f7e0:	c7 05 30 ca 02 c0 15 f6 00 c0 	mov    DWORD PTR ds:0xc002ca30,0xc000f615
c000f7ea:	c7 05 3c ca 02 c0 25 f7 00 c0 	mov    DWORD PTR ds:0xc002ca3c,0xc000f725
c000f7f4:	c3                   	ret    

c000f7f5 <kernel_main>:
c000f7f5:	57                   	push   edi
c000f7f6:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7fb:	56                   	push   esi
c000f7fc:	31 f6                	xor    esi,esi
c000f7fe:	53                   	push   ebx
c000f7ff:	83 ec 10             	sub    esp,0x10
c000f802:	e8 47 09 00 00       	call   c001014e <installVgaTextImplementation()>
c000f807:	e8 79 ff ff ff       	call   c000f785 <setupTextMode()>
c000f80c:	89 f0                	mov    eax,esi
c000f80e:	89 fa                	mov    edx,edi
c000f810:	ee                   	out    dx,al
c000f811:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f816:	b0 80                	mov    al,0x80
c000f818:	89 da                	mov    edx,ebx
c000f81a:	ee                   	out    dx,al
c000f81b:	b1 03                	mov    cl,0x3
c000f81d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f822:	88 c8                	mov    al,cl
c000f824:	ee                   	out    dx,al
c000f825:	89 f0                	mov    eax,esi
c000f827:	89 fa                	mov    edx,edi
c000f829:	ee                   	out    dx,al
c000f82a:	88 c8                	mov    al,cl
c000f82c:	89 da                	mov    edx,ebx
c000f82e:	ee                   	out    dx,al
c000f82f:	b0 c7                	mov    al,0xc7
c000f831:	ba fa 03 00 00       	mov    edx,0x3fa
c000f836:	ee                   	out    dx,al
c000f837:	b0 0b                	mov    al,0xb
c000f839:	ba fc 03 00 00       	mov    edx,0x3fc
c000f83e:	ee                   	out    dx,al
c000f83f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f844:	83 ec 0c             	sub    esp,0xc
c000f847:	05 ff 0f 00 00       	add    eax,0xfff
c000f84c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f851:	50                   	push   eax
c000f852:	e8 b3 03 00 00       	call   c000fc0a <Phys::physicalMemorySetup(unsigned int)>
c000f857:	e8 4e 20 00 00       	call   c00118aa <Virt::virtualMemorySetup()>
c000f85c:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f862:	83 c4 10             	add    esp,0x10
c000f865:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f86b:	75 0e                	jne    c000f87b <kernel_main+0x86>
c000f86d:	89 d8                	mov    eax,ebx
c000f86f:	25 48 03 00 00       	and    eax,0x348
c000f874:	3d 00 03 00 00       	cmp    eax,0x300
c000f879:	74 10                	je     c000f88b <kernel_main+0x96>
c000f87b:	83 ec 0c             	sub    esp,0xc
c000f87e:	68 7c a2 02 c0       	push   0xc002a27c
c000f883:	e8 1b a0 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	83 ec 0c             	sub    esp,0xc
c000f88e:	89 1d 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,ebx
c000f894:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f898:	53                   	push   ebx
c000f899:	e8 c0 21 00 00       	call   c0011a5e <VAS::VAS()>
c000f89e:	89 1d e4 ca 02 c0    	mov    DWORD PTR ds:0xc002cae4,ebx
c000f8a4:	e8 77 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f8a9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f8b0:	e8 1f fc ff ff       	call   c000f4d4 <malloc>
c000f8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f8b8:	89 c6                	mov    esi,eax
c000f8ba:	e8 2b ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f8bf:	6a 00                	push   0x0
c000f8c1:	89 35 68 c9 02 c0    	mov    DWORD PTR ds:0xc002c968,esi
c000f8c7:	6a 00                	push   0x0
c000f8c9:	6a 00                	push   0x0
c000f8cb:	56                   	push   esi
c000f8cc:	e8 4d f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f8d1:	83 c4 14             	add    esp,0x14
c000f8d4:	53                   	push   ebx
c000f8d5:	e8 1e 24 00 00       	call   c0011cf8 <VAS::~VAS()>
c000f8da:	c7 04 24 8c 8b 02 c0 	mov    DWORD PTR [esp],0xc0028b8c
c000f8e1:	e8 bd 9f 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000f8e6:	83 c4 20             	add    esp,0x20
c000f8e9:	5b                   	pop    ebx
c000f8ea:	5e                   	pop    esi
c000f8eb:	5f                   	pop    edi
c000f8ec:	c3                   	ret    

c000f8ed <Phys::allocateDMA(unsigned long)>:
c000f8ed:	55                   	push   ebp
c000f8ee:	31 d2                	xor    edx,edx
c000f8f0:	57                   	push   edi
c000f8f1:	31 ed                	xor    ebp,ebp
c000f8f3:	56                   	push   esi
c000f8f4:	31 c9                	xor    ecx,ecx
c000f8f6:	53                   	push   ebx
c000f8f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8fb:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f901:	31 c0                	xor    eax,eax
c000f903:	c1 ee 0c             	shr    esi,0xc
c000f906:	eb 17                	jmp    c000f91f <Phys::allocateDMA(unsigned long)+0x32>
c000f908:	85 c9                	test   ecx,ecx
c000f90a:	75 04                	jne    c000f910 <Phys::allocateDMA(unsigned long)+0x23>
c000f90c:	89 d5                	mov    ebp,edx
c000f90e:	89 d0                	mov    eax,edx
c000f910:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f913:	39 de                	cmp    esi,ebx
c000f915:	74 20                	je     c000f937 <Phys::allocateDMA(unsigned long)+0x4a>
c000f917:	42                   	inc    edx
c000f918:	89 d9                	mov    ecx,ebx
c000f91a:	83 fa 2f             	cmp    edx,0x2f
c000f91d:	7f 11                	jg     c000f930 <Phys::allocateDMA(unsigned long)+0x43>
c000f91f:	80 ba c0 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3640],0x0
c000f926:	74 e0                	je     c000f908 <Phys::allocateDMA(unsigned long)+0x1b>
c000f928:	31 c9                	xor    ecx,ecx
c000f92a:	42                   	inc    edx
c000f92b:	83 fa 2f             	cmp    edx,0x2f
c000f92e:	7e ef                	jle    c000f91f <Phys::allocateDMA(unsigned long)+0x32>
c000f930:	5b                   	pop    ebx
c000f931:	31 c0                	xor    eax,eax
c000f933:	5e                   	pop    esi
c000f934:	5f                   	pop    edi
c000f935:	5d                   	pop    ebp
c000f936:	c3                   	ret    
c000f937:	8d 14 30             	lea    edx,[eax+esi*1]
c000f93a:	89 d7                	mov    edi,edx
c000f93c:	4f                   	dec    edi
c000f93d:	79 03                	jns    c000f942 <Phys::allocateDMA(unsigned long)+0x55>
c000f93f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f942:	c1 ff 04             	sar    edi,0x4
c000f945:	89 c2                	mov    edx,eax
c000f947:	c1 fa 04             	sar    edx,0x4
c000f94a:	39 fa                	cmp    edx,edi
c000f94c:	75 2f                	jne    c000f97d <Phys::allocateDMA(unsigned long)+0x90>
c000f94e:	85 db                	test   ebx,ebx
c000f950:	74 1a                	je     c000f96c <Phys::allocateDMA(unsigned long)+0x7f>
c000f952:	be c0 c9 02 c0       	mov    esi,0xc002c9c0
c000f957:	8d 90 c0 c9 02 c0    	lea    edx,[eax-0x3ffd3640]
c000f95d:	f7 d6                	not    esi
c000f95f:	29 c6                	sub    esi,eax
c000f961:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f964:	42                   	inc    edx
c000f965:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f968:	39 d9                	cmp    ecx,ebx
c000f96a:	7f f5                	jg     c000f961 <Phys::allocateDMA(unsigned long)+0x74>
c000f96c:	85 ff                	test   edi,edi
c000f96e:	74 13                	je     c000f983 <Phys::allocateDMA(unsigned long)+0x96>
c000f970:	5b                   	pop    ebx
c000f971:	05 50 20 0c 00       	add    eax,0xc2050
c000f976:	5e                   	pop    esi
c000f977:	c1 e0 0c             	shl    eax,0xc
c000f97a:	5f                   	pop    edi
c000f97b:	5d                   	pop    ebp
c000f97c:	c3                   	ret    
c000f97d:	89 ea                	mov    edx,ebp
c000f97f:	31 c9                	xor    ecx,ecx
c000f981:	eb a7                	jmp    c000f92a <Phys::allocateDMA(unsigned long)+0x3d>
c000f983:	5b                   	pop    ebx
c000f984:	c1 e0 0c             	shl    eax,0xc
c000f987:	5e                   	pop    esi
c000f988:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f98d:	5f                   	pop    edi
c000f98e:	5d                   	pop    ebp
c000f98f:	c3                   	ret    

c000f990 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f994:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f998:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f99e:	c1 e9 0c             	shr    ecx,0xc
c000f9a1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f9a6:	76 25                	jbe    c000f9cd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f9a8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f9ad:	c1 e8 0c             	shr    eax,0xc
c000f9b0:	8d 50 10             	lea    edx,[eax+0x10]
c000f9b3:	85 c9                	test   ecx,ecx
c000f9b5:	74 15                	je     c000f9cc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f9b7:	8d 82 c0 c9 02 c0    	lea    eax,[edx-0x3ffd3640]
c000f9bd:	8d 94 11 c0 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3640]
c000f9c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f9c7:	40                   	inc    eax
c000f9c8:	39 d0                	cmp    eax,edx
c000f9ca:	75 f8                	jne    c000f9c4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f9cc:	c3                   	ret    
c000f9cd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f9d3:	c1 ea 0c             	shr    edx,0xc
c000f9d6:	eb db                	jmp    c000f9b3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9d8 <Phys::setPageState(unsigned long, bool)>:
c000f9d8:	56                   	push   esi
c000f9d9:	ba 01 00 00 00       	mov    edx,0x1
c000f9de:	53                   	push   ebx
c000f9df:	8b 35 90 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b890
c000f9e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9ed:	89 c8                	mov    eax,ecx
c000f9ef:	83 e1 07             	and    ecx,0x7
c000f9f2:	c1 e8 03             	shr    eax,0x3
c000f9f5:	d3 e3                	shl    ebx,cl
c000f9f7:	01 c6                	add    esi,eax
c000f9f9:	d3 e2                	shl    edx,cl
c000f9fb:	f7 d2                	not    edx
c000f9fd:	20 16                	and    BYTE PTR [esi],dl
c000f9ff:	03 05 90 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b890
c000fa05:	08 18                	or     BYTE PTR [eax],bl
c000fa07:	5b                   	pop    ebx
c000fa08:	5e                   	pop    esi
c000fa09:	c3                   	ret    

c000fa0a <Phys::getPageState(unsigned long)>:
c000fa0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa0e:	8b 15 90 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b890
c000fa14:	89 c8                	mov    eax,ecx
c000fa16:	83 e1 07             	and    ecx,0x7
c000fa19:	c1 e8 03             	shr    eax,0x3
c000fa1c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fa20:	d3 f8                	sar    eax,cl
c000fa22:	83 e0 01             	and    eax,0x1
c000fa25:	c3                   	ret    

c000fa26 <Phys::freePage(unsigned long)>:
c000fa26:	53                   	push   ebx
c000fa27:	83 ec 08             	sub    esp,0x8
c000fa2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa2e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa34:	76 57                	jbe    c000fa8d <Phys::freePage(unsigned long)+0x67>
c000fa36:	c1 eb 0c             	shr    ebx,0xc
c000fa39:	53                   	push   ebx
c000fa3a:	e8 cb ff ff ff       	call   c000fa0a <Phys::getPageState(unsigned long)>
c000fa3f:	5a                   	pop    edx
c000fa40:	84 c0                	test   al,al
c000fa42:	74 5b                	je     c000fa9f <Phys::freePage(unsigned long)+0x79>
c000fa44:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c000fa49:	48                   	dec    eax
c000fa4a:	a3 ac c9 02 c0       	mov    ds:0xc002c9ac,eax
c000fa4f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa52:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa55:	c1 e0 02             	shl    eax,0x2
c000fa58:	99                   	cdq    
c000fa59:	f7 3d b0 c9 02 c0    	idiv   DWORD PTR ds:0xc002c9b0
c000fa5f:	39 05 a8 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9a8,eax
c000fa65:	75 13                	jne    c000fa7a <Phys::freePage(unsigned long)+0x54>
c000fa67:	83 ec 08             	sub    esp,0x8
c000fa6a:	6a 00                	push   0x0
c000fa6c:	53                   	push   ebx
c000fa6d:	e8 66 ff ff ff       	call   c000f9d8 <Phys::setPageState(unsigned long, bool)>
c000fa72:	83 c4 10             	add    esp,0x10
c000fa75:	83 c4 08             	add    esp,0x8
c000fa78:	5b                   	pop    ebx
c000fa79:	c3                   	ret    
c000fa7a:	83 ec 0c             	sub    esp,0xc
c000fa7d:	a3 a8 c9 02 c0       	mov    ds:0xc002c9a8,eax
c000fa82:	50                   	push   eax
c000fa83:	e8 6e 0a 00 00       	call   c00104f6 <VgaText::updateRAMUsageDisplay(int)>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	eb da                	jmp    c000fa67 <Phys::freePage(unsigned long)+0x41>
c000fa8d:	68 00 10 00 00       	push   0x1000
c000fa92:	53                   	push   ebx
c000fa93:	e8 f8 fe ff ff       	call   c000f990 <Phys::freeDMA(unsigned long, unsigned long)>
c000fa98:	59                   	pop    ecx
c000fa99:	5b                   	pop    ebx
c000fa9a:	83 c4 08             	add    esp,0x8
c000fa9d:	5b                   	pop    ebx
c000fa9e:	c3                   	ret    
c000fa9f:	c7 44 24 10 a7 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ba7
c000faa7:	83 c4 08             	add    esp,0x8
c000faaa:	5b                   	pop    ebx
c000faab:	e9 f3 9d 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>

c000fab0 <Phys::allocatePage()>:
c000fab0:	56                   	push   esi
c000fab1:	53                   	push   ebx
c000fab2:	51                   	push   ecx
c000fab3:	8b 35 a0 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9a0
c000fab9:	89 f3                	mov    ebx,esi
c000fabb:	eb 0a                	jmp    c000fac7 <Phys::allocatePage()+0x17>
c000fabd:	89 1d a0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a0,ebx
c000fac3:	39 de                	cmp    esi,ebx
c000fac5:	74 24                	je     c000faeb <Phys::allocatePage()+0x3b>
c000fac7:	53                   	push   ebx
c000fac8:	e8 3d ff ff ff       	call   c000fa0a <Phys::getPageState(unsigned long)>
c000facd:	5a                   	pop    edx
c000face:	84 c0                	test   al,al
c000fad0:	74 5a                	je     c000fb2c <Phys::allocatePage()+0x7c>
c000fad2:	43                   	inc    ebx
c000fad3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fad9:	75 e2                	jne    c000fabd <Phys::allocatePage()+0xd>
c000fadb:	31 db                	xor    ebx,ebx
c000fadd:	c7 05 a0 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c9a0,0x0
c000fae7:	39 de                	cmp    esi,ebx
c000fae9:	75 dc                	jne    c000fac7 <Phys::allocatePage()+0x17>
c000faeb:	83 ec 0c             	sub    esp,0xc
c000faee:	68 bd 8b 02 c0       	push   0xc0028bbd
c000faf3:	e8 91 2c 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000faf8:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000faff:	e8 e9 fd ff ff       	call   c000f8ed <Phys::allocateDMA(unsigned long)>
c000fb04:	83 c4 10             	add    esp,0x10
c000fb07:	85 c0                	test   eax,eax
c000fb09:	75 56                	jne    c000fb61 <Phys::allocatePage()+0xb1>
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	68 ce 8b 02 c0       	push   0xc0028bce
c000fb13:	e8 8b 9d 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	8b 1d a0 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9a0
c000fb21:	53                   	push   ebx
c000fb22:	e8 e3 fe ff ff       	call   c000fa0a <Phys::getPageState(unsigned long)>
c000fb27:	5a                   	pop    edx
c000fb28:	84 c0                	test   al,al
c000fb2a:	75 a6                	jne    c000fad2 <Phys::allocatePage()+0x22>
c000fb2c:	6a 01                	push   0x1
c000fb2e:	53                   	push   ebx
c000fb2f:	e8 a4 fe ff ff       	call   c000f9d8 <Phys::setPageState(unsigned long, bool)>
c000fb34:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c000fb39:	59                   	pop    ecx
c000fb3a:	40                   	inc    eax
c000fb3b:	5b                   	pop    ebx
c000fb3c:	a3 ac c9 02 c0       	mov    ds:0xc002c9ac,eax
c000fb41:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb44:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb47:	c1 e0 02             	shl    eax,0x2
c000fb4a:	99                   	cdq    
c000fb4b:	f7 3d b0 c9 02 c0    	idiv   DWORD PTR ds:0xc002c9b0
c000fb51:	39 05 a8 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9a8,eax
c000fb57:	75 0c                	jne    c000fb65 <Phys::allocatePage()+0xb5>
c000fb59:	a1 a0 c9 02 c0       	mov    eax,ds:0xc002c9a0
c000fb5e:	c1 e0 0c             	shl    eax,0xc
c000fb61:	5a                   	pop    edx
c000fb62:	5b                   	pop    ebx
c000fb63:	5e                   	pop    esi
c000fb64:	c3                   	ret    
c000fb65:	83 ec 0c             	sub    esp,0xc
c000fb68:	a3 a8 c9 02 c0       	mov    ds:0xc002c9a8,eax
c000fb6d:	50                   	push   eax
c000fb6e:	e8 83 09 00 00       	call   c00104f6 <VgaText::updateRAMUsageDisplay(int)>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	eb e1                	jmp    c000fb59 <Phys::allocatePage()+0xa9>

c000fb78 <Phys::allocateContiguousPages(int)>:
c000fb78:	57                   	push   edi
c000fb79:	56                   	push   esi
c000fb7a:	53                   	push   ebx
c000fb7b:	31 db                	xor    ebx,ebx
c000fb7d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb81:	e8 ac d1 00 00       	call   c001cd32 <lockScheduler()>
c000fb86:	85 db                	test   ebx,ebx
c000fb88:	75 11                	jne    c000fb9b <Phys::allocateContiguousPages(int)+0x23>
c000fb8a:	e8 21 ff ff ff       	call   c000fab0 <Phys::allocatePage()>
c000fb8f:	83 ff 01             	cmp    edi,0x1
c000fb92:	89 c6                	mov    esi,eax
c000fb94:	74 21                	je     c000fbb7 <Phys::allocateContiguousPages(int)+0x3f>
c000fb96:	bb 01 00 00 00       	mov    ebx,0x1
c000fb9b:	e8 10 ff ff ff       	call   c000fab0 <Phys::allocatePage()>
c000fba0:	89 da                	mov    edx,ebx
c000fba2:	c1 e2 0c             	shl    edx,0xc
c000fba5:	01 f2                	add    edx,esi
c000fba7:	39 c2                	cmp    edx,eax
c000fba9:	74 17                	je     c000fbc2 <Phys::allocateContiguousPages(int)+0x4a>
c000fbab:	bb 01 00 00 00       	mov    ebx,0x1
c000fbb0:	89 c6                	mov    esi,eax
c000fbb2:	83 ff 01             	cmp    edi,0x1
c000fbb5:	75 e4                	jne    c000fb9b <Phys::allocateContiguousPages(int)+0x23>
c000fbb7:	e8 78 d1 00 00       	call   c001cd34 <unlockScheduler()>
c000fbbc:	89 f0                	mov    eax,esi
c000fbbe:	5b                   	pop    ebx
c000fbbf:	5e                   	pop    esi
c000fbc0:	5f                   	pop    edi
c000fbc1:	c3                   	ret    
c000fbc2:	43                   	inc    ebx
c000fbc3:	39 fb                	cmp    ebx,edi
c000fbc5:	75 bf                	jne    c000fb86 <Phys::allocateContiguousPages(int)+0xe>
c000fbc7:	e8 68 d1 00 00       	call   c001cd34 <unlockScheduler()>
c000fbcc:	89 f0                	mov    eax,esi
c000fbce:	5b                   	pop    ebx
c000fbcf:	5e                   	pop    esi
c000fbd0:	5f                   	pop    edi
c000fbd1:	c3                   	ret    

c000fbd2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fbd2:	56                   	push   esi
c000fbd3:	53                   	push   ebx
c000fbd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbd8:	39 1d a4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9a4,ebx
c000fbde:	73 06                	jae    c000fbe6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbe0:	89 1d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,ebx
c000fbe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbea:	c1 eb 0c             	shr    ebx,0xc
c000fbed:	c1 e8 0c             	shr    eax,0xc
c000fbf0:	39 d8                	cmp    eax,ebx
c000fbf2:	73 13                	jae    c000fc07 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbf4:	6a 00                	push   0x0
c000fbf6:	8d 70 01             	lea    esi,[eax+0x1]
c000fbf9:	50                   	push   eax
c000fbfa:	e8 d9 fd ff ff       	call   c000f9d8 <Phys::setPageState(unsigned long, bool)>
c000fbff:	5a                   	pop    edx
c000fc00:	89 f0                	mov    eax,esi
c000fc02:	59                   	pop    ecx
c000fc03:	39 f3                	cmp    ebx,esi
c000fc05:	75 ed                	jne    c000fbf4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fc07:	5b                   	pop    ebx
c000fc08:	5e                   	pop    esi
c000fc09:	c3                   	ret    

c000fc0a <Phys::physicalMemorySetup(unsigned int)>:
c000fc0a:	55                   	push   ebp
c000fc0b:	57                   	push   edi
c000fc0c:	56                   	push   esi
c000fc0d:	53                   	push   ebx
c000fc0e:	31 db                	xor    ebx,ebx
c000fc10:	83 ec 40             	sub    esp,0x40
c000fc13:	6a 30                	push   0x30
c000fc15:	6a 00                	push   0x0
c000fc17:	68 c0 c9 02 c0       	push   0xc002c9c0
c000fc1c:	e8 6a 0a ff ff       	call   c000068b <memset>
c000fc21:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fc25:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc2a:	05 00 10 00 00       	add    eax,0x1000
c000fc2f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc33:	83 c4 10             	add    esp,0x10
c000fc36:	83 ec 08             	sub    esp,0x8
c000fc39:	6a 01                	push   0x1
c000fc3b:	53                   	push   ebx
c000fc3c:	43                   	inc    ebx
c000fc3d:	e8 96 fd ff ff       	call   c000f9d8 <Phys::setPageState(unsigned long, bool)>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc4b:	75 e9                	jne    c000fc36 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc4d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc54:	66 85 c0             	test   ax,ax
c000fc57:	0f 84 8e 01 00 00    	je     c000fdeb <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc6d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc7e:	eb 15                	jmp    c000fc95 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc80:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc84:	83 c3 18             	add    ebx,0x18
c000fc87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc8b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc8f:	0f 84 66 01 00 00    	je     c000fdfb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc95:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc9b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fca2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fca6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fca8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fcab:	01 f0                	add    eax,esi
c000fcad:	55                   	push   ebp
c000fcae:	11 fa                	adc    edx,edi
c000fcb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcb4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fcb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcbc:	56                   	push   esi
c000fcbd:	68 08 8c 02 c0       	push   0xc0028c08
c000fcc2:	e8 c2 2a 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000fcc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	09 f8                	or     eax,edi
c000fcd0:	0f 85 25 01 00 00    	jne    c000fdfb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fcd6:	4d                   	dec    ebp
c000fcd7:	75 a7                	jne    c000fc80 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcd9:	ba 00 00 08 00       	mov    edx,0x80000
c000fcde:	89 c1                	mov    ecx,eax
c000fce0:	39 f2                	cmp    edx,esi
c000fce2:	19 f9                	sbb    ecx,edi
c000fce4:	0f 82 a7 00 00 00    	jb     c000fd91 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcea:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcee:	89 c1                	mov    ecx,eax
c000fcf0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcf4:	0f 83 97 00 00 00    	jae    c000fd91 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcfa:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fcff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd03:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd07:	39 fa                	cmp    edx,edi
c000fd09:	19 e8                	sbb    eax,ebp
c000fd0b:	0f 82 14 01 00 00    	jb     c000fe25 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fd11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd15:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd19:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fd1f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd24:	83 d5 ff             	adc    ebp,0xffffffff
c000fd27:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fd2b:	31 c0                	xor    eax,eax
c000fd2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fd31:	39 fa                	cmp    edx,edi
c000fd33:	89 c1                	mov    ecx,eax
c000fd35:	19 e9                	sbb    ecx,ebp
c000fd37:	0f 83 43 ff ff ff    	jae    c000fc80 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd3d:	be 00 00 08 00       	mov    esi,0x80000
c000fd42:	50                   	push   eax
c000fd43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd47:	57                   	push   edi
c000fd48:	56                   	push   esi
c000fd49:	68 2c 8c 02 c0       	push   0xc0028c2c
c000fd4e:	e8 36 2a 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000fd53:	5a                   	pop    edx
c000fd54:	59                   	pop    ecx
c000fd55:	57                   	push   edi
c000fd56:	56                   	push   esi
c000fd57:	e8 76 fe ff ff       	call   c000fbd2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd64:	83 c4 0c             	add    esp,0xc
c000fd67:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd6b:	03 05 b0 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9b0
c000fd71:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd78:	a3 b0 c9 02 c0       	mov    ds:0xc002c9b0,eax
c000fd7d:	52                   	push   edx
c000fd7e:	50                   	push   eax
c000fd7f:	68 ea 8b 02 c0       	push   0xc0028bea
c000fd84:	e8 00 2a 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c000fd89:	83 c4 10             	add    esp,0x10
c000fd8c:	e9 ef fe ff ff       	jmp    c000fc80 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd91:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd9d:	39 ea                	cmp    edx,ebp
c000fd9f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fda3:	0f 82 d7 fe ff ff    	jb     c000fc80 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fda9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdae:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fdb2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fdb6:	0f 83 c4 fe ff ff    	jae    c000fc80 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdbc:	39 ee                	cmp    esi,ebp
c000fdbe:	89 f8                	mov    eax,edi
c000fdc0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fdc4:	0f 83 78 ff ff ff    	jae    c000fd42 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdd2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fdd6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fdda:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fdde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fde2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fde6:	e9 57 ff ff ff       	jmp    c000fd42 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdeb:	83 ec 0c             	sub    esp,0xc
c000fdee:	68 dc 8b 02 c0       	push   0xc0028bdc
c000fdf3:	e8 ab 9a 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000fdf8:	83 c4 10             	add    esp,0x10
c000fdfb:	bb 40 01 00 00       	mov    ebx,0x140
c000fe00:	83 ec 08             	sub    esp,0x8
c000fe03:	6a 00                	push   0x0
c000fe05:	53                   	push   ebx
c000fe06:	43                   	inc    ebx
c000fe07:	e8 cc fb ff ff       	call   c000f9d8 <Phys::setPageState(unsigned long, bool)>
c000fe0c:	ff 05 b0 c9 02 c0    	inc    DWORD PTR ds:0xc002c9b0
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fe1b:	75 e3                	jne    c000fe00 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fe1d:	83 c4 3c             	add    esp,0x3c
c000fe20:	5b                   	pop    ebx
c000fe21:	5e                   	pop    esi
c000fe22:	5f                   	pop    edi
c000fe23:	5d                   	pop    ebp
c000fe24:	c3                   	ret    
c000fe25:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fe2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe35:	e9 d7 fe ff ff       	jmp    c000fd11 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe3a <Pipe::isAtty()>:
c000fe3a:	31 c0                	xor    eax,eax
c000fe3c:	c3                   	ret    
c000fe3d:	90                   	nop

c000fe3e <Pipe::~Pipe()>:
c000fe3e:	83 ec 0c             	sub    esp,0xc
c000fe41:	ba 98 8c 02 c0       	mov    edx,0xc0028c98
c000fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4a:	89 10                	mov    DWORD PTR [eax],edx
c000fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	50                   	push   eax
c000fe54:	e8 df 16 00 00       	call   c0011538 <UnixFile::~UnixFile()>
c000fe59:	83 c4 10             	add    esp,0x10
c000fe5c:	90                   	nop
c000fe5d:	83 c4 0c             	add    esp,0xc
c000fe60:	c3                   	ret    
c000fe61:	90                   	nop

c000fe62 <Pipe::~Pipe()>:
c000fe62:	83 ec 0c             	sub    esp,0xc
c000fe65:	83 ec 0c             	sub    esp,0xc
c000fe68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6c:	e8 cd ff ff ff       	call   c000fe3e <Pipe::~Pipe()>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	83 ec 08             	sub    esp,0x8
c000fe77:	6a 20                	push   0x20
c000fe79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7d:	e8 27 28 00 00       	call   c00126a9 <operator delete(void*, unsigned long)>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	83 c4 0c             	add    esp,0xc
c000fe88:	c3                   	ret    
c000fe89:	90                   	nop

c000fe8a <Pipe::read(unsigned long long, void*, int*)>:
c000fe8a:	55                   	push   ebp
c000fe8b:	57                   	push   edi
c000fe8c:	56                   	push   esi
c000fe8d:	53                   	push   ebx
c000fe8e:	83 ec 1c             	sub    esp,0x1c
c000fe91:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe95:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe99:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe9d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fea0:	89 c8                	mov    eax,ecx
c000fea2:	99                   	cdq    
c000fea3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fea7:	74 19                	je     c000fec2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fea9:	39 f9                	cmp    ecx,edi
c000feab:	89 d1                	mov    ecx,edx
c000fead:	19 f1                	sbb    ecx,esi
c000feaf:	73 11                	jae    c000fec2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000feb1:	e8 7c ce 00 00       	call   c001cd32 <lockScheduler()>
c000feb6:	e8 b3 d1 00 00       	call   c001d06e <schedule()>
c000febb:	e8 74 ce 00 00       	call   c001cd34 <unlockScheduler()>
c000fec0:	eb db                	jmp    c000fe9d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fec2:	39 f8                	cmp    eax,edi
c000fec4:	89 d1                	mov    ecx,edx
c000fec6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000feca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fece:	19 f1                	sbb    ecx,esi
c000fed0:	73 08                	jae    c000feda <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fed2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fed6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000feda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fedd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fee0:	29 c6                	sub    esi,eax
c000fee2:	89 f1                	mov    ecx,esi
c000fee4:	c1 f9 1f             	sar    ecx,0x1f
c000fee7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000feeb:	89 ca                	mov    edx,ecx
c000feed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fef1:	19 d1                	sbb    ecx,edx
c000fef3:	73 04                	jae    c000fef9 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fef5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fef9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fefd:	89 fd                	mov    ebp,edi
c000feff:	29 f5                	sub    ebp,esi
c000ff01:	85 f6                	test   esi,esi
c000ff03:	74 12                	je     c000ff17 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ff05:	52                   	push   edx
c000ff06:	56                   	push   esi
c000ff07:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ff0a:	50                   	push   eax
c000ff0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ff0f:	e8 41 07 ff ff       	call   c0000655 <memcpy>
c000ff14:	83 c4 10             	add    esp,0x10
c000ff17:	85 ed                	test   ebp,ebp
c000ff19:	74 12                	je     c000ff2d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ff1b:	50                   	push   eax
c000ff1c:	55                   	push   ebp
c000ff1d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ff20:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ff24:	56                   	push   esi
c000ff25:	e8 2b 07 ff ff       	call   c0000655 <memcpy>
c000ff2a:	83 c4 10             	add    esp,0x10
c000ff2d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ff30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff33:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff36:	99                   	cdq    
c000ff37:	89 f7                	mov    edi,esi
c000ff39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff3d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff41:	c1 ff 1f             	sar    edi,0x1f
c000ff44:	57                   	push   edi
c000ff45:	56                   	push   esi
c000ff46:	52                   	push   edx
c000ff47:	50                   	push   eax
c000ff48:	e8 6f 55 01 00       	call   c00254bc <__umoddi3>
c000ff4d:	83 c4 10             	add    esp,0x10
c000ff50:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff53:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff58:	75 10                	jne    c000ff6a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	68 55 8c 02 c0       	push   0xc0028c55
c000ff62:	e8 3c 99 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c000ff67:	83 c4 10             	add    esp,0x10
c000ff6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff72:	89 10                	mov    DWORD PTR [eax],edx
c000ff74:	83 c4 1c             	add    esp,0x1c
c000ff77:	31 c0                	xor    eax,eax
c000ff79:	5b                   	pop    ebx
c000ff7a:	5e                   	pop    esi
c000ff7b:	5f                   	pop    edi
c000ff7c:	5d                   	pop    ebp
c000ff7d:	c3                   	ret    

c000ff7e <Pipe::write(unsigned long long, void*, int*)>:
c000ff7e:	55                   	push   ebp
c000ff7f:	57                   	push   edi
c000ff80:	56                   	push   esi
c000ff81:	53                   	push   ebx
c000ff82:	83 ec 1c             	sub    esp,0x1c
c000ff85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff94:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff97:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff9e:	89 de                	mov    esi,ebx
c000ffa0:	89 df                	mov    edi,ebx
c000ffa2:	c1 ff 1f             	sar    edi,0x1f
c000ffa5:	01 c6                	add    esi,eax
c000ffa7:	89 c8                	mov    eax,ecx
c000ffa9:	11 d7                	adc    edi,edx
c000ffab:	99                   	cdq    
c000ffac:	39 f1                	cmp    ecx,esi
c000ffae:	89 d0                	mov    eax,edx
c000ffb0:	19 f8                	sbb    eax,edi
c000ffb2:	b8 01 00 00 00       	mov    eax,0x1
c000ffb7:	0f 82 80 00 00 00    	jb     c001003d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ffbd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ffc0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ffc3:	01 d8                	add    eax,ebx
c000ffc5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ffc9:	99                   	cdq    
c000ffca:	f7 f9                	idiv   ecx
c000ffcc:	29 d1                	sub    ecx,edx
c000ffce:	89 d7                	mov    edi,edx
c000ffd0:	89 c8                	mov    eax,ecx
c000ffd2:	99                   	cdq    
c000ffd3:	39 ce                	cmp    esi,ecx
c000ffd5:	19 d3                	sbb    ebx,edx
c000ffd7:	bb 00 00 00 00       	mov    ebx,0x0
c000ffdc:	72 04                	jb     c000ffe2 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffde:	89 f3                	mov    ebx,esi
c000ffe0:	29 cb                	sub    ebx,ecx
c000ffe2:	89 f1                	mov    ecx,esi
c000ffe4:	29 d9                	sub    ecx,ebx
c000ffe6:	74 1a                	je     c0010002 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffe8:	52                   	push   edx
c000ffe9:	51                   	push   ecx
c000ffea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fff2:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fff5:	57                   	push   edi
c000fff6:	e8 5a 06 ff ff       	call   c0000655 <memcpy>
c000fffb:	83 c4 10             	add    esp,0x10
c000fffe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010002:	85 db                	test   ebx,ebx
c0010004:	74 12                	je     c0010018 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010006:	50                   	push   eax
c0010007:	53                   	push   ebx
c0010008:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001000c:	51                   	push   ecx
c001000d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010010:	e8 40 06 ff ff       	call   c0000655 <memcpy>
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001001b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010020:	75 10                	jne    c0010032 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010022:	83 ec 0c             	sub    esp,0xc
c0010025:	68 71 8c 02 c0       	push   0xc0028c71
c001002a:	e8 74 98 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010036:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010039:	89 38                	mov    DWORD PTR [eax],edi
c001003b:	31 c0                	xor    eax,eax
c001003d:	83 c4 1c             	add    esp,0x1c
c0010040:	5b                   	pop    ebx
c0010041:	5e                   	pop    esi
c0010042:	5f                   	pop    edi
c0010043:	5d                   	pop    ebp
c0010044:	c3                   	ret    
c0010045:	90                   	nop

c0010046 <Pipe::Pipe(int)>:
c0010046:	83 ec 0c             	sub    esp,0xc
c0010049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004d:	83 ec 08             	sub    esp,0x8
c0010050:	6a 00                	push   0x0
c0010052:	50                   	push   eax
c0010053:	e8 fe 12 00 00       	call   c0011356 <UnixFile::UnixFile(int)>
c0010058:	83 c4 10             	add    esp,0x10
c001005b:	ba 98 8c 02 c0       	mov    edx,0xc0028c98
c0010060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010064:	89 10                	mov    DWORD PTR [eax],edx
c0010066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001006e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010075:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001007c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010080:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001008b:	83 ec 0c             	sub    esp,0xc
c001008e:	50                   	push   eax
c001008f:	e8 40 f4 ff ff       	call   c000f4d4 <malloc>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	89 c2                	mov    edx,eax
c0010099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00100a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00100a8:	90                   	nop
c00100a9:	83 c4 0c             	add    esp,0xc
c00100ac:	c3                   	ret    
c00100ad:	90                   	nop

c00100ae <VgaText::isAtty()>:
c00100ae:	b0 01                	mov    al,0x1
c00100b0:	c3                   	ret    
c00100b1:	90                   	nop

c00100b2 <VgaText::~VgaText()>:
c00100b2:	83 ec 0c             	sub    esp,0xc
c00100b5:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c00100ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100be:	89 10                	mov    DWORD PTR [eax],edx
c00100c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c4:	83 ec 0c             	sub    esp,0xc
c00100c7:	50                   	push   eax
c00100c8:	e8 6b 14 00 00       	call   c0011538 <UnixFile::~UnixFile()>
c00100cd:	83 c4 10             	add    esp,0x10
c00100d0:	90                   	nop
c00100d1:	83 c4 0c             	add    esp,0xc
c00100d4:	c3                   	ret    
c00100d5:	90                   	nop

c00100d6 <VgaText::~VgaText()>:
c00100d6:	83 ec 0c             	sub    esp,0xc
c00100d9:	83 ec 0c             	sub    esp,0xc
c00100dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100e0:	e8 cd ff ff ff       	call   c00100b2 <VgaText::~VgaText()>
c00100e5:	83 c4 10             	add    esp,0x10
c00100e8:	83 ec 08             	sub    esp,0x8
c00100eb:	68 60 12 00 00       	push   0x1260
c00100f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f4:	e8 b0 25 00 00       	call   c00126a9 <operator delete(void*, unsigned long)>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	83 c4 0c             	add    esp,0xc
c00100ff:	c3                   	ret    

c0010100 <VgaText::read(unsigned long long, void*, int*)>:
c0010100:	83 ec 10             	sub    esp,0x10
c0010103:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010107:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001010b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001010f:	e8 a9 58 00 00       	call   c00159bd <readKeyboard(VgaText*, char*, unsigned long)>
c0010114:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010118:	89 02                	mov    DWORD PTR [edx],eax
c001011a:	31 c0                	xor    eax,eax
c001011c:	83 c4 1c             	add    esp,0x1c
c001011f:	c3                   	ret    

c0010120 <setTerminalScrollLock(bool)>:
c0010120:	c3                   	ret    

c0010121 <addToTerminalCycle(VgaText*)>:
c0010121:	8b 15 40 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca40
c0010127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012b:	85 d2                	test   edx,edx
c001012d:	75 0c                	jne    c001013b <addToTerminalCycle(VgaText*)+0x1a>
c001012f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010135:	a3 40 ca 02 c0       	mov    ds:0xc002ca40,eax
c001013a:	c3                   	ret    
c001013b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010141:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010147:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001014d:	c3                   	ret    

c001014e <installVgaTextImplementation()>:
c001014e:	83 ec 10             	sub    esp,0x10
c0010151:	6a 20                	push   0x20
c0010153:	6a 00                	push   0x0
c0010155:	68 20 ca 02 c0       	push   0xc002ca20
c001015a:	e8 2c 05 ff ff       	call   c000068b <memset>
c001015f:	83 c4 1c             	add    esp,0x1c
c0010162:	c3                   	ret    

c0010163 <scrollTerminalScrollLock(int)>:
c0010163:	c3                   	ret    

c0010164 <VgaText::load()>:
c0010164:	53                   	push   ebx
c0010165:	31 c0                	xor    eax,eax
c0010167:	83 ec 58             	sub    esp,0x58
c001016a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001016e:	89 e2                	mov    edx,esp
c0010170:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010174:	40                   	inc    eax
c0010175:	83 f8 50             	cmp    eax,0x50
c0010178:	75 f6                	jne    c0010170 <VgaText::load()+0xc>
c001017a:	31 c0                	xor    eax,eax
c001017c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010183:	84 c9                	test   cl,cl
c0010185:	74 06                	je     c001018d <VgaText::load()+0x29>
c0010187:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001018a:	40                   	inc    eax
c001018b:	eb ef                	jmp    c001017c <VgaText::load()+0x18>
c001018d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010193:	85 c0                	test   eax,eax
c0010195:	74 09                	je     c00101a0 <VgaText::load()+0x3c>
c0010197:	51                   	push   ecx
c0010198:	51                   	push   ecx
c0010199:	52                   	push   edx
c001019a:	53                   	push   ebx
c001019b:	ff d0                	call   eax
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00101a6:	85 c0                	test   eax,eax
c00101a8:	74 09                	je     c00101b3 <VgaText::load()+0x4f>
c00101aa:	83 ec 0c             	sub    esp,0xc
c00101ad:	53                   	push   ebx
c00101ae:	ff d0                	call   eax
c00101b0:	83 c4 10             	add    esp,0x10
c00101b3:	83 c4 58             	add    esp,0x58
c00101b6:	5b                   	pop    ebx
c00101b7:	c3                   	ret    

c00101b8 <VgaText::updateCursor()>:
c00101b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101bc:	39 05 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,eax
c00101c2:	75 0c                	jne    c00101d0 <VgaText::updateCursor()+0x18>
c00101c4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00101ca:	85 c0                	test   eax,eax
c00101cc:	74 02                	je     c00101d0 <VgaText::updateCursor()+0x18>
c00101ce:	ff e0                	jmp    eax
c00101d0:	c3                   	ret    
c00101d1:	90                   	nop

c00101d2 <VgaText::showCursor(bool)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101e0:	c3                   	ret    
c00101e1:	90                   	nop

c00101e2 <VgaText::disableBlink(bool)>:
c00101e2:	56                   	push   esi
c00101e3:	53                   	push   ebx
c00101e4:	51                   	push   ecx
c00101e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101ed:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c00101f3:	75 18                	jne    c001020d <VgaText::disableBlink(bool)+0x2b>
c00101f5:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101fb:	85 c0                	test   eax,eax
c00101fd:	74 0e                	je     c001020d <VgaText::disableBlink(bool)+0x2b>
c00101ff:	89 f1                	mov    ecx,esi
c0010201:	52                   	push   edx
c0010202:	52                   	push   edx
c0010203:	0f b6 d1             	movzx  edx,cl
c0010206:	52                   	push   edx
c0010207:	53                   	push   ebx
c0010208:	ff d0                	call   eax
c001020a:	83 c4 10             	add    esp,0x10
c001020d:	89 f0                	mov    eax,esi
c001020f:	83 f0 01             	xor    eax,0x1
c0010212:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010218:	58                   	pop    eax
c0010219:	5b                   	pop    ebx
c001021a:	5e                   	pop    esi
c001021b:	c3                   	ret    

c001021c <VgaText::doANSI_SGR(int)>:
c001021c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010224:	85 d2                	test   edx,edx
c0010226:	75 14                	jne    c001023c <VgaText::doANSI_SGR(int)+0x20>
c0010228:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001022e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010234:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001023a:	eb 65                	jmp    c00102a1 <VgaText::doANSI_SGR(int)+0x85>
c001023c:	83 fa 07             	cmp    edx,0x7
c001023f:	75 14                	jne    c0010255 <VgaText::doANSI_SGR(int)+0x39>
c0010241:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010247:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001024d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010253:	eb 4c                	jmp    c00102a1 <VgaText::doANSI_SGR(int)+0x85>
c0010255:	83 fa 1b             	cmp    edx,0x1b
c0010258:	74 ce                	je     c0010228 <VgaText::doANSI_SGR(int)+0xc>
c001025a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001025d:	83 f9 07             	cmp    ecx,0x7
c0010260:	77 09                	ja     c001026b <VgaText::doANSI_SGR(int)+0x4f>
c0010262:	8b 14 8d c0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4740]
c0010269:	eb 20                	jmp    c001028b <VgaText::doANSI_SGR(int)+0x6f>
c001026b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001026e:	83 f9 07             	cmp    ecx,0x7
c0010271:	77 09                	ja     c001027c <VgaText::doANSI_SGR(int)+0x60>
c0010273:	8b 14 8d c0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4740]
c001027a:	eb 25                	jmp    c00102a1 <VgaText::doANSI_SGR(int)+0x85>
c001027c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001027f:	83 f9 07             	cmp    ecx,0x7
c0010282:	77 0e                	ja     c0010292 <VgaText::doANSI_SGR(int)+0x76>
c0010284:	8b 14 95 78 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4888]
c001028b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010291:	c3                   	ret    
c0010292:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010295:	83 f9 07             	cmp    ecx,0x7
c0010298:	77 0d                	ja     c00102a7 <VgaText::doANSI_SGR(int)+0x8b>
c001029a:	8b 14 95 50 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48b0]
c00102a1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00102a7:	c3                   	ret    

c00102a8 <VgaText::setDefaultBgColour(VgaColour)>:
c00102a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102b0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00102b6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <VgaText::setDefaultFgColour(VgaColour)>:
c00102be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00102cc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00102d4:	53                   	push   ebx
c00102d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102e1:	51                   	push   ecx
c00102e2:	e8 c1 ff ff ff       	call   c00102a8 <VgaText::setDefaultBgColour(VgaColour)>
c00102e7:	58                   	pop    eax
c00102e8:	5a                   	pop    edx
c00102e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102f1:	5b                   	pop    ebx
c00102f2:	eb ca                	jmp    c00102be <VgaText::setDefaultFgColour(VgaColour)>

c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00102f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102fc:	b0 02                	mov    al,0x2
c00102fe:	80 3d 00 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca00,0x0
c0010305:	75 0a                	jne    c0010311 <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c0010307:	83 e2 0f             	and    edx,0xf
c001030a:	c1 e1 04             	shl    ecx,0x4
c001030d:	88 c8                	mov    al,cl
c001030f:	09 d0                	or     eax,edx
c0010311:	c3                   	ret    

c0010312 <VgaText::scrollScreen()>:
c0010312:	55                   	push   ebp
c0010313:	57                   	push   edi
c0010314:	bf 01 00 00 00       	mov    edi,0x1
c0010319:	56                   	push   esi
c001031a:	53                   	push   ebx
c001031b:	83 ec 0c             	sub    esp,0xc
c001031e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010322:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c0010328:	31 ed                	xor    ebp,ebp
c001032a:	01 de                	add    esi,ebx
c001032c:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c001032f:	83 ff 17             	cmp    edi,0x17
c0010332:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c0010338:	75 28                	jne    c0010362 <VgaText::scrollScreen()+0x50>
c001033a:	f7 c5 01 00 00 00    	test   ebp,0x1
c0010340:	74 1c                	je     c001035e <VgaText::scrollScreen()+0x4c>
c0010342:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010349:	50                   	push   eax
c001034a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010351:	50                   	push   eax
c0010352:	e8 9d ff ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010357:	5a                   	pop    edx
c0010358:	59                   	pop    ecx
c0010359:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c001035c:	eb 04                	jmp    c0010362 <VgaText::scrollScreen()+0x50>
c001035e:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c0010362:	45                   	inc    ebp
c0010363:	46                   	inc    esi
c0010364:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c001036a:	75 c0                	jne    c001032c <VgaText::scrollScreen()+0x1a>
c001036c:	47                   	inc    edi
c001036d:	83 ff 18             	cmp    edi,0x18
c0010370:	75 b0                	jne    c0010322 <VgaText::scrollScreen()+0x10>
c0010372:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c0010378:	75 24                	jne    c001039e <VgaText::scrollScreen()+0x8c>
c001037a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010381:	74 08                	je     c001038b <VgaText::scrollScreen()+0x79>
c0010383:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010389:	eb 13                	jmp    c001039e <VgaText::scrollScreen()+0x8c>
c001038b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010391:	85 c0                	test   eax,eax
c0010393:	74 09                	je     c001039e <VgaText::scrollScreen()+0x8c>
c0010395:	83 ec 0c             	sub    esp,0xc
c0010398:	53                   	push   ebx
c0010399:	ff d0                	call   eax
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00103a2:	83 c4 0c             	add    esp,0xc
c00103a5:	5b                   	pop    ebx
c00103a6:	5e                   	pop    esi
c00103a7:	5f                   	pop    edi
c00103a8:	5d                   	pop    ebp
c00103a9:	e9 0a fe ff ff       	jmp    c00101b8 <VgaText::updateCursor()>

c00103ae <VgaText::combineCharAndColour(char, unsigned char)>:
c00103ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00103b3:	c1 e0 08             	shl    eax,0x8
c00103b6:	89 c2                	mov    edx,eax
c00103b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00103bd:	09 d0                	or     eax,edx
c00103bf:	c3                   	ret    

c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00103c0:	53                   	push   ebx
c00103c1:	83 ec 08             	sub    esp,0x8
c00103c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103c8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103cd:	50                   	push   eax
c00103ce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103d3:	50                   	push   eax
c00103d4:	e8 1b ff ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c00103d9:	5a                   	pop    edx
c00103da:	0f b6 c0             	movzx  eax,al
c00103dd:	59                   	pop    ecx
c00103de:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c00103e3:	50                   	push   eax
c00103e4:	51                   	push   ecx
c00103e5:	e8 c4 ff ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c00103ea:	5a                   	pop    edx
c00103eb:	5a                   	pop    edx
c00103ec:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103f2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103f6:	0f b7 d2             	movzx  edx,dx
c00103f9:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c00103fe:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c0010404:	75 14                	jne    c001041a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010406:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c001040c:	85 c0                	test   eax,eax
c001040e:	74 0a                	je     c001041a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010410:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010414:	83 c4 08             	add    esp,0x8
c0010417:	5b                   	pop    ebx
c0010418:	ff e0                	jmp    eax
c001041a:	83 c4 08             	add    esp,0x8
c001041d:	5b                   	pop    ebx
c001041e:	c3                   	ret    
c001041f:	90                   	nop

c0010420 <VgaText::getCursorX()>:
c0010420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010424:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001042a:	c3                   	ret    
c001042b:	90                   	nop

c001042c <VgaText::getCursorY()>:
c001042c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010430:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010436:	c3                   	ret    
c0010437:	90                   	nop

c0010438 <VgaText::setCursor(int, int)>:
c0010438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010440:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010446:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001044a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010450:	e9 63 fd ff ff       	jmp    c00101b8 <VgaText::updateCursor()>
c0010455:	90                   	nop

c0010456 <VgaText::setCursorX(int)>:
c0010456:	83 ec 10             	sub    esp,0x10
c0010459:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001045d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010467:	50                   	push   eax
c0010468:	e8 cb ff ff ff       	call   c0010438 <VgaText::setCursor(int, int)>
c001046d:	83 c4 1c             	add    esp,0x1c
c0010470:	c3                   	ret    
c0010471:	90                   	nop

c0010472 <VgaText::setCursorY(int)>:
c0010472:	83 ec 10             	sub    esp,0x10
c0010475:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010479:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001047d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010483:	50                   	push   eax
c0010484:	e8 af ff ff ff       	call   c0010438 <VgaText::setCursor(int, int)>
c0010489:	83 c4 1c             	add    esp,0x1c
c001048c:	c3                   	ret    
c001048d:	90                   	nop

c001048e <VgaText::incrementCursor(bool)>:
c001048e:	56                   	push   esi
c001048f:	53                   	push   ebx
c0010490:	51                   	push   ecx
c0010491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010495:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010499:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001049f:	40                   	inc    eax
c00104a0:	83 f8 50             	cmp    eax,0x50
c00104a3:	74 08                	je     c00104ad <VgaText::incrementCursor(bool)+0x1f>
c00104a5:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00104ab:	eb 33                	jmp    c00104e0 <VgaText::incrementCursor(bool)+0x52>
c00104ad:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00104b3:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00104bd:	8d 50 01             	lea    edx,[eax+0x1]
c00104c0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00104c6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00104cc:	75 12                	jne    c00104e0 <VgaText::incrementCursor(bool)+0x52>
c00104ce:	83 ec 0c             	sub    esp,0xc
c00104d1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00104d7:	53                   	push   ebx
c00104d8:	e8 35 fe ff ff       	call   c0010312 <VgaText::scrollScreen()>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	89 f0                	mov    eax,esi
c00104e2:	84 c0                	test   al,al
c00104e4:	74 0c                	je     c00104f2 <VgaText::incrementCursor(bool)+0x64>
c00104e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104ea:	5a                   	pop    edx
c00104eb:	5b                   	pop    ebx
c00104ec:	5e                   	pop    esi
c00104ed:	e9 c6 fc ff ff       	jmp    c00101b8 <VgaText::updateCursor()>
c00104f2:	58                   	pop    eax
c00104f3:	5b                   	pop    ebx
c00104f4:	5e                   	pop    esi
c00104f5:	c3                   	ret    

c00104f6 <VgaText::updateRAMUsageDisplay(int)>:
c00104f6:	56                   	push   esi
c00104f7:	8b 35 a0 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b8a0
c00104fd:	53                   	push   ebx
c00104fe:	6a 0f                	push   0xf
c0010500:	6a 00                	push   0x0
c0010502:	e8 ed fd ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010507:	5a                   	pop    edx
c0010508:	0f b6 c0             	movzx  eax,al
c001050b:	59                   	pop    ecx
c001050c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010511:	50                   	push   eax
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	99                   	cdq    
c0010517:	f7 f9                	idiv   ecx
c0010519:	89 d3                	mov    ebx,edx
c001051b:	83 c0 30             	add    eax,0x30
c001051e:	83 c3 30             	add    ebx,0x30
c0010521:	0f be c0             	movsx  eax,al
c0010524:	0f b6 db             	movzx  ebx,bl
c0010527:	50                   	push   eax
c0010528:	e8 81 fe ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c001052d:	5a                   	pop    edx
c001052e:	59                   	pop    ecx
c001052f:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010536:	6a 0f                	push   0xf
c0010538:	6a 00                	push   0x0
c001053a:	e8 b5 fd ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c001053f:	5a                   	pop    edx
c0010540:	0f b6 c0             	movzx  eax,al
c0010543:	59                   	pop    ecx
c0010544:	50                   	push   eax
c0010545:	53                   	push   ebx
c0010546:	e8 63 fe ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c001054b:	5b                   	pop    ebx
c001054c:	5a                   	pop    edx
c001054d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010554:	6a 0f                	push   0xf
c0010556:	6a 00                	push   0x0
c0010558:	e8 97 fd ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c001055d:	59                   	pop    ecx
c001055e:	0f b6 c0             	movzx  eax,al
c0010561:	5b                   	pop    ebx
c0010562:	50                   	push   eax
c0010563:	6a 25                	push   0x25
c0010565:	e8 44 fe ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c001056a:	5a                   	pop    edx
c001056b:	59                   	pop    ecx
c001056c:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010573:	5b                   	pop    ebx
c0010574:	5e                   	pop    esi
c0010575:	c3                   	ret    

c0010576 <VgaText::updateDiskUsage()>:
c0010576:	55                   	push   ebp
c0010577:	57                   	push   edi
c0010578:	8b 3d a0 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8a0
c001057e:	56                   	push   esi
c001057f:	53                   	push   ebx
c0010580:	bb 0a 00 00 00       	mov    ebx,0xa
c0010585:	6a 0f                	push   0xf
c0010587:	6a 00                	push   0x0
c0010589:	e8 66 fd ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c001058e:	5a                   	pop    edx
c001058f:	8b 35 a8 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002eca8
c0010595:	59                   	pop    ecx
c0010596:	0f b6 c0             	movzx  eax,al
c0010599:	b9 10 27 00 00       	mov    ecx,0x2710
c001059e:	50                   	push   eax
c001059f:	89 f0                	mov    eax,esi
c00105a1:	99                   	cdq    
c00105a2:	f7 f9                	idiv   ecx
c00105a4:	99                   	cdq    
c00105a5:	f7 fb                	idiv   ebx
c00105a7:	83 c2 30             	add    edx,0x30
c00105aa:	0f b6 d2             	movzx  edx,dl
c00105ad:	52                   	push   edx
c00105ae:	e8 fb fd ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c00105b3:	5d                   	pop    ebp
c00105b4:	5a                   	pop    edx
c00105b5:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00105b9:	6a 0f                	push   0xf
c00105bb:	6a 00                	push   0x0
c00105bd:	e8 32 fd ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c00105c2:	59                   	pop    ecx
c00105c3:	0f b6 c0             	movzx  eax,al
c00105c6:	5d                   	pop    ebp
c00105c7:	bd e8 03 00 00       	mov    ebp,0x3e8
c00105cc:	50                   	push   eax
c00105cd:	89 f0                	mov    eax,esi
c00105cf:	99                   	cdq    
c00105d0:	f7 fd                	idiv   ebp
c00105d2:	99                   	cdq    
c00105d3:	f7 fb                	idiv   ebx
c00105d5:	8d 42 30             	lea    eax,[edx+0x30]
c00105d8:	0f b6 c0             	movzx  eax,al
c00105db:	50                   	push   eax
c00105dc:	e8 cd fd ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c00105e1:	5a                   	pop    edx
c00105e2:	59                   	pop    ecx
c00105e3:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00105ea:	6a 0f                	push   0xf
c00105ec:	6a 00                	push   0x0
c00105ee:	e8 01 fd ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c00105f3:	5a                   	pop    edx
c00105f4:	0f b6 c0             	movzx  eax,al
c00105f7:	59                   	pop    ecx
c00105f8:	b9 64 00 00 00       	mov    ecx,0x64
c00105fd:	50                   	push   eax
c00105fe:	89 f0                	mov    eax,esi
c0010600:	99                   	cdq    
c0010601:	f7 f9                	idiv   ecx
c0010603:	99                   	cdq    
c0010604:	f7 fb                	idiv   ebx
c0010606:	8d 42 30             	lea    eax,[edx+0x30]
c0010609:	0f b6 c0             	movzx  eax,al
c001060c:	50                   	push   eax
c001060d:	e8 9c fd ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c0010612:	5a                   	pop    edx
c0010613:	59                   	pop    ecx
c0010614:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c001061b:	6a 0f                	push   0xf
c001061d:	6a 00                	push   0x0
c001061f:	e8 d0 fc ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010624:	5a                   	pop    edx
c0010625:	0f b6 c0             	movzx  eax,al
c0010628:	59                   	pop    ecx
c0010629:	50                   	push   eax
c001062a:	89 f0                	mov    eax,esi
c001062c:	99                   	cdq    
c001062d:	f7 fb                	idiv   ebx
c001062f:	89 d6                	mov    esi,edx
c0010631:	99                   	cdq    
c0010632:	f7 fb                	idiv   ebx
c0010634:	8d 42 30             	lea    eax,[edx+0x30]
c0010637:	0f b6 c0             	movzx  eax,al
c001063a:	50                   	push   eax
c001063b:	e8 6e fd ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c0010640:	5a                   	pop    edx
c0010641:	59                   	pop    ecx
c0010642:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010649:	6a 0f                	push   0xf
c001064b:	6a 00                	push   0x0
c001064d:	e8 a2 fc ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010652:	5a                   	pop    edx
c0010653:	0f b6 c0             	movzx  eax,al
c0010656:	59                   	pop    ecx
c0010657:	50                   	push   eax
c0010658:	8d 46 30             	lea    eax,[esi+0x30]
c001065b:	0f b6 f0             	movzx  esi,al
c001065e:	56                   	push   esi
c001065f:	e8 4a fd ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c0010664:	5e                   	pop    esi
c0010665:	5a                   	pop    edx
c0010666:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001066d:	6a 0f                	push   0xf
c001066f:	6a 00                	push   0x0
c0010671:	e8 7e fc ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010676:	59                   	pop    ecx
c0010677:	0f b6 c0             	movzx  eax,al
c001067a:	5e                   	pop    esi
c001067b:	b9 10 27 00 00       	mov    ecx,0x2710
c0010680:	8b 35 a4 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002eca4
c0010686:	50                   	push   eax
c0010687:	89 f0                	mov    eax,esi
c0010689:	99                   	cdq    
c001068a:	f7 f9                	idiv   ecx
c001068c:	99                   	cdq    
c001068d:	f7 fb                	idiv   ebx
c001068f:	8d 42 30             	lea    eax,[edx+0x30]
c0010692:	0f b6 c0             	movzx  eax,al
c0010695:	50                   	push   eax
c0010696:	e8 13 fd ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c001069b:	5a                   	pop    edx
c001069c:	59                   	pop    ecx
c001069d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00106a4:	6a 0f                	push   0xf
c00106a6:	6a 00                	push   0x0
c00106a8:	e8 47 fc ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c00106ad:	5a                   	pop    edx
c00106ae:	0f b6 c0             	movzx  eax,al
c00106b1:	59                   	pop    ecx
c00106b2:	50                   	push   eax
c00106b3:	89 f0                	mov    eax,esi
c00106b5:	99                   	cdq    
c00106b6:	f7 fd                	idiv   ebp
c00106b8:	99                   	cdq    
c00106b9:	f7 fb                	idiv   ebx
c00106bb:	83 c2 30             	add    edx,0x30
c00106be:	0f b6 d2             	movzx  edx,dl
c00106c1:	52                   	push   edx
c00106c2:	e8 e7 fc ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c00106c7:	5d                   	pop    ebp
c00106c8:	5a                   	pop    edx
c00106c9:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00106d0:	6a 0f                	push   0xf
c00106d2:	6a 00                	push   0x0
c00106d4:	e8 1b fc ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c00106d9:	59                   	pop    ecx
c00106da:	0f b6 c0             	movzx  eax,al
c00106dd:	5d                   	pop    ebp
c00106de:	b9 64 00 00 00       	mov    ecx,0x64
c00106e3:	50                   	push   eax
c00106e4:	89 f0                	mov    eax,esi
c00106e6:	99                   	cdq    
c00106e7:	f7 f9                	idiv   ecx
c00106e9:	99                   	cdq    
c00106ea:	f7 fb                	idiv   ebx
c00106ec:	83 c2 30             	add    edx,0x30
c00106ef:	0f b6 d2             	movzx  edx,dl
c00106f2:	52                   	push   edx
c00106f3:	e8 b6 fc ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c00106f8:	5a                   	pop    edx
c00106f9:	59                   	pop    ecx
c00106fa:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010701:	6a 0f                	push   0xf
c0010703:	6a 00                	push   0x0
c0010705:	e8 ea fb ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c001070a:	5d                   	pop    ebp
c001070b:	0f b6 c0             	movzx  eax,al
c001070e:	5a                   	pop    edx
c001070f:	50                   	push   eax
c0010710:	89 f0                	mov    eax,esi
c0010712:	99                   	cdq    
c0010713:	f7 fb                	idiv   ebx
c0010715:	89 d6                	mov    esi,edx
c0010717:	99                   	cdq    
c0010718:	f7 fb                	idiv   ebx
c001071a:	8d 42 30             	lea    eax,[edx+0x30]
c001071d:	0f b6 c0             	movzx  eax,al
c0010720:	50                   	push   eax
c0010721:	e8 88 fc ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c0010726:	59                   	pop    ecx
c0010727:	5b                   	pop    ebx
c0010728:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001072f:	6a 0f                	push   0xf
c0010731:	6a 00                	push   0x0
c0010733:	e8 bc fb ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010738:	5d                   	pop    ebp
c0010739:	0f b6 c0             	movzx  eax,al
c001073c:	5a                   	pop    edx
c001073d:	50                   	push   eax
c001073e:	8d 46 30             	lea    eax,[esi+0x30]
c0010741:	0f b6 f0             	movzx  esi,al
c0010744:	56                   	push   esi
c0010745:	e8 64 fc ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c001074a:	59                   	pop    ecx
c001074b:	5b                   	pop    ebx
c001074c:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010753:	5b                   	pop    ebx
c0010754:	5e                   	pop    esi
c0010755:	5f                   	pop    edi
c0010756:	5d                   	pop    ebp
c0010757:	c3                   	ret    

c0010758 <VgaText::updateTitle()>:
c0010758:	53                   	push   ebx
c0010759:	31 c0                	xor    eax,eax
c001075b:	83 ec 58             	sub    esp,0x58
c001075e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010762:	89 e1                	mov    ecx,esp
c0010764:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010768:	40                   	inc    eax
c0010769:	83 f8 50             	cmp    eax,0x50
c001076c:	75 f6                	jne    c0010764 <VgaText::updateTitle()+0xc>
c001076e:	31 c0                	xor    eax,eax
c0010770:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010777:	84 db                	test   bl,bl
c0010779:	74 06                	je     c0010781 <VgaText::updateTitle()+0x29>
c001077b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001077e:	40                   	inc    eax
c001077f:	eb ef                	jmp    c0010770 <VgaText::updateTitle()+0x18>
c0010781:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010787:	85 c0                	test   eax,eax
c0010789:	74 09                	je     c0010794 <VgaText::updateTitle()+0x3c>
c001078b:	53                   	push   ebx
c001078c:	53                   	push   ebx
c001078d:	51                   	push   ecx
c001078e:	52                   	push   edx
c001078f:	ff d0                	call   eax
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	e8 dd fd ff ff       	call   c0010576 <VgaText::updateDiskUsage()>
c0010799:	83 c4 58             	add    esp,0x58
c001079c:	5b                   	pop    ebx
c001079d:	c3                   	ret    

c001079e <VgaText::setTitleTextColour(VgaColour)>:
c001079e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107a6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00107ac:	eb aa                	jmp    c0010758 <VgaText::updateTitle()>

c00107ae <VgaText::setTitleColour(VgaColour)>:
c00107ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107b6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00107bc:	eb 9a                	jmp    c0010758 <VgaText::updateTitle()>

c00107be <VgaText::setTitle(char*)>:
c00107be:	53                   	push   ebx
c00107bf:	83 ec 10             	sub    esp,0x10
c00107c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ca:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00107d0:	50                   	push   eax
c00107d1:	e8 54 ff fe ff       	call   c000072a <strcpy>
c00107d6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107da:	83 c4 18             	add    esp,0x18
c00107dd:	5b                   	pop    ebx
c00107de:	e9 75 ff ff ff       	jmp    c0010758 <VgaText::updateTitle()>
c00107e3:	90                   	nop

c00107e4 <VgaText::decrementCursor(bool)>:
c00107e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107ec:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00107f2:	85 c0                	test   eax,eax
c00107f4:	74 07                	je     c00107fd <VgaText::decrementCursor(bool)+0x19>
c00107f6:	48                   	dec    eax
c00107f7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00107fd:	84 c9                	test   cl,cl
c00107ff:	74 09                	je     c001080a <VgaText::decrementCursor(bool)+0x26>
c0010801:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010805:	e9 ae f9 ff ff       	jmp    c00101b8 <VgaText::updateCursor()>
c001080a:	c3                   	ret    
c001080b:	90                   	nop

c001080c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001080c:	53                   	push   ebx
c001080d:	83 ec 08             	sub    esp,0x8
c0010810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010814:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010818:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001081c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010820:	3c 07                	cmp    al,0x7
c0010822:	75 2a                	jne    c001084e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010824:	a1 ec ca 02 c0       	mov    eax,ds:0xc002caec
c0010829:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010831:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010839:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010841:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010845:	83 c4 08             	add    esp,0x8
c0010848:	5b                   	pop    ebx
c0010849:	e9 3a 2d 00 00       	jmp    c0013588 <Buzzer::beep(int, int, bool)>
c001084e:	3c 0d                	cmp    al,0xd
c0010850:	75 0c                	jne    c001085e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010852:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001085c:	eb 3b                	jmp    c0010899 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001085e:	3c 0a                	cmp    al,0xa
c0010860:	75 40                	jne    c00108a2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010862:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010868:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010872:	8d 50 01             	lea    edx,[eax+0x1]
c0010875:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001087b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010881:	75 12                	jne    c0010895 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010883:	83 ec 0c             	sub    esp,0xc
c0010886:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001088c:	53                   	push   ebx
c001088d:	e8 80 fa ff ff       	call   c0010312 <VgaText::scrollScreen()>
c0010892:	83 c4 10             	add    esp,0x10
c0010895:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010899:	83 c4 08             	add    esp,0x8
c001089c:	5b                   	pop    ebx
c001089d:	e9 16 f9 ff ff       	jmp    c00101b8 <VgaText::updateCursor()>
c00108a2:	3c 08                	cmp    al,0x8
c00108a4:	75 31                	jne    c00108d7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00108a6:	50                   	push   eax
c00108a7:	50                   	push   eax
c00108a8:	6a 01                	push   0x1
c00108aa:	53                   	push   ebx
c00108ab:	e8 34 ff ff ff       	call   c00107e4 <VgaText::decrementCursor(bool)>
c00108b0:	5a                   	pop    edx
c00108b1:	59                   	pop    ecx
c00108b2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108b8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108be:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108c4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108ca:	6a 20                	push   0x20
c00108cc:	53                   	push   ebx
c00108cd:	e8 ee fa ff ff       	call   c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108d2:	83 c4 28             	add    esp,0x28
c00108d5:	5b                   	pop    ebx
c00108d6:	c3                   	ret    
c00108d7:	83 ec 08             	sub    esp,0x8
c00108da:	0f be c0             	movsx  eax,al
c00108dd:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108e3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108e9:	51                   	push   ecx
c00108ea:	52                   	push   edx
c00108eb:	50                   	push   eax
c00108ec:	53                   	push   ebx
c00108ed:	e8 ce fa ff ff       	call   c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108f2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108f6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108fe:	83 c4 28             	add    esp,0x28
c0010901:	5b                   	pop    ebx
c0010902:	e9 87 fb ff ff       	jmp    c001048e <VgaText::incrementCursor(bool)>
c0010907:	90                   	nop

c0010908 <VgaText::isShowingCursor()>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <VgaText::isBlinkDisabled()>:
c0010914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010918:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001091e:	83 f0 01             	xor    eax,0x1
c0010921:	c3                   	ret    

c0010922 <VgaText::setCursorHeight(int)>:
c0010922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010926:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001092a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010930:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010937:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001093b:	e9 92 f8 ff ff       	jmp    c00101d2 <VgaText::showCursor(bool)>

c0010940 <VgaText::getCursorHeight()>:
c0010940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010944:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001094a:	c3                   	ret    

c001094b <setActiveTerminal(VgaText*)>:
c001094b:	53                   	push   ebx
c001094c:	83 ec 08             	sub    esp,0x8
c001094f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010953:	85 db                	test   ebx,ebx
c0010955:	75 11                	jne    c0010968 <setActiveTerminal(VgaText*)+0x1d>
c0010957:	c7 44 24 10 ac 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028cac
c001095f:	83 c4 08             	add    esp,0x8
c0010962:	5b                   	pop    ebx
c0010963:	e9 3b 8f 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>
c0010968:	50                   	push   eax
c0010969:	50                   	push   eax
c001096a:	53                   	push   ebx
c001096b:	68 ba 8c 02 c0       	push   0xc0028cba
c0010970:	e8 14 1e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0010975:	a1 44 ca 02 c0       	mov    eax,ds:0xc002ca44
c001097a:	83 c4 10             	add    esp,0x10
c001097d:	85 c0                	test   eax,eax
c001097f:	74 0c                	je     c001098d <setActiveTerminal(VgaText*)+0x42>
c0010981:	83 ec 0c             	sub    esp,0xc
c0010984:	50                   	push   eax
c0010985:	e8 2e f8 ff ff       	call   c00101b8 <VgaText::updateCursor()>
c001098a:	83 c4 10             	add    esp,0x10
c001098d:	89 1d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,ebx
c0010993:	51                   	push   ecx
c0010994:	51                   	push   ecx
c0010995:	53                   	push   ebx
c0010996:	68 d2 8c 02 c0       	push   0xc0028cd2
c001099b:	e8 e9 1d 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00109a0:	83 c4 0c             	add    esp,0xc
c00109a3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00109a9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00109af:	53                   	push   ebx
c00109b0:	e8 83 fa ff ff       	call   c0010438 <VgaText::setCursor(int, int)>
c00109b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b8:	e8 57 ff ff ff       	call   c0010914 <VgaText::isBlinkDisabled()>
c00109bd:	5a                   	pop    edx
c00109be:	0f b6 c0             	movzx  eax,al
c00109c1:	59                   	pop    ecx
c00109c2:	50                   	push   eax
c00109c3:	53                   	push   ebx
c00109c4:	e8 19 f8 ff ff       	call   c00101e2 <VgaText::disableBlink(bool)>
c00109c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109cc:	e8 6f ff ff ff       	call   c0010940 <VgaText::getCursorHeight()>
c00109d1:	5a                   	pop    edx
c00109d2:	59                   	pop    ecx
c00109d3:	50                   	push   eax
c00109d4:	53                   	push   ebx
c00109d5:	e8 48 ff ff ff       	call   c0010922 <VgaText::setCursorHeight(int)>
c00109da:	83 c4 10             	add    esp,0x10
c00109dd:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00109e4:	75 0a                	jne    c00109f0 <setActiveTerminal(VgaText*)+0xa5>
c00109e6:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00109f0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109f4:	83 c4 08             	add    esp,0x8
c00109f7:	5b                   	pop    ebx
c00109f8:	e9 67 f7 ff ff       	jmp    c0010164 <VgaText::load()>

c00109fd <doTerminalCycle()>:
c00109fd:	83 ec 18             	sub    esp,0x18
c0010a00:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0010a05:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010a0b:	50                   	push   eax
c0010a0c:	a3 40 ca 02 c0       	mov    ds:0xc002ca40,eax
c0010a11:	e8 35 ff ff ff       	call   c001094b <setActiveTerminal(VgaText*)>
c0010a16:	83 c4 1c             	add    esp,0x1c
c0010a19:	c3                   	ret    

c0010a1a <VgaText::doUpdate()>:
c0010a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a1e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010a24:	85 c0                	test   eax,eax
c0010a26:	74 02                	je     c0010a2a <VgaText::doUpdate()+0x10>
c0010a28:	ff e0                	jmp    eax
c0010a2a:	c3                   	ret    
c0010a2b:	90                   	nop

c0010a2c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a2c:	55                   	push   ebp
c0010a2d:	57                   	push   edi
c0010a2e:	56                   	push   esi
c0010a2f:	53                   	push   ebx
c0010a30:	83 ec 1c             	sub    esp,0x1c
c0010a33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a37:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a3c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a43:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a46:	50                   	push   eax
c0010a47:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a4c:	50                   	push   eax
c0010a4d:	e8 a2 f8 ff ff       	call   c00102f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a52:	59                   	pop    ecx
c0010a53:	0f b6 c0             	movzx  eax,al
c0010a56:	5b                   	pop    ebx
c0010a57:	31 c9                	xor    ecx,ecx
c0010a59:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a61:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a65:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a6f:	0f b7 db             	movzx  ebx,bx
c0010a72:	01 db                	add    ebx,ebx
c0010a74:	01 fb                	add    ebx,edi
c0010a76:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a79:	84 c0                	test   al,al
c0010a7b:	0f 84 38 01 00 00    	je     c0010bb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a81:	3c 0d                	cmp    al,0xd
c0010a83:	75 0f                	jne    c0010a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a85:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a8f:	e9 1f 01 00 00       	jmp    c0010bb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a94:	3c 0a                	cmp    al,0xa
c0010a96:	75 5b                	jne    c0010af3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a98:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a9e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010aa8:	8d 48 01             	lea    ecx,[eax+0x1]
c0010aab:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ab1:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ab7:	75 12                	jne    c0010acb <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ab9:	83 ec 0c             	sub    esp,0xc
c0010abc:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ac2:	55                   	push   ebp
c0010ac3:	e8 4a f8 ff ff       	call   c0010312 <VgaText::scrollScreen()>
c0010ac8:	83 c4 10             	add    esp,0x10
c0010acb:	83 ec 0c             	sub    esp,0xc
c0010ace:	55                   	push   ebp
c0010acf:	e8 e4 f6 ff ff       	call   c00101b8 <VgaText::updateCursor()>
c0010ad4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ae5:	31 c9                	xor    ecx,ecx
c0010ae7:	0f b7 db             	movzx  ebx,bx
c0010aea:	01 db                	add    ebx,ebx
c0010aec:	01 fb                	add    ebx,edi
c0010aee:	e9 c0 00 00 00       	jmp    c0010bb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010af3:	3c 08                	cmp    al,0x8
c0010af5:	75 4e                	jne    c0010b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010af7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010afb:	53                   	push   ebx
c0010afc:	53                   	push   ebx
c0010afd:	6a 01                	push   0x1
c0010aff:	55                   	push   ebp
c0010b00:	e8 df fc ff ff       	call   c00107e4 <VgaText::decrementCursor(bool)>
c0010b05:	58                   	pop    eax
c0010b06:	5a                   	pop    edx
c0010b07:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b0d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b13:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010b19:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010b1f:	6a 20                	push   0x20
c0010b21:	55                   	push   ebp
c0010b22:	e8 99 f8 ff ff       	call   c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b27:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b2f:	83 c4 20             	add    esp,0x20
c0010b32:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b38:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b3c:	0f b7 db             	movzx  ebx,bx
c0010b3f:	01 db                	add    ebx,ebx
c0010b41:	01 fb                	add    ebx,edi
c0010b43:	eb 6e                	jmp    c0010bb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b45:	51                   	push   ecx
c0010b46:	51                   	push   ecx
c0010b47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b4b:	50                   	push   eax
c0010b4c:	e8 5d f8 ff ff       	call   c00103ae <VgaText::combineCharAndColour(char, unsigned char)>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b57:	39 2d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebp
c0010b5d:	75 2a                	jne    c0010b89 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b5f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b65:	85 c0                	test   eax,eax
c0010b67:	74 20                	je     c0010b89 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b69:	52                   	push   edx
c0010b6a:	52                   	push   edx
c0010b6b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b71:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b7f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b82:	51                   	push   ecx
c0010b83:	55                   	push   ebp
c0010b84:	ff d0                	call   eax
c0010b86:	83 c4 20             	add    esp,0x20
c0010b89:	83 c3 02             	add    ebx,0x2
c0010b8c:	50                   	push   eax
c0010b8d:	50                   	push   eax
c0010b8e:	6a 00                	push   0x0
c0010b90:	55                   	push   ebp
c0010b91:	e8 f8 f8 ff ff       	call   c001048e <VgaText::incrementCursor(bool)>
c0010b96:	83 c4 10             	add    esp,0x10
c0010b99:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010ba0:	75 0f                	jne    c0010bb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010ba2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010baa:	0f b7 db             	movzx  ebx,bx
c0010bad:	01 db                	add    ebx,ebx
c0010baf:	01 fb                	add    ebx,edi
c0010bb1:	b1 01                	mov    cl,0x1
c0010bb3:	46                   	inc    esi
c0010bb4:	e9 bd fe ff ff       	jmp    c0010a76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010bb9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010bbd:	83 ec 0c             	sub    esp,0xc
c0010bc0:	55                   	push   ebp
c0010bc1:	e8 f2 f5 ff ff       	call   c00101b8 <VgaText::updateCursor()>
c0010bc6:	83 c4 10             	add    esp,0x10
c0010bc9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010bcd:	84 c9                	test   cl,cl
c0010bcf:	74 0c                	je     c0010bdd <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010bd1:	83 ec 0c             	sub    esp,0xc
c0010bd4:	55                   	push   ebp
c0010bd5:	e8 40 fe ff ff       	call   c0010a1a <VgaText::doUpdate()>
c0010bda:	83 c4 10             	add    esp,0x10
c0010bdd:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010be4:	83 c4 1c             	add    esp,0x1c
c0010be7:	5b                   	pop    ebx
c0010be8:	5e                   	pop    esi
c0010be9:	5f                   	pop    edi
c0010bea:	5d                   	pop    ebp
c0010beb:	c3                   	ret    

c0010bec <VgaText::clearScreen()>:
c0010bec:	57                   	push   edi
c0010bed:	56                   	push   esi
c0010bee:	31 f6                	xor    esi,esi
c0010bf0:	53                   	push   ebx
c0010bf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf5:	52                   	push   edx
c0010bf6:	6a 00                	push   0x0
c0010bf8:	6a 00                	push   0x0
c0010bfa:	53                   	push   ebx
c0010bfb:	e8 38 f8 ff ff       	call   c0010438 <VgaText::setCursor(int, int)>
c0010c00:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010c07:	83 c4 10             	add    esp,0x10
c0010c0a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010c10:	7e 26                	jle    c0010c38 <VgaText::clearScreen()+0x4c>
c0010c12:	31 ff                	xor    edi,edi
c0010c14:	50                   	push   eax
c0010c15:	50                   	push   eax
c0010c16:	56                   	push   esi
c0010c17:	57                   	push   edi
c0010c18:	47                   	inc    edi
c0010c19:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c1f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c25:	6a 20                	push   0x20
c0010c27:	53                   	push   ebx
c0010c28:	e8 93 f7 ff ff       	call   c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c2d:	83 c4 20             	add    esp,0x20
c0010c30:	83 ff 50             	cmp    edi,0x50
c0010c33:	75 df                	jne    c0010c14 <VgaText::clearScreen()+0x28>
c0010c35:	46                   	inc    esi
c0010c36:	eb d2                	jmp    c0010c0a <VgaText::clearScreen()+0x1e>
c0010c38:	83 ec 0c             	sub    esp,0xc
c0010c3b:	53                   	push   ebx
c0010c3c:	e8 d9 fd ff ff       	call   c0010a1a <VgaText::doUpdate()>
c0010c41:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c48:	83 c4 10             	add    esp,0x10
c0010c4b:	5b                   	pop    ebx
c0010c4c:	5e                   	pop    esi
c0010c4d:	5f                   	pop    edi
c0010c4e:	c3                   	ret    
c0010c4f:	90                   	nop

c0010c50 <VgaText::putchar(char)>:
c0010c50:	56                   	push   esi
c0010c51:	53                   	push   ebx
c0010c52:	83 ec 14             	sub    esp,0x14
c0010c55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c5d:	3c 5b                	cmp    al,0x5b
c0010c5f:	75 21                	jne    c0010c82 <VgaText::putchar(char)+0x32>
c0010c61:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010c68:	74 28                	je     c0010c92 <VgaText::putchar(char)+0x42>
c0010c6a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010c73:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c7d:	e9 e2 00 00 00       	jmp    c0010d64 <VgaText::putchar(char)+0x114>
c0010c82:	3c 1b                	cmp    al,0x1b
c0010c84:	75 0c                	jne    c0010c92 <VgaText::putchar(char)+0x42>
c0010c86:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010c8d:	e9 d2 00 00 00       	jmp    c0010d64 <VgaText::putchar(char)+0x114>
c0010c92:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010c98:	84 c9                	test   cl,cl
c0010c9a:	0f 84 ab 00 00 00    	je     c0010d4b <VgaText::putchar(char)+0xfb>
c0010ca0:	8d 50 c0             	lea    edx,[eax-0x40]
c0010ca3:	80 fa 3e             	cmp    dl,0x3e
c0010ca6:	0f 87 82 00 00 00    	ja     c0010d2e <VgaText::putchar(char)+0xde>
c0010cac:	3c 6d                	cmp    al,0x6d
c0010cae:	75 4d                	jne    c0010cfd <VgaText::putchar(char)+0xad>
c0010cb0:	31 f6                	xor    esi,esi
c0010cb2:	31 d2                	xor    edx,edx
c0010cb4:	31 c0                	xor    eax,eax
c0010cb6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010cbc:	7e 30                	jle    c0010cee <VgaText::putchar(char)+0x9e>
c0010cbe:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010cc6:	80 fa 3b             	cmp    dl,0x3b
c0010cc9:	75 17                	jne    c0010ce2 <VgaText::putchar(char)+0x92>
c0010ccb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ccf:	50                   	push   eax
c0010cd0:	53                   	push   ebx
c0010cd1:	e8 46 f5 ff ff       	call   c001021c <VgaText::doANSI_SGR(int)>
c0010cd6:	59                   	pop    ecx
c0010cd7:	31 d2                	xor    edx,edx
c0010cd9:	58                   	pop    eax
c0010cda:	31 c0                	xor    eax,eax
c0010cdc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ce0:	eb 09                	jmp    c0010ceb <VgaText::putchar(char)+0x9b>
c0010ce2:	6b c0 0a             	imul   eax,eax,0xa
c0010ce5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010ce9:	88 ca                	mov    dl,cl
c0010ceb:	46                   	inc    esi
c0010cec:	eb c8                	jmp    c0010cb6 <VgaText::putchar(char)+0x66>
c0010cee:	84 d2                	test   dl,dl
c0010cf0:	74 31                	je     c0010d23 <VgaText::putchar(char)+0xd3>
c0010cf2:	50                   	push   eax
c0010cf3:	53                   	push   ebx
c0010cf4:	e8 23 f5 ff ff       	call   c001021c <VgaText::doANSI_SGR(int)>
c0010cf9:	58                   	pop    eax
c0010cfa:	5a                   	pop    edx
c0010cfb:	eb 26                	jmp    c0010d23 <VgaText::putchar(char)+0xd3>
c0010cfd:	3c 4a                	cmp    al,0x4a
c0010cff:	75 22                	jne    c0010d23 <VgaText::putchar(char)+0xd3>
c0010d01:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010d08:	75 19                	jne    c0010d23 <VgaText::putchar(char)+0xd3>
c0010d0a:	83 ec 0c             	sub    esp,0xc
c0010d0d:	53                   	push   ebx
c0010d0e:	e8 d9 fe ff ff       	call   c0010bec <VgaText::clearScreen()>
c0010d13:	83 c4 0c             	add    esp,0xc
c0010d16:	6a 00                	push   0x0
c0010d18:	6a 00                	push   0x0
c0010d1a:	53                   	push   ebx
c0010d1b:	e8 18 f7 ff ff       	call   c0010438 <VgaText::setCursor(int, int)>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010d2c:	eb 36                	jmp    c0010d64 <VgaText::putchar(char)+0x114>
c0010d2e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d34:	83 fa 0e             	cmp    edx,0xe
c0010d37:	7f 2b                	jg     c0010d64 <VgaText::putchar(char)+0x114>
c0010d39:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d3c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d42:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d49:	eb 19                	jmp    c0010d64 <VgaText::putchar(char)+0x114>
c0010d4b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d51:	0f be c0             	movsx  eax,al
c0010d54:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d5a:	50                   	push   eax
c0010d5b:	53                   	push   ebx
c0010d5c:	e8 ab fa ff ff       	call   c001080c <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	83 c4 14             	add    esp,0x14
c0010d67:	5b                   	pop    ebx
c0010d68:	5e                   	pop    esi
c0010d69:	c3                   	ret    

c0010d6a <VgaText::puts(char const*)>:
c0010d6a:	53                   	push   ebx
c0010d6b:	83 ec 08             	sub    esp,0x8
c0010d6e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d72:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d75:	84 c0                	test   al,al
c0010d77:	74 12                	je     c0010d8b <VgaText::puts(char const*)+0x21>
c0010d79:	43                   	inc    ebx
c0010d7a:	51                   	push   ecx
c0010d7b:	51                   	push   ecx
c0010d7c:	50                   	push   eax
c0010d7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d81:	e8 ca fe ff ff       	call   c0010c50 <VgaText::putchar(char)>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	eb e7                	jmp    c0010d72 <VgaText::puts(char const*)+0x8>
c0010d8b:	83 c4 08             	add    esp,0x8
c0010d8e:	5b                   	pop    ebx
c0010d8f:	c3                   	ret    

c0010d90 <VgaText::putx(unsigned int)>:
c0010d90:	57                   	push   edi
c0010d91:	b9 11 00 00 00       	mov    ecx,0x11
c0010d96:	56                   	push   esi
c0010d97:	be ee 8c 02 c0       	mov    esi,0xc0028cee
c0010d9c:	53                   	push   ebx
c0010d9d:	83 ec 20             	sub    esp,0x20
c0010da0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010da4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010da8:	fc                   	cld    
c0010da9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dab:	be 08 00 00 00       	mov    esi,0x8
c0010db0:	50                   	push   eax
c0010db1:	50                   	push   eax
c0010db2:	89 d8                	mov    eax,ebx
c0010db4:	c1 e3 04             	shl    ebx,0x4
c0010db7:	c1 e8 1c             	shr    eax,0x1c
c0010dba:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010dbf:	50                   	push   eax
c0010dc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010dc4:	e8 87 fe ff ff       	call   c0010c50 <VgaText::putchar(char)>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	4e                   	dec    esi
c0010dcd:	75 e1                	jne    c0010db0 <VgaText::putx(unsigned int)+0x20>
c0010dcf:	83 c4 20             	add    esp,0x20
c0010dd2:	5b                   	pop    ebx
c0010dd3:	5e                   	pop    esi
c0010dd4:	5f                   	pop    edi
c0010dd5:	c3                   	ret    

c0010dd6 <VgaText::VgaText(char const*)>:
c0010dd6:	57                   	push   edi
c0010dd7:	56                   	push   esi
c0010dd8:	53                   	push   ebx
c0010dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddd:	83 ec 08             	sub    esp,0x8
c0010de0:	6a 00                	push   0x0
c0010de2:	50                   	push   eax
c0010de3:	e8 6e 05 00 00       	call   c0011356 <UnixFile::UnixFile(int)>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c0010df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df4:	89 10                	mov    DWORD PTR [eax],edx
c0010df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dfa:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e08:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e16:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e21:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e3a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e48:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e53:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e64:	bb 20 ca 02 c0       	mov    ebx,0xc002ca20
c0010e69:	b8 08 00 00 00       	mov    eax,0x8
c0010e6e:	fc                   	cld    
c0010e6f:	89 d7                	mov    edi,edx
c0010e71:	89 de                	mov    esi,ebx
c0010e73:	89 c1                	mov    ecx,eax
c0010e75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e7b:	05 1e 10 00 00       	add    eax,0x101e
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e87:	50                   	push   eax
c0010e88:	e8 9d f8 fe ff       	call   c000072a <strcpy>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e94:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea2:	83 c0 0c             	add    eax,0xc
c0010ea5:	83 ec 04             	sub    esp,0x4
c0010ea8:	68 00 0f 00 00       	push   0xf00
c0010ead:	6a 00                	push   0x0
c0010eaf:	50                   	push   eax
c0010eb0:	e8 d6 f7 fe ff       	call   c000068b <memset>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	83 ec 04             	sub    esp,0x4
c0010ebb:	6a 00                	push   0x0
c0010ebd:	6a 07                	push   0x7
c0010ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ec3:	e8 0c f4 ff ff       	call   c00102d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	83 ec 08             	sub    esp,0x8
c0010ece:	6a 02                	push   0x2
c0010ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed4:	e8 49 fa ff ff       	call   c0010922 <VgaText::setCursorHeight(int)>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	83 ec 04             	sub    esp,0x4
c0010edf:	6a 00                	push   0x0
c0010ee1:	6a 00                	push   0x0
c0010ee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee7:	e8 4c f5 ff ff       	call   c0010438 <VgaText::setCursor(int, int)>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	83 ec 08             	sub    esp,0x8
c0010ef2:	6a 01                	push   0x1
c0010ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef8:	e8 d5 f2 ff ff       	call   c00101d2 <VgaText::showCursor(bool)>
c0010efd:	83 c4 10             	add    esp,0x10
c0010f00:	83 ec 08             	sub    esp,0x8
c0010f03:	6a 01                	push   0x1
c0010f05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f09:	e8 d4 f2 ff ff       	call   c00101e2 <VgaText::disableBlink(bool)>
c0010f0e:	83 c4 10             	add    esp,0x10
c0010f11:	83 ec 0c             	sub    esp,0xc
c0010f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f18:	e8 cf fc ff ff       	call   c0010bec <VgaText::clearScreen()>
c0010f1d:	83 c4 10             	add    esp,0x10
c0010f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f24:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2f:	05 9e 10 00 00       	add    eax,0x109e
c0010f34:	83 ec 04             	sub    esp,0x4
c0010f37:	68 96 00 00 00       	push   0x96
c0010f3c:	6a 00                	push   0x0
c0010f3e:	50                   	push   eax
c0010f3f:	e8 47 f7 fe ff       	call   c000068b <memset>
c0010f44:	83 c4 10             	add    esp,0x10
c0010f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4b:	05 34 11 00 00       	add    eax,0x1134
c0010f50:	83 ec 04             	sub    esp,0x4
c0010f53:	68 2c 01 00 00       	push   0x12c
c0010f58:	6a 00                	push   0x0
c0010f5a:	50                   	push   eax
c0010f5b:	e8 2b f7 fe ff       	call   c000068b <memset>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	90                   	nop
c0010f64:	5b                   	pop    ebx
c0010f65:	5e                   	pop    esi
c0010f66:	5f                   	pop    edi
c0010f67:	c3                   	ret    

c0010f68 <VgaText::receiveKey(unsigned char)>:
c0010f68:	55                   	push   ebp
c0010f69:	57                   	push   edi
c0010f6a:	56                   	push   esi
c0010f6b:	53                   	push   ebx
c0010f6c:	83 ec 1c             	sub    esp,0x1c
c0010f6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f77:	84 db                	test   bl,bl
c0010f79:	0f 84 c9 00 00 00    	je     c0011048 <VgaText::receiveKey(unsigned char)+0xe0>
c0010f7f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f85:	80 fb 08             	cmp    bl,0x8
c0010f88:	75 2c                	jne    c0010fb6 <VgaText::receiveKey(unsigned char)+0x4e>
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	57                   	push   edi
c0010f8e:	e8 15 f7 fe ff       	call   c00006a8 <strlen>
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	85 c0                	test   eax,eax
c0010f98:	74 41                	je     c0010fdb <VgaText::receiveKey(unsigned char)+0x73>
c0010f9a:	50                   	push   eax
c0010f9b:	50                   	push   eax
c0010f9c:	6a 08                	push   0x8
c0010f9e:	56                   	push   esi
c0010f9f:	e8 ac fc ff ff       	call   c0010c50 <VgaText::putchar(char)>
c0010fa4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010fa7:	e8 fc f6 fe ff       	call   c00006a8 <strlen>
c0010fac:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010fb4:	eb 22                	jmp    c0010fd8 <VgaText::receiveKey(unsigned char)+0x70>
c0010fb6:	0f be c3             	movsx  eax,bl
c0010fb9:	52                   	push   edx
c0010fba:	52                   	push   edx
c0010fbb:	50                   	push   eax
c0010fbc:	56                   	push   esi
c0010fbd:	e8 8e fc ff ff       	call   c0010c50 <VgaText::putchar(char)>
c0010fc2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010fc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010fcb:	59                   	pop    ecx
c0010fcc:	5d                   	pop    ebp
c0010fcd:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010fd1:	50                   	push   eax
c0010fd2:	57                   	push   edi
c0010fd3:	e8 09 f8 fe ff       	call   c00007e1 <strcat>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010fe2:	75 05                	jne    c0010fe9 <VgaText::receiveKey(unsigned char)+0x81>
c0010fe4:	80 fb 0a             	cmp    bl,0xa
c0010fe7:	75 53                	jne    c001103c <VgaText::receiveKey(unsigned char)+0xd4>
c0010fe9:	83 ec 0c             	sub    esp,0xc
c0010fec:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ff2:	53                   	push   ebx
c0010ff3:	e8 b0 f6 fe ff       	call   c00006a8 <strlen>
c0010ff8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ffb:	89 c5                	mov    ebp,eax
c0010ffd:	e8 a6 f6 fe ff       	call   c00006a8 <strlen>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011009:	3d 2c 01 00 00       	cmp    eax,0x12c
c001100e:	76 10                	jbe    c0011020 <VgaText::receiveKey(unsigned char)+0xb8>
c0011010:	83 ec 0c             	sub    esp,0xc
c0011013:	68 ff 8c 02 c0       	push   0xc0028cff
c0011018:	e8 86 88 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	50                   	push   eax
c0011021:	50                   	push   eax
c0011022:	57                   	push   edi
c0011023:	53                   	push   ebx
c0011024:	e8 b8 f7 fe ff       	call   c00007e1 <strcat>
c0011029:	83 c4 0c             	add    esp,0xc
c001102c:	68 96 00 00 00       	push   0x96
c0011031:	6a 00                	push   0x0
c0011033:	57                   	push   edi
c0011034:	e8 52 f6 fe ff       	call   c000068b <memset>
c0011039:	83 c4 10             	add    esp,0x10
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	56                   	push   esi
c0011040:	e8 d5 f9 ff ff       	call   c0010a1a <VgaText::doUpdate()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 c4 1c             	add    esp,0x1c
c001104b:	5b                   	pop    ebx
c001104c:	5e                   	pop    esi
c001104d:	5f                   	pop    edi
c001104e:	5d                   	pop    ebp
c001104f:	c3                   	ret    

c0011050 <VgaText::write(unsigned long long, void*, int*)>:
c0011050:	55                   	push   ebp
c0011051:	57                   	push   edi
c0011052:	56                   	push   esi
c0011053:	53                   	push   ebx
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001105b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001105f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011063:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001106a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001106d:	39 eb                	cmp    ebx,ebp
c001106f:	74 13                	je     c0011084 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011071:	43                   	inc    ebx
c0011072:	50                   	push   eax
c0011073:	50                   	push   eax
c0011074:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011078:	50                   	push   eax
c0011079:	56                   	push   esi
c001107a:	e8 d1 fb ff ff       	call   c0010c50 <VgaText::putchar(char)>
c001107f:	83 c4 10             	add    esp,0x10
c0011082:	eb e9                	jmp    c001106d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011084:	83 ec 0c             	sub    esp,0xc
c0011087:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001108e:	56                   	push   esi
c001108f:	e8 86 f9 ff ff       	call   c0010a1a <VgaText::doUpdate()>
c0011094:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011098:	89 38                	mov    DWORD PTR [eax],edi
c001109a:	83 c4 1c             	add    esp,0x1c
c001109d:	31 c0                	xor    eax,eax
c001109f:	5b                   	pop    ebx
c00110a0:	5e                   	pop    esi
c00110a1:	5f                   	pop    edi
c00110a2:	5d                   	pop    ebp
c00110a3:	c3                   	ret    

c00110a4 <newTerminal(char*)>:
c00110a4:	83 ec 28             	sub    esp,0x28
c00110a7:	68 60 12 00 00       	push   0x1260
c00110ac:	e8 23 e4 ff ff       	call   c000f4d4 <malloc>
c00110b1:	5a                   	pop    edx
c00110b2:	59                   	pop    ecx
c00110b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110b7:	50                   	push   eax
c00110b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110bc:	e8 15 fd ff ff       	call   c0010dd6 <VgaText::VgaText(char const*)>
c00110c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110c5:	83 c4 2c             	add    esp,0x2c
c00110c8:	c3                   	ret    
c00110c9:	90                   	nop

c00110ca <TSS::TSS()>:
c00110ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110d5:	90                   	nop
c00110d6:	c3                   	ret    
c00110d7:	90                   	nop

c00110d8 <TSS::setESP(unsigned long)>:
c00110d8:	55                   	push   ebp
c00110d9:	89 e5                	mov    ebp,esp
c00110db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110e7:	90                   	nop
c00110e8:	5d                   	pop    ebp
c00110e9:	c3                   	ret    

c00110ea <TSS::flush()>:
c00110ea:	55                   	push   ebp
c00110eb:	89 e5                	mov    ebp,esp
c00110ed:	83 ec 10             	sub    esp,0x10
c00110f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00110f5:	83 c8 03             	or     eax,0x3
c00110f8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00110fc:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011100:	66 89 d0             	mov    ax,dx
c0011103:	0f 00 d8             	ltr    ax
c0011106:	90                   	nop
c0011107:	c9                   	leave  
c0011108:	c3                   	ret    
c0011109:	90                   	nop

c001110a <TSS::setup(unsigned long, unsigned long)>:
c001110a:	55                   	push   ebp
c001110b:	89 e5                	mov    ebp,esp
c001110d:	83 ec 18             	sub    esp,0x18
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	6a 68                	push   0x68
c0011115:	e8 ba e3 ff ff       	call   c000f4d4 <malloc>
c001111a:	83 c4 10             	add    esp,0x10
c001111d:	89 c2                	mov    edx,eax
c001111f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011122:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011128:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112b:	83 ec 04             	sub    esp,0x4
c001112e:	6a 68                	push   0x68
c0011130:	6a 00                	push   0x0
c0011132:	50                   	push   eax
c0011133:	e8 53 f5 fe ff       	call   c000068b <memset>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001113e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011141:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001114a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001114d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011159:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001115c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001115f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011165:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001116b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001116e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011171:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001117d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011189:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001118f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011195:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001119b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001119e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a1:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00111a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ad:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00111b0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00111b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111c5:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00111cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d2:	0f 20 da             	mov    edx,cr3
c00111d5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111db:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	50                   	push   eax
c00111e8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111eb:	50                   	push   eax
c00111ec:	e8 c1 da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00111f1:	83 c4 10             	add    esp,0x10
c00111f4:	83 ec 08             	sub    esp,0x8
c00111f7:	6a 68                	push   0x68
c00111f9:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111fc:	50                   	push   eax
c00111fd:	e8 cc da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c0011202:	83 c4 10             	add    esp,0x10
c0011205:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011209:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001120c:	83 e0 0f             	and    eax,0xf
c001120f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011212:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011215:	83 c8 40             	or     eax,0x40
c0011218:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001121b:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011220:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011226:	05 78 01 00 00       	add    eax,0x178
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011231:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011234:	50                   	push   eax
c0011235:	e8 c8 da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c001123a:	83 c4 10             	add    esp,0x10
c001123d:	89 c2                	mov    edx,eax
c001123f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011242:	89 10                	mov    DWORD PTR [eax],edx
c0011244:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011249:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001124f:	05 78 01 00 00       	add    eax,0x178
c0011254:	83 ec 0c             	sub    esp,0xc
c0011257:	50                   	push   eax
c0011258:	e8 e9 da ff ff       	call   c000ed46 <GDT::flush()>
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011263:	8b 00                	mov    eax,DWORD PTR [eax]
c0011265:	83 ec 08             	sub    esp,0x8
c0011268:	50                   	push   eax
c0011269:	68 68 8d 02 c0       	push   0xc0028d68
c001126e:	e8 16 15 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011279:	8b 00                	mov    eax,DWORD PTR [eax]
c001127b:	c9                   	leave  
c001127c:	c3                   	ret    
c001127d:	90                   	nop

c001127e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001127e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011282:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011289:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001128e:	75 08                	jne    c0011298 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011290:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011296:	eb 38                	jmp    c00112d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011298:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001129d:	75 17                	jne    c00112b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001129f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00112af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112b3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00112b6:	89 c1                	mov    ecx,eax
c00112b8:	83 e1 fd             	and    ecx,0xfffffffd
c00112bb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112c1:	74 cd                	je     c0011290 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112c3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112c8:	83 e0 ef             	and    eax,0xffffffef
c00112cb:	83 f8 08             	cmp    eax,0x8
c00112ce:	76 c0                	jbe    c0011290 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112d0:	31 c0                	xor    eax,eax
c00112d2:	c3                   	ret    
c00112d3:	90                   	nop

c00112d4 <ReservedFilename::isAtty()>:
c00112d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112db:	31 c0                	xor    eax,eax
c00112dd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112e3:	74 09                	je     c00112ee <ReservedFilename::isAtty()+0x1a>
c00112e5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112eb:	0f 94 c0             	sete   al
c00112ee:	c3                   	ret    
c00112ef:	90                   	nop

c00112f0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112ff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011304:	75 08                	jne    c001130e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011306:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001130c:	eb 3d                	jmp    c001134b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001130e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011313:	75 17                	jne    c001132c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001131a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001131d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011323:	8b 10                	mov    edx,DWORD PTR [eax]
c0011325:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011329:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001132c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011331:	75 04                	jne    c0011337 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011333:	89 0a                	mov    DWORD PTR [edx],ecx
c0011335:	eb 14                	jmp    c001134b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011337:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001133c:	74 c8                	je     c0011306 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001133e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011343:	83 e0 ef             	and    eax,0xffffffef
c0011346:	83 f8 08             	cmp    eax,0x8
c0011349:	76 bb                	jbe    c0011306 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001134b:	31 c0                	xor    eax,eax
c001134d:	c3                   	ret    

c001134e <UnixFile::getFileDescriptor()>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011355:	c3                   	ret    

c0011356 <UnixFile::UnixFile(int)>:
c0011356:	53                   	push   ebx
c0011357:	83 ec 28             	sub    esp,0x28
c001135a:	ba 54 8e 02 c0       	mov    edx,0xc0028e54
c001135f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011363:	89 10                	mov    DWORD PTR [eax],edx
c0011365:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001136d:	0f 8f 8c 01 00 00    	jg     c00114ff <UnixFile::UnixFile(int)+0x1a9>
c0011373:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011378:	8d 50 01             	lea    edx,[eax+0x1]
c001137b:	89 15 00 b9 02 c0    	mov    DWORD PTR ds:0xc002b900,edx
c0011381:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011385:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011388:	83 ec 08             	sub    esp,0x8
c001138b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001138f:	68 d8 ca 02 c0       	push   0xc002cad8
c0011394:	e8 97 5d 01 00       	call   c0027130 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	a0 d4 ca 02 c0       	mov    al,ds:0xc002cad4
c00113a1:	83 f0 01             	xor    eax,0x1
c00113a4:	84 c0                	test   al,al
c00113a6:	0f 84 54 01 00 00    	je     c0011500 <UnixFile::UnixFile(int)+0x1aa>
c00113ac:	c6 05 d4 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cad4,0x1
c00113b3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113bb:	83 ec 0c             	sub    esp,0xc
c00113be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113c2:	e8 0d e1 ff ff       	call   c000f4d4 <malloc>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	89 c3                	mov    ebx,eax
c00113cc:	83 ec 08             	sub    esp,0x8
c00113cf:	68 03 ff ff 0f       	push   0xfffff03
c00113d4:	53                   	push   ebx
c00113d5:	e8 2c 01 00 00       	call   c0011506 <ReservedFilename::ReservedFilename(int)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	89 1d cc ca 02 c0    	mov    DWORD PTR ds:0xc002cacc,ebx
c00113e3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113eb:	83 ec 0c             	sub    esp,0xc
c00113ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f2:	e8 dd e0 ff ff       	call   c000f4d4 <malloc>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	89 c3                	mov    ebx,eax
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	68 01 ff ff 0f       	push   0xfffff01
c0011404:	53                   	push   ebx
c0011405:	e8 fc 00 00 00       	call   c0011506 <ReservedFilename::ReservedFilename(int)>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	89 1d d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,ebx
c0011413:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001141b:	83 ec 0c             	sub    esp,0xc
c001141e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011422:	e8 ad e0 ff ff       	call   c000f4d4 <malloc>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	89 c3                	mov    ebx,eax
c001142c:	83 ec 08             	sub    esp,0x8
c001142f:	68 00 ff ff 0f       	push   0xfffff00
c0011434:	53                   	push   ebx
c0011435:	e8 cc 00 00 00       	call   c0011506 <ReservedFilename::ReservedFilename(int)>
c001143a:	83 c4 10             	add    esp,0x10
c001143d:	89 1d c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,ebx
c0011443:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001144b:	83 ec 0c             	sub    esp,0xc
c001144e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011452:	e8 7d e0 ff ff       	call   c000f4d4 <malloc>
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	89 c3                	mov    ebx,eax
c001145c:	83 ec 08             	sub    esp,0x8
c001145f:	68 02 ff ff 0f       	push   0xfffff02
c0011464:	53                   	push   ebx
c0011465:	e8 9c 00 00 00       	call   c0011506 <ReservedFilename::ReservedFilename(int)>
c001146a:	83 c4 10             	add    esp,0x10
c001146d:	89 1d c8 ca 02 c0    	mov    DWORD PTR ds:0xc002cac8,ebx
c0011473:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001147b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011480:	7f 7e                	jg     c0011500 <UnixFile::UnixFile(int)+0x1aa>
c0011482:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011491:	e8 3e e0 ff ff       	call   c000f4d4 <malloc>
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	89 c3                	mov    ebx,eax
c001149b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001149f:	05 10 ff ff 0f       	add    eax,0xfffff10
c00114a4:	83 ec 08             	sub    esp,0x8
c00114a7:	50                   	push   eax
c00114a8:	53                   	push   ebx
c00114a9:	e8 58 00 00 00       	call   c0011506 <ReservedFilename::ReservedFilename(int)>
c00114ae:	83 c4 10             	add    esp,0x10
c00114b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b5:	89 1c 85 a0 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3560],ebx
c00114bc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00114cb:	e8 04 e0 ff ff       	call   c000f4d4 <malloc>
c00114d0:	83 c4 10             	add    esp,0x10
c00114d3:	89 c3                	mov    ebx,eax
c00114d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114de:	83 ec 08             	sub    esp,0x8
c00114e1:	50                   	push   eax
c00114e2:	53                   	push   ebx
c00114e3:	e8 1e 00 00 00       	call   c0011506 <ReservedFilename::ReservedFilename(int)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ef:	89 1c 85 60 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd35a0],ebx
c00114f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114fa:	e9 7c ff ff ff       	jmp    c001147b <UnixFile::UnixFile(int)+0x125>
c00114ff:	90                   	nop
c0011500:	83 c4 28             	add    esp,0x28
c0011503:	5b                   	pop    ebx
c0011504:	c3                   	ret    
c0011505:	90                   	nop

c0011506 <ReservedFilename::ReservedFilename(int)>:
c0011506:	83 ec 0c             	sub    esp,0xc
c0011509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001150d:	83 ec 08             	sub    esp,0x8
c0011510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011514:	50                   	push   eax
c0011515:	e8 3c fe ff ff       	call   c0011356 <UnixFile::UnixFile(int)>
c001151a:	83 c4 10             	add    esp,0x10
c001151d:	ba 70 8e 02 c0       	mov    edx,0xc0028e70
c0011522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011526:	89 10                	mov    DWORD PTR [eax],edx
c0011528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001152c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011530:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011533:	90                   	nop
c0011534:	83 c4 0c             	add    esp,0xc
c0011537:	c3                   	ret    

c0011538 <UnixFile::~UnixFile()>:
c0011538:	83 ec 1c             	sub    esp,0x1c
c001153b:	ba 54 8e 02 c0       	mov    edx,0xc0028e54
c0011540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011544:	89 10                	mov    DWORD PTR [eax],edx
c0011546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011552:	7f 73                	jg     c00115c7 <UnixFile::~UnixFile()+0x8f>
c0011554:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001155c:	83 ec 0c             	sub    esp,0xc
c001155f:	68 d8 ca 02 c0       	push   0xc002cad8
c0011564:	e8 9b 5c 01 00       	call   c0027204 <LinkedList<UnixFile>::getFirstElement()>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011570:	83 ec 0c             	sub    esp,0xc
c0011573:	68 d8 ca 02 c0       	push   0xc002cad8
c0011578:	e8 8f 5c 01 00       	call   c002720c <LinkedList<UnixFile>::removeFirst()>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011584:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011588:	74 40                	je     c00115ca <UnixFile::~UnixFile()+0x92>
c001158a:	83 ec 08             	sub    esp,0x8
c001158d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011591:	68 d8 ca 02 c0       	push   0xc002cad8
c0011596:	e8 95 5b 01 00       	call   c0027130 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115a2:	8d 50 01             	lea    edx,[eax+0x1]
c00115a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115a9:	3d 88 13 00 00       	cmp    eax,0x1388
c00115ae:	0f 94 c0             	sete   al
c00115b1:	84 c0                	test   al,al
c00115b3:	74 a7                	je     c001155c <UnixFile::~UnixFile()+0x24>
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	68 2c 8e 02 c0       	push   0xc0028e2c
c00115bd:	e8 e1 82 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	eb 95                	jmp    c001155c <UnixFile::~UnixFile()+0x24>
c00115c7:	90                   	nop
c00115c8:	eb 01                	jmp    c00115cb <UnixFile::~UnixFile()+0x93>
c00115ca:	90                   	nop
c00115cb:	90                   	nop
c00115cc:	83 c4 1c             	add    esp,0x1c
c00115cf:	c3                   	ret    

c00115d0 <UnixFile::~UnixFile()>:
c00115d0:	83 ec 0c             	sub    esp,0xc
c00115d3:	83 ec 0c             	sub    esp,0xc
c00115d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115da:	e8 59 ff ff ff       	call   c0011538 <UnixFile::~UnixFile()>
c00115df:	83 c4 10             	add    esp,0x10
c00115e2:	83 ec 08             	sub    esp,0x8
c00115e5:	6a 0c                	push   0xc
c00115e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115eb:	e8 b9 10 00 00       	call   c00126a9 <operator delete(void*, unsigned long)>
c00115f0:	83 c4 10             	add    esp,0x10
c00115f3:	83 c4 0c             	add    esp,0xc
c00115f6:	c3                   	ret    
c00115f7:	90                   	nop

c00115f8 <ReservedFilename::~ReservedFilename()>:
c00115f8:	83 ec 0c             	sub    esp,0xc
c00115fb:	ba 70 8e 02 c0       	mov    edx,0xc0028e70
c0011600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011604:	89 10                	mov    DWORD PTR [eax],edx
c0011606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001160a:	83 ec 0c             	sub    esp,0xc
c001160d:	50                   	push   eax
c001160e:	e8 25 ff ff ff       	call   c0011538 <UnixFile::~UnixFile()>
c0011613:	83 c4 10             	add    esp,0x10
c0011616:	90                   	nop
c0011617:	83 c4 0c             	add    esp,0xc
c001161a:	c3                   	ret    
c001161b:	90                   	nop

c001161c <ReservedFilename::~ReservedFilename()>:
c001161c:	83 ec 0c             	sub    esp,0xc
c001161f:	83 ec 0c             	sub    esp,0xc
c0011622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011626:	e8 cd ff ff ff       	call   c00115f8 <ReservedFilename::~ReservedFilename()>
c001162b:	83 c4 10             	add    esp,0x10
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	6a 0c                	push   0xc
c0011633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011637:	e8 6d 10 00 00       	call   c00126a9 <operator delete(void*, unsigned long)>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	83 c4 0c             	add    esp,0xc
c0011642:	c3                   	ret    

c0011643 <getFromFileDescriptor(int)>:
c0011643:	53                   	push   ebx
c0011644:	83 ec 08             	sub    esp,0x8
c0011647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001164b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011651:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011657:	7f 2c                	jg     c0011685 <getFromFileDescriptor(int)+0x42>
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	68 d8 ca 02 c0       	push   0xc002cad8
c0011661:	e8 9e 5b 01 00       	call   c0027204 <LinkedList<UnixFile>::getFirstElement()>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	85 c0                	test   eax,eax
c001166b:	75 04                	jne    c0011671 <getFromFileDescriptor(int)+0x2e>
c001166d:	31 c0                	xor    eax,eax
c001166f:	eb 6e                	jmp    c00116df <getFromFileDescriptor(int)+0x9c>
c0011671:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011674:	74 69                	je     c00116df <getFromFileDescriptor(int)+0x9c>
c0011676:	52                   	push   edx
c0011677:	52                   	push   edx
c0011678:	50                   	push   eax
c0011679:	68 d8 ca 02 c0       	push   0xc002cad8
c001167e:	e8 2b 5c 01 00       	call   c00272ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011683:	eb e1                	jmp    c0011666 <getFromFileDescriptor(int)+0x23>
c0011685:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001168a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011690:	74 4d                	je     c00116df <getFromFileDescriptor(int)+0x9c>
c0011692:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c0011697:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001169d:	74 40                	je     c00116df <getFromFileDescriptor(int)+0x9c>
c001169f:	a1 c8 ca 02 c0       	mov    eax,ds:0xc002cac8
c00116a4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00116aa:	74 33                	je     c00116df <getFromFileDescriptor(int)+0x9c>
c00116ac:	a1 c4 ca 02 c0       	mov    eax,ds:0xc002cac4
c00116b1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116b7:	74 26                	je     c00116df <getFromFileDescriptor(int)+0x9c>
c00116b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116bf:	83 f8 08             	cmp    eax,0x8
c00116c2:	77 09                	ja     c00116cd <getFromFileDescriptor(int)+0x8a>
c00116c4:	8b 04 85 a0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3560]
c00116cb:	eb 12                	jmp    c00116df <getFromFileDescriptor(int)+0x9c>
c00116cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00116d3:	83 fb 08             	cmp    ebx,0x8
c00116d6:	77 95                	ja     c001166d <getFromFileDescriptor(int)+0x2a>
c00116d8:	8b 04 9d 60 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd35a0]
c00116df:	83 c4 08             	add    esp,0x8
c00116e2:	5b                   	pop    ebx
c00116e3:	c3                   	ret    

c00116e4 <__static_initialization_and_destruction_0(int, int)>:
c00116e4:	83 ec 0c             	sub    esp,0xc
c00116e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116ec:	75 34                	jne    c0011722 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00116f6:	75 2a                	jne    c0011722 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116f8:	83 ec 0c             	sub    esp,0xc
c00116fb:	68 d8 ca 02 c0       	push   0xc002cad8
c0011700:	e8 d3 59 01 00       	call   c00270d8 <LinkedList<UnixFile>::LinkedList()>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	83 ec 04             	sub    esp,0x4
c001170b:	68 88 b8 02 c0       	push   0xc002b888
c0011710:	68 d8 ca 02 c0       	push   0xc002cad8
c0011715:	68 d6 70 02 c0       	push   0xc00270d6
c001171a:	e8 04 0f 00 00       	call   c0012623 <__cxa_atexit>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	90                   	nop
c0011723:	83 c4 0c             	add    esp,0xc
c0011726:	c3                   	ret    

c0011727 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011727:	83 ec 0c             	sub    esp,0xc
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	68 ff ff 00 00       	push   0xffff
c0011732:	6a 01                	push   0x1
c0011734:	e8 ab ff ff ff       	call   c00116e4 <__static_initialization_and_destruction_0(int, int)>
c0011739:	83 c4 10             	add    esp,0x10
c001173c:	83 c4 0c             	add    esp,0xc
c001173f:	c3                   	ret    

c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011740:	53                   	push   ebx
c0011741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011745:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011749:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001174f:	89 c8                	mov    eax,ecx
c0011751:	d1 e8                	shr    eax,1
c0011753:	03 05 08 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b908
c0011759:	83 e1 01             	and    ecx,0x1
c001175c:	8a 10                	mov    dl,BYTE PTR [eax]
c001175e:	75 09                	jne    c0011769 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011760:	83 e2 f0             	and    edx,0xfffffff0
c0011763:	09 da                	or     edx,ebx
c0011765:	88 10                	mov    BYTE PTR [eax],dl
c0011767:	5b                   	pop    ebx
c0011768:	c3                   	ret    
c0011769:	c1 e3 04             	shl    ebx,0x4
c001176c:	83 e2 0f             	and    edx,0xf
c001176f:	09 da                	or     edx,ebx
c0011771:	88 10                	mov    BYTE PTR [eax],dl
c0011773:	5b                   	pop    ebx
c0011774:	c3                   	ret    

c0011775 <Virt::getPageState(unsigned long)>:
c0011775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011779:	8b 0d 08 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b908
c001177f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011785:	89 d0                	mov    eax,edx
c0011787:	d1 e8                	shr    eax,1
c0011789:	83 e2 01             	and    edx,0x1
c001178c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001178f:	75 04                	jne    c0011795 <Virt::getPageState(unsigned long)+0x20>
c0011791:	83 e0 0f             	and    eax,0xf
c0011794:	c3                   	ret    
c0011795:	c0 e8 04             	shr    al,0x4
c0011798:	c3                   	ret    

c0011799 <Virt::allocateKernelVirtualPages(int)>:
c0011799:	55                   	push   ebp
c001179a:	31 ed                	xor    ebp,ebp
c001179c:	57                   	push   edi
c001179d:	56                   	push   esi
c001179e:	53                   	push   ebx
c001179f:	31 db                	xor    ebx,ebx
c00117a1:	83 ec 1c             	sub    esp,0x1c
c00117a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00117a8:	8b 3d 04 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b904
c00117ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117b3:	57                   	push   edi
c00117b4:	e8 bc ff ff ff       	call   c0011775 <Virt::getPageState(unsigned long)>
c00117b9:	5a                   	pop    edx
c00117ba:	84 c0                	test   al,al
c00117bc:	75 3a                	jne    c00117f8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117be:	85 db                	test   ebx,ebx
c00117c0:	75 02                	jne    c00117c4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117c2:	89 fd                	mov    ebp,edi
c00117c4:	43                   	inc    ebx
c00117c5:	39 f3                	cmp    ebx,esi
c00117c7:	74 5a                	je     c0011823 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00117c9:	47                   	inc    edi
c00117ca:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117d0:	76 31                	jbe    c0011803 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00117d2:	c7 05 04 b9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b904,0xc8000
c00117dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117e1:	75 28                	jne    c001180b <Virt::allocateKernelVirtualPages(int)+0x72>
c00117e3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117e8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117ed:	57                   	push   edi
c00117ee:	e8 82 ff ff ff       	call   c0011775 <Virt::getPageState(unsigned long)>
c00117f3:	5a                   	pop    edx
c00117f4:	84 c0                	test   al,al
c00117f6:	74 c6                	je     c00117be <Virt::allocateKernelVirtualPages(int)+0x25>
c00117f8:	31 db                	xor    ebx,ebx
c00117fa:	47                   	inc    edi
c00117fb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011801:	77 cf                	ja     c00117d2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011803:	89 3d 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,edi
c0011809:	eb a8                	jmp    c00117b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	68 84 8e 02 c0       	push   0xc0028e84
c0011813:	e8 8b 80 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0011818:	8b 3d 04 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b904
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	eb 90                	jmp    c00117b3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011823:	89 2d 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,ebp
c0011829:	4b                   	dec    ebx
c001182a:	74 5f                	je     c001188b <Virt::allocateKernelVirtualPages(int)+0xf2>
c001182c:	85 f6                	test   esi,esi
c001182e:	74 3d                	je     c001186d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011830:	89 e8                	mov    eax,ebp
c0011832:	31 db                	xor    ebx,ebx
c0011834:	8d 7e ff             	lea    edi,[esi-0x1]
c0011837:	eb 14                	jmp    c001184d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011839:	6a 01                	push   0x1
c001183b:	43                   	inc    ebx
c001183c:	50                   	push   eax
c001183d:	e8 fe fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011842:	58                   	pop    eax
c0011843:	39 f3                	cmp    ebx,esi
c0011845:	5a                   	pop    edx
c0011846:	74 25                	je     c001186d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011848:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c001184d:	8d 50 01             	lea    edx,[eax+0x1]
c0011850:	85 db                	test   ebx,ebx
c0011852:	89 15 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,edx
c0011858:	74 20                	je     c001187a <Virt::allocateKernelVirtualPages(int)+0xe1>
c001185a:	39 df                	cmp    edi,ebx
c001185c:	75 db                	jne    c0011839 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001185e:	6a 03                	push   0x3
c0011860:	43                   	inc    ebx
c0011861:	50                   	push   eax
c0011862:	e8 d9 fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011867:	59                   	pop    ecx
c0011868:	39 f3                	cmp    ebx,esi
c001186a:	58                   	pop    eax
c001186b:	75 db                	jne    c0011848 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001186d:	83 c4 1c             	add    esp,0x1c
c0011870:	89 e8                	mov    eax,ebp
c0011872:	5b                   	pop    ebx
c0011873:	c1 e0 0c             	shl    eax,0xc
c0011876:	5e                   	pop    esi
c0011877:	5f                   	pop    edi
c0011878:	5d                   	pop    ebp
c0011879:	c3                   	ret    
c001187a:	6a 02                	push   0x2
c001187c:	bb 01 00 00 00       	mov    ebx,0x1
c0011881:	50                   	push   eax
c0011882:	e8 b9 fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011887:	58                   	pop    eax
c0011888:	5a                   	pop    edx
c0011889:	eb bd                	jmp    c0011848 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001188b:	6a 04                	push   0x4
c001188d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011890:	55                   	push   ebp
c0011891:	a3 04 b9 02 c0       	mov    ds:0xc002b904,eax
c0011896:	e8 a5 fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001189b:	59                   	pop    ecx
c001189c:	89 e8                	mov    eax,ebp
c001189e:	5b                   	pop    ebx
c001189f:	c1 e0 0c             	shl    eax,0xc
c00118a2:	83 c4 1c             	add    esp,0x1c
c00118a5:	5b                   	pop    ebx
c00118a6:	5e                   	pop    esi
c00118a7:	5f                   	pop    edi
c00118a8:	5d                   	pop    ebp
c00118a9:	c3                   	ret    

c00118aa <Virt::virtualMemorySetup()>:
c00118aa:	53                   	push   ebx
c00118ab:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	6a 0f                	push   0xf
c00118b5:	53                   	push   ebx
c00118b6:	43                   	inc    ebx
c00118b7:	e8 84 fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118bc:	59                   	pop    ecx
c00118bd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118c3:	58                   	pop    eax
c00118c4:	75 ed                	jne    c00118b3 <Virt::virtualMemorySetup()+0x9>
c00118c6:	83 ec 08             	sub    esp,0x8
c00118c9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118ce:	68 00 00 00 c8       	push   0xc8000000
c00118d3:	68 0b 90 02 c0       	push   0xc002900b
c00118d8:	e8 ac 0e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00118dd:	58                   	pop    eax
c00118de:	5a                   	pop    edx
c00118df:	68 00 f0 ff ef       	push   0xeffff000
c00118e4:	68 1f 90 02 c0       	push   0xc002901f
c00118e9:	e8 9b 0e 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	83 ec 08             	sub    esp,0x8
c00118f4:	6a 00                	push   0x0
c00118f6:	53                   	push   ebx
c00118f7:	43                   	inc    ebx
c00118f8:	e8 43 fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118fd:	83 c4 10             	add    esp,0x10
c0011900:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011906:	75 e9                	jne    c00118f1 <Virt::virtualMemorySetup()+0x47>
c0011908:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001190d:	83 ec 08             	sub    esp,0x8
c0011910:	6a 0f                	push   0xf
c0011912:	53                   	push   ebx
c0011913:	43                   	inc    ebx
c0011914:	e8 27 fe ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011922:	75 e9                	jne    c001190d <Virt::virtualMemorySetup()+0x63>
c0011924:	83 c4 08             	add    esp,0x8
c0011927:	5b                   	pop    ebx
c0011928:	c3                   	ret    

c0011929 <Virt::getAKernelVAS()>:
c0011929:	a1 e4 ca 02 c0       	mov    eax,ds:0xc002cae4
c001192e:	c3                   	ret    

c001192f <Virt::setupPageSwapping(int)>:
c001192f:	57                   	push   edi
c0011930:	56                   	push   esi
c0011931:	53                   	push   ebx
c0011932:	83 ec 1c             	sub    esp,0x1c
c0011935:	68 14 01 00 00       	push   0x114
c001193a:	e8 95 db ff ff       	call   c000f4d4 <malloc>
c001193f:	83 c4 0c             	add    esp,0xc
c0011942:	89 c6                	mov    esi,eax
c0011944:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001194a:	68 33 90 02 c0       	push   0xc0029033
c001194f:	50                   	push   eax
c0011950:	e8 63 13 00 00       	call   c0012cb8 <File::File(char const*, Process*)>
c0011955:	89 34 24             	mov    DWORD PTR [esp],esi
c0011958:	e8 37 15 00 00       	call   c0012e94 <File::unlink()>
c001195d:	58                   	pop    eax
c001195e:	5a                   	pop    edx
c001195f:	6a 12                	push   0x12
c0011961:	56                   	push   esi
c0011962:	e8 b5 13 00 00       	call   c0012d1c <File::open(FileOpenMode)>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	85 c0                	test   eax,eax
c001196c:	0f 85 ca 00 00 00    	jne    c0011a3c <Virt::setupPageSwapping(int)+0x10d>
c0011972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011976:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001197e:	c1 e3 08             	shl    ebx,0x8
c0011981:	83 ec 0c             	sub    esp,0xc
c0011984:	68 00 00 01 00       	push   0x10000
c0011989:	e8 46 db ff ff       	call   c000f4d4 <malloc>
c001198e:	83 c4 0c             	add    esp,0xc
c0011991:	89 c7                	mov    edi,eax
c0011993:	68 00 00 01 00       	push   0x10000
c0011998:	6a 00                	push   0x0
c001199a:	50                   	push   eax
c001199b:	e8 eb ec fe ff       	call   c000068b <memset>
c00119a0:	83 c4 10             	add    esp,0x10
c00119a3:	85 db                	test   ebx,ebx
c00119a5:	79 03                	jns    c00119aa <Virt::setupPageSwapping(int)+0x7b>
c00119a7:	83 c3 0f             	add    ebx,0xf
c00119aa:	c1 fb 04             	sar    ebx,0x4
c00119ad:	4b                   	dec    ebx
c00119ae:	83 fb ff             	cmp    ebx,0xffffffff
c00119b1:	74 4b                	je     c00119fe <Virt::setupPageSwapping(int)+0xcf>
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00119b8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119bc:	52                   	push   edx
c00119bd:	57                   	push   edi
c00119be:	6a 00                	push   0x0
c00119c0:	68 00 00 01 00       	push   0x10000
c00119c5:	56                   	push   esi
c00119c6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119c9:	83 c4 20             	add    esp,0x20
c00119cc:	85 c0                	test   eax,eax
c00119ce:	75 59                	jne    c0011a29 <Virt::setupPageSwapping(int)+0xfa>
c00119d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119d4:	3d 00 00 01 00       	cmp    eax,0x10000
c00119d9:	74 d2                	je     c00119ad <Virt::setupPageSwapping(int)+0x7e>
c00119db:	83 ec 08             	sub    esp,0x8
c00119de:	4b                   	dec    ebx
c00119df:	50                   	push   eax
c00119e0:	68 86 90 02 c0       	push   0xc0029086
c00119e5:	e8 9f 0d 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00119ea:	c7 04 24 8f 90 02 c0 	mov    DWORD PTR [esp],0xc002908f
c00119f1:	e8 ad 7e 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	83 fb ff             	cmp    ebx,0xffffffff
c00119fc:	75 b5                	jne    c00119b3 <Virt::setupPageSwapping(int)+0x84>
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	56                   	push   esi
c0011a02:	e8 73 13 00 00       	call   c0012d7a <File::close()>
c0011a07:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a0a:	e8 e5 da ff ff       	call   c000f4f4 <rfree>
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	85 f6                	test   esi,esi
c0011a14:	74 0c                	je     c0011a22 <Virt::setupPageSwapping(int)+0xf3>
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a1b:	56                   	push   esi
c0011a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	83 c4 10             	add    esp,0x10
c0011a25:	5b                   	pop    ebx
c0011a26:	5e                   	pop    esi
c0011a27:	5f                   	pop    edi
c0011a28:	c3                   	ret    
c0011a29:	83 ec 08             	sub    esp,0x8
c0011a2c:	50                   	push   eax
c0011a2d:	68 6e 90 02 c0       	push   0xc002906e
c0011a32:	e8 52 0d 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	eb 94                	jmp    c00119d0 <Virt::setupPageSwapping(int)+0xa1>
c0011a3c:	83 ec 08             	sub    esp,0x8
c0011a3f:	50                   	push   eax
c0011a40:	68 4a 90 02 c0       	push   0xc002904a
c0011a45:	e8 3f 0d 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0011a4a:	c7 04 24 53 90 02 c0 	mov    DWORD PTR [esp],0xc0029053
c0011a51:	e8 4d 7e 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	e9 14 ff ff ff       	jmp    c0011972 <Virt::setupPageSwapping(int)+0x43>

c0011a5e <VAS::VAS()>:
c0011a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a6d:	a3 e4 ca 02 c0       	mov    ds:0xc002cae4,eax
c0011a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a76:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a7e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a85:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a8c:	90                   	nop
c0011a8d:	c3                   	ret    

c0011a8e <VAS::VAS(VAS*)>:
c0011a8e:	83 ec 0c             	sub    esp,0xc
c0011a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a9c:	83 ec 0c             	sub    esp,0xc
c0011a9f:	68 a4 8e 02 c0       	push   0xc0028ea4
c0011aa4:	e8 fa 7d 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	90                   	nop
c0011aad:	83 c4 0c             	add    esp,0xc
c0011ab0:	c3                   	ret    
c0011ab1:	90                   	nop

c0011ab2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ab6:	89 c2                	mov    edx,eax
c0011ab8:	c1 e8 0a             	shr    eax,0xa
c0011abb:	c1 ea 16             	shr    edx,0x16
c0011abe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ac3:	19 c9                	sbb    ecx,ecx
c0011ac5:	c1 e2 0c             	shl    edx,0xc
c0011ac8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ace:	25 fc 0f 00 00       	and    eax,0xffc
c0011ad3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ada:	01 d0                	add    eax,edx
c0011adc:	c3                   	ret    
c0011add:	90                   	nop

c0011ade <VAS::getPageTableEntry(unsigned long)>:
c0011ade:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ae2:	89 ca                	mov    edx,ecx
c0011ae4:	c1 e9 0a             	shr    ecx,0xa
c0011ae7:	c1 ea 16             	shr    edx,0x16
c0011aea:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011af0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011af6:	c1 e0 0c             	shl    eax,0xc
c0011af9:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011afc:	c3                   	ret    

c0011afd <Virt::freeKernelVirtualPages(unsigned long)>:
c0011afd:	57                   	push   edi
c0011afe:	56                   	push   esi
c0011aff:	be 01 00 00 00       	mov    esi,0x1
c0011b04:	53                   	push   ebx
c0011b05:	83 ec 10             	sub    esp,0x10
c0011b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b0c:	c1 eb 0c             	shr    ebx,0xc
c0011b0f:	eb 3f                	jmp    c0011b50 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b11:	e8 13 fe ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0011b16:	83 ec 08             	sub    esp,0x8
c0011b19:	57                   	push   edi
c0011b1a:	50                   	push   eax
c0011b1b:	e8 be ff ff ff       	call   c0011ade <VAS::getPageTableEntry(unsigned long)>
c0011b20:	83 c4 10             	add    esp,0x10
c0011b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b25:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b29:	f6 c4 04             	test   ah,0x4
c0011b2c:	75 5f                	jne    c0011b8d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b2e:	80 fa 04             	cmp    dl,0x4
c0011b31:	74 78                	je     c0011bab <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b33:	80 fa 02             	cmp    dl,0x2
c0011b36:	0f 84 88 00 00 00    	je     c0011bc4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b3c:	80 fa 03             	cmp    dl,0x3
c0011b3f:	0f 84 ad 00 00 00    	je     c0011bf2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b45:	fe ca                	dec    dl
c0011b47:	0f 84 92 00 00 00    	je     c0011bdf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b4d:	43                   	inc    ebx
c0011b4e:	31 f6                	xor    esi,esi
c0011b50:	53                   	push   ebx
c0011b51:	e8 1f fc ff ff       	call   c0011775 <Virt::getPageState(unsigned long)>
c0011b56:	5f                   	pop    edi
c0011b57:	89 df                	mov    edi,ebx
c0011b59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b5d:	c1 e7 0c             	shl    edi,0xc
c0011b60:	84 c0                	test   al,al
c0011b62:	75 ad                	jne    c0011b11 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b64:	83 ec 0c             	sub    esp,0xc
c0011b67:	68 95 90 02 c0       	push   0xc0029095
c0011b6c:	e8 32 7d 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0011b71:	e8 b3 fd ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0011b76:	5a                   	pop    edx
c0011b77:	59                   	pop    ecx
c0011b78:	57                   	push   edi
c0011b79:	50                   	push   eax
c0011b7a:	e8 5f ff ff ff       	call   c0011ade <VAS::getPageTableEntry(unsigned long)>
c0011b7f:	83 c4 10             	add    esp,0x10
c0011b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b84:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b88:	f6 c4 04             	test   ah,0x4
c0011b8b:	74 c0                	je     c0011b4d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b8d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b96:	83 ec 0c             	sub    esp,0xc
c0011b99:	50                   	push   eax
c0011b9a:	e8 87 de ff ff       	call   c000fa26 <Phys::freePage(unsigned long)>
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ba6:	80 fa 04             	cmp    dl,0x4
c0011ba9:	75 88                	jne    c0011b33 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011bab:	89 f0                	mov    eax,esi
c0011bad:	84 c0                	test   al,al
c0011baf:	75 47                	jne    c0011bf8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011bb1:	c7 44 24 20 c8 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028ec8
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	5b                   	pop    ebx
c0011bbd:	5e                   	pop    esi
c0011bbe:	5f                   	pop    edi
c0011bbf:	e9 df 7c 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>
c0011bc4:	89 f0                	mov    eax,esi
c0011bc6:	84 c0                	test   al,al
c0011bc8:	75 15                	jne    c0011bdf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bca:	83 ec 0c             	sub    esp,0xc
c0011bcd:	68 b1 90 02 c0       	push   0xc00290b1
c0011bd2:	e8 cc 7c 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0011bd7:	83 c4 10             	add    esp,0x10
c0011bda:	e9 6e ff ff ff       	jmp    c0011b4d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bdf:	83 ec 08             	sub    esp,0x8
c0011be2:	6a 00                	push   0x0
c0011be4:	53                   	push   ebx
c0011be5:	e8 56 fb ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	e9 5b ff ff ff       	jmp    c0011b4d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bf2:	89 f0                	mov    eax,esi
c0011bf4:	84 c0                	test   al,al
c0011bf6:	75 15                	jne    c0011c0d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011bf8:	83 ec 08             	sub    esp,0x8
c0011bfb:	6a 00                	push   0x0
c0011bfd:	53                   	push   ebx
c0011bfe:	e8 3d fb ff ff       	call   c0011740 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c03:	83 c4 10             	add    esp,0x10
c0011c06:	83 c4 10             	add    esp,0x10
c0011c09:	5b                   	pop    ebx
c0011c0a:	5e                   	pop    esi
c0011c0b:	5f                   	pop    edi
c0011c0c:	c3                   	ret    
c0011c0d:	c7 44 24 20 cd 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc00290cd
c0011c15:	83 c4 10             	add    esp,0x10
c0011c18:	5b                   	pop    ebx
c0011c19:	5e                   	pop    esi
c0011c1a:	5f                   	pop    edi
c0011c1b:	e9 83 7c 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>

c0011c20 <VAS::freeAllocatedPages(unsigned long)>:
c0011c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c28:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c2c:	74 09                	je     c0011c37 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c32:	e9 c6 fe ff ff       	jmp    c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c0011c37:	c7 44 24 04 ec 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028eec
c0011c3f:	e9 45 0b 00 00       	jmp    c0012789 <Dbg::kprintf(char const*, ...)>

c0011c44 <VAS::virtualToPhysical(unsigned long)>:
c0011c44:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c48:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c4c:	e8 8d fe ff ff       	call   c0011ade <VAS::getPageTableEntry(unsigned long)>
c0011c51:	5a                   	pop    edx
c0011c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c54:	59                   	pop    ecx
c0011c55:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c5a:	c3                   	ret    
c0011c5b:	90                   	nop

c0011c5c <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c5c:	55                   	push   ebp
c0011c5d:	57                   	push   edi
c0011c5e:	56                   	push   esi
c0011c5f:	53                   	push   ebx
c0011c60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c64:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c6c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c70:	85 db                	test   ebx,ebx
c0011c72:	7e 22                	jle    c0011c96 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c74:	c1 e3 0c             	shl    ebx,0xc
c0011c77:	01 f3                	add    ebx,esi
c0011c79:	56                   	push   esi
c0011c7a:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c80:	55                   	push   ebp
c0011c81:	e8 58 fe ff ff       	call   c0011ade <VAS::getPageTableEntry(unsigned long)>
c0011c86:	5a                   	pop    edx
c0011c87:	59                   	pop    ecx
c0011c88:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c8a:	21 f9                	and    ecx,edi
c0011c8c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c90:	39 f3                	cmp    ebx,esi
c0011c92:	89 08                	mov    DWORD PTR [eax],ecx
c0011c94:	75 e3                	jne    c0011c79 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c96:	5b                   	pop    ebx
c0011c97:	5e                   	pop    esi
c0011c98:	5f                   	pop    edi
c0011c99:	5d                   	pop    ebp
c0011c9a:	c3                   	ret    
c0011c9b:	90                   	nop

c0011c9c <VAS::setToWriteCombining(unsigned long, int)>:
c0011c9c:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011ca1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ca7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011cae:	75 01                	jne    c0011cb1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011cb0:	c3                   	ret    
c0011cb1:	68 80 00 00 00       	push   0x80
c0011cb6:	6a ff                	push   0xffffffff
c0011cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cc4:	e8 93 ff ff ff       	call   c0011c5c <VAS::reflagRange(unsigned long, int, int, int)>
c0011cc9:	83 c4 14             	add    esp,0x14
c0011ccc:	c3                   	ret    
c0011ccd:	90                   	nop

c0011cce <VAS::mapOtherVASIn(bool, VAS*)>:
c0011cce:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011cd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cde:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011ce1:	19 c0                	sbb    eax,eax
c0011ce3:	83 ca 03             	or     edx,0x3
c0011ce6:	83 e0 fc             	and    eax,0xfffffffc
c0011ce9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011cf0:	0f 20 d8             	mov    eax,cr3
c0011cf3:	0f 22 d8             	mov    cr3,eax
c0011cf6:	c3                   	ret    
c0011cf7:	90                   	nop

c0011cf8 <VAS::~VAS()>:
c0011cf8:	83 ec 2c             	sub    esp,0x2c
c0011cfb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d03:	e8 2a b0 00 00       	call   c001cd32 <lockScheduler()>
c0011d08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d12:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d18:	83 ec 04             	sub    esp,0x4
c0011d1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d1f:	6a 01                	push   0x1
c0011d21:	50                   	push   eax
c0011d22:	e8 a7 ff ff ff       	call   c0011cce <VAS::mapOtherVASIn(bool, VAS*)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d32:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d3a:	0f 8f d7 00 00 00    	jg     c0011e17 <VAS::~VAS()+0x11f>
c0011d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d4b:	c1 e2 02             	shl    edx,0x2
c0011d4e:	01 d0                	add    eax,edx
c0011d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d5a:	83 e0 01             	and    eax,0x1
c0011d5d:	0f 84 ab 00 00 00    	je     c0011e0e <VAS::~VAS()+0x116>
c0011d63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d6b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d73:	7f 75                	jg     c0011dea <VAS::~VAS()+0xf2>
c0011d75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d79:	c1 e0 0a             	shl    eax,0xa
c0011d7c:	89 c2                	mov    edx,eax
c0011d7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d82:	01 d0                	add    eax,edx
c0011d84:	c1 e0 0c             	shl    eax,0xc
c0011d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d8b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d95:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d9b:	83 ec 04             	sub    esp,0x4
c0011d9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011da2:	6a 01                	push   0x1
c0011da4:	50                   	push   eax
c0011da5:	e8 08 fd ff ff       	call   c0011ab2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011db1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dbf:	25 01 04 00 00       	and    eax,0x401
c0011dc4:	3d 01 04 00 00       	cmp    eax,0x401
c0011dc9:	75 19                	jne    c0011de4 <VAS::~VAS()+0xec>
c0011dcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dcf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dd4:	83 ec 0c             	sub    esp,0xc
c0011dd7:	50                   	push   eax
c0011dd8:	e8 49 dc ff ff       	call   c000fa26 <Phys::freePage(unsigned long)>
c0011ddd:	83 c4 10             	add    esp,0x10
c0011de0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011de4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011de8:	eb 81                	jmp    c0011d6b <VAS::~VAS()+0x73>
c0011dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dee:	25 00 04 00 00       	and    eax,0x400
c0011df3:	74 19                	je     c0011e0e <VAS::~VAS()+0x116>
c0011df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	50                   	push   eax
c0011e02:	e8 1f dc ff ff       	call   c000fa26 <Phys::freePage(unsigned long)>
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e0e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e12:	e9 1b ff ff ff       	jmp    c0011d32 <VAS::~VAS()+0x3a>
c0011e17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e1e:	83 ec 0c             	sub    esp,0xc
c0011e21:	50                   	push   eax
c0011e22:	e8 d6 fc ff ff       	call   c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e31:	83 ec 0c             	sub    esp,0xc
c0011e34:	50                   	push   eax
c0011e35:	e8 ec db ff ff       	call   c000fa26 <Phys::freePage(unsigned long)>
c0011e3a:	83 c4 10             	add    esp,0x10
c0011e3d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e45:	c1 e0 02             	shl    eax,0x2
c0011e48:	83 ec 08             	sub    esp,0x8
c0011e4b:	50                   	push   eax
c0011e4c:	68 10 8f 02 c0       	push   0xc0028f10
c0011e51:	e8 33 09 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0011e56:	83 c4 10             	add    esp,0x10
c0011e59:	e8 d6 ae 00 00       	call   c001cd34 <unlockScheduler()>
c0011e5e:	90                   	nop
c0011e5f:	83 c4 2c             	add    esp,0x2c
c0011e62:	c3                   	ret    
c0011e63:	90                   	nop

c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e64:	55                   	push   ebp
c0011e65:	57                   	push   edi
c0011e66:	56                   	push   esi
c0011e67:	53                   	push   ebx
c0011e68:	83 ec 1c             	sub    esp,0x1c
c0011e6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e73:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e79:	77 08                	ja     c0011e83 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e7b:	0f 20 d8             	mov    eax,cr3
c0011e7e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e81:	75 47                	jne    c0011eca <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e87:	09 d8                	or     eax,ebx
c0011e89:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e8e:	75 57                	jne    c0011ee7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e90:	89 de                	mov    esi,ebx
c0011e92:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e95:	c1 ee 16             	shr    esi,0x16
c0011e98:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e9f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ea3:	74 54                	je     c0011ef9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ea5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ea9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011eaf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011eb3:	c1 e6 0c             	shl    esi,0xc
c0011eb6:	c1 eb 0a             	shr    ebx,0xa
c0011eb9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ebf:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ec2:	83 c4 1c             	add    esp,0x1c
c0011ec5:	5b                   	pop    ebx
c0011ec6:	5e                   	pop    esi
c0011ec7:	5f                   	pop    edi
c0011ec8:	5d                   	pop    ebp
c0011ec9:	c3                   	ret    
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	68 30 8f 02 c0       	push   0xc0028f30
c0011ed2:	e8 b2 08 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0011ed7:	83 c4 10             	add    esp,0x10
c0011eda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ede:	09 d8                	or     eax,ebx
c0011ee0:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ee5:	74 a9                	je     c0011e90 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ee7:	83 ec 0c             	sub    esp,0xc
c0011eea:	68 98 8f 02 c0       	push   0xc0028f98
c0011eef:	e8 af 79 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	eb 97                	jmp    c0011e90 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011efd:	e8 ae db ff ff       	call   c000fab0 <Phys::allocatePage()>
c0011f02:	89 c5                	mov    ebp,eax
c0011f04:	e8 20 fa ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0011f09:	83 ec 0c             	sub    esp,0xc
c0011f0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f10:	6a 01                	push   0x1
c0011f12:	e8 82 f8 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c0011f17:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f1e:	6a 01                	push   0x1
c0011f20:	50                   	push   eax
c0011f21:	55                   	push   ebp
c0011f22:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f28:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f2c:	51                   	push   ecx
c0011f2d:	e8 26 02 00 00       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f32:	83 c4 1c             	add    esp,0x1c
c0011f35:	68 00 10 00 00       	push   0x1000
c0011f3a:	6a 00                	push   0x0
c0011f3c:	50                   	push   eax
c0011f3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f41:	e8 45 e7 fe ff       	call   c000068b <memset>
c0011f46:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f4a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f4d:	e8 ab fb ff ff       	call   c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c0011f52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f56:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f5f:	e9 41 ff ff ff       	jmp    c0011ea5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f64 <VAS::allocatePages(int, int)>:
c0011f64:	55                   	push   ebp
c0011f65:	57                   	push   edi
c0011f66:	56                   	push   esi
c0011f67:	53                   	push   ebx
c0011f68:	83 ec 1c             	sub    esp,0x1c
c0011f6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f6f:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0011f74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f7a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f80:	83 e0 01             	and    eax,0x1
c0011f83:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f8b:	0f 85 cc 00 00 00    	jne    c001205d <VAS::allocatePages(int, int)+0xf9>
c0011f91:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f98:	85 c0                	test   eax,eax
c0011f9a:	0f 84 a1 00 00 00    	je     c0012041 <VAS::allocatePages(int, int)+0xdd>
c0011fa0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011fa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fa8:	c1 e6 0c             	shl    esi,0xc
c0011fab:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011faf:	85 c0                	test   eax,eax
c0011fb1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011fb4:	7e 33                	jle    c0011fe9 <VAS::allocatePages(int, int)+0x85>
c0011fb6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011fba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fbe:	81 cd 00 04 00 00    	or     ebp,0x400
c0011fc4:	e8 e7 da ff ff       	call   c000fab0 <Phys::allocatePage()>
c0011fc9:	55                   	push   ebp
c0011fca:	53                   	push   ebx
c0011fcb:	50                   	push   eax
c0011fcc:	57                   	push   edi
c0011fcd:	e8 92 fe ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fda:	74 03                	je     c0011fdf <VAS::allocatePages(int, int)+0x7b>
c0011fdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fe5:	39 de                	cmp    esi,ebx
c0011fe7:	75 db                	jne    c0011fc4 <VAS::allocatePages(int, int)+0x60>
c0011fe9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fee:	75 12                	jne    c0012002 <VAS::allocatePages(int, int)+0x9e>
c0011ff0:	0f 20 d8             	mov    eax,cr3
c0011ff3:	0f 22 d8             	mov    cr3,eax
c0011ff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ffa:	83 c4 1c             	add    esp,0x1c
c0011ffd:	5b                   	pop    ebx
c0011ffe:	5e                   	pop    esi
c0011fff:	5f                   	pop    edi
c0012000:	5d                   	pop    ebp
c0012001:	c3                   	ret    
c0012002:	c1 ee 0a             	shr    esi,0xa
c0012005:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012009:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001200f:	c1 eb 0a             	shr    ebx,0xa
c0012012:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012018:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001201e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012024:	39 c3                	cmp    ebx,eax
c0012026:	77 ce                	ja     c0011ff6 <VAS::allocatePages(int, int)+0x92>
c0012028:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001202b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012031:	39 d8                	cmp    eax,ebx
c0012033:	73 f3                	jae    c0012028 <VAS::allocatePages(int, int)+0xc4>
c0012035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012039:	83 c4 1c             	add    esp,0x1c
c001203c:	5b                   	pop    ebx
c001203d:	5e                   	pop    esi
c001203e:	5f                   	pop    edi
c001203f:	5d                   	pop    ebp
c0012040:	c3                   	ret    
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	68 bc 8f 02 c0       	push   0xc0028fbc
c0012049:	e8 55 78 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001204e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012051:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012055:	83 c4 10             	add    esp,0x10
c0012058:	e9 43 ff ff ff       	jmp    c0011fa0 <VAS::allocatePages(int, int)+0x3c>
c001205d:	83 ec 0c             	sub    esp,0xc
c0012060:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012064:	e8 30 f7 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c0012069:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012075:	0f 87 9b 00 00 00    	ja     c0012116 <VAS::allocatePages(int, int)+0x1b2>
c001207b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001207f:	85 d2                	test   edx,edx
c0012081:	7e 3c                	jle    c00120bf <VAS::allocatePages(int, int)+0x15b>
c0012083:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012087:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001208b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001208f:	c1 e5 0c             	shl    ebp,0xc
c0012092:	81 ce 00 04 00 00    	or     esi,0x400
c0012098:	01 dd                	add    ebp,ebx
c001209a:	e8 11 da ff ff       	call   c000fab0 <Phys::allocatePage()>
c001209f:	56                   	push   esi
c00120a0:	53                   	push   ebx
c00120a1:	50                   	push   eax
c00120a2:	57                   	push   edi
c00120a3:	e8 bc fd ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120b0:	74 03                	je     c00120b5 <VAS::allocatePages(int, int)+0x151>
c00120b2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120bb:	39 dd                	cmp    ebp,ebx
c00120bd:	75 db                	jne    c001209a <VAS::allocatePages(int, int)+0x136>
c00120bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120c4:	0f 84 26 ff ff ff    	je     c0011ff0 <VAS::allocatePages(int, int)+0x8c>
c00120ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120d2:	89 d3                	mov    ebx,edx
c00120d4:	c1 e0 0c             	shl    eax,0xc
c00120d7:	c1 eb 0a             	shr    ebx,0xa
c00120da:	01 d0                	add    eax,edx
c00120dc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120e2:	c1 e8 0a             	shr    eax,0xa
c00120e5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120f0:	2d 00 00 40 00       	sub    eax,0x400000
c00120f5:	39 c3                	cmp    ebx,eax
c00120f7:	0f 87 f9 fe ff ff    	ja     c0011ff6 <VAS::allocatePages(int, int)+0x92>
c00120fd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012100:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012106:	39 d8                	cmp    eax,ebx
c0012108:	73 f3                	jae    c00120fd <VAS::allocatePages(int, int)+0x199>
c001210a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001210e:	83 c4 1c             	add    esp,0x1c
c0012111:	5b                   	pop    ebx
c0012112:	5e                   	pop    esi
c0012113:	5f                   	pop    edi
c0012114:	5d                   	pop    ebp
c0012115:	c3                   	ret    
c0012116:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001211b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012121:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012128:	0f 84 4d ff ff ff    	je     c001207b <VAS::allocatePages(int, int)+0x117>
c001212e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012136:	e9 40 ff ff ff       	jmp    c001207b <VAS::allocatePages(int, int)+0x117>
c001213b:	90                   	nop

c001213c <VAS::setCPUSpecific(unsigned long)>:
c001213c:	83 ec 0c             	sub    esp,0xc
c001213f:	6a 05                	push   0x5
c0012141:	68 00 00 40 c2       	push   0xc2400000
c0012146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001214a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001214e:	e8 11 fd ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012153:	83 c4 1c             	add    esp,0x1c
c0012156:	c3                   	ret    
c0012157:	90                   	nop

c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012158:	55                   	push   ebp
c0012159:	57                   	push   edi
c001215a:	56                   	push   esi
c001215b:	53                   	push   ebx
c001215c:	83 ec 1c             	sub    esp,0x1c
c001215f:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012164:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012168:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001216e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012172:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012178:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001217c:	83 e0 01             	and    eax,0x1
c001217f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012183:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012187:	85 c0                	test   eax,eax
c0012189:	7e 39                	jle    c00121c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001218b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001218f:	89 f3                	mov    ebx,esi
c0012191:	c1 e0 0c             	shl    eax,0xc
c0012194:	01 f0                	add    eax,esi
c0012196:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001219a:	55                   	push   ebp
c001219b:	53                   	push   ebx
c001219c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121a0:	29 f0                	sub    eax,esi
c00121a2:	01 d8                	add    eax,ebx
c00121a4:	50                   	push   eax
c00121a5:	57                   	push   edi
c00121a6:	e8 b9 fc ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121b3:	74 03                	je     c00121b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00121b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121be:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121c2:	75 d6                	jne    c001219a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121c9:	75 10                	jne    c00121db <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00121cb:	0f 20 d8             	mov    eax,cr3
c00121ce:	0f 22 d8             	mov    cr3,eax
c00121d1:	83 c4 1c             	add    esp,0x1c
c00121d4:	89 f0                	mov    eax,esi
c00121d6:	5b                   	pop    ebx
c00121d7:	5e                   	pop    esi
c00121d8:	5f                   	pop    edi
c00121d9:	5d                   	pop    ebp
c00121da:	c3                   	ret    
c00121db:	89 f3                	mov    ebx,esi
c00121dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121e1:	c1 eb 0a             	shr    ebx,0xa
c00121e4:	c1 e0 0c             	shl    eax,0xc
c00121e7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121ed:	01 f0                	add    eax,esi
c00121ef:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121f5:	c1 e8 0a             	shr    eax,0xa
c00121f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121fd:	2d 00 00 40 00       	sub    eax,0x400000
c0012202:	39 c3                	cmp    ebx,eax
c0012204:	77 cb                	ja     c00121d1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012206:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012209:	81 c3 00 10 00 00    	add    ebx,0x1000
c001220f:	39 d8                	cmp    eax,ebx
c0012211:	73 f3                	jae    c0012206 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012213:	83 c4 1c             	add    esp,0x1c
c0012216:	89 f0                	mov    eax,esi
c0012218:	5b                   	pop    ebx
c0012219:	5e                   	pop    esi
c001221a:	5f                   	pop    edi
c001221b:	5d                   	pop    ebp
c001221c:	c3                   	ret    
c001221d:	90                   	nop

c001221e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001221e:	55                   	push   ebp
c001221f:	57                   	push   edi
c0012220:	56                   	push   esi
c0012221:	53                   	push   ebx
c0012222:	83 ec 1c             	sub    esp,0x1c
c0012225:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012229:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001222d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012231:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012235:	a9 ff 0f 00 00       	test   eax,0xfff
c001223a:	75 4a                	jne    c0012286 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001223c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012240:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012243:	c1 eb 16             	shr    ebx,0x16
c0012246:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001224d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012251:	74 4d                	je     c00122a0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012257:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001225b:	c1 e8 0a             	shr    eax,0xa
c001225e:	80 fa 01             	cmp    dl,0x1
c0012261:	19 d2                	sbb    edx,edx
c0012263:	c1 e3 0c             	shl    ebx,0xc
c0012266:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001226a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012270:	25 fc 0f 00 00       	and    eax,0xffc
c0012275:	01 d8                	add    eax,ebx
c0012277:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001227e:	83 c4 1c             	add    esp,0x1c
c0012281:	5b                   	pop    ebx
c0012282:	5e                   	pop    esi
c0012283:	5f                   	pop    edi
c0012284:	5d                   	pop    ebp
c0012285:	c3                   	ret    
c0012286:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001228a:	83 ec 0c             	sub    esp,0xc
c001228d:	68 e8 8f 02 c0       	push   0xc0028fe8
c0012292:	e8 0c 76 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001229e:	eb 9c                	jmp    c001223c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00122a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122a4:	e8 07 d8 ff ff       	call   c000fab0 <Phys::allocatePage()>
c00122a9:	89 c5                	mov    ebp,eax
c00122ab:	e8 79 f6 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c00122b0:	83 ec 0c             	sub    esp,0xc
c00122b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122b7:	6a 01                	push   0x1
c00122b9:	e8 db f4 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c00122be:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122c5:	6a 01                	push   0x1
c00122c7:	50                   	push   eax
c00122c8:	55                   	push   ebp
c00122c9:	81 cd 07 04 00 00    	or     ebp,0x407
c00122cf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122d3:	51                   	push   ecx
c00122d4:	e8 7f fe ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122d9:	83 c4 1c             	add    esp,0x1c
c00122dc:	68 00 10 00 00       	push   0x1000
c00122e1:	6a 00                	push   0x0
c00122e3:	50                   	push   eax
c00122e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122e8:	e8 9e e3 fe ff       	call   c000068b <memset>
c00122ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122f1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122f4:	e8 04 f8 ff ff       	call   c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c00122f9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122fc:	83 c4 10             	add    esp,0x10
c00122ff:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012302:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012306:	e9 48 ff ff ff       	jmp    c0012253 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001230b:	90                   	nop

c001230c <VAS::VAS(bool)>:
c001230c:	53                   	push   ebx
c001230d:	83 ec 28             	sub    esp,0x28
c0012310:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012314:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012327:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001232b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001232e:	e8 7d d7 ff ff       	call   c000fab0 <Phys::allocatePage()>
c0012333:	89 c2                	mov    edx,eax
c0012335:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012339:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001233c:	e8 e8 f5 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0012341:	89 c3                	mov    ebx,eax
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	6a 01                	push   0x1
c0012348:	e8 4c f4 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	89 c2                	mov    edx,eax
c0012352:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012356:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012359:	83 ec 0c             	sub    esp,0xc
c001235c:	6a 03                	push   0x3
c001235e:	6a 01                	push   0x1
c0012360:	52                   	push   edx
c0012361:	50                   	push   eax
c0012362:	53                   	push   ebx
c0012363:	e8 f0 fd ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012368:	83 c4 20             	add    esp,0x20
c001236b:	89 c2                	mov    edx,eax
c001236d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012371:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012374:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001237c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012384:	7f 1c                	jg     c00123a2 <VAS::VAS(bool)+0x96>
c0012386:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001238a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001238d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012391:	c1 e2 02             	shl    edx,0x2
c0012394:	01 d0                	add    eax,edx
c0012396:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001239c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123a0:	eb da                	jmp    c001237c <VAS::VAS(bool)+0x70>
c00123a2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00123aa:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00123b2:	7f 7a                	jg     c001242e <VAS::VAS(bool)+0x122>
c00123b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123b8:	2d 00 02 00 00       	sub    eax,0x200
c00123bd:	c1 e0 0c             	shl    eax,0xc
c00123c0:	83 c8 03             	or     eax,0x3
c00123c3:	89 c2                	mov    edx,eax
c00123c5:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00123ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123d6:	83 e0 10             	and    eax,0x10
c00123d9:	84 c0                	test   al,al
c00123db:	74 07                	je     c00123e4 <VAS::VAS(bool)+0xd8>
c00123dd:	b8 00 01 00 00       	mov    eax,0x100
c00123e2:	eb 05                	jmp    c00123e9 <VAS::VAS(bool)+0xdd>
c00123e4:	b8 00 00 00 00       	mov    eax,0x0
c00123e9:	09 d0                	or     eax,edx
c00123eb:	89 c1                	mov    ecx,eax
c00123ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123f8:	c1 e2 02             	shl    edx,0x2
c00123fb:	01 d0                	add    eax,edx
c00123fd:	89 ca                	mov    edx,ecx
c00123ff:	89 10                	mov    DWORD PTR [eax],edx
c0012401:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012405:	2d 40 03 00 00       	sub    eax,0x340
c001240a:	83 f8 7f             	cmp    eax,0x7f
c001240d:	77 16                	ja     c0012425 <VAS::VAS(bool)+0x119>
c001240f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012413:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012416:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001241a:	c1 e2 02             	shl    edx,0x2
c001241d:	01 d0                	add    eax,edx
c001241f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012425:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012429:	e9 7c ff ff ff       	jmp    c00123aa <VAS::VAS(bool)+0x9e>
c001242e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012433:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012439:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001243f:	83 e0 10             	and    eax,0x10
c0012442:	84 c0                	test   al,al
c0012444:	74 07                	je     c001244d <VAS::VAS(bool)+0x141>
c0012446:	b8 03 41 00 00       	mov    eax,0x4103
c001244b:	eb 05                	jmp    c0012452 <VAS::VAS(bool)+0x146>
c001244d:	b8 03 40 00 00       	mov    eax,0x4003
c0012452:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012456:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012459:	81 c2 20 0c 00 00    	add    edx,0xc20
c001245f:	89 02                	mov    DWORD PTR [edx],eax
c0012461:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0012466:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001246c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012472:	83 ec 08             	sub    esp,0x8
c0012475:	50                   	push   eax
c0012476:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001247a:	e8 bd fc ff ff       	call   c001213c <VAS::setCPUSpecific(unsigned long)>
c001247f:	83 c4 10             	add    esp,0x10
c0012482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012486:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012489:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001248e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012494:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001249a:	83 e0 10             	and    eax,0x10
c001249d:	84 c0                	test   al,al
c001249f:	74 07                	je     c00124a8 <VAS::VAS(bool)+0x19c>
c00124a1:	b8 00 01 00 00       	mov    eax,0x100
c00124a6:	eb 05                	jmp    c00124ad <VAS::VAS(bool)+0x1a1>
c00124a8:	b8 00 00 00 00       	mov    eax,0x0
c00124ad:	09 c2                	or     edx,eax
c00124af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124b6:	05 fc 0f 00 00       	add    eax,0xffc
c00124bb:	83 ca 03             	or     edx,0x3
c00124be:	89 10                	mov    DWORD PTR [eax],edx
c00124c0:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00124c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	50                   	push   eax
c00124cf:	e8 90 19 00 00       	call   c0013e64 <Device::getName()>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	83 ec 08             	sub    esp,0x8
c00124da:	68 e7 90 02 c0       	push   0xc00290e7
c00124df:	50                   	push   eax
c00124e0:	e8 96 e2 fe ff       	call   c000077b <strcmp>
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	85 c0                	test   eax,eax
c00124ea:	0f 94 c0             	sete   al
c00124ed:	84 c0                	test   al,al
c00124ef:	74 70                	je     c0012561 <VAS::VAS(bool)+0x255>
c00124f1:	e8 1f a8 00 00       	call   c001cd15 <disableIRQs()>
c00124f6:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00124fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012501:	05 7c 09 00 00       	add    eax,0x97c
c0012506:	83 ec 0c             	sub    esp,0xc
c0012509:	50                   	push   eax
c001250a:	e8 41 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012517:	89 c3                	mov    ebx,eax
c0012519:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001251e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012524:	05 7c 09 00 00       	add    eax,0x97c
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	50                   	push   eax
c001252d:	e8 1e ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012532:	83 c4 10             	add    esp,0x10
c0012535:	83 ec 08             	sub    esp,0x8
c0012538:	50                   	push   eax
c0012539:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001253d:	e8 9c f5 ff ff       	call   c0011ade <VAS::getPageTableEntry(unsigned long)>
c0012542:	83 c4 10             	add    esp,0x10
c0012545:	8b 00                	mov    eax,DWORD PTR [eax]
c0012547:	25 00 f0 ff ff       	and    eax,0xfffff000
c001254c:	6a 11                	push   0x11
c001254e:	53                   	push   ebx
c001254f:	50                   	push   eax
c0012550:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012554:	e8 0b f9 ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012559:	83 c4 10             	add    esp,0x10
c001255c:	e8 c2 a7 00 00       	call   c001cd23 <enableIRQs()>
c0012561:	90                   	nop
c0012562:	83 c4 28             	add    esp,0x28
c0012565:	5b                   	pop    ebx
c0012566:	c3                   	ret    

c0012567 <mapVASFirstTime>:
c0012567:	55                   	push   ebp
c0012568:	57                   	push   edi
c0012569:	56                   	push   esi
c001256a:	53                   	push   ebx
c001256b:	83 ec 0c             	sub    esp,0xc
c001256e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012573:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012576:	4a                   	dec    edx
c0012577:	0f 84 8e 00 00 00    	je     c001260b <mapVASFirstTime+0xa4>
c001257d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012580:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012583:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012588:	c1 e5 15             	shl    ebp,0x15
c001258b:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012590:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012596:	29 eb                	sub    ebx,ebp
c0012598:	29 ee                	sub    esi,ebp
c001259a:	e8 11 d5 ff ff       	call   c000fab0 <Phys::allocatePage()>
c001259f:	83 ec 0c             	sub    esp,0xc
c00125a2:	68 03 04 00 00       	push   0x403
c00125a7:	6a 01                	push   0x1
c00125a9:	53                   	push   ebx
c00125aa:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125b0:	50                   	push   eax
c00125b1:	57                   	push   edi
c00125b2:	e8 a1 fb ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125b7:	83 c4 20             	add    esp,0x20
c00125ba:	39 f3                	cmp    ebx,esi
c00125bc:	75 dc                	jne    c001259a <mapVASFirstTime+0x33>
c00125be:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125c3:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00125c8:	29 ee                	sub    esi,ebp
c00125ca:	29 e8                	sub    eax,ebp
c00125cc:	89 c5                	mov    ebp,eax
c00125ce:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00125d2:	19 db                	sbb    ebx,ebx
c00125d4:	e8 d7 d4 ff ff       	call   c000fab0 <Phys::allocatePage()>
c00125d9:	83 e3 04             	and    ebx,0x4
c00125dc:	83 ec 0c             	sub    esp,0xc
c00125df:	81 c3 03 04 00 00    	add    ebx,0x403
c00125e5:	53                   	push   ebx
c00125e6:	6a 01                	push   0x1
c00125e8:	56                   	push   esi
c00125e9:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125ef:	50                   	push   eax
c00125f0:	57                   	push   edi
c00125f1:	e8 62 fb ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125f6:	83 c4 20             	add    esp,0x20
c00125f9:	39 f5                	cmp    ebp,esi
c00125fb:	75 d1                	jne    c00125ce <mapVASFirstTime+0x67>
c00125fd:	0f 20 d8             	mov    eax,cr3
c0012600:	0f 22 d8             	mov    cr3,eax
c0012603:	83 c4 0c             	add    esp,0xc
c0012606:	5b                   	pop    ebx
c0012607:	5e                   	pop    esi
c0012608:	5f                   	pop    edi
c0012609:	5d                   	pop    ebp
c001260a:	c3                   	ret    
c001260b:	83 ec 0c             	sub    esp,0xc
c001260e:	68 f5 90 02 c0       	push   0xc00290f5
c0012613:	e8 71 01 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0012618:	83 c4 10             	add    esp,0x10
c001261b:	83 c4 0c             	add    esp,0xc
c001261e:	5b                   	pop    ebx
c001261f:	5e                   	pop    esi
c0012620:	5f                   	pop    edi
c0012621:	5d                   	pop    ebp
c0012622:	c3                   	ret    

c0012623 <__cxa_atexit>:
c0012623:	31 c0                	xor    eax,eax
c0012625:	c3                   	ret    

c0012626 <__cxa_finalize>:
c0012626:	c3                   	ret    

c0012627 <__stack_chk_fail>:
c0012627:	55                   	push   ebp
c0012628:	89 e5                	mov    ebp,esp
c001262a:	83 ec 14             	sub    esp,0x14
c001262d:	68 0e 91 02 c0       	push   0xc002910e
c0012632:	e8 52 01 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0012637:	58                   	pop    eax
c0012638:	5a                   	pop    edx
c0012639:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001263c:	68 5e 91 02 c0       	push   0xc002915e
c0012641:	e8 43 01 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0012646:	59                   	pop    ecx
c0012647:	58                   	pop    eax
c0012648:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001264b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001264e:	68 5e 91 02 c0       	push   0xc002915e
c0012653:	e8 31 01 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0012658:	5a                   	pop    edx
c0012659:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001265c:	59                   	pop    ecx
c001265d:	8b 00                	mov    eax,DWORD PTR [eax]
c001265f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012662:	68 5e 91 02 c0       	push   0xc002915e
c0012667:	e8 1d 01 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001266c:	5a                   	pop    edx
c001266d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012670:	59                   	pop    ecx
c0012671:	8b 00                	mov    eax,DWORD PTR [eax]
c0012673:	8b 00                	mov    eax,DWORD PTR [eax]
c0012675:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012678:	68 5e 91 02 c0       	push   0xc002915e
c001267d:	e8 07 01 00 00       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0012682:	c7 04 24 66 91 02 c0 	mov    DWORD PTR [esp],0xc0029166
c0012689:	e8 15 72 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	c9                   	leave  
c0012692:	c3                   	ret    

c0012693 <__cxa_pure_virtual>:
c0012693:	83 ec 18             	sub    esp,0x18
c0012696:	68 7e 91 02 c0       	push   0xc002917e
c001269b:	e8 03 72 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c00126a0:	83 c4 1c             	add    esp,0x1c
c00126a3:	c3                   	ret    

c00126a4 <operator new[](unsigned long)>:
c00126a4:	e9 2b ce ff ff       	jmp    c000f4d4 <malloc>

c00126a9 <operator delete(void*, unsigned long)>:
c00126a9:	e9 46 ce ff ff       	jmp    c000f4f4 <rfree>

c00126ae <operator delete[](void*)>:
c00126ae:	e9 41 ce ff ff       	jmp    c000f4f4 <rfree>

c00126b3 <operator delete[](void*, unsigned long)>:
c00126b3:	e9 3c ce ff ff       	jmp    c000f4f4 <rfree>

c00126b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126b8:	57                   	push   edi
c00126b9:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126be:	56                   	push   esi
c00126bf:	be 94 91 02 c0       	mov    esi,0xc0029194
c00126c4:	53                   	push   ebx
c00126c5:	83 ec 40             	sub    esp,0x40
c00126c8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126cc:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00126d0:	fc                   	cld    
c00126d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126d3:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00126d7:	83 f9 3e             	cmp    ecx,0x3e
c00126da:	7e 05                	jle    c00126e1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126dc:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126e1:	89 df                	mov    edi,ebx
c00126e3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126e7:	eb 02                	jmp    c00126eb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126e9:	89 c7                	mov    edi,eax
c00126eb:	31 d2                	xor    edx,edx
c00126ed:	46                   	inc    esi
c00126ee:	89 f8                	mov    eax,edi
c00126f0:	f7 f1                	div    ecx
c00126f2:	39 cf                	cmp    edi,ecx
c00126f4:	73 f3                	jae    c00126e9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00126f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126f9:	eb 02                	jmp    c00126fd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00126fb:	89 c3                	mov    ebx,eax
c00126fd:	31 d2                	xor    edx,edx
c00126ff:	4e                   	dec    esi
c0012700:	89 d8                	mov    eax,ebx
c0012702:	f7 f1                	div    ecx
c0012704:	39 cb                	cmp    ebx,ecx
c0012706:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001270a:	88 16                	mov    BYTE PTR [esi],dl
c001270c:	73 ed                	jae    c00126fb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001270e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012712:	83 c4 40             	add    esp,0x40
c0012715:	5b                   	pop    ebx
c0012716:	5e                   	pop    esi
c0012717:	5f                   	pop    edi
c0012718:	c3                   	ret    

c0012719 <Dbg::logc(char)>:
c0012719:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001271d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012722:	ec                   	in     al,dx
c0012723:	a8 20                	test   al,0x20
c0012725:	74 fb                	je     c0012722 <Dbg::logc(char)+0x9>
c0012727:	ba f8 03 00 00       	mov    edx,0x3f8
c001272c:	88 c8                	mov    al,cl
c001272e:	ee                   	out    dx,al
c001272f:	c3                   	ret    

c0012730 <Dbg::logs(char*)>:
c0012730:	53                   	push   ebx
c0012731:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012735:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012738:	84 c0                	test   al,al
c001273a:	74 0f                	je     c001274b <Dbg::logs(char*)+0x1b>
c001273c:	50                   	push   eax
c001273d:	43                   	inc    ebx
c001273e:	e8 d6 ff ff ff       	call   c0012719 <Dbg::logc(char)>
c0012743:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012746:	5a                   	pop    edx
c0012747:	84 c0                	test   al,al
c0012749:	75 f1                	jne    c001273c <Dbg::logs(char*)+0xc>
c001274b:	5b                   	pop    ebx
c001274c:	c3                   	ret    

c001274d <Dbg::logWriteInt(unsigned int)>:
c001274d:	83 ec 10             	sub    esp,0x10
c0012750:	6a 0a                	push   0xa
c0012752:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012756:	50                   	push   eax
c0012757:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001275b:	e8 58 ff ff ff       	call   c00126b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012760:	50                   	push   eax
c0012761:	e8 ca ff ff ff       	call   c0012730 <Dbg::logs(char*)>
c0012766:	83 c4 20             	add    esp,0x20
c0012769:	c3                   	ret    

c001276a <Dbg::logWriteIntBase(unsigned int, int)>:
c001276a:	83 ec 10             	sub    esp,0x10
c001276d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012771:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012775:	50                   	push   eax
c0012776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001277a:	e8 39 ff ff ff       	call   c00126b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001277f:	50                   	push   eax
c0012780:	e8 ab ff ff ff       	call   c0012730 <Dbg::logs(char*)>
c0012785:	83 c4 20             	add    esp,0x20
c0012788:	c3                   	ret    

c0012789 <Dbg::kprintf(char const*, ...)>:
c0012789:	55                   	push   ebp
c001278a:	57                   	push   edi
c001278b:	56                   	push   esi
c001278c:	53                   	push   ebx
c001278d:	83 ec 0c             	sub    esp,0xc
c0012790:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012794:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012798:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001279c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001279f:	84 c0                	test   al,al
c00127a1:	74 4a                	je     c00127ed <Dbg::kprintf(char const*, ...)+0x64>
c00127a3:	31 db                	xor    ebx,ebx
c00127a5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127a8:	3c 25                	cmp    al,0x25
c00127aa:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127ad:	0f 85 e4 00 00 00    	jne    c0012897 <Dbg::kprintf(char const*, ...)+0x10e>
c00127b3:	83 c3 02             	add    ebx,0x2
c00127b6:	8a 07                	mov    al,BYTE PTR [edi]
c00127b8:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127bb:	83 e8 25             	sub    eax,0x25
c00127be:	3c 53                	cmp    al,0x53
c00127c0:	0f 87 ba 00 00 00    	ja     c0012880 <Dbg::kprintf(char const*, ...)+0xf7>
c00127c6:	0f b6 c0             	movzx  eax,al
c00127c9:	ff 24 85 d4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e2c]
c00127d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127d4:	89 c8                	mov    eax,ecx
c00127d6:	83 c1 04             	add    ecx,0x4
c00127d9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127dd:	ff 30                	push   DWORD PTR [eax]
c00127df:	e8 4c ff ff ff       	call   c0012730 <Dbg::logs(char*)>
c00127e4:	58                   	pop    eax
c00127e5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127e9:	84 c0                	test   al,al
c00127eb:	75 b8                	jne    c00127a5 <Dbg::kprintf(char const*, ...)+0x1c>
c00127ed:	83 c4 0c             	add    esp,0xc
c00127f0:	5b                   	pop    ebx
c00127f1:	5e                   	pop    esi
c00127f2:	5f                   	pop    edi
c00127f3:	5d                   	pop    ebp
c00127f4:	c3                   	ret    
c00127f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127f9:	89 d0                	mov    eax,edx
c00127fb:	83 c2 04             	add    edx,0x4
c00127fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012802:	ff 30                	push   DWORD PTR [eax]
c0012804:	e8 44 ff ff ff       	call   c001274d <Dbg::logWriteInt(unsigned int)>
c0012809:	58                   	pop    eax
c001280a:	eb d9                	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c001280c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012810:	89 d0                	mov    eax,edx
c0012812:	83 c2 04             	add    edx,0x4
c0012815:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012818:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001281c:	50                   	push   eax
c001281d:	e8 f7 fe ff ff       	call   c0012719 <Dbg::logc(char)>
c0012822:	58                   	pop    eax
c0012823:	eb c0                	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012825:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012829:	89 c8                	mov    eax,ecx
c001282b:	83 c1 04             	add    ecx,0x4
c001282e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012832:	ff 30                	push   DWORD PTR [eax]
c0012834:	e8 14 ff ff ff       	call   c001274d <Dbg::logWriteInt(unsigned int)>
c0012839:	5f                   	pop    edi
c001283a:	eb a9                	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c001283c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012840:	89 c8                	mov    eax,ecx
c0012842:	83 c1 04             	add    ecx,0x4
c0012845:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012849:	6a 10                	push   0x10
c001284b:	ff 30                	push   DWORD PTR [eax]
c001284d:	e8 18 ff ff ff       	call   c001276a <Dbg::logWriteIntBase(unsigned int, int)>
c0012852:	59                   	pop    ecx
c0012853:	5f                   	pop    edi
c0012854:	eb 8f                	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012856:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001285a:	89 d0                	mov    eax,edx
c001285c:	83 c2 08             	add    edx,0x8
c001285f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012863:	6a 10                	push   0x10
c0012865:	ff 30                	push   DWORD PTR [eax]
c0012867:	e8 fe fe ff ff       	call   c001276a <Dbg::logWriteIntBase(unsigned int, int)>
c001286c:	58                   	pop    eax
c001286d:	5a                   	pop    edx
c001286e:	e9 72 ff ff ff       	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012873:	6a 25                	push   0x25
c0012875:	e8 9f fe ff ff       	call   c0012719 <Dbg::logc(char)>
c001287a:	58                   	pop    eax
c001287b:	e9 65 ff ff ff       	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012880:	6a 25                	push   0x25
c0012882:	e8 92 fe ff ff       	call   c0012719 <Dbg::logc(char)>
c0012887:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001288a:	50                   	push   eax
c001288b:	e8 89 fe ff ff       	call   c0012719 <Dbg::logc(char)>
c0012890:	5a                   	pop    edx
c0012891:	59                   	pop    ecx
c0012892:	e9 4e ff ff ff       	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012897:	50                   	push   eax
c0012898:	89 eb                	mov    ebx,ebp
c001289a:	e8 7a fe ff ff       	call   c0012719 <Dbg::logc(char)>
c001289f:	89 fd                	mov    ebp,edi
c00128a1:	58                   	pop    eax
c00128a2:	e9 3e ff ff ff       	jmp    c00127e5 <Dbg::kprintf(char const*, ...)+0x5c>
c00128a7:	90                   	nop

c00128a8 <File::read(unsigned long long, void*, int*)>:
c00128a8:	53                   	push   ebx
c00128a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128b1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128b8:	3c 19                	cmp    al,0x19
c00128ba:	77 35                	ja     c00128f1 <File::read(unsigned long long, void*, int*)+0x49>
c00128bc:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c00128c3:	85 c0                	test   eax,eax
c00128c5:	74 2a                	je     c00128f1 <File::read(unsigned long long, void*, int*)+0x49>
c00128c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128cd:	85 c0                	test   eax,eax
c00128cf:	74 20                	je     c00128f1 <File::read(unsigned long long, void*, int*)+0x49>
c00128d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128d5:	74 21                	je     c00128f8 <File::read(unsigned long long, void*, int*)+0x50>
c00128d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128dd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128eb:	5b                   	pop    ebx
c00128ec:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128ef:	ff e0                	jmp    eax
c00128f1:	b8 0b 00 00 00       	mov    eax,0xb
c00128f6:	eb 05                	jmp    c00128fd <File::read(unsigned long long, void*, int*)+0x55>
c00128f8:	b8 05 00 00 00       	mov    eax,0x5
c00128fd:	5b                   	pop    ebx
c00128fe:	c3                   	ret    
c00128ff:	90                   	nop

c0012900 <File::write(unsigned long long, void*, int*)>:
c0012900:	53                   	push   ebx
c0012901:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012905:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012909:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012910:	3c 19                	cmp    al,0x19
c0012912:	77 35                	ja     c0012949 <File::write(unsigned long long, void*, int*)+0x49>
c0012914:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001291b:	85 c0                	test   eax,eax
c001291d:	74 2a                	je     c0012949 <File::write(unsigned long long, void*, int*)+0x49>
c001291f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012925:	85 c0                	test   eax,eax
c0012927:	74 20                	je     c0012949 <File::write(unsigned long long, void*, int*)+0x49>
c0012929:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001292d:	74 21                	je     c0012950 <File::write(unsigned long long, void*, int*)+0x50>
c001292f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012931:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012935:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001293b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001293f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012943:	5b                   	pop    ebx
c0012944:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012947:	ff e0                	jmp    eax
c0012949:	b8 0b 00 00 00       	mov    eax,0xb
c001294e:	eb 05                	jmp    c0012955 <File::write(unsigned long long, void*, int*)+0x55>
c0012950:	b8 05 00 00 00       	mov    eax,0x5
c0012955:	5b                   	pop    ebx
c0012956:	c3                   	ret    
c0012957:	90                   	nop

c0012958 <Directory::read(unsigned long long, void*, int*)>:
c0012958:	53                   	push   ebx
c0012959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001295d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012961:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012968:	3c 19                	cmp    al,0x19
c001296a:	77 35                	ja     c00129a1 <Directory::read(unsigned long long, void*, int*)+0x49>
c001296c:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c0012973:	85 c0                	test   eax,eax
c0012975:	74 2a                	je     c00129a1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012977:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001297d:	85 c0                	test   eax,eax
c001297f:	74 20                	je     c00129a1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012981:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012985:	74 21                	je     c00129a8 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012987:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012989:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001298d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001299b:	5b                   	pop    ebx
c001299c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001299f:	ff e0                	jmp    eax
c00129a1:	b8 0b 00 00 00       	mov    eax,0xb
c00129a6:	eb 05                	jmp    c00129ad <Directory::read(unsigned long long, void*, int*)+0x55>
c00129a8:	b8 05 00 00 00       	mov    eax,0x5
c00129ad:	5b                   	pop    ebx
c00129ae:	c3                   	ret    
c00129af:	90                   	nop

c00129b0 <Directory::write(unsigned long long, void*, int*)>:
c00129b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129bb:	b8 0b 00 00 00       	mov    eax,0xb
c00129c0:	80 fa 19             	cmp    dl,0x19
c00129c3:	77 18                	ja     c00129dd <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129c5:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c00129cc:	85 d2                	test   edx,edx
c00129ce:	74 0d                	je     c00129dd <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129d0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129d7:	19 c0                	sbb    eax,eax
c00129d9:	83 e0 0a             	and    eax,0xa
c00129dc:	40                   	inc    eax
c00129dd:	c3                   	ret    

c00129de <File::isAtty()>:
c00129de:	31 c0                	xor    eax,eax
c00129e0:	c3                   	ret    
c00129e1:	90                   	nop

c00129e2 <Directory::isAtty()>:
c00129e2:	31 c0                	xor    eax,eax
c00129e4:	c3                   	ret    
c00129e5:	90                   	nop

c00129e6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129e6:	b8 0a 00 00 00       	mov    eax,0xa
c00129eb:	c3                   	ret    

c00129ec <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129ec:	b8 0a 00 00 00       	mov    eax,0xa
c00129f1:	c3                   	ret    

c00129f2 <File::~File()>:
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	ba 90 93 02 c0       	mov    edx,0xc0029390
c00129fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129fe:	89 10                	mov    DWORD PTR [eax],edx
c0012a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 2b eb ff ff       	call   c0011538 <UnixFile::~UnixFile()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	90                   	nop
c0012a11:	83 c4 0c             	add    esp,0xc
c0012a14:	c3                   	ret    
c0012a15:	90                   	nop

c0012a16 <File::~File()>:
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	83 ec 0c             	sub    esp,0xc
c0012a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a20:	e8 cd ff ff ff       	call   c00129f2 <File::~File()>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	83 ec 08             	sub    esp,0x8
c0012a2b:	68 14 01 00 00       	push   0x114
c0012a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a34:	e8 70 fc ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0012a39:	83 c4 10             	add    esp,0x10
c0012a3c:	83 c4 0c             	add    esp,0xc
c0012a3f:	c3                   	ret    

c0012a40 <Directory::~Directory()>:
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	ba ac 93 02 c0       	mov    edx,0xc00293ac
c0012a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a4c:	89 10                	mov    DWORD PTR [eax],edx
c0012a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	50                   	push   eax
c0012a56:	e8 dd ea ff ff       	call   c0011538 <UnixFile::~UnixFile()>
c0012a5b:	83 c4 10             	add    esp,0x10
c0012a5e:	90                   	nop
c0012a5f:	83 c4 0c             	add    esp,0xc
c0012a62:	c3                   	ret    
c0012a63:	90                   	nop

c0012a64 <Directory::~Directory()>:
c0012a64:	83 ec 0c             	sub    esp,0xc
c0012a67:	83 ec 0c             	sub    esp,0xc
c0012a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a6e:	e8 cd ff ff ff       	call   c0012a40 <Directory::~Directory()>
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	83 ec 08             	sub    esp,0x8
c0012a79:	68 14 01 00 00       	push   0x114
c0012a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a82:	e8 22 fc ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	83 c4 0c             	add    esp,0xc
c0012a8d:	c3                   	ret    

c0012a8e <Filesystem::Filesystem()>:
c0012a8e:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0012a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a97:	89 10                	mov    DWORD PTR [eax],edx
c0012a99:	8b 15 e8 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cae8
c0012a9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aaa:	a3 e8 ca 02 c0       	mov    ds:0xc002cae8,eax
c0012aaf:	90                   	nop
c0012ab0:	c3                   	ret    
c0012ab1:	90                   	nop

c0012ab2 <Filesystem::~Filesystem()>:
c0012ab2:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0012ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012abb:	89 10                	mov    DWORD PTR [eax],edx
c0012abd:	90                   	nop
c0012abe:	c3                   	ret    
c0012abf:	90                   	nop

c0012ac0 <Filesystem::~Filesystem()>:
c0012ac0:	83 ec 0c             	sub    esp,0xc
c0012ac3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ac7:	e8 e6 ff ff ff       	call   c0012ab2 <Filesystem::~Filesystem()>
c0012acc:	83 c4 04             	add    esp,0x4
c0012acf:	83 ec 08             	sub    esp,0x8
c0012ad2:	6a 08                	push   0x8
c0012ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad8:	e8 cc fb ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	c3                   	ret    

c0012ae4 <initVFS()>:
c0012ae4:	83 ec 18             	sub    esp,0x18
c0012ae7:	6a 08                	push   0x8
c0012ae9:	e8 e6 c9 ff ff       	call   c000f4d4 <malloc>
c0012aee:	89 04 24             	mov    DWORD PTR [esp],eax
c0012af1:	e8 b0 d3 00 00       	call   c001fea6 <FAT::FAT()>
c0012af6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012afd:	e8 d2 c9 ff ff       	call   c000f4d4 <malloc>
c0012b02:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b05:	e8 12 e6 00 00       	call   c002111c <ISO9660::ISO9660()>
c0012b0a:	83 c4 1c             	add    esp,0x1c
c0012b0d:	c3                   	ret    

c0012b0e <standardiseFiles(char*, char const*, char const*)>:
c0012b0e:	55                   	push   ebp
c0012b0f:	57                   	push   edi
c0012b10:	56                   	push   esi
c0012b11:	53                   	push   ebx
c0012b12:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b18:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b1f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b26:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b2d:	68 00 04 00 00       	push   0x400
c0012b32:	6a 00                	push   0x0
c0012b34:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b38:	56                   	push   esi
c0012b39:	e8 4d db fe ff       	call   c000068b <memset>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b45:	75 0b                	jne    c0012b52 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b47:	50                   	push   eax
c0012b48:	50                   	push   eax
c0012b49:	57                   	push   edi
c0012b4a:	56                   	push   esi
c0012b4b:	e8 da db fe ff       	call   c000072a <strcpy>
c0012b50:	eb 41                	jmp    c0012b93 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b52:	8a 07                	mov    al,BYTE PTR [edi]
c0012b54:	3c 5c                	cmp    al,0x5c
c0012b56:	74 04                	je     c0012b5c <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b58:	3c 2f                	cmp    al,0x2f
c0012b5a:	75 18                	jne    c0012b74 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b5f:	3c 60                	cmp    al,0x60
c0012b61:	7e 03                	jle    c0012b66 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b63:	83 e8 20             	sub    eax,0x20
c0012b66:	88 04 24             	mov    BYTE PTR [esp],al
c0012b69:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b70:	50                   	push   eax
c0012b71:	50                   	push   eax
c0012b72:	eb 18                	jmp    c0012b8c <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b74:	50                   	push   eax
c0012b75:	50                   	push   eax
c0012b76:	55                   	push   ebp
c0012b77:	56                   	push   esi
c0012b78:	e8 ad db fe ff       	call   c000072a <strcpy>
c0012b7d:	5a                   	pop    edx
c0012b7e:	59                   	pop    ecx
c0012b7f:	68 a6 a7 02 c0       	push   0xc002a7a6
c0012b84:	56                   	push   esi
c0012b85:	e8 57 dc fe ff       	call   c00007e1 <strcat>
c0012b8a:	5d                   	pop    ebp
c0012b8b:	58                   	pop    eax
c0012b8c:	57                   	push   edi
c0012b8d:	56                   	push   esi
c0012b8e:	e8 4e dc fe ff       	call   c00007e1 <strcat>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b99:	3c 60                	cmp    al,0x60
c0012b9b:	7e 03                	jle    c0012ba0 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012b9d:	83 e8 20             	sub    eax,0x20
c0012ba0:	88 04 24             	mov    BYTE PTR [esp],al
c0012ba3:	88 03                	mov    BYTE PTR [ebx],al
c0012ba5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bac:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bb2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bb6:	bf 03 00 00 00       	mov    edi,0x3
c0012bbb:	b8 03 00 00 00       	mov    eax,0x3
c0012bc0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bc3:	84 d2                	test   dl,dl
c0012bc5:	0f 84 91 00 00 00    	je     c0012c5c <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012bcb:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bce:	80 fa 5c             	cmp    dl,0x5c
c0012bd1:	74 05                	je     c0012bd8 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012bd3:	80 fa 2f             	cmp    dl,0x2f
c0012bd6:	75 12                	jne    c0012bea <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bd8:	89 c5                	mov    ebp,eax
c0012bda:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bdf:	74 09                	je     c0012bea <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012be1:	40                   	inc    eax
c0012be2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012be6:	89 cf                	mov    edi,ecx
c0012be8:	eb d6                	jmp    c0012bc0 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bea:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bef:	75 5b                	jne    c0012c4c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bf1:	80 fa 2e             	cmp    dl,0x2e
c0012bf4:	75 56                	jne    c0012c4c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bf6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012bfa:	74 19                	je     c0012c15 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012bfc:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c01:	74 53                	je     c0012c56 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c03:	89 f9                	mov    ecx,edi
c0012c05:	41                   	inc    ecx
c0012c06:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c09:	80 fa 2f             	cmp    dl,0x2f
c0012c0c:	74 f7                	je     c0012c05 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c0e:	80 fa 5c             	cmp    dl,0x5c
c0012c11:	74 f2                	je     c0012c05 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c13:	eb d1                	jmp    c0012be6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c15:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c1a:	74 3a                	je     c0012c56 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c1c:	83 f8 03             	cmp    eax,0x3
c0012c1f:	74 c5                	je     c0012be6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c21:	41                   	inc    ecx
c0012c22:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c25:	80 fa 2f             	cmp    dl,0x2f
c0012c28:	74 f7                	je     c0012c21 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c2a:	80 fa 5c             	cmp    dl,0x5c
c0012c2d:	74 f2                	je     c0012c21 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c2f:	48                   	dec    eax
c0012c30:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c34:	75 06                	jne    c0012c3c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c36:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c3a:	eb f3                	jmp    c0012c2f <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c3c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c40:	74 07                	je     c0012c49 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c42:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c46:	48                   	dec    eax
c0012c47:	eb f3                	jmp    c0012c3c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c49:	40                   	inc    eax
c0012c4a:	eb 9a                	jmp    c0012be6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c4c:	80 fa 2f             	cmp    dl,0x2f
c0012c4f:	74 95                	je     c0012be6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c51:	80 fa 5c             	cmp    dl,0x5c
c0012c54:	74 90                	je     c0012be6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c56:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c59:	40                   	inc    eax
c0012c5a:	eb 8a                	jmp    c0012be6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c5c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c60:	83 ec 0c             	sub    esp,0xc
c0012c63:	53                   	push   ebx
c0012c64:	e8 3f da fe ff       	call   c00006a8 <strlen>
c0012c69:	83 c4 10             	add    esp,0x10
c0012c6c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c71:	75 26                	jne    c0012c99 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c73:	83 ec 0c             	sub    esp,0xc
c0012c76:	53                   	push   ebx
c0012c77:	e8 2c da fe ff       	call   c00006a8 <strlen>
c0012c7c:	83 c4 10             	add    esp,0x10
c0012c7f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c84:	74 26                	je     c0012cac <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c86:	83 ec 0c             	sub    esp,0xc
c0012c89:	53                   	push   ebx
c0012c8a:	e8 19 da fe ff       	call   c00006a8 <strlen>
c0012c8f:	83 c4 10             	add    esp,0x10
c0012c92:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c97:	eb c7                	jmp    c0012c60 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012c99:	83 ec 0c             	sub    esp,0xc
c0012c9c:	53                   	push   ebx
c0012c9d:	e8 06 da fe ff       	call   c00006a8 <strlen>
c0012ca2:	83 c4 10             	add    esp,0x10
c0012ca5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012caa:	74 c7                	je     c0012c73 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012cac:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cb2:	5b                   	pop    ebx
c0012cb3:	5e                   	pop    esi
c0012cb4:	5f                   	pop    edi
c0012cb5:	5d                   	pop    ebp
c0012cb6:	c3                   	ret    
c0012cb7:	90                   	nop

c0012cb8 <File::File(char const*, Process*)>:
c0012cb8:	83 ec 0c             	sub    esp,0xc
c0012cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cbf:	83 ec 08             	sub    esp,0x8
c0012cc2:	6a 00                	push   0x0
c0012cc4:	50                   	push   eax
c0012cc5:	e8 8c e6 ff ff       	call   c0011356 <UnixFile::UnixFile(int)>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0012cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd6:	89 10                	mov    DWORD PTR [eax],edx
c0012cd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cdc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce6:	83 c0 0d             	add    eax,0xd
c0012ce9:	83 ec 04             	sub    esp,0x4
c0012cec:	52                   	push   edx
c0012ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf1:	50                   	push   eax
c0012cf2:	e8 17 fe ff ff       	call   c0012b0e <standardiseFiles(char*, char const*, char const*)>
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cfe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d01:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d08:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d12:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d16:	90                   	nop
c0012d17:	83 c4 0c             	add    esp,0xc
c0012d1a:	c3                   	ret    
c0012d1b:	90                   	nop

c0012d1c <File::open(FileOpenMode)>:
c0012d1c:	53                   	push   ebx
c0012d1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d22:	83 ec 08             	sub    esp,0x8
c0012d25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d29:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d30:	80 fa 19             	cmp    dl,0x19
c0012d33:	77 40                	ja     c0012d75 <File::open(FileOpenMode)+0x59>
c0012d35:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0012d3c:	85 d2                	test   edx,edx
c0012d3e:	74 35                	je     c0012d75 <File::open(FileOpenMode)+0x59>
c0012d40:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d46:	85 d2                	test   edx,edx
c0012d48:	74 2b                	je     c0012d75 <File::open(FileOpenMode)+0x59>
c0012d4a:	b8 06 00 00 00       	mov    eax,0x6
c0012d4f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d53:	75 20                	jne    c0012d75 <File::open(FileOpenMode)+0x59>
c0012d55:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d57:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d61:	51                   	push   ecx
c0012d62:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d65:	51                   	push   ecx
c0012d66:	52                   	push   edx
c0012d67:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	85 c0                	test   eax,eax
c0012d6f:	75 04                	jne    c0012d75 <File::open(FileOpenMode)+0x59>
c0012d71:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d75:	83 c4 08             	add    esp,0x8
c0012d78:	5b                   	pop    ebx
c0012d79:	c3                   	ret    

c0012d7a <File::close()>:
c0012d7a:	53                   	push   ebx
c0012d7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d80:	83 ec 08             	sub    esp,0x8
c0012d83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d87:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d8e:	80 fa 19             	cmp    dl,0x19
c0012d91:	77 41                	ja     c0012dd4 <File::close()+0x5a>
c0012d93:	8b 1c 95 80 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3080]
c0012d9a:	85 db                	test   ebx,ebx
c0012d9c:	74 36                	je     c0012dd4 <File::close()+0x5a>
c0012d9e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012da5:	74 2d                	je     c0012dd4 <File::close()+0x5a>
c0012da7:	b8 05 00 00 00       	mov    eax,0x5
c0012dac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012db0:	74 22                	je     c0012dd4 <File::close()+0x5a>
c0012db2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012db6:	8b 04 95 80 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3080]
c0012dbd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012dc3:	53                   	push   ebx
c0012dc4:	53                   	push   ebx
c0012dc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dc7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dcd:	50                   	push   eax
c0012dce:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	83 c4 08             	add    esp,0x8
c0012dd7:	5b                   	pop    ebx
c0012dd8:	c3                   	ret    
c0012dd9:	90                   	nop

c0012dda <File::seek(unsigned long long)>:
c0012dda:	56                   	push   esi
c0012ddb:	53                   	push   ebx
c0012ddc:	b8 0b 00 00 00       	mov    eax,0xb
c0012de1:	51                   	push   ecx
c0012de2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012de6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012dea:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012df1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012df5:	80 fa 19             	cmp    dl,0x19
c0012df8:	77 31                	ja     c0012e2b <File::seek(unsigned long long)+0x51>
c0012dfa:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0012e01:	85 d2                	test   edx,edx
c0012e03:	74 26                	je     c0012e2b <File::seek(unsigned long long)+0x51>
c0012e05:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e0b:	85 d2                	test   edx,edx
c0012e0d:	74 1c                	je     c0012e2b <File::seek(unsigned long long)+0x51>
c0012e0f:	b8 05 00 00 00       	mov    eax,0x5
c0012e14:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e18:	74 11                	je     c0012e2b <File::seek(unsigned long long)+0x51>
c0012e1a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e1c:	53                   	push   ebx
c0012e1d:	51                   	push   ecx
c0012e1e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e24:	52                   	push   edx
c0012e25:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e28:	83 c4 10             	add    esp,0x10
c0012e2b:	5a                   	pop    edx
c0012e2c:	5b                   	pop    ebx
c0012e2d:	5e                   	pop    esi
c0012e2e:	c3                   	ret    
c0012e2f:	90                   	nop

c0012e30 <File::tell(unsigned long long*)>:
c0012e30:	83 ec 0c             	sub    esp,0xc
c0012e33:	b8 0b 00 00 00       	mov    eax,0xb
c0012e38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e3c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e43:	80 fa 19             	cmp    dl,0x19
c0012e46:	77 34                	ja     c0012e7c <File::tell(unsigned long long*)+0x4c>
c0012e48:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0012e4f:	85 d2                	test   edx,edx
c0012e51:	74 29                	je     c0012e7c <File::tell(unsigned long long*)+0x4c>
c0012e53:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e59:	85 d2                	test   edx,edx
c0012e5b:	74 1f                	je     c0012e7c <File::tell(unsigned long long*)+0x4c>
c0012e5d:	b8 05 00 00 00       	mov    eax,0x5
c0012e62:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e66:	74 14                	je     c0012e7c <File::tell(unsigned long long*)+0x4c>
c0012e68:	50                   	push   eax
c0012e69:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e75:	52                   	push   edx
c0012e76:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	83 c4 0c             	add    esp,0xc
c0012e7f:	c3                   	ret    

c0012e80 <File::rewind()>:
c0012e80:	83 ec 10             	sub    esp,0x10
c0012e83:	6a 00                	push   0x0
c0012e85:	6a 00                	push   0x0
c0012e87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e8b:	e8 4a ff ff ff       	call   c0012dda <File::seek(unsigned long long)>
c0012e90:	83 c4 1c             	add    esp,0x1c
c0012e93:	c3                   	ret    

c0012e94 <File::unlink()>:
c0012e94:	83 ec 0c             	sub    esp,0xc
c0012e97:	b8 0b 00 00 00       	mov    eax,0xb
c0012e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ea0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ea7:	80 f9 19             	cmp    cl,0x19
c0012eaa:	77 2f                	ja     c0012edb <File::unlink()+0x47>
c0012eac:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012eb3:	85 c9                	test   ecx,ecx
c0012eb5:	74 24                	je     c0012edb <File::unlink()+0x47>
c0012eb7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ebd:	85 c9                	test   ecx,ecx
c0012ebf:	74 1a                	je     c0012edb <File::unlink()+0x47>
c0012ec1:	b8 06 00 00 00       	mov    eax,0x6
c0012ec6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eca:	75 0f                	jne    c0012edb <File::unlink()+0x47>
c0012ecc:	83 c2 0d             	add    edx,0xd
c0012ecf:	50                   	push   eax
c0012ed0:	50                   	push   eax
c0012ed1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ed3:	52                   	push   edx
c0012ed4:	51                   	push   ecx
c0012ed5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	83 c4 0c             	add    esp,0xc
c0012ede:	c3                   	ret    
c0012edf:	90                   	nop

c0012ee0 <File::rename(char const*)>:
c0012ee0:	83 ec 0c             	sub    esp,0xc
c0012ee3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ef3:	80 f9 19             	cmp    cl,0x19
c0012ef6:	77 32                	ja     c0012f2a <File::rename(char const*)+0x4a>
c0012ef8:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012eff:	85 c9                	test   ecx,ecx
c0012f01:	74 27                	je     c0012f2a <File::rename(char const*)+0x4a>
c0012f03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f09:	85 c9                	test   ecx,ecx
c0012f0b:	74 1d                	je     c0012f2a <File::rename(char const*)+0x4a>
c0012f0d:	b8 06 00 00 00       	mov    eax,0x6
c0012f12:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f16:	75 12                	jne    c0012f2a <File::rename(char const*)+0x4a>
c0012f18:	83 c2 0d             	add    edx,0xd
c0012f1b:	50                   	push   eax
c0012f1c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f22:	52                   	push   edx
c0012f23:	51                   	push   ecx
c0012f24:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	83 c4 0c             	add    esp,0xc
c0012f2d:	c3                   	ret    

c0012f2e <File::chfatattr(unsigned char, unsigned char)>:
c0012f2e:	57                   	push   edi
c0012f2f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f34:	56                   	push   esi
c0012f35:	53                   	push   ebx
c0012f36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f3e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f45:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f49:	80 f9 19             	cmp    cl,0x19
c0012f4c:	77 37                	ja     c0012f85 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f4e:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012f55:	85 c9                	test   ecx,ecx
c0012f57:	74 2c                	je     c0012f85 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f5f:	85 c9                	test   ecx,ecx
c0012f61:	74 22                	je     c0012f85 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f63:	b8 06 00 00 00       	mov    eax,0x6
c0012f68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f6c:	75 17                	jne    c0012f85 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f6e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f70:	89 f0                	mov    eax,esi
c0012f72:	83 c2 0d             	add    edx,0xd
c0012f75:	0f b6 f0             	movzx  esi,al
c0012f78:	0f b6 db             	movzx  ebx,bl
c0012f7b:	56                   	push   esi
c0012f7c:	53                   	push   ebx
c0012f7d:	52                   	push   edx
c0012f7e:	51                   	push   ecx
c0012f7f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f82:	83 c4 10             	add    esp,0x10
c0012f85:	5b                   	pop    ebx
c0012f86:	5e                   	pop    esi
c0012f87:	5f                   	pop    edi
c0012f88:	c3                   	ret    
c0012f89:	90                   	nop

c0012f8a <File::exists()>:
c0012f8a:	83 ec 0c             	sub    esp,0xc
c0012f8d:	31 c0                	xor    eax,eax
c0012f8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f93:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f9a:	80 f9 19             	cmp    cl,0x19
c0012f9d:	77 24                	ja     c0012fc3 <File::exists()+0x39>
c0012f9f:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012fa6:	85 c9                	test   ecx,ecx
c0012fa8:	74 19                	je     c0012fc3 <File::exists()+0x39>
c0012faa:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fb0:	85 c9                	test   ecx,ecx
c0012fb2:	74 0f                	je     c0012fc3 <File::exists()+0x39>
c0012fb4:	83 c2 0d             	add    edx,0xd
c0012fb7:	50                   	push   eax
c0012fb8:	50                   	push   eax
c0012fb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fbb:	52                   	push   edx
c0012fbc:	51                   	push   ecx
c0012fbd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	83 c4 0c             	add    esp,0xc
c0012fc6:	c3                   	ret    
c0012fc7:	90                   	nop

c0012fc8 <File::stat(unsigned long long*, bool*)>:
c0012fc8:	56                   	push   esi
c0012fc9:	53                   	push   ebx
c0012fca:	50                   	push   eax
c0012fcb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fd4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fd8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fdf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fe3:	80 f9 19             	cmp    cl,0x19
c0012fe6:	77 3d                	ja     c0013025 <File::stat(unsigned long long*, bool*)+0x5d>
c0012fe8:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0012fef:	85 c9                	test   ecx,ecx
c0012ff1:	74 32                	je     c0013025 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ff3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ff9:	85 c9                	test   ecx,ecx
c0012ffb:	74 28                	je     c0013025 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ffd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013003:	74 13                	je     c0013018 <File::stat(unsigned long long*, bool*)+0x50>
c0013005:	83 ec 04             	sub    esp,0x4
c0013008:	56                   	push   esi
c0013009:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001300f:	51                   	push   ecx
c0013010:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013013:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013016:	eb 0a                	jmp    c0013022 <File::stat(unsigned long long*, bool*)+0x5a>
c0013018:	53                   	push   ebx
c0013019:	83 c2 0d             	add    edx,0xd
c001301c:	56                   	push   esi
c001301d:	52                   	push   edx
c001301e:	51                   	push   ecx
c001301f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013022:	83 c4 10             	add    esp,0x10
c0013025:	5a                   	pop    edx
c0013026:	5b                   	pop    ebx
c0013027:	5e                   	pop    esi
c0013028:	c3                   	ret    

c0013029 <getcwd(Process*, char*, int)>:
c0013029:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001302d:	31 c0                	xor    eax,eax
c001302f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013032:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013036:	7d 15                	jge    c001304d <getcwd(Process*, char*, int)+0x24>
c0013038:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001303c:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013043:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013046:	84 c9                	test   cl,cl
c0013048:	74 06                	je     c0013050 <getcwd(Process*, char*, int)+0x27>
c001304a:	40                   	inc    eax
c001304b:	eb e2                	jmp    c001302f <getcwd(Process*, char*, int)+0x6>
c001304d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013050:	31 c0                	xor    eax,eax
c0013052:	c3                   	ret    

c0013053 <setcwd(Process*, char*)>:
c0013053:	55                   	push   ebp
c0013054:	57                   	push   edi
c0013055:	56                   	push   esi
c0013056:	53                   	push   ebx
c0013057:	81 ec 20 02 00 00    	sub    esp,0x220
c001305d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013064:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001306a:	57                   	push   edi
c001306b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013072:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013076:	56                   	push   esi
c0013077:	e8 92 fa ff ff       	call   c0012b0e <standardiseFiles(char*, char const*, char const*)>
c001307c:	89 34 24             	mov    DWORD PTR [esp],esi
c001307f:	e8 24 d6 fe ff       	call   c00006a8 <strlen>
c0013084:	83 c4 10             	add    esp,0x10
c0013087:	83 f8 02             	cmp    eax,0x2
c001308a:	77 17                	ja     c00130a3 <setcwd(Process*, char*)+0x50>
c001308c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013091:	83 e8 41             	sub    eax,0x41
c0013094:	83 f8 19             	cmp    eax,0x19
c0013097:	76 24                	jbe    c00130bd <setcwd(Process*, char*)+0x6a>
c0013099:	b8 03 00 00 00       	mov    eax,0x3
c001309e:	e9 e0 00 00 00       	jmp    c0013183 <setcwd(Process*, char*)+0x130>
c00130a3:	83 ec 0c             	sub    esp,0xc
c00130a6:	56                   	push   esi
c00130a7:	e8 fc d5 fe ff       	call   c00006a8 <strlen>
c00130ac:	83 c4 10             	add    esp,0x10
c00130af:	83 f8 03             	cmp    eax,0x3
c00130b2:	75 34                	jne    c00130e8 <setcwd(Process*, char*)+0x95>
c00130b4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130b9:	75 2d                	jne    c00130e8 <setcwd(Process*, char*)+0x95>
c00130bb:	eb cf                	jmp    c001308c <setcwd(Process*, char*)+0x39>
c00130bd:	8b 14 85 80 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3080]
c00130c4:	b8 05 00 00 00       	mov    eax,0x5
c00130c9:	85 d2                	test   edx,edx
c00130cb:	0f 84 b2 00 00 00    	je     c0013183 <setcwd(Process*, char*)+0x130>
c00130d1:	b8 06 00 00 00       	mov    eax,0x6
c00130d6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130dd:	0f 85 92 00 00 00    	jne    c0013175 <setcwd(Process*, char*)+0x122>
c00130e3:	e9 9b 00 00 00       	jmp    c0013183 <setcwd(Process*, char*)+0x130>
c00130e8:	83 ec 0c             	sub    esp,0xc
c00130eb:	68 14 01 00 00       	push   0x114
c00130f0:	e8 df c3 ff ff       	call   c000f4d4 <malloc>
c00130f5:	83 c4 0c             	add    esp,0xc
c00130f8:	89 c3                	mov    ebx,eax
c00130fa:	55                   	push   ebp
c00130fb:	56                   	push   esi
c00130fc:	50                   	push   eax
c00130fd:	e8 b6 fb ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c0013102:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013107:	83 c4 0c             	add    esp,0xc
c001310a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001310e:	50                   	push   eax
c001310f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013113:	50                   	push   eax
c0013114:	53                   	push   ebx
c0013115:	e8 ae fe ff ff       	call   c0012fc8 <File::stat(unsigned long long*, bool*)>
c001311a:	83 c4 10             	add    esp,0x10
c001311d:	83 f8 02             	cmp    eax,0x2
c0013120:	74 04                	je     c0013126 <setcwd(Process*, char*)+0xd3>
c0013122:	85 c0                	test   eax,eax
c0013124:	74 1c                	je     c0013142 <setcwd(Process*, char*)+0xef>
c0013126:	b8 01 00 00 00       	mov    eax,0x1
c001312b:	85 db                	test   ebx,ebx
c001312d:	74 54                	je     c0013183 <setcwd(Process*, char*)+0x130>
c001312f:	83 ec 0c             	sub    esp,0xc
c0013132:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013134:	53                   	push   ebx
c0013135:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013138:	83 c4 10             	add    esp,0x10
c001313b:	b8 01 00 00 00       	mov    eax,0x1
c0013140:	eb 41                	jmp    c0013183 <setcwd(Process*, char*)+0x130>
c0013142:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013147:	75 1c                	jne    c0013165 <setcwd(Process*, char*)+0x112>
c0013149:	b8 02 00 00 00       	mov    eax,0x2
c001314e:	85 db                	test   ebx,ebx
c0013150:	74 31                	je     c0013183 <setcwd(Process*, char*)+0x130>
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013157:	53                   	push   ebx
c0013158:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	b8 02 00 00 00       	mov    eax,0x2
c0013163:	eb 1e                	jmp    c0013183 <setcwd(Process*, char*)+0x130>
c0013165:	85 db                	test   ebx,ebx
c0013167:	74 0c                	je     c0013175 <setcwd(Process*, char*)+0x122>
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001316e:	53                   	push   ebx
c001316f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	50                   	push   eax
c0013176:	50                   	push   eax
c0013177:	56                   	push   esi
c0013178:	57                   	push   edi
c0013179:	e8 ac d5 fe ff       	call   c000072a <strcpy>
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	31 c0                	xor    eax,eax
c0013183:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013189:	5b                   	pop    ebx
c001318a:	5e                   	pop    esi
c001318b:	5f                   	pop    edi
c001318c:	5d                   	pop    ebp
c001318d:	c3                   	ret    

c001318e <Directory::Directory(char const*, Process*)>:
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013195:	83 ec 08             	sub    esp,0x8
c0013198:	6a 00                	push   0x0
c001319a:	50                   	push   eax
c001319b:	e8 b6 e1 ff ff       	call   c0011356 <UnixFile::UnixFile(int)>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	ba ac 93 02 c0       	mov    edx,0xc00293ac
c00131a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ac:	89 10                	mov    DWORD PTR [eax],edx
c00131ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131b2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131bc:	83 c0 0d             	add    eax,0xd
c00131bf:	83 ec 04             	sub    esp,0x4
c00131c2:	52                   	push   edx
c00131c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c7:	50                   	push   eax
c00131c8:	e8 41 f9 ff ff       	call   c0012b0e <standardiseFiles(char*, char const*, char const*)>
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131d7:	8d 50 bf             	lea    edx,[eax-0x41]
c00131da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131de:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131ec:	90                   	nop
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	c3                   	ret    
c00131f1:	90                   	nop

c00131f2 <Directory::open()>:
c00131f2:	53                   	push   ebx
c00131f3:	b8 0b 00 00 00       	mov    eax,0xb
c00131f8:	83 ec 08             	sub    esp,0x8
c00131fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131ff:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013206:	80 fa 19             	cmp    dl,0x19
c0013209:	77 3d                	ja     c0013248 <Directory::open()+0x56>
c001320b:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c0013212:	85 d2                	test   edx,edx
c0013214:	74 32                	je     c0013248 <Directory::open()+0x56>
c0013216:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001321c:	85 d2                	test   edx,edx
c001321e:	74 28                	je     c0013248 <Directory::open()+0x56>
c0013220:	b8 06 00 00 00       	mov    eax,0x6
c0013225:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013229:	75 1d                	jne    c0013248 <Directory::open()+0x56>
c001322b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013231:	50                   	push   eax
c0013232:	8b 02                	mov    eax,DWORD PTR [edx]
c0013234:	51                   	push   ecx
c0013235:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013238:	51                   	push   ecx
c0013239:	52                   	push   edx
c001323a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	85 c0                	test   eax,eax
c0013242:	75 04                	jne    c0013248 <Directory::open()+0x56>
c0013244:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013248:	83 c4 08             	add    esp,0x8
c001324b:	5b                   	pop    ebx
c001324c:	c3                   	ret    
c001324d:	90                   	nop

c001324e <Directory::close()>:
c001324e:	53                   	push   ebx
c001324f:	b8 0b 00 00 00       	mov    eax,0xb
c0013254:	83 ec 08             	sub    esp,0x8
c0013257:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001325b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013262:	80 fa 19             	cmp    dl,0x19
c0013265:	77 41                	ja     c00132a8 <Directory::close()+0x5a>
c0013267:	8b 1c 95 80 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3080]
c001326e:	85 db                	test   ebx,ebx
c0013270:	74 36                	je     c00132a8 <Directory::close()+0x5a>
c0013272:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013279:	74 2d                	je     c00132a8 <Directory::close()+0x5a>
c001327b:	b8 05 00 00 00       	mov    eax,0x5
c0013280:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013284:	74 22                	je     c00132a8 <Directory::close()+0x5a>
c0013286:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001328a:	8b 04 95 80 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3080]
c0013291:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013297:	53                   	push   ebx
c0013298:	53                   	push   ebx
c0013299:	8b 10                	mov    edx,DWORD PTR [eax]
c001329b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132a1:	50                   	push   eax
c00132a2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132a5:	83 c4 10             	add    esp,0x10
c00132a8:	83 c4 08             	add    esp,0x8
c00132ab:	5b                   	pop    ebx
c00132ac:	c3                   	ret    
c00132ad:	90                   	nop

c00132ae <Directory::unlink()>:
c00132ae:	83 ec 0c             	sub    esp,0xc
c00132b1:	b8 0b 00 00 00       	mov    eax,0xb
c00132b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132c1:	80 f9 19             	cmp    cl,0x19
c00132c4:	77 2f                	ja     c00132f5 <Directory::unlink()+0x47>
c00132c6:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c00132cd:	85 c9                	test   ecx,ecx
c00132cf:	74 24                	je     c00132f5 <Directory::unlink()+0x47>
c00132d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132d7:	85 c9                	test   ecx,ecx
c00132d9:	74 1a                	je     c00132f5 <Directory::unlink()+0x47>
c00132db:	b8 06 00 00 00       	mov    eax,0x6
c00132e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132e4:	75 0f                	jne    c00132f5 <Directory::unlink()+0x47>
c00132e6:	83 c2 0d             	add    edx,0xd
c00132e9:	50                   	push   eax
c00132ea:	50                   	push   eax
c00132eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132ed:	52                   	push   edx
c00132ee:	51                   	push   ecx
c00132ef:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132f2:	83 c4 10             	add    esp,0x10
c00132f5:	83 c4 0c             	add    esp,0xc
c00132f8:	c3                   	ret    
c00132f9:	90                   	nop

c00132fa <Directory::rename(char const*)>:
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013306:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001330d:	80 f9 19             	cmp    cl,0x19
c0013310:	77 32                	ja     c0013344 <Directory::rename(char const*)+0x4a>
c0013312:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0013319:	85 c9                	test   ecx,ecx
c001331b:	74 27                	je     c0013344 <Directory::rename(char const*)+0x4a>
c001331d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013323:	85 c9                	test   ecx,ecx
c0013325:	74 1d                	je     c0013344 <Directory::rename(char const*)+0x4a>
c0013327:	b8 06 00 00 00       	mov    eax,0x6
c001332c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013330:	75 12                	jne    c0013344 <Directory::rename(char const*)+0x4a>
c0013332:	83 c2 0d             	add    edx,0xd
c0013335:	50                   	push   eax
c0013336:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013338:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001333c:	52                   	push   edx
c001333d:	51                   	push   ecx
c001333e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	83 c4 0c             	add    esp,0xc
c0013347:	c3                   	ret    

c0013348 <Directory::exists()>:
c0013348:	83 ec 0c             	sub    esp,0xc
c001334b:	31 c0                	xor    eax,eax
c001334d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013351:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013358:	80 f9 19             	cmp    cl,0x19
c001335b:	77 24                	ja     c0013381 <Directory::exists()+0x39>
c001335d:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c0013364:	85 c9                	test   ecx,ecx
c0013366:	74 19                	je     c0013381 <Directory::exists()+0x39>
c0013368:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001336e:	85 c9                	test   ecx,ecx
c0013370:	74 0f                	je     c0013381 <Directory::exists()+0x39>
c0013372:	83 c2 0d             	add    edx,0xd
c0013375:	50                   	push   eax
c0013376:	50                   	push   eax
c0013377:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013379:	52                   	push   edx
c001337a:	51                   	push   ecx
c001337b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001337e:	83 c4 10             	add    esp,0x10
c0013381:	83 c4 0c             	add    esp,0xc
c0013384:	c3                   	ret    
c0013385:	90                   	nop

c0013386 <Directory::read(dirent*)>:
c0013386:	83 ec 1c             	sub    esp,0x1c
c0013389:	b8 0b 00 00 00       	mov    eax,0xb
c001338e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013392:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013399:	80 fa 19             	cmp    dl,0x19
c001339c:	77 30                	ja     c00133ce <Directory::read(dirent*)+0x48>
c001339e:	8b 14 95 80 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3080]
c00133a5:	85 d2                	test   edx,edx
c00133a7:	74 25                	je     c00133ce <Directory::read(dirent*)+0x48>
c00133a9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133b0:	74 1c                	je     c00133ce <Directory::read(dirent*)+0x48>
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133bb:	52                   	push   edx
c00133bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133c0:	6a 00                	push   0x0
c00133c2:	68 10 01 00 00       	push   0x110
c00133c7:	51                   	push   ecx
c00133c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133cb:	83 c4 20             	add    esp,0x20
c00133ce:	83 c4 1c             	add    esp,0x1c
c00133d1:	c3                   	ret    

c00133d2 <Directory::create()>:
c00133d2:	83 ec 0c             	sub    esp,0xc
c00133d5:	b8 0b 00 00 00       	mov    eax,0xb
c00133da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133e5:	80 f9 19             	cmp    cl,0x19
c00133e8:	77 2f                	ja     c0013419 <Directory::create()+0x47>
c00133ea:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c00133f1:	85 c9                	test   ecx,ecx
c00133f3:	74 24                	je     c0013419 <Directory::create()+0x47>
c00133f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133fb:	85 c9                	test   ecx,ecx
c00133fd:	74 1a                	je     c0013419 <Directory::create()+0x47>
c00133ff:	b8 06 00 00 00       	mov    eax,0x6
c0013404:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013408:	75 0f                	jne    c0013419 <Directory::create()+0x47>
c001340a:	83 c2 0d             	add    edx,0xd
c001340d:	50                   	push   eax
c001340e:	50                   	push   eax
c001340f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013411:	52                   	push   edx
c0013412:	51                   	push   ecx
c0013413:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	83 c4 0c             	add    esp,0xc
c001341c:	c3                   	ret    
c001341d:	90                   	nop

c001341e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001341e:	b8 0a 00 00 00       	mov    eax,0xa
c0013423:	c3                   	ret    

c0013424 <Bus::Bus(char const*)>:
c0013424:	83 ec 0c             	sub    esp,0xc
c0013427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342b:	83 ec 08             	sub    esp,0x8
c001342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013432:	50                   	push   eax
c0013433:	e8 30 09 00 00       	call   c0013d68 <Device::Device(char const*)>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	ba c8 93 02 c0       	mov    edx,0xc00293c8
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	89 10                	mov    DWORD PTR [eax],edx
c0013446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013454:	90                   	nop
c0013455:	83 c4 0c             	add    esp,0xc
c0013458:	c3                   	ret    
c0013459:	90                   	nop

c001345a <Bus::~Bus()>:
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	ba c8 93 02 c0       	mov    edx,0xc00293c8
c0013462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013466:	89 10                	mov    DWORD PTR [eax],edx
c0013468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	50                   	push   eax
c0013470:	e8 d5 05 00 00       	call   c0013a4a <Device::~Device()>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	90                   	nop
c0013479:	83 c4 0c             	add    esp,0xc
c001347c:	c3                   	ret    
c001347d:	90                   	nop

c001347e <Bus::~Bus()>:
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	83 ec 0c             	sub    esp,0xc
c0013484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013488:	e8 cd ff ff ff       	call   c001345a <Bus::~Bus()>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 ec 08             	sub    esp,0x8
c0013493:	68 58 01 00 00       	push   0x158
c0013498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349c:	e8 08 f2 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00134a1:	83 c4 10             	add    esp,0x10
c00134a4:	83 c4 0c             	add    esp,0xc
c00134a7:	c3                   	ret    

c00134a8 <Buzzer::Buzzer(char const*)>:
c00134a8:	83 ec 0c             	sub    esp,0xc
c00134ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134af:	83 ec 08             	sub    esp,0x8
c00134b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b6:	50                   	push   eax
c00134b7:	e8 ac 08 00 00       	call   c0013d68 <Device::Device(char const*)>
c00134bc:	83 c4 10             	add    esp,0x10
c00134bf:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c00134c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c8:	89 10                	mov    DWORD PTR [eax],edx
c00134ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134dc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134e6:	90                   	nop
c00134e7:	83 c4 0c             	add    esp,0xc
c00134ea:	c3                   	ret    
c00134eb:	90                   	nop

c00134ec <Buzzer::~Buzzer()>:
c00134ec:	83 ec 0c             	sub    esp,0xc
c00134ef:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	89 10                	mov    DWORD PTR [eax],edx
c00134fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	50                   	push   eax
c0013502:	e8 43 05 00 00       	call   c0013a4a <Device::~Device()>
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	90                   	nop
c001350b:	83 c4 0c             	add    esp,0xc
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <Buzzer::~Buzzer()>:
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	83 ec 0c             	sub    esp,0xc
c0013516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351a:	e8 cd ff ff ff       	call   c00134ec <Buzzer::~Buzzer()>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	83 ec 08             	sub    esp,0x8
c0013525:	68 5c 01 00 00       	push   0x15c
c001352a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352e:	e8 76 f1 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	83 c4 0c             	add    esp,0xc
c0013539:	c3                   	ret    

c001353a <Buzzer::stop()>:
c001353a:	83 ec 14             	sub    esp,0x14
c001353d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013541:	8b 10                	mov    edx,DWORD PTR [eax]
c0013543:	6a 00                	push   0x0
c0013545:	50                   	push   eax
c0013546:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013549:	83 c4 1c             	add    esp,0x1c
c001354c:	c3                   	ret    

c001354d <beepThread(void*)>:
c001354d:	53                   	push   ebx
c001354e:	83 ec 08             	sub    esp,0x8
c0013551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013555:	e8 da 97 00 00       	call   c001cd34 <unlockScheduler()>
c001355a:	b8 40 42 0f 00       	mov    eax,0xf4240
c001355f:	52                   	push   edx
c0013560:	52                   	push   edx
c0013561:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013567:	52                   	push   edx
c0013568:	50                   	push   eax
c0013569:	e8 14 9d 00 00       	call   c001d282 <nanoSleep(unsigned long long)>
c001356e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013571:	e8 c4 ff ff ff       	call   c001353a <Buzzer::stop()>
c0013576:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001357e:	83 c4 18             	add    esp,0x18
c0013581:	5b                   	pop    ebx
c0013582:	e9 41 9c 00 00       	jmp    c001d1c8 <blockTask(TaskState)>
c0013587:	90                   	nop

c0013588 <Buzzer::beep(int, int, bool)>:
c0013588:	57                   	push   edi
c0013589:	56                   	push   esi
c001358a:	53                   	push   ebx
c001358b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001358f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013593:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013597:	52                   	push   edx
c0013598:	52                   	push   edx
c0013599:	8b 06                	mov    eax,DWORD PTR [esi]
c001359b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359f:	56                   	push   esi
c00135a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	89 f8                	mov    eax,edi
c00135a8:	84 c0                	test   al,al
c00135aa:	74 1f                	je     c00135cb <Buzzer::beep(int, int, bool)+0x43>
c00135ac:	50                   	push   eax
c00135ad:	50                   	push   eax
c00135ae:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135b4:	99                   	cdq    
c00135b5:	52                   	push   edx
c00135b6:	50                   	push   eax
c00135b7:	e8 c6 9c 00 00       	call   c001d282 <nanoSleep(unsigned long long)>
c00135bc:	83 c4 10             	add    esp,0x10
c00135bf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135c3:	5b                   	pop    ebx
c00135c4:	5e                   	pop    esi
c00135c5:	5f                   	pop    edi
c00135c6:	e9 6f ff ff ff       	jmp    c001353a <Buzzer::stop()>
c00135cb:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135d1:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00135d6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135de:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135e2:	c7 44 24 14 4d 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc001354d
c00135ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135ee:	5b                   	pop    ebx
c00135ef:	5e                   	pop    esi
c00135f0:	5f                   	pop    edi
c00135f1:	e9 6e 98 00 00       	jmp    c001ce64 <Process::createThread(void (*)(void*), void*, int)>

c00135f6 <loadClockSettings()>:
c00135f6:	c7 05 f4 ca 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002caf4,0xa
c0013600:	c6 05 f1 ca 02 c0 00 	mov    BYTE PTR ds:0xc002caf1,0x0
c0013607:	c6 05 f0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caf0,0x1
c001360e:	c3                   	ret    
c001360f:	90                   	nop

c0013610 <Clock::Clock(char const*)>:
c0013610:	83 ec 0c             	sub    esp,0xc
c0013613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013617:	83 ec 08             	sub    esp,0x8
c001361a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001361e:	50                   	push   eax
c001361f:	e8 44 07 00 00       	call   c0013d68 <Device::Device(char const*)>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	ba 24 94 02 c0       	mov    edx,0xc0029424
c001362c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013630:	89 10                	mov    DWORD PTR [eax],edx
c0013632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013636:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013640:	90                   	nop
c0013641:	83 c4 0c             	add    esp,0xc
c0013644:	c3                   	ret    
c0013645:	90                   	nop

c0013646 <Clock::~Clock()>:
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	ba 24 94 02 c0       	mov    edx,0xc0029424
c001364e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013652:	89 10                	mov    DWORD PTR [eax],edx
c0013654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013658:	83 ec 0c             	sub    esp,0xc
c001365b:	50                   	push   eax
c001365c:	e8 e9 03 00 00       	call   c0013a4a <Device::~Device()>
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	90                   	nop
c0013665:	83 c4 0c             	add    esp,0xc
c0013668:	c3                   	ret    
c0013669:	90                   	nop

c001366a <Clock::~Clock()>:
c001366a:	83 ec 0c             	sub    esp,0xc
c001366d:	83 ec 0c             	sub    esp,0xc
c0013670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013674:	e8 cd ff ff ff       	call   c0013646 <Clock::~Clock()>
c0013679:	83 c4 10             	add    esp,0x10
c001367c:	83 ec 08             	sub    esp,0x8
c001367f:	68 58 01 00 00       	push   0x158
c0013684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013688:	e8 1c f0 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c001368d:	83 c4 10             	add    esp,0x10
c0013690:	83 c4 0c             	add    esp,0xc
c0013693:	c3                   	ret    

c0013694 <Clock::timeInSecondsLocal()>:
c0013694:	53                   	push   ebx
c0013695:	83 ec 14             	sub    esp,0x14
c0013698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001369c:	8b 10                	mov    edx,DWORD PTR [eax]
c001369e:	50                   	push   eax
c001369f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136a2:	0f b6 0d f0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002caf0
c00136a9:	03 0d f4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002caf4
c00136af:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136b5:	89 cb                	mov    ebx,ecx
c00136b7:	c1 fb 1f             	sar    ebx,0x1f
c00136ba:	01 c8                	add    eax,ecx
c00136bc:	11 da                	adc    edx,ebx
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	31 c9                	xor    ecx,ecx
c00136c3:	80 3d f1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caf1,0x0
c00136ca:	74 05                	je     c00136d1 <Clock::timeInSecondsLocal()+0x3d>
c00136cc:	b9 08 07 00 00       	mov    ecx,0x708
c00136d1:	31 db                	xor    ebx,ebx
c00136d3:	01 c8                	add    eax,ecx
c00136d5:	11 da                	adc    edx,ebx
c00136d7:	83 c4 08             	add    esp,0x8
c00136da:	5b                   	pop    ebx
c00136db:	c3                   	ret    

c00136dc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136dc:	57                   	push   edi
c00136dd:	56                   	push   esi
c00136de:	53                   	push   ebx
c00136df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136ed:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136f0:	0f b6 05 f0 ca 02 c0 	movzx  eax,BYTE PTR ds:0xc002caf0
c00136f7:	03 05 f4 ca 02 c0    	add    eax,DWORD PTR ds:0xc002caf4
c00136fd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013703:	99                   	cdq    
c0013704:	29 c6                	sub    esi,eax
c0013706:	19 d7                	sbb    edi,edx
c0013708:	89 f0                	mov    eax,esi
c001370a:	89 fa                	mov    edx,edi
c001370c:	31 f6                	xor    esi,esi
c001370e:	80 3d f1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caf1,0x0
c0013715:	74 05                	je     c001371c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013717:	be 08 07 00 00       	mov    esi,0x708
c001371c:	31 ff                	xor    edi,edi
c001371e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013722:	29 f0                	sub    eax,esi
c0013724:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013728:	19 fa                	sbb    edx,edi
c001372a:	89 d8                	mov    eax,ebx
c001372c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013730:	5b                   	pop    ebx
c0013731:	5e                   	pop    esi
c0013732:	5f                   	pop    edi
c0013733:	ff e0                	jmp    eax

c0013735 <datetimeToSeconds(datetime_t)>:
c0013735:	55                   	push   ebp
c0013736:	57                   	push   edi
c0013737:	56                   	push   esi
c0013738:	53                   	push   ebx
c0013739:	83 ec 14             	sub    esp,0x14
c001373c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013740:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013744:	89 d3                	mov    ebx,edx
c0013746:	0f b6 c6             	movzx  eax,dh
c0013749:	c1 eb 10             	shr    ebx,0x10
c001374c:	48                   	dec    eax
c001374d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013752:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013756:	0f b6 f5             	movzx  esi,ch
c0013759:	89 cf                	mov    edi,ecx
c001375b:	6b f6 3c             	imul   esi,esi,0x3c
c001375e:	c1 ef 10             	shr    edi,0x10
c0013761:	0f b6 c9             	movzx  ecx,cl
c0013764:	89 f8                	mov    eax,edi
c0013766:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001376c:	0f b6 f8             	movzx  edi,al
c001376f:	0f b6 d2             	movzx  edx,dl
c0013772:	01 fe                	add    esi,edi
c0013774:	01 f1                	add    ecx,esi
c0013776:	0f b7 f3             	movzx  esi,bx
c0013779:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001377d:	c1 f9 1f             	sar    ecx,0x1f
c0013780:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013785:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013789:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001378e:	8b 0c 8d 60 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6ba0]
c0013795:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013799:	76 29                	jbe    c00137c4 <datetimeToSeconds(datetime_t)+0x8f>
c001379b:	f6 c3 03             	test   bl,0x3
c001379e:	75 24                	jne    c00137c4 <datetimeToSeconds(datetime_t)+0x8f>
c00137a0:	31 d2                	xor    edx,edx
c00137a2:	bf 64 00 00 00       	mov    edi,0x64
c00137a7:	89 d8                	mov    eax,ebx
c00137a9:	66 f7 f7             	div    di
c00137ac:	66 85 d2             	test   dx,dx
c00137af:	75 12                	jne    c00137c3 <datetimeToSeconds(datetime_t)+0x8e>
c00137b1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137b7:	bf 90 01 00 00       	mov    edi,0x190
c00137bc:	99                   	cdq    
c00137bd:	f7 ff                	idiv   edi
c00137bf:	85 d2                	test   edx,edx
c00137c1:	75 01                	jne    c00137c4 <datetimeToSeconds(datetime_t)+0x8f>
c00137c3:	41                   	inc    ecx
c00137c4:	66 83 fb 46          	cmp    bx,0x46
c00137c8:	76 45                	jbe    c001380f <datetimeToSeconds(datetime_t)+0xda>
c00137ca:	bb 46 00 00 00       	mov    ebx,0x46
c00137cf:	bf 64 00 00 00       	mov    edi,0x64
c00137d4:	bd 90 01 00 00       	mov    ebp,0x190
c00137d9:	b8 6d 01 00 00       	mov    eax,0x16d
c00137de:	f6 c3 03             	test   bl,0x3
c00137e1:	75 23                	jne    c0013806 <datetimeToSeconds(datetime_t)+0xd1>
c00137e3:	89 d8                	mov    eax,ebx
c00137e5:	99                   	cdq    
c00137e6:	f7 ff                	idiv   edi
c00137e8:	b8 6e 01 00 00       	mov    eax,0x16e
c00137ed:	85 d2                	test   edx,edx
c00137ef:	75 15                	jne    c0013806 <datetimeToSeconds(datetime_t)+0xd1>
c00137f1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137f7:	99                   	cdq    
c00137f8:	f7 fd                	idiv   ebp
c00137fa:	83 fa 01             	cmp    edx,0x1
c00137fd:	19 c0                	sbb    eax,eax
c00137ff:	f7 d0                	not    eax
c0013801:	05 6e 01 00 00       	add    eax,0x16e
c0013806:	01 c1                	add    ecx,eax
c0013808:	43                   	inc    ebx
c0013809:	39 f3                	cmp    ebx,esi
c001380b:	7c cc                	jl     c00137d9 <datetimeToSeconds(datetime_t)+0xa4>
c001380d:	eb 35                	jmp    c0013844 <datetimeToSeconds(datetime_t)+0x10f>
c001380f:	74 33                	je     c0013844 <datetimeToSeconds(datetime_t)+0x10f>
c0013811:	b8 45 00 00 00       	mov    eax,0x45
c0013816:	89 c2                	mov    edx,eax
c0013818:	83 e2 03             	and    edx,0x3
c001381b:	39 f0                	cmp    eax,esi
c001381d:	7e 0f                	jle    c001382e <datetimeToSeconds(datetime_t)+0xf9>
c001381f:	83 fa 01             	cmp    edx,0x1
c0013822:	19 d2                	sbb    edx,edx
c0013824:	48                   	dec    eax
c0013825:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001382c:	eb e8                	jmp    c0013816 <datetimeToSeconds(datetime_t)+0xe1>
c001382e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013833:	85 d2                	test   edx,edx
c0013835:	75 0b                	jne    c0013842 <datetimeToSeconds(datetime_t)+0x10d>
c0013837:	66 83 fb 01          	cmp    bx,0x1
c001383b:	19 c0                	sbb    eax,eax
c001383d:	05 6e 01 00 00       	add    eax,0x16e
c0013842:	29 c1                	sub    ecx,eax
c0013844:	b8 80 51 01 00       	mov    eax,0x15180
c0013849:	f7 e9                	imul   ecx
c001384b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001384f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013853:	83 c4 14             	add    esp,0x14
c0013856:	5b                   	pop    ebx
c0013857:	5e                   	pop    esi
c0013858:	5f                   	pop    edi
c0013859:	5d                   	pop    ebp
c001385a:	c3                   	ret    
c001385b:	90                   	nop

c001385c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001385c:	57                   	push   edi
c001385d:	56                   	push   esi
c001385e:	53                   	push   ebx
c001385f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013863:	8b 06                	mov    eax,DWORD PTR [esi]
c0013865:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013868:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001386c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013870:	e8 c0 fe ff ff       	call   c0013735 <datetimeToSeconds(datetime_t)>
c0013875:	59                   	pop    ecx
c0013876:	0f b6 0d f0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002caf0
c001387d:	5b                   	pop    ebx
c001387e:	03 0d f4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002caf4
c0013884:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001388a:	89 cb                	mov    ebx,ecx
c001388c:	c1 fb 1f             	sar    ebx,0x1f
c001388f:	29 c8                	sub    eax,ecx
c0013891:	19 da                	sbb    edx,ebx
c0013893:	31 c9                	xor    ecx,ecx
c0013895:	80 3d f1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caf1,0x0
c001389c:	74 05                	je     c00138a3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001389e:	b9 08 07 00 00       	mov    ecx,0x708
c00138a3:	31 db                	xor    ebx,ebx
c00138a5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138a9:	29 c8                	sub    eax,ecx
c00138ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138af:	19 da                	sbb    edx,ebx
c00138b1:	89 f8                	mov    eax,edi
c00138b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138b7:	5b                   	pop    ebx
c00138b8:	5e                   	pop    esi
c00138b9:	5f                   	pop    edi
c00138ba:	ff e0                	jmp    eax

c00138bc <secondsToDatetime(unsigned long long)>:
c00138bc:	55                   	push   ebp
c00138bd:	57                   	push   edi
c00138be:	56                   	push   esi
c00138bf:	53                   	push   ebx
c00138c0:	83 ec 1c             	sub    esp,0x1c
c00138c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138cf:	6a 00                	push   0x0
c00138d1:	68 80 51 01 00       	push   0x15180
c00138d6:	55                   	push   ebp
c00138d7:	57                   	push   edi
c00138d8:	e8 df 1a 01 00       	call   c00253bc <__udivdi3>
c00138dd:	83 c4 10             	add    esp,0x10
c00138e0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138ea:	6a 00                	push   0x0
c00138ec:	68 80 51 01 00       	push   0x15180
c00138f1:	55                   	push   ebp
c00138f2:	57                   	push   edi
c00138f3:	bf 10 0e 00 00       	mov    edi,0xe10
c00138f8:	e8 bf 1b 01 00       	call   c00254bc <__umoddi3>
c00138fd:	83 c4 10             	add    esp,0x10
c0013900:	99                   	cdq    
c0013901:	f7 ff                	idiv   edi
c0013903:	bf 3c 00 00 00       	mov    edi,0x3c
c0013908:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001390b:	89 d0                	mov    eax,edx
c001390d:	99                   	cdq    
c001390e:	f7 ff                	idiv   edi
c0013910:	85 db                	test   ebx,ebx
c0013912:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013915:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013918:	79 11                	jns    c001392b <secondsToDatetime(unsigned long long)+0x6f>
c001391a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001391e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013924:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013929:	eb 07                	jmp    c0013932 <secondsToDatetime(unsigned long long)+0x76>
c001392b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013930:	89 d8                	mov    eax,ebx
c0013932:	bf b4 05 00 00       	mov    edi,0x5b4
c0013937:	99                   	cdq    
c0013938:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001393d:	f7 f9                	idiv   ecx
c001393f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013944:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013948:	31 d2                	xor    edx,edx
c001394a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013952:	01 c3                	add    ebx,eax
c0013954:	89 d8                	mov    eax,ebx
c0013956:	f7 f1                	div    ecx
c0013958:	31 d2                	xor    edx,edx
c001395a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001395d:	89 d8                	mov    eax,ebx
c001395f:	f7 f7                	div    edi
c0013961:	31 d2                	xor    edx,edx
c0013963:	29 c1                	sub    ecx,eax
c0013965:	89 d8                	mov    eax,ebx
c0013967:	f7 f5                	div    ebp
c0013969:	bd 6d 01 00 00       	mov    ebp,0x16d
c001396e:	29 c1                	sub    ecx,eax
c0013970:	31 d2                	xor    edx,edx
c0013972:	89 c8                	mov    eax,ecx
c0013974:	f7 f5                	div    ebp
c0013976:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001397b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001397f:	31 d2                	xor    edx,edx
c0013981:	89 c8                	mov    eax,ecx
c0013983:	f7 f5                	div    ebp
c0013985:	31 d2                	xor    edx,edx
c0013987:	01 c3                	add    ebx,eax
c0013989:	89 c8                	mov    eax,ecx
c001398b:	f7 f7                	div    edi
c001398d:	bf 99 00 00 00       	mov    edi,0x99
c0013992:	29 c3                	sub    ebx,eax
c0013994:	31 d2                	xor    edx,edx
c0013996:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001399e:	29 c3                	sub    ebx,eax
c00139a0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139a3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139a6:	bb 05 00 00 00       	mov    ebx,0x5
c00139ab:	83 c1 02             	add    ecx,0x2
c00139ae:	89 c8                	mov    eax,ecx
c00139b0:	f7 f7                	div    edi
c00139b2:	31 d2                	xor    edx,edx
c00139b4:	89 c7                	mov    edi,eax
c00139b6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139bc:	83 c0 02             	add    eax,0x2
c00139bf:	f7 f3                	div    ebx
c00139c1:	89 eb                	mov    ebx,ebp
c00139c3:	29 c3                	sub    ebx,eax
c00139c5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139cb:	88 1e                	mov    BYTE PTR [esi],bl
c00139cd:	19 c0                	sbb    eax,eax
c00139cf:	31 d2                	xor    edx,edx
c00139d1:	83 e0 0c             	and    eax,0xc
c00139d4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139d8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139e4:	83 f9 01             	cmp    ecx,0x1
c00139e7:	0f 96 c2             	setbe  dl
c00139ea:	41                   	inc    ecx
c00139eb:	01 d0                	add    eax,edx
c00139ed:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139f0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139f4:	83 c4 1c             	add    esp,0x1c
c00139f7:	89 f0                	mov    eax,esi
c00139f9:	5b                   	pop    ebx
c00139fa:	5e                   	pop    esi
c00139fb:	5f                   	pop    edi
c00139fc:	5d                   	pop    ebp
c00139fd:	c2 04 00             	ret    0x4

c0013a00 <Clock::timeInDatetimeLocal()>:
c0013a00:	53                   	push   ebx
c0013a01:	83 ec 14             	sub    esp,0x14
c0013a04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a0c:	e8 83 fc ff ff       	call   c0013694 <Clock::timeInSecondsLocal()>
c0013a11:	83 c4 0c             	add    esp,0xc
c0013a14:	52                   	push   edx
c0013a15:	50                   	push   eax
c0013a16:	53                   	push   ebx
c0013a17:	e8 a0 fe ff ff       	call   c00138bc <secondsToDatetime(unsigned long long)>
c0013a1c:	89 d8                	mov    eax,ebx
c0013a1e:	83 c4 14             	add    esp,0x14
c0013a21:	5b                   	pop    ebx
c0013a22:	c2 04 00             	ret    0x4
c0013a25:	90                   	nop

c0013a26 <Device::hibernate()>:
c0013a26:	c3                   	ret    
c0013a27:	90                   	nop

c0013a28 <Device::wake()>:
c0013a28:	c3                   	ret    
c0013a29:	90                   	nop

c0013a2a <Device::detect()>:
c0013a2a:	c3                   	ret    
c0013a2b:	90                   	nop

c0013a2c <Device::disableLegacy()>:
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <Device::powerSaving(PowerSavingLevel)>:
c0013a2e:	c3                   	ret    
c0013a2f:	90                   	nop

c0013a30 <DriverlessDevice::close(int, int, void*)>:
c0013a30:	31 c0                	xor    eax,eax
c0013a32:	c3                   	ret    
c0013a33:	90                   	nop

c0013a34 <DriverlessDevice::detect()>:
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <DriverlessDevice::open(int, int, void*)>:
c0013a36:	83 ec 18             	sub    esp,0x18
c0013a39:	68 90 94 02 c0       	push   0xc0029490
c0013a3e:	e8 60 5e 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0013a43:	83 c8 ff             	or     eax,0xffffffff
c0013a46:	83 c4 1c             	add    esp,0x1c
c0013a49:	c3                   	ret    

c0013a4a <Device::~Device()>:
c0013a4a:	ba b8 94 02 c0       	mov    edx,0xc00294b8
c0013a4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a53:	89 10                	mov    DWORD PTR [eax],edx
c0013a55:	90                   	nop
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop

c0013a58 <Device::~Device()>:
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a5f:	e8 e6 ff ff ff       	call   c0013a4a <Device::~Device()>
c0013a64:	83 c4 04             	add    esp,0x4
c0013a67:	83 ec 08             	sub    esp,0x8
c0013a6a:	68 58 01 00 00       	push   0x158
c0013a6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a73:	e8 31 ec ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	83 c4 0c             	add    esp,0xc
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop

c0013a80 <Device::findAndLoadDriver()>:
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a82:	57                   	push   edi
c0013a83:	b9 09 00 00 00       	mov    ecx,0x9
c0013a88:	56                   	push   esi
c0013a89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a8d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a91:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a9b:	81 c7 18 01 00 00    	add    edi,0x118
c0013aa1:	fc                   	cld    
c0013aa2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013aa4:	5e                   	pop    esi
c0013aa5:	5f                   	pop    edi
c0013aa6:	c3                   	ret    
c0013aa7:	90                   	nop

c0013aa8 <Device::preOpenACPI(void*, char*, char*)>:
c0013aa8:	56                   	push   esi
c0013aa9:	53                   	push   ebx
c0013aaa:	83 ec 08             	sub    esp,0x8
c0013aad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013ab1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ab5:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013abf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ac3:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013ac9:	6a 1e                	push   0x1e
c0013acb:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013ad1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ad5:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013adb:	50                   	push   eax
c0013adc:	e8 74 cb fe ff       	call   c0000655 <memcpy>
c0013ae1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013ae5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ae9:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013af1:	83 c4 14             	add    esp,0x14
c0013af4:	5b                   	pop    ebx
c0013af5:	5e                   	pop    esi
c0013af6:	e9 5a cb fe ff       	jmp    c0000655 <memcpy>
c0013afb:	90                   	nop

c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b00:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b05:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b0c:	75 0b                	jne    c0013b19 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b10:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b14:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b17:	eb 1e                	jmp    c0013b37 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b19:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0013b1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b24:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b2a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b2c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b34:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b37:	ff e0                	jmp    eax
c0013b39:	90                   	nop

c0013b3a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b3e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b43:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b4a:	75 0b                	jne    c0013b57 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b4e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b52:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b55:	eb 1e                	jmp    c0013b75 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b57:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0013b5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b62:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b68:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b6a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b72:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b75:	ff e0                	jmp    eax
c0013b77:	90                   	nop

c0013b78 <Device::addChild(Device*)>:
c0013b78:	53                   	push   ebx
c0013b79:	83 ec 08             	sub    esp,0x8
c0013b7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b84:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b8a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b90:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b92:	85 d2                	test   edx,edx
c0013b94:	74 04                	je     c0013b9a <Device::addChild(Device*)+0x22>
c0013b96:	89 d3                	mov    ebx,edx
c0013b98:	eb f6                	jmp    c0013b90 <Device::addChild(Device*)+0x18>
c0013b9a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	6a 08                	push   0x8
c0013ba2:	e8 2d b9 ff ff       	call   c000f4d4 <malloc>
c0013ba7:	89 03                	mov    DWORD PTR [ebx],eax
c0013ba9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013baf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bb6:	83 c4 18             	add    esp,0x18
c0013bb9:	5b                   	pop    ebx
c0013bba:	c3                   	ret    
c0013bbb:	90                   	nop

c0013bbc <Device::removeAllChildren()>:
c0013bbc:	56                   	push   esi
c0013bbd:	53                   	push   ebx
c0013bbe:	52                   	push   edx
c0013bbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bc3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013bc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bcc:	74 17                	je     c0013be5 <Device::removeAllChildren()+0x29>
c0013bce:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bd1:	85 c0                	test   eax,eax
c0013bd3:	74 0c                	je     c0013be1 <Device::removeAllChildren()+0x25>
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bda:	50                   	push   eax
c0013bdb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013be3:	eb e4                	jmp    c0013bc9 <Device::removeAllChildren()+0xd>
c0013be5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013beb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bf1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bfe:	58                   	pop    eax
c0013bff:	5b                   	pop    ebx
c0013c00:	5e                   	pop    esi
c0013c01:	c3                   	ret    

c0013c02 <Device::hibernateAll()>:
c0013c02:	53                   	push   ebx
c0013c03:	83 ec 14             	sub    esp,0x14
c0013c06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c0c:	53                   	push   ebx
c0013c0d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c16:	83 c4 10             	add    esp,0x10
c0013c19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c1c:	74 0f                	je     c0013c2d <Device::hibernateAll()+0x2b>
c0013c1e:	83 ec 0c             	sub    esp,0xc
c0013c21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c24:	e8 d9 ff ff ff       	call   c0013c02 <Device::hibernateAll()>
c0013c29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c2b:	eb e9                	jmp    c0013c16 <Device::hibernateAll()+0x14>
c0013c2d:	83 c4 08             	add    esp,0x8
c0013c30:	5b                   	pop    ebx
c0013c31:	c3                   	ret    

c0013c32 <Device::wakeAll()>:
c0013c32:	53                   	push   ebx
c0013c33:	83 ec 14             	sub    esp,0x14
c0013c36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c3c:	53                   	push   ebx
c0013c3d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c4c:	74 0f                	je     c0013c5d <Device::wakeAll()+0x2b>
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c54:	e8 d9 ff ff ff       	call   c0013c32 <Device::wakeAll()>
c0013c59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c5b:	eb e9                	jmp    c0013c46 <Device::wakeAll()+0x14>
c0013c5d:	83 c4 08             	add    esp,0x8
c0013c60:	5b                   	pop    ebx
c0013c61:	c3                   	ret    

c0013c62 <Device::detectAll()>:
c0013c62:	53                   	push   ebx
c0013c63:	83 ec 14             	sub    esp,0x14
c0013c66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c6c:	53                   	push   ebx
c0013c6d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c70:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c7c:	74 0f                	je     c0013c8d <Device::detectAll()+0x2b>
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c84:	e8 d9 ff ff ff       	call   c0013c62 <Device::detectAll()>
c0013c89:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c8b:	eb e9                	jmp    c0013c76 <Device::detectAll()+0x14>
c0013c8d:	83 c4 08             	add    esp,0x8
c0013c90:	5b                   	pop    ebx
c0013c91:	c3                   	ret    

c0013c92 <Device::disableLegacyAll()>:
c0013c92:	53                   	push   ebx
c0013c93:	83 ec 14             	sub    esp,0x14
c0013c96:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9c:	53                   	push   ebx
c0013c9d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ca0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cac:	74 0f                	je     c0013cbd <Device::disableLegacyAll()+0x2b>
c0013cae:	83 ec 0c             	sub    esp,0xc
c0013cb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb4:	e8 d9 ff ff ff       	call   c0013c92 <Device::disableLegacyAll()>
c0013cb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cbb:	eb e9                	jmp    c0013ca6 <Device::disableLegacyAll()+0x14>
c0013cbd:	83 c4 08             	add    esp,0x8
c0013cc0:	5b                   	pop    ebx
c0013cc1:	c3                   	ret    

c0013cc2 <Device::loadDriversForAll()>:
c0013cc2:	53                   	push   ebx
c0013cc3:	83 ec 08             	sub    esp,0x8
c0013cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cca:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cd0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013cd2:	85 db                	test   ebx,ebx
c0013cd4:	74 12                	je     c0013ce8 <Device::loadDriversForAll()+0x26>
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013cdc:	e8 e1 ff ff ff       	call   c0013cc2 <Device::loadDriversForAll()>
c0013ce1:	83 c4 10             	add    esp,0x10
c0013ce4:	89 d8                	mov    eax,ebx
c0013ce6:	eb e8                	jmp    c0013cd0 <Device::loadDriversForAll()+0xe>
c0013ce8:	83 c4 08             	add    esp,0x8
c0013ceb:	5b                   	pop    ebx
c0013cec:	c3                   	ret    
c0013ced:	90                   	nop

c0013cee <Device::closeAll()>:
c0013cee:	53                   	push   ebx
c0013cef:	83 ec 08             	sub    esp,0x8
c0013cf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf8:	6a 00                	push   0x0
c0013cfa:	6a 00                	push   0x0
c0013cfc:	6a 00                	push   0x0
c0013cfe:	53                   	push   ebx
c0013cff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d02:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0e:	74 0f                	je     c0013d1f <Device::closeAll()+0x31>
c0013d10:	83 ec 0c             	sub    esp,0xc
c0013d13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d16:	e8 d3 ff ff ff       	call   c0013cee <Device::closeAll()>
c0013d1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d1d:	eb e9                	jmp    c0013d08 <Device::closeAll()+0x1a>
c0013d1f:	83 c4 08             	add    esp,0x8
c0013d22:	5b                   	pop    ebx
c0013d23:	c3                   	ret    

c0013d24 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d24:	56                   	push   esi
c0013d25:	53                   	push   ebx
c0013d26:	83 ec 0c             	sub    esp,0xc
c0013d29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d33:	56                   	push   esi
c0013d34:	53                   	push   ebx
c0013d35:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d3e:	83 c4 10             	add    esp,0x10
c0013d41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d44:	74 0f                	je     c0013d55 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d46:	52                   	push   edx
c0013d47:	52                   	push   edx
c0013d48:	56                   	push   esi
c0013d49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d4c:	e8 d3 ff ff ff       	call   c0013d24 <Device::powerSavingAll(PowerSavingLevel)>
c0013d51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d53:	eb e9                	jmp    c0013d3e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d55:	58                   	pop    eax
c0013d56:	5b                   	pop    ebx
c0013d57:	5e                   	pop    esi
c0013d58:	c3                   	ret    
c0013d59:	90                   	nop

c0013d5a <Device::setName(char const*)>:
c0013d5a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d62:	e9 c3 c9 fe ff       	jmp    c000072a <strcpy>
c0013d67:	90                   	nop

c0013d68 <Device::Device(char const*)>:
c0013d68:	83 ec 1c             	sub    esp,0x1c
c0013d6b:	ba b8 94 02 c0       	mov    edx,0xc00294b8
c0013d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d74:	89 10                	mov    DWORD PTR [eax],edx
c0013d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d7a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d88:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d96:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013dae:	83 ec 08             	sub    esp,0x8
c0013db1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db9:	e8 9c ff ff ff       	call   c0013d5a <Device::setName(char const*)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013dc9:	83 ec 0c             	sub    esp,0xc
c0013dcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dd0:	e8 ff b6 ff ff       	call   c000f4d4 <malloc>
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013de5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013de9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013def:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013df9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e03:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e14:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e38:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e46:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e54:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e5e:	90                   	nop
c0013e5f:	83 c4 1c             	add    esp,0x1c
c0013e62:	c3                   	ret    
c0013e63:	90                   	nop

c0013e64 <Device::getName()>:
c0013e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e68:	05 d0 00 00 00       	add    eax,0xd0
c0013e6d:	c3                   	ret    

c0013e6e <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e6e:	83 ec 0c             	sub    esp,0xc
c0013e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e75:	83 ec 08             	sub    esp,0x8
c0013e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7c:	50                   	push   eax
c0013e7d:	e8 e6 fe ff ff       	call   c0013d68 <Device::Device(char const*)>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	ba e4 94 02 c0       	mov    edx,0xc00294e4
c0013e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8e:	89 10                	mov    DWORD PTR [eax],edx
c0013e90:	90                   	nop
c0013e91:	83 c4 0c             	add    esp,0xc
c0013e94:	c3                   	ret    
c0013e95:	90                   	nop

c0013e96 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e96:	57                   	push   edi
c0013e97:	56                   	push   esi
c0013e98:	53                   	push   ebx
c0013e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ea1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013eab:	75 0c                	jne    c0013eb9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013ead:	52                   	push   edx
c0013eae:	52                   	push   edx
c0013eaf:	53                   	push   ebx
c0013eb0:	56                   	push   esi
c0013eb1:	e8 44 34 01 00       	call   c00272fa <LinkedList<Device>::addElement(Device*)>
c0013eb6:	83 c4 10             	add    esp,0x10
c0013eb9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ebf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec2:	74 12                	je     c0013ed6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ec4:	50                   	push   eax
c0013ec5:	57                   	push   edi
c0013ec6:	56                   	push   esi
c0013ec7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eca:	e8 c7 ff ff ff       	call   c0013e96 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ecf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	eb e9                	jmp    c0013ebf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ed6:	5b                   	pop    ebx
c0013ed7:	5e                   	pop    esi
c0013ed8:	5f                   	pop    edi
c0013ed9:	c3                   	ret    

c0013eda <getDevicesOfType(DeviceType)>:
c0013eda:	53                   	push   ebx
c0013edb:	83 ec 14             	sub    esp,0x14
c0013ede:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ee2:	53                   	push   ebx
c0013ee3:	e8 ee 34 01 00       	call   c00273d6 <LinkedList<Device>::LinkedList()>
c0013ee8:	83 c4 0c             	add    esp,0xc
c0013eeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eef:	53                   	push   ebx
c0013ef0:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c0013ef6:	e8 9b ff ff ff       	call   c0013e96 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013efb:	89 d8                	mov    eax,ebx
c0013efd:	83 c4 18             	add    esp,0x18
c0013f00:	5b                   	pop    ebx
c0013f01:	c2 04 00             	ret    0x4

c0013f04 <HardDiskController::HardDiskController(char const*)>:
c0013f04:	83 ec 0c             	sub    esp,0xc
c0013f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0b:	83 ec 08             	sub    esp,0x8
c0013f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f12:	50                   	push   eax
c0013f13:	e8 50 fe ff ff       	call   c0013d68 <Device::Device(char const*)>
c0013f18:	83 c4 10             	add    esp,0x10
c0013f1b:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0013f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f24:	89 10                	mov    DWORD PTR [eax],edx
c0013f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f34:	90                   	nop
c0013f35:	83 c4 0c             	add    esp,0xc
c0013f38:	c3                   	ret    
c0013f39:	90                   	nop

c0013f3a <HardDiskController::~HardDiskController()>:
c0013f3a:	83 ec 0c             	sub    esp,0xc
c0013f3d:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0013f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f46:	89 10                	mov    DWORD PTR [eax],edx
c0013f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	50                   	push   eax
c0013f50:	e8 f5 fa ff ff       	call   c0013a4a <Device::~Device()>
c0013f55:	83 c4 10             	add    esp,0x10
c0013f58:	90                   	nop
c0013f59:	83 c4 0c             	add    esp,0xc
c0013f5c:	c3                   	ret    
c0013f5d:	90                   	nop

c0013f5e <HardDiskController::~HardDiskController()>:
c0013f5e:	83 ec 0c             	sub    esp,0xc
c0013f61:	83 ec 0c             	sub    esp,0xc
c0013f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f68:	e8 cd ff ff ff       	call   c0013f3a <HardDiskController::~HardDiskController()>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	83 ec 08             	sub    esp,0x8
c0013f73:	68 58 01 00 00       	push   0x158
c0013f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f7c:	e8 28 e7 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	83 c4 0c             	add    esp,0xc
c0013f87:	c3                   	ret    

c0013f88 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8f:	83 ec 08             	sub    esp,0x8
c0013f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f96:	50                   	push   eax
c0013f97:	e8 cc fd ff ff       	call   c0013d68 <Device::Device(char const*)>
c0013f9c:	83 c4 10             	add    esp,0x10
c0013f9f:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c0013fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa8:	89 10                	mov    DWORD PTR [eax],edx
c0013faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fea:	90                   	nop
c0013feb:	83 c4 0c             	add    esp,0xc
c0013fee:	c3                   	ret    
c0013fef:	90                   	nop

c0013ff0 <PhysicalDisk::startCache()>:
c0013ff0:	56                   	push   esi
c0013ff1:	53                   	push   ebx
c0013ff2:	83 ec 10             	sub    esp,0x10
c0013ff5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff9:	6a 30                	push   0x30
c0013ffb:	e8 d4 b4 ff ff       	call   c000f4d4 <malloc>
c0014000:	89 c6                	mov    esi,eax
c0014002:	58                   	pop    eax
c0014003:	5a                   	pop    edx
c0014004:	53                   	push   ebx
c0014005:	56                   	push   esi
c0014006:	e8 dd 25 00 00       	call   c00165e8 <VCache::VCache(PhysicalDisk*)>
c001400b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014011:	83 c4 14             	add    esp,0x14
c0014014:	5b                   	pop    ebx
c0014015:	5e                   	pop    esi
c0014016:	c3                   	ret    
c0014017:	90                   	nop

c0014018 <PhysicalDisk::~PhysicalDisk()>:
c0014018:	83 ec 0c             	sub    esp,0xc
c001401b:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c0014020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014024:	89 10                	mov    DWORD PTR [eax],edx
c0014026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402a:	83 ec 0c             	sub    esp,0xc
c001402d:	50                   	push   eax
c001402e:	e8 17 fa ff ff       	call   c0013a4a <Device::~Device()>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	90                   	nop
c0014037:	83 c4 0c             	add    esp,0xc
c001403a:	c3                   	ret    
c001403b:	90                   	nop

c001403c <PhysicalDisk::~PhysicalDisk()>:
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	83 ec 0c             	sub    esp,0xc
c0014042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014046:	e8 cd ff ff ff       	call   c0014018 <PhysicalDisk::~PhysicalDisk()>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	83 ec 08             	sub    esp,0x8
c0014051:	68 6c 01 00 00       	push   0x16c
c0014056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001405a:	e8 4a e6 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c001405f:	83 c4 10             	add    esp,0x10
c0014062:	83 c4 0c             	add    esp,0xc
c0014065:	c3                   	ret    

c0014066 <FPU::FPU(char const*)>:
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406d:	83 ec 08             	sub    esp,0x8
c0014070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014074:	50                   	push   eax
c0014075:	e8 ee fc ff ff       	call   c0013d68 <Device::Device(char const*)>
c001407a:	83 c4 10             	add    esp,0x10
c001407d:	ba 7c 95 02 c0       	mov    edx,0xc002957c
c0014082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014086:	89 10                	mov    DWORD PTR [eax],edx
c0014088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014096:	90                   	nop
c0014097:	83 c4 0c             	add    esp,0xc
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <FPU::~FPU()>:
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	ba 7c 95 02 c0       	mov    edx,0xc002957c
c00140a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a8:	89 10                	mov    DWORD PTR [eax],edx
c00140aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	50                   	push   eax
c00140b2:	e8 93 f9 ff ff       	call   c0013a4a <Device::~Device()>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	90                   	nop
c00140bb:	83 c4 0c             	add    esp,0xc
c00140be:	c3                   	ret    
c00140bf:	90                   	nop

c00140c0 <FPU::~FPU()>:
c00140c0:	83 ec 0c             	sub    esp,0xc
c00140c3:	83 ec 0c             	sub    esp,0xc
c00140c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ca:	e8 cd ff ff ff       	call   c001409c <FPU::~FPU()>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	83 ec 08             	sub    esp,0x8
c00140d5:	68 58 01 00 00       	push   0x158
c00140da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140de:	e8 c6 e5 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	83 c4 0c             	add    esp,0xc
c00140e9:	c3                   	ret    

c00140ea <setupFPU()>:
c00140ea:	53                   	push   ebx
c00140eb:	83 ec 08             	sub    esp,0x8
c00140ee:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c00140f4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140fb:	74 19                	je     c0014116 <setupFPU()+0x2c>
c00140fd:	83 ec 0c             	sub    esp,0xc
c0014100:	68 58 01 00 00       	push   0x158
c0014105:	e8 ca b3 ff ff       	call   c000f4d4 <malloc>
c001410a:	89 c3                	mov    ebx,eax
c001410c:	89 04 24             	mov    DWORD PTR [esp],eax
c001410f:	e8 30 fe 00 00       	call   c0023f44 <AVX::AVX()>
c0014114:	eb 5b                	jmp    c0014171 <setupFPU()+0x87>
c0014116:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001411c:	84 c0                	test   al,al
c001411e:	79 19                	jns    c0014139 <setupFPU()+0x4f>
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	68 58 01 00 00       	push   0x158
c0014128:	e8 a7 b3 ff ff       	call   c000f4d4 <malloc>
c001412d:	89 c3                	mov    ebx,eax
c001412f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014132:	e8 33 ff 00 00       	call   c002406a <SSE::SSE()>
c0014137:	eb 38                	jmp    c0014171 <setupFPU()+0x87>
c0014139:	a8 20                	test   al,0x20
c001413b:	74 19                	je     c0014156 <setupFPU()+0x6c>
c001413d:	83 ec 0c             	sub    esp,0xc
c0014140:	68 58 01 00 00       	push   0x158
c0014145:	e8 8a b3 ff ff       	call   c000f4d4 <malloc>
c001414a:	89 c3                	mov    ebx,eax
c001414c:	89 04 24             	mov    DWORD PTR [esp],eax
c001414f:	e8 80 fe 00 00       	call   c0023fd4 <MMX::MMX()>
c0014154:	eb 1b                	jmp    c0014171 <setupFPU()+0x87>
c0014156:	a8 10                	test   al,0x10
c0014158:	74 1c                	je     c0014176 <setupFPU()+0x8c>
c001415a:	83 ec 0c             	sub    esp,0xc
c001415d:	68 58 01 00 00       	push   0x158
c0014162:	e8 6d b3 ff ff       	call   c000f4d4 <malloc>
c0014167:	89 c3                	mov    ebx,eax
c0014169:	89 04 24             	mov    DWORD PTR [esp],eax
c001416c:	e8 87 ff 00 00       	call   c00240f8 <x87::x87()>
c0014171:	83 c4 10             	add    esp,0x10
c0014174:	eb 24                	jmp    c001419a <setupFPU()+0xb0>
c0014176:	83 e0 ef             	and    eax,0xffffffef
c0014179:	83 ec 0c             	sub    esp,0xc
c001417c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014182:	68 68 95 02 c0       	push   0xc0029568
c0014187:	e8 fd e5 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001418c:	0f 20 c0             	mov    eax,cr0
c001418f:	83 c8 04             	or     eax,0x4
c0014192:	0f 22 c0             	mov    cr0,eax
c0014195:	31 db                	xor    ebx,ebx
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	89 d8                	mov    eax,ebx
c001419c:	83 c4 08             	add    esp,0x8
c001419f:	5b                   	pop    ebx
c00141a0:	c3                   	ret    
c00141a1:	90                   	nop

c00141a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00141a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141aa:	c1 e0 04             	shl    eax,0x4
c00141ad:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141b1:	8d 50 10             	lea    edx,[eax+0x10]
c00141b4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141ba:	74 08                	je     c00141c4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141bc:	83 c0 04             	add    eax,0x4
c00141bf:	39 d0                	cmp    eax,edx
c00141c1:	75 f1                	jne    c00141b4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141c3:	c3                   	ret    
c00141c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141ce:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141d8:	eb e2                	jmp    c00141bc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141da <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141da:	57                   	push   edi
c00141db:	31 c0                	xor    eax,eax
c00141dd:	56                   	push   esi
c00141de:	53                   	push   ebx
c00141df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141eb:	89 da                	mov    edx,ebx
c00141ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141f1:	c1 e2 04             	shl    edx,0x4
c00141f4:	01 ca                	add    edx,ecx
c00141f6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141fe:	74 16                	je     c0014216 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014200:	40                   	inc    eax
c0014201:	83 f8 04             	cmp    eax,0x4
c0014204:	75 f0                	jne    c00141f6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014206:	c7 44 24 10 ac 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295ac
c001420e:	5b                   	pop    ebx
c001420f:	5e                   	pop    esi
c0014210:	5f                   	pop    edi
c0014211:	e9 8d 56 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>
c0014216:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014219:	8d 04 81             	lea    eax,[ecx+eax*4]
c001421c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014222:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014228:	5b                   	pop    ebx
c0014229:	5e                   	pop    esi
c001422a:	5f                   	pop    edi
c001422b:	c3                   	ret    

c001422c <doubleFault(regs*, void*)>:
c001422c:	55                   	push   ebp
c001422d:	89 e5                	mov    ebp,esp
c001422f:	83 ec 08             	sub    esp,0x8
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	68 e7 95 02 c0       	push   0xc00295e7
c001423a:	e8 64 56 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001423f:	83 c4 10             	add    esp,0x10
c0014242:	90                   	nop
c0014243:	c9                   	leave  
c0014244:	c3                   	ret    
c0014245:	90                   	nop

c0014246 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	50                   	push   eax
c0014249:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001424d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014251:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014256:	75 35                	jne    c001428d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014258:	8d 43 20             	lea    eax,[ebx+0x20]
c001425b:	31 d2                	xor    edx,edx
c001425d:	89 c1                	mov    ecx,eax
c001425f:	c1 e1 04             	shl    ecx,0x4
c0014262:	01 f1                	add    ecx,esi
c0014264:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001426c:	74 3e                	je     c00142ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001426e:	42                   	inc    edx
c001426f:	83 fa 04             	cmp    edx,0x4
c0014272:	75 f0                	jne    c0014264 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	68 2c 96 02 c0       	push   0xc002962c
c001427c:	e8 22 56 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0014281:	83 c4 10             	add    esp,0x10
c0014284:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014289:	5a                   	pop    edx
c001428a:	5b                   	pop    ebx
c001428b:	5e                   	pop    esi
c001428c:	c3                   	ret    
c001428d:	83 ec 0c             	sub    esp,0xc
c0014290:	56                   	push   esi
c0014291:	e8 ce fb ff ff       	call   c0013e64 <Device::getName()>
c0014296:	83 c4 10             	add    esp,0x10
c0014299:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001429c:	75 ba                	jne    c0014258 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001429e:	83 fb 0f             	cmp    ebx,0xf
c00142a1:	7f 29                	jg     c00142cc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00142a3:	0f b6 9b c0 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4440]
c00142aa:	eb ac                	jmp    c0014258 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142ac:	8d 04 82             	lea    eax,[edx+eax*4]
c00142af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b3:	8d 04 86             	lea    eax,[esi+eax*4]
c00142b6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142c0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142c6:	89 d8                	mov    eax,ebx
c00142c8:	5a                   	pop    edx
c00142c9:	5b                   	pop    ebx
c00142ca:	5e                   	pop    esi
c00142cb:	c3                   	ret    
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	68 f4 95 02 c0       	push   0xc00295f4
c00142d4:	e8 ca 55 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c00142d9:	83 c4 10             	add    esp,0x10
c00142dc:	e9 77 ff ff ff       	jmp    c0014258 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142e1:	90                   	nop

c00142e2 <InterruptController::clearAllHandlers(int, bool)>:
c00142e2:	56                   	push   esi
c00142e3:	53                   	push   ebx
c00142e4:	52                   	push   edx
c00142e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142ed:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142f2:	75 61                	jne    c0014355 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142f4:	8d 46 20             	lea    eax,[esi+0x20]
c00142f7:	c1 e6 04             	shl    esi,0x4
c00142fa:	c1 e0 04             	shl    eax,0x4
c00142fd:	01 de                	add    esi,ebx
c00142ff:	01 d8                	add    eax,ebx
c0014301:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001430b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014315:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001431f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014329:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014333:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001433d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014347:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014351:	58                   	pop    eax
c0014352:	5b                   	pop    ebx
c0014353:	5e                   	pop    esi
c0014354:	c3                   	ret    
c0014355:	83 ec 0c             	sub    esp,0xc
c0014358:	53                   	push   ebx
c0014359:	e8 06 fb ff ff       	call   c0013e64 <Device::getName()>
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014364:	75 8e                	jne    c00142f4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014366:	83 fe 0f             	cmp    esi,0xf
c0014369:	7f 09                	jg     c0014374 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001436b:	0f b6 b6 c0 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4440]
c0014372:	eb 80                	jmp    c00142f4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014374:	83 ec 0c             	sub    esp,0xc
c0014377:	68 68 96 02 c0       	push   0xc0029668
c001437c:	e8 22 55 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0014381:	83 c4 10             	add    esp,0x10
c0014384:	e9 6b ff ff ff       	jmp    c00142f4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014389:	90                   	nop

c001438a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001438a:	56                   	push   esi
c001438b:	53                   	push   ebx
c001438c:	52                   	push   edx
c001438d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014391:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014395:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001439a:	75 3a                	jne    c00143d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001439c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a0:	8d 50 20             	lea    edx,[eax+0x20]
c00143a3:	c1 e2 04             	shl    edx,0x4
c00143a6:	8d 04 16             	lea    eax,[esi+edx*1]
c00143a9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143ad:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143b3:	74 0b                	je     c00143c0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143b5:	83 c0 04             	add    eax,0x4
c00143b8:	39 d0                	cmp    eax,edx
c00143ba:	75 f1                	jne    c00143ad <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143bc:	58                   	pop    eax
c00143bd:	5b                   	pop    ebx
c00143be:	5e                   	pop    esi
c00143bf:	c3                   	ret    
c00143c0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143ca:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143d4:	eb df                	jmp    c00143b5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143d6:	83 ec 0c             	sub    esp,0xc
c00143d9:	56                   	push   esi
c00143da:	e8 85 fa ff ff       	call   c0013e64 <Device::getName()>
c00143df:	83 c4 10             	add    esp,0x10
c00143e2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143e5:	75 b5                	jne    c001439c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143e7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143ec:	7f 11                	jg     c00143ff <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143f2:	0f b6 80 c0 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4440]
c00143f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143fd:	eb 9d                	jmp    c001439c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143ff:	83 ec 0c             	sub    esp,0xc
c0014402:	68 68 96 02 c0       	push   0xc0029668
c0014407:	e8 97 54 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001440c:	83 c4 10             	add    esp,0x10
c001440f:	eb 8b                	jmp    c001439c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014411 <nmiHandler(regs*, void*)>:
c0014411:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0014416:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001441a:	e9 01 a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c001441f <int_handler>:
c001441f:	55                   	push   ebp
c0014420:	57                   	push   edi
c0014421:	56                   	push   esi
c0014422:	53                   	push   ebx
c0014423:	83 ec 0c             	sub    esp,0xc
c0014426:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001442a:	80 3d a0 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4a0,0x0
c0014431:	74 0b                	je     c001443e <int_handler+0x1f>
c0014433:	fa                   	cli    
c0014434:	f4                   	hlt    
c0014435:	80 3d a0 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4a0,0x0
c001443c:	75 f5                	jne    c0014433 <int_handler+0x14>
c001443e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0014443:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014446:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001444c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014452:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014455:	83 f8 17             	cmp    eax,0x17
c0014458:	77 13                	ja     c001446d <int_handler+0x4e>
c001445a:	83 ec 08             	sub    esp,0x8
c001445d:	8b 17                	mov    edx,DWORD PTR [edi]
c001445f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014462:	0f b6 c0             	movzx  eax,al
c0014465:	50                   	push   eax
c0014466:	57                   	push   edi
c0014467:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001446a:	83 c4 10             	add    esp,0x10
c001446d:	83 c3 15             	add    ebx,0x15
c0014470:	c1 e3 04             	shl    ebx,0x4
c0014473:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014477:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001447e:	31 db                	xor    ebx,ebx
c0014480:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014484:	85 c0                	test   eax,eax
c0014486:	74 13                	je     c001449b <int_handler+0x7c>
c0014488:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001448b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001448f:	74 1c                	je     c00144ad <int_handler+0x8e>
c0014491:	83 ec 08             	sub    esp,0x8
c0014494:	52                   	push   edx
c0014495:	56                   	push   esi
c0014496:	ff d0                	call   eax
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	43                   	inc    ebx
c001449c:	83 fb 04             	cmp    ebx,0x4
c001449f:	75 df                	jne    c0014480 <int_handler+0x61>
c00144a1:	83 c4 0c             	add    esp,0xc
c00144a4:	31 c0                	xor    eax,eax
c00144a6:	5b                   	pop    ebx
c00144a7:	31 d2                	xor    edx,edx
c00144a9:	5e                   	pop    esi
c00144aa:	5f                   	pop    edi
c00144ab:	5d                   	pop    ebp
c00144ac:	c3                   	ret    
c00144ad:	83 ec 08             	sub    esp,0x8
c00144b0:	52                   	push   edx
c00144b1:	56                   	push   esi
c00144b2:	ff d0                	call   eax
c00144b4:	83 c4 10             	add    esp,0x10
c00144b7:	83 c4 0c             	add    esp,0xc
c00144ba:	5b                   	pop    ebx
c00144bb:	5e                   	pop    esi
c00144bc:	5f                   	pop    edi
c00144bd:	5d                   	pop    ebp
c00144be:	c3                   	ret    
c00144bf:	90                   	nop

c00144c0 <InterruptController::InterruptController(char const*)>:
c00144c0:	83 ec 1c             	sub    esp,0x1c
c00144c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c7:	83 ec 08             	sub    esp,0x8
c00144ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144ce:	50                   	push   eax
c00144cf:	e8 94 f8 ff ff       	call   c0013d68 <Device::Device(char const*)>
c00144d4:	83 c4 10             	add    esp,0x10
c00144d7:	ba 9c 98 02 c0       	mov    edx,0xc002989c
c00144dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e0:	89 10                	mov    DWORD PTR [eax],edx
c00144e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144f8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014500:	7f 5e                	jg     c0014560 <InterruptController::InterruptController(char const*)+0xa0>
c0014502:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001450a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001450f:	7f 49                	jg     c001455a <InterruptController::InterruptController(char const*)+0x9a>
c0014511:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014515:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014519:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014524:	01 ca                	add    edx,ecx
c0014526:	83 c2 54             	add    edx,0x54
c0014529:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014535:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014539:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014544:	01 ca                	add    edx,ecx
c0014546:	81 c2 54 04 00 00    	add    edx,0x454
c001454c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014554:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014558:	eb b0                	jmp    c001450a <InterruptController::InterruptController(char const*)+0x4a>
c001455a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001455e:	eb 98                	jmp    c00144f8 <InterruptController::InterruptController(char const*)+0x38>
c0014560:	90                   	nop
c0014561:	83 c4 1c             	add    esp,0x1c
c0014564:	c3                   	ret    
c0014565:	90                   	nop

c0014566 <InterruptController::~InterruptController()>:
c0014566:	83 ec 0c             	sub    esp,0xc
c0014569:	ba 9c 98 02 c0       	mov    edx,0xc002989c
c001456e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014572:	89 10                	mov    DWORD PTR [eax],edx
c0014574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014578:	83 ec 0c             	sub    esp,0xc
c001457b:	50                   	push   eax
c001457c:	e8 c9 f4 ff ff       	call   c0013a4a <Device::~Device()>
c0014581:	83 c4 10             	add    esp,0x10
c0014584:	90                   	nop
c0014585:	83 c4 0c             	add    esp,0xc
c0014588:	c3                   	ret    
c0014589:	90                   	nop

c001458a <InterruptController::~InterruptController()>:
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	83 ec 0c             	sub    esp,0xc
c0014590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014594:	e8 cd ff ff ff       	call   c0014566 <InterruptController::~InterruptController()>
c0014599:	83 c4 10             	add    esp,0x10
c001459c:	83 ec 08             	sub    esp,0x8
c001459f:	68 58 21 00 00       	push   0x2158
c00145a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a8:	e8 fc e0 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	83 c4 0c             	add    esp,0xc
c00145b3:	c3                   	ret    

c00145b4 <displayDebugInfo(regs*)>:
c00145b4:	55                   	push   ebp
c00145b5:	57                   	push   edi
c00145b6:	56                   	push   esi
c00145b7:	53                   	push   ebx
c00145b8:	83 ec 24             	sub    esp,0x24
c00145bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145bf:	0f 20 c2             	mov    edx,cr0
c00145c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145c6:	0f 20 d7             	mov    edi,cr2
c00145c9:	0f 20 de             	mov    esi,cr3
c00145cc:	0f 20 e5             	mov    ebp,cr4
c00145cf:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145d2:	68 a2 96 02 c0       	push   0xc00296a2
c00145d7:	e8 ad e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00145dc:	58                   	pop    eax
c00145dd:	5a                   	pop    edx
c00145de:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145e1:	68 ad 96 02 c0       	push   0xc00296ad
c00145e6:	e8 9e e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00145eb:	59                   	pop    ecx
c00145ec:	58                   	pop    eax
c00145ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145f0:	68 b8 96 02 c0       	push   0xc00296b8
c00145f5:	e8 8f e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00145fa:	58                   	pop    eax
c00145fb:	5a                   	pop    edx
c00145fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145ff:	68 c3 96 02 c0       	push   0xc00296c3
c0014604:	e8 80 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014609:	59                   	pop    ecx
c001460a:	58                   	pop    eax
c001460b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001460e:	68 ce 96 02 c0       	push   0xc00296ce
c0014613:	e8 71 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014618:	58                   	pop    eax
c0014619:	5a                   	pop    edx
c001461a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001461d:	68 d9 96 02 c0       	push   0xc00296d9
c0014622:	e8 62 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014627:	59                   	pop    ecx
c0014628:	58                   	pop    eax
c0014629:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001462c:	68 e4 96 02 c0       	push   0xc00296e4
c0014631:	e8 53 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014636:	58                   	pop    eax
c0014637:	5a                   	pop    edx
c0014638:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001463b:	68 ef 96 02 c0       	push   0xc00296ef
c0014640:	e8 44 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014645:	59                   	pop    ecx
c0014646:	58                   	pop    eax
c0014647:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001464a:	68 fa 96 02 c0       	push   0xc00296fa
c001464f:	e8 35 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014654:	58                   	pop    eax
c0014655:	5a                   	pop    edx
c0014656:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014659:	68 09 97 02 c0       	push   0xc0029709
c001465e:	e8 26 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014663:	59                   	pop    ecx
c0014664:	58                   	pop    eax
c0014665:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014668:	68 14 97 02 c0       	push   0xc0029714
c001466d:	e8 17 e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014672:	58                   	pop    eax
c0014673:	5a                   	pop    edx
c0014674:	57                   	push   edi
c0014675:	68 1f 97 02 c0       	push   0xc002971f
c001467a:	e8 0a e1 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001467f:	59                   	pop    ecx
c0014680:	58                   	pop    eax
c0014681:	56                   	push   esi
c0014682:	68 2a 97 02 c0       	push   0xc002972a
c0014687:	e8 fd e0 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001468c:	58                   	pop    eax
c001468d:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014692:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014698:	e8 ae c2 ff ff       	call   c001094b <setActiveTerminal(VgaText*)>
c001469d:	58                   	pop    eax
c001469e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00146a1:	5a                   	pop    edx
c00146a2:	c1 e0 05             	shl    eax,0x5
c00146a5:	05 20 b9 02 c0       	add    eax,0xc002b920
c00146aa:	50                   	push   eax
c00146ab:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b6:	e8 af c6 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00146bb:	59                   	pop    ecx
c00146bc:	58                   	pop    eax
c00146bd:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146c2:	68 35 97 02 c0       	push   0xc0029735
c00146c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cd:	e8 98 c6 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00146d2:	58                   	pop    eax
c00146d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146d8:	5a                   	pop    edx
c00146d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146dc:	83 c0 0c             	add    eax,0xc
c00146df:	50                   	push   eax
c00146e0:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146eb:	e8 7a c6 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00146f0:	59                   	pop    ecx
c00146f1:	58                   	pop    eax
c00146f2:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00146f7:	68 3e 97 02 c0       	push   0xc002973e
c00146fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014702:	e8 63 c6 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0014707:	58                   	pop    eax
c0014708:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001470d:	5a                   	pop    edx
c001470e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014711:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014717:	e8 74 c6 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c001471c:	59                   	pop    ecx
c001471d:	58                   	pop    eax
c001471e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014723:	68 46 97 02 c0       	push   0xc0029746
c0014728:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472e:	e8 37 c6 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0014733:	58                   	pop    eax
c0014734:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014739:	5a                   	pop    edx
c001473a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001473d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014743:	e8 48 c6 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0014748:	59                   	pop    ecx
c0014749:	58                   	pop    eax
c001474a:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001474f:	68 4e 97 02 c0       	push   0xc002974e
c0014754:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475a:	e8 0b c6 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001475f:	58                   	pop    eax
c0014760:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014765:	5a                   	pop    edx
c0014766:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014769:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001476f:	e8 1c c6 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0014774:	59                   	pop    ecx
c0014775:	58                   	pop    eax
c0014776:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001477b:	68 56 97 02 c0       	push   0xc0029756
c0014780:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014786:	e8 df c5 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001478b:	58                   	pop    eax
c001478c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014791:	5a                   	pop    edx
c0014792:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014795:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479b:	e8 f0 c5 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00147a0:	59                   	pop    ecx
c00147a1:	58                   	pop    eax
c00147a2:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147a7:	68 5e 97 02 c0       	push   0xc002975e
c00147ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b2:	e8 b3 c5 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00147b7:	58                   	pop    eax
c00147b8:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147bd:	5a                   	pop    edx
c00147be:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c7:	e8 c4 c5 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00147cc:	59                   	pop    ecx
c00147cd:	58                   	pop    eax
c00147ce:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147d3:	68 66 97 02 c0       	push   0xc0029766
c00147d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147de:	e8 87 c5 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00147e3:	58                   	pop    eax
c00147e4:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147e9:	5a                   	pop    edx
c00147ea:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f3:	e8 98 c5 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00147f8:	59                   	pop    ecx
c00147f9:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00147fe:	5b                   	pop    ebx
c00147ff:	68 6e 97 02 c0       	push   0xc002976e
c0014804:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480a:	e8 5b c5 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001480f:	58                   	pop    eax
c0014810:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014815:	5a                   	pop    edx
c0014816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001481a:	52                   	push   edx
c001481b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014821:	e8 6a c5 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0014826:	59                   	pop    ecx
c0014827:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001482c:	5b                   	pop    ebx
c001482d:	68 77 97 02 c0       	push   0xc0029777
c0014832:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014838:	e8 2d c5 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001483d:	58                   	pop    eax
c001483e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014843:	5a                   	pop    edx
c0014844:	57                   	push   edi
c0014845:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484b:	e8 40 c5 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0014850:	59                   	pop    ecx
c0014851:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014856:	5b                   	pop    ebx
c0014857:	68 7f 97 02 c0       	push   0xc002977f
c001485c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014862:	e8 03 c5 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0014867:	5f                   	pop    edi
c0014868:	58                   	pop    eax
c0014869:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001486e:	56                   	push   esi
c001486f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014875:	e8 16 c5 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c001487a:	58                   	pop    eax
c001487b:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014880:	5a                   	pop    edx
c0014881:	68 87 97 02 c0       	push   0xc0029787
c0014886:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488c:	e8 d9 c4 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0014891:	59                   	pop    ecx
c0014892:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014897:	5b                   	pop    ebx
c0014898:	55                   	push   ebp
c0014899:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489f:	e8 ec c4 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00148a4:	5e                   	pop    esi
c00148a5:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148aa:	5f                   	pop    edi
c00148ab:	68 8f 97 02 c0       	push   0xc002978f
c00148b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b6:	e8 af c4 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00148bb:	0f 21 c0             	mov    eax,db0
c00148be:	5d                   	pop    ebp
c00148bf:	5a                   	pop    edx
c00148c0:	50                   	push   eax
c00148c1:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cc:	e8 bf c4 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00148d1:	59                   	pop    ecx
c00148d2:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148d7:	5b                   	pop    ebx
c00148d8:	68 98 97 02 c0       	push   0xc0029798
c00148dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e3:	e8 82 c4 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00148e8:	0f 21 c8             	mov    eax,db1
c00148eb:	5e                   	pop    esi
c00148ec:	5f                   	pop    edi
c00148ed:	50                   	push   eax
c00148ee:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 92 c4 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00148fe:	5d                   	pop    ebp
c00148ff:	58                   	pop    eax
c0014900:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014905:	68 a0 97 02 c0       	push   0xc00297a0
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 55 c4 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0014915:	0f 21 d0             	mov    eax,db2
c0014918:	5a                   	pop    edx
c0014919:	59                   	pop    ecx
c001491a:	50                   	push   eax
c001491b:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014920:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014926:	e8 65 c4 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c001492b:	5b                   	pop    ebx
c001492c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0014931:	5e                   	pop    esi
c0014932:	68 a8 97 02 c0       	push   0xc00297a8
c0014937:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493d:	e8 28 c4 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0014942:	0f 21 d8             	mov    eax,db3
c0014945:	5f                   	pop    edi
c0014946:	5d                   	pop    ebp
c0014947:	50                   	push   eax
c0014948:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001494d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014953:	e8 38 c4 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0014958:	58                   	pop    eax
c0014959:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001495e:	5a                   	pop    edx
c001495f:	68 b0 97 02 c0       	push   0xc00297b0
c0014964:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496a:	e8 fb c3 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001496f:	0f 21 f0             	mov    eax,db6
c0014972:	59                   	pop    ecx
c0014973:	5b                   	pop    ebx
c0014974:	50                   	push   eax
c0014975:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001497a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014980:	e8 0b c4 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0014985:	5e                   	pop    esi
c0014986:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001498b:	5f                   	pop    edi
c001498c:	68 b8 97 02 c0       	push   0xc00297b8
c0014991:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014997:	e8 ce c3 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001499c:	0f 21 f8             	mov    eax,db7
c001499f:	5d                   	pop    ebp
c00149a0:	5a                   	pop    edx
c00149a1:	50                   	push   eax
c00149a2:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00149a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ad:	e8 de c3 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c00149b2:	fa                   	cli    
c00149b3:	f4                   	hlt    
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	eb fe                	jmp    c00149b7 <displayDebugInfo(regs*)+0x403>

c00149b9 <x87EmulHandler(regs*, void*)>:
c00149b9:	53                   	push   ebx
c00149ba:	83 ec 14             	sub    esp,0x14
c00149bd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149c1:	53                   	push   ebx
c00149c2:	e8 ff 9f 00 00       	call   c001e9c6 <Vm::x87Handler(regs*)>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	84 c0                	test   al,al
c00149cc:	74 05                	je     c00149d3 <x87EmulHandler(regs*, void*)+0x1a>
c00149ce:	83 c4 08             	add    esp,0x8
c00149d1:	5b                   	pop    ebx
c00149d2:	c3                   	ret    
c00149d3:	83 ec 0c             	sub    esp,0xc
c00149d6:	68 c0 97 02 c0       	push   0xc00297c0
c00149db:	e8 a9 dd ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00149e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149e3:	e8 cc fb ff ff       	call   c00145b4 <displayDebugInfo(regs*)>

c00149e8 <gpFault(regs*, void*)>:
c00149e8:	53                   	push   ebx
c00149e9:	83 ec 14             	sub    esp,0x14
c00149ec:	c7 05 10 cb 02 c0 43 dd 01 c0 	mov    DWORD PTR ds:0xc002cb10,0xc001dd43
c00149f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149fa:	53                   	push   ebx
c00149fb:	e8 43 93 00 00       	call   c001dd43 <Vm::faultHandler(regs*)>
c0014a00:	83 c4 10             	add    esp,0x10
c0014a03:	84 c0                	test   al,al
c0014a05:	74 05                	je     c0014a0c <gpFault(regs*, void*)+0x24>
c0014a07:	83 c4 08             	add    esp,0x8
c0014a0a:	5b                   	pop    ebx
c0014a0b:	c3                   	ret    
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	68 d6 97 02 c0       	push   0xc00297d6
c0014a14:	e8 70 dd ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a1c:	e8 93 fb ff ff       	call   c00145b4 <displayDebugInfo(regs*)>

c0014a21 <pgFault(regs*, void*)>:
c0014a21:	83 ec 18             	sub    esp,0x18
c0014a24:	68 f1 97 02 c0       	push   0xc00297f1
c0014a29:	e8 5b dd ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014a2e:	58                   	pop    eax
c0014a2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a33:	e8 7c fb ff ff       	call   c00145b4 <displayDebugInfo(regs*)>

c0014a38 <otherISRHandler(regs*, void*)>:
c0014a38:	53                   	push   ebx
c0014a39:	83 ec 0c             	sub    esp,0xc
c0014a3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a40:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a43:	50                   	push   eax
c0014a44:	50                   	push   eax
c0014a45:	68 fe 97 02 c0       	push   0xc00297fe
c0014a4a:	e8 3a dd ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014a4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a52:	e8 5d fb ff ff       	call   c00145b4 <displayDebugInfo(regs*)>

c0014a57 <opcodeFault(regs*, void*)>:
c0014a57:	55                   	push   ebp
c0014a58:	89 e5                	mov    ebp,esp
c0014a5a:	56                   	push   esi
c0014a5b:	53                   	push   ebx
c0014a5c:	83 ec 40             	sub    esp,0x40
c0014a5f:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0014a64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a6a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a70:	84 c0                	test   al,al
c0014a72:	74 24                	je     c0014a98 <opcodeFault(regs*, void*)+0x41>
c0014a74:	83 ec 0c             	sub    esp,0xc
c0014a77:	68 1c 98 02 c0       	push   0xc002981c
c0014a7c:	e8 08 dd ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014a81:	83 c4 10             	add    esp,0x10
c0014a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a87:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a8a:	8d 50 19             	lea    edx,[eax+0x19]
c0014a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a90:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a93:	e9 77 05 00 00       	jmp    c001500f <opcodeFault(regs*, void*)+0x5b8>
c0014a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014aa1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014aa5:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aaf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab7:	3c f0                	cmp    al,0xf0
c0014ab9:	75 17                	jne    c0014ad2 <opcodeFault(regs*, void*)+0x7b>
c0014abb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac4:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014acd:	e9 da 00 00 00       	jmp    c0014bac <opcodeFault(regs*, void*)+0x155>
c0014ad2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad7:	3c f2                	cmp    al,0xf2
c0014ad9:	74 09                	je     c0014ae4 <opcodeFault(regs*, void*)+0x8d>
c0014adb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ade:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae0:	3c f3                	cmp    al,0xf3
c0014ae2:	75 1b                	jne    c0014aff <opcodeFault(regs*, void*)+0xa8>
c0014ae4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ae8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014af1:	8d 50 01             	lea    edx,[eax+0x1]
c0014af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014afa:	e9 ad 00 00 00       	jmp    c0014bac <opcodeFault(regs*, void*)+0x155>
c0014aff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b02:	8a 00                	mov    al,BYTE PTR [eax]
c0014b04:	3c 66                	cmp    al,0x66
c0014b06:	75 1f                	jne    c0014b27 <opcodeFault(regs*, void*)+0xd0>
c0014b08:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b0c:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b10:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b16:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b19:	8d 50 01             	lea    edx,[eax+0x1]
c0014b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b22:	e9 85 00 00 00       	jmp    c0014bac <opcodeFault(regs*, void*)+0x155>
c0014b27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b2c:	3c 67                	cmp    al,0x67
c0014b2e:	75 18                	jne    c0014b48 <opcodeFault(regs*, void*)+0xf1>
c0014b30:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b34:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b43:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b46:	eb 64                	jmp    c0014bac <opcodeFault(regs*, void*)+0x155>
c0014b48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b4d:	3c 2e                	cmp    al,0x2e
c0014b4f:	74 09                	je     c0014b5a <opcodeFault(regs*, void*)+0x103>
c0014b51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b54:	8a 00                	mov    al,BYTE PTR [eax]
c0014b56:	3c 3e                	cmp    al,0x3e
c0014b58:	75 18                	jne    c0014b72 <opcodeFault(regs*, void*)+0x11b>
c0014b5a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b5e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b64:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b67:	8d 50 01             	lea    edx,[eax+0x1]
c0014b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b70:	eb 3a                	jmp    c0014bac <opcodeFault(regs*, void*)+0x155>
c0014b72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b75:	8a 00                	mov    al,BYTE PTR [eax]
c0014b77:	3c 36                	cmp    al,0x36
c0014b79:	74 1b                	je     c0014b96 <opcodeFault(regs*, void*)+0x13f>
c0014b7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b80:	3c 26                	cmp    al,0x26
c0014b82:	74 12                	je     c0014b96 <opcodeFault(regs*, void*)+0x13f>
c0014b84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b87:	8a 00                	mov    al,BYTE PTR [eax]
c0014b89:	3c 64                	cmp    al,0x64
c0014b8b:	74 09                	je     c0014b96 <opcodeFault(regs*, void*)+0x13f>
c0014b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b90:	8a 00                	mov    al,BYTE PTR [eax]
c0014b92:	3c 65                	cmp    al,0x65
c0014b94:	75 16                	jne    c0014bac <opcodeFault(regs*, void*)+0x155>
c0014b96:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014baf:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb1:	3c 0f                	cmp    al,0xf
c0014bb3:	0f 85 ad 00 00 00    	jne    c0014c66 <opcodeFault(regs*, void*)+0x20f>
c0014bb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbc:	40                   	inc    eax
c0014bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bbf:	3c c2                	cmp    al,0xc2
c0014bc1:	74 0e                	je     c0014bd1 <opcodeFault(regs*, void*)+0x17a>
c0014bc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc6:	40                   	inc    eax
c0014bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc9:	3c c3                	cmp    al,0xc3
c0014bcb:	0f 85 95 00 00 00    	jne    c0014c66 <opcodeFault(regs*, void*)+0x20f>
c0014bd1:	83 ec 0c             	sub    esp,0xc
c0014bd4:	68 3f 98 02 c0       	push   0xc002983f
c0014bd9:	e8 ab db ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014be7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bf0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bf3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf6:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf8:	8d 50 fe             	lea    edx,[eax-0x2]
c0014bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfe:	88 10                	mov    BYTE PTR [eax],dl
c0014c00:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c03:	50                   	push   eax
c0014c04:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c07:	50                   	push   eax
c0014c08:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c0b:	50                   	push   eax
c0014c0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c0f:	e8 c0 44 00 00       	call   c00190d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c1d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c20:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c23:	01 d0                	add    eax,edx
c0014c25:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c2e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c31:	48                   	dec    eax
c0014c32:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c38:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c3b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c41:	83 ec 04             	sub    esp,0x4
c0014c44:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c47:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c4a:	50                   	push   eax
c0014c4b:	e8 19 b5 fe ff       	call   c0000169 <voodooXADD>
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c59:	01 c2                	add    edx,eax
c0014c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c61:	e9 a9 03 00 00       	jmp    c001500f <opcodeFault(regs*, void*)+0x5b8>
c0014c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c69:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6b:	3c 0f                	cmp    al,0xf
c0014c6d:	0f 85 8b 01 00 00    	jne    c0014dfe <opcodeFault(regs*, void*)+0x3a7>
c0014c73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c76:	40                   	inc    eax
c0014c77:	8a 00                	mov    al,BYTE PTR [eax]
c0014c79:	3c c7                	cmp    al,0xc7
c0014c7b:	0f 86 7d 01 00 00    	jbe    c0014dfe <opcodeFault(regs*, void*)+0x3a7>
c0014c81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c84:	40                   	inc    eax
c0014c85:	8a 00                	mov    al,BYTE PTR [eax]
c0014c87:	3c cf                	cmp    al,0xcf
c0014c89:	0f 87 6f 01 00 00    	ja     c0014dfe <opcodeFault(regs*, void*)+0x3a7>
c0014c8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c92:	40                   	inc    eax
c0014c93:	8a 00                	mov    al,BYTE PTR [eax]
c0014c95:	83 c0 38             	add    eax,0x38
c0014c98:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c9b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c9f:	75 0b                	jne    c0014cac <opcodeFault(regs*, void*)+0x255>
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ca7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014caa:	eb 75                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014cac:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014cb0:	75 0b                	jne    c0014cbd <opcodeFault(regs*, void*)+0x266>
c0014cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014cb8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cbb:	eb 64                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014cbd:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cc1:	75 0b                	jne    c0014cce <opcodeFault(regs*, void*)+0x277>
c0014cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014cc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ccc:	eb 53                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014cce:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cd2:	75 0b                	jne    c0014cdf <opcodeFault(regs*, void*)+0x288>
c0014cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014cda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cdd:	eb 42                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014cdf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ce3:	75 0b                	jne    c0014cf0 <opcodeFault(regs*, void*)+0x299>
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ceb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cee:	eb 31                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014cf0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cf4:	75 0b                	jne    c0014d01 <opcodeFault(regs*, void*)+0x2aa>
c0014cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cfc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cff:	eb 20                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014d01:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d05:	75 0b                	jne    c0014d12 <opcodeFault(regs*, void*)+0x2bb>
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d10:	eb 0f                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014d12:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d16:	75 09                	jne    c0014d21 <opcodeFault(regs*, void*)+0x2ca>
c0014d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d1e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d21:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d25:	74 10                	je     c0014d37 <opcodeFault(regs*, void*)+0x2e0>
c0014d27:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d2e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d35:	eb 2d                	jmp    c0014d64 <opcodeFault(regs*, void*)+0x30d>
c0014d37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d3a:	c1 e0 18             	shl    eax,0x18
c0014d3d:	89 c2                	mov    edx,eax
c0014d3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d42:	c1 e0 08             	shl    eax,0x8
c0014d45:	25 00 00 ff 00       	and    eax,0xff0000
c0014d4a:	09 c2                	or     edx,eax
c0014d4c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d4f:	c1 e8 08             	shr    eax,0x8
c0014d52:	25 00 ff 00 00       	and    eax,0xff00
c0014d57:	09 c2                	or     edx,eax
c0014d59:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d5c:	c1 e8 18             	shr    eax,0x18
c0014d5f:	09 d0                	or     eax,edx
c0014d61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d64:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d68:	75 0b                	jne    c0014d75 <opcodeFault(regs*, void*)+0x31e>
c0014d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d73:	eb 75                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014d75:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d79:	75 0b                	jne    c0014d86 <opcodeFault(regs*, void*)+0x32f>
c0014d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d81:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d84:	eb 64                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014d86:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d8a:	75 0b                	jne    c0014d97 <opcodeFault(regs*, void*)+0x340>
c0014d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d92:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d95:	eb 53                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014d97:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d9b:	75 0b                	jne    c0014da8 <opcodeFault(regs*, void*)+0x351>
c0014d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014da3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014da6:	eb 42                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014da8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dac:	75 0b                	jne    c0014db9 <opcodeFault(regs*, void*)+0x362>
c0014dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014db4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014db7:	eb 31                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014db9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014dbd:	75 0b                	jne    c0014dca <opcodeFault(regs*, void*)+0x373>
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dc5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014dc8:	eb 20                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014dca:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dce:	75 0b                	jne    c0014ddb <opcodeFault(regs*, void*)+0x384>
c0014dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dd6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014dd9:	eb 0f                	jmp    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014ddb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ddf:	75 09                	jne    c0014dea <opcodeFault(regs*, void*)+0x393>
c0014de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014de7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014dea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ded:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014df0:	8d 50 02             	lea    edx,[eax+0x2]
c0014df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014df9:	e9 11 02 00 00       	jmp    c001500f <opcodeFault(regs*, void*)+0x5b8>
c0014dfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e01:	8a 00                	mov    al,BYTE PTR [eax]
c0014e03:	3c 0f                	cmp    al,0xf
c0014e05:	0f 85 76 01 00 00    	jne    c0014f81 <opcodeFault(regs*, void*)+0x52a>
c0014e0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0e:	40                   	inc    eax
c0014e0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e11:	3c c7                	cmp    al,0xc7
c0014e13:	0f 85 68 01 00 00    	jne    c0014f81 <opcodeFault(regs*, void*)+0x52a>
c0014e19:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e22:	8d 50 01             	lea    edx,[eax+0x1]
c0014e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e28:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e2b:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e2e:	50                   	push   eax
c0014e2f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e32:	50                   	push   eax
c0014e33:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e36:	50                   	push   eax
c0014e37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e3a:	e8 95 42 00 00       	call   c00190d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e45:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e48:	83 f0 01             	xor    eax,0x1
c0014e4b:	84 c0                	test   al,al
c0014e4d:	0f 84 2e 01 00 00    	je     c0014f81 <opcodeFault(regs*, void*)+0x52a>
c0014e53:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e56:	3c 01                	cmp    al,0x1
c0014e58:	0f 85 23 01 00 00    	jne    c0014f81 <opcodeFault(regs*, void*)+0x52a>
c0014e5e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e61:	83 f0 01             	xor    eax,0x1
c0014e64:	84 c0                	test   al,al
c0014e66:	0f 84 15 01 00 00    	je     c0014f81 <opcodeFault(regs*, void*)+0x52a>
c0014e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e72:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e75:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e7c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e7f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e82:	89 c2                	mov    edx,eax
c0014e84:	b8 00 00 00 00       	mov    eax,0x0
c0014e89:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e8c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e92:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e95:	ba 00 00 00 00       	mov    edx,0x0
c0014e9a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e9d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ea6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ea9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014eb0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014eb3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014eb6:	89 c2                	mov    edx,eax
c0014eb8:	b8 00 00 00 00       	mov    eax,0x0
c0014ebd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ec0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ec9:	ba 00 00 00 00       	mov    edx,0x0
c0014ece:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014ed1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014ed4:	e8 59 7e 00 00       	call   c001cd32 <lockScheduler()>
c0014ed9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014edc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014edf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ee1:	89 c1                	mov    ecx,eax
c0014ee3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ee6:	89 cb                	mov    ebx,ecx
c0014ee8:	89 d0                	mov    eax,edx
c0014eea:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014eed:	89 c6                	mov    esi,eax
c0014eef:	89 f0                	mov    eax,esi
c0014ef1:	09 d8                	or     eax,ebx
c0014ef3:	85 c0                	test   eax,eax
c0014ef5:	75 21                	jne    c0014f18 <opcodeFault(regs*, void*)+0x4c1>
c0014ef7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014efa:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014efd:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f00:	89 01                	mov    DWORD PTR [ecx],eax
c0014f02:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f0b:	83 c8 40             	or     eax,0x40
c0014f0e:	89 c2                	mov    edx,eax
c0014f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f13:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f16:	eb 3e                	jmp    c0014f56 <opcodeFault(regs*, void*)+0x4ff>
c0014f18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f20:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f23:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f26:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f2f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f35:	89 d0                	mov    eax,edx
c0014f37:	31 d2                	xor    edx,edx
c0014f39:	89 c3                	mov    ebx,eax
c0014f3b:	89 d6                	mov    esi,edx
c0014f3d:	89 da                	mov    edx,ebx
c0014f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f42:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f4b:	83 e0 bf             	and    eax,0xffffffbf
c0014f4e:	89 c2                	mov    edx,eax
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f56:	e8 d9 7d 00 00       	call   c001cd34 <unlockScheduler()>
c0014f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f61:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f64:	01 c2                	add    edx,eax
c0014f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f6c:	83 ec 0c             	sub    esp,0xc
c0014f6f:	68 4e 98 02 c0       	push   0xc002984e
c0014f74:	e8 10 d8 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014f79:	83 c4 10             	add    esp,0x10
c0014f7c:	e9 8e 00 00 00       	jmp    c001500f <opcodeFault(regs*, void*)+0x5b8>
c0014f81:	83 ec 0c             	sub    esp,0xc
c0014f84:	68 61 98 02 c0       	push   0xc0029861
c0014f89:	e8 fb d7 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f94:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f9d:	c1 e0 04             	shl    eax,0x4
c0014fa0:	01 d0                	add    eax,edx
c0014fa2:	83 c0 03             	add    eax,0x3
c0014fa5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa7:	0f b6 d8             	movzx  ebx,al
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fb6:	c1 e0 04             	shl    eax,0x4
c0014fb9:	01 d0                	add    eax,edx
c0014fbb:	83 c0 02             	add    eax,0x2
c0014fbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc0:	0f b6 c8             	movzx  ecx,al
c0014fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fcf:	c1 e0 04             	shl    eax,0x4
c0014fd2:	01 d0                	add    eax,edx
c0014fd4:	40                   	inc    eax
c0014fd5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd7:	0f b6 d0             	movzx  edx,al
c0014fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fe6:	c1 e0 04             	shl    eax,0x4
c0014fe9:	01 f0                	add    eax,esi
c0014feb:	8a 00                	mov    al,BYTE PTR [eax]
c0014fed:	0f b6 c0             	movzx  eax,al
c0014ff0:	83 ec 0c             	sub    esp,0xc
c0014ff3:	53                   	push   ebx
c0014ff4:	51                   	push   ecx
c0014ff5:	52                   	push   edx
c0014ff6:	50                   	push   eax
c0014ff7:	68 74 98 02 c0       	push   0xc0029874
c0014ffc:	e8 88 d7 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0015001:	83 c4 20             	add    esp,0x20
c0015004:	83 ec 0c             	sub    esp,0xc
c0015007:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001500a:	e8 a5 f5 ff ff       	call   c00145b4 <displayDebugInfo(regs*)>
c001500f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015012:	5b                   	pop    ebx
c0015013:	5e                   	pop    esi
c0015014:	5d                   	pop    ebp
c0015015:	c3                   	ret    

c0015016 <displayProgramFault(char const*)>:
c0015016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001501b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001501e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015024:	85 c0                	test   eax,eax
c0015026:	74 15                	je     c001503d <displayProgramFault(char const*)+0x27>
c0015028:	83 ec 0c             	sub    esp,0xc
c001502b:	6a 04                	push   0x4
c001502d:	6a 0f                	push   0xf
c001502f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015033:	50                   	push   eax
c0015034:	e8 f3 b9 ff ff       	call   c0010a2c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015039:	83 c4 1c             	add    esp,0x1c
c001503c:	c3                   	ret    
c001503d:	c3                   	ret    

c001503e <setupInterruptController()>:
c001503e:	55                   	push   ebp
c001503f:	89 e5                	mov    ebp,esp
c0015041:	53                   	push   ebx
c0015042:	83 ec 24             	sub    esp,0x24
c0015045:	b8 00 00 00 00       	mov    eax,0x0
c001504a:	85 c0                	test   eax,eax
c001504c:	0f 95 c0             	setne  al
c001504f:	84 c0                	test   al,al
c0015051:	74 5b                	je     c00150ae <setupInterruptController()+0x70>
c0015053:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001505a:	83 ec 0c             	sub    esp,0xc
c001505d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015060:	e8 6f a4 ff ff       	call   c000f4d4 <malloc>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	89 c3                	mov    ebx,eax
c001506a:	83 ec 0c             	sub    esp,0xc
c001506d:	53                   	push   ebx
c001506e:	e8 c3 f2 00 00       	call   c0024336 <APIC::APIC()>
c0015073:	83 c4 10             	add    esp,0x10
c0015076:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015079:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001507c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001507f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015081:	83 c0 08             	add    eax,0x8
c0015084:	8b 00                	mov    eax,DWORD PTR [eax]
c0015086:	6a 00                	push   0x0
c0015088:	6a 00                	push   0x0
c001508a:	6a 00                	push   0x0
c001508c:	52                   	push   edx
c001508d:	ff d0                	call   eax
c001508f:	83 c4 10             	add    esp,0x10
c0015092:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0015097:	83 ec 08             	sub    esp,0x8
c001509a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001509d:	50                   	push   eax
c001509e:	e8 d5 ea ff ff       	call   c0013b78 <Device::addChild(Device*)>
c00150a3:	83 c4 10             	add    esp,0x10
c00150a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150a9:	e9 52 03 00 00       	jmp    c0015400 <setupInterruptController()+0x3c2>
c00150ae:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00150b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150b9:	83 e0 01             	and    eax,0x1
c00150bc:	84 c0                	test   al,al
c00150be:	0f 95 c0             	setne  al
c00150c1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150c4:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150d1:	e8 fe a3 ff ff       	call   c000f4d4 <malloc>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	89 c3                	mov    ebx,eax
c00150db:	83 ec 0c             	sub    esp,0xc
c00150de:	53                   	push   ebx
c00150df:	e8 aa f7 00 00       	call   c002488e <PIC::PIC()>
c00150e4:	83 c4 10             	add    esp,0x10
c00150e7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f2:	83 c0 08             	add    eax,0x8
c00150f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f7:	6a 00                	push   0x0
c00150f9:	6a 00                	push   0x0
c00150fb:	6a 00                	push   0x0
c00150fd:	52                   	push   edx
c00150fe:	ff d0                	call   eax
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015107:	74 73                	je     c001517c <setupInterruptController()+0x13e>
c0015109:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001510c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001510f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015111:	83 c0 0c             	add    eax,0xc
c0015114:	8b 00                	mov    eax,DWORD PTR [eax]
c0015116:	6a 00                	push   0x0
c0015118:	6a 00                	push   0x0
c001511a:	6a 00                	push   0x0
c001511c:	52                   	push   edx
c001511d:	ff d0                	call   eax
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015126:	74 15                	je     c001513d <setupInterruptController()+0xff>
c0015128:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001512b:	8b 00                	mov    eax,DWORD PTR [eax]
c001512d:	83 c0 04             	add    eax,0x4
c0015130:	8b 00                	mov    eax,DWORD PTR [eax]
c0015132:	83 ec 0c             	sub    esp,0xc
c0015135:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015138:	ff d0                	call   eax
c001513a:	83 c4 10             	add    esp,0x10
c001513d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015144:	83 ec 0c             	sub    esp,0xc
c0015147:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001514a:	e8 85 a3 ff ff       	call   c000f4d4 <malloc>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	89 c3                	mov    ebx,eax
c0015154:	83 ec 0c             	sub    esp,0xc
c0015157:	53                   	push   ebx
c0015158:	e8 d9 f1 00 00       	call   c0024336 <APIC::APIC()>
c001515d:	83 c4 10             	add    esp,0x10
c0015160:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015163:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015166:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015169:	8b 00                	mov    eax,DWORD PTR [eax]
c001516b:	83 c0 08             	add    eax,0x8
c001516e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015170:	6a 00                	push   0x0
c0015172:	6a 00                	push   0x0
c0015174:	6a 00                	push   0x0
c0015176:	52                   	push   edx
c0015177:	ff d0                	call   eax
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0015181:	83 ec 08             	sub    esp,0x8
c0015184:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015187:	50                   	push   eax
c0015188:	e8 eb e9 ff ff       	call   c0013b78 <Device::addChild(Device*)>
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015193:	8b 00                	mov    eax,DWORD PTR [eax]
c0015195:	83 c0 24             	add    eax,0x24
c0015198:	8b 00                	mov    eax,DWORD PTR [eax]
c001519a:	6a 00                	push   0x0
c001519c:	68 38 4a 01 c0       	push   0xc0014a38
c00151a1:	6a 00                	push   0x0
c00151a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a6:	ff d0                	call   eax
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b0:	83 c0 24             	add    eax,0x24
c00151b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b5:	6a 00                	push   0x0
c00151b7:	68 38 4a 01 c0       	push   0xc0014a38
c00151bc:	6a 01                	push   0x1
c00151be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c1:	ff d0                	call   eax
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cb:	83 c0 24             	add    eax,0x24
c00151ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d0:	6a 00                	push   0x0
c00151d2:	68 11 44 01 c0       	push   0xc0014411
c00151d7:	6a 02                	push   0x2
c00151d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151dc:	ff d0                	call   eax
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e6:	83 c0 24             	add    eax,0x24
c00151e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151eb:	6a 00                	push   0x0
c00151ed:	68 38 4a 01 c0       	push   0xc0014a38
c00151f2:	6a 03                	push   0x3
c00151f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f7:	ff d0                	call   eax
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015201:	83 c0 24             	add    eax,0x24
c0015204:	8b 00                	mov    eax,DWORD PTR [eax]
c0015206:	6a 00                	push   0x0
c0015208:	68 38 4a 01 c0       	push   0xc0014a38
c001520d:	6a 04                	push   0x4
c001520f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015212:	ff d0                	call   eax
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521a:	8b 00                	mov    eax,DWORD PTR [eax]
c001521c:	83 c0 24             	add    eax,0x24
c001521f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015221:	6a 00                	push   0x0
c0015223:	68 38 4a 01 c0       	push   0xc0014a38
c0015228:	6a 05                	push   0x5
c001522a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522d:	ff d0                	call   eax
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015235:	8b 00                	mov    eax,DWORD PTR [eax]
c0015237:	83 c0 24             	add    eax,0x24
c001523a:	8b 00                	mov    eax,DWORD PTR [eax]
c001523c:	6a 00                	push   0x0
c001523e:	68 57 4a 01 c0       	push   0xc0014a57
c0015243:	6a 06                	push   0x6
c0015245:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015248:	ff d0                	call   eax
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015250:	8b 00                	mov    eax,DWORD PTR [eax]
c0015252:	83 c0 24             	add    eax,0x24
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	6a 00                	push   0x0
c0015259:	68 b9 49 01 c0       	push   0xc00149b9
c001525e:	6a 07                	push   0x7
c0015260:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015263:	ff d0                	call   eax
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526b:	8b 00                	mov    eax,DWORD PTR [eax]
c001526d:	83 c0 24             	add    eax,0x24
c0015270:	8b 00                	mov    eax,DWORD PTR [eax]
c0015272:	6a 00                	push   0x0
c0015274:	68 2c 42 01 c0       	push   0xc001422c
c0015279:	6a 08                	push   0x8
c001527b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527e:	ff d0                	call   eax
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015286:	8b 00                	mov    eax,DWORD PTR [eax]
c0015288:	83 c0 24             	add    eax,0x24
c001528b:	8b 00                	mov    eax,DWORD PTR [eax]
c001528d:	6a 00                	push   0x0
c001528f:	68 38 4a 01 c0       	push   0xc0014a38
c0015294:	6a 09                	push   0x9
c0015296:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015299:	ff d0                	call   eax
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a3:	83 c0 24             	add    eax,0x24
c00152a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a8:	6a 00                	push   0x0
c00152aa:	68 38 4a 01 c0       	push   0xc0014a38
c00152af:	6a 0a                	push   0xa
c00152b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b4:	ff d0                	call   eax
c00152b6:	83 c4 10             	add    esp,0x10
c00152b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152be:	83 c0 24             	add    eax,0x24
c00152c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c3:	6a 00                	push   0x0
c00152c5:	68 38 4a 01 c0       	push   0xc0014a38
c00152ca:	6a 0b                	push   0xb
c00152cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cf:	ff d0                	call   eax
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d9:	83 c0 24             	add    eax,0x24
c00152dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152de:	6a 00                	push   0x0
c00152e0:	68 38 4a 01 c0       	push   0xc0014a38
c00152e5:	6a 0c                	push   0xc
c00152e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ea:	ff d0                	call   eax
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f4:	83 c0 24             	add    eax,0x24
c00152f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f9:	6a 00                	push   0x0
c00152fb:	68 e8 49 01 c0       	push   0xc00149e8
c0015300:	6a 0d                	push   0xd
c0015302:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015305:	ff d0                	call   eax
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530d:	8b 00                	mov    eax,DWORD PTR [eax]
c001530f:	83 c0 24             	add    eax,0x24
c0015312:	8b 00                	mov    eax,DWORD PTR [eax]
c0015314:	6a 00                	push   0x0
c0015316:	68 21 4a 01 c0       	push   0xc0014a21
c001531b:	6a 0e                	push   0xe
c001531d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015320:	ff d0                	call   eax
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015328:	8b 00                	mov    eax,DWORD PTR [eax]
c001532a:	83 c0 24             	add    eax,0x24
c001532d:	8b 00                	mov    eax,DWORD PTR [eax]
c001532f:	6a 00                	push   0x0
c0015331:	68 38 4a 01 c0       	push   0xc0014a38
c0015336:	6a 0f                	push   0xf
c0015338:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533b:	ff d0                	call   eax
c001533d:	83 c4 10             	add    esp,0x10
c0015340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015343:	8b 00                	mov    eax,DWORD PTR [eax]
c0015345:	83 c0 24             	add    eax,0x24
c0015348:	8b 00                	mov    eax,DWORD PTR [eax]
c001534a:	6a 00                	push   0x0
c001534c:	68 38 4a 01 c0       	push   0xc0014a38
c0015351:	6a 10                	push   0x10
c0015353:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015356:	ff d0                	call   eax
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015360:	83 c0 24             	add    eax,0x24
c0015363:	8b 00                	mov    eax,DWORD PTR [eax]
c0015365:	6a 00                	push   0x0
c0015367:	68 38 4a 01 c0       	push   0xc0014a38
c001536c:	6a 11                	push   0x11
c001536e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015371:	ff d0                	call   eax
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015379:	8b 00                	mov    eax,DWORD PTR [eax]
c001537b:	83 c0 24             	add    eax,0x24
c001537e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015380:	6a 00                	push   0x0
c0015382:	68 38 4a 01 c0       	push   0xc0014a38
c0015387:	6a 12                	push   0x12
c0015389:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538c:	ff d0                	call   eax
c001538e:	83 c4 10             	add    esp,0x10
c0015391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015394:	8b 00                	mov    eax,DWORD PTR [eax]
c0015396:	83 c0 24             	add    eax,0x24
c0015399:	8b 00                	mov    eax,DWORD PTR [eax]
c001539b:	6a 00                	push   0x0
c001539d:	68 38 4a 01 c0       	push   0xc0014a38
c00153a2:	6a 13                	push   0x13
c00153a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a7:	ff d0                	call   eax
c00153a9:	83 c4 10             	add    esp,0x10
c00153ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153af:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b1:	83 c0 24             	add    eax,0x24
c00153b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b6:	6a 00                	push   0x0
c00153b8:	68 38 4a 01 c0       	push   0xc0014a38
c00153bd:	6a 14                	push   0x14
c00153bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c2:	ff d0                	call   eax
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cc:	83 c0 24             	add    eax,0x24
c00153cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d1:	6a 00                	push   0x0
c00153d3:	68 38 4a 01 c0       	push   0xc0014a38
c00153d8:	6a 1e                	push   0x1e
c00153da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153dd:	ff d0                	call   eax
c00153df:	83 c4 10             	add    esp,0x10
c00153e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e7:	83 c0 24             	add    eax,0x24
c00153ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ec:	6a 00                	push   0x0
c00153ee:	68 c7 b6 01 c0       	push   0xc001b6c7
c00153f3:	6a 60                	push   0x60
c00153f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f8:	ff d0                	call   eax
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015400:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015403:	c9                   	leave  
c0015404:	c3                   	ret    
c0015405:	90                   	nop

c0015406 <InterruptController::convertLegacyIRQNumber(int)>:
c0015406:	55                   	push   ebp
c0015407:	89 e5                	mov    ebp,esp
c0015409:	83 ec 08             	sub    esp,0x8
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	83 ec 0c             	sub    esp,0xc
c0015412:	50                   	push   eax
c0015413:	e8 4c ea ff ff       	call   c0013e64 <Device::getName()>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	8a 00                	mov    al,BYTE PTR [eax]
c001541d:	3c 41                	cmp    al,0x41
c001541f:	0f 94 c0             	sete   al
c0015422:	84 c0                	test   al,al
c0015424:	74 28                	je     c001544e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015426:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001542a:	7f 12                	jg     c001543e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001542c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001542f:	05 c0 bb 02 c0       	add    eax,0xc002bbc0
c0015434:	8a 00                	mov    al,BYTE PTR [eax]
c0015436:	0f b6 c0             	movzx  eax,al
c0015439:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001543c:	eb 10                	jmp    c001544e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001543e:	83 ec 0c             	sub    esp,0xc
c0015441:	68 f4 95 02 c0       	push   0xc00295f4
c0015446:	e8 58 44 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015451:	c9                   	leave  
c0015452:	c3                   	ret    
c0015453:	90                   	nop

c0015454 <startGUI(void*)>:
c0015454:	55                   	push   ebp
c0015455:	89 e5                	mov    ebp,esp
c0015457:	53                   	push   ebx
c0015458:	83 ec 04             	sub    esp,0x4
c001545b:	e8 d4 78 00 00       	call   c001cd34 <unlockScheduler()>
c0015460:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0015466:	83 ec 08             	sub    esp,0x8
c0015469:	6a 01                	push   0x1
c001546b:	68 dc 98 02 c0       	push   0xc00298dc
c0015470:	e8 49 72 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c0015475:	83 c4 10             	add    esp,0x10
c0015478:	83 ec 08             	sub    esp,0x8
c001547b:	53                   	push   ebx
c001547c:	50                   	push   eax
c001547d:	e8 4b 74 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c001548b:	83 ec 08             	sub    esp,0x8
c001548e:	6a 01                	push   0x1
c0015490:	68 f6 98 02 c0       	push   0xc00298f6
c0015495:	e8 24 72 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	83 ec 08             	sub    esp,0x8
c00154a0:	53                   	push   ebx
c00154a1:	50                   	push   eax
c00154a2:	e8 26 74 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c00154a7:	83 c4 10             	add    esp,0x10
c00154aa:	90                   	nop
c00154ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154ae:	c9                   	leave  
c00154af:	c3                   	ret    

c00154b0 <startGUIVESA(void*)>:
c00154b0:	55                   	push   ebp
c00154b1:	89 e5                	mov    ebp,esp
c00154b3:	53                   	push   ebx
c00154b4:	83 ec 04             	sub    esp,0x4
c00154b7:	e8 78 78 00 00       	call   c001cd34 <unlockScheduler()>
c00154bc:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c00154c2:	83 ec 08             	sub    esp,0x8
c00154c5:	6a 01                	push   0x1
c00154c7:	68 10 99 02 c0       	push   0xc0029910
c00154cc:	e8 ed 71 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	83 ec 08             	sub    esp,0x8
c00154d7:	53                   	push   ebx
c00154d8:	50                   	push   eax
c00154d9:	e8 ef 73 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c00154e7:	83 ec 08             	sub    esp,0x8
c00154ea:	6a 01                	push   0x1
c00154ec:	68 f6 98 02 c0       	push   0xc00298f6
c00154f1:	e8 c8 71 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c00154f6:	83 c4 10             	add    esp,0x10
c00154f9:	83 ec 08             	sub    esp,0x8
c00154fc:	53                   	push   ebx
c00154fd:	50                   	push   eax
c00154fe:	e8 ca 73 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	90                   	nop
c0015507:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001550a:	c9                   	leave  
c001550b:	c3                   	ret    

c001550c <sendKeyToTerminal(unsigned char)>:
c001550c:	55                   	push   ebp
c001550d:	89 e5                	mov    ebp,esp
c001550f:	83 ec 28             	sub    esp,0x28
c0015512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015515:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015518:	a1 44 ca 02 c0       	mov    eax,ds:0xc002ca44
c001551d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015521:	83 ec 08             	sub    esp,0x8
c0015524:	52                   	push   edx
c0015525:	50                   	push   eax
c0015526:	e8 3d ba ff ff       	call   c0010f68 <VgaText::receiveKey(unsigned char)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015532:	75 41                	jne    c0015575 <sendKeyToTerminal(unsigned char)+0x69>
c0015534:	e8 20 78 00 00       	call   c001cd59 <lockStuff()>
c0015539:	a1 20 cb 02 c0       	mov    eax,ds:0xc002cb20
c001553e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015541:	c7 05 20 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb20,0x0
c001554b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001554f:	74 1f                	je     c0015570 <sendKeyToTerminal(unsigned char)+0x64>
c0015551:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015554:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015557:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001555a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001555d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015566:	e8 df 7d 00 00       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001556b:	83 c4 10             	add    esp,0x10
c001556e:	eb db                	jmp    c001554b <sendKeyToTerminal(unsigned char)+0x3f>
c0015570:	e8 7e 7b 00 00       	call   c001d0f3 <unlockStuff()>
c0015575:	90                   	nop
c0015576:	c9                   	leave  
c0015577:	c3                   	ret    

c0015578 <sendKeyboardToken(KeyboardToken)>:
c0015578:	55                   	push   ebp
c0015579:	89 e5                	mov    ebp,esp
c001557b:	83 ec 18             	sub    esp,0x18
c001557e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	0f b7 c0             	movzx  eax,ax
c0015587:	83 f2 01             	xor    edx,0x1
c001558a:	88 90 40 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34c0],dl
c0015590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015593:	66 3d 03 02          	cmp    ax,0x203
c0015597:	75 07                	jne    c00155a0 <sendKeyboardToken(KeyboardToken)+0x28>
c0015599:	a0 40 cc 02 c0       	mov    al,ds:0xc002cc40
c001559e:	84 c0                	test   al,al
c00155a0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155a4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155a7:	a0 48 cf 02 c0       	mov    al,ds:0xc002cf48
c00155ac:	38 c2                	cmp    dl,al
c00155ae:	74 1c                	je     c00155cc <sendKeyboardToken(KeyboardToken)+0x54>
c00155b0:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155b3:	a2 48 cf 02 c0       	mov    ds:0xc002cf48,al
c00155b8:	a0 48 cf 02 c0       	mov    al,ds:0xc002cf48
c00155bd:	0f b6 c0             	movzx  eax,al
c00155c0:	83 ec 0c             	sub    esp,0xc
c00155c3:	50                   	push   eax
c00155c4:	e8 57 ab ff ff       	call   c0010120 <setTerminalScrollLock(bool)>
c00155c9:	83 c4 10             	add    esp,0x10
c00155cc:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155cf:	84 c0                	test   al,al
c00155d1:	0f 84 ae 00 00 00    	je     c0015685 <sendKeyboardToken(KeyboardToken)+0x10d>
c00155d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155da:	66 3d 10 03          	cmp    ax,0x310
c00155de:	75 06                	jne    c00155e6 <sendKeyboardToken(KeyboardToken)+0x6e>
c00155e0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e9:	66 3d 11 03          	cmp    ax,0x311
c00155ed:	75 06                	jne    c00155f5 <sendKeyboardToken(KeyboardToken)+0x7d>
c00155ef:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	66 3d 12 03          	cmp    ax,0x312
c00155fc:	75 06                	jne    c0015604 <sendKeyboardToken(KeyboardToken)+0x8c>
c00155fe:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015607:	66 3d 13 03          	cmp    ax,0x313
c001560b:	75 06                	jne    c0015613 <sendKeyboardToken(KeyboardToken)+0x9b>
c001560d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015616:	66 3d 14 03          	cmp    ax,0x314
c001561a:	75 06                	jne    c0015622 <sendKeyboardToken(KeyboardToken)+0xaa>
c001561c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015625:	66 3d 15 03          	cmp    ax,0x315
c0015629:	75 06                	jne    c0015631 <sendKeyboardToken(KeyboardToken)+0xb9>
c001562b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015634:	66 3d 16 03          	cmp    ax,0x316
c0015638:	75 06                	jne    c0015640 <sendKeyboardToken(KeyboardToken)+0xc8>
c001563a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015643:	66 3d 17 03          	cmp    ax,0x317
c0015647:	75 06                	jne    c001564f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015649:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001564f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015652:	66 3d 18 03          	cmp    ax,0x318
c0015656:	75 06                	jne    c001565e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015658:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001565e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015661:	66 3d 19 03          	cmp    ax,0x319
c0015665:	75 06                	jne    c001566d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015667:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001566d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015670:	66 3d 1a 03          	cmp    ax,0x31a
c0015674:	0f 85 c9 00 00 00    	jne    c0015743 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001567a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015680:	e9 be 00 00 00       	jmp    c0015743 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015688:	66 3d 10 03          	cmp    ax,0x310
c001568c:	75 0a                	jne    c0015698 <sendKeyboardToken(KeyboardToken)+0x120>
c001568e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015694:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569b:	66 3d 11 03          	cmp    ax,0x311
c001569f:	75 0a                	jne    c00156ab <sendKeyboardToken(KeyboardToken)+0x133>
c00156a1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ae:	66 3d 12 03          	cmp    ax,0x312
c00156b2:	75 0a                	jne    c00156be <sendKeyboardToken(KeyboardToken)+0x146>
c00156b4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	66 3d 13 03          	cmp    ax,0x313
c00156c5:	75 0a                	jne    c00156d1 <sendKeyboardToken(KeyboardToken)+0x159>
c00156c7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d4:	66 3d 14 03          	cmp    ax,0x314
c00156d8:	75 0a                	jne    c00156e4 <sendKeyboardToken(KeyboardToken)+0x16c>
c00156da:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e7:	66 3d 15 03          	cmp    ax,0x315
c00156eb:	75 0a                	jne    c00156f7 <sendKeyboardToken(KeyboardToken)+0x17f>
c00156ed:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fa:	66 3d 16 03          	cmp    ax,0x316
c00156fe:	75 0a                	jne    c001570a <sendKeyboardToken(KeyboardToken)+0x192>
c0015700:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015706:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001570a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570d:	66 3d 17 03          	cmp    ax,0x317
c0015711:	75 0a                	jne    c001571d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015713:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015719:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001571d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015720:	66 3d 18 03          	cmp    ax,0x318
c0015724:	75 0a                	jne    c0015730 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015726:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001572c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015733:	66 3d 19 03          	cmp    ax,0x319
c0015737:	75 0a                	jne    c0015743 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015739:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001573f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015746:	66 3d 00 02          	cmp    ax,0x200
c001574a:	75 2c                	jne    c0015778 <sendKeyboardToken(KeyboardToken)+0x200>
c001574c:	a0 40 cf 02 c0       	mov    al,ds:0xc002cf40
c0015751:	83 f0 01             	xor    eax,0x1
c0015754:	84 c0                	test   al,al
c0015756:	74 20                	je     c0015778 <sendKeyboardToken(KeyboardToken)+0x200>
c0015758:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001575d:	6a 01                	push   0x1
c001575f:	6a 00                	push   0x0
c0015761:	68 54 54 01 c0       	push   0xc0015454
c0015766:	50                   	push   eax
c0015767:	e8 f8 76 00 00       	call   c001ce64 <Process::createThread(void (*)(void*), void*, int)>
c001576c:	83 c4 10             	add    esp,0x10
c001576f:	c6 05 40 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf40,0x1
c0015776:	eb 33                	jmp    c00157ab <sendKeyboardToken(KeyboardToken)+0x233>
c0015778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577b:	66 3d 01 02          	cmp    ax,0x201
c001577f:	75 2a                	jne    c00157ab <sendKeyboardToken(KeyboardToken)+0x233>
c0015781:	a0 40 cf 02 c0       	mov    al,ds:0xc002cf40
c0015786:	83 f0 01             	xor    eax,0x1
c0015789:	84 c0                	test   al,al
c001578b:	74 1e                	je     c00157ab <sendKeyboardToken(KeyboardToken)+0x233>
c001578d:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0015792:	6a 01                	push   0x1
c0015794:	6a 00                	push   0x0
c0015796:	68 b0 54 01 c0       	push   0xc00154b0
c001579b:	50                   	push   eax
c001579c:	e8 c3 76 00 00       	call   c001ce64 <Process::createThread(void (*)(void*), void*, int)>
c00157a1:	83 c4 10             	add    esp,0x10
c00157a4:	c6 05 40 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf40,0x1
c00157ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ae:	66 3d 1d 03          	cmp    ax,0x31d
c00157b2:	75 06                	jne    c00157ba <sendKeyboardToken(KeyboardToken)+0x242>
c00157b4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bd:	66 3d 1c 03          	cmp    ax,0x31c
c00157c1:	75 06                	jne    c00157c9 <sendKeyboardToken(KeyboardToken)+0x251>
c00157c3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cc:	66 3d 1b 03          	cmp    ax,0x31b
c00157d0:	75 06                	jne    c00157d8 <sendKeyboardToken(KeyboardToken)+0x260>
c00157d2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157db:	66 3d 1e 03          	cmp    ax,0x31e
c00157df:	75 06                	jne    c00157e7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00157e1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ea:	66 3d 1f 03          	cmp    ax,0x31f
c00157ee:	75 06                	jne    c00157f6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00157f0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	66 3d 1a 03          	cmp    ax,0x31a
c00157fd:	75 06                	jne    c0015805 <sendKeyboardToken(KeyboardToken)+0x28d>
c00157ff:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015805:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015809:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001580c:	83 f0 01             	xor    eax,0x1
c001580f:	84 c0                	test   al,al
c0015811:	74 77                	je     c001588a <sendKeyboardToken(KeyboardToken)+0x312>
c0015813:	a0 41 cc 02 c0       	mov    al,ds:0xc002cc41
c0015818:	84 c0                	test   al,al
c001581a:	74 41                	je     c001585d <sendKeyboardToken(KeyboardToken)+0x2e5>
c001581c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015820:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015824:	74 2b                	je     c0015851 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015826:	8b 15 44 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf44
c001582c:	89 d0                	mov    eax,edx
c001582e:	c1 e0 02             	shl    eax,0x2
c0015831:	01 d0                	add    eax,edx
c0015833:	01 c0                	add    eax,eax
c0015835:	a3 44 cf 02 c0       	mov    ds:0xc002cf44,eax
c001583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583d:	0f b7 c0             	movzx  eax,ax
c0015840:	8d 50 d0             	lea    edx,[eax-0x30]
c0015843:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c0015848:	01 d0                	add    eax,edx
c001584a:	a3 44 cf 02 c0       	mov    ds:0xc002cf44,eax
c001584f:	eb 6d                	jmp    c00158be <sendKeyboardToken(KeyboardToken)+0x346>
c0015851:	c7 05 44 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf44,0x0
c001585b:	eb 61                	jmp    c00158be <sendKeyboardToken(KeyboardToken)+0x346>
c001585d:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c0015862:	85 c0                	test   eax,eax
c0015864:	74 18                	je     c001587e <sendKeyboardToken(KeyboardToken)+0x306>
c0015866:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c001586b:	0f b6 c0             	movzx  eax,al
c001586e:	83 ec 0c             	sub    esp,0xc
c0015871:	50                   	push   eax
c0015872:	e8 95 fc ff ff       	call   c001550c <sendKeyToTerminal(unsigned char)>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001587e:	c7 05 44 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf44,0x0
c0015888:	eb 34                	jmp    c00158be <sendKeyboardToken(KeyboardToken)+0x346>
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	66 3d 01 01          	cmp    ax,0x101
c0015891:	75 2b                	jne    c00158be <sendKeyboardToken(KeyboardToken)+0x346>
c0015893:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c0015898:	85 c0                	test   eax,eax
c001589a:	74 18                	je     c00158b4 <sendKeyboardToken(KeyboardToken)+0x33c>
c001589c:	a1 44 cf 02 c0       	mov    eax,ds:0xc002cf44
c00158a1:	0f b6 c0             	movzx  eax,al
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	50                   	push   eax
c00158a8:	e8 5f fc ff ff       	call   c001550c <sendKeyToTerminal(unsigned char)>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158b4:	c7 05 44 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf44,0x0
c00158be:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158c1:	83 f0 01             	xor    eax,0x1
c00158c4:	84 c0                	test   al,al
c00158c6:	74 4c                	je     c0015914 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158c8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158cb:	83 f0 01             	xor    eax,0x1
c00158ce:	84 c0                	test   al,al
c00158d0:	74 42                	je     c0015914 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158d2:	a0 40 cc 02 c0       	mov    al,ds:0xc002cc40
c00158d7:	83 f0 01             	xor    eax,0x1
c00158da:	84 c0                	test   al,al
c00158dc:	74 36                	je     c0015914 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	66 83 f8 1f          	cmp    ax,0x1f
c00158e5:	76 09                	jbe    c00158f0 <sendKeyboardToken(KeyboardToken)+0x378>
c00158e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ea:	66 83 f8 7e          	cmp    ax,0x7e
c00158ee:	76 12                	jbe    c0015902 <sendKeyboardToken(KeyboardToken)+0x38a>
c00158f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f3:	66 83 f8 0a          	cmp    ax,0xa
c00158f7:	74 09                	je     c0015902 <sendKeyboardToken(KeyboardToken)+0x38a>
c00158f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fc:	66 83 f8 08          	cmp    ax,0x8
c0015900:	75 12                	jne    c0015914 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015905:	0f b6 c0             	movzx  eax,al
c0015908:	83 ec 0c             	sub    esp,0xc
c001590b:	50                   	push   eax
c001590c:	e8 fb fb ff ff       	call   c001550c <sendKeyToTerminal(unsigned char)>
c0015911:	83 c4 10             	add    esp,0x10
c0015914:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015917:	83 f0 01             	xor    eax,0x1
c001591a:	84 c0                	test   al,al
c001591c:	74 4f                	je     c001596d <sendKeyboardToken(KeyboardToken)+0x3f5>
c001591e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015921:	83 f0 01             	xor    eax,0x1
c0015924:	84 c0                	test   al,al
c0015926:	74 45                	je     c001596d <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015928:	a0 40 cc 02 c0       	mov    al,ds:0xc002cc40
c001592d:	84 c0                	test   al,al
c001592f:	74 3c                	je     c001596d <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015934:	66 83 f8 3f          	cmp    ax,0x3f
c0015938:	76 33                	jbe    c001596d <sendKeyboardToken(KeyboardToken)+0x3f5>
c001593a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593d:	66 83 f8 7f          	cmp    ax,0x7f
c0015941:	77 2a                	ja     c001596d <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015946:	88 c2                	mov    dl,al
c0015948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594b:	66 83 f8 5f          	cmp    ax,0x5f
c001594f:	76 04                	jbe    c0015955 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015951:	b0 20                	mov    al,0x20
c0015953:	eb 02                	jmp    c0015957 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015955:	b0 00                	mov    al,0x0
c0015957:	29 c2                	sub    edx,eax
c0015959:	88 d0                	mov    al,dl
c001595b:	83 e8 40             	sub    eax,0x40
c001595e:	0f b6 c0             	movzx  eax,al
c0015961:	83 ec 0c             	sub    esp,0xc
c0015964:	50                   	push   eax
c0015965:	e8 a2 fb ff ff       	call   c001550c <sendKeyToTerminal(unsigned char)>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015970:	66 3d 00 03          	cmp    ax,0x300
c0015974:	75 0f                	jne    c0015985 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015976:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015979:	83 f0 01             	xor    eax,0x1
c001597c:	84 c0                	test   al,al
c001597e:	74 05                	je     c0015985 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015980:	e8 78 b0 ff ff       	call   c00109fd <doTerminalCycle()>
c0015985:	90                   	nop
c0015986:	c9                   	leave  
c0015987:	c3                   	ret    

c0015988 <clearInternalKeybuffer(VgaText*)>:
c0015988:	55                   	push   ebp
c0015989:	89 e5                	mov    ebp,esp
c001598b:	83 ec 08             	sub    esp,0x8
c001598e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015991:	05 34 11 00 00       	add    eax,0x1134
c0015996:	83 ec 0c             	sub    esp,0xc
c0015999:	50                   	push   eax
c001599a:	e8 09 ad fe ff       	call   c00006a8 <strlen>
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159a5:	81 c2 34 11 00 00    	add    edx,0x1134
c00159ab:	83 ec 04             	sub    esp,0x4
c00159ae:	50                   	push   eax
c00159af:	6a 00                	push   0x0
c00159b1:	52                   	push   edx
c00159b2:	e8 d4 ac fe ff       	call   c000068b <memset>
c00159b7:	83 c4 10             	add    esp,0x10
c00159ba:	90                   	nop
c00159bb:	c9                   	leave  
c00159bc:	c3                   	ret    

c00159bd <readKeyboard(VgaText*, char*, unsigned long)>:
c00159bd:	55                   	push   ebp
c00159be:	89 e5                	mov    ebp,esp
c00159c0:	83 ec 18             	sub    esp,0x18
c00159c3:	fb                   	sti    
c00159c4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159cb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159cf:	0f 84 8a 00 00 00    	je     c0015a5f <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00159d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d8:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159de:	84 c0                	test   al,al
c00159e0:	75 11                	jne    c00159f3 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00159e2:	e8 4b 73 00 00       	call   c001cd32 <lockScheduler()>
c00159e7:	e8 82 76 00 00       	call   c001d06e <schedule()>
c00159ec:	e8 43 73 00 00       	call   c001cd34 <unlockScheduler()>
c00159f1:	eb e2                	jmp    c00159d5 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00159f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159f6:	8d 50 01             	lea    edx,[eax+0x1]
c00159f9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00159fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159ff:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015a05:	88 10                	mov    BYTE PTR [eax],dl
c0015a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a10:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a16:	05 34 11 00 00       	add    eax,0x1134
c0015a1b:	83 ec 0c             	sub    esp,0xc
c0015a1e:	50                   	push   eax
c0015a1f:	e8 84 ac fe ff       	call   c00006a8 <strlen>
c0015a24:	83 c4 10             	add    esp,0x10
c0015a27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a2a:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a30:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a36:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a3c:	83 ec 04             	sub    esp,0x4
c0015a3f:	50                   	push   eax
c0015a40:	51                   	push   ecx
c0015a41:	52                   	push   edx
c0015a42:	e8 d6 ab fe ff       	call   c000061d <memmove>
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a4d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a50:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a54:	0f 85 71 ff ff ff    	jne    c00159cb <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5d:	eb 03                	jmp    c0015a62 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a62:	c9                   	leave  
c0015a63:	c3                   	ret    

c0015a64 <Keyboard::Keyboard(char const*)>:
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a6b:	83 ec 08             	sub    esp,0x8
c0015a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a72:	50                   	push   eax
c0015a73:	e8 f0 e2 ff ff       	call   c0013d68 <Device::Device(char const*)>
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	ba 34 99 02 c0       	mov    edx,0xc0029934
c0015a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a84:	89 10                	mov    DWORD PTR [eax],edx
c0015a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a8a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015a94:	c6 05 24 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb24,0x1
c0015a9b:	90                   	nop
c0015a9c:	83 c4 0c             	add    esp,0xc
c0015a9f:	c3                   	ret    

c0015aa0 <Keyboard::~Keyboard()>:
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	ba 34 99 02 c0       	mov    edx,0xc0029934
c0015aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aac:	89 10                	mov    DWORD PTR [eax],edx
c0015aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab2:	83 ec 0c             	sub    esp,0xc
c0015ab5:	50                   	push   eax
c0015ab6:	e8 8f df ff ff       	call   c0013a4a <Device::~Device()>
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	90                   	nop
c0015abf:	83 c4 0c             	add    esp,0xc
c0015ac2:	c3                   	ret    
c0015ac3:	90                   	nop

c0015ac4 <Keyboard::~Keyboard()>:
c0015ac4:	83 ec 0c             	sub    esp,0xc
c0015ac7:	83 ec 0c             	sub    esp,0xc
c0015aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ace:	e8 cd ff ff ff       	call   c0015aa0 <Keyboard::~Keyboard()>
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	83 ec 08             	sub    esp,0x8
c0015ad9:	68 5c 01 00 00       	push   0x15c
c0015ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ae2:	e8 c2 cb ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0015ae7:	83 c4 10             	add    esp,0x10
c0015aea:	83 c4 0c             	add    esp,0xc
c0015aed:	c3                   	ret    

c0015aee <LogicalDisk::close(int, int, void*)>:
c0015aee:	83 c8 ff             	or     eax,0xffffffff
c0015af1:	c3                   	ret    

c0015af2 <LogicalDisk::~LogicalDisk()>:
c0015af2:	83 ec 0c             	sub    esp,0xc
c0015af5:	ba e4 99 02 c0       	mov    edx,0xc00299e4
c0015afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015afe:	89 10                	mov    DWORD PTR [eax],edx
c0015b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	50                   	push   eax
c0015b08:	e8 3d df ff ff       	call   c0013a4a <Device::~Device()>
c0015b0d:	83 c4 10             	add    esp,0x10
c0015b10:	90                   	nop
c0015b11:	83 c4 0c             	add    esp,0xc
c0015b14:	c3                   	ret    
c0015b15:	90                   	nop

c0015b16 <LogicalDisk::~LogicalDisk()>:
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	83 ec 0c             	sub    esp,0xc
c0015b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b20:	e8 cd ff ff ff       	call   c0015af2 <LogicalDisk::~LogicalDisk()>
c0015b25:	83 c4 10             	add    esp,0x10
c0015b28:	83 ec 08             	sub    esp,0x8
c0015b2b:	68 74 01 00 00       	push   0x174
c0015b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b34:	e8 70 cb ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0015b39:	83 c4 10             	add    esp,0x10
c0015b3c:	83 c4 0c             	add    esp,0xc
c0015b3f:	c3                   	ret    

c0015b40 <LogicalDisk::open(int, int, void*)>:
c0015b40:	83 ec 18             	sub    esp,0x18
c0015b43:	68 60 99 02 c0       	push   0xc0029960
c0015b48:	e8 56 3d 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0015b4d:	83 c8 ff             	or     eax,0xffffffff
c0015b50:	83 c4 1c             	add    esp,0x1c
c0015b53:	c3                   	ret    

c0015b54 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b54:	53                   	push   ebx
c0015b55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b61:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b67:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b6d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015b73:	77 10                	ja     c0015b85 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015b75:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015b7b:	89 d3                	mov    ebx,edx
c0015b7d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015b83:	72 05                	jb     c0015b8a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015b85:	83 c8 ff             	or     eax,0xffffffff
c0015b88:	89 c2                	mov    edx,eax
c0015b8a:	5b                   	pop    ebx
c0015b8b:	c3                   	ret    

c0015b8c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015b8c:	56                   	push   esi
c0015b8d:	83 c8 ff             	or     eax,0xffffffff
c0015b90:	53                   	push   ebx
c0015b91:	89 c2                	mov    edx,eax
c0015b93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015b97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015b9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b9f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ba5:	77 27                	ja     c0015bce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ba7:	89 d8                	mov    eax,ebx
c0015ba9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015baf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015bb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bba:	89 c2                	mov    edx,eax
c0015bbc:	73 10                	jae    c0015bce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bbe:	89 c8                	mov    eax,ecx
c0015bc0:	89 da                	mov    edx,ebx
c0015bc2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bc8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bce:	5b                   	pop    ebx
c0015bcf:	5e                   	pop    esi
c0015bd0:	c3                   	ret    
c0015bd1:	90                   	nop

c0015bd2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015bd2:	83 ec 1c             	sub    esp,0x1c
c0015bd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015bdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015be1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015be5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015bf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf8:	83 ec 08             	sub    esp,0x8
c0015bfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bff:	50                   	push   eax
c0015c00:	e8 63 e1 ff ff       	call   c0013d68 <Device::Device(char const*)>
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	ba e4 99 02 c0       	mov    edx,0xc00299e4
c0015c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c11:	89 10                	mov    DWORD PTR [eax],edx
c0015c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c17:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c22:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c37:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c43:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c49:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c5a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c60:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c6e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c78:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c82:	90                   	nop
c0015c83:	83 c4 1c             	add    esp,0x1c
c0015c86:	c3                   	ret    
c0015c87:	90                   	nop

c0015c88 <LogicalDisk::assignDriveLetter()>:
c0015c88:	55                   	push   ebp
c0015c89:	57                   	push   edi
c0015c8a:	56                   	push   esi
c0015c8b:	53                   	push   ebx
c0015c8c:	83 ec 14             	sub    esp,0x14
c0015c8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c93:	8b 3d 60 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf60
c0015c99:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015c9f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ca3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ca9:	8b 3d 64 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf64
c0015caf:	3c 01                	cmp    al,0x1
c0015cb1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015cb5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015cb9:	19 c0                	sbb    eax,eax
c0015cbb:	83 e0 02             	and    eax,0x2
c0015cbe:	83 c0 41             	add    eax,0x41
c0015cc1:	0f be e8             	movsx  ebp,al
c0015cc4:	3c 43                	cmp    al,0x43
c0015cc6:	75 10                	jne    c0015cd8 <LogicalDisk::assignDriveLetter()+0x50>
c0015cc8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ccf:	75 5d                	jne    c0015d2e <LogicalDisk::assignDriveLetter()+0xa6>
c0015cd1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015cd6:	75 56                	jne    c0015d2e <LogicalDisk::assignDriveLetter()+0xa6>
c0015cd8:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015cdb:	ba 01 00 00 00       	mov    edx,0x1
c0015ce0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015ce4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ce8:	d3 e2                	shl    edx,cl
c0015cea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cee:	89 d7                	mov    edi,edx
c0015cf0:	89 d6                	mov    esi,edx
c0015cf2:	c1 ff 1f             	sar    edi,0x1f
c0015cf5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015cf9:	21 f9                	and    ecx,edi
c0015cfb:	09 d1                	or     ecx,edx
c0015cfd:	75 2f                	jne    c0015d2e <LogicalDisk::assignDriveLetter()+0xa6>
c0015cff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d07:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d0d:	09 f2                	or     edx,esi
c0015d0f:	89 15 60 cf 02 c0    	mov    DWORD PTR ds:0xc002cf60,edx
c0015d15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d19:	09 fa                	or     edx,edi
c0015d1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d1f:	89 15 64 cf 02 c0    	mov    DWORD PTR ds:0xc002cf64,edx
c0015d25:	89 1c bd 80 cf 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3080],ebx
c0015d2c:	eb 08                	jmp    c0015d36 <LogicalDisk::assignDriveLetter()+0xae>
c0015d2e:	45                   	inc    ebp
c0015d2f:	40                   	inc    eax
c0015d30:	3c 5b                	cmp    al,0x5b
c0015d32:	75 90                	jne    c0015cc4 <LogicalDisk::assignDriveLetter()+0x3c>
c0015d34:	31 c0                	xor    eax,eax
c0015d36:	83 c4 14             	add    esp,0x14
c0015d39:	5b                   	pop    ebx
c0015d3a:	5e                   	pop    esi
c0015d3b:	5f                   	pop    edi
c0015d3c:	5d                   	pop    ebp
c0015d3d:	c3                   	ret    

c0015d3e <LogicalDisk::mount()>:
c0015d3e:	56                   	push   esi
c0015d3f:	53                   	push   ebx
c0015d40:	51                   	push   ecx
c0015d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d45:	8b 1d e8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cae8
c0015d4b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d55:	85 db                	test   ebx,ebx
c0015d57:	74 50                	je     c0015da9 <LogicalDisk::mount()+0x6b>
c0015d59:	e8 bf 6f 00 00       	call   c001cd1d <getIRQNestingLevel()>
c0015d5e:	52                   	push   edx
c0015d5f:	52                   	push   edx
c0015d60:	50                   	push   eax
c0015d61:	68 84 99 02 c0       	push   0xc0029984
c0015d66:	e8 1e ca ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0015d6b:	83 c4 0c             	add    esp,0xc
c0015d6e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d75:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d77:	83 e8 41             	sub    eax,0x41
c0015d7a:	50                   	push   eax
c0015d7b:	56                   	push   esi
c0015d7c:	53                   	push   ebx
c0015d7d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d80:	83 c4 10             	add    esp,0x10
c0015d83:	84 c0                	test   al,al
c0015d85:	74 08                	je     c0015d8f <LogicalDisk::mount()+0x51>
c0015d87:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015d8d:	eb 1c                	jmp    c0015dab <LogicalDisk::mount()+0x6d>
c0015d8f:	e8 89 6f 00 00       	call   c001cd1d <getIRQNestingLevel()>
c0015d94:	51                   	push   ecx
c0015d95:	51                   	push   ecx
c0015d96:	50                   	push   eax
c0015d97:	68 9f 99 02 c0       	push   0xc002999f
c0015d9c:	e8 e8 c9 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0015da1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	eb ac                	jmp    c0015d55 <LogicalDisk::mount()+0x17>
c0015da9:	31 c0                	xor    eax,eax
c0015dab:	5a                   	pop    edx
c0015dac:	5b                   	pop    ebx
c0015dad:	5e                   	pop    esi
c0015dae:	c3                   	ret    
c0015daf:	90                   	nop

c0015db0 <LogicalDisk::unmount()>:
c0015db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dbe:	c3                   	ret    
c0015dbf:	90                   	nop

c0015dc0 <LogicalDisk::unassignDriveLetter()>:
c0015dc0:	57                   	push   edi
c0015dc1:	56                   	push   esi
c0015dc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dc6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015dcd:	84 c9                	test   cl,cl
c0015dcf:	75 0f                	jne    c0015de0 <LogicalDisk::unassignDriveLetter()+0x20>
c0015dd1:	c7 44 24 0c ba 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc00299ba
c0015dd9:	5e                   	pop    esi
c0015dda:	5f                   	pop    edi
c0015ddb:	e9 c3 3a 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>
c0015de0:	83 e9 41             	sub    ecx,0x41
c0015de3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015dea:	b8 01 00 00 00       	mov    eax,0x1
c0015def:	c7 04 8d 80 cf 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3080],0x0
c0015dfa:	d3 e0                	shl    eax,cl
c0015dfc:	89 c7                	mov    edi,eax
c0015dfe:	f7 d0                	not    eax
c0015e00:	c1 ff 1f             	sar    edi,0x1f
c0015e03:	21 05 60 cf 02 c0    	and    DWORD PTR ds:0xc002cf60,eax
c0015e09:	89 fe                	mov    esi,edi
c0015e0b:	f7 d6                	not    esi
c0015e0d:	21 35 64 cf 02 c0    	and    DWORD PTR ds:0xc002cf64,esi
c0015e13:	5e                   	pop    esi
c0015e14:	5f                   	pop    edi
c0015e15:	c3                   	ret    

c0015e16 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e16:	57                   	push   edi
c0015e17:	56                   	push   esi
c0015e18:	53                   	push   ebx
c0015e19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e21:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e2f:	77 41                	ja     c0015e72 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e31:	99                   	cdq    
c0015e32:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e38:	01 c8                	add    eax,ecx
c0015e3a:	11 da                	adc    edx,ebx
c0015e3c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e42:	19 d7                	sbb    edi,edx
c0015e44:	72 33                	jb     c0015e79 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e46:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e4c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e52:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e56:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e5a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e6a:	5b                   	pop    ebx
c0015e6b:	5e                   	pop    esi
c0015e6c:	5f                   	pop    edi
c0015e6d:	e9 f8 09 00 00       	jmp    c001686a <VCache::read(unsigned long long, int, void*)>
c0015e72:	b8 05 00 00 00       	mov    eax,0x5
c0015e77:	eb 05                	jmp    c0015e7e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e79:	b8 07 00 00 00       	mov    eax,0x7
c0015e7e:	5b                   	pop    ebx
c0015e7f:	5e                   	pop    esi
c0015e80:	5f                   	pop    edi
c0015e81:	c3                   	ret    

c0015e82 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e82:	57                   	push   edi
c0015e83:	56                   	push   esi
c0015e84:	53                   	push   ebx
c0015e85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e9b:	77 41                	ja     c0015ede <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015e9d:	99                   	cdq    
c0015e9e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ea4:	01 c8                	add    eax,ecx
c0015ea6:	11 da                	adc    edx,ebx
c0015ea8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015eae:	19 d7                	sbb    edi,edx
c0015eb0:	72 33                	jb     c0015ee5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015eb2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015eb8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ebe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ec2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ec6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ecc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ed6:	5b                   	pop    ebx
c0015ed7:	5e                   	pop    esi
c0015ed8:	5f                   	pop    edi
c0015ed9:	e9 a8 08 00 00       	jmp    c0016786 <VCache::write(unsigned long long, int, void*)>
c0015ede:	b8 05 00 00 00       	mov    eax,0x5
c0015ee3:	eb 05                	jmp    c0015eea <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ee5:	b8 07 00 00 00       	mov    eax,0x7
c0015eea:	5b                   	pop    ebx
c0015eeb:	5e                   	pop    esi
c0015eec:	5f                   	pop    edi
c0015eed:	c3                   	ret    

c0015eee <Mouse::Mouse(char const*)>:
c0015eee:	83 ec 0c             	sub    esp,0xc
c0015ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef5:	83 ec 08             	sub    esp,0x8
c0015ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015efc:	50                   	push   eax
c0015efd:	e8 66 de ff ff       	call   c0013d68 <Device::Device(char const*)>
c0015f02:	83 c4 10             	add    esp,0x10
c0015f05:	ba 10 9a 02 c0       	mov    edx,0xc0029a10
c0015f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0e:	89 10                	mov    DWORD PTR [eax],edx
c0015f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f14:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f1e:	90                   	nop
c0015f1f:	83 c4 0c             	add    esp,0xc
c0015f22:	c3                   	ret    
c0015f23:	90                   	nop

c0015f24 <Mouse::~Mouse()>:
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	ba 10 9a 02 c0       	mov    edx,0xc0029a10
c0015f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f30:	89 10                	mov    DWORD PTR [eax],edx
c0015f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f36:	83 ec 0c             	sub    esp,0xc
c0015f39:	50                   	push   eax
c0015f3a:	e8 0b db ff ff       	call   c0013a4a <Device::~Device()>
c0015f3f:	83 c4 10             	add    esp,0x10
c0015f42:	90                   	nop
c0015f43:	83 c4 0c             	add    esp,0xc
c0015f46:	c3                   	ret    
c0015f47:	90                   	nop

c0015f48 <Mouse::~Mouse()>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	83 ec 0c             	sub    esp,0xc
c0015f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f52:	e8 cd ff ff ff       	call   c0015f24 <Mouse::~Mouse()>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	83 ec 08             	sub    esp,0x8
c0015f5d:	68 58 01 00 00       	push   0x158
c0015f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f66:	e8 3e c7 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0015f6b:	83 c4 10             	add    esp,0x10
c0015f6e:	83 c4 0c             	add    esp,0xc
c0015f71:	c3                   	ret    

c0015f72 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f72:	55                   	push   ebp
c0015f73:	57                   	push   edi
c0015f74:	56                   	push   esi
c0015f75:	53                   	push   ebx
c0015f76:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f7c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f83:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015f8a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015f91:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f9c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fa0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fa7:	e8 b8 de ff ff       	call   c0013e64 <Device::getName()>
c0015fac:	5a                   	pop    edx
c0015fad:	59                   	pop    ecx
c0015fae:	50                   	push   eax
c0015faf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fb3:	55                   	push   ebp
c0015fb4:	e8 71 a7 fe ff       	call   c000072a <strcpy>
c0015fb9:	5b                   	pop    ebx
c0015fba:	58                   	pop    eax
c0015fbb:	68 34 9a 02 c0       	push   0xc0029a34
c0015fc0:	55                   	push   ebp
c0015fc1:	e8 1b a8 fe ff       	call   c00007e1 <strcat>
c0015fc6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fcd:	e8 02 95 ff ff       	call   c000f4d4 <malloc>
c0015fd2:	83 c4 0c             	add    esp,0xc
c0015fd5:	89 c3                	mov    ebx,eax
c0015fd7:	57                   	push   edi
c0015fd8:	56                   	push   esi
c0015fd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fe1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015fe8:	55                   	push   ebp
c0015fe9:	50                   	push   eax
c0015fea:	e8 e3 fb ff ff       	call   c0015bd2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fef:	83 c4 14             	add    esp,0x14
c0015ff2:	53                   	push   ebx
c0015ff3:	e8 90 fc ff ff       	call   c0015c88 <LogicalDisk::assignDriveLetter()>
c0015ff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ffb:	e8 3e fd ff ff       	call   c0015d3e <LogicalDisk::mount()>
c0016000:	58                   	pop    eax
c0016001:	5a                   	pop    edx
c0016002:	53                   	push   ebx
c0016003:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001600a:	e8 69 db ff ff       	call   c0013b78 <Device::addChild(Device*)>
c001600f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016015:	5b                   	pop    ebx
c0016016:	5e                   	pop    esi
c0016017:	5f                   	pop    edi
c0016018:	5d                   	pop    ebp
c0016019:	c3                   	ret    

c001601a <createPartitionsForDisk(PhysicalDisk*)>:
c001601a:	55                   	push   ebp
c001601b:	57                   	push   edi
c001601c:	56                   	push   esi
c001601d:	53                   	push   ebx
c001601e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016024:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001602b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016031:	3d 00 02 00 00       	cmp    eax,0x200
c0016036:	74 27                	je     c001605f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016038:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001603e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016044:	83 ec 10             	sub    esp,0x10
c0016047:	0f a4 f7 0a          	shld   edi,esi,0xa
c001604b:	99                   	cdq    
c001604c:	c1 e6 0a             	shl    esi,0xa
c001604f:	52                   	push   edx
c0016050:	89 fd                	mov    ebp,edi
c0016052:	50                   	push   eax
c0016053:	55                   	push   ebp
c0016054:	56                   	push   esi
c0016055:	e8 62 f3 00 00       	call   c00253bc <__udivdi3>
c001605a:	e9 b1 00 00 00       	jmp    c0016110 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001605f:	83 ec 0c             	sub    esp,0xc
c0016062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016064:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016068:	56                   	push   esi
c0016069:	6a 01                	push   0x1
c001606b:	6a 00                	push   0x0
c001606d:	6a 00                	push   0x0
c001606f:	53                   	push   ebx
c0016070:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016073:	83 c4 20             	add    esp,0x20
c0016076:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001607e:	75 0a                	jne    c001608a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016080:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016088:	74 2c                	je     c00160b6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001608a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016090:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016096:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001609c:	83 ec 10             	sub    esp,0x10
c001609f:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160a3:	89 f7                	mov    edi,esi
c00160a5:	c1 e0 0a             	shl    eax,0xa
c00160a8:	c1 ff 1f             	sar    edi,0x1f
c00160ab:	57                   	push   edi
c00160ac:	56                   	push   esi
c00160ad:	52                   	push   edx
c00160ae:	50                   	push   eax
c00160af:	e8 08 f3 00 00       	call   c00253bc <__udivdi3>
c00160b4:	eb 5a                	jmp    c0016110 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160b6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160bd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160c4:	83 e1 7f             	and    ecx,0x7f
c00160c7:	83 e0 7f             	and    eax,0x7f
c00160ca:	01 c1                	add    ecx,eax
c00160cc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00160d3:	83 e0 7f             	and    eax,0x7f
c00160d6:	01 c1                	add    ecx,eax
c00160d8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160df:	83 e0 7f             	and    eax,0x7f
c00160e2:	00 c1                	add    cl,al
c00160e4:	74 41                	je     c0016127 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160e6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160ec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160f8:	83 ec 10             	sub    esp,0x10
c00160fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160ff:	89 f7                	mov    edi,esi
c0016101:	c1 e0 0a             	shl    eax,0xa
c0016104:	c1 ff 1f             	sar    edi,0x1f
c0016107:	57                   	push   edi
c0016108:	56                   	push   esi
c0016109:	52                   	push   edx
c001610a:	50                   	push   eax
c001610b:	e8 ac f2 00 00       	call   c00253bc <__udivdi3>
c0016110:	83 c4 14             	add    esp,0x14
c0016113:	52                   	push   edx
c0016114:	50                   	push   eax
c0016115:	6a 00                	push   0x0
c0016117:	6a 00                	push   0x0
c0016119:	53                   	push   ebx
c001611a:	e8 53 fe ff ff       	call   c0015f72 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001611f:	83 c4 20             	add    esp,0x20
c0016122:	e9 79 01 00 00       	jmp    c00162a0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016127:	89 f0                	mov    eax,esi
c0016129:	31 f6                	xor    esi,esi
c001612b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016132:	75 02                	jne    c0016136 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016134:	89 f1                	mov    ecx,esi
c0016136:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001613d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016144:	c1 e2 08             	shl    edx,0x8
c0016147:	c1 e7 10             	shl    edi,0x10
c001614a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016152:	09 fa                	or     edx,edi
c0016154:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001615c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016163:	83 c0 10             	add    eax,0x10
c0016166:	09 fa                	or     edx,edi
c0016168:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001616f:	c1 e7 18             	shl    edi,0x18
c0016172:	09 fa                	or     edx,edi
c0016174:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001617b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001617f:	c1 e7 10             	shl    edi,0x10
c0016182:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016189:	c1 e2 08             	shl    edx,0x8
c001618c:	09 fa                	or     edx,edi
c001618e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016195:	09 fa                	or     edx,edi
c0016197:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001619e:	c1 e7 18             	shl    edi,0x18
c00161a1:	09 fa                	or     edx,edi
c00161a3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161a7:	46                   	inc    esi
c00161a8:	83 fe 04             	cmp    esi,0x4
c00161ab:	0f 85 7a ff ff ff    	jne    c001612b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161b5:	83 f0 01             	xor    eax,0x1
c00161b8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161bc:	75 57                	jne    c0016215 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161c2:	83 f0 01             	xor    eax,0x1
c00161c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161c9:	75 4a                	jne    c0016215 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161cb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00161d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161eb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161f5:	89 f7                	mov    edi,esi
c00161f7:	c1 e0 0a             	shl    eax,0xa
c00161fa:	c1 ff 1f             	sar    edi,0x1f
c00161fd:	57                   	push   edi
c00161fe:	56                   	push   esi
c00161ff:	52                   	push   edx
c0016200:	50                   	push   eax
c0016201:	e8 b6 f1 00 00       	call   c00253bc <__udivdi3>
c0016206:	83 c4 10             	add    esp,0x10
c0016209:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001620d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016211:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016215:	84 c9                	test   cl,cl
c0016217:	74 53                	je     c001626c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016219:	0f b6 c9             	movzx  ecx,cl
c001621c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016220:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016224:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016228:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001622c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016230:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016234:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016238:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001623c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016240:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016248:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001624c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016250:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016254:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016258:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001625c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016260:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016264:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016268:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001626c:	31 ed                	xor    ebp,ebp
c001626e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016272:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016276:	89 f8                	mov    eax,edi
c0016278:	09 f0                	or     eax,esi
c001627a:	74 1e                	je     c001629a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001627c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016280:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016284:	89 d1                	mov    ecx,edx
c0016286:	09 c1                	or     ecx,eax
c0016288:	74 10                	je     c001629a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001628a:	83 ec 0c             	sub    esp,0xc
c001628d:	57                   	push   edi
c001628e:	56                   	push   esi
c001628f:	52                   	push   edx
c0016290:	50                   	push   eax
c0016291:	53                   	push   ebx
c0016292:	e8 db fc ff ff       	call   c0015f72 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016297:	83 c4 20             	add    esp,0x20
c001629a:	45                   	inc    ebp
c001629b:	83 fd 04             	cmp    ebp,0x4
c001629e:	75 ce                	jne    c001626e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162a0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162a6:	5b                   	pop    ebx
c00162a7:	5e                   	pop    esi
c00162a8:	5f                   	pop    edi
c00162a9:	5d                   	pop    ebp
c00162aa:	c3                   	ret    
c00162ab:	90                   	nop

c00162ac <Serial::Serial(char const*)>:
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b3:	83 ec 08             	sub    esp,0x8
c00162b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ba:	50                   	push   eax
c00162bb:	e8 a8 da ff ff       	call   c0013d68 <Device::Device(char const*)>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c00162c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162cc:	89 10                	mov    DWORD PTR [eax],edx
c00162ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162dc:	90                   	nop
c00162dd:	83 c4 0c             	add    esp,0xc
c00162e0:	c3                   	ret    
c00162e1:	90                   	nop

c00162e2 <Serial::~Serial()>:
c00162e2:	83 ec 0c             	sub    esp,0xc
c00162e5:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c00162ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ee:	89 10                	mov    DWORD PTR [eax],edx
c00162f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f4:	83 ec 0c             	sub    esp,0xc
c00162f7:	50                   	push   eax
c00162f8:	e8 4d d7 ff ff       	call   c0013a4a <Device::~Device()>
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	90                   	nop
c0016301:	83 c4 0c             	add    esp,0xc
c0016304:	c3                   	ret    
c0016305:	90                   	nop

c0016306 <Serial::~Serial()>:
c0016306:	83 ec 0c             	sub    esp,0xc
c0016309:	83 ec 0c             	sub    esp,0xc
c001630c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016310:	e8 cd ff ff ff       	call   c00162e2 <Serial::~Serial()>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	83 ec 08             	sub    esp,0x8
c001631b:	68 58 01 00 00       	push   0x158
c0016320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016324:	e8 80 c3 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	83 c4 0c             	add    esp,0xc
c001632f:	c3                   	ret    

c0016330 <Timer::Timer(char const*)>:
c0016330:	83 ec 0c             	sub    esp,0xc
c0016333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016337:	83 ec 08             	sub    esp,0x8
c001633a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001633e:	50                   	push   eax
c001633f:	e8 24 da ff ff       	call   c0013d68 <Device::Device(char const*)>
c0016344:	83 c4 10             	add    esp,0x10
c0016347:	ba 8c 9a 02 c0       	mov    edx,0xc0029a8c
c001634c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016350:	89 10                	mov    DWORD PTR [eax],edx
c0016352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016356:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016360:	90                   	nop
c0016361:	83 c4 0c             	add    esp,0xc
c0016364:	c3                   	ret    
c0016365:	90                   	nop

c0016366 <Timer::~Timer()>:
c0016366:	83 ec 0c             	sub    esp,0xc
c0016369:	ba 8c 9a 02 c0       	mov    edx,0xc0029a8c
c001636e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016372:	89 10                	mov    DWORD PTR [eax],edx
c0016374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016378:	83 ec 0c             	sub    esp,0xc
c001637b:	50                   	push   eax
c001637c:	e8 c9 d6 ff ff       	call   c0013a4a <Device::~Device()>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	90                   	nop
c0016385:	83 c4 0c             	add    esp,0xc
c0016388:	c3                   	ret    
c0016389:	90                   	nop

c001638a <Timer::~Timer()>:
c001638a:	83 ec 0c             	sub    esp,0xc
c001638d:	83 ec 0c             	sub    esp,0xc
c0016390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016394:	e8 cd ff ff ff       	call   c0016366 <Timer::~Timer()>
c0016399:	83 c4 10             	add    esp,0x10
c001639c:	83 ec 08             	sub    esp,0x8
c001639f:	68 5c 01 00 00       	push   0x15c
c00163a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a8:	e8 fc c2 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00163ad:	83 c4 10             	add    esp,0x10
c00163b0:	83 c4 0c             	add    esp,0xc
c00163b3:	c3                   	ret    

c00163b4 <Timer::read()>:
c00163b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163be:	c3                   	ret    

c00163bf <timerHandler(unsigned long long)>:
c00163bf:	55                   	push   ebp
c00163c0:	57                   	push   edi
c00163c1:	56                   	push   esi
c00163c2:	53                   	push   ebx
c00163c3:	83 ec 0c             	sub    esp,0xc
c00163c6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163ca:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163ce:	01 35 f0 cf 02 c0    	add    DWORD PTR ds:0xc002cff0,esi
c00163d4:	11 3d f4 cf 02 c0    	adc    DWORD PTR ds:0xc002cff4,edi
c00163da:	80 3d 6d c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c96d,0x0
c00163e1:	0f 84 07 01 00 00    	je     c00164ee <timerHandler(unsigned long long)+0x12f>
c00163e7:	e8 6d 69 00 00       	call   c001cd59 <lockStuff()>
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	68 9c de 02 c0       	push   0xc002de9c
c00163f4:	e8 35 10 01 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163f9:	c7 04 24 9c de 02 c0 	mov    DWORD PTR [esp],0xc002de9c
c0016400:	89 c3                	mov    ebx,eax
c0016402:	e8 2f 10 01 00       	call   c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	84 c0                	test   al,al
c001640c:	74 60                	je     c001646e <timerHandler(unsigned long long)+0xaf>
c001640e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016414:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016417:	85 c0                	test   eax,eax
c0016419:	0f 85 91 00 00 00    	jne    c00164b0 <timerHandler(unsigned long long)+0xf1>
c001641f:	e9 be 00 00 00       	jmp    c00164e2 <timerHandler(unsigned long long)+0x123>
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	55                   	push   ebp
c0016428:	e8 1d 6f 00 00       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	39 eb                	cmp    ebx,ebp
c0016432:	75 12                	jne    c0016446 <timerHandler(unsigned long long)+0x87>
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 9c de 02 c0       	push   0xc002de9c
c001643c:	e8 ed 0f 01 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016441:	89 c3                	mov    ebx,eax
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	68 9c de 02 c0       	push   0xc002de9c
c001644e:	e8 e3 0f 01 00       	call   c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016453:	83 c4 10             	add    esp,0x10
c0016456:	84 c0                	test   al,al
c0016458:	75 b4                	jne    c001640e <timerHandler(unsigned long long)+0x4f>
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	68 9c de 02 c0       	push   0xc002de9c
c0016462:	e8 c7 0f 01 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	39 d8                	cmp    eax,ebx
c001646c:	74 a0                	je     c001640e <timerHandler(unsigned long long)+0x4f>
c001646e:	83 ec 0c             	sub    esp,0xc
c0016471:	68 9c de 02 c0       	push   0xc002de9c
c0016476:	e8 b3 0f 01 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001647b:	c7 04 24 9c de 02 c0 	mov    DWORD PTR [esp],0xc002de9c
c0016482:	89 c5                	mov    ebp,eax
c0016484:	e8 c9 0f 01 00       	call   c0027452 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016489:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001648c:	83 c4 10             	add    esp,0x10
c001648f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016492:	39 15 f0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cff0,edx
c0016498:	a1 f4 cf 02 c0       	mov    eax,ds:0xc002cff4
c001649d:	19 c8                	sbb    eax,ecx
c001649f:	73 83                	jae    c0016424 <timerHandler(unsigned long long)+0x65>
c00164a1:	50                   	push   eax
c00164a2:	50                   	push   eax
c00164a3:	55                   	push   ebp
c00164a4:	68 9c de 02 c0       	push   0xc002de9c
c00164a9:	e8 52 10 01 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164ae:	eb 93                	jmp    c0016443 <timerHandler(unsigned long long)+0x84>
c00164b0:	80 3d 6c c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c96c,0x0
c00164b7:	74 29                	je     c00164e2 <timerHandler(unsigned long long)+0x123>
c00164b9:	39 c6                	cmp    esi,eax
c00164bb:	bb 00 00 00 00       	mov    ebx,0x0
c00164c0:	19 df                	sbb    edi,ebx
c00164c2:	72 19                	jb     c00164dd <timerHandler(unsigned long long)+0x11e>
c00164c4:	e8 69 68 00 00       	call   c001cd32 <lockScheduler()>
c00164c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ce:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164d1:	e8 98 6b 00 00       	call   c001d06e <schedule()>
c00164d6:	e8 59 68 00 00       	call   c001cd34 <unlockScheduler()>
c00164db:	eb 05                	jmp    c00164e2 <timerHandler(unsigned long long)+0x123>
c00164dd:	29 f0                	sub    eax,esi
c00164df:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00164e2:	83 c4 0c             	add    esp,0xc
c00164e5:	5b                   	pop    ebx
c00164e6:	5e                   	pop    esi
c00164e7:	5f                   	pop    edi
c00164e8:	5d                   	pop    ebp
c00164e9:	e9 05 6c 00 00       	jmp    c001d0f3 <unlockStuff()>
c00164ee:	83 c4 0c             	add    esp,0xc
c00164f1:	5b                   	pop    ebx
c00164f2:	5e                   	pop    esi
c00164f3:	5f                   	pop    edi
c00164f4:	5d                   	pop    ebp
c00164f5:	c3                   	ret    

c00164f6 <setupTimer(int)>:
c00164f6:	57                   	push   edi
c00164f7:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00164fc:	56                   	push   esi
c00164fd:	53                   	push   ebx
c00164fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016502:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016511:	e8 4e d9 ff ff       	call   c0013e64 <Device::getName()>
c0016516:	83 c4 10             	add    esp,0x10
c0016519:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001651c:	0f 85 8d 00 00 00    	jne    c00165af <setupTimer(int)+0xb9>
c0016522:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016527:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001652e:	74 7f                	je     c00165af <setupTimer(int)+0xb9>
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	68 5c 01 00 00       	push   0x15c
c0016538:	e8 97 8f ff ff       	call   c000f4d4 <malloc>
c001653d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016540:	89 c3                	mov    ebx,eax
c0016542:	e8 51 ea 00 00       	call   c0024f98 <PIT::PIT()>
c0016547:	59                   	pop    ecx
c0016548:	5f                   	pop    edi
c0016549:	53                   	push   ebx
c001654a:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c0016550:	e8 23 d6 ff ff       	call   c0013b78 <Device::addChild(Device*)>
c0016555:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016557:	6a 00                	push   0x0
c0016559:	6a 00                	push   0x0
c001655b:	56                   	push   esi
c001655c:	53                   	push   ebx
c001655d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016560:	83 c4 14             	add    esp,0x14
c0016563:	68 60 01 00 00       	push   0x160
c0016568:	e8 67 8f ff ff       	call   c000f4d4 <malloc>
c001656d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016570:	89 c7                	mov    edi,eax
c0016572:	e8 d1 e8 00 00       	call   c0024e48 <APICTimer::APICTimer()>
c0016577:	6a 00                	push   0x0
c0016579:	6a 00                	push   0x0
c001657b:	56                   	push   esi
c001657c:	57                   	push   edi
c001657d:	e8 c8 e7 00 00       	call   c0024d4a <APICTimer::open(int, int, void*)>
c0016582:	83 c4 20             	add    esp,0x20
c0016585:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016587:	6a 00                	push   0x0
c0016589:	6a 00                	push   0x0
c001658b:	6a 00                	push   0x0
c001658d:	53                   	push   ebx
c001658e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016591:	58                   	pop    eax
c0016592:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016597:	5a                   	pop    edx
c0016598:	57                   	push   edi
c0016599:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001659f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165a5:	e8 ce d5 ff ff       	call   c0013b78 <Device::addChild(Device*)>
c00165aa:	83 c4 10             	add    esp,0x10
c00165ad:	eb 33                	jmp    c00165e2 <setupTimer(int)+0xec>
c00165af:	83 ec 0c             	sub    esp,0xc
c00165b2:	68 5c 01 00 00       	push   0x15c
c00165b7:	e8 18 8f ff ff       	call   c000f4d4 <malloc>
c00165bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00165bf:	89 c3                	mov    ebx,eax
c00165c1:	e8 d2 e9 00 00       	call   c0024f98 <PIT::PIT()>
c00165c6:	58                   	pop    eax
c00165c7:	5a                   	pop    edx
c00165c8:	53                   	push   ebx
c00165c9:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c00165cf:	e8 a4 d5 ff ff       	call   c0013b78 <Device::addChild(Device*)>
c00165d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165d6:	6a 00                	push   0x0
c00165d8:	6a 00                	push   0x0
c00165da:	56                   	push   esi
c00165db:	53                   	push   ebx
c00165dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165df:	83 c4 20             	add    esp,0x20
c00165e2:	89 d8                	mov    eax,ebx
c00165e4:	5b                   	pop    ebx
c00165e5:	5e                   	pop    esi
c00165e6:	5f                   	pop    edi
c00165e7:	c3                   	ret    

c00165e8 <VCache::VCache(PhysicalDisk*)>:
c00165e8:	53                   	push   ebx
c00165e9:	83 ec 18             	sub    esp,0x18
c00165ec:	ba bc 9a 02 c0       	mov    edx,0xc0029abc
c00165f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f5:	89 10                	mov    DWORD PTR [eax],edx
c00165f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016606:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001660d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016611:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016618:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001661f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016623:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001662a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016635:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001663c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016640:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016644:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001664c:	83 ec 0c             	sub    esp,0xc
c001664f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016653:	e8 7c 8e ff ff       	call   c000f4d4 <malloc>
c0016658:	83 c4 10             	add    esp,0x10
c001665b:	89 c3                	mov    ebx,eax
c001665d:	83 ec 0c             	sub    esp,0xc
c0016660:	53                   	push   ebx
c0016661:	e8 ec 67 00 00       	call   c001ce52 <Mutex::Mutex()>
c0016666:	83 c4 10             	add    esp,0x10
c0016669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016674:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016678:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001667b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667f:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016686:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001668a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016694:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001669b:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00166a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00166ab:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00166ae:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00166b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b5:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166c3:	c1 e0 06             	shl    eax,0x6
c00166c6:	83 ec 0c             	sub    esp,0xc
c00166c9:	50                   	push   eax
c00166ca:	e8 05 8e ff ff       	call   c000f4d4 <malloc>
c00166cf:	83 c4 10             	add    esp,0x10
c00166d2:	89 c2                	mov    edx,eax
c00166d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00166db:	90                   	nop
c00166dc:	83 c4 18             	add    esp,0x18
c00166df:	5b                   	pop    ebx
c00166e0:	c3                   	ret    
c00166e1:	90                   	nop

c00166e2 <VCache::writeWriteBuffer()>:
c00166e2:	53                   	push   ebx
c00166e3:	83 ec 14             	sub    esp,0x14
c00166e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00166ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00166ef:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166f5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00166f8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00166fb:	50                   	push   eax
c00166fc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166ff:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016706:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001670d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016711:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016718:	83 c4 28             	add    esp,0x28
c001671b:	5b                   	pop    ebx
c001671c:	c3                   	ret    
c001671d:	90                   	nop

c001671e <VCache::~VCache()>:
c001671e:	83 ec 0c             	sub    esp,0xc
c0016721:	ba bc 9a 02 c0       	mov    edx,0xc0029abc
c0016726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672a:	89 10                	mov    DWORD PTR [eax],edx
c001672c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016730:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016733:	84 c0                	test   al,al
c0016735:	74 0f                	je     c0016746 <VCache::~VCache()+0x28>
c0016737:	83 ec 0c             	sub    esp,0xc
c001673a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001673e:	e8 9f ff ff ff       	call   c00166e2 <VCache::writeWriteBuffer()>
c0016743:	83 c4 10             	add    esp,0x10
c0016746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001674d:	83 ec 0c             	sub    esp,0xc
c0016750:	50                   	push   eax
c0016751:	e8 8e 8d ff ff       	call   c000f4e4 <free>
c0016756:	83 c4 10             	add    esp,0x10
c0016759:	90                   	nop
c001675a:	83 c4 0c             	add    esp,0xc
c001675d:	c3                   	ret    

c001675e <VCache::~VCache()>:
c001675e:	83 ec 0c             	sub    esp,0xc
c0016761:	83 ec 0c             	sub    esp,0xc
c0016764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016768:	e8 b1 ff ff ff       	call   c001671e <VCache::~VCache()>
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	83 ec 08             	sub    esp,0x8
c0016773:	6a 30                	push   0x30
c0016775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016779:	e8 2b bf ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	83 c4 0c             	add    esp,0xc
c0016784:	c3                   	ret    
c0016785:	90                   	nop

c0016786 <VCache::write(unsigned long long, int, void*)>:
c0016786:	55                   	push   ebp
c0016787:	57                   	push   edi
c0016788:	56                   	push   esi
c0016789:	53                   	push   ebx
c001678a:	83 ec 28             	sub    esp,0x28
c001678d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016791:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016795:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016799:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001679d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167a0:	e8 0f 6b 00 00       	call   c001d2b4 <Semaphore::acquire()>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167ac:	74 66                	je     c0016814 <VCache::write(unsigned long long, int, void*)+0x8e>
c00167ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167b1:	99                   	cdq    
c00167b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167b6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00167b9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167bc:	89 c1                	mov    ecx,eax
c00167be:	89 d0                	mov    eax,edx
c00167c0:	31 f1                	xor    ecx,esi
c00167c2:	31 f8                	xor    eax,edi
c00167c4:	89 ca                	mov    edx,ecx
c00167c6:	09 c2                	or     edx,eax
c00167c8:	75 3e                	jne    c0016808 <VCache::write(unsigned long long, int, void*)+0x82>
c00167ca:	83 fd 01             	cmp    ebp,0x1
c00167cd:	75 39                	jne    c0016808 <VCache::write(unsigned long long, int, void*)+0x82>
c00167cf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167d8:	51                   	push   ecx
c00167d9:	50                   	push   eax
c00167da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00167e2:	0f af c8             	imul   ecx,eax
c00167e5:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00167e8:	51                   	push   ecx
c00167e9:	e8 67 9e fe ff       	call   c0000655 <memcpy>
c00167ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167f1:	83 c4 10             	add    esp,0x10
c00167f4:	40                   	inc    eax
c00167f5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00167f8:	83 f8 40             	cmp    eax,0x40
c00167fb:	75 57                	jne    c0016854 <VCache::write(unsigned long long, int, void*)+0xce>
c00167fd:	83 ec 0c             	sub    esp,0xc
c0016800:	53                   	push   ebx
c0016801:	e8 dc fe ff ff       	call   c00166e2 <VCache::writeWriteBuffer()>
c0016806:	eb 34                	jmp    c001683c <VCache::write(unsigned long long, int, void*)+0xb6>
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	53                   	push   ebx
c001680c:	e8 d1 fe ff ff       	call   c00166e2 <VCache::writeWriteBuffer()>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016817:	83 fd 3f             	cmp    ebp,0x3f
c001681a:	7f 25                	jg     c0016841 <VCache::write(unsigned long long, int, void*)+0xbb>
c001681c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001681f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016822:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016825:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016829:	52                   	push   edx
c001682a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016830:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016834:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016837:	e8 19 9e fe ff       	call   c0000655 <memcpy>
c001683c:	83 c4 10             	add    esp,0x10
c001683f:	eb 13                	jmp    c0016854 <VCache::write(unsigned long long, int, void*)+0xce>
c0016841:	83 ec 0c             	sub    esp,0xc
c0016844:	8b 10                	mov    edx,DWORD PTR [eax]
c0016846:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001684a:	55                   	push   ebp
c001684b:	57                   	push   edi
c001684c:	56                   	push   esi
c001684d:	50                   	push   eax
c001684e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016851:	83 c4 20             	add    esp,0x20
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001685a:	e8 03 70 00 00       	call   c001d862 <Semaphore::release()>
c001685f:	83 c4 2c             	add    esp,0x2c
c0016862:	31 c0                	xor    eax,eax
c0016864:	5b                   	pop    ebx
c0016865:	5e                   	pop    esi
c0016866:	5f                   	pop    edi
c0016867:	5d                   	pop    ebp
c0016868:	c3                   	ret    
c0016869:	90                   	nop

c001686a <VCache::read(unsigned long long, int, void*)>:
c001686a:	57                   	push   edi
c001686b:	56                   	push   esi
c001686c:	53                   	push   ebx
c001686d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016871:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016875:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001687f:	e8 30 6a 00 00       	call   c001d2b4 <Semaphore::acquire()>
c0016884:	83 c4 10             	add    esp,0x10
c0016887:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001688b:	74 0c                	je     c0016899 <VCache::read(unsigned long long, int, void*)+0x2f>
c001688d:	83 ec 0c             	sub    esp,0xc
c0016890:	53                   	push   ebx
c0016891:	e8 4c fe ff ff       	call   c00166e2 <VCache::writeWriteBuffer()>
c0016896:	83 c4 10             	add    esp,0x10
c0016899:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	8b 10                	mov    edx,DWORD PTR [eax]
c00168a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a9:	57                   	push   edi
c00168aa:	56                   	push   esi
c00168ab:	50                   	push   eax
c00168ac:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168af:	83 c4 14             	add    esp,0x14
c00168b2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168b5:	e8 a8 6f 00 00       	call   c001d862 <Semaphore::release()>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	31 c0                	xor    eax,eax
c00168bf:	5b                   	pop    ebx
c00168c0:	5e                   	pop    esi
c00168c1:	5f                   	pop    edi
c00168c2:	c3                   	ret    
c00168c3:	90                   	nop

c00168c4 <Video::putrect(int, int, int, int, unsigned int)>:
c00168c4:	55                   	push   ebp
c00168c5:	57                   	push   edi
c00168c6:	56                   	push   esi
c00168c7:	53                   	push   ebx
c00168c8:	83 ec 1c             	sub    esp,0x1c
c00168cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00168cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168d3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00168d7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00168db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e3:	01 df                	add    edi,ebx
c00168e5:	39 fb                	cmp    ebx,edi
c00168e7:	7d 1f                	jge    c0016908 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00168e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168ed:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00168f1:	7d 12                	jge    c0016905 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00168f3:	8b 16                	mov    edx,DWORD PTR [esi]
c00168f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00168f9:	53                   	push   ebx
c00168fa:	55                   	push   ebp
c00168fb:	45                   	inc    ebp
c00168fc:	56                   	push   esi
c00168fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016900:	83 c4 10             	add    esp,0x10
c0016903:	eb e8                	jmp    c00168ed <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016905:	43                   	inc    ebx
c0016906:	eb dd                	jmp    c00168e5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016908:	83 c4 1c             	add    esp,0x1c
c001690b:	5b                   	pop    ebx
c001690c:	5e                   	pop    esi
c001690d:	5f                   	pop    edi
c001690e:	5d                   	pop    ebp
c001690f:	c3                   	ret    

c0016910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016910:	55                   	push   ebp
c0016911:	57                   	push   edi
c0016912:	31 ff                	xor    edi,edi
c0016914:	56                   	push   esi
c0016915:	53                   	push   ebx
c0016916:	83 ec 1c             	sub    esp,0x1c
c0016919:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001691d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016921:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016928:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001692d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016931:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016935:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016939:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001693c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016940:	01 f9                	add    ecx,edi
c0016942:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016946:	7d 2f                	jge    c0016977 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016948:	31 f6                	xor    esi,esi
c001694a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001694e:	01 f2                	add    edx,esi
c0016950:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016954:	7d 1a                	jge    c0016970 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016956:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016959:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001695c:	46                   	inc    esi
c001695d:	51                   	push   ecx
c001695e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016962:	52                   	push   edx
c0016963:	55                   	push   ebp
c0016964:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001696e:	eb da                	jmp    c001694a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016970:	47                   	inc    edi
c0016971:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016975:	eb c5                	jmp    c001693c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016977:	83 c4 1c             	add    esp,0x1c
c001697a:	5b                   	pop    ebx
c001697b:	5e                   	pop    esi
c001697c:	5f                   	pop    edi
c001697d:	5d                   	pop    ebp
c001697e:	c3                   	ret    
c001697f:	90                   	nop

c0016980 <Video::blit(unsigned int*, int, int, int, int)>:
c0016980:	55                   	push   ebp
c0016981:	57                   	push   edi
c0016982:	56                   	push   esi
c0016983:	53                   	push   ebx
c0016984:	83 ec 1c             	sub    esp,0x1c
c0016987:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001698b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001698f:	85 c0                	test   eax,eax
c0016991:	79 02                	jns    c0016995 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016993:	31 c0                	xor    eax,eax
c0016995:	c1 e0 02             	shl    eax,0x2
c0016998:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001699c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169a4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00169a8:	39 d8                	cmp    eax,ebx
c00169aa:	7e 49                	jle    c00169f5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169ac:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169b2:	7c 41                	jl     c00169f5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169b4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00169b8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169bc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169c0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169c4:	39 f9                	cmp    ecx,edi
c00169c6:	7e 22                	jle    c00169ea <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00169c8:	83 c5 04             	add    ebp,0x4
c00169cb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169d1:	7c 14                	jl     c00169e7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00169d3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169d5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00169d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169e0:	56                   	push   esi
c00169e1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00169e4:	83 c4 10             	add    esp,0x10
c00169e7:	47                   	inc    edi
c00169e8:	eb d2                	jmp    c00169bc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00169ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ee:	43                   	inc    ebx
c00169ef:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00169f3:	eb ab                	jmp    c00169a0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00169f5:	83 c4 1c             	add    esp,0x1c
c00169f8:	5b                   	pop    ebx
c00169f9:	5e                   	pop    esi
c00169fa:	5f                   	pop    edi
c00169fb:	5d                   	pop    ebp
c00169fc:	c3                   	ret    
c00169fd:	90                   	nop

c00169fe <Video::clearScreen(unsigned int)>:
c00169fe:	57                   	push   edi
c00169ff:	56                   	push   esi
c0016a00:	53                   	push   ebx
c0016a01:	31 db                	xor    ebx,ebx
c0016a03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a07:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016a0d:	7e 1f                	jle    c0016a2e <Video::clearScreen(unsigned int)+0x30>
c0016a0f:	31 ff                	xor    edi,edi
c0016a11:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a17:	7e 12                	jle    c0016a2b <Video::clearScreen(unsigned int)+0x2d>
c0016a19:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a1f:	53                   	push   ebx
c0016a20:	57                   	push   edi
c0016a21:	47                   	inc    edi
c0016a22:	56                   	push   esi
c0016a23:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a26:	83 c4 10             	add    esp,0x10
c0016a29:	eb e6                	jmp    c0016a11 <Video::clearScreen(unsigned int)+0x13>
c0016a2b:	43                   	inc    ebx
c0016a2c:	eb d9                	jmp    c0016a07 <Video::clearScreen(unsigned int)+0x9>
c0016a2e:	5b                   	pop    ebx
c0016a2f:	5e                   	pop    esi
c0016a30:	5f                   	pop    edi
c0016a31:	c3                   	ret    

c0016a32 <Video::putpixel(int, int, unsigned int)>:
c0016a32:	c7 44 24 04 c4 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029ac4
c0016a3a:	e9 64 2e 00 00       	jmp    c00198a3 <Krnl::panic(char const*)>
c0016a3f:	90                   	nop

c0016a40 <Video::Video(char const*)>:
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a47:	83 ec 08             	sub    esp,0x8
c0016a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a4e:	50                   	push   eax
c0016a4f:	e8 14 d3 ff ff       	call   c0013d68 <Device::Device(char const*)>
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	ba 48 9b 02 c0       	mov    edx,0xc0029b48
c0016a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a60:	89 10                	mov    DWORD PTR [eax],edx
c0016a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a66:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a70:	90                   	nop
c0016a71:	83 c4 0c             	add    esp,0xc
c0016a74:	c3                   	ret    
c0016a75:	90                   	nop

c0016a76 <Video::~Video()>:
c0016a76:	83 ec 0c             	sub    esp,0xc
c0016a79:	ba 48 9b 02 c0       	mov    edx,0xc0029b48
c0016a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a82:	89 10                	mov    DWORD PTR [eax],edx
c0016a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a88:	83 ec 0c             	sub    esp,0xc
c0016a8b:	50                   	push   eax
c0016a8c:	e8 b9 cf ff ff       	call   c0013a4a <Device::~Device()>
c0016a91:	83 c4 10             	add    esp,0x10
c0016a94:	90                   	nop
c0016a95:	83 c4 0c             	add    esp,0xc
c0016a98:	c3                   	ret    
c0016a99:	90                   	nop

c0016a9a <Video::~Video()>:
c0016a9a:	83 ec 0c             	sub    esp,0xc
c0016a9d:	83 ec 0c             	sub    esp,0xc
c0016aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa4:	e8 cd ff ff ff       	call   c0016a76 <Video::~Video()>
c0016aa9:	83 c4 10             	add    esp,0x10
c0016aac:	83 ec 08             	sub    esp,0x8
c0016aaf:	68 64 01 00 00       	push   0x164
c0016ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab8:	e8 ec bb ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	83 c4 0c             	add    esp,0xc
c0016ac3:	c3                   	ret    

c0016ac4 <Video::isMonochrome()>:
c0016ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ac8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ace:	c3                   	ret    
c0016acf:	90                   	nop

c0016ad0 <Video::getWidth()>:
c0016ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ad4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ada:	c3                   	ret    
c0016adb:	90                   	nop

c0016adc <Video::getHeight()>:
c0016adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ae0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ae6:	c3                   	ret    
c0016ae7:	90                   	nop

c0016ae8 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016ae8:	55                   	push   ebp
c0016ae9:	57                   	push   edi
c0016aea:	56                   	push   esi
c0016aeb:	53                   	push   ebx
c0016aec:	83 ec 2c             	sub    esp,0x2c
c0016aef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016af3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016af7:	83 f8 01             	cmp    eax,0x1
c0016afa:	19 c9                	sbb    ecx,ecx
c0016afc:	31 db                	xor    ebx,ebx
c0016afe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016b02:	89 cd                	mov    ebp,ecx
c0016b04:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016b0c:	f7 d5                	not    ebp
c0016b0e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016b14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016b18:	01 d8                	add    eax,ebx
c0016b1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b1e:	56                   	push   esi
c0016b1f:	e8 b8 ff ff ff       	call   c0016adc <Video::getHeight()>
c0016b24:	59                   	pop    ecx
c0016b25:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b29:	7e 70                	jle    c0016b9b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b2b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b2f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b33:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b3a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b3e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b49:	89 f8                	mov    eax,edi
c0016b4b:	83 c0 20             	add    eax,0x20
c0016b4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b52:	56                   	push   esi
c0016b53:	e8 78 ff ff ff       	call   c0016ad0 <Video::getWidth()>
c0016b58:	5a                   	pop    edx
c0016b59:	39 c7                	cmp    edi,eax
c0016b5b:	7d 34                	jge    c0016b91 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b5d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b62:	74 05                	je     c0016b69 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b64:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b66:	55                   	push   ebp
c0016b67:	eb 0d                	jmp    c0016b76 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b69:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b6e:	74 12                	je     c0016b82 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b70:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b7a:	57                   	push   edi
c0016b7b:	56                   	push   esi
c0016b7c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016b86:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016b8a:	47                   	inc    edi
c0016b8b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b8f:	75 c1                	jne    c0016b52 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016b91:	43                   	inc    ebx
c0016b92:	83 fb 20             	cmp    ebx,0x20
c0016b95:	0f 85 79 ff ff ff    	jne    c0016b14 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016b9b:	83 c4 2c             	add    esp,0x2c
c0016b9e:	5b                   	pop    ebx
c0016b9f:	5e                   	pop    esi
c0016ba0:	5f                   	pop    edi
c0016ba1:	5d                   	pop    ebp
c0016ba2:	c3                   	ret    
c0016ba3:	90                   	nop

c0016ba4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016ba4:	55                   	push   ebp
c0016ba5:	57                   	push   edi
c0016ba6:	56                   	push   esi
c0016ba7:	53                   	push   ebx
c0016ba8:	83 ec 28             	sub    esp,0x28
c0016bab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016baf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016bb3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016bb7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016bbb:	c1 e7 08             	shl    edi,0x8
c0016bbe:	01 c7                	add    edi,eax
c0016bc0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016bc4:	c1 e0 08             	shl    eax,0x8
c0016bc7:	01 d0                	add    eax,edx
c0016bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bd1:	0f af c7             	imul   eax,edi
c0016bd4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016bdb:	50                   	push   eax
c0016bdc:	e8 f3 88 ff ff       	call   c000f4d4 <malloc>
c0016be1:	83 c4 10             	add    esp,0x10
c0016be4:	89 c5                	mov    ebp,eax
c0016be6:	85 c0                	test   eax,eax
c0016be8:	75 15                	jne    c0016bff <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016bea:	83 ec 0c             	sub    esp,0xc
c0016bed:	68 e5 9a 02 c0       	push   0xc0029ae5
c0016bf2:	e8 92 bb ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	e9 1c 01 00 00       	jmp    c0016d1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016bff:	be 12 00 00 00       	mov    esi,0x12
c0016c04:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c08:	74 11                	je     c0016c1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016c0a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016c0e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016c12:	c1 fe 03             	sar    esi,0x3
c0016c15:	0f af f0             	imul   esi,eax
c0016c18:	83 c6 12             	add    esi,0x12
c0016c1b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c1f:	74 04                	je     c0016c25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c21:	85 ff                	test   edi,edi
c0016c23:	75 12                	jne    c0016c37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c25:	83 ec 0c             	sub    esp,0xc
c0016c28:	68 fc 9a 02 c0       	push   0xc0029afc
c0016c2d:	e8 57 bb ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0016c32:	e9 ce 00 00 00       	jmp    c0016d05 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c37:	52                   	push   edx
c0016c38:	52                   	push   edx
c0016c39:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c3d:	50                   	push   eax
c0016c3e:	68 11 9b 02 c0       	push   0xc0029b11
c0016c43:	e8 41 bb ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0016c48:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c4c:	83 c4 10             	add    esp,0x10
c0016c4f:	80 fa 02             	cmp    dl,0x2
c0016c52:	0f 85 98 00 00 00    	jne    c0016cf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c58:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c5d:	75 10                	jne    c0016c6f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c5f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c63:	75 0a                	jne    c0016c6f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c65:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c68:	83 e8 18             	sub    eax,0x18
c0016c6b:	a8 f7                	test   al,0xf7
c0016c6d:	74 0a                	je     c0016c79 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c6f:	83 ec 0c             	sub    esp,0xc
c0016c72:	68 1e 9b 02 c0       	push   0xc0029b1e
c0016c77:	eb 7f                	jmp    c0016cf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016c79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c81:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c8d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c95:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016c99:	75 0c                	jne    c0016ca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016c9b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016ca0:	c1 e0 18             	shl    eax,0x18
c0016ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca7:	41                   	inc    ecx
c0016ca8:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016cad:	c1 e2 10             	shl    edx,0x10
c0016cb0:	89 d0                	mov    eax,edx
c0016cb2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016cb7:	c1 e2 08             	shl    edx,0x8
c0016cba:	09 c2                	or     edx,eax
c0016cbc:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016cc0:	09 c2                	or     edx,eax
c0016cc2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cc6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016cca:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016cce:	c1 f8 03             	sar    eax,0x3
c0016cd1:	01 c6                	add    esi,eax
c0016cd3:	89 c8                	mov    eax,ecx
c0016cd5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016cd9:	39 c7                	cmp    edi,eax
c0016cdb:	7f b0                	jg     c0016c8d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016cdd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016ce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ce5:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016ce8:	7e 22                	jle    c0016d0c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016cea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016cee:	eb 99                	jmp    c0016c89 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016cf0:	50                   	push   eax
c0016cf1:	50                   	push   eax
c0016cf2:	52                   	push   edx
c0016cf3:	68 2c 9b 02 c0       	push   0xc0029b2c
c0016cf8:	e8 8c ba ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0016cfd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d00:	e8 df 87 ff ff       	call   c000f4e4 <free>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	31 ed                	xor    ebp,ebp
c0016d0a:	eb 0f                	jmp    c0016d1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d10:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d13:	89 38                	mov    DWORD PTR [eax],edi
c0016d15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d19:	89 08                	mov    DWORD PTR [eax],ecx
c0016d1b:	83 c4 1c             	add    esp,0x1c
c0016d1e:	89 e8                	mov    eax,ebp
c0016d20:	5b                   	pop    ebx
c0016d21:	5e                   	pop    esi
c0016d22:	5f                   	pop    edi
c0016d23:	5d                   	pop    ebp
c0016d24:	c3                   	ret    
c0016d25:	90                   	nop

c0016d26 <Video::putTGA(int, int, unsigned char*, int)>:
c0016d26:	55                   	push   ebp
c0016d27:	57                   	push   edi
c0016d28:	56                   	push   esi
c0016d29:	53                   	push   ebx
c0016d2a:	83 ec 28             	sub    esp,0x28
c0016d2d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d35:	50                   	push   eax
c0016d36:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d3a:	50                   	push   eax
c0016d3b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d3f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d43:	56                   	push   esi
c0016d44:	e8 5b fe ff ff       	call   c0016ba4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d49:	83 c4 20             	add    esp,0x20
c0016d4c:	85 c0                	test   eax,eax
c0016d4e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d52:	74 35                	je     c0016d89 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d54:	89 c7                	mov    edi,eax
c0016d56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d5a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d5e:	39 d8                	cmp    eax,ebx
c0016d60:	7e 27                	jle    c0016d89 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d6a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d6e:	39 e8                	cmp    eax,ebp
c0016d70:	7e 14                	jle    c0016d86 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016d72:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d74:	83 c7 04             	add    edi,0x4
c0016d77:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016d7a:	53                   	push   ebx
c0016d7b:	55                   	push   ebp
c0016d7c:	45                   	inc    ebp
c0016d7d:	56                   	push   esi
c0016d7e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	eb e0                	jmp    c0016d66 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016d86:	43                   	inc    ebx
c0016d87:	eb cd                	jmp    c0016d56 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016d89:	83 c4 1c             	add    esp,0x1c
c0016d8c:	5b                   	pop    ebx
c0016d8d:	5e                   	pop    esi
c0016d8e:	5f                   	pop    edi
c0016d8f:	5d                   	pop    ebp
c0016d90:	c3                   	ret    
c0016d91:	90                   	nop

c0016d92 <ACPI::close(int, int, void*)>:
c0016d92:	83 ec 1c             	sub    esp,0x1c
c0016d95:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016d9d:	74 0a                	je     c0016da9 <ACPI::close(int, int, void*)+0x17>
c0016d9f:	b8 00 00 00 00       	mov    eax,0x0
c0016da4:	e9 9a 00 00 00       	jmp    c0016e43 <ACPI::close(int, int, void*)+0xb1>
c0016da9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016dae:	75 37                	jne    c0016de7 <ACPI::close(int, int, void*)+0x55>
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	68 88 9b 02 c0       	push   0xc0029b88
c0016db8:	e8 cc b9 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	a1 08 d0 02 c0       	mov    eax,ds:0xc002d008
c0016dc5:	85 c0                	test   eax,eax
c0016dc7:	74 07                	je     c0016dd0 <ACPI::close(int, int, void*)+0x3e>
c0016dc9:	a1 08 d0 02 c0       	mov    eax,ds:0xc002d008
c0016dce:	ff d0                	call   eax
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	68 5c 9c 02 c0       	push   0xc0029c5c
c0016dd8:	e8 c6 2a 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0016ddd:	83 c4 10             	add    esp,0x10
c0016de0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016de5:	eb 5c                	jmp    c0016e43 <ACPI::close(int, int, void*)+0xb1>
c0016de7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016dec:	75 50                	jne    c0016e3e <ACPI::close(int, int, void*)+0xac>
c0016dee:	a1 04 d0 02 c0       	mov    eax,ds:0xc002d004
c0016df3:	85 c0                	test   eax,eax
c0016df5:	74 07                	je     c0016dfe <ACPI::close(int, int, void*)+0x6c>
c0016df7:	a1 04 d0 02 c0       	mov    eax,ds:0xc002d004
c0016dfc:	ff d0                	call   eax
c0016dfe:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016e03:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016e08:	83 e0 02             	and    eax,0x2
c0016e0b:	74 1c                	je     c0016e29 <ACPI::close(int, int, void*)+0x97>
c0016e0d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e18:	89 c2                	mov    edx,eax
c0016e1a:	ec                   	in     al,dx
c0016e1b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e1f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e27:	eb da                	jmp    c0016e03 <ACPI::close(int, int, void*)+0x71>
c0016e29:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e30:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e35:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e3d:	ee                   	out    dx,al
c0016e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e43:	83 c4 1c             	add    esp,0x1c
c0016e46:	c3                   	ret    

c0016e47 <findRSDP()>:
c0016e47:	83 ec 1c             	sub    esp,0x1c
c0016e4a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016e4f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e55:	83 e0 04             	and    eax,0x4
c0016e58:	84 c0                	test   al,al
c0016e5a:	75 07                	jne    c0016e63 <findRSDP()+0x1c>
c0016e5c:	b8 00 00 00 00       	mov    eax,0x0
c0016e61:	eb 6a                	jmp    c0016ecd <findRSDP()+0x86>
c0016e63:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0016e68:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e6d:	7f 1b                	jg     c0016e8a <findRSDP()+0x43>
c0016e6f:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016e74:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e7a:	83 e2 fb             	and    edx,0xfffffffb
c0016e7d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e83:	b8 00 00 00 00       	mov    eax,0x0
c0016e88:	eb 43                	jmp    c0016ecd <findRSDP()+0x86>
c0016e8a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016e92:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016e9a:	77 2c                	ja     c0016ec8 <findRSDP()+0x81>
c0016e9c:	83 ec 04             	sub    esp,0x4
c0016e9f:	6a 08                	push   0x8
c0016ea1:	68 95 9b 02 c0       	push   0xc0029b95
c0016ea6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eaa:	e8 43 97 fe ff       	call   c00005f2 <memcmp>
c0016eaf:	83 c4 10             	add    esp,0x10
c0016eb2:	85 c0                	test   eax,eax
c0016eb4:	0f 94 c0             	sete   al
c0016eb7:	84 c0                	test   al,al
c0016eb9:	74 06                	je     c0016ec1 <findRSDP()+0x7a>
c0016ebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ebf:	eb 0c                	jmp    c0016ecd <findRSDP()+0x86>
c0016ec1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016ec6:	eb ca                	jmp    c0016e92 <findRSDP()+0x4b>
c0016ec8:	b8 00 00 00 00       	mov    eax,0x0
c0016ecd:	83 c4 1c             	add    esp,0x1c
c0016ed0:	c3                   	ret    

c0016ed1 <loadACPITables(unsigned char*)>:
c0016ed1:	56                   	push   esi
c0016ed2:	53                   	push   ebx
c0016ed3:	83 ec 44             	sub    esp,0x44
c0016ed6:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0016edb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ee1:	83 e0 04             	and    eax,0x4
c0016ee4:	84 c0                	test   al,al
c0016ee6:	0f 84 05 02 00 00    	je     c00170f1 <loadACPITables(unsigned char*)+0x220>
c0016eec:	a0 20 d2 02 c0       	mov    al,ds:0xc002d220
c0016ef1:	84 c0                	test   al,al
c0016ef3:	74 75                	je     c0016f6a <loadACPITables(unsigned char*)+0x99>
c0016ef5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ef9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f04:	83 e8 24             	sub    eax,0x24
c0016f07:	c1 e8 03             	shr    eax,0x3
c0016f0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f0e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f1a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f1e:	0f 8d b2 00 00 00    	jge    c0016fd6 <loadACPITables(unsigned char*)+0x105>
c0016f24:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f28:	83 c0 24             	add    eax,0x24
c0016f2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f3b:	c1 e0 03             	shl    eax,0x3
c0016f3e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f46:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f49:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f4b:	89 c1                	mov    ecx,eax
c0016f4d:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c0016f52:	8d 50 01             	lea    edx,[eax+0x1]
c0016f55:	89 15 0c d0 02 c0    	mov    DWORD PTR ds:0xc002d00c,edx
c0016f5b:	89 ca                	mov    edx,ecx
c0016f5d:	89 14 c5 24 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fdc],edx
c0016f64:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f68:	eb ac                	jmp    c0016f16 <loadACPITables(unsigned char*)+0x45>
c0016f6a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f79:	83 e8 24             	sub    eax,0x24
c0016f7c:	c1 e8 02             	shr    eax,0x2
c0016f7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f83:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016f8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f8f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016f93:	7d 41                	jge    c0016fd6 <loadACPITables(unsigned char*)+0x105>
c0016f95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f99:	83 c0 24             	add    eax,0x24
c0016f9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fa4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fac:	c1 e0 02             	shl    eax,0x2
c0016faf:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fb7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016fb9:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c0016fbe:	8d 50 01             	lea    edx,[eax+0x1]
c0016fc1:	89 15 0c d0 02 c0    	mov    DWORD PTR ds:0xc002d00c,edx
c0016fc7:	89 ca                	mov    edx,ecx
c0016fc9:	89 14 c5 24 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fdc],edx
c0016fd0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016fd4:	eb b5                	jmp    c0016f8b <loadACPITables(unsigned char*)+0xba>
c0016fd6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016fde:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c0016fe3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016fe7:	0f 8d 05 01 00 00    	jge    c00170f2 <loadACPITables(unsigned char*)+0x221>
c0016fed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ff1:	8b 04 c5 24 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2fdc]
c0016ff8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017008:	25 ff 0f 00 00       	and    eax,0xfff
c001700d:	89 c6                	mov    esi,eax
c001700f:	e8 15 a9 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0017014:	89 c3                	mov    ebx,eax
c0017016:	83 ec 0c             	sub    esp,0xc
c0017019:	6a 01                	push   0x1
c001701b:	e8 79 a7 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c0017020:	83 c4 10             	add    esp,0x10
c0017023:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017027:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001702d:	83 ec 0c             	sub    esp,0xc
c0017030:	6a 01                	push   0x1
c0017032:	6a 01                	push   0x1
c0017034:	50                   	push   eax
c0017035:	52                   	push   edx
c0017036:	53                   	push   ebx
c0017037:	e8 1c b1 ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001703c:	83 c4 20             	add    esp,0x20
c001703f:	09 f0                	or     eax,esi
c0017041:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017045:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017049:	c1 e0 03             	shl    eax,0x3
c001704c:	05 20 d0 02 c0       	add    eax,0xc002d020
c0017051:	83 ec 04             	sub    esp,0x4
c0017054:	6a 04                	push   0x4
c0017056:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001705a:	50                   	push   eax
c001705b:	e8 f5 95 fe ff       	call   c0000655 <memcpy>
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001706a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001706e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017072:	05 00 10 00 00       	add    eax,0x1000
c0017077:	c1 e8 0c             	shr    eax,0xc
c001707a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001707e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017082:	89 04 24             	mov    DWORD PTR [esp],eax
c0017085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017089:	25 ff 0f 00 00       	and    eax,0xfff
c001708e:	89 c6                	mov    esi,eax
c0017090:	e8 94 a8 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0017095:	89 c3                	mov    ebx,eax
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001709e:	e8 f6 a6 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c00170a3:	83 c4 10             	add    esp,0x10
c00170a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170aa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170b0:	83 ec 0c             	sub    esp,0xc
c00170b3:	6a 01                	push   0x1
c00170b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170b9:	50                   	push   eax
c00170ba:	52                   	push   edx
c00170bb:	53                   	push   ebx
c00170bc:	e8 97 b0 ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170c1:	83 c4 20             	add    esp,0x20
c00170c4:	09 f0                	or     eax,esi
c00170c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00170cd:	83 ec 0c             	sub    esp,0xc
c00170d0:	50                   	push   eax
c00170d1:	e8 27 aa ff ff       	call   c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170e1:	89 14 c5 24 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fdc],edx
c00170e8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00170ec:	e9 ed fe ff ff       	jmp    c0016fde <loadACPITables(unsigned char*)+0x10d>
c00170f1:	90                   	nop
c00170f2:	83 c4 44             	add    esp,0x44
c00170f5:	5b                   	pop    ebx
c00170f6:	5e                   	pop    esi
c00170f7:	c3                   	ret    

c00170f8 <findRSDT(unsigned char*)>:
c00170f8:	56                   	push   esi
c00170f9:	53                   	push   ebx
c00170fa:	83 ec 44             	sub    esp,0x44
c00170fd:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017102:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017108:	83 e0 04             	and    eax,0x4
c001710b:	84 c0                	test   al,al
c001710d:	75 0a                	jne    c0017119 <findRSDT(unsigned char*)+0x21>
c001710f:	b8 00 00 00 00       	mov    eax,0x0
c0017114:	e9 f7 00 00 00       	jmp    c0017210 <findRSDT(unsigned char*)+0x118>
c0017119:	83 ec 04             	sub    esp,0x4
c001711c:	6a 24                	push   0x24
c001711e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017122:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017126:	50                   	push   eax
c0017127:	e8 29 95 fe ff       	call   c0000655 <memcpy>
c001712c:	83 c4 10             	add    esp,0x10
c001712f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017133:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017137:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001713f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017143:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017147:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001714b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001714f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017153:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017157:	25 ff 0f 00 00       	and    eax,0xfff
c001715c:	89 c6                	mov    esi,eax
c001715e:	e8 c6 a7 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c0017163:	89 c3                	mov    ebx,eax
c0017165:	83 ec 0c             	sub    esp,0xc
c0017168:	6a 02                	push   0x2
c001716a:	e8 2a a6 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c001716f:	83 c4 10             	add    esp,0x10
c0017172:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017176:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	6a 01                	push   0x1
c0017181:	6a 02                	push   0x2
c0017183:	50                   	push   eax
c0017184:	52                   	push   edx
c0017185:	53                   	push   ebx
c0017186:	e8 cd af ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001718b:	83 c4 20             	add    esp,0x20
c001718e:	09 f0                	or     eax,esi
c0017190:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017194:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017198:	25 ff 0f 00 00       	and    eax,0xfff
c001719d:	89 c6                	mov    esi,eax
c001719f:	e8 85 a7 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c00171a4:	89 c3                	mov    ebx,eax
c00171a6:	83 ec 0c             	sub    esp,0xc
c00171a9:	6a 02                	push   0x2
c00171ab:	e8 e9 a5 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171b7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171bd:	83 ec 0c             	sub    esp,0xc
c00171c0:	6a 01                	push   0x1
c00171c2:	6a 02                	push   0x2
c00171c4:	50                   	push   eax
c00171c5:	52                   	push   edx
c00171c6:	53                   	push   ebx
c00171c7:	e8 8c af ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171cc:	83 c4 20             	add    esp,0x20
c00171cf:	09 f0                	or     eax,esi
c00171d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171d5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00171da:	75 11                	jne    c00171ed <findRSDT(unsigned char*)+0xf5>
c00171dc:	c6 05 20 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d220,0x0
c00171e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171e7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171eb:	eb 1f                	jmp    c001720c <findRSDT(unsigned char*)+0x114>
c00171ed:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00171f2:	75 11                	jne    c0017205 <findRSDT(unsigned char*)+0x10d>
c00171f4:	c6 05 20 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d220,0x1
c00171fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171ff:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017203:	eb 07                	jmp    c001720c <findRSDT(unsigned char*)+0x114>
c0017205:	b8 00 00 00 00       	mov    eax,0x0
c001720a:	eb 04                	jmp    c0017210 <findRSDT(unsigned char*)+0x118>
c001720c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017210:	83 c4 44             	add    esp,0x44
c0017213:	5b                   	pop    ebx
c0017214:	5e                   	pop    esi
c0017215:	c3                   	ret    

c0017216 <findDataTable(unsigned char*, char*)>:
c0017216:	83 ec 1c             	sub    esp,0x1c
c0017219:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001721e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017224:	83 e0 04             	and    eax,0x4
c0017227:	84 c0                	test   al,al
c0017229:	75 07                	jne    c0017232 <findDataTable(unsigned char*, char*)+0x1c>
c001722b:	b8 00 00 00 00       	mov    eax,0x0
c0017230:	eb 7c                	jmp    c00172ae <findDataTable(unsigned char*, char*)+0x98>
c0017232:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001723a:	a1 0c d0 02 c0       	mov    eax,ds:0xc002d00c
c001723f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017243:	7d 3a                	jge    c001727f <findDataTable(unsigned char*, char*)+0x69>
c0017245:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017249:	c1 e0 03             	shl    eax,0x3
c001724c:	05 20 d0 02 c0       	add    eax,0xc002d020
c0017251:	83 ec 04             	sub    esp,0x4
c0017254:	6a 04                	push   0x4
c0017256:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001725a:	50                   	push   eax
c001725b:	e8 92 93 fe ff       	call   c00005f2 <memcmp>
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	85 c0                	test   eax,eax
c0017265:	0f 94 c0             	sete   al
c0017268:	84 c0                	test   al,al
c001726a:	74 0d                	je     c0017279 <findDataTable(unsigned char*, char*)+0x63>
c001726c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017270:	8b 04 c5 24 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2fdc]
c0017277:	eb 35                	jmp    c00172ae <findDataTable(unsigned char*, char*)+0x98>
c0017279:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001727d:	eb bb                	jmp    c001723a <findDataTable(unsigned char*, char*)+0x24>
c001727f:	a0 20 d2 02 c0       	mov    al,ds:0xc002d220
c0017284:	84 c0                	test   al,al
c0017286:	74 07                	je     c001728f <findDataTable(unsigned char*, char*)+0x79>
c0017288:	b8 58 00 00 00       	mov    eax,0x58
c001728d:	eb 05                	jmp    c0017294 <findDataTable(unsigned char*, char*)+0x7e>
c001728f:	b8 52 00 00 00       	mov    eax,0x52
c0017294:	83 ec 04             	sub    esp,0x4
c0017297:	50                   	push   eax
c0017298:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001729c:	68 80 9c 02 c0       	push   0xc0029c80
c00172a1:	e8 e3 b4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	b8 00 00 00 00       	mov    eax,0x0
c00172ae:	83 c4 1c             	add    esp,0x1c
c00172b1:	c3                   	ret    

c00172b2 <scanMADT()>:
c00172b2:	53                   	push   ebx
c00172b3:	83 ec 38             	sub    esp,0x38
c00172b6:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00172bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172c1:	83 e0 04             	and    eax,0x4
c00172c4:	84 c0                	test   al,al
c00172c6:	0f 84 63 04 00 00    	je     c001772f <scanMADT()+0x47d>
c00172cc:	e8 76 fb ff ff       	call   c0016e47 <findRSDP()>
c00172d1:	a3 2c d2 02 c0       	mov    ds:0xc002d22c,eax
c00172d6:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c00172db:	85 c0                	test   eax,eax
c00172dd:	75 19                	jne    c00172f8 <scanMADT()+0x46>
c00172df:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00172e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172ea:	83 e2 fb             	and    edx,0xfffffffb
c00172ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172f3:	e9 3b 04 00 00       	jmp    c0017733 <scanMADT()+0x481>
c00172f8:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c00172fd:	83 ec 0c             	sub    esp,0xc
c0017300:	50                   	push   eax
c0017301:	e8 f2 fd ff ff       	call   c00170f8 <findRSDT(unsigned char*)>
c0017306:	83 c4 10             	add    esp,0x10
c0017309:	a3 28 d2 02 c0       	mov    ds:0xc002d228,eax
c001730e:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017313:	85 c0                	test   eax,eax
c0017315:	75 19                	jne    c0017330 <scanMADT()+0x7e>
c0017317:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001731c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017322:	83 e2 fb             	and    edx,0xfffffffb
c0017325:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001732b:	e9 03 04 00 00       	jmp    c0017733 <scanMADT()+0x481>
c0017330:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017335:	83 ec 0c             	sub    esp,0xc
c0017338:	50                   	push   eax
c0017339:	e8 93 fb ff ff       	call   c0016ed1 <loadACPITables(unsigned char*)>
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017346:	83 ec 08             	sub    esp,0x8
c0017349:	68 9e 9b 02 c0       	push   0xc0029b9e
c001734e:	50                   	push   eax
c001734f:	e8 c2 fe ff ff       	call   c0017216 <findDataTable(unsigned char*, char*)>
c0017354:	83 c4 10             	add    esp,0x10
c0017357:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001735b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017360:	75 19                	jne    c001737b <scanMADT()+0xc9>
c0017362:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017367:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001736d:	83 e2 fe             	and    edx,0xfffffffe
c0017370:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017376:	e9 b8 03 00 00       	jmp    c0017733 <scanMADT()+0x481>
c001737b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017383:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017387:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001738a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001738e:	0f 87 9f 03 00 00    	ja     c0017733 <scanMADT()+0x481>
c0017394:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001739c:	0f 87 91 03 00 00    	ja     c0017733 <scanMADT()+0x481>
c00173a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173ae:	8d 50 01             	lea    edx,[eax+0x1]
c00173b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173bd:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173c5:	8d 50 01             	lea    edx,[eax+0x1]
c00173c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173d0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173d4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00173d8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00173dd:	0f 86 4f 03 00 00    	jbe    c0017732 <scanMADT()+0x480>
c00173e3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00173e8:	75 57                	jne    c0017441 <scanMADT()+0x18f>
c00173ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173ee:	8d 50 01             	lea    edx,[eax+0x1]
c00173f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173f5:	8a 15 20 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d420
c00173fb:	0f b6 d2             	movzx  edx,dl
c00173fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017402:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017406:	88 82 60 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2ba0],al
c001740c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017410:	8d 50 01             	lea    edx,[eax+0x1]
c0017413:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017417:	8a 15 20 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d420
c001741d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017420:	88 0d 20 d4 02 c0    	mov    BYTE PTR ds:0xc002d420,cl
c0017426:	0f b6 d2             	movzx  edx,dl
c0017429:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001742d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017431:	88 82 40 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2bc0],al
c0017437:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001743c:	e9 da 02 00 00       	jmp    c001771b <scanMADT()+0x469>
c0017441:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017446:	0f 85 14 01 00 00    	jne    c0017560 <scanMADT()+0x2ae>
c001744c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017450:	8d 50 01             	lea    edx,[eax+0x1]
c0017453:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017457:	8a 15 e0 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d2e0
c001745d:	0f b6 d2             	movzx  edx,dl
c0017460:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017464:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017468:	88 82 00 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2d00],al
c001746e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017472:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017476:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001747a:	01 d0                	add    eax,edx
c001747c:	83 c0 2c             	add    eax,0x2c
c001747f:	8a 00                	mov    al,BYTE PTR [eax]
c0017481:	0f b6 d0             	movzx  edx,al
c0017484:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017488:	8d 48 01             	lea    ecx,[eax+0x1]
c001748b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001748f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017493:	0f b6 c0             	movzx  eax,al
c0017496:	c1 e0 08             	shl    eax,0x8
c0017499:	89 d1                	mov    ecx,edx
c001749b:	09 c1                	or     ecx,eax
c001749d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174a1:	8d 50 02             	lea    edx,[eax+0x2]
c00174a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174ac:	0f b6 c0             	movzx  eax,al
c00174af:	c1 e0 10             	shl    eax,0x10
c00174b2:	09 c1                	or     ecx,eax
c00174b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b8:	8d 50 03             	lea    edx,[eax+0x3]
c00174bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174c3:	0f b6 c0             	movzx  eax,al
c00174c6:	c1 e0 18             	shl    eax,0x18
c00174c9:	09 c1                	or     ecx,eax
c00174cb:	89 ca                	mov    edx,ecx
c00174cd:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c00174d2:	0f b6 c0             	movzx  eax,al
c00174d5:	89 14 85 20 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ce0],edx
c00174dc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e9:	01 d0                	add    eax,edx
c00174eb:	83 c0 2c             	add    eax,0x2c
c00174ee:	8a 00                	mov    al,BYTE PTR [eax]
c00174f0:	0f b6 d0             	movzx  edx,al
c00174f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00174fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017502:	0f b6 c0             	movzx  eax,al
c0017505:	c1 e0 08             	shl    eax,0x8
c0017508:	89 d1                	mov    ecx,edx
c001750a:	09 c1                	or     ecx,eax
c001750c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017510:	8d 50 02             	lea    edx,[eax+0x2]
c0017513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017517:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001751b:	0f b6 c0             	movzx  eax,al
c001751e:	c1 e0 10             	shl    eax,0x10
c0017521:	09 c1                	or     ecx,eax
c0017523:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017527:	8d 50 03             	lea    edx,[eax+0x3]
c001752a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017532:	0f b6 c0             	movzx  eax,al
c0017535:	c1 e0 18             	shl    eax,0x18
c0017538:	09 c1                	or     ecx,eax
c001753a:	89 ca                	mov    edx,ecx
c001753c:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c0017541:	0f b6 c0             	movzx  eax,al
c0017544:	89 14 85 a0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c60],edx
c001754b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017550:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c0017555:	40                   	inc    eax
c0017556:	a2 e0 d2 02 c0       	mov    ds:0xc002d2e0,al
c001755b:	e9 bb 01 00 00       	jmp    c001771b <scanMADT()+0x469>
c0017560:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017565:	0f 85 e9 00 00 00    	jne    c0017654 <scanMADT()+0x3a2>
c001756b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001756f:	8d 50 01             	lea    edx,[eax+0x1]
c0017572:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017576:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001757a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001757e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017586:	8d 50 01             	lea    edx,[eax+0x1]
c0017589:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001758d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017591:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017595:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017599:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001759d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175a1:	01 d0                	add    eax,edx
c00175a3:	83 c0 2c             	add    eax,0x2c
c00175a6:	8a 00                	mov    al,BYTE PTR [eax]
c00175a8:	0f b6 d0             	movzx  edx,al
c00175ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175af:	8d 48 01             	lea    ecx,[eax+0x1]
c00175b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175b6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175ba:	0f b6 c0             	movzx  eax,al
c00175bd:	c1 e0 08             	shl    eax,0x8
c00175c0:	89 d1                	mov    ecx,edx
c00175c2:	09 c1                	or     ecx,eax
c00175c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c8:	8d 50 02             	lea    edx,[eax+0x2]
c00175cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175cf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175d3:	0f b6 c0             	movzx  eax,al
c00175d6:	c1 e0 10             	shl    eax,0x10
c00175d9:	09 c1                	or     ecx,eax
c00175db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175df:	8d 50 03             	lea    edx,[eax+0x3]
c00175e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175e6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175ea:	0f b6 c0             	movzx  eax,al
c00175ed:	c1 e0 18             	shl    eax,0x18
c00175f0:	09 c8                	or     eax,ecx
c00175f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175f6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017603:	01 d0                	add    eax,edx
c0017605:	83 c0 2c             	add    eax,0x2c
c0017608:	8a 00                	mov    al,BYTE PTR [eax]
c001760a:	0f b6 c0             	movzx  eax,al
c001760d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017611:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017614:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017618:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001761c:	0f b6 d2             	movzx  edx,dl
c001761f:	c1 e2 08             	shl    edx,0x8
c0017622:	09 d0                	or     eax,edx
c0017624:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017629:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001762e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017633:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017637:	88 90 c0 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4440],dl
c001763d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017642:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017647:	66 89 84 12 c0 d2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2d40],ax
c001764f:	e9 c7 00 00 00       	jmp    c001771b <scanMADT()+0x469>
c0017654:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017659:	0f 85 b0 00 00 00    	jne    c001770f <scanMADT()+0x45d>
c001765f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017663:	8d 50 01             	lea    edx,[eax+0x1]
c0017666:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001766a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001766e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017672:	0f b6 c0             	movzx  eax,al
c0017675:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017679:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001767d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017681:	01 d0                	add    eax,edx
c0017683:	83 c0 2c             	add    eax,0x2c
c0017686:	8a 00                	mov    al,BYTE PTR [eax]
c0017688:	0f b6 d0             	movzx  edx,al
c001768b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001768f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017692:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017696:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001769a:	0f b6 c0             	movzx  eax,al
c001769d:	c1 e0 08             	shl    eax,0x8
c00176a0:	09 d0                	or     eax,edx
c00176a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176a6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00176ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176af:	8d 50 01             	lea    edx,[eax+0x1]
c00176b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176be:	0f b6 c0             	movzx  eax,al
c00176c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c9:	c1 e0 08             	shl    eax,0x8
c00176cc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00176d0:	89 c1                	mov    ecx,eax
c00176d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176d6:	c1 e0 18             	shl    eax,0x18
c00176d9:	89 c3                	mov    ebx,eax
c00176db:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c00176e0:	8d 50 01             	lea    edx,[eax+0x1]
c00176e3:	89 15 30 d2 02 c0    	mov    DWORD PTR ds:0xc002d230,edx
c00176e9:	09 d9                	or     ecx,ebx
c00176eb:	89 ca                	mov    edx,ecx
c00176ed:	89 14 85 40 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2dc0],edx
c00176f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017700:	68 b0 9c 02 c0       	push   0xc0029cb0
c0017705:	e8 7f b0 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	eb 0c                	jmp    c001771b <scanMADT()+0x469>
c001770f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017714:	75 05                	jne    c001771b <scanMADT()+0x469>
c0017716:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001771b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017720:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017724:	01 d0                	add    eax,edx
c0017726:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001772a:	e9 54 fc ff ff       	jmp    c0017383 <scanMADT()+0xd1>
c001772f:	90                   	nop
c0017730:	eb 01                	jmp    c0017733 <scanMADT()+0x481>
c0017732:	90                   	nop
c0017733:	83 c4 38             	add    esp,0x38
c0017736:	5b                   	pop    ebx
c0017737:	c3                   	ret    

c0017738 <ACPI::ACPI()>:
c0017738:	83 ec 0c             	sub    esp,0xc
c001773b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001773f:	83 ec 08             	sub    esp,0x8
c0017742:	68 a3 9b 02 c0       	push   0xc0029ba3
c0017747:	50                   	push   eax
c0017748:	e8 1b c6 ff ff       	call   c0013d68 <Device::Device(char const*)>
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	ba 88 9d 02 c0       	mov    edx,0xc0029d88
c0017755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017759:	89 10                	mov    DWORD PTR [eax],edx
c001775b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001775f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017778:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017786:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001778d:	e8 20 fb ff ff       	call   c00172b2 <scanMADT()>
c0017792:	90                   	nop
c0017793:	83 c4 0c             	add    esp,0xc
c0017796:	c3                   	ret    
c0017797:	90                   	nop

c0017798 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017798:	83 ec 2c             	sub    esp,0x2c
c001779b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001779f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177a3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00177ab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00177b0:	88 d0                	mov    al,dl
c00177b2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177bb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177c7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00177d1:	0f 8d 97 00 00 00    	jge    c001786e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00177d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177df:	83 c2 2a             	add    edx,0x2a
c00177e2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00177e6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00177eb:	75 78                	jne    c0017865 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177f5:	83 c2 2a             	add    edx,0x2a
c00177f8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00177fc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017800:	75 63                	jne    c0017865 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017802:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017807:	74 3a                	je     c0017843 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017809:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001780d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017811:	83 c2 2a             	add    edx,0x2a
c0017814:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017818:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001781c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001781f:	39 c2                	cmp    edx,eax
c0017821:	74 10                	je     c0017833 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017823:	83 ec 0c             	sub    esp,0xc
c0017826:	68 ec 9c 02 c0       	push   0xc0029cec
c001782b:	e8 73 20 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	68 a8 9b 02 c0       	push   0xc0029ba8
c001783b:	e8 63 20 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017847:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001784b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001784f:	83 c2 2a             	add    edx,0x2a
c0017852:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017856:	8b 02                	mov    eax,DWORD PTR [edx]
c0017858:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001785b:	89 01                	mov    DWORD PTR [ecx],eax
c001785d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017860:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017865:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017869:	e9 55 ff ff ff       	jmp    c00177c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001786e:	90                   	nop
c001786f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017873:	83 c4 2c             	add    esp,0x2c
c0017876:	c2 04 00             	ret    0x4
c0017879:	90                   	nop

c001787a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001787a:	56                   	push   esi
c001787b:	53                   	push   ebx
c001787c:	83 ec 14             	sub    esp,0x14
c001787f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017883:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017887:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001788b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017890:	88 c8                	mov    al,cl
c0017892:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017896:	88 d0                	mov    al,dl
c0017898:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001789c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a0:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00178a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178aa:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00178b0:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00178b5:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178ba:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178bf:	83 ec 04             	sub    esp,0x4
c00178c2:	56                   	push   esi
c00178c3:	53                   	push   ebx
c00178c4:	51                   	push   ecx
c00178c5:	52                   	push   edx
c00178c6:	50                   	push   eax
c00178c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178cb:	68 1c 9d 02 c0       	push   0xc0029d1c
c00178d0:	e8 b4 ae ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00178d5:	83 c4 20             	add    esp,0x20
c00178d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178dc:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00178e9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00178ed:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00178f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00178fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178ff:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017906:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001790b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790f:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017915:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017919:	8d 48 01             	lea    ecx,[eax+0x1]
c001791c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017920:	83 c2 2a             	add    edx,0x2a
c0017923:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017935:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017938:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001793c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017944:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001794a:	8d 50 01             	lea    edx,[eax+0x1]
c001794d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017951:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017961:	3d 00 08 00 00       	cmp    eax,0x800
c0017966:	75 10                	jne    c0017978 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017968:	83 ec 0c             	sub    esp,0xc
c001796b:	68 b7 9b 02 c0       	push   0xc0029bb7
c0017970:	e8 2e 1f 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c0017975:	83 c4 10             	add    esp,0x10
c0017978:	90                   	nop
c0017979:	83 c4 14             	add    esp,0x14
c001797c:	5b                   	pop    ebx
c001797d:	5e                   	pop    esi
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017980:	b8 00 00 00 00       	mov    eax,0x0
c0017985:	c3                   	ret    

c0017986 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017986:	83 ec 1c             	sub    esp,0x1c
c0017989:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001798d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017990:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017994:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017999:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001799e:	83 ec 08             	sub    esp,0x8
c00179a1:	52                   	push   edx
c00179a2:	50                   	push   eax
c00179a3:	e8 44 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00179a8:	83 c4 10             	add    esp,0x10
c00179ab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00179af:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00179b4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179b9:	83 ec 04             	sub    esp,0x4
c00179bc:	6a 01                	push   0x1
c00179be:	52                   	push   edx
c00179bf:	50                   	push   eax
c00179c0:	e8 3d 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179c5:	83 c4 10             	add    esp,0x10
c00179c8:	90                   	nop
c00179c9:	83 c4 1c             	add    esp,0x1c
c00179cc:	c3                   	ret    
c00179cd:	90                   	nop

c00179ce <ACPI::open(int, int, void*)>:
c00179ce:	53                   	push   ebx
c00179cf:	83 ec 28             	sub    esp,0x28
c00179d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d6:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00179dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179e1:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00179e7:	84 c0                	test   al,al
c00179e9:	74 67                	je     c0017a52 <ACPI::open(int, int, void*)+0x84>
c00179eb:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00179f3:	83 ec 0c             	sub    esp,0xc
c00179f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179fa:	e8 d5 7a ff ff       	call   c000f4d4 <malloc>
c00179ff:	83 c4 10             	add    esp,0x10
c0017a02:	89 c3                	mov    ebx,eax
c0017a04:	83 ec 0c             	sub    esp,0xc
c0017a07:	53                   	push   ebx
c0017a08:	e8 47 9e 00 00       	call   c0021854 <PCI::PCI()>
c0017a0d:	83 c4 10             	add    esp,0x10
c0017a10:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a18:	83 ec 08             	sub    esp,0x8
c0017a1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a1f:	50                   	push   eax
c0017a20:	e8 53 c1 ff ff       	call   c0013b78 <Device::addChild(Device*)>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a2e:	83 c0 08             	add    eax,0x8
c0017a31:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a33:	6a 00                	push   0x0
c0017a35:	6a 00                	push   0x0
c0017a37:	6a 00                	push   0x0
c0017a39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a3d:	ff d0                	call   eax
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	68 d4 9b 02 c0       	push   0xc0029bd4
c0017a4a:	e8 3a ad ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	83 ec 0c             	sub    esp,0xc
c0017a55:	68 df 9b 02 c0       	push   0xc0029bdf
c0017a5a:	e8 9f 41 00 00       	call   c001bbfe <Thr::loadKernelSymbolTable(char const*)>
c0017a5f:	83 c4 10             	add    esp,0x10
c0017a62:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0017a68:	83 ec 08             	sub    esp,0x8
c0017a6b:	6a 01                	push   0x1
c0017a6d:	68 fd 9b 02 c0       	push   0xc0029bfd
c0017a72:	e8 47 4c 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	83 ec 08             	sub    esp,0x8
c0017a7d:	53                   	push   ebx
c0017a7e:	50                   	push   eax
c0017a7f:	e8 49 4e 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c0017a84:	83 c4 10             	add    esp,0x10
c0017a87:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0017a8d:	83 ec 08             	sub    esp,0x8
c0017a90:	6a 01                	push   0x1
c0017a92:	68 1a 9c 02 c0       	push   0xc0029c1a
c0017a97:	e8 22 4c 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c0017a9c:	83 c4 10             	add    esp,0x10
c0017a9f:	83 ec 08             	sub    esp,0x8
c0017aa2:	53                   	push   ebx
c0017aa3:	50                   	push   eax
c0017aa4:	e8 24 4e 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0017ab1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ab7:	83 e0 04             	and    eax,0x4
c0017aba:	84 c0                	test   al,al
c0017abc:	0f 84 d6 00 00 00    	je     c0017b98 <ACPI::open(int, int, void*)+0x1ca>
c0017ac2:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017aca:	83 ec 0c             	sub    esp,0xc
c0017acd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ad1:	e8 fe 79 ff ff       	call   c000f4d4 <malloc>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	89 c3                	mov    ebx,eax
c0017adb:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0017ae0:	83 ec 04             	sub    esp,0x4
c0017ae3:	50                   	push   eax
c0017ae4:	68 37 9c 02 c0       	push   0xc0029c37
c0017ae9:	53                   	push   ebx
c0017aea:	e8 c9 b1 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017af6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017afb:	74 17                	je     c0017b14 <ACPI::open(int, int, void*)+0x146>
c0017afd:	83 ec 0c             	sub    esp,0xc
c0017b00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b04:	e8 81 b4 ff ff       	call   c0012f8a <File::exists()>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	84 c0                	test   al,al
c0017b0e:	74 04                	je     c0017b14 <ACPI::open(int, int, void*)+0x146>
c0017b10:	b0 01                	mov    al,0x1
c0017b12:	eb 02                	jmp    c0017b16 <ACPI::open(int, int, void*)+0x148>
c0017b14:	b0 00                	mov    al,0x0
c0017b16:	84 c0                	test   al,al
c0017b18:	74 25                	je     c0017b3f <ACPI::open(int, int, void*)+0x171>
c0017b1a:	8b 1d 68 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c968
c0017b20:	83 ec 08             	sub    esp,0x8
c0017b23:	6a 01                	push   0x1
c0017b25:	68 37 9c 02 c0       	push   0xc0029c37
c0017b2a:	e8 8f 4b 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	83 ec 08             	sub    esp,0x8
c0017b35:	53                   	push   ebx
c0017b36:	50                   	push   eax
c0017b37:	e8 91 4d 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c0017b3c:	83 c4 10             	add    esp,0x10
c0017b3f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b44:	74 1e                	je     c0017b64 <ACPI::open(int, int, void*)+0x196>
c0017b46:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b4b:	74 17                	je     c0017b64 <ACPI::open(int, int, void*)+0x196>
c0017b4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b53:	83 c0 08             	add    eax,0x8
c0017b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b58:	83 ec 0c             	sub    esp,0xc
c0017b5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b5f:	ff d0                	call   eax
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	a1 28 d2 02 c0       	mov    eax,ds:0xc002d228
c0017b69:	83 ec 08             	sub    esp,0x8
c0017b6c:	68 54 9c 02 c0       	push   0xc0029c54
c0017b71:	50                   	push   eax
c0017b72:	e8 9f f6 ff ff       	call   c0017216 <findDataTable(unsigned char*, char*)>
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b7e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b83:	74 13                	je     c0017b98 <ACPI::open(int, int, void*)+0x1ca>
c0017b85:	83 ec 08             	sub    esp,0x8
c0017b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b90:	e8 f1 fd ff ff       	call   c0017986 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	b8 00 00 00 00       	mov    eax,0x0
c0017b9d:	83 c4 28             	add    esp,0x28
c0017ba0:	5b                   	pop    ebx
c0017ba1:	c3                   	ret    

c0017ba2 <ACPI::sleep()>:
c0017ba2:	83 ec 0c             	sub    esp,0xc
c0017ba5:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c0017baa:	85 c0                	test   eax,eax
c0017bac:	74 07                	je     c0017bb5 <ACPI::sleep()+0x13>
c0017bae:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c0017bb3:	ff d0                	call   eax
c0017bb5:	90                   	nop
c0017bb6:	83 c4 0c             	add    esp,0xc
c0017bb9:	c3                   	ret    

c0017bba <CPU::close(int, int, void*)>:
c0017bba:	31 c0                	xor    eax,eax
c0017bbc:	c3                   	ret    
c0017bbd:	90                   	nop

c0017bbe <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017bbe:	55                   	push   ebp
c0017bbf:	57                   	push   edi
c0017bc0:	56                   	push   esi
c0017bc1:	53                   	push   ebx
c0017bc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bc6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bca:	89 ce                	mov    esi,ecx
c0017bcc:	89 d5                	mov    ebp,edx
c0017bce:	80 f9 04             	cmp    cl,0x4
c0017bd1:	75 28                	jne    c0017bfb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017bd3:	8d 42 f9             	lea    eax,[edx-0x7]
c0017bd6:	3c 03                	cmp    al,0x3
c0017bd8:	0f 86 63 01 00 00    	jbe    c0017d41 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bde:	80 fa 03             	cmp    dl,0x3
c0017be1:	0f 84 5a 01 00 00    	je     c0017d41 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017be7:	8d 7a f2             	lea    edi,[edx-0xe]
c0017bea:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017bef:	89 fb                	mov    ebx,edi
c0017bf1:	80 fb 01             	cmp    bl,0x1
c0017bf4:	77 4e                	ja     c0017c44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017bf6:	e9 52 01 00 00       	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bfb:	80 f9 05             	cmp    cl,0x5
c0017bfe:	75 4d                	jne    c0017c4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017c00:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017c05:	80 fa 03             	cmp    dl,0x3
c0017c08:	0f 86 3f 01 00 00    	jbe    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c0e:	8d 7a fa             	lea    edi,[edx-0x6]
c0017c11:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017c16:	89 fb                	mov    ebx,edi
c0017c18:	80 fb 01             	cmp    bl,0x1
c0017c1b:	0f 86 2c 01 00 00    	jbe    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c21:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017c26:	80 fa 08             	cmp    dl,0x8
c0017c29:	0f 84 1e 01 00 00    	je     c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2f:	89 d7                	mov    edi,edx
c0017c31:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017c36:	83 e7 fb             	and    edi,0xfffffffb
c0017c39:	89 fb                	mov    ebx,edi
c0017c3b:	80 fb 09             	cmp    bl,0x9
c0017c3e:	0f 84 09 01 00 00    	je     c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c44:	31 c0                	xor    eax,eax
c0017c46:	89 eb                	mov    ebx,ebp
c0017c48:	0f b6 fb             	movzx  edi,bl
c0017c4b:	eb 30                	jmp    c0017c7d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c4d:	31 c0                	xor    eax,eax
c0017c4f:	80 f9 06             	cmp    cl,0x6
c0017c52:	75 f2                	jne    c0017c46 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c54:	80 fa 0a             	cmp    dl,0xa
c0017c57:	77 ed                	ja     c0017c46 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c59:	bf de 05 00 00       	mov    edi,0x5de
c0017c5e:	0f a3 d7             	bt     edi,edx
c0017c61:	73 e3                	jae    c0017c46 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c63:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017c68:	e9 e0 00 00 00       	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c6d:	39 c7                	cmp    edi,eax
c0017c6f:	0f 84 d3 00 00 00    	je     c0017d48 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c75:	40                   	inc    eax
c0017c76:	3d d0 00 00 00       	cmp    eax,0xd0
c0017c7b:	74 09                	je     c0017c86 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017c7d:	89 f3                	mov    ebx,esi
c0017c7f:	80 fb 0f             	cmp    bl,0xf
c0017c82:	75 f1                	jne    c0017c75 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017c84:	eb e7                	jmp    c0017c6d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017c86:	80 f9 10             	cmp    cl,0x10
c0017c89:	75 14                	jne    c0017c9f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017c8b:	8d 42 fc             	lea    eax,[edx-0x4]
c0017c8e:	83 e0 fb             	and    eax,0xfffffffb
c0017c91:	3c 02                	cmp    al,0x2
c0017c93:	76 34                	jbe    c0017cc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017c95:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017c9a:	80 fa 02             	cmp    dl,0x2
c0017c9d:	eb 24                	jmp    c0017cc3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017c9f:	80 f9 11             	cmp    cl,0x11
c0017ca2:	75 13                	jne    c0017cb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017ca4:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017ca9:	80 fa 03             	cmp    dl,0x3
c0017cac:	0f 85 9b 00 00 00    	jne    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cb2:	e9 91 00 00 00       	jmp    c0017d48 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017cb7:	80 f9 12             	cmp    cl,0x12
c0017cba:	75 14                	jne    c0017cd0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017cbc:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017cc1:	fe ca                	dec    dl
c0017cc3:	0f 85 84 00 00 00    	jne    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cc9:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017cce:	eb 7d                	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd0:	80 f9 14             	cmp    cl,0x14
c0017cd3:	75 12                	jne    c0017ce7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017cd5:	4a                   	dec    edx
c0017cd6:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017cdb:	80 fa 01             	cmp    dl,0x1
c0017cde:	77 6d                	ja     c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ce0:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017ce5:	eb 66                	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ce7:	80 f9 15             	cmp    cl,0x15
c0017cea:	75 31                	jne    c0017d1d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017cec:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017cf1:	80 fa 01             	cmp    dl,0x1
c0017cf4:	74 57                	je     c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cf6:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017cfb:	80 fa 13             	cmp    dl,0x13
c0017cfe:	76 0c                	jbe    c0017d0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017d00:	80 fa 30             	cmp    dl,0x30
c0017d03:	75 48                	jne    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d05:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017d0a:	eb 41                	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d0c:	b9 04 00 09 00       	mov    ecx,0x90004
c0017d11:	0f a3 d1             	bt     ecx,edx
c0017d14:	73 37                	jae    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d16:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017d1b:	eb 30                	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d1d:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017d22:	80 f9 16             	cmp    cl,0x16
c0017d25:	75 26                	jne    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d27:	b8 50 be 02 c0       	mov    eax,0xc002be50
c0017d2c:	84 d2                	test   dl,dl
c0017d2e:	74 1d                	je     c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d30:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017d35:	80 fa 30             	cmp    dl,0x30
c0017d38:	75 13                	jne    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d3a:	b8 60 be 02 c0       	mov    eax,0xc002be60
c0017d3f:	eb 0c                	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d41:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017d46:	eb 05                	jmp    c0017d4d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d48:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017d4d:	5b                   	pop    ebx
c0017d4e:	5e                   	pop    esi
c0017d4f:	5f                   	pop    edi
c0017d50:	5d                   	pop    ebp
c0017d51:	c3                   	ret    

c0017d52 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d5a:	80 f9 04             	cmp    cl,0x4
c0017d5d:	75 6b                	jne    c0017dca <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d5f:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017d64:	80 fa 01             	cmp    dl,0x1
c0017d67:	0f 86 92 02 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d6d:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017d72:	80 fa 02             	cmp    dl,0x2
c0017d75:	0f 84 84 02 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7b:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017d80:	80 fa 03             	cmp    dl,0x3
c0017d83:	0f 84 76 02 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d89:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017d8e:	80 fa 04             	cmp    dl,0x4
c0017d91:	0f 84 68 02 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d97:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017d9c:	80 fa 05             	cmp    dl,0x5
c0017d9f:	0f 84 5a 02 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da5:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017daa:	80 fa 07             	cmp    dl,0x7
c0017dad:	0f 84 4c 02 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db3:	83 ea 08             	sub    edx,0x8
c0017db6:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017dbb:	80 fa 01             	cmp    dl,0x1
c0017dbe:	0f 87 3b 02 00 00    	ja     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc4:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017dc9:	c3                   	ret    
c0017dca:	80 f9 05             	cmp    cl,0x5
c0017dcd:	75 45                	jne    c0017e14 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017dcf:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017dd2:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017dd7:	80 f9 02             	cmp    cl,0x2
c0017dda:	0f 86 1f 02 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de0:	80 fa 04             	cmp    dl,0x4
c0017de3:	0f 84 f3 01 00 00    	je     c0017fdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017de9:	80 fa 07             	cmp    dl,0x7
c0017dec:	0f 84 0d 02 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df2:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017df7:	80 fa 08             	cmp    dl,0x8
c0017dfa:	0f 84 ff 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e00:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017e05:	80 fa 09             	cmp    dl,0x9
c0017e08:	0f 85 f1 01 00 00    	jne    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e0e:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017e13:	c3                   	ret    
c0017e14:	80 f9 06             	cmp    cl,0x6
c0017e17:	0f 85 85 01 00 00    	jne    c0017fa2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e1d:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017e22:	80 fa 01             	cmp    dl,0x1
c0017e25:	0f 84 d4 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2b:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e2e:	3c 01                	cmp    al,0x1
c0017e30:	0f 86 ac 01 00 00    	jbe    c0017fe2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e36:	80 fa 03             	cmp    dl,0x3
c0017e39:	0f 84 a3 01 00 00    	je     c0017fe2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e3f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e42:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017e47:	80 f9 01             	cmp    cl,0x1
c0017e4a:	0f 86 af 01 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e50:	80 fa 09             	cmp    dl,0x9
c0017e53:	0f 84 8f 01 00 00    	je     c0017fe8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e59:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e5c:	80 f9 01             	cmp    cl,0x1
c0017e5f:	0f 86 9a 01 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e65:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e6a:	80 fa 0d             	cmp    dl,0xd
c0017e6d:	0f 84 8c 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e73:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017e78:	80 fa 0e             	cmp    dl,0xe
c0017e7b:	0f 84 7e 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e81:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017e86:	80 fa 0f             	cmp    dl,0xf
c0017e89:	0f 84 70 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e8f:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e94:	80 fa 15             	cmp    dl,0x15
c0017e97:	0f 84 62 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e9d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017ea0:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ea5:	80 f9 01             	cmp    cl,0x1
c0017ea8:	0f 86 51 01 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eae:	80 fa 1a             	cmp    dl,0x1a
c0017eb1:	0f 84 37 01 00 00    	je     c0017fee <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017eb7:	80 fa 1c             	cmp    dl,0x1c
c0017eba:	0f 84 34 01 00 00    	je     c0017ff4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017ec0:	80 fa 1d             	cmp    dl,0x1d
c0017ec3:	0f 84 36 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec9:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017ece:	80 fa 25             	cmp    dl,0x25
c0017ed1:	0f 84 28 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed7:	8d 4a da             	lea    ecx,[edx-0x26]
c0017eda:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017edf:	80 f9 01             	cmp    cl,0x1
c0017ee2:	0f 86 17 01 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee8:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017eed:	80 fa 2a             	cmp    dl,0x2a
c0017ef0:	0f 84 09 01 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef6:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017efb:	80 fa 2c             	cmp    dl,0x2c
c0017efe:	0f 84 fb 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f04:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f09:	80 fa 2d             	cmp    dl,0x2d
c0017f0c:	0f 84 ed 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f12:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017f17:	80 fa 2e             	cmp    dl,0x2e
c0017f1a:	0f 84 df 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f20:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f25:	80 fa 2f             	cmp    dl,0x2f
c0017f28:	0f 84 d1 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f2e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f31:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017f36:	80 f9 01             	cmp    cl,0x1
c0017f39:	0f 86 c0 00 00 00    	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f3f:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f44:	80 fa 37             	cmp    dl,0x37
c0017f47:	0f 84 b2 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4d:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f52:	80 fa 3a             	cmp    dl,0x3a
c0017f55:	0f 84 a4 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f5b:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017f60:	80 fa 3c             	cmp    dl,0x3c
c0017f63:	0f 84 96 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f69:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017f6e:	80 fa 3d             	cmp    dl,0x3d
c0017f71:	0f 84 88 00 00 00    	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f77:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f7c:	80 fa 3e             	cmp    dl,0x3e
c0017f7f:	74 7e                	je     c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f81:	8d 42 bb             	lea    eax,[edx-0x45]
c0017f84:	3c 01                	cmp    al,0x1
c0017f86:	76 72                	jbe    c0017ffa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f88:	80 fa 3f             	cmp    dl,0x3f
c0017f8b:	74 6d                	je     c0017ffa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f8d:	80 fa 4a             	cmp    dl,0x4a
c0017f90:	74 0a                	je     c0017f9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017f92:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017f97:	80 fa 4d             	cmp    dl,0x4d
c0017f9a:	75 63                	jne    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f9c:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017fa1:	c3                   	ret    
c0017fa2:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017fa7:	80 f9 0b             	cmp    cl,0xb
c0017faa:	75 0a                	jne    c0017fb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017fac:	fe ca                	dec    dl
c0017fae:	75 4f                	jne    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb0:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017fb5:	c3                   	ret    
c0017fb6:	80 f9 0f             	cmp    cl,0xf
c0017fb9:	75 44                	jne    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fbb:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017fc0:	80 fa 02             	cmp    dl,0x2
c0017fc3:	76 3a                	jbe    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fc5:	8d 42 fd             	lea    eax,[edx-0x3]
c0017fc8:	3c 01                	cmp    al,0x1
c0017fca:	76 0a                	jbe    c0017fd6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017fcc:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c0017fd1:	80 fa 06             	cmp    dl,0x6
c0017fd4:	75 29                	jne    c0017fff <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fd6:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017fdb:	c3                   	ret    
c0017fdc:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017fe1:	c3                   	ret    
c0017fe2:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017fe7:	c3                   	ret    
c0017fe8:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017fed:	c3                   	ret    
c0017fee:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017ff3:	c3                   	ret    
c0017ff4:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017ff9:	c3                   	ret    
c0017ffa:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017fff:	c3                   	ret    

c0018000 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018000:	60                   	pusha  
c0018001:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018005:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018009:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001800d:	9c                   	pushf  
c001800e:	fa                   	cli    
c001800f:	0f 09                	wbinvd 
c0018011:	0f 30                	wrmsr  
c0018013:	9d                   	popf   
c0018014:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018018:	89 02                	mov    DWORD PTR [edx],eax
c001801a:	61                   	popa   
c001801b:	c3                   	ret    

c001801c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001801c:	60                   	pusha  
c001801d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018021:	9c                   	pushf  
c0018022:	fa                   	cli    
c0018023:	0f 09                	wbinvd 
c0018025:	31 c0                	xor    eax,eax
c0018027:	31 d2                	xor    edx,edx
c0018029:	0f 32                	rdmsr  
c001802b:	9d                   	popf   
c001802c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018030:	89 02                	mov    DWORD PTR [edx],eax
c0018032:	61                   	popa   
c0018033:	c3                   	ret    

c0018034 <CPU::AMD_K6_writeback(int, int, int)>:
c0018034:	56                   	push   esi
c0018035:	53                   	push   ebx
c0018036:	83 ec 10             	sub    esp,0x10
c0018039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001803d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018042:	75 5d                	jne    c00180a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018044:	83 f8 08             	cmp    eax,0x8
c0018047:	75 09                	jne    c0018052 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018049:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001804e:	7e 13                	jle    c0018063 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018050:	eb 30                	jmp    c0018082 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018052:	83 f8 06             	cmp    eax,0x6
c0018055:	7c 4a                	jl     c00180a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018057:	83 f8 07             	cmp    eax,0x7
c001805a:	7e 07                	jle    c0018063 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001805c:	83 f8 09             	cmp    eax,0x9
c001805f:	74 21                	je     c0018082 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018061:	eb 3e                	jmp    c00180a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018063:	89 e6                	mov    esi,esp
c0018065:	8b 1d a4 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9a4
c001806b:	56                   	push   esi
c001806c:	c1 eb 15             	shr    ebx,0x15
c001806f:	68 82 00 00 c0       	push   0xc0000082
c0018074:	83 e3 7e             	and    ebx,0x7e
c0018077:	e8 a0 ff ff ff       	call   c001801c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001807c:	56                   	push   esi
c001807d:	6a 00                	push   0x0
c001807f:	53                   	push   ebx
c0018080:	eb 12                	jmp    c0018094 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018082:	89 e3                	mov    ebx,esp
c0018084:	53                   	push   ebx
c0018085:	68 82 00 00 c0       	push   0xc0000082
c001808a:	e8 8d ff ff ff       	call   c001801c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001808f:	53                   	push   ebx
c0018090:	6a 00                	push   0x0
c0018092:	6a 00                	push   0x0
c0018094:	68 82 00 00 c0       	push   0xc0000082
c0018099:	e8 62 ff ff ff       	call   c0018000 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001809e:	83 c4 18             	add    esp,0x18
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	5b                   	pop    ebx
c00180a5:	5e                   	pop    esi
c00180a6:	c3                   	ret    
c00180a7:	90                   	nop

c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00180a8:	55                   	push   ebp
c00180a9:	57                   	push   edi
c00180aa:	56                   	push   esi
c00180ab:	53                   	push   ebx
c00180ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00180b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180b8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180bc:	39 05 80 be 02 c0    	cmp    DWORD PTR ds:0xc002be80,eax
c00180c2:	75 23                	jne    c00180e7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180c4:	a1 8c d4 02 c0       	mov    eax,ds:0xc002d48c
c00180c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180cd:	89 06                	mov    DWORD PTR [esi],eax
c00180cf:	a1 88 d4 02 c0       	mov    eax,ds:0xc002d488
c00180d4:	89 07                	mov    DWORD PTR [edi],eax
c00180d6:	a1 84 d4 02 c0       	mov    eax,ds:0xc002d484
c00180db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00180de:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c00180e3:	89 02                	mov    DWORD PTR [edx],eax
c00180e5:	eb 3f                	jmp    c0018126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00180e7:	31 c9                	xor    ecx,ecx
c00180e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180ed:	0f a2                	cpuid  
c00180ef:	89 06                	mov    DWORD PTR [esi],eax
c00180f1:	89 1f                	mov    DWORD PTR [edi],ebx
c00180f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180f7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00180fa:	89 10                	mov    DWORD PTR [eax],edx
c00180fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018100:	a3 80 be 02 c0       	mov    ds:0xc002be80,eax
c0018105:	8b 06                	mov    eax,DWORD PTR [esi]
c0018107:	a3 8c d4 02 c0       	mov    ds:0xc002d48c,eax
c001810c:	8b 07                	mov    eax,DWORD PTR [edi]
c001810e:	a3 88 d4 02 c0       	mov    ds:0xc002d488,eax
c0018113:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018116:	a3 84 d4 02 c0       	mov    ds:0xc002d484,eax
c001811b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001811f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018121:	a3 80 d4 02 c0       	mov    ds:0xc002d480,eax
c0018126:	5b                   	pop    ebx
c0018127:	5e                   	pop    esi
c0018128:	5f                   	pop    edi
c0018129:	5d                   	pop    ebp
c001812a:	c3                   	ret    
c001812b:	90                   	nop

c001812c <CPU::cpuidCheckEDX(unsigned int)>:
c001812c:	83 ec 10             	sub    esp,0x10
c001812f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018133:	50                   	push   eax
c0018134:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018138:	50                   	push   eax
c0018139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001813d:	50                   	push   eax
c001813e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018142:	50                   	push   eax
c0018143:	6a 01                	push   0x1
c0018145:	e8 5e ff ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001814a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001814e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018152:	0f 95 c0             	setne  al
c0018155:	83 c4 24             	add    esp,0x24
c0018158:	c3                   	ret    
c0018159:	90                   	nop

c001815a <CPU::cpuidCheckECX(unsigned int)>:
c001815a:	83 ec 10             	sub    esp,0x10
c001815d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018161:	50                   	push   eax
c0018162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018166:	50                   	push   eax
c0018167:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001816b:	50                   	push   eax
c001816c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018170:	50                   	push   eax
c0018171:	6a 01                	push   0x1
c0018173:	e8 30 ff ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001817c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018180:	0f 95 c0             	setne  al
c0018183:	83 c4 24             	add    esp,0x24
c0018186:	c3                   	ret    
c0018187:	90                   	nop

c0018188 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018188:	83 ec 10             	sub    esp,0x10
c001818b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001818f:	50                   	push   eax
c0018190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018194:	50                   	push   eax
c0018195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018199:	50                   	push   eax
c001819a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001819e:	50                   	push   eax
c001819f:	6a 07                	push   0x7
c00181a1:	e8 02 ff ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181aa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00181ae:	0f 95 c0             	setne  al
c00181b1:	83 c4 24             	add    esp,0x24
c00181b4:	c3                   	ret    
c00181b5:	90                   	nop

c00181b6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00181b6:	83 ec 10             	sub    esp,0x10
c00181b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181bd:	50                   	push   eax
c00181be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c2:	50                   	push   eax
c00181c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c7:	50                   	push   eax
c00181c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181cc:	50                   	push   eax
c00181cd:	6a 07                	push   0x7
c00181cf:	e8 d4 fe ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181dc:	0f 95 c0             	setne  al
c00181df:	83 c4 24             	add    esp,0x24
c00181e2:	c3                   	ret    
c00181e3:	90                   	nop

c00181e4 <CPU::CPU()>:
c00181e4:	83 ec 0c             	sub    esp,0xc
c00181e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181eb:	83 ec 08             	sub    esp,0x8
c00181ee:	68 9e a0 02 c0       	push   0xc002a09e
c00181f3:	50                   	push   eax
c00181f4:	e8 6f bb ff ff       	call   c0013d68 <Device::Device(char const*)>
c00181f9:	83 c4 10             	add    esp,0x10
c00181fc:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c0018201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018205:	89 10                	mov    DWORD PTR [eax],edx
c0018207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018219:	05 78 01 00 00       	add    eax,0x178
c001821e:	83 ec 0c             	sub    esp,0xc
c0018221:	50                   	push   eax
c0018222:	e8 c5 6a ff ff       	call   c000ecec <GDT::GDT()>
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822e:	05 7c 09 00 00       	add    eax,0x97c
c0018233:	83 ec 0c             	sub    esp,0xc
c0018236:	50                   	push   eax
c0018237:	e8 12 6d ff ff       	call   c000ef4e <IDT::IDT()>
c001823c:	83 c4 10             	add    esp,0x10
c001823f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018243:	05 7c 11 00 00       	add    eax,0x117c
c0018248:	83 ec 0c             	sub    esp,0xc
c001824b:	50                   	push   eax
c001824c:	e8 79 8e ff ff       	call   c00110ca <TSS::TSS()>
c0018251:	83 c4 10             	add    esp,0x10
c0018254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018258:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001825f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018263:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001826d:	90                   	nop
c001826e:	83 c4 0c             	add    esp,0xc
c0018271:	c3                   	ret    

c0018272 <CPU::displayFeatures()>:
c0018272:	53                   	push   ebx
c0018273:	83 ec 10             	sub    esp,0x10
c0018276:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001827a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018280:	68 ac 9d 02 c0       	push   0xc0029dac
c0018285:	e8 ff a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001828a:	59                   	pop    ecx
c001828b:	58                   	pop    eax
c001828c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018292:	50                   	push   eax
c0018293:	68 bd 9d 02 c0       	push   0xc0029dbd
c0018298:	e8 ec a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001829d:	58                   	pop    eax
c001829e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182a4:	5a                   	pop    edx
c00182a5:	c1 e8 0e             	shr    eax,0xe
c00182a8:	0f b6 c0             	movzx  eax,al
c00182ab:	50                   	push   eax
c00182ac:	68 ce 9d 02 c0       	push   0xc0029dce
c00182b1:	e8 d3 a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00182b6:	59                   	pop    ecx
c00182b7:	58                   	pop    eax
c00182b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182be:	66 c1 e8 06          	shr    ax,0x6
c00182c2:	0f b6 c0             	movzx  eax,al
c00182c5:	50                   	push   eax
c00182c6:	68 df 9d 02 c0       	push   0xc0029ddf
c00182cb:	e8 b9 a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00182d0:	c7 04 24 7b a2 02 c0 	mov    DWORD PTR [esp],0xc002a27b
c00182d7:	e8 ad a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00182dc:	83 c4 10             	add    esp,0x10
c00182df:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00182e4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00182eb:	74 05                	je     c00182f2 <CPU::displayFeatures()+0x80>
c00182ed:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00182f2:	52                   	push   edx
c00182f3:	52                   	push   edx
c00182f4:	50                   	push   eax
c00182f5:	68 f0 9d 02 c0       	push   0xc0029df0
c00182fa:	e8 8a a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00182ff:	83 c4 10             	add    esp,0x10
c0018302:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018307:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001830e:	78 05                	js     c0018315 <CPU::displayFeatures()+0xa3>
c0018310:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018315:	51                   	push   ecx
c0018316:	51                   	push   ecx
c0018317:	50                   	push   eax
c0018318:	68 07 9e 02 c0       	push   0xc0029e07
c001831d:	e8 67 a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0018322:	83 c4 10             	add    esp,0x10
c0018325:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001832a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018331:	75 05                	jne    c0018338 <CPU::displayFeatures()+0xc6>
c0018333:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018338:	52                   	push   edx
c0018339:	52                   	push   edx
c001833a:	50                   	push   eax
c001833b:	68 1e 9e 02 c0       	push   0xc0029e1e
c0018340:	e8 44 a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001834d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018354:	75 05                	jne    c001835b <CPU::displayFeatures()+0xe9>
c0018356:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001835b:	51                   	push   ecx
c001835c:	51                   	push   ecx
c001835d:	50                   	push   eax
c001835e:	68 35 9e 02 c0       	push   0xc0029e35
c0018363:	e8 21 a4 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0018368:	83 c4 10             	add    esp,0x10
c001836b:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018370:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018377:	75 05                	jne    c001837e <CPU::displayFeatures()+0x10c>
c0018379:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001837e:	52                   	push   edx
c001837f:	52                   	push   edx
c0018380:	50                   	push   eax
c0018381:	68 4c 9e 02 c0       	push   0xc0029e4c
c0018386:	e8 fe a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018393:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001839a:	75 05                	jne    c00183a1 <CPU::displayFeatures()+0x12f>
c001839c:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00183a1:	51                   	push   ecx
c00183a2:	51                   	push   ecx
c00183a3:	50                   	push   eax
c00183a4:	68 63 9e 02 c0       	push   0xc0029e63
c00183a9:	e8 db a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00183b6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183bd:	75 05                	jne    c00183c4 <CPU::displayFeatures()+0x152>
c00183bf:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00183c4:	52                   	push   edx
c00183c5:	52                   	push   edx
c00183c6:	50                   	push   eax
c00183c7:	68 7a 9e 02 c0       	push   0xc0029e7a
c00183cc:	e8 b8 a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00183d1:	83 c4 10             	add    esp,0x10
c00183d4:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00183d9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00183e0:	75 05                	jne    c00183e7 <CPU::displayFeatures()+0x175>
c00183e2:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00183e7:	51                   	push   ecx
c00183e8:	51                   	push   ecx
c00183e9:	50                   	push   eax
c00183ea:	68 91 9e 02 c0       	push   0xc0029e91
c00183ef:	e8 95 a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00183f4:	83 c4 10             	add    esp,0x10
c00183f7:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00183fc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018403:	75 05                	jne    c001840a <CPU::displayFeatures()+0x198>
c0018405:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001840a:	52                   	push   edx
c001840b:	52                   	push   edx
c001840c:	50                   	push   eax
c001840d:	68 a8 9e 02 c0       	push   0xc0029ea8
c0018412:	e8 72 a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	b8 78 89 02 c0       	mov    eax,0xc0028978
c001841f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018426:	75 05                	jne    c001842d <CPU::displayFeatures()+0x1bb>
c0018428:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c001842d:	51                   	push   ecx
c001842e:	51                   	push   ecx
c001842f:	50                   	push   eax
c0018430:	68 bf 9e 02 c0       	push   0xc0029ebf
c0018435:	e8 4f a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001843a:	83 c4 10             	add    esp,0x10
c001843d:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018442:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018449:	75 05                	jne    c0018450 <CPU::displayFeatures()+0x1de>
c001844b:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018450:	52                   	push   edx
c0018451:	52                   	push   edx
c0018452:	50                   	push   eax
c0018453:	68 d6 9e 02 c0       	push   0xc0029ed6
c0018458:	e8 2c a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018465:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001846c:	75 05                	jne    c0018473 <CPU::displayFeatures()+0x201>
c001846e:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018473:	51                   	push   ecx
c0018474:	51                   	push   ecx
c0018475:	50                   	push   eax
c0018476:	68 ed 9e 02 c0       	push   0xc0029eed
c001847b:	e8 09 a3 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	b8 78 89 02 c0       	mov    eax,0xc0028978
c0018488:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001848f:	75 05                	jne    c0018496 <CPU::displayFeatures()+0x224>
c0018491:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c0018496:	52                   	push   edx
c0018497:	52                   	push   edx
c0018498:	50                   	push   eax
c0018499:	68 04 9f 02 c0       	push   0xc0029f04
c001849e:	e8 e6 a2 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00184a3:	83 c4 10             	add    esp,0x10
c00184a6:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00184ab:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00184b2:	78 05                	js     c00184b9 <CPU::displayFeatures()+0x247>
c00184b4:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00184b9:	51                   	push   ecx
c00184ba:	51                   	push   ecx
c00184bb:	50                   	push   eax
c00184bc:	68 1b 9f 02 c0       	push   0xc0029f1b
c00184c1:	e8 c3 a2 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	b8 78 89 02 c0       	mov    eax,0xc0028978
c00184ce:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00184d5:	75 05                	jne    c00184dc <CPU::displayFeatures()+0x26a>
c00184d7:	b8 7c 89 02 c0       	mov    eax,0xc002897c
c00184dc:	52                   	push   edx
c00184dd:	52                   	push   edx
c00184de:	50                   	push   eax
c00184df:	68 32 9f 02 c0       	push   0xc0029f32
c00184e4:	e8 a0 a2 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00184e9:	83 c4 18             	add    esp,0x18
c00184ec:	5b                   	pop    ebx
c00184ed:	c3                   	ret    

c00184ee <CPU::detectFeatures()>:
c00184ee:	55                   	push   ebp
c00184ef:	57                   	push   edi
c00184f0:	56                   	push   esi
c00184f1:	53                   	push   ebx
c00184f2:	83 ec 50             	sub    esp,0x50
c00184f5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00184f9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018503:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001850a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018510:	6a 0d                	push   0xd
c0018512:	6a 00                	push   0x0
c0018514:	57                   	push   edi
c0018515:	e8 71 81 fe ff       	call   c000068b <memset>
c001851a:	83 c4 10             	add    esp,0x10
c001851d:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0018522:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018529:	0f 84 20 09 00 00    	je     c0018e4f <CPU::detectFeatures()+0x961>
c001852f:	83 ec 0c             	sub    esp,0xc
c0018532:	6a 10                	push   0x10
c0018534:	e8 f3 fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c0018539:	83 e0 01             	and    eax,0x1
c001853c:	8d 14 00             	lea    edx,[eax+eax*1]
c001853f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018545:	83 e0 fd             	and    eax,0xfffffffd
c0018548:	09 d0                	or     eax,edx
c001854a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018550:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018557:	e8 d0 fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c001855c:	83 e0 01             	and    eax,0x1
c001855f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018566:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001856c:	83 e0 fb             	and    eax,0xfffffffb
c001856f:	09 d0                	or     eax,edx
c0018571:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018577:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001857e:	e8 a9 fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c0018583:	83 e0 01             	and    eax,0x1
c0018586:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001858d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018593:	83 e0 f7             	and    eax,0xfffffff7
c0018596:	09 d0                	or     eax,edx
c0018598:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001859e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00185a5:	e8 82 fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c00185aa:	83 e0 01             	and    eax,0x1
c00185ad:	c1 e0 04             	shl    eax,0x4
c00185b0:	88 c2                	mov    dl,al
c00185b2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185b8:	83 e0 ef             	and    eax,0xffffffef
c00185bb:	09 d0                	or     eax,edx
c00185bd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185c3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00185ca:	e8 5d fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c00185cf:	83 e0 01             	and    eax,0x1
c00185d2:	c1 e0 05             	shl    eax,0x5
c00185d5:	88 c2                	mov    dl,al
c00185d7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185dd:	83 e0 df             	and    eax,0xffffffdf
c00185e0:	09 d0                	or     eax,edx
c00185e2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185e8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00185ef:	e8 38 fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c00185f4:	83 e0 01             	and    eax,0x1
c00185f7:	8d 14 00             	lea    edx,[eax+eax*1]
c00185fa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018600:	83 e0 fd             	and    eax,0xfffffffd
c0018603:	09 d0                	or     eax,edx
c0018605:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001860b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018612:	e8 15 fb ff ff       	call   c001812c <CPU::cpuidCheckEDX(unsigned int)>
c0018617:	83 e0 01             	and    eax,0x1
c001861a:	c1 e0 06             	shl    eax,0x6
c001861d:	88 c2                	mov    dl,al
c001861f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018625:	83 e0 bf             	and    eax,0xffffffbf
c0018628:	09 d0                	or     eax,edx
c001862a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018630:	58                   	pop    eax
c0018631:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018635:	56                   	push   esi
c0018636:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001863a:	55                   	push   ebp
c001863b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001863f:	50                   	push   eax
c0018640:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018644:	52                   	push   edx
c0018645:	6a 00                	push   0x0
c0018647:	e8 5c fa ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001864c:	83 c4 1c             	add    esp,0x1c
c001864f:	6a 04                	push   0x4
c0018651:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018655:	50                   	push   eax
c0018656:	57                   	push   edi
c0018657:	e8 f9 7f fe ff       	call   c0000655 <memcpy>
c001865c:	83 c4 0c             	add    esp,0xc
c001865f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018665:	6a 04                	push   0x4
c0018667:	56                   	push   esi
c0018668:	50                   	push   eax
c0018669:	e8 e7 7f fe ff       	call   c0000655 <memcpy>
c001866e:	83 c4 0c             	add    esp,0xc
c0018671:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018677:	6a 04                	push   0x4
c0018679:	55                   	push   ebp
c001867a:	50                   	push   eax
c001867b:	e8 d5 7f fe ff       	call   c0000655 <memcpy>
c0018680:	58                   	pop    eax
c0018681:	5a                   	pop    edx
c0018682:	68 49 9f 02 c0       	push   0xc0029f49
c0018687:	57                   	push   edi
c0018688:	e8 ee 80 fe ff       	call   c000077b <strcmp>
c001868d:	83 c4 10             	add    esp,0x10
c0018690:	85 c0                	test   eax,eax
c0018692:	75 0f                	jne    c00186a3 <CPU::detectFeatures()+0x1b5>
c0018694:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001869e:	e9 22 02 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c00186a3:	50                   	push   eax
c00186a4:	50                   	push   eax
c00186a5:	68 56 9f 02 c0       	push   0xc0029f56
c00186aa:	57                   	push   edi
c00186ab:	e8 cb 80 fe ff       	call   c000077b <strcmp>
c00186b0:	83 c4 10             	add    esp,0x10
c00186b3:	85 c0                	test   eax,eax
c00186b5:	74 dd                	je     c0018694 <CPU::detectFeatures()+0x1a6>
c00186b7:	51                   	push   ecx
c00186b8:	51                   	push   ecx
c00186b9:	68 63 9f 02 c0       	push   0xc0029f63
c00186be:	57                   	push   edi
c00186bf:	e8 b7 80 fe ff       	call   c000077b <strcmp>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	85 c0                	test   eax,eax
c00186c9:	74 2a                	je     c00186f5 <CPU::detectFeatures()+0x207>
c00186cb:	52                   	push   edx
c00186cc:	52                   	push   edx
c00186cd:	68 70 9f 02 c0       	push   0xc0029f70
c00186d2:	57                   	push   edi
c00186d3:	e8 a3 80 fe ff       	call   c000077b <strcmp>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	85 c0                	test   eax,eax
c00186dd:	74 16                	je     c00186f5 <CPU::detectFeatures()+0x207>
c00186df:	50                   	push   eax
c00186e0:	50                   	push   eax
c00186e1:	68 7d 9f 02 c0       	push   0xc0029f7d
c00186e6:	57                   	push   edi
c00186e7:	e8 8f 80 fe ff       	call   c000077b <strcmp>
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	85 c0                	test   eax,eax
c00186f1:	74 48                	je     c001873b <CPU::detectFeatures()+0x24d>
c00186f3:	eb 0f                	jmp    c0018704 <CPU::detectFeatures()+0x216>
c00186f5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00186ff:	e9 c1 01 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c0018704:	50                   	push   eax
c0018705:	50                   	push   eax
c0018706:	68 8a 9f 02 c0       	push   0xc0029f8a
c001870b:	57                   	push   edi
c001870c:	e8 6a 80 fe ff       	call   c000077b <strcmp>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	85 c0                	test   eax,eax
c0018716:	74 23                	je     c001873b <CPU::detectFeatures()+0x24d>
c0018718:	50                   	push   eax
c0018719:	50                   	push   eax
c001871a:	68 97 9f 02 c0       	push   0xc0029f97
c001871f:	57                   	push   edi
c0018720:	e8 56 80 fe ff       	call   c000077b <strcmp>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	85 c0                	test   eax,eax
c001872a:	75 1e                	jne    c001874a <CPU::detectFeatures()+0x25c>
c001872c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018736:	e9 8a 01 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001873b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018745:	e9 7b 01 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001874a:	50                   	push   eax
c001874b:	50                   	push   eax
c001874c:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018751:	57                   	push   edi
c0018752:	e8 24 80 fe ff       	call   c000077b <strcmp>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	85 c0                	test   eax,eax
c001875c:	75 0f                	jne    c001876d <CPU::detectFeatures()+0x27f>
c001875e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018768:	e9 58 01 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001876d:	50                   	push   eax
c001876e:	50                   	push   eax
c001876f:	68 63 9f 02 c0       	push   0xc0029f63
c0018774:	57                   	push   edi
c0018775:	e8 01 80 fe ff       	call   c000077b <strcmp>
c001877a:	83 c4 10             	add    esp,0x10
c001877d:	85 c0                	test   eax,eax
c001877f:	75 0f                	jne    c0018790 <CPU::detectFeatures()+0x2a2>
c0018781:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001878b:	e9 35 01 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c0018790:	50                   	push   eax
c0018791:	50                   	push   eax
c0018792:	68 b1 9f 02 c0       	push   0xc0029fb1
c0018797:	57                   	push   edi
c0018798:	e8 de 7f fe ff       	call   c000077b <strcmp>
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	85 c0                	test   eax,eax
c00187a2:	75 0f                	jne    c00187b3 <CPU::detectFeatures()+0x2c5>
c00187a4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00187ae:	e9 12 01 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c00187b3:	51                   	push   ecx
c00187b4:	51                   	push   ecx
c00187b5:	68 be 9f 02 c0       	push   0xc0029fbe
c00187ba:	57                   	push   edi
c00187bb:	e8 bb 7f fe ff       	call   c000077b <strcmp>
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	85 c0                	test   eax,eax
c00187c5:	75 0f                	jne    c00187d6 <CPU::detectFeatures()+0x2e8>
c00187c7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00187d1:	e9 ef 00 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c00187d6:	52                   	push   edx
c00187d7:	52                   	push   edx
c00187d8:	68 cb 9f 02 c0       	push   0xc0029fcb
c00187dd:	57                   	push   edi
c00187de:	e8 98 7f fe ff       	call   c000077b <strcmp>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	85 c0                	test   eax,eax
c00187e8:	75 0f                	jne    c00187f9 <CPU::detectFeatures()+0x30b>
c00187ea:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00187f4:	e9 cc 00 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c00187f9:	50                   	push   eax
c00187fa:	50                   	push   eax
c00187fb:	68 d8 9f 02 c0       	push   0xc0029fd8
c0018800:	57                   	push   edi
c0018801:	e8 75 7f fe ff       	call   c000077b <strcmp>
c0018806:	83 c4 10             	add    esp,0x10
c0018809:	85 c0                	test   eax,eax
c001880b:	75 0f                	jne    c001881c <CPU::detectFeatures()+0x32e>
c001880d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018817:	e9 a9 00 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001881c:	50                   	push   eax
c001881d:	50                   	push   eax
c001881e:	68 e5 9f 02 c0       	push   0xc0029fe5
c0018823:	57                   	push   edi
c0018824:	e8 52 7f fe ff       	call   c000077b <strcmp>
c0018829:	83 c4 10             	add    esp,0x10
c001882c:	85 c0                	test   eax,eax
c001882e:	75 0f                	jne    c001883f <CPU::detectFeatures()+0x351>
c0018830:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001883a:	e9 86 00 00 00       	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001883f:	50                   	push   eax
c0018840:	50                   	push   eax
c0018841:	68 f2 9f 02 c0       	push   0xc0029ff2
c0018846:	57                   	push   edi
c0018847:	e8 2f 7f fe ff       	call   c000077b <strcmp>
c001884c:	83 c4 10             	add    esp,0x10
c001884f:	85 c0                	test   eax,eax
c0018851:	75 0c                	jne    c001885f <CPU::detectFeatures()+0x371>
c0018853:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001885d:	eb 66                	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001885f:	50                   	push   eax
c0018860:	50                   	push   eax
c0018861:	68 ff 9f 02 c0       	push   0xc0029fff
c0018866:	57                   	push   edi
c0018867:	e8 0f 7f fe ff       	call   c000077b <strcmp>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	85 c0                	test   eax,eax
c0018871:	75 0c                	jne    c001887f <CPU::detectFeatures()+0x391>
c0018873:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001887d:	eb 46                	jmp    c00188c5 <CPU::detectFeatures()+0x3d7>
c001887f:	50                   	push   eax
c0018880:	50                   	push   eax
c0018881:	68 0c a0 02 c0       	push   0xc002a00c
c0018886:	57                   	push   edi
c0018887:	e8 ef 7e fe ff       	call   c000077b <strcmp>
c001888c:	83 c4 10             	add    esp,0x10
c001888f:	85 c0                	test   eax,eax
c0018891:	74 e0                	je     c0018873 <CPU::detectFeatures()+0x385>
c0018893:	50                   	push   eax
c0018894:	50                   	push   eax
c0018895:	68 19 a0 02 c0       	push   0xc002a019
c001889a:	57                   	push   edi
c001889b:	e8 db 7e fe ff       	call   c000077b <strcmp>
c00188a0:	83 c4 10             	add    esp,0x10
c00188a3:	85 c0                	test   eax,eax
c00188a5:	74 cc                	je     c0018873 <CPU::detectFeatures()+0x385>
c00188a7:	51                   	push   ecx
c00188a8:	51                   	push   ecx
c00188a9:	68 26 a0 02 c0       	push   0xc002a026
c00188ae:	57                   	push   edi
c00188af:	e8 c7 7e fe ff       	call   c000077b <strcmp>
c00188b4:	83 c4 10             	add    esp,0x10
c00188b7:	85 c0                	test   eax,eax
c00188b9:	74 b8                	je     c0018873 <CPU::detectFeatures()+0x385>
c00188bb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188c5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00188ca:	0f 86 be 00 00 00    	jbe    c001898e <CPU::detectFeatures()+0x4a0>
c00188d0:	83 ec 0c             	sub    esp,0xc
c00188d3:	68 80 00 00 00       	push   0x80
c00188d8:	e8 ab f8 ff ff       	call   c0018188 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188dd:	83 e0 01             	and    eax,0x1
c00188e0:	c1 e0 06             	shl    eax,0x6
c00188e3:	88 c2                	mov    dl,al
c00188e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188eb:	83 e0 bf             	and    eax,0xffffffbf
c00188ee:	09 d0                	or     eax,edx
c00188f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188f6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00188fd:	e8 86 f8 ff ff       	call   c0018188 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018902:	83 e0 01             	and    eax,0x1
c0018905:	c1 e0 04             	shl    eax,0x4
c0018908:	88 c2                	mov    dl,al
c001890a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018910:	83 e0 ef             	and    eax,0xffffffef
c0018913:	09 d0                	or     eax,edx
c0018915:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001891b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018922:	e8 61 f8 ff ff       	call   c0018188 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018927:	c1 e0 07             	shl    eax,0x7
c001892a:	88 c2                	mov    dl,al
c001892c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018932:	83 e0 7f             	and    eax,0x7f
c0018935:	09 d0                	or     eax,edx
c0018937:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001893d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018944:	e8 6d f8 ff ff       	call   c00181b6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018949:	83 e0 01             	and    eax,0x1
c001894c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018953:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018959:	83 e0 f7             	and    eax,0xfffffff7
c001895c:	09 d0                	or     eax,edx
c001895e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018964:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001896b:	e8 46 f8 ff ff       	call   c00181b6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	83 e0 01             	and    eax,0x1
c0018976:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001897d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018983:	83 e0 fb             	and    eax,0xfffffffb
c0018986:	09 d0                	or     eax,edx
c0018988:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001898e:	83 ec 0c             	sub    esp,0xc
c0018991:	56                   	push   esi
c0018992:	55                   	push   ebp
c0018993:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018997:	57                   	push   edi
c0018998:	8d 44 24 28          	lea    eax,[esp+0x28]
c001899c:	50                   	push   eax
c001899d:	6a 01                	push   0x1
c001899f:	e8 04 f7 ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00189a8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00189ae:	88 ca                	mov    dl,cl
c00189b0:	83 e0 f0             	and    eax,0xfffffff0
c00189b3:	83 e2 0f             	and    edx,0xf
c00189b6:	09 d0                	or     eax,edx
c00189b8:	88 ca                	mov    dl,cl
c00189ba:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189c0:	c0 ea 04             	shr    dl,0x4
c00189c3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189c7:	0f b6 c2             	movzx  eax,dl
c00189ca:	83 c4 20             	add    esp,0x20
c00189cd:	c1 e0 06             	shl    eax,0x6
c00189d0:	89 c5                	mov    ebp,eax
c00189d2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189d8:	66 25 3f c0          	and    ax,0xc03f
c00189dc:	09 e8                	or     eax,ebp
c00189de:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189e5:	89 c8                	mov    eax,ecx
c00189e7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00189ed:	c1 e8 08             	shr    eax,0x8
c00189f0:	83 e2 3f             	and    edx,0x3f
c00189f3:	83 e0 0f             	and    eax,0xf
c00189f6:	89 c5                	mov    ebp,eax
c00189f8:	c1 e5 06             	shl    ebp,0x6
c00189fb:	09 d5                	or     ebp,edx
c00189fd:	89 ea                	mov    edx,ebp
c00189ff:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018a05:	88 c2                	mov    dl,al
c0018a07:	c0 ea 02             	shr    dl,0x2
c0018a0a:	89 d5                	mov    ebp,edx
c0018a0c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018a12:	83 e2 c0             	and    edx,0xffffffc0
c0018a15:	09 d5                	or     ebp,edx
c0018a17:	89 ea                	mov    edx,ebp
c0018a19:	89 cd                	mov    ebp,ecx
c0018a1b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a21:	c1 ed 0c             	shr    ebp,0xc
c0018a24:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a2a:	83 e5 03             	and    ebp,0x3
c0018a2d:	83 e2 cf             	and    edx,0xffffffcf
c0018a30:	c1 e5 04             	shl    ebp,0x4
c0018a33:	09 d5                	or     ebp,edx
c0018a35:	3c 06                	cmp    al,0x6
c0018a37:	89 ea                	mov    edx,ebp
c0018a39:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a3f:	74 04                	je     c0018a45 <CPU::detectFeatures()+0x557>
c0018a41:	3c 0f                	cmp    al,0xf
c0018a43:	75 5c                	jne    c0018aa1 <CPU::detectFeatures()+0x5b3>
c0018a45:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a49:	89 cd                	mov    ebp,ecx
c0018a4b:	c1 ed 10             	shr    ebp,0x10
c0018a4e:	c1 e5 04             	shl    ebp,0x4
c0018a51:	09 ea                	or     edx,ebp
c0018a53:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a59:	0f b6 d2             	movzx  edx,dl
c0018a5c:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a61:	c1 e2 06             	shl    edx,0x6
c0018a64:	09 ea                	or     edx,ebp
c0018a66:	3c 0f                	cmp    al,0xf
c0018a68:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a6f:	75 30                	jne    c0018aa1 <CPU::detectFeatures()+0x5b3>
c0018a71:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018a77:	c1 e9 14             	shr    ecx,0x14
c0018a7a:	83 e0 3f             	and    eax,0x3f
c0018a7d:	83 c1 0f             	add    ecx,0xf
c0018a80:	88 ca                	mov    dl,cl
c0018a82:	c0 e9 02             	shr    cl,0x2
c0018a85:	c1 e2 06             	shl    edx,0x6
c0018a88:	09 d0                	or     eax,edx
c0018a8a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018a90:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018a96:	83 e0 c0             	and    eax,0xffffffc0
c0018a99:	09 c1                	or     ecx,eax
c0018a9b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018aa1:	83 ec 0c             	sub    esp,0xc
c0018aa4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018aab:	56                   	push   esi
c0018aac:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ab0:	50                   	push   eax
c0018ab1:	57                   	push   edi
c0018ab2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018ab6:	55                   	push   ebp
c0018ab7:	68 00 00 00 80       	push   0x80000000
c0018abc:	e8 e7 f5 ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ac1:	83 c4 20             	add    esp,0x20
c0018ac4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018acc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ad0:	76 1e                	jbe    c0018af0 <CPU::detectFeatures()+0x602>
c0018ad2:	83 ec 0c             	sub    esp,0xc
c0018ad5:	56                   	push   esi
c0018ad6:	50                   	push   eax
c0018ad7:	57                   	push   edi
c0018ad8:	55                   	push   ebp
c0018ad9:	68 01 00 00 80       	push   0x80000001
c0018ade:	e8 c5 f5 ff ff       	call   c00180a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ae3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018aed:	83 c4 20             	add    esp,0x20
c0018af0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018af6:	83 f8 01             	cmp    eax,0x1
c0018af9:	75 6f                	jne    c0018b6a <CPU::detectFeatures()+0x67c>
c0018afb:	51                   	push   ecx
c0018afc:	51                   	push   ecx
c0018afd:	68 32 a0 02 c0       	push   0xc002a032
c0018b02:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b06:	56                   	push   esi
c0018b07:	e8 1e 7c fe ff       	call   c000072a <strcpy>
c0018b0c:	5f                   	pop    edi
c0018b0d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b13:	5d                   	pop    ebp
c0018b14:	66 c1 e8 06          	shr    ax,0x6
c0018b18:	0f b6 c0             	movzx  eax,al
c0018b1b:	50                   	push   eax
c0018b1c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b22:	c1 e8 0e             	shr    eax,0xe
c0018b25:	0f b6 c0             	movzx  eax,al
c0018b28:	50                   	push   eax
c0018b29:	e8 24 f2 ff ff       	call   c0017d52 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b2e:	5a                   	pop    edx
c0018b2f:	59                   	pop    ecx
c0018b30:	50                   	push   eax
c0018b31:	56                   	push   esi
c0018b32:	e8 aa 7c fe ff       	call   c00007e1 <strcat>
c0018b37:	5f                   	pop    edi
c0018b38:	5d                   	pop    ebp
c0018b39:	56                   	push   esi
c0018b3a:	53                   	push   ebx
c0018b3b:	e8 1a b2 ff ff       	call   c0013d5a <Device::setName(char const*)>
c0018b40:	58                   	pop    eax
c0018b41:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b47:	5a                   	pop    edx
c0018b48:	68 39 a0 02 c0       	push   0xc002a039
c0018b4d:	50                   	push   eax
c0018b4e:	e8 28 7c fe ff       	call   c000077b <strcmp>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	85 c0                	test   eax,eax
c0018b58:	0f 85 71 03 00 00    	jne    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018b5e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b65:	e9 65 03 00 00       	jmp    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018b6a:	83 f8 02             	cmp    eax,0x2
c0018b6d:	0f 85 b5 00 00 00    	jne    c0018c28 <CPU::detectFeatures()+0x73a>
c0018b73:	57                   	push   edi
c0018b74:	57                   	push   edi
c0018b75:	68 4b a0 02 c0       	push   0xc002a04b
c0018b7a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b7e:	56                   	push   esi
c0018b7f:	e8 a6 7b fe ff       	call   c000072a <strcpy>
c0018b84:	5d                   	pop    ebp
c0018b85:	58                   	pop    eax
c0018b86:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b8c:	66 c1 e8 06          	shr    ax,0x6
c0018b90:	0f b6 c0             	movzx  eax,al
c0018b93:	50                   	push   eax
c0018b94:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b9a:	c1 e8 0e             	shr    eax,0xe
c0018b9d:	0f b6 c0             	movzx  eax,al
c0018ba0:	50                   	push   eax
c0018ba1:	e8 18 f0 ff ff       	call   c0017bbe <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018ba6:	5a                   	pop    edx
c0018ba7:	59                   	pop    ecx
c0018ba8:	50                   	push   eax
c0018ba9:	56                   	push   esi
c0018baa:	e8 32 7c fe ff       	call   c00007e1 <strcat>
c0018baf:	5f                   	pop    edi
c0018bb0:	5d                   	pop    ebp
c0018bb1:	56                   	push   esi
c0018bb2:	53                   	push   ebx
c0018bb3:	e8 a2 b1 ff ff       	call   c0013d5a <Device::setName(char const*)>
c0018bb8:	58                   	pop    eax
c0018bb9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018bbf:	5a                   	pop    edx
c0018bc0:	68 50 a0 02 c0       	push   0xc002a050
c0018bc5:	50                   	push   eax
c0018bc6:	e8 b0 7b fe ff       	call   c000077b <strcmp>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	85 c0                	test   eax,eax
c0018bd0:	75 20                	jne    c0018bf2 <CPU::detectFeatures()+0x704>
c0018bd2:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0018bd8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018bde:	a8 01                	test   al,0x1
c0018be0:	74 10                	je     c0018bf2 <CPU::detectFeatures()+0x704>
c0018be2:	83 e0 fe             	and    eax,0xfffffffe
c0018be5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018beb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018bf2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bf8:	c1 e8 0e             	shr    eax,0xe
c0018bfb:	3c 05                	cmp    al,0x5
c0018bfd:	0f 85 cc 02 00 00    	jne    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018c03:	56                   	push   esi
c0018c04:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c0a:	83 e0 0f             	and    eax,0xf
c0018c0d:	50                   	push   eax
c0018c0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c14:	66 c1 e8 06          	shr    ax,0x6
c0018c18:	0f b6 c0             	movzx  eax,al
c0018c1b:	50                   	push   eax
c0018c1c:	6a 05                	push   0x5
c0018c1e:	e8 11 f4 ff ff       	call   c0018034 <CPU::AMD_K6_writeback(int, int, int)>
c0018c23:	e9 1f 02 00 00       	jmp    c0018e47 <CPU::detectFeatures()+0x959>
c0018c28:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c2b:	83 fa 01             	cmp    edx,0x1
c0018c2e:	76 09                	jbe    c0018c39 <CPU::detectFeatures()+0x74b>
c0018c30:	83 f8 06             	cmp    eax,0x6
c0018c33:	0f 85 91 01 00 00    	jne    c0018dca <CPU::detectFeatures()+0x8dc>
c0018c39:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c3f:	c1 ea 0e             	shr    edx,0xe
c0018c42:	80 fa 05             	cmp    dl,0x5
c0018c45:	75 7b                	jne    c0018cc2 <CPU::detectFeatures()+0x7d4>
c0018c47:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c4d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c52:	66 81 fa 00 01       	cmp    dx,0x100
c0018c57:	75 0c                	jne    c0018c65 <CPU::detectFeatures()+0x777>
c0018c59:	51                   	push   ecx
c0018c5a:	51                   	push   ecx
c0018c5b:	68 57 a0 02 c0       	push   0xc002a057
c0018c60:	e9 dc 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018c65:	66 81 fa 00 02       	cmp    dx,0x200
c0018c6a:	75 0c                	jne    c0018c78 <CPU::detectFeatures()+0x78a>
c0018c6c:	52                   	push   edx
c0018c6d:	52                   	push   edx
c0018c6e:	68 6a a0 02 c0       	push   0xc002a06a
c0018c73:	e9 c9 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018c78:	66 81 fa 40 02       	cmp    dx,0x240
c0018c7d:	75 0c                	jne    c0018c8b <CPU::detectFeatures()+0x79d>
c0018c7f:	50                   	push   eax
c0018c80:	50                   	push   eax
c0018c81:	68 7c a0 02 c0       	push   0xc002a07c
c0018c86:	e9 b6 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018c8b:	83 f8 06             	cmp    eax,0x6
c0018c8e:	75 0c                	jne    c0018c9c <CPU::detectFeatures()+0x7ae>
c0018c90:	50                   	push   eax
c0018c91:	50                   	push   eax
c0018c92:	68 8e a0 02 c0       	push   0xc002a08e
c0018c97:	e9 a5 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018c9c:	83 f8 04             	cmp    eax,0x4
c0018c9f:	75 0c                	jne    c0018cad <CPU::detectFeatures()+0x7bf>
c0018ca1:	50                   	push   eax
c0018ca2:	50                   	push   eax
c0018ca3:	68 9a a0 02 c0       	push   0xc002a09a
c0018ca8:	e9 94 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018cad:	83 f8 03             	cmp    eax,0x3
c0018cb0:	0f 85 19 02 00 00    	jne    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018cb6:	50                   	push   eax
c0018cb7:	50                   	push   eax
c0018cb8:	68 a2 a0 02 c0       	push   0xc002a0a2
c0018cbd:	e9 7f 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018cc2:	80 fa 06             	cmp    dl,0x6
c0018cc5:	0f 85 db 00 00 00    	jne    c0018da6 <CPU::detectFeatures()+0x8b8>
c0018ccb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cd1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018cd6:	66 81 fa 80 01       	cmp    dx,0x180
c0018cdb:	75 0c                	jne    c0018ce9 <CPU::detectFeatures()+0x7fb>
c0018cdd:	50                   	push   eax
c0018cde:	50                   	push   eax
c0018cdf:	68 ad a0 02 c0       	push   0xc002a0ad
c0018ce4:	e9 58 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018ce9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018cef:	66 f7 c1 80 ff       	test   cx,0xff80
c0018cf4:	75 0c                	jne    c0018d02 <CPU::detectFeatures()+0x814>
c0018cf6:	50                   	push   eax
c0018cf7:	50                   	push   eax
c0018cf8:	68 bd a0 02 c0       	push   0xc002a0bd
c0018cfd:	e9 3f 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018d02:	66 81 fa 40 02       	cmp    dx,0x240
c0018d07:	75 0c                	jne    c0018d15 <CPU::detectFeatures()+0x827>
c0018d09:	55                   	push   ebp
c0018d0a:	55                   	push   ebp
c0018d0b:	68 c4 a0 02 c0       	push   0xc002a0c4
c0018d10:	e9 2c 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018d15:	66 81 fa 80 02       	cmp    dx,0x280
c0018d1a:	75 0c                	jne    c0018d28 <CPU::detectFeatures()+0x83a>
c0018d1c:	57                   	push   edi
c0018d1d:	57                   	push   edi
c0018d1e:	68 cd a0 02 c0       	push   0xc002a0cd
c0018d23:	e9 19 01 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018d28:	66 81 fa 40 03       	cmp    dx,0x340
c0018d2d:	74 ed                	je     c0018d1c <CPU::detectFeatures()+0x82e>
c0018d2f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d34:	75 0c                	jne    c0018d42 <CPU::detectFeatures()+0x854>
c0018d36:	56                   	push   esi
c0018d37:	56                   	push   esi
c0018d38:	68 d4 a0 02 c0       	push   0xc002a0d4
c0018d3d:	e9 ff 00 00 00       	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018d42:	83 f8 06             	cmp    eax,0x6
c0018d45:	0f 84 45 ff ff ff    	je     c0018c90 <CPU::detectFeatures()+0x7a2>
c0018d4b:	83 f8 04             	cmp    eax,0x4
c0018d4e:	0f 84 4d ff ff ff    	je     c0018ca1 <CPU::detectFeatures()+0x7b3>
c0018d54:	83 f8 03             	cmp    eax,0x3
c0018d57:	0f 85 72 01 00 00    	jne    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018d5d:	51                   	push   ecx
c0018d5e:	51                   	push   ecx
c0018d5f:	68 dd a0 02 c0       	push   0xc002a0dd
c0018d64:	53                   	push   ebx
c0018d65:	e8 f0 af ff ff       	call   c0013d5a <Device::setName(char const*)>
c0018d6a:	b1 c1                	mov    cl,0xc1
c0018d6c:	88 c8                	mov    al,cl
c0018d6e:	e6 22                	out    0x22,al
c0018d70:	e4 23                	in     al,0x23
c0018d72:	88 c2                	mov    dl,al
c0018d74:	88 c8                	mov    al,cl
c0018d76:	e6 22                	out    0x22,al
c0018d78:	88 d0                	mov    al,dl
c0018d7a:	83 c8 10             	or     eax,0x10
c0018d7d:	e6 23                	out    0x23,al
c0018d7f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018d86:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018d89:	89 d0                	mov    eax,edx
c0018d8b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018d91:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018d95:	40                   	inc    eax
c0018d96:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018d9c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018da1:	e9 a1 00 00 00       	jmp    c0018e47 <CPU::detectFeatures()+0x959>
c0018da6:	83 f8 06             	cmp    eax,0x6
c0018da9:	0f 84 e1 fe ff ff    	je     c0018c90 <CPU::detectFeatures()+0x7a2>
c0018daf:	83 f8 04             	cmp    eax,0x4
c0018db2:	0f 84 e9 fe ff ff    	je     c0018ca1 <CPU::detectFeatures()+0x7b3>
c0018db8:	83 f8 03             	cmp    eax,0x3
c0018dbb:	0f 85 0e 01 00 00    	jne    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018dc1:	52                   	push   edx
c0018dc2:	52                   	push   edx
c0018dc3:	68 e8 a0 02 c0       	push   0xc002a0e8
c0018dc8:	eb 77                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018dca:	83 f8 07             	cmp    eax,0x7
c0018dcd:	75 09                	jne    c0018dd8 <CPU::detectFeatures()+0x8ea>
c0018dcf:	50                   	push   eax
c0018dd0:	50                   	push   eax
c0018dd1:	68 f2 a0 02 c0       	push   0xc002a0f2
c0018dd6:	eb 69                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018dd8:	83 f8 0a             	cmp    eax,0xa
c0018ddb:	75 09                	jne    c0018de6 <CPU::detectFeatures()+0x8f8>
c0018ddd:	50                   	push   eax
c0018dde:	50                   	push   eax
c0018ddf:	68 fd a0 02 c0       	push   0xc002a0fd
c0018de4:	eb 5b                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018de6:	83 f8 0b             	cmp    eax,0xb
c0018de9:	75 09                	jne    c0018df4 <CPU::detectFeatures()+0x906>
c0018deb:	50                   	push   eax
c0018dec:	50                   	push   eax
c0018ded:	68 05 a1 02 c0       	push   0xc002a105
c0018df2:	eb 4d                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018df4:	83 f8 08             	cmp    eax,0x8
c0018df7:	75 09                	jne    c0018e02 <CPU::detectFeatures()+0x914>
c0018df9:	50                   	push   eax
c0018dfa:	50                   	push   eax
c0018dfb:	68 0e a1 02 c0       	push   0xc002a10e
c0018e00:	eb 3f                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018e02:	83 f8 09             	cmp    eax,0x9
c0018e05:	75 09                	jne    c0018e10 <CPU::detectFeatures()+0x922>
c0018e07:	50                   	push   eax
c0018e08:	50                   	push   eax
c0018e09:	68 16 a1 02 c0       	push   0xc002a116
c0018e0e:	eb 31                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018e10:	83 f8 05             	cmp    eax,0x5
c0018e13:	75 09                	jne    c0018e1e <CPU::detectFeatures()+0x930>
c0018e15:	50                   	push   eax
c0018e16:	50                   	push   eax
c0018e17:	68 1e a1 02 c0       	push   0xc002a11e
c0018e1c:	eb 23                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018e1e:	83 f8 0c             	cmp    eax,0xc
c0018e21:	75 09                	jne    c0018e2c <CPU::detectFeatures()+0x93e>
c0018e23:	55                   	push   ebp
c0018e24:	55                   	push   ebp
c0018e25:	68 2c a1 02 c0       	push   0xc002a12c
c0018e2a:	eb 15                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018e2c:	83 f8 0d             	cmp    eax,0xd
c0018e2f:	75 09                	jne    c0018e3a <CPU::detectFeatures()+0x94c>
c0018e31:	57                   	push   edi
c0018e32:	57                   	push   edi
c0018e33:	68 37 a1 02 c0       	push   0xc002a137
c0018e38:	eb 07                	jmp    c0018e41 <CPU::detectFeatures()+0x953>
c0018e3a:	56                   	push   esi
c0018e3b:	56                   	push   esi
c0018e3c:	68 4b a1 02 c0       	push   0xc002a14b
c0018e41:	53                   	push   ebx
c0018e42:	e8 13 af ff ff       	call   c0013d5a <Device::setName(char const*)>
c0018e47:	83 c4 10             	add    esp,0x10
c0018e4a:	e9 80 00 00 00       	jmp    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018e4f:	51                   	push   ecx
c0018e50:	51                   	push   ecx
c0018e51:	68 97 9f 02 c0       	push   0xc0029f97
c0018e56:	57                   	push   edi
c0018e57:	e8 ce 78 fe ff       	call   c000072a <strcpy>
c0018e5c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e66:	e8 f8 73 fe ff       	call   c0000263 <is486>
c0018e6b:	83 c4 10             	add    esp,0x10
c0018e6e:	85 c0                	test   eax,eax
c0018e70:	74 2b                	je     c0018e9d <CPU::detectFeatures()+0x9af>
c0018e72:	52                   	push   edx
c0018e73:	52                   	push   edx
c0018e74:	68 57 a1 02 c0       	push   0xc002a157
c0018e79:	53                   	push   ebx
c0018e7a:	e8 db ae ff ff       	call   c0013d5a <Device::setName(char const*)>
c0018e7f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e86:	0f 20 c0             	mov    eax,cr0
c0018e89:	83 e0 14             	and    eax,0x14
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	83 f8 04             	cmp    eax,0x4
c0018e92:	75 1f                	jne    c0018eb3 <CPU::detectFeatures()+0x9c5>
c0018e94:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018e9b:	eb 32                	jmp    c0018ecf <CPU::detectFeatures()+0x9e1>
c0018e9d:	50                   	push   eax
c0018e9e:	50                   	push   eax
c0018e9f:	68 62 a1 02 c0       	push   0xc002a162
c0018ea4:	53                   	push   ebx
c0018ea5:	e8 b0 ae ff ff       	call   c0013d5a <Device::setName(char const*)>
c0018eaa:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018eb1:	eb d3                	jmp    c0018e86 <CPU::detectFeatures()+0x998>
c0018eb3:	e8 86 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018eb8:	83 e0 01             	and    eax,0x1
c0018ebb:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ebe:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ec4:	83 e0 fd             	and    eax,0xfffffffd
c0018ec7:	09 d0                	or     eax,edx
c0018ec9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ecf:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018ed6:	83 c4 4c             	add    esp,0x4c
c0018ed9:	5b                   	pop    ebx
c0018eda:	5e                   	pop    esi
c0018edb:	5f                   	pop    edi
c0018edc:	5d                   	pop    ebp
c0018edd:	c3                   	ret    

c0018ede <CPU::setupSMEP()>:
c0018ede:	0f 20 e0             	mov    eax,cr4
c0018ee1:	0d 00 00 10 00       	or     eax,0x100000
c0018ee6:	0f 22 e0             	mov    cr4,eax
c0018ee9:	c3                   	ret    

c0018eea <CPU::setupUMIP()>:
c0018eea:	0f 20 e0             	mov    eax,cr4
c0018eed:	80 cc 08             	or     ah,0x8
c0018ef0:	0f 22 e0             	mov    cr4,eax
c0018ef3:	c3                   	ret    

c0018ef4 <CPU::setupTSC()>:
c0018ef4:	0f 20 e0             	mov    eax,cr4
c0018ef7:	83 c8 04             	or     eax,0x4
c0018efa:	0f 22 e0             	mov    cr4,eax
c0018efd:	c3                   	ret    

c0018efe <CPU::setupLargePages()>:
c0018efe:	0f 20 e0             	mov    eax,cr4
c0018f01:	83 c8 10             	or     eax,0x10
c0018f04:	0f 22 e0             	mov    cr4,eax
c0018f07:	c3                   	ret    

c0018f08 <CPU::setupPAT()>:
c0018f08:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0018f0d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018f14:	74 2c                	je     c0018f42 <CPU::setupPAT()+0x3a>
c0018f16:	53                   	push   ebx
c0018f17:	83 ec 10             	sub    esp,0x10
c0018f1a:	68 77 02 00 00       	push   0x277
c0018f1f:	50                   	push   eax
c0018f20:	e8 57 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018f25:	83 e2 f8             	and    edx,0xfffffff8
c0018f28:	83 ca 01             	or     edx,0x1
c0018f2b:	52                   	push   edx
c0018f2c:	50                   	push   eax
c0018f2d:	68 77 02 00 00       	push   0x277
c0018f32:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c0018f38:	e8 6b 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f3d:	83 c4 28             	add    esp,0x28
c0018f40:	5b                   	pop    ebx
c0018f41:	c3                   	ret    
c0018f42:	c3                   	ret    
c0018f43:	90                   	nop

c0018f44 <CPU::setupMTRR()>:
c0018f44:	c3                   	ret    
c0018f45:	90                   	nop

c0018f46 <CPU::setupGlobalPages()>:
c0018f46:	0f 20 e0             	mov    eax,cr4
c0018f49:	0c 80                	or     al,0x80
c0018f4b:	0f 22 e0             	mov    cr4,eax
c0018f4e:	c3                   	ret    
c0018f4f:	90                   	nop

c0018f50 <CPU::allowUsermodeDataAccess()>:
c0018f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f54:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f5b:	74 03                	je     c0018f60 <CPU::allowUsermodeDataAccess()+0x10>
c0018f5d:	0f 01 cb             	stac   
c0018f60:	c3                   	ret    
c0018f61:	90                   	nop

c0018f62 <CPU::prohibitUsermodeDataAccess()>:
c0018f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f66:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f6d:	74 03                	je     c0018f72 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f6f:	0f 01 ca             	clac   
c0018f72:	c3                   	ret    
c0018f73:	90                   	nop

c0018f74 <CPU::setupSMAP()>:
c0018f74:	0f 20 e0             	mov    eax,cr4
c0018f77:	0d 00 00 20 00       	or     eax,0x200000
c0018f7c:	0f 22 e0             	mov    cr4,eax
c0018f7f:	eb e1                	jmp    c0018f62 <CPU::prohibitUsermodeDataAccess()>
c0018f81:	90                   	nop

c0018f82 <CPU::setupFeatures()>:
c0018f82:	83 ec 0c             	sub    esp,0xc
c0018f85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f89:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018f90:	74 07                	je     c0018f99 <CPU::setupFeatures()+0x17>
c0018f92:	52                   	push   edx
c0018f93:	e8 46 ff ff ff       	call   c0018ede <CPU::setupSMEP()>
c0018f98:	58                   	pop    eax
c0018f99:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018fa0:	74 07                	je     c0018fa9 <CPU::setupFeatures()+0x27>
c0018fa2:	52                   	push   edx
c0018fa3:	e8 cc ff ff ff       	call   c0018f74 <CPU::setupSMAP()>
c0018fa8:	58                   	pop    eax
c0018fa9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018fb0:	74 07                	je     c0018fb9 <CPU::setupFeatures()+0x37>
c0018fb2:	52                   	push   edx
c0018fb3:	e8 32 ff ff ff       	call   c0018eea <CPU::setupUMIP()>
c0018fb8:	58                   	pop    eax
c0018fb9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018fc0:	74 07                	je     c0018fc9 <CPU::setupFeatures()+0x47>
c0018fc2:	52                   	push   edx
c0018fc3:	e8 2c ff ff ff       	call   c0018ef4 <CPU::setupTSC()>
c0018fc8:	58                   	pop    eax
c0018fc9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018fd0:	74 07                	je     c0018fd9 <CPU::setupFeatures()+0x57>
c0018fd2:	52                   	push   edx
c0018fd3:	e8 26 ff ff ff       	call   c0018efe <CPU::setupLargePages()>
c0018fd8:	59                   	pop    ecx
c0018fd9:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018fe0:	74 07                	je     c0018fe9 <CPU::setupFeatures()+0x67>
c0018fe2:	52                   	push   edx
c0018fe3:	e8 5e ff ff ff       	call   c0018f46 <CPU::setupGlobalPages()>
c0018fe8:	58                   	pop    eax
c0018fe9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018ff0:	74 0c                	je     c0018ffe <CPU::setupFeatures()+0x7c>
c0018ff2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018ff6:	83 c4 0c             	add    esp,0xc
c0018ff9:	e9 0a ff ff ff       	jmp    c0018f08 <CPU::setupPAT()>
c0018ffe:	83 c4 0c             	add    esp,0xc
c0019001:	c3                   	ret    

c0019002 <CPU::open(int, int, void*)>:
c0019002:	57                   	push   edi
c0019003:	56                   	push   esi
c0019004:	53                   	push   ebx
c0019005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019009:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001900d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019013:	83 ec 0c             	sub    esp,0xc
c0019016:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001901c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019022:	50                   	push   eax
c0019023:	e8 40 5d ff ff       	call   c000ed68 <GDT::setup()>
c0019028:	83 c4 0c             	add    esp,0xc
c001902b:	6a 00                	push   0x0
c001902d:	68 ef be ad de       	push   0xdeadbeef
c0019032:	57                   	push   edi
c0019033:	e8 d2 80 ff ff       	call   c001110a <TSS::setup(unsigned long, unsigned long)>
c0019038:	89 3c 24             	mov    DWORD PTR [esp],edi
c001903b:	e8 aa 80 ff ff       	call   c00110ea <TSS::flush()>
c0019040:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019046:	89 04 24             	mov    DWORD PTR [esp],eax
c0019049:	e8 76 5f ff ff       	call   c000efc4 <IDT::setup()>
c001904e:	b8 00 04 00 00       	mov    eax,0x400
c0019053:	0f 23 f8             	mov    db7,eax
c0019056:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019060:	e8 4b 6a ff ff       	call   c000fab0 <Phys::allocatePage()>
c0019065:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001906b:	89 30                	mov    DWORD PTR [eax],esi
c001906d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019073:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019076:	58                   	pop    eax
c0019077:	5a                   	pop    edx
c0019078:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001907e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019082:	e8 b5 90 ff ff       	call   c001213c <VAS::setCPUSpecific(unsigned long)>
c0019087:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001908a:	e8 5f f4 ff ff       	call   c00184ee <CPU::detectFeatures()>
c001908f:	e8 aa bf ff ff       	call   c001503e <setupInterruptController()>
c0019094:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001909a:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c001909f:	83 e0 10             	and    eax,0x10
c00190a2:	83 f8 01             	cmp    eax,0x1
c00190a5:	19 c0                	sbb    eax,eax
c00190a7:	83 e0 46             	and    eax,0x46
c00190aa:	83 c0 1e             	add    eax,0x1e
c00190ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00190b0:	e8 41 d4 ff ff       	call   c00164f6 <setupTimer(int)>
c00190b5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190be:	e8 bf fe ff ff       	call   c0018f82 <CPU::setupFeatures()>
c00190c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190c6:	e8 a7 f1 ff ff       	call   c0018272 <CPU::displayFeatures()>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	31 c0                	xor    eax,eax
c00190d0:	5b                   	pop    ebx
c00190d1:	5e                   	pop    esi
c00190d2:	5f                   	pop    edi
c00190d3:	c3                   	ret    

c00190d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00190d4:	57                   	push   edi
c00190d5:	56                   	push   esi
c00190d6:	53                   	push   ebx
c00190d7:	51                   	push   ecx
c00190d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190dc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00190df:	0f 02 c0             	lar    eax,ax
c00190e2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00190e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190e9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00190ec:	88 ca                	mov    dl,cl
c00190ee:	c0 ea 06             	shr    dl,0x6
c00190f1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00190f5:	89 ca                	mov    edx,ecx
c00190f7:	66 c1 ea 03          	shr    dx,0x3
c00190fb:	83 e2 07             	and    edx,0x7
c00190fe:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019103:	88 17                	mov    BYTE PTR [edi],dl
c0019105:	0f 84 a6 01 00 00    	je     c00192b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001910b:	83 e1 07             	and    ecx,0x7
c001910e:	80 f9 04             	cmp    cl,0x4
c0019111:	0f 84 98 00 00 00    	je     c00191af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019117:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001911c:	0f 95 c0             	setne  al
c001911f:	80 f9 05             	cmp    cl,0x5
c0019122:	0f 95 c2             	setne  dl
c0019125:	08 c2                	or     dl,al
c0019127:	74 79                	je     c00191a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019129:	84 c9                	test   cl,cl
c001912b:	75 05                	jne    c0019132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001912d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019130:	eb 3c                	jmp    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019132:	80 f9 01             	cmp    cl,0x1
c0019135:	75 05                	jne    c001913c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019137:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001913a:	eb 32                	jmp    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001913c:	80 f9 02             	cmp    cl,0x2
c001913f:	75 05                	jne    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019141:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019144:	eb 28                	jmp    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019146:	31 c0                	xor    eax,eax
c0019148:	80 f9 03             	cmp    cl,0x3
c001914b:	75 05                	jne    c0019152 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001914d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019150:	eb 1c                	jmp    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019152:	80 f9 05             	cmp    cl,0x5
c0019155:	75 05                	jne    c001915c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019157:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001915a:	eb 12                	jmp    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001915c:	80 f9 06             	cmp    cl,0x6
c001915f:	75 05                	jne    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019161:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019164:	eb 08                	jmp    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019166:	80 f9 07             	cmp    cl,0x7
c0019169:	75 03                	jne    c001916e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001916b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001916e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019173:	75 10                	jne    c0019185 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019175:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019179:	b9 03 00 00 00       	mov    ecx,0x3
c001917e:	01 d0                	add    eax,edx
c0019180:	e9 37 01 00 00       	jmp    c00192bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019185:	b9 02 00 00 00       	mov    ecx,0x2
c001918a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001918f:	0f 85 27 01 00 00    	jne    c00192bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019195:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019198:	b9 06 00 00 00       	mov    ecx,0x6
c001919d:	e9 1a 01 00 00       	jmp    c00192bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191a2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00191a5:	b9 06 00 00 00       	mov    ecx,0x6
c00191aa:	e9 0f 01 00 00       	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191af:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00191b2:	88 ca                	mov    dl,cl
c00191b4:	c0 ea 06             	shr    dl,0x6
c00191b7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191bb:	89 ca                	mov    edx,ecx
c00191bd:	66 c1 ea 03          	shr    dx,0x3
c00191c1:	83 e2 07             	and    edx,0x7
c00191c4:	80 e1 07             	and    cl,0x7
c00191c7:	75 05                	jne    c00191ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00191c9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00191cc:	eb 4c                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191ce:	80 f9 01             	cmp    cl,0x1
c00191d1:	75 05                	jne    c00191d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00191d3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00191d6:	eb 42                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191d8:	80 f9 02             	cmp    cl,0x2
c00191db:	75 05                	jne    c00191e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00191dd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00191e0:	eb 38                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191e2:	80 f9 03             	cmp    cl,0x3
c00191e5:	75 05                	jne    c00191ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00191e7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00191ea:	eb 2e                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191ec:	80 f9 04             	cmp    cl,0x4
c00191ef:	75 12                	jne    c0019203 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00191f1:	f6 c4 60             	test   ah,0x60
c00191f4:	75 08                	jne    c00191fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00191f6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00191f9:	8d 78 14             	lea    edi,[eax+0x14]
c00191fc:	eb 1c                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191fe:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019201:	eb 17                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019203:	80 f9 05             	cmp    cl,0x5
c0019206:	75 05                	jne    c001920d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019208:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001920b:	eb 0d                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001920d:	80 f9 06             	cmp    cl,0x6
c0019210:	75 05                	jne    c0019217 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019212:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019215:	eb 03                	jmp    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019217:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001921a:	84 d2                	test   dl,dl
c001921c:	75 05                	jne    c0019223 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001921e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019221:	eb 3c                	jmp    c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019223:	80 fa 01             	cmp    dl,0x1
c0019226:	75 05                	jne    c001922d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019228:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001922b:	eb 32                	jmp    c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001922d:	80 fa 02             	cmp    dl,0x2
c0019230:	75 05                	jne    c0019237 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019232:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019235:	eb 28                	jmp    c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019237:	80 fa 03             	cmp    dl,0x3
c001923a:	75 05                	jne    c0019241 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001923c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001923f:	eb 1e                	jmp    c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019241:	31 c0                	xor    eax,eax
c0019243:	80 fa 04             	cmp    dl,0x4
c0019246:	74 17                	je     c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019248:	80 fa 05             	cmp    dl,0x5
c001924b:	75 05                	jne    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001924d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019250:	eb 0d                	jmp    c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019252:	80 fa 06             	cmp    dl,0x6
c0019255:	75 05                	jne    c001925c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019257:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001925a:	eb 03                	jmp    c001925f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001925c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001925f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019264:	0f 94 c2             	sete   dl
c0019267:	80 f9 05             	cmp    cl,0x5
c001926a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001926e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019273:	d3 e0                	shl    eax,cl
c0019275:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019279:	74 0a                	je     c0019285 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001927b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001927e:	b9 07 00 00 00       	mov    ecx,0x7
c0019283:	eb 37                	jmp    c00192bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019285:	01 f8                	add    eax,edi
c0019287:	b9 03 00 00 00       	mov    ecx,0x3
c001928c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019291:	74 2b                	je     c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019293:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019298:	75 0d                	jne    c00192a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001929a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001929e:	01 c8                	add    eax,ecx
c00192a0:	b9 04 00 00 00       	mov    ecx,0x4
c00192a5:	eb 17                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192a7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192aa:	b9 07 00 00 00       	mov    ecx,0x7
c00192af:	eb 0d                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192b1:	b9 02 00 00 00       	mov    ecx,0x2
c00192b6:	b2 01                	mov    dl,0x1
c00192b8:	31 c0                	xor    eax,eax
c00192ba:	eb 02                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192bc:	31 d2                	xor    edx,edx
c00192be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192c2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192c8:	88 11                	mov    BYTE PTR [ecx],dl
c00192ca:	5a                   	pop    edx
c00192cb:	5b                   	pop    ebx
c00192cc:	5e                   	pop    esi
c00192cd:	5f                   	pop    edi
c00192ce:	c3                   	ret    
c00192cf:	90                   	nop

c00192d0 <EnvVarContainer::getEnv(char const*)>:
c00192d0:	57                   	push   edi
c00192d1:	56                   	push   esi
c00192d2:	53                   	push   ebx
c00192d3:	31 db                	xor    ebx,ebx
c00192d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192d9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00192db:	7e 2b                	jle    c0019308 <EnvVarContainer::getEnv(char const*)+0x38>
c00192dd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00192e4:	50                   	push   eax
c00192e5:	50                   	push   eax
c00192e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00192ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00192f0:	e8 86 74 fe ff       	call   c000077b <strcmp>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	85 c0                	test   eax,eax
c00192fa:	75 09                	jne    c0019305 <EnvVarContainer::getEnv(char const*)+0x35>
c00192fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192ff:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019303:	eb 05                	jmp    c001930a <EnvVarContainer::getEnv(char const*)+0x3a>
c0019305:	43                   	inc    ebx
c0019306:	eb d1                	jmp    c00192d9 <EnvVarContainer::getEnv(char const*)+0x9>
c0019308:	31 c0                	xor    eax,eax
c001930a:	5b                   	pop    ebx
c001930b:	5e                   	pop    esi
c001930c:	5f                   	pop    edi
c001930d:	c3                   	ret    

c001930e <EnvVarContainer::setEnv(char const*, char const*)>:
c001930e:	57                   	push   edi
c001930f:	56                   	push   esi
c0019310:	53                   	push   ebx
c0019311:	83 ec 1c             	sub    esp,0x1c
c0019314:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019318:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001931c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019320:	57                   	push   edi
c0019321:	e8 82 73 fe ff       	call   c00006a8 <strlen>
c0019326:	40                   	inc    eax
c0019327:	89 04 24             	mov    DWORD PTR [esp],eax
c001932a:	e8 a5 61 ff ff       	call   c000f4d4 <malloc>
c001932f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019332:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019336:	e8 6d 73 fe ff       	call   c00006a8 <strlen>
c001933b:	40                   	inc    eax
c001933c:	89 04 24             	mov    DWORD PTR [esp],eax
c001933f:	e8 90 61 ff ff       	call   c000f4d4 <malloc>
c0019344:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019347:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001934b:	e8 58 73 fe ff       	call   c00006a8 <strlen>
c0019350:	83 c4 0c             	add    esp,0xc
c0019353:	40                   	inc    eax
c0019354:	50                   	push   eax
c0019355:	6a 00                	push   0x0
c0019357:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001935b:	e8 2b 73 fe ff       	call   c000068b <memset>
c0019360:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019363:	e8 40 73 fe ff       	call   c00006a8 <strlen>
c0019368:	83 c4 0c             	add    esp,0xc
c001936b:	40                   	inc    eax
c001936c:	50                   	push   eax
c001936d:	57                   	push   edi
c001936e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019372:	e8 de 72 fe ff       	call   c0000655 <memcpy>
c0019377:	89 34 24             	mov    DWORD PTR [esp],esi
c001937a:	e8 29 73 fe ff       	call   c00006a8 <strlen>
c001937f:	83 c4 0c             	add    esp,0xc
c0019382:	40                   	inc    eax
c0019383:	50                   	push   eax
c0019384:	6a 00                	push   0x0
c0019386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001938a:	e8 fc 72 fe ff       	call   c000068b <memset>
c001938f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019392:	e8 11 73 fe ff       	call   c00006a8 <strlen>
c0019397:	83 c4 0c             	add    esp,0xc
c001939a:	40                   	inc    eax
c001939b:	50                   	push   eax
c001939c:	56                   	push   esi
c001939d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193a1:	e8 af 72 fe ff       	call   c0000655 <memcpy>
c00193a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193a8:	40                   	inc    eax
c00193a9:	89 03                	mov    DWORD PTR [ebx],eax
c00193ab:	c1 e0 03             	shl    eax,0x3
c00193ae:	5a                   	pop    edx
c00193af:	59                   	pop    ecx
c00193b0:	50                   	push   eax
c00193b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00193b4:	e8 07 61 ff ff       	call   c000f4c0 <realloc>
c00193b9:	83 c4 0c             	add    esp,0xc
c00193bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193bf:	6a 08                	push   0x8
c00193c1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193c5:	52                   	push   edx
c00193c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193c8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00193cc:	50                   	push   eax
c00193cd:	e8 83 72 fe ff       	call   c0000655 <memcpy>
c00193d2:	83 c4 20             	add    esp,0x20
c00193d5:	5b                   	pop    ebx
c00193d6:	5e                   	pop    esi
c00193d7:	5f                   	pop    edi
c00193d8:	c3                   	ret    
c00193d9:	90                   	nop

c00193da <EnvVarContainer::deleteEnv(char const*)>:
c00193da:	c3                   	ret    
c00193db:	90                   	nop

c00193dc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00193dc:	55                   	push   ebp
c00193dd:	57                   	push   edi
c00193de:	56                   	push   esi
c00193df:	53                   	push   ebx
c00193e0:	81 ec 38 01 00 00    	sub    esp,0x138
c00193e6:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00193ed:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00193f4:	68 14 01 00 00       	push   0x114
c00193f9:	e8 d6 60 ff ff       	call   c000f4d4 <malloc>
c00193fe:	83 c4 0c             	add    esp,0xc
c0019401:	89 c7                	mov    edi,eax
c0019403:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019406:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001940d:	50                   	push   eax
c001940e:	e8 a5 98 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c0019413:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019416:	e8 6f 9b ff ff       	call   c0012f8a <File::exists()>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	84 c0                	test   al,al
c0019420:	75 31                	jne    c0019453 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019422:	51                   	push   ecx
c0019423:	51                   	push   ecx
c0019424:	6a 12                	push   0x12
c0019426:	57                   	push   edi
c0019427:	e8 f0 98 ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001942c:	8b 07                	mov    eax,DWORD PTR [edi]
c001942e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019431:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019434:	e8 6f 72 fe ff       	call   c00006a8 <strlen>
c0019439:	5a                   	pop    edx
c001943a:	31 d2                	xor    edx,edx
c001943c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019440:	51                   	push   ecx
c0019441:	55                   	push   ebp
c0019442:	52                   	push   edx
c0019443:	50                   	push   eax
c0019444:	57                   	push   edi
c0019445:	ff d3                	call   ebx
c0019447:	83 c4 14             	add    esp,0x14
c001944a:	57                   	push   edi
c001944b:	e8 2a 99 ff ff       	call   c0012d7a <File::close()>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	31 db                	xor    ebx,ebx
c0019455:	50                   	push   eax
c0019456:	31 ed                	xor    ebp,ebp
c0019458:	68 00 01 00 00       	push   0x100
c001945d:	6a 00                	push   0x0
c001945f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019463:	50                   	push   eax
c0019464:	e8 22 72 fe ff       	call   c000068b <memset>
c0019469:	58                   	pop    eax
c001946a:	5a                   	pop    edx
c001946b:	6a 01                	push   0x1
c001946d:	57                   	push   edi
c001946e:	e8 a9 98 ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	83 ec 0c             	sub    esp,0xc
c0019479:	8b 07                	mov    eax,DWORD PTR [edi]
c001947b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001947f:	51                   	push   ecx
c0019480:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019484:	52                   	push   edx
c0019485:	6a 00                	push   0x0
c0019487:	6a 01                	push   0x1
c0019489:	57                   	push   edi
c001948a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001948d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019491:	83 c4 20             	add    esp,0x20
c0019494:	3c 0d                	cmp    al,0xd
c0019496:	0f 84 12 01 00 00    	je     c00195ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001949c:	85 db                	test   ebx,ebx
c001949e:	0f 84 fd 00 00 00    	je     c00195a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194a4:	3c 0a                	cmp    al,0xa
c00194a6:	74 13                	je     c00194bb <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194a8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194ad:	74 0c                	je     c00194bb <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194af:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00194b5:	0f 8e e6 00 00 00    	jle    c00195a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194bb:	83 ec 0c             	sub    esp,0xc
c00194be:	8d 53 01             	lea    edx,[ebx+0x1]
c00194c1:	29 dd                	sub    ebp,ebx
c00194c3:	52                   	push   edx
c00194c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00194c8:	e8 07 60 ff ff       	call   c000f4d4 <malloc>
c00194cd:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00194d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00194d4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00194d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00194db:	e8 f4 5f ff ff       	call   c000f4d4 <malloc>
c00194e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194eb:	52                   	push   edx
c00194ec:	6a 00                	push   0x0
c00194ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194f2:	e8 94 71 fe ff       	call   c000068b <memset>
c00194f7:	83 c4 0c             	add    esp,0xc
c00194fa:	53                   	push   ebx
c00194fb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194ff:	55                   	push   ebp
c0019500:	01 eb                	add    ebx,ebp
c0019502:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019506:	e8 4a 71 fe ff       	call   c0000655 <memcpy>
c001950b:	83 c4 0c             	add    esp,0xc
c001950e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019512:	51                   	push   ecx
c0019513:	6a 00                	push   0x0
c0019515:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019519:	e8 6d 71 fe ff       	call   c000068b <memset>
c001951e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019521:	e8 82 71 fe ff       	call   c00006a8 <strlen>
c0019526:	83 c4 0c             	add    esp,0xc
c0019529:	50                   	push   eax
c001952a:	53                   	push   ebx
c001952b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001952f:	e8 21 71 fe ff       	call   c0000655 <memcpy>
c0019534:	5b                   	pop    ebx
c0019535:	58                   	pop    eax
c0019536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001953a:	68 9c a1 02 c0       	push   0xc002a19c
c001953f:	e8 45 92 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0019544:	8b 06                	mov    eax,DWORD PTR [esi]
c0019546:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019549:	40                   	inc    eax
c001954a:	83 c4 10             	add    esp,0x10
c001954d:	89 06                	mov    DWORD PTR [esi],eax
c001954f:	85 d2                	test   edx,edx
c0019551:	75 0c                	jne    c001955f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019553:	83 ec 0c             	sub    esp,0xc
c0019556:	6a 08                	push   0x8
c0019558:	e8 77 5f ff ff       	call   c000f4d4 <malloc>
c001955d:	eb 0c                	jmp    c001956b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001955f:	c1 e0 03             	shl    eax,0x3
c0019562:	51                   	push   ecx
c0019563:	51                   	push   ecx
c0019564:	50                   	push   eax
c0019565:	52                   	push   edx
c0019566:	e8 55 5f ff ff       	call   c000f4c0 <realloc>
c001956b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001956e:	83 c4 10             	add    esp,0x10
c0019571:	31 db                	xor    ebx,ebx
c0019573:	52                   	push   edx
c0019574:	6a 08                	push   0x8
c0019576:	8d 44 24 20          	lea    eax,[esp+0x20]
c001957a:	50                   	push   eax
c001957b:	8b 16                	mov    edx,DWORD PTR [esi]
c001957d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019580:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019584:	50                   	push   eax
c0019585:	e8 cb 70 fe ff       	call   c0000655 <memcpy>
c001958a:	83 c4 0c             	add    esp,0xc
c001958d:	68 00 01 00 00       	push   0x100
c0019592:	6a 00                	push   0x0
c0019594:	55                   	push   ebp
c0019595:	31 ed                	xor    ebp,ebp
c0019597:	e8 ef 70 fe ff       	call   c000068b <memset>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	eb 0d                	jmp    c00195ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195a1:	3c 3d                	cmp    al,0x3d
c00195a3:	74 07                	je     c00195ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00195a5:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00195a9:	45                   	inc    ebp
c00195aa:	eb 02                	jmp    c00195ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195ac:	89 eb                	mov    ebx,ebp
c00195ae:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195b3:	0f 85 bd fe ff ff    	jne    c0019476 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00195b9:	50                   	push   eax
c00195ba:	50                   	push   eax
c00195bb:	ff 36                	push   DWORD PTR [esi]
c00195bd:	68 aa a1 02 c0       	push   0xc002a1aa
c00195c2:	e8 c2 91 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00195c7:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195cd:	5b                   	pop    ebx
c00195ce:	5e                   	pop    esi
c00195cf:	5f                   	pop    edi
c00195d0:	5d                   	pop    ebp
c00195d1:	c3                   	ret    

c00195d2 <EnvVarContainer::__loadSystem()>:
c00195d2:	83 ec 10             	sub    esp,0x10
c00195d5:	68 a0 be 02 c0       	push   0xc002bea0
c00195da:	68 d5 a1 02 c0       	push   0xc002a1d5
c00195df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195e3:	e8 f4 fd ff ff       	call   c00193dc <EnvVarContainer::loadFrom(char const*, char const*)>
c00195e8:	83 c4 1c             	add    esp,0x1c
c00195eb:	c3                   	ret    

c00195ec <EnvVarContainer::__loadUser()>:
c00195ec:	c3                   	ret    
c00195ed:	90                   	nop

c00195ee <EnvVarContainer::EnvVarContainer(Process*)>:
c00195ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00195f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019600:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019607:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001960e:	90                   	nop
c001960f:	c3                   	ret    

c0019610 <EnvVarContainer::~EnvVarContainer()>:
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019617:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001961a:	85 c0                	test   eax,eax
c001961c:	74 1d                	je     c001963b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001961e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019622:	8b 00                	mov    eax,DWORD PTR [eax]
c0019624:	85 c0                	test   eax,eax
c0019626:	74 13                	je     c001963b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001962f:	83 ec 0c             	sub    esp,0xc
c0019632:	50                   	push   eax
c0019633:	e8 ac 5e ff ff       	call   c000f4e4 <free>
c0019638:	83 c4 10             	add    esp,0x10
c001963b:	90                   	nop
c001963c:	83 c4 0c             	add    esp,0xc
c001963f:	c3                   	ret    

c0019640 <Krnl::getEnv(Process*, char const*)>:
c0019640:	53                   	push   ebx
c0019641:	83 ec 08             	sub    esp,0x8
c0019644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019648:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001964c:	39 05 b4 de 02 c0    	cmp    DWORD PTR ds:0xc002deb4,eax
c0019652:	74 04                	je     c0019658 <Krnl::getEnv(Process*, char const*)+0x18>
c0019654:	85 c0                	test   eax,eax
c0019656:	75 0b                	jne    c0019663 <Krnl::getEnv(Process*, char const*)+0x23>
c0019658:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c001965d:	85 c0                	test   eax,eax
c001965f:	75 19                	jne    c001967a <Krnl::getEnv(Process*, char const*)+0x3a>
c0019661:	eb 27                	jmp    c001968a <Krnl::getEnv(Process*, char const*)+0x4a>
c0019663:	52                   	push   edx
c0019664:	52                   	push   edx
c0019665:	53                   	push   ebx
c0019666:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001966c:	e8 5f fc ff ff       	call   c00192d0 <EnvVarContainer::getEnv(char const*)>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	85 c0                	test   eax,eax
c0019676:	75 28                	jne    c00196a0 <Krnl::getEnv(Process*, char const*)+0x60>
c0019678:	eb de                	jmp    c0019658 <Krnl::getEnv(Process*, char const*)+0x18>
c001967a:	52                   	push   edx
c001967b:	52                   	push   edx
c001967c:	53                   	push   ebx
c001967d:	50                   	push   eax
c001967e:	e8 4d fc ff ff       	call   c00192d0 <EnvVarContainer::getEnv(char const*)>
c0019683:	83 c4 10             	add    esp,0x10
c0019686:	85 c0                	test   eax,eax
c0019688:	75 16                	jne    c00196a0 <Krnl::getEnv(Process*, char const*)+0x60>
c001968a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001968e:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c0019693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019697:	83 c4 08             	add    esp,0x8
c001969a:	5b                   	pop    ebx
c001969b:	e9 30 fc ff ff       	jmp    c00192d0 <EnvVarContainer::getEnv(char const*)>
c00196a0:	83 c4 08             	add    esp,0x8
c00196a3:	5b                   	pop    ebx
c00196a4:	c3                   	ret    

c00196a5 <Krnl::setEnvSystem(char const*, char const*)>:
c00196a5:	83 ec 10             	sub    esp,0x10
c00196a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b0:	ff 35 94 d4 02 c0    	push   DWORD PTR ds:0xc002d494
c00196b6:	e8 53 fc ff ff       	call   c001930e <EnvVarContainer::setEnv(char const*, char const*)>
c00196bb:	83 c4 1c             	add    esp,0x1c
c00196be:	c3                   	ret    

c00196bf <Krnl::setEnvUser(char const*, char const*)>:
c00196bf:	a1 90 d4 02 c0       	mov    eax,ds:0xc002d490
c00196c4:	85 c0                	test   eax,eax
c00196c6:	74 15                	je     c00196dd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00196c8:	83 ec 10             	sub    esp,0x10
c00196cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196d3:	50                   	push   eax
c00196d4:	e8 35 fc ff ff       	call   c001930e <EnvVarContainer::setEnv(char const*, char const*)>
c00196d9:	83 c4 1c             	add    esp,0x1c
c00196dc:	c3                   	ret    
c00196dd:	c3                   	ret    

c00196de <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00196de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196e2:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00196e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196ec:	e9 1d fc ff ff       	jmp    c001930e <EnvVarContainer::setEnv(char const*, char const*)>

c00196f1 <Krnl::deleteEnvSystem(char const*)>:
c00196f1:	c3                   	ret    

c00196f2 <Krnl::deleteEnvUser(char const*)>:
c00196f2:	c3                   	ret    

c00196f3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00196f3:	c3                   	ret    

c00196f4 <Krnl::newProcessEnv(Process*)>:
c00196f4:	83 ec 28             	sub    esp,0x28
c00196f7:	6a 0c                	push   0xc
c00196f9:	e8 d6 5d ff ff       	call   c000f4d4 <malloc>
c00196fe:	5a                   	pop    edx
c00196ff:	59                   	pop    ecx
c0019700:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019704:	50                   	push   eax
c0019705:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019709:	e8 e0 fe ff ff       	call   c00195ee <EnvVarContainer::EnvVarContainer(Process*)>
c001970e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019712:	83 c4 2c             	add    esp,0x2c
c0019715:	c3                   	ret    

c0019716 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019716:	56                   	push   esi
c0019717:	53                   	push   ebx
c0019718:	83 ec 10             	sub    esp,0x10
c001971b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001971f:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019725:	6a 0c                	push   0xc
c0019727:	e8 a8 5d ff ff       	call   c000f4d4 <malloc>
c001972c:	89 c3                	mov    ebx,eax
c001972e:	58                   	pop    eax
c001972f:	5a                   	pop    edx
c0019730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019734:	53                   	push   ebx
c0019735:	e8 b4 fe ff ff       	call   c00195ee <EnvVarContainer::EnvVarContainer(Process*)>
c001973a:	8b 06                	mov    eax,DWORD PTR [esi]
c001973c:	89 03                	mov    DWORD PTR [ebx],eax
c001973e:	c1 e0 03             	shl    eax,0x3
c0019741:	89 04 24             	mov    DWORD PTR [esp],eax
c0019744:	e8 8b 5d ff ff       	call   c000f4d4 <malloc>
c0019749:	83 c4 0c             	add    esp,0xc
c001974c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001974f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019751:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019758:	52                   	push   edx
c0019759:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001975c:	50                   	push   eax
c001975d:	e8 f3 6e fe ff       	call   c0000655 <memcpy>
c0019762:	89 d8                	mov    eax,ebx
c0019764:	83 c4 14             	add    esp,0x14
c0019767:	5b                   	pop    ebx
c0019768:	5e                   	pop    esi
c0019769:	c3                   	ret    

c001976a <Krnl::loadSystemEnv()>:
c001976a:	53                   	push   ebx
c001976b:	83 ec 14             	sub    esp,0x14
c001976e:	6a 0c                	push   0xc
c0019770:	e8 5f 5d ff ff       	call   c000f4d4 <malloc>
c0019775:	89 c3                	mov    ebx,eax
c0019777:	58                   	pop    eax
c0019778:	5a                   	pop    edx
c0019779:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001977f:	53                   	push   ebx
c0019780:	e8 69 fe ff ff       	call   c00195ee <EnvVarContainer::EnvVarContainer(Process*)>
c0019785:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019788:	89 1d 94 d4 02 c0    	mov    DWORD PTR ds:0xc002d494,ebx
c001978e:	e8 3f fe ff ff       	call   c00195d2 <EnvVarContainer::__loadSystem()>
c0019793:	83 c4 18             	add    esp,0x18
c0019796:	5b                   	pop    ebx
c0019797:	c3                   	ret    

c0019798 <Krnl::loadUserEnv()>:
c0019798:	53                   	push   ebx
c0019799:	83 ec 14             	sub    esp,0x14
c001979c:	6a 0c                	push   0xc
c001979e:	e8 31 5d ff ff       	call   c000f4d4 <malloc>
c00197a3:	89 c3                	mov    ebx,eax
c00197a5:	58                   	pop    eax
c00197a6:	5a                   	pop    edx
c00197a7:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c00197ad:	53                   	push   ebx
c00197ae:	e8 3b fe ff ff       	call   c00195ee <EnvVarContainer::EnvVarContainer(Process*)>
c00197b3:	89 1d 90 d4 02 c0    	mov    DWORD PTR ds:0xc002d490,ebx
c00197b9:	83 c4 18             	add    esp,0x18
c00197bc:	5b                   	pop    ebx
c00197bd:	c3                   	ret    

c00197be <Krnl::flushEnv()>:
c00197be:	c3                   	ret    

c00197bf <Krnl::getProcessTotalEnvCount(Process*)>:
c00197bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c3:	8b 15 90 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d490
c00197c9:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00197cf:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c00197d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00197d6:	03 01                	add    eax,DWORD PTR [ecx]
c00197d8:	85 d2                	test   edx,edx
c00197da:	74 02                	je     c00197de <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00197dc:	03 02                	add    eax,DWORD PTR [edx]
c00197de:	c3                   	ret    

c00197df <Krnl::getProcessEnvPair(Process*, int)>:
c00197df:	57                   	push   edi
c00197e0:	8b 0d 90 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d490
c00197e6:	56                   	push   esi
c00197e7:	85 c9                	test   ecx,ecx
c00197e9:	53                   	push   ebx
c00197ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197f2:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00197f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00197fe:	75 47                	jne    c0019847 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019800:	39 c3                	cmp    ebx,eax
c0019802:	7c 47                	jl     c001984b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019804:	8b 15 94 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d494
c001980a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001980c:	01 c1                	add    ecx,eax
c001980e:	39 d9                	cmp    ecx,ebx
c0019810:	7e 6c                	jle    c001987e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019812:	51                   	push   ecx
c0019813:	89 d9                	mov    ecx,ebx
c0019815:	29 c1                	sub    ecx,eax
c0019817:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001981a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001981e:	53                   	push   ebx
c001981f:	68 f7 a1 02 c0       	push   0xc002a1f7
c0019824:	e8 60 8f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0019829:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001982f:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019831:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c0019836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019839:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001983d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019840:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019843:	89 06                	mov    DWORD PTR [esi],eax
c0019845:	eb 51                	jmp    c0019898 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019847:	39 c3                	cmp    ebx,eax
c0019849:	7d 05                	jge    c0019850 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001984b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001984e:	eb 20                	jmp    c0019870 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019850:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019852:	8d 14 07             	lea    edx,[edi+eax*1]
c0019855:	39 da                	cmp    edx,ebx
c0019857:	7e 04                	jle    c001985d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019859:	29 c3                	sub    ebx,eax
c001985b:	eb 10                	jmp    c001986d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001985d:	8b 0d 94 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d494
c0019863:	03 11                	add    edx,DWORD PTR [ecx]
c0019865:	39 da                	cmp    edx,ebx
c0019867:	7e 15                	jle    c001987e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019869:	29 c3                	sub    ebx,eax
c001986b:	29 fb                	sub    ebx,edi
c001986d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019870:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019874:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019877:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001987a:	89 06                	mov    DWORD PTR [esi],eax
c001987c:	eb 1d                	jmp    c001989b <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001987e:	83 ec 0c             	sub    esp,0xc
c0019881:	68 0b a2 02 c0       	push   0xc002a20b
c0019886:	e8 18 00 00 00       	call   c00198a3 <Krnl::panic(char const*)>
c001988b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019891:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	89 f0                	mov    eax,esi
c001989d:	5b                   	pop    ebx
c001989e:	5e                   	pop    esi
c001989f:	5f                   	pop    edi
c00198a0:	c2 04 00             	ret    0x4

c00198a3 <Krnl::panic(char const*)>:
c00198a3:	55                   	push   ebp
c00198a4:	89 e5                	mov    ebp,esp
c00198a6:	53                   	push   ebx
c00198a7:	50                   	push   eax
c00198a8:	a1 9c d4 02 c0       	mov    eax,ds:0xc002d49c
c00198ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00198b0:	85 c0                	test   eax,eax
c00198b2:	74 02                	je     c00198b6 <Krnl::panic(char const*)+0x13>
c00198b4:	ff d0                	call   eax
c00198b6:	fa                   	cli    
c00198b7:	c6 05 a0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4a0,0x1
c00198be:	83 ec 08             	sub    esp,0x8
c00198c1:	c6 05 a4 b8 02 c0 00 	mov    BYTE PTR ds:0xc002b8a4,0x0
c00198c8:	53                   	push   ebx
c00198c9:	68 25 a2 02 c0       	push   0xc002a225
c00198ce:	e8 b6 8e ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00198d3:	58                   	pop    eax
c00198d4:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00198d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198df:	e8 67 70 ff ff       	call   c001094b <setActiveTerminal(VgaText*)>
c00198e4:	83 c4 0c             	add    esp,0xc
c00198e7:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00198ec:	6a 01                	push   0x1
c00198ee:	6a 0f                	push   0xf
c00198f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198f6:	e8 d9 69 ff ff       	call   c00102d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00198fb:	5a                   	pop    edx
c00198fc:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019901:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019907:	e8 e0 72 ff ff       	call   c0010bec <VgaText::clearScreen()>
c001990c:	59                   	pop    ecx
c001990d:	58                   	pop    eax
c001990e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019913:	68 3e a2 02 c0       	push   0xc002a23e
c0019918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001991e:	e8 47 74 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019923:	58                   	pop    eax
c0019924:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019929:	5a                   	pop    edx
c001992a:	68 e4 a2 02 c0       	push   0xc002a2e4
c001992f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019935:	e8 30 74 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001993a:	59                   	pop    ecx
c001993b:	58                   	pop    eax
c001993c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019941:	68 5a a2 02 c0       	push   0xc002a25a
c0019946:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001994c:	e8 19 74 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019951:	58                   	pop    eax
c0019952:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019957:	5a                   	pop    edx
c0019958:	53                   	push   ebx
c0019959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001995f:	e8 06 74 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019964:	59                   	pop    ecx
c0019965:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001996a:	5b                   	pop    ebx
c001996b:	68 7a a2 02 c0       	push   0xc002a27a
c0019970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019976:	e8 ef 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c001997b:	58                   	pop    eax
c001997c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019981:	5a                   	pop    edx
c0019982:	68 20 a3 02 c0       	push   0xc002a320
c0019987:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001998d:	e8 d8 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019992:	59                   	pop    ecx
c0019993:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019998:	5b                   	pop    ebx
c0019999:	68 5a a2 02 c0       	push   0xc002a25a
c001999e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199a4:	e8 c1 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00199a9:	58                   	pop    eax
c00199aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199af:	5a                   	pop    edx
c00199b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199b3:	83 c0 0c             	add    eax,0xc
c00199b6:	50                   	push   eax
c00199b7:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c2:	e8 a3 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00199c7:	59                   	pop    ecx
c00199c8:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199cd:	5b                   	pop    ebx
c00199ce:	68 79 a2 02 c0       	push   0xc002a279
c00199d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d9:	e8 8c 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00199de:	58                   	pop    eax
c00199df:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199e4:	5a                   	pop    edx
c00199e5:	68 4c a3 02 c0       	push   0xc002a34c
c00199ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199f0:	e8 75 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c00199f5:	59                   	pop    ecx
c00199f6:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c00199fb:	5b                   	pop    ebx
c00199fc:	68 8c a3 02 c0       	push   0xc002a38c
c0019a01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a07:	e8 5e 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019a0c:	58                   	pop    eax
c0019a0d:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a12:	5a                   	pop    edx
c0019a13:	68 65 a2 02 c0       	push   0xc002a265
c0019a18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a1e:	e8 47 73 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019a23:	59                   	pop    ecx
c0019a24:	5b                   	pop    ebx
c0019a25:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a28:	68 7d a2 02 c0       	push   0xc002a27d
c0019a2d:	e8 57 8d ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0019a32:	58                   	pop    eax
c0019a33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a36:	5a                   	pop    edx
c0019a37:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a3a:	68 86 a2 02 c0       	push   0xc002a286
c0019a3f:	e8 45 8d ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0019a44:	59                   	pop    ecx
c0019a45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a48:	5b                   	pop    ebx
c0019a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a4b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a4e:	68 8f a2 02 c0       	push   0xc002a28f
c0019a53:	e8 31 8d ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0019a58:	58                   	pop    eax
c0019a59:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a5e:	5a                   	pop    edx
c0019a5f:	68 d0 a3 02 c0       	push   0xc002a3d0
c0019a64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a6a:	e8 fb 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019a6f:	59                   	pop    ecx
c0019a70:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a75:	5b                   	pop    ebx
c0019a76:	68 98 a2 02 c0       	push   0xc002a298
c0019a7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a81:	e8 e4 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019a86:	0f 20 c0             	mov    eax,cr0
c0019a89:	5a                   	pop    edx
c0019a8a:	59                   	pop    ecx
c0019a8b:	50                   	push   eax
c0019a8c:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019a91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a97:	e8 f4 72 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019a9c:	5b                   	pop    ebx
c0019a9d:	58                   	pop    eax
c0019a9e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019aa3:	68 a2 a2 02 c0       	push   0xc002a2a2
c0019aa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aae:	e8 b7 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019ab3:	0f 20 d0             	mov    eax,cr2
c0019ab6:	5a                   	pop    edx
c0019ab7:	59                   	pop    ecx
c0019ab8:	50                   	push   eax
c0019ab9:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019abe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ac4:	e8 c7 72 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019ac9:	5b                   	pop    ebx
c0019aca:	58                   	pop    eax
c0019acb:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019ad0:	68 ac a2 02 c0       	push   0xc002a2ac
c0019ad5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019adb:	e8 8a 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019ae0:	0f 20 d8             	mov    eax,cr3
c0019ae3:	5a                   	pop    edx
c0019ae4:	59                   	pop    ecx
c0019ae5:	50                   	push   eax
c0019ae6:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019aeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019af1:	e8 9a 72 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019af6:	5b                   	pop    ebx
c0019af7:	58                   	pop    eax
c0019af8:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019afd:	68 bf a2 02 c0       	push   0xc002a2bf
c0019b02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b08:	e8 5d 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019b0d:	0f 20 e0             	mov    eax,cr4
c0019b10:	5a                   	pop    edx
c0019b11:	59                   	pop    ecx
c0019b12:	50                   	push   eax
c0019b13:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b1e:	e8 6d 72 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019b23:	5b                   	pop    ebx
c0019b24:	58                   	pop    eax
c0019b25:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b2a:	68 c9 a2 02 c0       	push   0xc002a2c9
c0019b2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b35:	e8 30 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019b3a:	5a                   	pop    edx
c0019b3b:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b40:	59                   	pop    ecx
c0019b41:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b4a:	50                   	push   eax
c0019b4b:	e8 40 72 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019b50:	5b                   	pop    ebx
c0019b51:	58                   	pop    eax
c0019b52:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b57:	68 e0 a2 02 c0       	push   0xc002a2e0
c0019b5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b62:	e8 03 72 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019b67:	5a                   	pop    edx
c0019b68:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b6d:	59                   	pop    ecx
c0019b6e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b74:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b77:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b7a:	50                   	push   eax
c0019b7b:	e8 10 72 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019b80:	5b                   	pop    ebx
c0019b81:	58                   	pop    eax
c0019b82:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b87:	68 e0 a2 02 c0       	push   0xc002a2e0
c0019b8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b92:	e8 d3 71 ff ff       	call   c0010d6a <VgaText::puts(char const*)>
c0019b97:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c0019b9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b9f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019ba5:	8b 12                	mov    edx,DWORD PTR [edx]
c0019ba7:	59                   	pop    ecx
c0019ba8:	5b                   	pop    ebx
c0019ba9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019bac:	50                   	push   eax
c0019bad:	e8 de 71 ff ff       	call   c0010d90 <VgaText::putx(unsigned int)>
c0019bb2:	83 c4 10             	add    esp,0x10
c0019bb5:	b2 fe                	mov    dl,0xfe
c0019bb7:	e4 60                	in     al,0x60
c0019bb9:	3c 1c                	cmp    al,0x1c
c0019bbb:	74 04                	je     c0019bc1 <Krnl::panic(char const*)+0x31e>
c0019bbd:	3c 5a                	cmp    al,0x5a
c0019bbf:	75 f6                	jne    c0019bb7 <Krnl::panic(char const*)+0x314>
c0019bc1:	e4 64                	in     al,0x64
c0019bc3:	a8 02                	test   al,0x2
c0019bc5:	75 fa                	jne    c0019bc1 <Krnl::panic(char const*)+0x31e>
c0019bc7:	88 d0                	mov    al,dl
c0019bc9:	e6 64                	out    0x64,al
c0019bcb:	fa                   	cli    
c0019bcc:	f4                   	hlt    
c0019bcd:	eb e8                	jmp    c0019bb7 <Krnl::panic(char const*)+0x314>

c0019bcf <Net::switchEndian16(unsigned short)>:
c0019bcf:	83 ec 04             	sub    esp,0x4
c0019bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd6:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019bda:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bde:	c1 f8 08             	sar    eax,0x8
c0019be1:	89 c2                	mov    edx,eax
c0019be3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019be7:	c1 e0 08             	shl    eax,0x8
c0019bea:	09 d0                	or     eax,edx
c0019bec:	83 c4 04             	add    esp,0x4
c0019bef:	c3                   	ret    

c0019bf0 <Net::switchEndian32(unsigned int)>:
c0019bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf4:	c1 e8 18             	shr    eax,0x18
c0019bf7:	89 c2                	mov    edx,eax
c0019bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfd:	c1 e0 08             	shl    eax,0x8
c0019c00:	25 00 00 ff 00       	and    eax,0xff0000
c0019c05:	09 c2                	or     edx,eax
c0019c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c0b:	c1 e8 08             	shr    eax,0x8
c0019c0e:	25 00 ff 00 00       	and    eax,0xff00
c0019c13:	09 c2                	or     edx,eax
c0019c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c19:	c1 e0 18             	shl    eax,0x18
c0019c1c:	09 d0                	or     eax,edx
c0019c1e:	c3                   	ret    

c0019c1f <Net::crc32Calc(unsigned char*, int)>:
c0019c1f:	83 ec 10             	sub    esp,0x10
c0019c22:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c27:	75 07                	jne    c0019c30 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c29:	b8 00 00 00 00       	mov    eax,0x0
c0019c2e:	eb 7c                	jmp    c0019cac <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c30:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c35:	7f 07                	jg     c0019c3e <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c37:	b8 00 00 00 00       	mov    eax,0x0
c0019c3c:	eb 6e                	jmp    c0019cac <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c3e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c46:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c52:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c56:	7d 4e                	jge    c0019ca6 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c60:	01 d0                	add    eax,edx
c0019c62:	8a 00                	mov    al,BYTE PTR [eax]
c0019c64:	0f b6 c0             	movzx  eax,al
c0019c67:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c73:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019c78:	7f 26                	jg     c0019ca0 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c7e:	83 e0 01             	and    eax,0x1
c0019c81:	74 0d                	je     c0019c90 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019c83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c87:	d1 e8                	shr    eax,1
c0019c89:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019c8e:	eb 06                	jmp    c0019c96 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c94:	d1 e8                	shr    eax,1
c0019c96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c9e:	eb d3                	jmp    c0019c73 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019ca0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019ca4:	eb a8                	jmp    c0019c4e <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019caa:	f7 d0                	not    eax
c0019cac:	83 c4 10             	add    esp,0x10
c0019caf:	c3                   	ret    

c0019cb0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019cb0:	83 ec 1c             	sub    esp,0x1c
c0019cb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cbb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cc3:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019cc8:	7f 14                	jg     c0019cde <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019cca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cce:	8d 50 01             	lea    edx,[eax+0x1]
c0019cd1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cd5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019cd8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019cdc:	eb e5                	jmp    c0019cc3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019cde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ce2:	8d 50 01             	lea    edx,[eax+0x1]
c0019ce5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ce9:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019cec:	83 ec 04             	sub    esp,0x4
c0019cef:	6a 06                	push   0x6
c0019cf1:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019cf5:	50                   	push   eax
c0019cf6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019cfa:	e8 56 69 fe ff       	call   c0000655 <memcpy>
c0019cff:	83 c4 10             	add    esp,0x10
c0019d02:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d07:	83 ec 04             	sub    esp,0x4
c0019d0a:	6a 06                	push   0x6
c0019d0c:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019d10:	50                   	push   eax
c0019d11:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d15:	e8 3b 69 fe ff       	call   c0000655 <memcpy>
c0019d1a:	83 c4 10             	add    esp,0x10
c0019d1d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d26:	0f b7 c0             	movzx  eax,ax
c0019d29:	c1 f8 08             	sar    eax,0x8
c0019d2c:	89 c1                	mov    ecx,eax
c0019d2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d32:	8d 50 01             	lea    edx,[eax+0x1]
c0019d35:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d39:	88 ca                	mov    dl,cl
c0019d3b:	88 10                	mov    BYTE PTR [eax],dl
c0019d3d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d45:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d48:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d4c:	88 10                	mov    BYTE PTR [eax],dl
c0019d4e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d56:	83 ec 04             	sub    esp,0x4
c0019d59:	52                   	push   edx
c0019d5a:	50                   	push   eax
c0019d5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d5f:	e8 f1 68 fe ff       	call   c0000655 <memcpy>
c0019d64:	83 c4 10             	add    esp,0x10
c0019d67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d6b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d73:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019d77:	83 ec 08             	sub    esp,0x8
c0019d7a:	50                   	push   eax
c0019d7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d7f:	e8 9b fe ff ff       	call   c0019c1f <Net::crc32Calc(unsigned char*, int)>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8f:	c1 e8 18             	shr    eax,0x18
c0019d92:	89 c1                	mov    ecx,eax
c0019d94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d98:	8d 50 01             	lea    edx,[eax+0x1]
c0019d9b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d9f:	88 ca                	mov    dl,cl
c0019da1:	88 10                	mov    BYTE PTR [eax],dl
c0019da3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019da7:	c1 e8 10             	shr    eax,0x10
c0019daa:	89 c1                	mov    ecx,eax
c0019dac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019db0:	8d 50 01             	lea    edx,[eax+0x1]
c0019db3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019db7:	88 ca                	mov    dl,cl
c0019db9:	88 10                	mov    BYTE PTR [eax],dl
c0019dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbf:	c1 e8 08             	shr    eax,0x8
c0019dc2:	89 c1                	mov    ecx,eax
c0019dc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dc8:	8d 50 01             	lea    edx,[eax+0x1]
c0019dcb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dcf:	88 ca                	mov    dl,cl
c0019dd1:	88 10                	mov    BYTE PTR [eax],dl
c0019dd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0019dda:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019de2:	88 10                	mov    BYTE PTR [eax],dl
c0019de4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019de8:	83 c4 1c             	add    esp,0x1c
c0019deb:	c3                   	ret    

c0019dec <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019dec:	83 ec 2c             	sub    esp,0x2c
c0019def:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019df3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019df7:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019dfc:	83 ec 04             	sub    esp,0x4
c0019dff:	6a 06                	push   0x6
c0019e01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e09:	83 c0 0e             	add    eax,0xe
c0019e0c:	50                   	push   eax
c0019e0d:	e8 43 68 fe ff       	call   c0000655 <memcpy>
c0019e12:	83 c4 10             	add    esp,0x10
c0019e15:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e1a:	83 ec 04             	sub    esp,0x4
c0019e1d:	6a 06                	push   0x6
c0019e1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e27:	83 c0 08             	add    eax,0x8
c0019e2a:	50                   	push   eax
c0019e2b:	e8 25 68 fe ff       	call   c0000655 <memcpy>
c0019e30:	83 c4 10             	add    esp,0x10
c0019e33:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e3c:	8d 50 01             	lea    edx,[eax+0x1]
c0019e3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e43:	8a 00                	mov    al,BYTE PTR [eax]
c0019e45:	0f b6 c0             	movzx  eax,al
c0019e48:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e51:	8d 50 01             	lea    edx,[eax+0x1]
c0019e54:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e58:	8a 00                	mov    al,BYTE PTR [eax]
c0019e5a:	0f b6 c0             	movzx  eax,al
c0019e5d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e62:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e67:	c1 e0 08             	shl    eax,0x8
c0019e6a:	89 c2                	mov    edx,eax
c0019e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e70:	09 d0                	or     eax,edx
c0019e72:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e76:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019e7a:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019e7f:	75 3a                	jne    c0019ebb <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e85:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e88:	66 3d dc 05          	cmp    ax,0x5dc
c0019e8c:	77 10                	ja     c0019e9e <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019e8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e95:	0f b7 c0             	movzx  eax,ax
c0019e98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019e9c:	eb 1d                	jmp    c0019ebb <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e9e:	83 ec 0c             	sub    esp,0xc
c0019ea1:	68 f8 a3 02 c0       	push   0xc002a3f8
c0019ea6:	e8 de 88 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019eb2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019eb6:	e9 c0 00 00 00       	jmp    c0019f7b <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019ebb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ebf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ec5:	83 ec 04             	sub    esp,0x4
c0019ec8:	52                   	push   edx
c0019ec9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ecd:	50                   	push   eax
c0019ece:	e8 82 67 fe ff       	call   c0000655 <memcpy>
c0019ed3:	83 c4 10             	add    esp,0x10
c0019ed6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019eda:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019ede:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ee2:	8d 50 01             	lea    edx,[eax+0x1]
c0019ee5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ee9:	8a 00                	mov    al,BYTE PTR [eax]
c0019eeb:	0f b6 c0             	movzx  eax,al
c0019eee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ef2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ef6:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019efd:	8a 00                	mov    al,BYTE PTR [eax]
c0019eff:	0f b6 c0             	movzx  eax,al
c0019f02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f0a:	8d 50 01             	lea    edx,[eax+0x1]
c0019f0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f11:	8a 00                	mov    al,BYTE PTR [eax]
c0019f13:	0f b6 c0             	movzx  eax,al
c0019f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f1e:	8d 50 01             	lea    edx,[eax+0x1]
c0019f21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f25:	8a 00                	mov    al,BYTE PTR [eax]
c0019f27:	0f b6 c0             	movzx  eax,al
c0019f2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f32:	c1 e0 18             	shl    eax,0x18
c0019f35:	89 c2                	mov    edx,eax
c0019f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f3b:	c1 e0 10             	shl    eax,0x10
c0019f3e:	09 c2                	or     edx,eax
c0019f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f44:	c1 e0 08             	shl    eax,0x8
c0019f47:	09 d0                	or     eax,edx
c0019f49:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f55:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f59:	83 e8 04             	sub    eax,0x4
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	50                   	push   eax
c0019f60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f64:	e8 b6 fc ff ff       	call   c0019c1f <Net::crc32Calc(unsigned char*, int)>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f70:	0f 94 c2             	sete   dl
c0019f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f77:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019f7a:	90                   	nop
c0019f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f7f:	83 c4 2c             	add    esp,0x2c
c0019f82:	c2 04 00             	ret    0x4

c0019f85 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019f85:	55                   	push   ebp
c0019f86:	57                   	push   edi
c0019f87:	56                   	push   esi
c0019f88:	53                   	push   ebx
c0019f89:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f8f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019f96:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019f98:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019f9b:	80 fb 40             	cmp    bl,0x40
c0019f9e:	75 1b                	jne    c0019fbb <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019fa0:	8a 16                	mov    dl,BYTE PTR [esi]
c0019fa2:	84 d2                	test   dl,dl
c0019fa4:	0f 84 f1 00 00 00    	je     c001a09b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019faa:	8d 46 01             	lea    eax,[esi+0x1]
c0019fad:	80 fa 3a             	cmp    dl,0x3a
c0019fb0:	74 04                	je     c0019fb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019fb2:	89 c6                	mov    esi,eax
c0019fb4:	eb ea                	jmp    c0019fa0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019fb6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019fb9:	89 c6                	mov    esi,eax
c0019fbb:	50                   	push   eax
c0019fbc:	6a 40                	push   0x40
c0019fbe:	6a 00                	push   0x0
c0019fc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fc4:	50                   	push   eax
c0019fc5:	e8 c1 66 fe ff       	call   c000068b <memset>
c0019fca:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019fd1:	31 c0                	xor    eax,eax
c0019fd3:	83 c4 10             	add    esp,0x10
c0019fd6:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019fd8:	84 c9                	test   cl,cl
c0019fda:	0f 84 bb 00 00 00    	je     c001a09b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fe0:	3d c7 00 00 00       	cmp    eax,0xc7
c0019fe5:	0f 8f b0 00 00 00    	jg     c001a09b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019feb:	80 f9 0a             	cmp    cl,0xa
c0019fee:	0f 85 98 00 00 00    	jne    c001a08c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019ff4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019ff9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019ffd:	a8 df                	test   al,0xdf
c0019fff:	0f 94 c1             	sete   cl
c001a002:	3c 23                	cmp    al,0x23
c001a004:	0f 94 c2             	sete   dl
c001a007:	08 d1                	or     cl,dl
c001a009:	75 4a                	jne    c001a055 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a00b:	8d 50 f7             	lea    edx,[eax-0x9]
c001a00e:	80 fa 01             	cmp    dl,0x1
c001a011:	76 42                	jbe    c001a055 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a013:	3c 5b                	cmp    al,0x5b
c001a015:	75 42                	jne    c001a059 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a017:	80 fb 40             	cmp    bl,0x40
c001a01a:	75 39                	jne    c001a055 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a023:	52                   	push   edx
c001a024:	e8 7f 66 fe ff       	call   c00006a8 <strlen>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	83 f8 3f             	cmp    eax,0x3f
c001a02f:	77 6a                	ja     c001a09b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a031:	50                   	push   eax
c001a032:	50                   	push   eax
c001a033:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a037:	52                   	push   edx
c001a038:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a03c:	52                   	push   edx
c001a03d:	e8 e8 66 fe ff       	call   c000072a <strcpy>
c001a042:	58                   	pop    eax
c001a043:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a047:	52                   	push   edx
c001a048:	e8 5b 66 fe ff       	call   c00006a8 <strlen>
c001a04d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a052:	83 c4 10             	add    esp,0x10
c001a055:	31 d2                	xor    edx,edx
c001a057:	eb 3a                	jmp    c001a093 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a059:	80 fb 40             	cmp    bl,0x40
c001a05c:	74 06                	je     c001a064 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a05e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a062:	eb 20                	jmp    c001a084 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a064:	50                   	push   eax
c001a065:	50                   	push   eax
c001a066:	55                   	push   ebp
c001a067:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a06b:	50                   	push   eax
c001a06c:	e8 0a 67 fe ff       	call   c000077b <strcmp>
c001a071:	83 c4 10             	add    esp,0x10
c001a074:	85 c0                	test   eax,eax
c001a076:	75 dd                	jne    c001a055 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a078:	eb e4                	jmp    c001a05e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a07a:	8d 50 01             	lea    edx,[eax+0x1]
c001a07d:	80 f9 3d             	cmp    cl,0x3d
c001a080:	74 1d                	je     c001a09f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a082:	89 d0                	mov    eax,edx
c001a084:	8a 08                	mov    cl,BYTE PTR [eax]
c001a086:	84 c9                	test   cl,cl
c001a088:	75 f0                	jne    c001a07a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a08a:	eb 0f                	jmp    c001a09b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a08c:	8d 50 01             	lea    edx,[eax+0x1]
c001a08f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a093:	47                   	inc    edi
c001a094:	89 d0                	mov    eax,edx
c001a096:	e9 3b ff ff ff       	jmp    c0019fd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a09b:	31 c0                	xor    eax,eax
c001a09d:	eb 33                	jmp    c001a0d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a09f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a0a6:	50                   	push   eax
c001a0a7:	50                   	push   eax
c001a0a8:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a0ac:	50                   	push   eax
c001a0ad:	56                   	push   esi
c001a0ae:	e8 c8 66 fe ff       	call   c000077b <strcmp>
c001a0b3:	83 c4 10             	add    esp,0x10
c001a0b6:	85 c0                	test   eax,eax
c001a0b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0bc:	75 97                	jne    c001a055 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0be:	51                   	push   ecx
c001a0bf:	51                   	push   ecx
c001a0c0:	52                   	push   edx
c001a0c1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a0c8:	e8 5d 66 fe ff       	call   c000072a <strcpy>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	b0 01                	mov    al,0x1
c001a0d2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0d8:	5b                   	pop    ebx
c001a0d9:	5e                   	pop    esi
c001a0da:	5f                   	pop    edi
c001a0db:	5d                   	pop    ebp
c001a0dc:	c3                   	ret    

c001a0dd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a0dd:	57                   	push   edi
c001a0de:	56                   	push   esi
c001a0df:	53                   	push   ebx
c001a0e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0e6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a0ed:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a0f4:	53                   	push   ebx
c001a0f5:	e8 ae 65 fe ff       	call   c00006a8 <strlen>
c001a0fa:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0fd:	89 c7                	mov    edi,eax
c001a0ff:	e8 a4 65 fe ff       	call   c00006a8 <strlen>
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a10b:	3d ff 00 00 00       	cmp    eax,0xff
c001a110:	0f 87 d3 00 00 00    	ja     c001a1e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a116:	57                   	push   edi
c001a117:	57                   	push   edi
c001a118:	56                   	push   esi
c001a119:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a11d:	56                   	push   esi
c001a11e:	e8 07 66 fe ff       	call   c000072a <strcpy>
c001a123:	58                   	pop    eax
c001a124:	5a                   	pop    edx
c001a125:	68 a6 a7 02 c0       	push   0xc002a7a6
c001a12a:	56                   	push   esi
c001a12b:	e8 b1 66 fe ff       	call   c00007e1 <strcat>
c001a130:	59                   	pop    ecx
c001a131:	5f                   	pop    edi
c001a132:	53                   	push   ebx
c001a133:	56                   	push   esi
c001a134:	e8 a8 66 fe ff       	call   c00007e1 <strcat>
c001a139:	58                   	pop    eax
c001a13a:	5a                   	pop    edx
c001a13b:	68 44 a4 02 c0       	push   0xc002a444
c001a140:	56                   	push   esi
c001a141:	e8 9b 66 fe ff       	call   c00007e1 <strcat>
c001a146:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a14d:	e8 82 53 ff ff       	call   c000f4d4 <malloc>
c001a152:	83 c4 0c             	add    esp,0xc
c001a155:	89 c3                	mov    ebx,eax
c001a157:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001a15d:	56                   	push   esi
c001a15e:	50                   	push   eax
c001a15f:	e8 54 8b ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001a164:	83 c4 10             	add    esp,0x10
c001a167:	85 db                	test   ebx,ebx
c001a169:	74 7e                	je     c001a1e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a16b:	51                   	push   ecx
c001a16c:	51                   	push   ecx
c001a16d:	6a 01                	push   0x1
c001a16f:	53                   	push   ebx
c001a170:	e8 a7 8b ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001a175:	83 c4 10             	add    esp,0x10
c001a178:	85 c0                	test   eax,eax
c001a17a:	74 08                	je     c001a184 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a17c:	83 ec 0c             	sub    esp,0xc
c001a17f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a181:	53                   	push   ebx
c001a182:	eb 5f                	jmp    c001a1e3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a184:	52                   	push   edx
c001a185:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a189:	50                   	push   eax
c001a18a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a18e:	50                   	push   eax
c001a18f:	53                   	push   ebx
c001a190:	e8 33 8e ff ff       	call   c0012fc8 <File::stat(unsigned long long*, bool*)>
c001a195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	89 c1                	mov    ecx,eax
c001a19e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a1a2:	74 31                	je     c001a1d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1a4:	83 ec 0c             	sub    esp,0xc
c001a1a7:	50                   	push   eax
c001a1a8:	e8 27 53 ff ff       	call   c000f4d4 <malloc>
c001a1ad:	89 c6                	mov    esi,eax
c001a1af:	58                   	pop    eax
c001a1b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1b2:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a1b6:	52                   	push   edx
c001a1b7:	56                   	push   esi
c001a1b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1c0:	53                   	push   ebx
c001a1c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1c4:	83 c4 20             	add    esp,0x20
c001a1c7:	85 c0                	test   eax,eax
c001a1c9:	75 0a                	jne    c001a1d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1cf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a1d3:	74 18                	je     c001a1ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a1d5:	83 ec 0c             	sub    esp,0xc
c001a1d8:	53                   	push   ebx
c001a1d9:	e8 9c 8b ff ff       	call   c0012d7a <File::close()>
c001a1de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	31 c0                	xor    eax,eax
c001a1eb:	eb 3b                	jmp    c001a228 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	53                   	push   ebx
c001a1f1:	e8 84 8b ff ff       	call   c0012d7a <File::close()>
c001a1f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1fe:	83 c4 0c             	add    esp,0xc
c001a201:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a208:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a20f:	56                   	push   esi
c001a210:	e8 70 fd ff ff       	call   c0019f85 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a215:	89 34 24             	mov    DWORD PTR [esp],esi
c001a218:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a21c:	e8 c3 52 ff ff       	call   c000f4e4 <free>
c001a221:	83 c4 10             	add    esp,0x10
c001a224:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a228:	81 c4 20 01 00 00    	add    esp,0x120
c001a22e:	5b                   	pop    ebx
c001a22f:	5e                   	pop    esi
c001a230:	5f                   	pop    edi
c001a231:	c3                   	ret    

c001a232 <Reg::getLine(char*, char*, char*)>:
c001a232:	57                   	push   edi
c001a233:	56                   	push   esi
c001a234:	53                   	push   ebx
c001a235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a239:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a23d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a241:	57                   	push   edi
c001a242:	56                   	push   esi
c001a243:	53                   	push   ebx
c001a244:	68 49 a4 02 c0       	push   0xc002a449
c001a249:	e8 8f fe ff ff       	call   c001a0dd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	84 c0                	test   al,al
c001a253:	75 10                	jne    c001a265 <Reg::getLine(char*, char*, char*)+0x33>
c001a255:	57                   	push   edi
c001a256:	56                   	push   esi
c001a257:	53                   	push   ebx
c001a258:	68 6e a4 02 c0       	push   0xc002a46e
c001a25d:	e8 7b fe ff ff       	call   c001a0dd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	5b                   	pop    ebx
c001a266:	5e                   	pop    esi
c001a267:	5f                   	pop    edi
c001a268:	c3                   	ret    

c001a269 <Reg::readInt(char*, char*, int*)>:
c001a269:	55                   	push   ebp
c001a26a:	57                   	push   edi
c001a26b:	56                   	push   esi
c001a26c:	53                   	push   ebx
c001a26d:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a273:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a277:	57                   	push   edi
c001a278:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a27f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a286:	e8 a7 ff ff ff       	call   c001a232 <Reg::getLine(char*, char*, char*)>
c001a28b:	83 c4 10             	add    esp,0x10
c001a28e:	84 c0                	test   al,al
c001a290:	0f 84 b3 00 00 00    	je     c001a349 <Reg::readInt(char*, char*, int*)+0xe0>
c001a296:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a29a:	80 fa 2b             	cmp    dl,0x2b
c001a29d:	74 0c                	je     c001a2ab <Reg::readInt(char*, char*, int*)+0x42>
c001a29f:	80 fa 2d             	cmp    dl,0x2d
c001a2a2:	75 0e                	jne    c001a2b2 <Reg::readInt(char*, char*, int*)+0x49>
c001a2a4:	ba 01 00 00 00       	mov    edx,0x1
c001a2a9:	eb 0b                	jmp    c001a2b6 <Reg::readInt(char*, char*, int*)+0x4d>
c001a2ab:	ba 01 00 00 00       	mov    edx,0x1
c001a2b0:	eb 02                	jmp    c001a2b4 <Reg::readInt(char*, char*, int*)+0x4b>
c001a2b2:	31 d2                	xor    edx,edx
c001a2b4:	31 c0                	xor    eax,eax
c001a2b6:	be 0a 00 00 00       	mov    esi,0xa
c001a2bb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2c0:	75 20                	jne    c001a2e2 <Reg::readInt(char*, char*, int*)+0x79>
c001a2c2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2c6:	80 f9 78             	cmp    cl,0x78
c001a2c9:	75 0a                	jne    c001a2d5 <Reg::readInt(char*, char*, int*)+0x6c>
c001a2cb:	83 c2 02             	add    edx,0x2
c001a2ce:	be 10 00 00 00       	mov    esi,0x10
c001a2d3:	eb 0d                	jmp    c001a2e2 <Reg::readInt(char*, char*, int*)+0x79>
c001a2d5:	80 f9 62             	cmp    cl,0x62
c001a2d8:	75 08                	jne    c001a2e2 <Reg::readInt(char*, char*, int*)+0x79>
c001a2da:	83 c2 02             	add    edx,0x2
c001a2dd:	be 02 00 00 00       	mov    esi,0x2
c001a2e2:	01 d7                	add    edi,edx
c001a2e4:	31 d2                	xor    edx,edx
c001a2e6:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a2e8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a2ec:	80 fb 0d             	cmp    bl,0xd
c001a2ef:	0f 94 c3             	sete   bl
c001a2f2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2f7:	0f 94 c1             	sete   cl
c001a2fa:	08 cb                	or     bl,cl
c001a2fc:	75 3a                	jne    c001a338 <Reg::readInt(char*, char*, int*)+0xcf>
c001a2fe:	0f af d6             	imul   edx,esi
c001a301:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a306:	83 fe 10             	cmp    esi,0x10
c001a309:	75 26                	jne    c001a331 <Reg::readInt(char*, char*, int*)+0xc8>
c001a30b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a30f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a312:	89 e9                	mov    ecx,ebp
c001a314:	80 f9 05             	cmp    cl,0x5
c001a317:	77 06                	ja     c001a31f <Reg::readInt(char*, char*, int*)+0xb6>
c001a319:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a31d:	eb 16                	jmp    c001a335 <Reg::readInt(char*, char*, int*)+0xcc>
c001a31f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a323:	83 e9 61             	sub    ecx,0x61
c001a326:	80 f9 05             	cmp    cl,0x5
c001a329:	77 06                	ja     c001a331 <Reg::readInt(char*, char*, int*)+0xc8>
c001a32b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a32f:	eb 04                	jmp    c001a335 <Reg::readInt(char*, char*, int*)+0xcc>
c001a331:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a335:	47                   	inc    edi
c001a336:	eb ae                	jmp    c001a2e6 <Reg::readInt(char*, char*, int*)+0x7d>
c001a338:	84 c0                	test   al,al
c001a33a:	74 02                	je     c001a33e <Reg::readInt(char*, char*, int*)+0xd5>
c001a33c:	f7 da                	neg    edx
c001a33e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a345:	89 10                	mov    DWORD PTR [eax],edx
c001a347:	88 d8                	mov    al,bl
c001a349:	81 c4 ec 00 00 00    	add    esp,0xec
c001a34f:	5b                   	pop    ebx
c001a350:	5e                   	pop    esi
c001a351:	5f                   	pop    edi
c001a352:	5d                   	pop    ebp
c001a353:	c3                   	ret    

c001a354 <Reg::readString(char*, char*, char*, int)>:
c001a354:	57                   	push   edi
c001a355:	56                   	push   esi
c001a356:	53                   	push   ebx
c001a357:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a35d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a364:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a368:	57                   	push   edi
c001a369:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a370:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a377:	e8 b6 fe ff ff       	call   c001a232 <Reg::getLine(char*, char*, char*)>
c001a37c:	83 c4 10             	add    esp,0x10
c001a37f:	89 c6                	mov    esi,eax
c001a381:	84 c0                	test   al,al
c001a383:	74 44                	je     c001a3c9 <Reg::readString(char*, char*, char*, int)+0x75>
c001a385:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a38c:	31 c0                	xor    eax,eax
c001a38e:	4a                   	dec    edx
c001a38f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a392:	84 c9                	test   cl,cl
c001a394:	74 0f                	je     c001a3a5 <Reg::readString(char*, char*, char*, int)+0x51>
c001a396:	39 c2                	cmp    edx,eax
c001a398:	7e 0b                	jle    c001a3a5 <Reg::readString(char*, char*, char*, int)+0x51>
c001a39a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a39d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a3a2:	40                   	inc    eax
c001a3a3:	eb ea                	jmp    c001a38f <Reg::readString(char*, char*, char*, int)+0x3b>
c001a3a5:	83 ec 0c             	sub    esp,0xc
c001a3a8:	53                   	push   ebx
c001a3a9:	e8 fa 62 fe ff       	call   c00006a8 <strlen>
c001a3ae:	83 c4 10             	add    esp,0x10
c001a3b1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a3b6:	75 11                	jne    c001a3c9 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3b8:	83 ec 0c             	sub    esp,0xc
c001a3bb:	53                   	push   ebx
c001a3bc:	e8 e7 62 fe ff       	call   c00006a8 <strlen>
c001a3c1:	83 c4 10             	add    esp,0x10
c001a3c4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3c9:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a3cf:	89 f0                	mov    eax,esi
c001a3d1:	5b                   	pop    ebx
c001a3d2:	5e                   	pop    esi
c001a3d3:	5f                   	pop    edi
c001a3d4:	c3                   	ret    

c001a3d5 <Reg::readBool(char*, char*, bool*)>:
c001a3d5:	83 ec 20             	sub    esp,0x20
c001a3d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3dc:	50                   	push   eax
c001a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e5:	e8 7f fe ff ff       	call   c001a269 <Reg::readInt(char*, char*, int*)>
c001a3ea:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3ef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3f3:	0f 95 02             	setne  BYTE PTR [edx]
c001a3f6:	83 c4 2c             	add    esp,0x2c
c001a3f9:	c3                   	ret    

c001a3fa <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a3fa:	53                   	push   ebx
c001a3fb:	83 ec 1c             	sub    esp,0x1c
c001a3fe:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a402:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a406:	50                   	push   eax
c001a407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a40f:	e8 c1 ff ff ff       	call   c001a3d5 <Reg::readBool(char*, char*, bool*)>
c001a414:	83 c4 10             	add    esp,0x10
c001a417:	84 c0                	test   al,al
c001a419:	74 04                	je     c001a41f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a41b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a41f:	88 d8                	mov    al,bl
c001a421:	83 c4 18             	add    esp,0x18
c001a424:	5b                   	pop    ebx
c001a425:	c3                   	ret    

c001a426 <Reg::readIntWithDefault(char*, char*, int)>:
c001a426:	53                   	push   ebx
c001a427:	83 ec 1c             	sub    esp,0x1c
c001a42a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a42e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a432:	50                   	push   eax
c001a433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a43b:	e8 29 fe ff ff       	call   c001a269 <Reg::readInt(char*, char*, int*)>
c001a440:	83 c4 10             	add    esp,0x10
c001a443:	84 c0                	test   al,al
c001a445:	74 04                	je     c001a44b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a447:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a44b:	89 d8                	mov    eax,ebx
c001a44d:	83 c4 18             	add    esp,0x18
c001a450:	5b                   	pop    ebx
c001a451:	c3                   	ret    

c001a452 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a452:	57                   	push   edi
c001a453:	56                   	push   esi
c001a454:	53                   	push   ebx
c001a455:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a459:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a45d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a461:	56                   	push   esi
c001a462:	53                   	push   ebx
c001a463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a46b:	e8 e4 fe ff ff       	call   c001a354 <Reg::readString(char*, char*, char*, int)>
c001a470:	83 c4 10             	add    esp,0x10
c001a473:	84 c0                	test   al,al
c001a475:	75 1b                	jne    c001a492 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a477:	50                   	push   eax
c001a478:	56                   	push   esi
c001a479:	4e                   	dec    esi
c001a47a:	6a 00                	push   0x0
c001a47c:	53                   	push   ebx
c001a47d:	e8 09 62 fe ff       	call   c000068b <memset>
c001a482:	83 c4 0c             	add    esp,0xc
c001a485:	56                   	push   esi
c001a486:	57                   	push   edi
c001a487:	53                   	push   ebx
c001a488:	89 fb                	mov    ebx,edi
c001a48a:	e8 c6 61 fe ff       	call   c0000655 <memcpy>
c001a48f:	83 c4 10             	add    esp,0x10
c001a492:	89 d8                	mov    eax,ebx
c001a494:	5b                   	pop    ebx
c001a495:	5e                   	pop    esi
c001a496:	5f                   	pop    edi
c001a497:	c3                   	ret    

c001a498 <Sys::exit(regs*)>:
c001a498:	83 ec 18             	sub    esp,0x18
c001a49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a49f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4a2:	e8 ce 32 00 00       	call   c001d775 <terminateTask(int)>
c001a4a7:	83 c8 ff             	or     eax,0xffffffff
c001a4aa:	83 c4 1c             	add    esp,0x1c
c001a4ad:	89 c2                	mov    edx,eax
c001a4af:	c3                   	ret    

c001a4b0 <Sys::getCwd(regs*)>:
c001a4b0:	83 ec 10             	sub    esp,0x10
c001a4b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4b7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4c5:	e8 5f 8b ff ff       	call   c0013029 <getcwd(Process*, char*, int)>
c001a4ca:	83 c4 1c             	add    esp,0x1c
c001a4cd:	99                   	cdq    
c001a4ce:	c3                   	ret    

c001a4cf <Sys::getPID(regs*)>:
c001a4cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4d9:	99                   	cdq    
c001a4da:	c3                   	ret    

c001a4db <Sys::loadDLL(regs*)>:
c001a4db:	56                   	push   esi
c001a4dc:	53                   	push   ebx
c001a4dd:	31 d2                	xor    edx,edx
c001a4df:	51                   	push   ecx
c001a4e0:	b8 01 00 00 00       	mov    eax,0x1
c001a4e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4e9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a4ed:	0f 84 8c 00 00 00    	je     c001a57f <Sys::loadDLL(regs*)+0xa4>
c001a4f3:	83 ec 0c             	sub    esp,0xc
c001a4f6:	68 14 01 00 00       	push   0x114
c001a4fb:	e8 d4 4f ff ff       	call   c000f4d4 <malloc>
c001a500:	83 c4 0c             	add    esp,0xc
c001a503:	89 c3                	mov    ebx,eax
c001a505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a50a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a50d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a510:	53                   	push   ebx
c001a511:	e8 a2 87 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001a516:	83 c4 10             	add    esp,0x10
c001a519:	31 d2                	xor    edx,edx
c001a51b:	b8 02 00 00 00       	mov    eax,0x2
c001a520:	85 db                	test   ebx,ebx
c001a522:	74 5b                	je     c001a57f <Sys::loadDLL(regs*)+0xa4>
c001a524:	83 ec 0c             	sub    esp,0xc
c001a527:	53                   	push   ebx
c001a528:	e8 5d 8a ff ff       	call   c0012f8a <File::exists()>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	84 c0                	test   al,al
c001a532:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a534:	75 11                	jne    c001a547 <Sys::loadDLL(regs*)+0x6c>
c001a536:	83 ec 0c             	sub    esp,0xc
c001a539:	53                   	push   ebx
c001a53a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a53d:	83 c4 10             	add    esp,0x10
c001a540:	b8 03 00 00 00       	mov    eax,0x3
c001a545:	eb 36                	jmp    c001a57d <Sys::loadDLL(regs*)+0xa2>
c001a547:	83 ec 0c             	sub    esp,0xc
c001a54a:	53                   	push   ebx
c001a54b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a54e:	58                   	pop    eax
c001a54f:	5a                   	pop    edx
c001a550:	6a 00                	push   0x0
c001a552:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a555:	e8 64 21 00 00       	call   c001c6be <Thr::loadDLL(char const*, bool)>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	89 c1                	mov    ecx,eax
c001a55f:	31 d2                	xor    edx,edx
c001a561:	b8 04 00 00 00       	mov    eax,0x4
c001a566:	85 c9                	test   ecx,ecx
c001a568:	74 15                	je     c001a57f <Sys::loadDLL(regs*)+0xa4>
c001a56a:	53                   	push   ebx
c001a56b:	53                   	push   ebx
c001a56c:	ff 35 68 c9 02 c0    	push   DWORD PTR ds:0xc002c968
c001a572:	51                   	push   ecx
c001a573:	e8 55 23 00 00       	call   c001c8cd <Thr::executeDLL(unsigned long, void*)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	31 c0                	xor    eax,eax
c001a57d:	31 d2                	xor    edx,edx
c001a57f:	59                   	pop    ecx
c001a580:	5b                   	pop    ebx
c001a581:	5e                   	pop    esi
c001a582:	c3                   	ret    

c001a583 <Sys::read(regs*)>:
c001a583:	57                   	push   edi
c001a584:	56                   	push   esi
c001a585:	53                   	push   ebx
c001a586:	83 ec 10             	sub    esp,0x10
c001a589:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a58d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a590:	83 f8 02             	cmp    eax,0x2
c001a593:	77 10                	ja     c001a5a5 <Sys::read(regs*)+0x22>
c001a595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a59a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a59d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a5a3:	eb 0e                	jmp    c001a5b3 <Sys::read(regs*)+0x30>
c001a5a5:	83 ec 0c             	sub    esp,0xc
c001a5a8:	50                   	push   eax
c001a5a9:	e8 95 70 ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001a5ae:	83 c4 10             	add    esp,0x10
c001a5b1:	89 c1                	mov    ecx,eax
c001a5b3:	83 c8 ff             	or     eax,0xffffffff
c001a5b6:	85 c9                	test   ecx,ecx
c001a5b8:	89 c2                	mov    edx,eax
c001a5ba:	74 28                	je     c001a5e4 <Sys::read(regs*)+0x61>
c001a5bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5c4:	31 ff                	xor    edi,edi
c001a5c6:	83 ec 0c             	sub    esp,0xc
c001a5c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5cf:	52                   	push   edx
c001a5d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5d3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5d6:	57                   	push   edi
c001a5d7:	56                   	push   esi
c001a5d8:	51                   	push   ecx
c001a5d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5e0:	83 c4 20             	add    esp,0x20
c001a5e3:	99                   	cdq    
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	5b                   	pop    ebx
c001a5e8:	5e                   	pop    esi
c001a5e9:	5f                   	pop    edi
c001a5ea:	c3                   	ret    

c001a5eb <Sys::sbrk(regs*)>:
c001a5eb:	56                   	push   esi
c001a5ec:	53                   	push   ebx
c001a5ed:	50                   	push   eax
c001a5ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5fa:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a5fd:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a603:	85 db                	test   ebx,ebx
c001a605:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a608:	74 02                	je     c001a60c <Sys::sbrk(regs*)+0x21>
c001a60a:	79 06                	jns    c001a612 <Sys::sbrk(regs*)+0x27>
c001a60c:	89 f0                	mov    eax,esi
c001a60e:	31 d2                	xor    edx,edx
c001a610:	eb 2a                	jmp    c001a63c <Sys::sbrk(regs*)+0x51>
c001a612:	83 c8 ff             	or     eax,0xffffffff
c001a615:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a61b:	89 c2                	mov    edx,eax
c001a61d:	77 1d                	ja     c001a63c <Sys::sbrk(regs*)+0x51>
c001a61f:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a625:	50                   	push   eax
c001a626:	c1 ea 0c             	shr    edx,0xc
c001a629:	68 07 04 00 00       	push   0x407
c001a62e:	52                   	push   edx
c001a62f:	51                   	push   ecx
c001a630:	e8 2f 79 ff ff       	call   c0011f64 <VAS::allocatePages(int, int)>
c001a635:	89 f0                	mov    eax,esi
c001a637:	31 d2                	xor    edx,edx
c001a639:	83 c4 10             	add    esp,0x10
c001a63c:	59                   	pop    ecx
c001a63d:	5b                   	pop    ebx
c001a63e:	5e                   	pop    esi
c001a63f:	c3                   	ret    

c001a640 <Sys::setCwd(regs*)>:
c001a640:	83 ec 14             	sub    esp,0x14
c001a643:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a647:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a64a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a64f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a652:	e8 fc 89 ff ff       	call   c0013053 <setcwd(Process*, char*)>
c001a657:	83 c4 1c             	add    esp,0x1c
c001a65a:	99                   	cdq    
c001a65b:	c3                   	ret    

c001a65c <Sys::write(regs*)>:
c001a65c:	57                   	push   edi
c001a65d:	56                   	push   esi
c001a65e:	53                   	push   ebx
c001a65f:	83 ec 10             	sub    esp,0x10
c001a662:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a666:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a669:	83 f8 02             	cmp    eax,0x2
c001a66c:	77 10                	ja     c001a67e <Sys::write(regs*)+0x22>
c001a66e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a673:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a676:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a67c:	eb 0e                	jmp    c001a68c <Sys::write(regs*)+0x30>
c001a67e:	83 ec 0c             	sub    esp,0xc
c001a681:	50                   	push   eax
c001a682:	e8 bc 6f ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001a687:	83 c4 10             	add    esp,0x10
c001a68a:	89 c1                	mov    ecx,eax
c001a68c:	83 c8 ff             	or     eax,0xffffffff
c001a68f:	85 c9                	test   ecx,ecx
c001a691:	89 c2                	mov    edx,eax
c001a693:	74 28                	je     c001a6bd <Sys::write(regs*)+0x61>
c001a695:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a69d:	31 ff                	xor    edi,edi
c001a69f:	83 ec 0c             	sub    esp,0xc
c001a6a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6a4:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a6a8:	52                   	push   edx
c001a6a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a6ac:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a6af:	57                   	push   edi
c001a6b0:	56                   	push   esi
c001a6b1:	51                   	push   ecx
c001a6b2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6b9:	83 c4 20             	add    esp,0x20
c001a6bc:	99                   	cdq    
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	5b                   	pop    ebx
c001a6c1:	5e                   	pop    esi
c001a6c2:	5f                   	pop    edi
c001a6c3:	c3                   	ret    

c001a6c4 <Sys::yield(regs*)>:
c001a6c4:	57                   	push   edi
c001a6c5:	56                   	push   esi
c001a6c6:	53                   	push   ebx
c001a6c7:	e8 66 26 00 00       	call   c001cd32 <lockScheduler()>
c001a6cc:	e8 9d 29 00 00       	call   c001d06e <schedule()>
c001a6d1:	e8 5e 26 00 00       	call   c001cd34 <unlockScheduler()>
c001a6d6:	8b 35 f0 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cff0
c001a6dc:	8b 3d f4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cff4
c001a6e2:	89 f0                	mov    eax,esi
c001a6e4:	89 fb                	mov    ebx,edi
c001a6e6:	89 f1                	mov    ecx,esi
c001a6e8:	c1 e0 07             	shl    eax,0x7
c001a6eb:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a6ef:	25 80 30 0f 00       	and    eax,0xf3080
c001a6f4:	c1 eb 17             	shr    ebx,0x17
c001a6f7:	31 c8                	xor    eax,ecx
c001a6f9:	89 da                	mov    edx,ebx
c001a6fb:	5b                   	pop    ebx
c001a6fc:	5e                   	pop    esi
c001a6fd:	5f                   	pop    edi
c001a6fe:	c3                   	ret    

c001a6ff <sysCallSeekDir(regs*)>:
c001a6ff:	31 c0                	xor    eax,eax
c001a701:	31 d2                	xor    edx,edx
c001a703:	c3                   	ret    

c001a704 <sysCallTellDir(regs*)>:
c001a704:	31 c0                	xor    eax,eax
c001a706:	31 d2                	xor    edx,edx
c001a708:	c3                   	ret    

c001a709 <sysCallVerify(regs*)>:
c001a709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a70d:	31 d2                	xor    edx,edx
c001a70f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a712:	c3                   	ret    

c001a713 <sysCallGetArgc(regs*)>:
c001a713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a71b:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a721:	99                   	cdq    
c001a722:	c3                   	ret    

c001a723 <sysFormatDisk(regs*)>:
c001a723:	56                   	push   esi
c001a724:	53                   	push   ebx
c001a725:	53                   	push   ebx
c001a726:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a72a:	8b 1d e8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cae8
c001a730:	eb 25                	jmp    c001a757 <sysFormatDisk(regs*)+0x34>
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a738:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a73a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a73d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a740:	50                   	push   eax
c001a741:	ff 34 85 80 cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd3080]
c001a748:	53                   	push   ebx
c001a749:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a74c:	83 c4 20             	add    esp,0x20
c001a74f:	83 f8 08             	cmp    eax,0x8
c001a752:	75 12                	jne    c001a766 <sysFormatDisk(regs*)+0x43>
c001a754:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a757:	85 db                	test   ebx,ebx
c001a759:	75 d7                	jne    c001a732 <sysFormatDisk(regs*)+0xf>
c001a75b:	59                   	pop    ecx
c001a75c:	b8 03 00 00 00       	mov    eax,0x3
c001a761:	31 d2                	xor    edx,edx
c001a763:	5b                   	pop    ebx
c001a764:	5e                   	pop    esi
c001a765:	c3                   	ret    
c001a766:	85 c0                	test   eax,eax
c001a768:	74 1b                	je     c001a785 <sysFormatDisk(regs*)+0x62>
c001a76a:	83 f8 09             	cmp    eax,0x9
c001a76d:	74 0b                	je     c001a77a <sysFormatDisk(regs*)+0x57>
c001a76f:	59                   	pop    ecx
c001a770:	b8 02 00 00 00       	mov    eax,0x2
c001a775:	31 d2                	xor    edx,edx
c001a777:	5b                   	pop    ebx
c001a778:	5e                   	pop    esi
c001a779:	c3                   	ret    
c001a77a:	59                   	pop    ecx
c001a77b:	b8 01 00 00 00       	mov    eax,0x1
c001a780:	31 d2                	xor    edx,edx
c001a782:	5b                   	pop    ebx
c001a783:	5e                   	pop    esi
c001a784:	c3                   	ret    
c001a785:	59                   	pop    ecx
c001a786:	31 c0                	xor    eax,eax
c001a788:	31 d2                	xor    edx,edx
c001a78a:	5b                   	pop    ebx
c001a78b:	5e                   	pop    esi
c001a78c:	c3                   	ret    

c001a78d <sysSetDiskVolumeLabel(regs*)>:
c001a78d:	56                   	push   esi
c001a78e:	53                   	push   ebx
c001a78f:	53                   	push   ebx
c001a790:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a794:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a797:	83 f8 19             	cmp    eax,0x19
c001a79a:	77 29                	ja     c001a7c5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a79c:	8b 0c 85 80 cf 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3080]
c001a7a3:	85 c9                	test   ecx,ecx
c001a7a5:	74 1e                	je     c001a7c5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7a7:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a7aa:	85 d2                	test   edx,edx
c001a7ac:	74 17                	je     c001a7c5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7ae:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a7b4:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a7b6:	52                   	push   edx
c001a7b7:	50                   	push   eax
c001a7b8:	51                   	push   ecx
c001a7b9:	53                   	push   ebx
c001a7ba:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	99                   	cdq    
c001a7c1:	59                   	pop    ecx
c001a7c2:	5b                   	pop    ebx
c001a7c3:	5e                   	pop    esi
c001a7c4:	c3                   	ret    
c001a7c5:	59                   	pop    ecx
c001a7c6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a7cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7d0:	5b                   	pop    ebx
c001a7d1:	5e                   	pop    esi
c001a7d2:	c3                   	ret    

c001a7d3 <sysGetDiskVolumeLabel(regs*)>:
c001a7d3:	57                   	push   edi
c001a7d4:	56                   	push   esi
c001a7d5:	53                   	push   ebx
c001a7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a7dd:	83 fa 19             	cmp    edx,0x19
c001a7e0:	77 34                	ja     c001a816 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7e2:	8b 0c 95 80 cf 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3080]
c001a7e9:	85 c9                	test   ecx,ecx
c001a7eb:	74 29                	je     c001a816 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7ed:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a7f0:	85 db                	test   ebx,ebx
c001a7f2:	74 22                	je     c001a816 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a7f7:	85 c0                	test   eax,eax
c001a7f9:	74 1b                	je     c001a816 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7fb:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a801:	83 ec 0c             	sub    esp,0xc
c001a804:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a806:	50                   	push   eax
c001a807:	53                   	push   ebx
c001a808:	52                   	push   edx
c001a809:	51                   	push   ecx
c001a80a:	56                   	push   esi
c001a80b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a80e:	83 c4 20             	add    esp,0x20
c001a811:	99                   	cdq    
c001a812:	5b                   	pop    ebx
c001a813:	5e                   	pop    esi
c001a814:	5f                   	pop    edi
c001a815:	c3                   	ret    
c001a816:	5b                   	pop    ebx
c001a817:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a81c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a821:	5e                   	pop    esi
c001a822:	5f                   	pop    edi
c001a823:	c3                   	ret    

c001a824 <sysShutdown(regs*)>:
c001a824:	83 ec 0c             	sub    esp,0xc
c001a827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a82e:	85 c0                	test   eax,eax
c001a830:	74 18                	je     c001a84a <sysShutdown(regs*)+0x26>
c001a832:	83 f8 01             	cmp    eax,0x1
c001a835:	74 38                	je     c001a86f <sysShutdown(regs*)+0x4b>
c001a837:	83 f8 02             	cmp    eax,0x2
c001a83a:	74 24                	je     c001a860 <sysShutdown(regs*)+0x3c>
c001a83c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a841:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a846:	83 c4 0c             	add    esp,0xc
c001a849:	c3                   	ret    
c001a84a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001a84f:	8b 10                	mov    edx,DWORD PTR [eax]
c001a851:	6a 00                	push   0x0
c001a853:	6a 00                	push   0x0
c001a855:	6a 00                	push   0x0
c001a857:	50                   	push   eax
c001a858:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a85b:	83 c4 10             	add    esp,0x10
c001a85e:	eb dc                	jmp    c001a83c <sysShutdown(regs*)+0x18>
c001a860:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001a865:	8b 10                	mov    edx,DWORD PTR [eax]
c001a867:	6a 00                	push   0x0
c001a869:	6a 00                	push   0x0
c001a86b:	6a 01                	push   0x1
c001a86d:	eb e8                	jmp    c001a857 <sysShutdown(regs*)+0x33>
c001a86f:	a1 00 d0 02 c0       	mov    eax,ds:0xc002d000
c001a874:	85 c0                	test   eax,eax
c001a876:	74 02                	je     c001a87a <sysShutdown(regs*)+0x56>
c001a878:	ff d0                	call   eax
c001a87a:	31 c0                	xor    eax,eax
c001a87c:	31 d2                	xor    edx,edx
c001a87e:	83 c4 0c             	add    esp,0xc
c001a881:	c3                   	ret    

c001a882 <sysCallRealpath(regs*)>:
c001a882:	83 ec 0c             	sub    esp,0xc
c001a885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a889:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a88c:	85 d2                	test   edx,edx
c001a88e:	74 07                	je     c001a897 <sysCallRealpath(regs*)+0x15>
c001a890:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a893:	85 c0                	test   eax,eax
c001a895:	75 0b                	jne    c001a8a2 <sysCallRealpath(regs*)+0x20>
c001a897:	b8 01 00 00 00       	mov    eax,0x1
c001a89c:	31 d2                	xor    edx,edx
c001a89e:	83 c4 0c             	add    esp,0xc
c001a8a1:	c3                   	ret    
c001a8a2:	51                   	push   ecx
c001a8a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a8a9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a8ac:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a8b2:	51                   	push   ecx
c001a8b3:	52                   	push   edx
c001a8b4:	50                   	push   eax
c001a8b5:	e8 54 82 ff ff       	call   c0012b0e <standardiseFiles(char*, char const*, char const*)>
c001a8ba:	83 c4 10             	add    esp,0x10
c001a8bd:	31 c0                	xor    eax,eax
c001a8bf:	31 d2                	xor    edx,edx
c001a8c1:	83 c4 0c             	add    esp,0xc
c001a8c4:	c3                   	ret    

c001a8c5 <sysCallReadDir(regs*)>:
c001a8c5:	53                   	push   ebx
c001a8c6:	83 ec 18             	sub    esp,0x18
c001a8c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8cd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a8d0:	83 f8 02             	cmp    eax,0x2
c001a8d3:	76 53                	jbe    c001a928 <sysCallReadDir(regs*)+0x63>
c001a8d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a8d8:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a8de:	77 4f                	ja     c001a92f <sysCallReadDir(regs*)+0x6a>
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	50                   	push   eax
c001a8e4:	e8 5a 6d ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001a8e9:	83 c4 10             	add    esp,0x10
c001a8ec:	85 c0                	test   eax,eax
c001a8ee:	74 50                	je     c001a940 <sysCallReadDir(regs*)+0x7b>
c001a8f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8fd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a901:	51                   	push   ecx
c001a902:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a905:	6a 00                	push   0x0
c001a907:	68 10 01 00 00       	push   0x110
c001a90c:	50                   	push   eax
c001a90d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a910:	83 c4 20             	add    esp,0x20
c001a913:	85 c0                	test   eax,eax
c001a915:	74 38                	je     c001a94f <sysCallReadDir(regs*)+0x8a>
c001a917:	83 f8 07             	cmp    eax,0x7
c001a91a:	74 0c                	je     c001a928 <sysCallReadDir(regs*)+0x63>
c001a91c:	b8 02 00 00 00       	mov    eax,0x2
c001a921:	31 d2                	xor    edx,edx
c001a923:	83 c4 18             	add    esp,0x18
c001a926:	5b                   	pop    ebx
c001a927:	c3                   	ret    
c001a928:	b8 01 00 00 00       	mov    eax,0x1
c001a92d:	eb f2                	jmp    c001a921 <sysCallReadDir(regs*)+0x5c>
c001a92f:	83 ec 08             	sub    esp,0x8
c001a932:	52                   	push   edx
c001a933:	68 8c a4 02 c0       	push   0xc002a48c
c001a938:	e8 4c 7e ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a945:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a94a:	83 c4 18             	add    esp,0x18
c001a94d:	5b                   	pop    ebx
c001a94e:	c3                   	ret    
c001a94f:	31 c0                	xor    eax,eax
c001a951:	eb ce                	jmp    c001a921 <sysCallReadDir(regs*)+0x5c>

c001a953 <sysCallIsATTY(regs*)>:
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a95d:	83 f8 02             	cmp    eax,0x2
c001a960:	76 07                	jbe    c001a969 <sysCallIsATTY(regs*)+0x16>
c001a962:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a967:	75 26                	jne    c001a98f <sysCallIsATTY(regs*)+0x3c>
c001a969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a96e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a971:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a977:	85 c0                	test   eax,eax
c001a979:	74 24                	je     c001a99f <sysCallIsATTY(regs*)+0x4c>
c001a97b:	83 ec 0c             	sub    esp,0xc
c001a97e:	8b 10                	mov    edx,DWORD PTR [eax]
c001a980:	50                   	push   eax
c001a981:	ff 12                	call   DWORD PTR [edx]
c001a983:	31 d2                	xor    edx,edx
c001a985:	0f b6 c0             	movzx  eax,al
c001a988:	83 c4 10             	add    esp,0x10
c001a98b:	83 c4 0c             	add    esp,0xc
c001a98e:	c3                   	ret    
c001a98f:	83 ec 0c             	sub    esp,0xc
c001a992:	50                   	push   eax
c001a993:	e8 ab 6c ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001a998:	83 c4 10             	add    esp,0x10
c001a99b:	85 c0                	test   eax,eax
c001a99d:	75 dc                	jne    c001a97b <sysCallIsATTY(regs*)+0x28>
c001a99f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9a9:	83 c4 0c             	add    esp,0xc
c001a9ac:	c3                   	ret    

c001a9ad <sysCallSeek(regs*)>:
c001a9ad:	53                   	push   ebx
c001a9ae:	83 ec 08             	sub    esp,0x8
c001a9b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9b8:	83 f8 02             	cmp    eax,0x2
c001a9bb:	76 4a                	jbe    c001aa07 <sysCallSeek(regs*)+0x5a>
c001a9bd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9c2:	77 32                	ja     c001a9f6 <sysCallSeek(regs*)+0x49>
c001a9c4:	83 ec 0c             	sub    esp,0xc
c001a9c7:	50                   	push   eax
c001a9c8:	e8 76 6c ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001a9cd:	83 c4 0c             	add    esp,0xc
c001a9d0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a9d3:	31 db                	xor    ebx,ebx
c001a9d5:	53                   	push   ebx
c001a9d6:	51                   	push   ecx
c001a9d7:	50                   	push   eax
c001a9d8:	e8 fd 83 ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	85 c0                	test   eax,eax
c001a9e2:	0f 95 c0             	setne  al
c001a9e5:	31 d2                	xor    edx,edx
c001a9e7:	0f b6 c0             	movzx  eax,al
c001a9ea:	f7 d8                	neg    eax
c001a9ec:	83 d2 00             	adc    edx,0x0
c001a9ef:	83 c4 08             	add    esp,0x8
c001a9f2:	f7 da                	neg    edx
c001a9f4:	5b                   	pop    ebx
c001a9f5:	c3                   	ret    
c001a9f6:	83 ec 08             	sub    esp,0x8
c001a9f9:	50                   	push   eax
c001a9fa:	68 fb a4 02 c0       	push   0xc002a4fb
c001a9ff:	e8 85 7d ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001aa04:	83 c4 10             	add    esp,0x10
c001aa07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa11:	83 c4 08             	add    esp,0x8
c001aa14:	5b                   	pop    ebx
c001aa15:	c3                   	ret    

c001aa16 <sysCallTell(regs*)>:
c001aa16:	53                   	push   ebx
c001aa17:	83 ec 08             	sub    esp,0x8
c001aa1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa21:	83 f8 02             	cmp    eax,0x2
c001aa24:	76 5e                	jbe    c001aa84 <sysCallTell(regs*)+0x6e>
c001aa26:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa2b:	77 2d                	ja     c001aa5a <sysCallTell(regs*)+0x44>
c001aa2d:	83 ec 0c             	sub    esp,0xc
c001aa30:	50                   	push   eax
c001aa31:	e8 0d 6c ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001aa36:	5a                   	pop    edx
c001aa37:	59                   	pop    ecx
c001aa38:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa3b:	50                   	push   eax
c001aa3c:	e8 ef 83 ff ff       	call   c0012e30 <File::tell(unsigned long long*)>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	85 c0                	test   eax,eax
c001aa46:	0f 95 c0             	setne  al
c001aa49:	31 d2                	xor    edx,edx
c001aa4b:	0f b6 c0             	movzx  eax,al
c001aa4e:	f7 d8                	neg    eax
c001aa50:	83 d2 00             	adc    edx,0x0
c001aa53:	83 c4 08             	add    esp,0x8
c001aa56:	f7 da                	neg    edx
c001aa58:	5b                   	pop    ebx
c001aa59:	c3                   	ret    
c001aa5a:	83 ec 08             	sub    esp,0x8
c001aa5d:	50                   	push   eax
c001aa5e:	68 15 a5 02 c0       	push   0xc002a515
c001aa63:	e8 21 7d ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001aa68:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa7b:	31 d2                	xor    edx,edx
c001aa7d:	31 c0                	xor    eax,eax
c001aa7f:	83 c4 08             	add    esp,0x8
c001aa82:	5b                   	pop    ebx
c001aa83:	c3                   	ret    
c001aa84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa89:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa8e:	83 c4 08             	add    esp,0x8
c001aa91:	5b                   	pop    ebx
c001aa92:	c3                   	ret    

c001aa93 <sysCallSize(regs*)>:
c001aa93:	53                   	push   ebx
c001aa94:	83 ec 18             	sub    esp,0x18
c001aa97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa9b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa9e:	83 f8 02             	cmp    eax,0x2
c001aaa1:	76 64                	jbe    c001ab07 <sysCallSize(regs*)+0x74>
c001aaa3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aaa8:	77 33                	ja     c001aadd <sysCallSize(regs*)+0x4a>
c001aaaa:	83 ec 0c             	sub    esp,0xc
c001aaad:	50                   	push   eax
c001aaae:	e8 90 6b ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001aab3:	83 c4 0c             	add    esp,0xc
c001aab6:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aaba:	52                   	push   edx
c001aabb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aabe:	50                   	push   eax
c001aabf:	e8 04 85 ff ff       	call   c0012fc8 <File::stat(unsigned long long*, bool*)>
c001aac4:	83 c4 10             	add    esp,0x10
c001aac7:	85 c0                	test   eax,eax
c001aac9:	0f 95 c0             	setne  al
c001aacc:	31 d2                	xor    edx,edx
c001aace:	0f b6 c0             	movzx  eax,al
c001aad1:	f7 d8                	neg    eax
c001aad3:	83 d2 00             	adc    edx,0x0
c001aad6:	83 c4 18             	add    esp,0x18
c001aad9:	f7 da                	neg    edx
c001aadb:	5b                   	pop    ebx
c001aadc:	c3                   	ret    
c001aadd:	83 ec 08             	sub    esp,0x8
c001aae0:	50                   	push   eax
c001aae1:	68 2f a5 02 c0       	push   0xc002a52f
c001aae6:	e8 9e 7c ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001aaeb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aaee:	83 c4 10             	add    esp,0x10
c001aaf1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aaf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aafe:	31 d2                	xor    edx,edx
c001ab00:	31 c0                	xor    eax,eax
c001ab02:	83 c4 18             	add    esp,0x18
c001ab05:	5b                   	pop    ebx
c001ab06:	c3                   	ret    
c001ab07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab11:	83 c4 18             	add    esp,0x18
c001ab14:	5b                   	pop    ebx
c001ab15:	c3                   	ret    

c001ab16 <sysCallSizeFromFilename(regs*)>:
c001ab16:	57                   	push   edi
c001ab17:	56                   	push   esi
c001ab18:	53                   	push   ebx
c001ab19:	83 ec 20             	sub    esp,0x20
c001ab1c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab20:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ab23:	83 fb 02             	cmp    ebx,0x2
c001ab26:	0f 86 99 00 00 00    	jbe    c001abc5 <sysCallSizeFromFilename(regs*)+0xaf>
c001ab2c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ab32:	77 65                	ja     c001ab99 <sysCallSizeFromFilename(regs*)+0x83>
c001ab34:	83 ec 0c             	sub    esp,0xc
c001ab37:	68 14 01 00 00       	push   0x114
c001ab3c:	e8 93 49 ff ff       	call   c000f4d4 <malloc>
c001ab41:	83 c4 0c             	add    esp,0xc
c001ab44:	89 c6                	mov    esi,eax
c001ab46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab4b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab4e:	53                   	push   ebx
c001ab4f:	56                   	push   esi
c001ab50:	e8 63 81 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001ab55:	83 c4 0c             	add    esp,0xc
c001ab58:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ab5c:	50                   	push   eax
c001ab5d:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ab60:	56                   	push   esi
c001ab61:	e8 62 84 ff ff       	call   c0012fc8 <File::stat(unsigned long long*, bool*)>
c001ab66:	83 c4 10             	add    esp,0x10
c001ab69:	85 f6                	test   esi,esi
c001ab6b:	74 14                	je     c001ab81 <sysCallSizeFromFilename(regs*)+0x6b>
c001ab6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab71:	8b 16                	mov    edx,DWORD PTR [esi]
c001ab73:	83 ec 0c             	sub    esp,0xc
c001ab76:	56                   	push   esi
c001ab77:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ab7a:	83 c4 10             	add    esp,0x10
c001ab7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab81:	85 c0                	test   eax,eax
c001ab83:	0f 95 c0             	setne  al
c001ab86:	31 d2                	xor    edx,edx
c001ab88:	0f b6 c0             	movzx  eax,al
c001ab8b:	f7 d8                	neg    eax
c001ab8d:	83 d2 00             	adc    edx,0x0
c001ab90:	83 c4 20             	add    esp,0x20
c001ab93:	f7 da                	neg    edx
c001ab95:	5b                   	pop    ebx
c001ab96:	5e                   	pop    esi
c001ab97:	5f                   	pop    edi
c001ab98:	c3                   	ret    
c001ab99:	83 ec 08             	sub    esp,0x8
c001ab9c:	53                   	push   ebx
c001ab9d:	68 2f a5 02 c0       	push   0xc002a52f
c001aba2:	e8 e2 7b ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001aba7:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001abb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001abba:	31 d2                	xor    edx,edx
c001abbc:	83 c4 20             	add    esp,0x20
c001abbf:	31 c0                	xor    eax,eax
c001abc1:	5b                   	pop    ebx
c001abc2:	5e                   	pop    esi
c001abc3:	5f                   	pop    edi
c001abc4:	c3                   	ret    
c001abc5:	83 c4 20             	add    esp,0x20
c001abc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abcd:	5b                   	pop    ebx
c001abce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abd3:	5e                   	pop    esi
c001abd4:	5f                   	pop    edi
c001abd5:	c3                   	ret    

c001abd6 <sysCallClose(regs*)>:
c001abd6:	53                   	push   ebx
c001abd7:	83 ec 08             	sub    esp,0x8
c001abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abde:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abe1:	83 f8 02             	cmp    eax,0x2
c001abe4:	76 50                	jbe    c001ac36 <sysCallClose(regs*)+0x60>
c001abe6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001abeb:	74 58                	je     c001ac45 <sysCallClose(regs*)+0x6f>
c001abed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abf2:	74 60                	je     c001ac54 <sysCallClose(regs*)+0x7e>
c001abf4:	77 2f                	ja     c001ac25 <sysCallClose(regs*)+0x4f>
c001abf6:	83 ec 0c             	sub    esp,0xc
c001abf9:	50                   	push   eax
c001abfa:	e8 44 6a ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001abff:	89 c3                	mov    ebx,eax
c001ac01:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac04:	e8 71 81 ff ff       	call   c0012d7a <File::close()>
c001ac09:	83 c4 10             	add    esp,0x10
c001ac0c:	85 db                	test   ebx,ebx
c001ac0e:	74 0c                	je     c001ac1c <sysCallClose(regs*)+0x46>
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac15:	53                   	push   ebx
c001ac16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	31 c0                	xor    eax,eax
c001ac1e:	31 d2                	xor    edx,edx
c001ac20:	83 c4 08             	add    esp,0x8
c001ac23:	5b                   	pop    ebx
c001ac24:	c3                   	ret    
c001ac25:	83 ec 08             	sub    esp,0x8
c001ac28:	50                   	push   eax
c001ac29:	68 b0 a4 02 c0       	push   0xc002a4b0
c001ac2e:	e8 56 7b ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001ac33:	83 c4 10             	add    esp,0x10
c001ac36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac40:	83 c4 08             	add    esp,0x8
c001ac43:	5b                   	pop    ebx
c001ac44:	c3                   	ret    
c001ac45:	83 ec 0c             	sub    esp,0xc
c001ac48:	68 4a a5 02 c0       	push   0xc002a54a
c001ac4d:	e8 37 7b ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001ac52:	eb c5                	jmp    c001ac19 <sysCallClose(regs*)+0x43>
c001ac54:	83 ec 0c             	sub    esp,0xc
c001ac57:	68 58 a5 02 c0       	push   0xc002a558
c001ac5c:	eb ef                	jmp    c001ac4d <sysCallClose(regs*)+0x77>

c001ac5e <sysCallOpenDir(regs*)>:
c001ac5e:	56                   	push   esi
c001ac5f:	53                   	push   ebx
c001ac60:	53                   	push   ebx
c001ac61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac65:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ac68:	85 f6                	test   esi,esi
c001ac6a:	74 59                	je     c001acc5 <sysCallOpenDir(regs*)+0x67>
c001ac6c:	83 ec 0c             	sub    esp,0xc
c001ac6f:	68 14 01 00 00       	push   0x114
c001ac74:	e8 5b 48 ff ff       	call   c000f4d4 <malloc>
c001ac79:	83 c4 0c             	add    esp,0xc
c001ac7c:	89 c6                	mov    esi,eax
c001ac7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac86:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac89:	56                   	push   esi
c001ac8a:	e8 ff 84 ff ff       	call   c001318e <Directory::Directory(char const*, Process*)>
c001ac8f:	83 c4 10             	add    esp,0x10
c001ac92:	85 f6                	test   esi,esi
c001ac94:	74 2f                	je     c001acc5 <sysCallOpenDir(regs*)+0x67>
c001ac96:	83 ec 0c             	sub    esp,0xc
c001ac99:	56                   	push   esi
c001ac9a:	e8 53 85 ff ff       	call   c00131f2 <Directory::open()>
c001ac9f:	83 c4 10             	add    esp,0x10
c001aca2:	85 c0                	test   eax,eax
c001aca4:	75 1f                	jne    c001acc5 <sysCallOpenDir(regs*)+0x67>
c001aca6:	83 ec 0c             	sub    esp,0xc
c001aca9:	56                   	push   esi
c001acaa:	e8 9f 66 ff ff       	call   c001134e <UnixFile::getFileDescriptor()>
c001acaf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001acb2:	83 c4 10             	add    esp,0x10
c001acb5:	89 02                	mov    DWORD PTR [edx],eax
c001acb7:	c1 f8 1f             	sar    eax,0x1f
c001acba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001acbd:	31 c0                	xor    eax,eax
c001acbf:	59                   	pop    ecx
c001acc0:	31 d2                	xor    edx,edx
c001acc2:	5b                   	pop    ebx
c001acc3:	5e                   	pop    esi
c001acc4:	c3                   	ret    
c001acc5:	59                   	pop    ecx
c001acc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001accb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acd0:	5b                   	pop    ebx
c001acd1:	5e                   	pop    esi
c001acd2:	c3                   	ret    

c001acd3 <sysCallCloseDir(regs*)>:
c001acd3:	53                   	push   ebx
c001acd4:	83 ec 08             	sub    esp,0x8
c001acd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acde:	83 f8 02             	cmp    eax,0x2
c001ace1:	76 47                	jbe    c001ad2a <sysCallCloseDir(regs*)+0x57>
c001ace3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ace8:	77 2f                	ja     c001ad19 <sysCallCloseDir(regs*)+0x46>
c001acea:	83 ec 0c             	sub    esp,0xc
c001aced:	50                   	push   eax
c001acee:	e8 50 69 ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001acf3:	89 c3                	mov    ebx,eax
c001acf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001acf8:	e8 51 85 ff ff       	call   c001324e <Directory::close()>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	85 db                	test   ebx,ebx
c001ad02:	74 0c                	je     c001ad10 <sysCallCloseDir(regs*)+0x3d>
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad09:	53                   	push   ebx
c001ad0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	31 c0                	xor    eax,eax
c001ad12:	31 d2                	xor    edx,edx
c001ad14:	83 c4 08             	add    esp,0x8
c001ad17:	5b                   	pop    ebx
c001ad18:	c3                   	ret    
c001ad19:	83 ec 08             	sub    esp,0x8
c001ad1c:	50                   	push   eax
c001ad1d:	68 d8 a4 02 c0       	push   0xc002a4d8
c001ad22:	e8 62 7a ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad34:	83 c4 08             	add    esp,0x8
c001ad37:	5b                   	pop    ebx
c001ad38:	c3                   	ret    

c001ad39 <sysCallMakeDir(regs*)>:
c001ad39:	56                   	push   esi
c001ad3a:	53                   	push   ebx
c001ad3b:	83 ec 10             	sub    esp,0x10
c001ad3e:	68 14 01 00 00       	push   0x114
c001ad43:	e8 8c 47 ff ff       	call   c000f4d4 <malloc>
c001ad48:	83 c4 0c             	add    esp,0xc
c001ad4b:	89 c3                	mov    ebx,eax
c001ad4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad52:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad59:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad5c:	53                   	push   ebx
c001ad5d:	e8 2c 84 ff ff       	call   c001318e <Directory::Directory(char const*, Process*)>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	85 db                	test   ebx,ebx
c001ad67:	74 32                	je     c001ad9b <sysCallMakeDir(regs*)+0x62>
c001ad69:	83 ec 0c             	sub    esp,0xc
c001ad6c:	53                   	push   ebx
c001ad6d:	e8 60 86 ff ff       	call   c00133d2 <Directory::create()>
c001ad72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad75:	89 c6                	mov    esi,eax
c001ad77:	e8 d2 84 ff ff       	call   c001324e <Directory::close()>
c001ad7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad84:	83 c4 10             	add    esp,0x10
c001ad87:	31 c0                	xor    eax,eax
c001ad89:	59                   	pop    ecx
c001ad8a:	85 f6                	test   esi,esi
c001ad8c:	5b                   	pop    ebx
c001ad8d:	0f 95 c0             	setne  al
c001ad90:	5e                   	pop    esi
c001ad91:	31 d2                	xor    edx,edx
c001ad93:	f7 d8                	neg    eax
c001ad95:	83 d2 00             	adc    edx,0x0
c001ad98:	f7 da                	neg    edx
c001ad9a:	c3                   	ret    
c001ad9b:	59                   	pop    ecx
c001ad9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ada1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ada6:	5b                   	pop    ebx
c001ada7:	5e                   	pop    esi
c001ada8:	c3                   	ret    

c001ada9 <sysCallWait(regs*)>:
c001ada9:	83 ec 10             	sub    esp,0x10
c001adac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adb0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001adb3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adb6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adb9:	e8 2b 24 00 00       	call   c001d1e9 <waitTask(int, int*, int)>
c001adbe:	83 c4 1c             	add    esp,0x1c
c001adc1:	99                   	cdq    
c001adc2:	c3                   	ret    

c001adc3 <sysCallNotImpl(regs*)>:
c001adc3:	83 ec 18             	sub    esp,0x18
c001adc6:	68 66 a5 02 c0       	push   0xc002a566
c001adcb:	e8 d3 ea ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001add0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001add5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adda:	83 c4 1c             	add    esp,0x1c
c001addd:	c3                   	ret    

c001adde <sysPanic(regs*)>:
c001adde:	83 ec 18             	sub    esp,0x18
c001ade1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ade5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ade8:	e8 b6 ea ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001aded:	c7 04 24 80 a5 02 c0 	mov    DWORD PTR [esp],0xc002a580
c001adf4:	e8 aa ea ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001adf9:	b8 01 00 00 00       	mov    eax,0x1
c001adfe:	31 d2                	xor    edx,edx
c001ae00:	83 c4 1c             	add    esp,0x1c
c001ae03:	c3                   	ret    

c001ae04 <sysCallRmdir(regs*)>:
c001ae04:	56                   	push   esi
c001ae05:	53                   	push   ebx
c001ae06:	83 ec 20             	sub    esp,0x20
c001ae09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae0d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae10:	68 14 01 00 00       	push   0x114
c001ae15:	e8 ba 46 ff ff       	call   c000f4d4 <malloc>
c001ae1a:	83 c4 0c             	add    esp,0xc
c001ae1d:	89 c3                	mov    ebx,eax
c001ae1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae24:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae27:	56                   	push   esi
c001ae28:	53                   	push   ebx
c001ae29:	e8 8a 7e ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001ae2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae31:	e8 5e 80 ff ff       	call   c0012e94 <File::unlink()>
c001ae36:	83 c4 10             	add    esp,0x10
c001ae39:	85 db                	test   ebx,ebx
c001ae3b:	74 14                	je     c001ae51 <sysCallRmdir(regs*)+0x4d>
c001ae3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae41:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae43:	83 ec 0c             	sub    esp,0xc
c001ae46:	53                   	push   ebx
c001ae47:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae4a:	83 c4 10             	add    esp,0x10
c001ae4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae51:	85 c0                	test   eax,eax
c001ae53:	0f 95 c0             	setne  al
c001ae56:	31 d2                	xor    edx,edx
c001ae58:	0f b6 c0             	movzx  eax,al
c001ae5b:	f7 d8                	neg    eax
c001ae5d:	83 d2 00             	adc    edx,0x0
c001ae60:	83 c4 14             	add    esp,0x14
c001ae63:	f7 da                	neg    edx
c001ae65:	5b                   	pop    ebx
c001ae66:	5e                   	pop    esi
c001ae67:	c3                   	ret    

c001ae68 <sysCallUnlink(regs*)>:
c001ae68:	56                   	push   esi
c001ae69:	53                   	push   ebx
c001ae6a:	83 ec 20             	sub    esp,0x20
c001ae6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae71:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae74:	68 14 01 00 00       	push   0x114
c001ae79:	e8 56 46 ff ff       	call   c000f4d4 <malloc>
c001ae7e:	83 c4 0c             	add    esp,0xc
c001ae81:	89 c3                	mov    ebx,eax
c001ae83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae88:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae8b:	56                   	push   esi
c001ae8c:	53                   	push   ebx
c001ae8d:	e8 26 7e ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001ae92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae95:	e8 fa 7f ff ff       	call   c0012e94 <File::unlink()>
c001ae9a:	83 c4 10             	add    esp,0x10
c001ae9d:	85 db                	test   ebx,ebx
c001ae9f:	74 14                	je     c001aeb5 <sysCallUnlink(regs*)+0x4d>
c001aea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aea5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aea7:	83 ec 0c             	sub    esp,0xc
c001aeaa:	53                   	push   ebx
c001aeab:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeb5:	85 c0                	test   eax,eax
c001aeb7:	0f 95 c0             	setne  al
c001aeba:	31 d2                	xor    edx,edx
c001aebc:	0f b6 c0             	movzx  eax,al
c001aebf:	f7 d8                	neg    eax
c001aec1:	83 d2 00             	adc    edx,0x0
c001aec4:	83 c4 14             	add    esp,0x14
c001aec7:	f7 da                	neg    edx
c001aec9:	5b                   	pop    ebx
c001aeca:	5e                   	pop    esi
c001aecb:	c3                   	ret    

c001aecc <sysCallGetArgv(regs*)>:
c001aecc:	83 ec 0c             	sub    esp,0xc
c001aecf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aed3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001aed6:	85 c0                	test   eax,eax
c001aed8:	78 2b                	js     c001af05 <sysCallGetArgv(regs*)+0x39>
c001aeda:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aee0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aee3:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001aee9:	7d 1a                	jge    c001af05 <sysCallGetArgv(regs*)+0x39>
c001aeeb:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001aef2:	85 c0                	test   eax,eax
c001aef4:	74 17                	je     c001af0d <sysCallGetArgv(regs*)+0x41>
c001aef6:	83 ec 08             	sub    esp,0x8
c001aef9:	50                   	push   eax
c001aefa:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001aefd:	e8 28 58 fe ff       	call   c000072a <strcpy>
c001af02:	83 c4 10             	add    esp,0x10
c001af05:	31 c0                	xor    eax,eax
c001af07:	31 d2                	xor    edx,edx
c001af09:	83 c4 0c             	add    esp,0xc
c001af0c:	c3                   	ret    
c001af0d:	b8 01 00 00 00       	mov    eax,0x1
c001af12:	31 d2                	xor    edx,edx
c001af14:	83 c4 0c             	add    esp,0xc
c001af17:	c3                   	ret    

c001af18 <sysCallTTYName(regs*)>:
c001af18:	56                   	push   esi
c001af19:	53                   	push   ebx
c001af1a:	53                   	push   ebx
c001af1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af1f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001af22:	85 c0                	test   eax,eax
c001af24:	74 5f                	je     c001af85 <sysCallTTYName(regs*)+0x6d>
c001af26:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af29:	83 f8 02             	cmp    eax,0x2
c001af2c:	77 3e                	ja     c001af6c <sysCallTTYName(regs*)+0x54>
c001af2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af36:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001af3c:	85 db                	test   ebx,ebx
c001af3e:	74 45                	je     c001af85 <sysCallTTYName(regs*)+0x6d>
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af45:	53                   	push   ebx
c001af46:	ff 10                	call   DWORD PTR [eax]
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	84 c0                	test   al,al
c001af4d:	74 41                	je     c001af90 <sysCallTTYName(regs*)+0x78>
c001af4f:	83 ec 08             	sub    esp,0x8
c001af52:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001af58:	53                   	push   ebx
c001af59:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af5c:	e8 c9 57 fe ff       	call   c000072a <strcpy>
c001af61:	83 c4 10             	add    esp,0x10
c001af64:	31 c0                	xor    eax,eax
c001af66:	59                   	pop    ecx
c001af67:	31 d2                	xor    edx,edx
c001af69:	5b                   	pop    ebx
c001af6a:	5e                   	pop    esi
c001af6b:	c3                   	ret    
c001af6c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af71:	74 bb                	je     c001af2e <sysCallTTYName(regs*)+0x16>
c001af73:	83 ec 0c             	sub    esp,0xc
c001af76:	50                   	push   eax
c001af77:	e8 c7 66 ff ff       	call   c0011643 <getFromFileDescriptor(int)>
c001af7c:	83 c4 10             	add    esp,0x10
c001af7f:	89 c3                	mov    ebx,eax
c001af81:	85 db                	test   ebx,ebx
c001af83:	75 bb                	jne    c001af40 <sysCallTTYName(regs*)+0x28>
c001af85:	59                   	pop    ecx
c001af86:	b8 01 00 00 00       	mov    eax,0x1
c001af8b:	31 d2                	xor    edx,edx
c001af8d:	5b                   	pop    ebx
c001af8e:	5e                   	pop    esi
c001af8f:	c3                   	ret    
c001af90:	59                   	pop    ecx
c001af91:	b8 02 00 00 00       	mov    eax,0x2
c001af96:	31 d2                	xor    edx,edx
c001af98:	5b                   	pop    ebx
c001af99:	5e                   	pop    esi
c001af9a:	c3                   	ret    

c001af9b <sysCallUSleep(regs*)>:
c001af9b:	83 ec 14             	sub    esp,0x14
c001af9e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001afa3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afa7:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001afae:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001afb1:	01 ca                	add    edx,ecx
c001afb3:	52                   	push   edx
c001afb4:	50                   	push   eax
c001afb5:	e8 c8 22 00 00       	call   c001d282 <nanoSleep(unsigned long long)>
c001afba:	31 c0                	xor    eax,eax
c001afbc:	31 d2                	xor    edx,edx
c001afbe:	83 c4 1c             	add    esp,0x1c
c001afc1:	c3                   	ret    

c001afc2 <sysCallSpawn(regs*)>:
c001afc2:	56                   	push   esi
c001afc3:	53                   	push   ebx
c001afc4:	53                   	push   ebx
c001afc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afc9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001afcc:	85 f6                	test   esi,esi
c001afce:	75 08                	jne    c001afd8 <sysCallSpawn(regs*)+0x16>
c001afd0:	59                   	pop    ecx
c001afd1:	31 c0                	xor    eax,eax
c001afd3:	31 d2                	xor    edx,edx
c001afd5:	5b                   	pop    ebx
c001afd6:	5e                   	pop    esi
c001afd7:	c3                   	ret    
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	68 3f 07 00 00       	push   0x73f
c001afe0:	e8 ef 44 ff ff       	call   c000f4d4 <malloc>
c001afe5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001afe8:	89 c6                	mov    esi,eax
c001afea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afef:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aff2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aff5:	56                   	push   esi
c001aff6:	e8 87 19 00 00       	call   c001c982 <Process::Process(char const*, Process*, char**)>
c001affb:	83 c4 20             	add    esp,0x20
c001affe:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b005:	75 c9                	jne    c001afd0 <sysCallSpawn(regs*)+0xe>
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	56                   	push   esi
c001b00b:	e8 38 1f 00 00       	call   c001cf48 <Process::createUserThread()>
c001b010:	8b 06                	mov    eax,DWORD PTR [esi]
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	99                   	cdq    
c001b016:	59                   	pop    ecx
c001b017:	5b                   	pop    ebx
c001b018:	5e                   	pop    esi
c001b019:	c3                   	ret    

c001b01a <sysCallGetEnv(regs*)>:
c001b01a:	57                   	push   edi
c001b01b:	56                   	push   esi
c001b01c:	53                   	push   ebx
c001b01d:	83 ec 1c             	sub    esp,0x1c
c001b020:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b029:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b02c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b02f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b032:	e8 88 e7 ff ff       	call   c00197bf <Krnl::getProcessTotalEnvCount(Process*)>
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	39 c7                	cmp    edi,eax
c001b03c:	7c 14                	jl     c001b052 <sysCallGetEnv(regs*)+0x38>
c001b03e:	85 f6                	test   esi,esi
c001b040:	75 0b                	jne    c001b04d <sysCallGetEnv(regs*)+0x33>
c001b042:	83 c4 10             	add    esp,0x10
c001b045:	31 c0                	xor    eax,eax
c001b047:	5b                   	pop    ebx
c001b048:	31 d2                	xor    edx,edx
c001b04a:	5e                   	pop    esi
c001b04b:	5f                   	pop    edi
c001b04c:	c3                   	ret    
c001b04d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b050:	eb f0                	jmp    c001b042 <sysCallGetEnv(regs*)+0x28>
c001b052:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b056:	52                   	push   edx
c001b057:	57                   	push   edi
c001b058:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b05e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b061:	50                   	push   eax
c001b062:	e8 78 e7 ff ff       	call   c00197df <Krnl::getProcessEnvPair(Process*, int)>
c001b067:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b06a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b06e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b072:	83 c4 0c             	add    esp,0xc
c001b075:	85 c9                	test   ecx,ecx
c001b077:	75 23                	jne    c001b09c <sysCallGetEnv(regs*)+0x82>
c001b079:	83 ec 0c             	sub    esp,0xc
c001b07c:	50                   	push   eax
c001b07d:	e8 26 56 fe ff       	call   c00006a8 <strlen>
c001b082:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b085:	89 c3                	mov    ebx,eax
c001b087:	e8 1c 56 fe ff       	call   c00006a8 <strlen>
c001b08c:	83 c4 10             	add    esp,0x10
c001b08f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b093:	83 c4 10             	add    esp,0x10
c001b096:	31 d2                	xor    edx,edx
c001b098:	5b                   	pop    ebx
c001b099:	5e                   	pop    esi
c001b09a:	5f                   	pop    edi
c001b09b:	c3                   	ret    
c001b09c:	83 ec 08             	sub    esp,0x8
c001b09f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b0a2:	50                   	push   eax
c001b0a3:	56                   	push   esi
c001b0a4:	e8 81 56 fe ff       	call   c000072a <strcpy>
c001b0a9:	58                   	pop    eax
c001b0aa:	5a                   	pop    edx
c001b0ab:	68 8f a5 02 c0       	push   0xc002a58f
c001b0b0:	56                   	push   esi
c001b0b1:	e8 2b 57 fe ff       	call   c00007e1 <strcat>
c001b0b6:	59                   	pop    ecx
c001b0b7:	5b                   	pop    ebx
c001b0b8:	57                   	push   edi
c001b0b9:	56                   	push   esi
c001b0ba:	e8 22 57 fe ff       	call   c00007e1 <strcat>
c001b0bf:	83 c4 10             	add    esp,0x10
c001b0c2:	e9 7b ff ff ff       	jmp    c001b042 <sysCallGetEnv(regs*)+0x28>

c001b0c7 <sysAppSettings(regs*)>:
c001b0c7:	53                   	push   ebx
c001b0c8:	83 ec 08             	sub    esp,0x8
c001b0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0cf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0d2:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b0d8:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b0dd:	66 3d c0 09          	cmp    ax,0x9c0
c001b0e1:	75 2f                	jne    c001b112 <sysAppSettings(regs*)+0x4b>
c001b0e3:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b0e9:	83 e0 1f             	and    eax,0x1f
c001b0ec:	3c 01                	cmp    al,0x1
c001b0ee:	74 2e                	je     c001b11e <sysAppSettings(regs*)+0x57>
c001b0f0:	3c 07                	cmp    al,0x7
c001b0f2:	0f 84 bd 00 00 00    	je     c001b1b5 <sysAppSettings(regs*)+0xee>
c001b0f8:	84 c0                	test   al,al
c001b0fa:	0f 84 dc 00 00 00    	je     c001b1dc <sysAppSettings(regs*)+0x115>
c001b100:	3c 08                	cmp    al,0x8
c001b102:	74 6d                	je     c001b171 <sysAppSettings(regs*)+0xaa>
c001b104:	0f b6 c0             	movzx  eax,al
c001b107:	83 c4 08             	add    esp,0x8
c001b10a:	05 e8 03 00 00       	add    eax,0x3e8
c001b10f:	5b                   	pop    ebx
c001b110:	99                   	cdq    
c001b111:	c3                   	ret    
c001b112:	b8 01 00 00 00       	mov    eax,0x1
c001b117:	31 d2                	xor    edx,edx
c001b119:	83 c4 08             	add    esp,0x8
c001b11c:	5b                   	pop    ebx
c001b11d:	c3                   	ret    
c001b11e:	51                   	push   ecx
c001b11f:	68 00 01 00 00       	push   0x100
c001b124:	6a 00                	push   0x0
c001b126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b12b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b12e:	83 c0 0c             	add    eax,0xc
c001b131:	50                   	push   eax
c001b132:	e8 54 55 fe ff       	call   c000068b <memset>
c001b137:	83 c4 0c             	add    esp,0xc
c001b13a:	68 ff 00 00 00       	push   0xff
c001b13f:	53                   	push   ebx
c001b140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b145:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b148:	83 c0 0c             	add    eax,0xc
c001b14b:	50                   	push   eax
c001b14c:	e8 04 55 fe ff       	call   c0000655 <memcpy>
c001b151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b156:	5b                   	pop    ebx
c001b157:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b15a:	5a                   	pop    edx
c001b15b:	8d 50 0c             	lea    edx,[eax+0xc]
c001b15e:	52                   	push   edx
c001b15f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b165:	e8 54 56 ff ff       	call   c00107be <VgaText::setTitle(char*)>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	31 c0                	xor    eax,eax
c001b16f:	eb a6                	jmp    c001b117 <sysAppSettings(regs*)+0x50>
c001b171:	83 ec 08             	sub    esp,0x8
c001b174:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b17a:	83 e0 0f             	and    eax,0xf
c001b17d:	50                   	push   eax
c001b17e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b183:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b18c:	e8 1d 56 ff ff       	call   c00107ae <VgaText::setTitleColour(VgaColour)>
c001b191:	58                   	pop    eax
c001b192:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b198:	5a                   	pop    edx
c001b199:	c1 e8 04             	shr    eax,0x4
c001b19c:	83 e0 0f             	and    eax,0xf
c001b19f:	50                   	push   eax
c001b1a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b1ae:	e8 eb 55 ff ff       	call   c001079e <VgaText::setTitleTextColour(VgaColour)>
c001b1b3:	eb b5                	jmp    c001b16a <sysAppSettings(regs*)+0xa3>
c001b1b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1bd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b1c3:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b1c9:	c0 e8 06             	shr    al,0x6
c001b1cc:	83 e0 01             	and    eax,0x1
c001b1cf:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b1d5:	31 c0                	xor    eax,eax
c001b1d7:	e9 3b ff ff ff       	jmp    c001b117 <sysAppSettings(regs*)+0x50>
c001b1dc:	b8 02 00 00 00       	mov    eax,0x2
c001b1e1:	e9 31 ff ff ff       	jmp    c001b117 <sysAppSettings(regs*)+0x50>

c001b1e6 <sysSetFatAttrib(regs*)>:
c001b1e6:	57                   	push   edi
c001b1e7:	56                   	push   esi
c001b1e8:	53                   	push   ebx
c001b1e9:	83 ec 1c             	sub    esp,0x1c
c001b1ec:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1f0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b1f3:	68 14 01 00 00       	push   0x114
c001b1f8:	e8 d7 42 ff ff       	call   c000f4d4 <malloc>
c001b1fd:	83 c4 0c             	add    esp,0xc
c001b200:	89 c3                	mov    ebx,eax
c001b202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b207:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b20a:	57                   	push   edi
c001b20b:	53                   	push   ebx
c001b20c:	e8 a7 7a ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001b211:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b214:	83 c4 0c             	add    esp,0xc
c001b217:	0f b6 d4             	movzx  edx,ah
c001b21a:	0f b6 c0             	movzx  eax,al
c001b21d:	52                   	push   edx
c001b21e:	50                   	push   eax
c001b21f:	53                   	push   ebx
c001b220:	e8 09 7d ff ff       	call   c0012f2e <File::chfatattr(unsigned char, unsigned char)>
c001b225:	83 c4 10             	add    esp,0x10
c001b228:	85 db                	test   ebx,ebx
c001b22a:	74 14                	je     c001b240 <sysSetFatAttrib(regs*)+0x5a>
c001b22c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b230:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b232:	83 ec 0c             	sub    esp,0xc
c001b235:	53                   	push   ebx
c001b236:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b240:	85 c0                	test   eax,eax
c001b242:	0f 95 c0             	setne  al
c001b245:	31 d2                	xor    edx,edx
c001b247:	0f b6 c0             	movzx  eax,al
c001b24a:	f7 d8                	neg    eax
c001b24c:	83 d2 00             	adc    edx,0x0
c001b24f:	83 c4 10             	add    esp,0x10
c001b252:	f7 da                	neg    edx
c001b254:	5b                   	pop    ebx
c001b255:	5e                   	pop    esi
c001b256:	5f                   	pop    edi
c001b257:	c3                   	ret    

c001b258 <sysPipe(regs*)>:
c001b258:	57                   	push   edi
c001b259:	56                   	push   esi
c001b25a:	53                   	push   ebx
c001b25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25f:	83 ec 0c             	sub    esp,0xc
c001b262:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b265:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b268:	6a 20                	push   0x20
c001b26a:	e8 65 42 ff ff       	call   c000f4d4 <malloc>
c001b26f:	89 c3                	mov    ebx,eax
c001b271:	58                   	pop    eax
c001b272:	5a                   	pop    edx
c001b273:	68 00 50 00 00       	push   0x5000
c001b278:	53                   	push   ebx
c001b279:	e8 c8 4d ff ff       	call   c0010046 <Pipe::Pipe(int)>
c001b27e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b281:	e8 c8 60 ff ff       	call   c001134e <UnixFile::getFileDescriptor()>
c001b286:	89 07                	mov    DWORD PTR [edi],eax
c001b288:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b28b:	e8 be 60 ff ff       	call   c001134e <UnixFile::getFileDescriptor()>
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	89 06                	mov    DWORD PTR [esi],eax
c001b295:	31 d2                	xor    edx,edx
c001b297:	5b                   	pop    ebx
c001b298:	31 c0                	xor    eax,eax
c001b29a:	5e                   	pop    esi
c001b29b:	5f                   	pop    edi
c001b29c:	c3                   	ret    

c001b29d <sysGetUnixTime(regs*)>:
c001b29d:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001b2a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2ac:	e9 e3 83 ff ff       	jmp    c0013694 <Clock::timeInSecondsLocal()>

c001b2b1 <string_ends_with(char const*, char const*)>:
c001b2b1:	57                   	push   edi
c001b2b2:	56                   	push   esi
c001b2b3:	53                   	push   ebx
c001b2b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2b8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2bc:	83 ec 0c             	sub    esp,0xc
c001b2bf:	53                   	push   ebx
c001b2c0:	e8 e3 53 fe ff       	call   c00006a8 <strlen>
c001b2c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2c8:	89 c6                	mov    esi,eax
c001b2ca:	e8 d9 53 fe ff       	call   c00006a8 <strlen>
c001b2cf:	83 c4 10             	add    esp,0x10
c001b2d2:	39 c6                	cmp    esi,eax
c001b2d4:	7d 06                	jge    c001b2dc <string_ends_with(char const*, char const*)+0x2b>
c001b2d6:	5b                   	pop    ebx
c001b2d7:	31 c0                	xor    eax,eax
c001b2d9:	5e                   	pop    esi
c001b2da:	5f                   	pop    edi
c001b2db:	c3                   	ret    
c001b2dc:	83 ec 08             	sub    esp,0x8
c001b2df:	29 c6                	sub    esi,eax
c001b2e1:	57                   	push   edi
c001b2e2:	01 f3                	add    ebx,esi
c001b2e4:	53                   	push   ebx
c001b2e5:	e8 91 54 fe ff       	call   c000077b <strcmp>
c001b2ea:	83 c4 10             	add    esp,0x10
c001b2ed:	85 c0                	test   eax,eax
c001b2ef:	5b                   	pop    ebx
c001b2f0:	0f 94 c0             	sete   al
c001b2f3:	5e                   	pop    esi
c001b2f4:	0f b6 c0             	movzx  eax,al
c001b2f7:	5f                   	pop    edi
c001b2f8:	c3                   	ret    

c001b2f9 <sysCallOpen(regs*)>:
c001b2f9:	56                   	push   esi
c001b2fa:	53                   	push   ebx
c001b2fb:	81 ec 04 01 00 00    	sub    esp,0x104
c001b301:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b308:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b30b:	85 c9                	test   ecx,ecx
c001b30d:	0f 84 b3 00 00 00    	je     c001b3c6 <sysCallOpen(regs*)+0xcd>
c001b313:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b316:	85 c0                	test   eax,eax
c001b318:	0f 84 a8 00 00 00    	je     c001b3c6 <sysCallOpen(regs*)+0xcd>
c001b31e:	52                   	push   edx
c001b31f:	68 91 a5 02 c0       	push   0xc002a591
c001b324:	50                   	push   eax
c001b325:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b329:	56                   	push   esi
c001b32a:	e8 df 77 ff ff       	call   c0012b0e <standardiseFiles(char*, char const*, char const*)>
c001b32f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b332:	e8 71 53 fe ff       	call   c00006a8 <strlen>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	48                   	dec    eax
c001b33b:	74 1d                	je     c001b35a <sysCallOpen(regs*)+0x61>
c001b33d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b340:	eb 0f                	jmp    c001b351 <sysCallOpen(regs*)+0x58>
c001b342:	80 fa 3a             	cmp    dl,0x3a
c001b345:	74 0f                	je     c001b356 <sysCallOpen(regs*)+0x5d>
c001b347:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b34b:	48                   	dec    eax
c001b34c:	74 0c                	je     c001b35a <sysCallOpen(regs*)+0x61>
c001b34e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b351:	80 fa 2e             	cmp    dl,0x2e
c001b354:	75 ec                	jne    c001b342 <sysCallOpen(regs*)+0x49>
c001b356:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b35a:	83 ec 08             	sub    esp,0x8
c001b35d:	68 95 a5 02 c0       	push   0xc002a595
c001b362:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b365:	e8 47 ff ff ff       	call   c001b2b1 <string_ends_with(char const*, char const*)>
c001b36a:	83 c4 10             	add    esp,0x10
c001b36d:	85 c0                	test   eax,eax
c001b36f:	75 17                	jne    c001b388 <sysCallOpen(regs*)+0x8f>
c001b371:	83 ec 08             	sub    esp,0x8
c001b374:	68 b6 a5 02 c0       	push   0xc002a5b6
c001b379:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b37c:	e8 30 ff ff ff       	call   c001b2b1 <string_ends_with(char const*, char const*)>
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	85 c0                	test   eax,eax
c001b386:	74 51                	je     c001b3d9 <sysCallOpen(regs*)+0xe0>
c001b388:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b38b:	83 ec 08             	sub    esp,0x8
c001b38e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b394:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b39b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b39e:	ff 30                	push   DWORD PTR [eax]
c001b3a0:	68 9a a5 02 c0       	push   0xc002a59a
c001b3a5:	e8 df 73 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001b3aa:	c7 04 24 a9 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5a9
c001b3b1:	e8 d3 73 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001b3b6:	83 c4 10             	add    esp,0x10
c001b3b9:	81 c4 04 01 00 00    	add    esp,0x104
c001b3bf:	31 c0                	xor    eax,eax
c001b3c1:	31 d2                	xor    edx,edx
c001b3c3:	5b                   	pop    ebx
c001b3c4:	5e                   	pop    esi
c001b3c5:	c3                   	ret    
c001b3c6:	81 c4 04 01 00 00    	add    esp,0x104
c001b3cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d6:	5b                   	pop    ebx
c001b3d7:	5e                   	pop    esi
c001b3d8:	c3                   	ret    
c001b3d9:	83 ec 08             	sub    esp,0x8
c001b3dc:	68 96 a5 02 c0       	push   0xc002a596
c001b3e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e4:	e8 92 53 fe ff       	call   c000077b <strcmp>
c001b3e9:	83 c4 10             	add    esp,0x10
c001b3ec:	85 c0                	test   eax,eax
c001b3ee:	74 98                	je     c001b388 <sysCallOpen(regs*)+0x8f>
c001b3f0:	83 ec 08             	sub    esp,0x8
c001b3f3:	68 95 a5 02 c0       	push   0xc002a595
c001b3f8:	56                   	push   esi
c001b3f9:	e8 b3 fe ff ff       	call   c001b2b1 <string_ends_with(char const*, char const*)>
c001b3fe:	83 c4 10             	add    esp,0x10
c001b401:	85 c0                	test   eax,eax
c001b403:	75 83                	jne    c001b388 <sysCallOpen(regs*)+0x8f>
c001b405:	83 ec 08             	sub    esp,0x8
c001b408:	68 bb a5 02 c0       	push   0xc002a5bb
c001b40d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b410:	e8 9c fe ff ff       	call   c001b2b1 <string_ends_with(char const*, char const*)>
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	85 c0                	test   eax,eax
c001b41a:	0f 85 d9 00 00 00    	jne    c001b4f9 <sysCallOpen(regs*)+0x200>
c001b420:	83 ec 08             	sub    esp,0x8
c001b423:	68 c0 a5 02 c0       	push   0xc002a5c0
c001b428:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b42b:	e8 81 fe ff ff       	call   c001b2b1 <string_ends_with(char const*, char const*)>
c001b430:	83 c4 10             	add    esp,0x10
c001b433:	85 c0                	test   eax,eax
c001b435:	0f 85 be 00 00 00    	jne    c001b4f9 <sysCallOpen(regs*)+0x200>
c001b43b:	83 ec 08             	sub    esp,0x8
c001b43e:	68 bc a5 02 c0       	push   0xc002a5bc
c001b443:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b446:	e8 30 53 fe ff       	call   c000077b <strcmp>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	85 c0                	test   eax,eax
c001b450:	0f 84 a3 00 00 00    	je     c001b4f9 <sysCallOpen(regs*)+0x200>
c001b456:	83 ec 08             	sub    esp,0x8
c001b459:	68 bb a5 02 c0       	push   0xc002a5bb
c001b45e:	56                   	push   esi
c001b45f:	e8 4d fe ff ff       	call   c001b2b1 <string_ends_with(char const*, char const*)>
c001b464:	83 c4 10             	add    esp,0x10
c001b467:	85 c0                	test   eax,eax
c001b469:	0f 85 8a 00 00 00    	jne    c001b4f9 <sysCallOpen(regs*)+0x200>
c001b46f:	83 ec 0c             	sub    esp,0xc
c001b472:	68 14 01 00 00       	push   0x114
c001b477:	e8 58 40 ff ff       	call   c000f4d4 <malloc>
c001b47c:	83 c4 0c             	add    esp,0xc
c001b47f:	89 c6                	mov    esi,eax
c001b481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b486:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b48c:	56                   	push   esi
c001b48d:	e8 26 78 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	85 f6                	test   esi,esi
c001b497:	0f 84 29 ff ff ff    	je     c001b3c6 <sysCallOpen(regs*)+0xcd>
c001b49d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b4a0:	0f b6 c2             	movzx  eax,dl
c001b4a3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b4a6:	89 d0                	mov    eax,edx
c001b4a8:	83 e0 01             	and    eax,0x1
c001b4ab:	f6 c2 02             	test   dl,0x2
c001b4ae:	74 03                	je     c001b4b3 <sysCallOpen(regs*)+0x1ba>
c001b4b0:	83 c8 02             	or     eax,0x2
c001b4b3:	f6 c2 04             	test   dl,0x4
c001b4b6:	74 03                	je     c001b4bb <sysCallOpen(regs*)+0x1c2>
c001b4b8:	83 c8 04             	or     eax,0x4
c001b4bb:	f6 c2 08             	test   dl,0x8
c001b4be:	74 03                	je     c001b4c3 <sysCallOpen(regs*)+0x1ca>
c001b4c0:	83 c8 0a             	or     eax,0xa
c001b4c3:	83 e2 10             	and    edx,0x10
c001b4c6:	74 03                	je     c001b4cb <sysCallOpen(regs*)+0x1d2>
c001b4c8:	83 c8 12             	or     eax,0x12
c001b4cb:	83 ec 08             	sub    esp,0x8
c001b4ce:	50                   	push   eax
c001b4cf:	56                   	push   esi
c001b4d0:	e8 47 78 ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	85 c0                	test   eax,eax
c001b4da:	0f 85 e6 fe ff ff    	jne    c001b3c6 <sysCallOpen(regs*)+0xcd>
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	56                   	push   esi
c001b4e4:	e8 65 5e ff ff       	call   c001134e <UnixFile::getFileDescriptor()>
c001b4e9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4ec:	89 02                	mov    DWORD PTR [edx],eax
c001b4ee:	c1 f8 1f             	sar    eax,0x1f
c001b4f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4f4:	e9 bd fe ff ff       	jmp    c001b3b6 <sysCallOpen(regs*)+0xbd>
c001b4f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4fc:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b502:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b509:	e9 ab fe ff ff       	jmp    c001b3b9 <sysCallOpen(regs*)+0xc0>

c001b50e <setupSystemCalls()>:
c001b50e:	c7 05 c0 d4 02 c0 c4 a6 01 c0 	mov    DWORD PTR ds:0xc002d4c0,0xc001a6c4
c001b518:	c7 05 c4 d4 02 c0 98 a4 01 c0 	mov    DWORD PTR ds:0xc002d4c4,0xc001a498
c001b522:	c7 05 c8 d4 02 c0 eb a5 01 c0 	mov    DWORD PTR ds:0xc002d4c8,0xc001a5eb
c001b52c:	c7 05 cc d4 02 c0 5c a6 01 c0 	mov    DWORD PTR ds:0xc002d4cc,0xc001a65c
c001b536:	c7 05 d0 d4 02 c0 83 a5 01 c0 	mov    DWORD PTR ds:0xc002d4d0,0xc001a583
c001b540:	c7 05 d4 d4 02 c0 cf a4 01 c0 	mov    DWORD PTR ds:0xc002d4d4,0xc001a4cf
c001b54a:	c7 05 d8 d4 02 c0 b0 a4 01 c0 	mov    DWORD PTR ds:0xc002d4d8,0xc001a4b0
c001b554:	c7 05 dc d4 02 c0 40 a6 01 c0 	mov    DWORD PTR ds:0xc002d4dc,0xc001a640
c001b55e:	c7 05 e4 d4 02 c0 d6 ab 01 c0 	mov    DWORD PTR ds:0xc002d4e4,0xc001abd6
c001b568:	c7 05 e0 d4 02 c0 f9 b2 01 c0 	mov    DWORD PTR ds:0xc002d4e0,0xc001b2f9
c001b572:	c7 05 e8 d4 02 c0 5e ac 01 c0 	mov    DWORD PTR ds:0xc002d4e8,0xc001ac5e
c001b57c:	c7 05 ec d4 02 c0 c5 a8 01 c0 	mov    DWORD PTR ds:0xc002d4ec,0xc001a8c5
c001b586:	c7 05 f0 d4 02 c0 ff a6 01 c0 	mov    DWORD PTR ds:0xc002d4f0,0xc001a6ff
c001b590:	c7 05 f4 d4 02 c0 04 a7 01 c0 	mov    DWORD PTR ds:0xc002d4f4,0xc001a704
c001b59a:	c7 05 f8 d4 02 c0 39 ad 01 c0 	mov    DWORD PTR ds:0xc002d4f8,0xc001ad39
c001b5a4:	c7 05 fc d4 02 c0 d3 ac 01 c0 	mov    DWORD PTR ds:0xc002d4fc,0xc001acd3
c001b5ae:	c7 05 00 d5 02 c0 ad a9 01 c0 	mov    DWORD PTR ds:0xc002d500,0xc001a9ad
c001b5b8:	c7 05 04 d5 02 c0 16 aa 01 c0 	mov    DWORD PTR ds:0xc002d504,0xc001aa16
c001b5c2:	c7 05 08 d5 02 c0 93 aa 01 c0 	mov    DWORD PTR ds:0xc002d508,0xc001aa93
c001b5cc:	c7 05 0c d5 02 c0 09 a7 01 c0 	mov    DWORD PTR ds:0xc002d50c,0xc001a709
c001b5d6:	c7 05 10 d5 02 c0 a9 ad 01 c0 	mov    DWORD PTR ds:0xc002d510,0xc001ada9
c001b5e0:	c7 05 14 d5 02 c0 c3 ad 01 c0 	mov    DWORD PTR ds:0xc002d514,0xc001adc3
c001b5ea:	c7 05 18 d5 02 c0 c3 ad 01 c0 	mov    DWORD PTR ds:0xc002d518,0xc001adc3
c001b5f4:	c7 05 1c d5 02 c0 04 ae 01 c0 	mov    DWORD PTR ds:0xc002d51c,0xc001ae04
c001b5fe:	c7 05 20 d5 02 c0 68 ae 01 c0 	mov    DWORD PTR ds:0xc002d520,0xc001ae68
c001b608:	c7 05 24 d5 02 c0 13 a7 01 c0 	mov    DWORD PTR ds:0xc002d524,0xc001a713
c001b612:	c7 05 28 d5 02 c0 cc ae 01 c0 	mov    DWORD PTR ds:0xc002d528,0xc001aecc
c001b61c:	c7 05 2c d5 02 c0 82 a8 01 c0 	mov    DWORD PTR ds:0xc002d52c,0xc001a882
c001b626:	c7 05 30 d5 02 c0 18 af 01 c0 	mov    DWORD PTR ds:0xc002d530,0xc001af18
c001b630:	c7 05 34 d5 02 c0 53 a9 01 c0 	mov    DWORD PTR ds:0xc002d534,0xc001a953
c001b63a:	c7 05 38 d5 02 c0 9b af 01 c0 	mov    DWORD PTR ds:0xc002d538,0xc001af9b
c001b644:	c7 05 3c d5 02 c0 16 ab 01 c0 	mov    DWORD PTR ds:0xc002d53c,0xc001ab16
c001b64e:	c7 05 40 d5 02 c0 c2 af 01 c0 	mov    DWORD PTR ds:0xc002d540,0xc001afc2
c001b658:	c7 05 44 d5 02 c0 1a b0 01 c0 	mov    DWORD PTR ds:0xc002d544,0xc001b01a
c001b662:	c7 05 48 d5 02 c0 c7 b0 01 c0 	mov    DWORD PTR ds:0xc002d548,0xc001b0c7
c001b66c:	c7 05 4c d5 02 c0 23 a7 01 c0 	mov    DWORD PTR ds:0xc002d54c,0xc001a723
c001b676:	c7 05 50 d5 02 c0 8d a7 01 c0 	mov    DWORD PTR ds:0xc002d550,0xc001a78d
c001b680:	c7 05 54 d5 02 c0 d3 a7 01 c0 	mov    DWORD PTR ds:0xc002d554,0xc001a7d3
c001b68a:	c7 05 58 d5 02 c0 e6 b1 01 c0 	mov    DWORD PTR ds:0xc002d558,0xc001b1e6
c001b694:	c7 05 5c d5 02 c0 de ad 01 c0 	mov    DWORD PTR ds:0xc002d55c,0xc001adde
c001b69e:	c7 05 60 d5 02 c0 24 a8 01 c0 	mov    DWORD PTR ds:0xc002d560,0xc001a824
c001b6a8:	c7 05 64 d5 02 c0 58 b2 01 c0 	mov    DWORD PTR ds:0xc002d564,0xc001b258
c001b6b2:	c7 05 68 d5 02 c0 9d b2 01 c0 	mov    DWORD PTR ds:0xc002d568,0xc001b29d
c001b6bc:	c7 05 6c d5 02 c0 db a4 01 c0 	mov    DWORD PTR ds:0xc002d56c,0xc001a4db
c001b6c6:	c3                   	ret    

c001b6c7 <systemCall(regs*, void*)>:
c001b6c7:	53                   	push   ebx
c001b6c8:	83 ec 08             	sub    esp,0x8
c001b6cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b6d2:	83 f8 7f             	cmp    eax,0x7f
c001b6d5:	77 16                	ja     c001b6ed <systemCall(regs*, void*)+0x26>
c001b6d7:	8b 14 85 c0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b40]
c001b6de:	85 d2                	test   edx,edx
c001b6e0:	74 0b                	je     c001b6ed <systemCall(regs*, void*)+0x26>
c001b6e2:	83 ec 0c             	sub    esp,0xc
c001b6e5:	53                   	push   ebx
c001b6e6:	ff d2                	call   edx
c001b6e8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b6eb:	eb 0d                	jmp    c001b6fa <systemCall(regs*, void*)+0x33>
c001b6ed:	52                   	push   edx
c001b6ee:	52                   	push   edx
c001b6ef:	50                   	push   eax
c001b6f0:	68 c5 a5 02 c0       	push   0xc002a5c5
c001b6f5:	e8 8f 70 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001b6fa:	83 c4 10             	add    esp,0x10
c001b6fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b702:	31 d2                	xor    edx,edx
c001b704:	83 c4 08             	add    esp,0x8
c001b707:	5b                   	pop    ebx
c001b708:	c3                   	ret    

c001b709 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b709:	55                   	push   ebp
c001b70a:	89 e5                	mov    ebp,esp
c001b70c:	57                   	push   edi
c001b70d:	56                   	push   esi
c001b70e:	53                   	push   ebx
c001b70f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b715:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b718:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b71b:	85 c0                	test   eax,eax
c001b71d:	0f 95 c1             	setne  cl
c001b720:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b724:	0f 94 c2             	sete   dl
c001b727:	84 d1                	test   cl,dl
c001b729:	74 26                	je     c001b751 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b72b:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b732:	74 1d                	je     c001b751 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b734:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b737:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b73d:	89 d6                	mov    esi,edx
c001b73f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b745:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b74b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b74e:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b751:	83 ec 0c             	sub    esp,0xc
c001b754:	05 ff 0f 00 00       	add    eax,0xfff
c001b759:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b75c:	6a 01                	push   0x1
c001b75e:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b764:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b76a:	e8 2a 60 ff ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	89 c6                	mov    esi,eax
c001b774:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b77a:	0f 86 21 01 00 00    	jbe    c001b8a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b780:	c1 eb 0c             	shr    ebx,0xc
c001b783:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b78d:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b793:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b796:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b799:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b79f:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b7a2:	29 d8                	sub    eax,ebx
c001b7a4:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b7aa:	0f 83 f4 00 00 00    	jae    c001b8a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b7b0:	83 ec 0c             	sub    esp,0xc
c001b7b3:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b7b9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b7bc:	3d 00 10 00 00       	cmp    eax,0x1000
c001b7c1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b7c3:	52                   	push   edx
c001b7c4:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b7ca:	52                   	push   edx
c001b7cb:	76 05                	jbe    c001b7d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b7cd:	b8 00 10 00 00       	mov    eax,0x1000
c001b7d2:	31 d2                	xor    edx,edx
c001b7d4:	52                   	push   edx
c001b7d5:	50                   	push   eax
c001b7d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b7d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7dc:	83 c4 20             	add    esp,0x20
c001b7df:	85 c0                	test   eax,eax
c001b7e1:	74 1f                	je     c001b802 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b7e3:	51                   	push   ecx
c001b7e4:	51                   	push   ecx
c001b7e5:	50                   	push   eax
c001b7e6:	68 d9 a5 02 c0       	push   0xc002a5d9
c001b7eb:	e8 99 6f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001b7f0:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7f3:	e8 05 63 ff ff       	call   c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c001b7f8:	83 c4 10             	add    esp,0x10
c001b7fb:	31 c0                	xor    eax,eax
c001b7fd:	e9 7c 01 00 00       	jmp    c001b97e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b802:	e8 2b 15 00 00       	call   c001cd32 <lockScheduler()>
c001b807:	e8 a4 42 ff ff       	call   c000fab0 <Phys::allocatePage()>
c001b80c:	6a 07                	push   0x7
c001b80e:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b814:	56                   	push   esi
c001b815:	50                   	push   eax
c001b816:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b81c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b81f:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b825:	e8 3a 66 ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b82a:	83 c4 0c             	add    esp,0xc
c001b82d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b833:	6a 00                	push   0x0
c001b835:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b83b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b83e:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b844:	e8 85 64 ff ff       	call   c0011cce <VAS::mapOtherVASIn(bool, VAS*)>
c001b849:	58                   	pop    eax
c001b84a:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b850:	5a                   	pop    edx
c001b851:	68 07 04 00 00       	push   0x407
c001b856:	53                   	push   ebx
c001b857:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b85d:	50                   	push   eax
c001b85e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b864:	6a 00                	push   0x0
c001b866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b86b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b86e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b874:	e8 a5 69 ff ff       	call   c001221e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b879:	83 c4 1c             	add    esp,0x1c
c001b87c:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b882:	68 00 10 00 00       	push   0x1000
c001b887:	50                   	push   eax
c001b888:	56                   	push   esi
c001b889:	e8 c7 4d fe ff       	call   c0000655 <memcpy>
c001b88e:	e8 a1 14 00 00       	call   c001cd34 <unlockScheduler()>
c001b893:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	e9 f5 fe ff ff       	jmp    c001b796 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b8a1:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b8a4:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b8ae:	0f 86 bc 00 00 00    	jbe    c001b970 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b8b4:	e8 79 14 00 00       	call   c001cd32 <lockScheduler()>
c001b8b9:	51                   	push   ecx
c001b8ba:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8c0:	6a 00                	push   0x0
c001b8c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b8d0:	e8 f9 63 ff ff       	call   c0011cce <VAS::mapOtherVASIn(bool, VAS*)>
c001b8d5:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	c1 e8 0c             	shr    eax,0xc
c001b8e1:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b8eb:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b8f1:	e8 ba 41 ff ff       	call   c000fab0 <Phys::allocatePage()>
c001b8f6:	6a 07                	push   0x7
c001b8f8:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b8fe:	56                   	push   esi
c001b8ff:	50                   	push   eax
c001b900:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b906:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b909:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b90f:	e8 50 65 ff ff       	call   c0011e64 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b914:	58                   	pop    eax
c001b915:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b91b:	5a                   	pop    edx
c001b91c:	68 07 04 00 00       	push   0x407
c001b921:	53                   	push   ebx
c001b922:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b928:	50                   	push   eax
c001b929:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b92f:	6a 00                	push   0x0
c001b931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b936:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b939:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b93f:	e8 da 68 ff ff       	call   c001221e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b944:	83 c4 1c             	add    esp,0x1c
c001b947:	68 00 10 00 00       	push   0x1000
c001b94c:	6a 00                	push   0x0
c001b94e:	56                   	push   esi
c001b94f:	e8 37 4d fe ff       	call   c000068b <memset>
c001b954:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b95a:	83 c4 10             	add    esp,0x10
c001b95d:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b963:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b969:	77 86                	ja     c001b8f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b96b:	e8 c4 13 00 00       	call   c001cd34 <unlockScheduler()>
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	56                   	push   esi
c001b974:	e8 84 61 ff ff       	call   c0011afd <Virt::freeKernelVirtualPages(unsigned long)>
c001b979:	83 c4 10             	add    esp,0x10
c001b97c:	b0 01                	mov    al,0x1
c001b97e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b981:	5b                   	pop    ebx
c001b982:	5e                   	pop    esi
c001b983:	5f                   	pop    edi
c001b984:	5d                   	pop    ebp
c001b985:	c3                   	ret    

c001b986 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b986:	55                   	push   ebp
c001b987:	57                   	push   edi
c001b988:	56                   	push   esi
c001b989:	53                   	push   ebx
c001b98a:	83 ec 48             	sub    esp,0x48
c001b98d:	68 14 01 00 00       	push   0x114
c001b992:	e8 3d 3b ff ff       	call   c000f4d4 <malloc>
c001b997:	83 c4 0c             	add    esp,0xc
c001b99a:	89 c6                	mov    esi,eax
c001b99c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b9a0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b9a4:	50                   	push   eax
c001b9a5:	e8 0e 73 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001b9aa:	58                   	pop    eax
c001b9ab:	5a                   	pop    edx
c001b9ac:	6a 01                	push   0x1
c001b9ae:	56                   	push   esi
c001b9af:	e8 68 73 ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001b9b4:	83 c4 10             	add    esp,0x10
c001b9b7:	85 c0                	test   eax,eax
c001b9b9:	0f 85 47 01 00 00    	jne    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9bf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b9c7:	83 ec 0c             	sub    esp,0xc
c001b9ca:	6a 34                	push   0x34
c001b9cc:	e8 03 3b ff ff       	call   c000f4d4 <malloc>
c001b9d1:	89 c3                	mov    ebx,eax
c001b9d3:	58                   	pop    eax
c001b9d4:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9d6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b9da:	57                   	push   edi
c001b9db:	53                   	push   ebx
c001b9dc:	6a 00                	push   0x0
c001b9de:	6a 34                	push   0x34
c001b9e0:	56                   	push   esi
c001b9e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9e4:	83 c4 20             	add    esp,0x20
c001b9e7:	85 c0                	test   eax,eax
c001b9e9:	0f 85 17 01 00 00    	jne    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9ef:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b9f5:	0f 85 0b 01 00 00    	jne    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9fe:	85 c0                	test   eax,eax
c001ba00:	0f 84 00 01 00 00    	je     c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba06:	31 d2                	xor    edx,edx
c001ba08:	55                   	push   ebp
c001ba09:	52                   	push   edx
c001ba0a:	50                   	push   eax
c001ba0b:	56                   	push   esi
c001ba0c:	e8 c9 73 ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	85 c0                	test   eax,eax
c001ba16:	0f 85 ea 00 00 00    	jne    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ba22:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba2a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba2e:	0f af c2             	imul   eax,edx
c001ba31:	50                   	push   eax
c001ba32:	e8 9d 3a ff ff       	call   c000f4d4 <malloc>
c001ba37:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba44:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba48:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba4c:	0f af c2             	imul   eax,edx
c001ba4f:	99                   	cdq    
c001ba50:	52                   	push   edx
c001ba51:	50                   	push   eax
c001ba52:	56                   	push   esi
c001ba53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba56:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ba59:	83 c4 20             	add    esp,0x20
c001ba5c:	85 c0                	test   eax,eax
c001ba5e:	0f 84 a2 00 00 00    	je     c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba64:	31 d2                	xor    edx,edx
c001ba66:	51                   	push   ecx
c001ba67:	52                   	push   edx
c001ba68:	50                   	push   eax
c001ba69:	56                   	push   esi
c001ba6a:	e8 6b 73 ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	85 c0                	test   eax,eax
c001ba74:	0f 85 8c 00 00 00    	jne    c001bb06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba81:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba85:	31 ed                	xor    ebp,ebp
c001ba87:	0f af c2             	imul   eax,edx
c001ba8a:	50                   	push   eax
c001ba8b:	e8 44 3a ff ff       	call   c000f4d4 <malloc>
c001ba90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba96:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba9d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001baa1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001baa5:	0f af c2             	imul   eax,edx
c001baa8:	99                   	cdq    
c001baa9:	52                   	push   edx
c001baaa:	50                   	push   eax
c001baab:	56                   	push   esi
c001baac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001baaf:	83 c4 20             	add    esp,0x20
c001bab2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001baba:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001babe:	0f 86 80 00 00 00    	jbe    c001bb44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bac4:	0f b7 fd             	movzx  edi,bp
c001bac7:	c1 e7 05             	shl    edi,0x5
c001baca:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bace:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bad1:	75 6b                	jne    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bad3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bad6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bada:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001badd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bae1:	52                   	push   edx
c001bae2:	31 d2                	xor    edx,edx
c001bae4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bae7:	52                   	push   edx
c001bae8:	50                   	push   eax
c001bae9:	56                   	push   esi
c001baea:	e8 eb 72 ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001baef:	83 c4 10             	add    esp,0x10
c001baf2:	85 c0                	test   eax,eax
c001baf4:	74 17                	je     c001bb0d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001baf6:	83 ec 0c             	sub    esp,0xc
c001baf9:	68 04 a6 02 c0       	push   0xc002a604
c001bafe:	e8 86 6c ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001bb03:	83 c4 10             	add    esp,0x10
c001bb06:	31 c0                	xor    eax,eax
c001bb08:	e9 87 00 00 00       	jmp    c001bb94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bb0d:	83 ec 0c             	sub    esp,0xc
c001bb10:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bb13:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bb16:	50                   	push   eax
c001bb17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb1f:	56                   	push   esi
c001bb20:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bb24:	e8 e0 fb ff ff       	call   c001b709 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bb29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb2d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bb31:	83 c4 20             	add    esp,0x20
c001bb34:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb38:	73 04                	jae    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb3e:	45                   	inc    ebp
c001bb3f:	e9 76 ff ff ff       	jmp    c001baba <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bb44:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bb48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb50:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bb56:	83 ec 0c             	sub    esp,0xc
c001bb59:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bb5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bb64:	05 00 10 00 00       	add    eax,0x1000
c001bb69:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb70:	e8 6f 39 ff ff       	call   c000f4e4 <free>
c001bb75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb78:	e8 67 39 ff ff       	call   c000f4e4 <free>
c001bb7d:	58                   	pop    eax
c001bb7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb82:	e8 5d 39 ff ff       	call   c000f4e4 <free>
c001bb87:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb8a:	e8 eb 71 ff ff       	call   c0012d7a <File::close()>
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	b0 01                	mov    al,0x1
c001bb94:	83 c4 3c             	add    esp,0x3c
c001bb97:	5b                   	pop    ebx
c001bb98:	5e                   	pop    esi
c001bb99:	5f                   	pop    edi
c001bb9a:	5d                   	pop    ebp
c001bb9b:	c3                   	ret    

c001bb9c <Thr::runtimeReferenceHelper()>:
c001bb9c:	83 ec 18             	sub    esp,0x18
c001bb9f:	68 0c a6 02 c0       	push   0xc002a60c
c001bba4:	e8 e0 6b ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001bba9:	fa                   	cli    
c001bbaa:	83 c4 10             	add    esp,0x10
c001bbad:	eb fe                	jmp    c001bbad <Thr::runtimeReferenceHelper()+0x11>

c001bbaf <Thr::getAddressOfKernelSymbol(char const*)>:
c001bbaf:	57                   	push   edi
c001bbb0:	56                   	push   esi
c001bbb1:	53                   	push   ebx
c001bbb2:	31 db                	xor    ebx,ebx
c001bbb4:	39 1d 60 de 02 c0    	cmp    DWORD PTR ds:0xc002de60,ebx
c001bbba:	7e 3c                	jle    c001bbf8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bbbc:	8b 34 9d e0 dd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2220]
c001bbc3:	31 ff                	xor    edi,edi
c001bbc5:	39 3c 9d e0 dc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2320],edi
c001bbcc:	7e 27                	jle    c001bbf5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bbce:	50                   	push   eax
c001bbcf:	50                   	push   eax
c001bbd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbd4:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbd6:	03 04 9d 60 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd22a0]
c001bbdd:	50                   	push   eax
c001bbde:	e8 98 4b fe ff       	call   c000077b <strcmp>
c001bbe3:	83 c4 10             	add    esp,0x10
c001bbe6:	85 c0                	test   eax,eax
c001bbe8:	75 05                	jne    c001bbef <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bbea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bbed:	eb 0b                	jmp    c001bbfa <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bbef:	83 c6 10             	add    esi,0x10
c001bbf2:	47                   	inc    edi
c001bbf3:	eb d0                	jmp    c001bbc5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bbf5:	43                   	inc    ebx
c001bbf6:	eb bc                	jmp    c001bbb4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bbf8:	31 c0                	xor    eax,eax
c001bbfa:	5b                   	pop    ebx
c001bbfb:	5e                   	pop    esi
c001bbfc:	5f                   	pop    edi
c001bbfd:	c3                   	ret    

c001bbfe <Thr::loadKernelSymbolTable(char const*)>:
c001bbfe:	55                   	push   ebp
c001bbff:	57                   	push   edi
c001bc00:	56                   	push   esi
c001bc01:	53                   	push   ebx
c001bc02:	83 ec 68             	sub    esp,0x68
c001bc05:	8b 35 b4 de 02 c0    	mov    esi,DWORD PTR ds:0xc002deb4
c001bc0b:	68 14 01 00 00       	push   0x114
c001bc10:	e8 bf 38 ff ff       	call   c000f4d4 <malloc>
c001bc15:	83 c4 0c             	add    esp,0xc
c001bc18:	89 c3                	mov    ebx,eax
c001bc1a:	56                   	push   esi
c001bc1b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bc1f:	50                   	push   eax
c001bc20:	e8 93 70 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001bc25:	5e                   	pop    esi
c001bc26:	5f                   	pop    edi
c001bc27:	6a 01                	push   0x1
c001bc29:	53                   	push   ebx
c001bc2a:	e8 ed 70 ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001bc2f:	83 c4 10             	add    esp,0x10
c001bc32:	31 d2                	xor    edx,edx
c001bc34:	85 c0                	test   eax,eax
c001bc36:	0f 85 74 02 00 00    	jne    c001beb0 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc3c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bc44:	83 ec 0c             	sub    esp,0xc
c001bc47:	6a 34                	push   0x34
c001bc49:	e8 86 38 ff ff       	call   c000f4d4 <malloc>
c001bc4e:	59                   	pop    ecx
c001bc4f:	89 c7                	mov    edi,eax
c001bc51:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bc55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc57:	56                   	push   esi
c001bc58:	57                   	push   edi
c001bc59:	6a 00                	push   0x0
c001bc5b:	6a 34                	push   0x34
c001bc5d:	53                   	push   ebx
c001bc5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc61:	83 c4 20             	add    esp,0x20
c001bc64:	85 c0                	test   eax,eax
c001bc66:	74 17                	je     c001bc7f <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bc68:	83 ec 0c             	sub    esp,0xc
c001bc6b:	68 2e a6 02 c0       	push   0xc002a62e
c001bc70:	e8 2e dc ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001bc75:	83 c4 10             	add    esp,0x10
c001bc78:	31 d2                	xor    edx,edx
c001bc7a:	e9 31 02 00 00       	jmp    c001beb0 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc7f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bc85:	75 e1                	jne    c001bc68 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc87:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bc8a:	85 c0                	test   eax,eax
c001bc8c:	74 da                	je     c001bc68 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc8e:	52                   	push   edx
c001bc8f:	31 d2                	xor    edx,edx
c001bc91:	52                   	push   edx
c001bc92:	50                   	push   eax
c001bc93:	53                   	push   ebx
c001bc94:	e8 41 71 ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	85 c0                	test   eax,eax
c001bc9e:	75 c8                	jne    c001bc68 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bca7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bcab:	31 ed                	xor    ebp,ebp
c001bcad:	0f af c2             	imul   eax,edx
c001bcb0:	50                   	push   eax
c001bcb1:	e8 1e 38 ff ff       	call   c000f4d4 <malloc>
c001bcb6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bcb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcbc:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bcc3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcc7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bccb:	0f af c2             	imul   eax,edx
c001bcce:	99                   	cdq    
c001bccf:	52                   	push   edx
c001bcd0:	50                   	push   eax
c001bcd1:	53                   	push   ebx
c001bcd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bcd5:	83 c4 20             	add    esp,0x20
c001bcd8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bce0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bce8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bcf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bcf8:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bcfc:	0f 86 aa 00 00 00    	jbe    c001bdac <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bd02:	0f b7 f5             	movzx  esi,bp
c001bd05:	6b f6 28             	imul   esi,esi,0x28
c001bd08:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bd0c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bd0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd13:	50                   	push   eax
c001bd14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bd18:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bd1c:	8b 16                	mov    edx,DWORD PTR [esi]
c001bd1e:	6b c0 28             	imul   eax,eax,0x28
c001bd21:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bd25:	89 d0                	mov    eax,edx
c001bd27:	31 d2                	xor    edx,edx
c001bd29:	52                   	push   edx
c001bd2a:	50                   	push   eax
c001bd2b:	53                   	push   ebx
c001bd2c:	e8 a9 70 ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001bd31:	83 c4 0c             	add    esp,0xc
c001bd34:	6a 20                	push   0x20
c001bd36:	6a 00                	push   0x0
c001bd38:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd3c:	52                   	push   edx
c001bd3d:	e8 49 49 fe ff       	call   c000068b <memset>
c001bd42:	58                   	pop    eax
c001bd43:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd45:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bd49:	51                   	push   ecx
c001bd4a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bd4e:	52                   	push   edx
c001bd4f:	6a 00                	push   0x0
c001bd51:	6a 1f                	push   0x1f
c001bd53:	53                   	push   ebx
c001bd54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd57:	83 c4 18             	add    esp,0x18
c001bd5a:	68 45 a6 02 c0       	push   0xc002a645
c001bd5f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd63:	52                   	push   edx
c001bd64:	e8 12 4a fe ff       	call   c000077b <strcmp>
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	85 c0                	test   eax,eax
c001bd6e:	75 0f                	jne    c001bd7f <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bd70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd7f:	50                   	push   eax
c001bd80:	50                   	push   eax
c001bd81:	68 4d a6 02 c0       	push   0xc002a64d
c001bd86:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bd8a:	50                   	push   eax
c001bd8b:	e8 eb 49 fe ff       	call   c000077b <strcmp>
c001bd90:	83 c4 10             	add    esp,0x10
c001bd93:	85 c0                	test   eax,eax
c001bd95:	75 0f                	jne    c001bda6 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bd97:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bda6:	45                   	inc    ebp
c001bda7:	e9 4c ff ff ff       	jmp    c001bcf8 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bdac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bdb1:	75 10                	jne    c001bdc3 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bdb3:	83 ec 0c             	sub    esp,0xc
c001bdb6:	68 55 a6 02 c0       	push   0xc002a655
c001bdbb:	e8 e3 da ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001bdc0:	83 c4 10             	add    esp,0x10
c001bdc3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bdc8:	75 10                	jne    c001bdda <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bdca:	83 ec 0c             	sub    esp,0xc
c001bdcd:	68 55 a6 02 c0       	push   0xc002a655
c001bdd2:	e8 cc da ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001bdd7:	83 c4 10             	add    esp,0x10
c001bdda:	31 d2                	xor    edx,edx
c001bddc:	50                   	push   eax
c001bddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde1:	52                   	push   edx
c001bde2:	50                   	push   eax
c001bde3:	53                   	push   ebx
c001bde4:	e8 f1 6f ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001bde9:	5a                   	pop    edx
c001bdea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bdee:	e8 e1 36 ff ff       	call   c000f4d4 <malloc>
c001bdf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bdf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdfb:	31 c9                	xor    ecx,ecx
c001bdfd:	5e                   	pop    esi
c001bdfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be00:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001be04:	55                   	push   ebp
c001be05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be09:	51                   	push   ecx
c001be0a:	52                   	push   edx
c001be0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001be0f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001be13:	53                   	push   ebx
c001be14:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be17:	83 c4 14             	add    esp,0x14
c001be1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be1e:	e8 b1 36 ff ff       	call   c000f4d4 <malloc>
c001be23:	89 c6                	mov    esi,eax
c001be25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be27:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be2a:	56                   	push   esi
c001be2b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be33:	51                   	push   ecx
c001be34:	52                   	push   edx
c001be35:	53                   	push   ebx
c001be36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be3d:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001be43:	83 c4 1c             	add    esp,0x1c
c001be46:	c1 e8 04             	shr    eax,0x4
c001be49:	89 04 95 e0 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2320],eax
c001be50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be54:	31 d2                	xor    edx,edx
c001be56:	52                   	push   edx
c001be57:	50                   	push   eax
c001be58:	53                   	push   ebx
c001be59:	e8 7c 6f ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001be5e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be60:	31 d2                	xor    edx,edx
c001be62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be65:	56                   	push   esi
c001be66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be6a:	52                   	push   edx
c001be6b:	50                   	push   eax
c001be6c:	53                   	push   ebx
c001be6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be70:	83 c4 14             	add    esp,0x14
c001be73:	53                   	push   ebx
c001be74:	e8 01 6f ff ff       	call   c0012d7a <File::close()>
c001be79:	5d                   	pop    ebp
c001be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be7e:	e8 61 36 ff ff       	call   c000f4e4 <free>
c001be83:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be86:	e8 59 36 ff ff       	call   c000f4e4 <free>
c001be8b:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001be90:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be94:	8d 50 01             	lea    edx,[eax+0x1]
c001be97:	89 0c 85 e0 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2220],ecx
c001be9e:	89 15 60 de 02 c0    	mov    DWORD PTR ds:0xc002de60,edx
c001bea4:	89 34 85 60 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd22a0],esi
c001beab:	83 c4 10             	add    esp,0x10
c001beae:	b2 01                	mov    dl,0x1
c001beb0:	83 c4 5c             	add    esp,0x5c
c001beb3:	88 d0                	mov    al,dl
c001beb5:	5b                   	pop    ebx
c001beb6:	5e                   	pop    esi
c001beb7:	5f                   	pop    edi
c001beb8:	5d                   	pop    ebp
c001beb9:	c3                   	ret    

c001beba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001beba:	55                   	push   ebp
c001bebb:	57                   	push   edi
c001bebc:	56                   	push   esi
c001bebd:	53                   	push   ebx
c001bebe:	81 ec 68 03 00 00    	sub    esp,0x368
c001bec4:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001becb:	8b 1d b4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002deb4
c001bed1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bed5:	68 14 01 00 00       	push   0x114
c001beda:	e8 f5 35 ff ff       	call   c000f4d4 <malloc>
c001bedf:	83 c4 0c             	add    esp,0xc
c001bee2:	89 c5                	mov    ebp,eax
c001bee4:	53                   	push   ebx
c001bee5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001beec:	50                   	push   eax
c001beed:	e8 c6 6d ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001bef2:	58                   	pop    eax
c001bef3:	5a                   	pop    edx
c001bef4:	6a 01                	push   0x1
c001bef6:	55                   	push   ebp
c001bef7:	e8 20 6e ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001befc:	83 c4 10             	add    esp,0x10
c001beff:	85 c0                	test   eax,eax
c001bf01:	0f 85 f2 06 00 00    	jne    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf07:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf0f:	83 ec 0c             	sub    esp,0xc
c001bf12:	6a 34                	push   0x34
c001bf14:	e8 bb 35 ff ff       	call   c000f4d4 <malloc>
c001bf19:	89 c7                	mov    edi,eax
c001bf1b:	58                   	pop    eax
c001bf1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bf23:	53                   	push   ebx
c001bf24:	57                   	push   edi
c001bf25:	6a 00                	push   0x0
c001bf27:	6a 34                	push   0x34
c001bf29:	55                   	push   ebp
c001bf2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf2d:	83 c4 20             	add    esp,0x20
c001bf30:	85 c0                	test   eax,eax
c001bf32:	0f 85 c1 06 00 00    	jne    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf38:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf3e:	0f 85 b5 06 00 00    	jne    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf44:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf47:	85 c0                	test   eax,eax
c001bf49:	0f 84 aa 06 00 00    	je     c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf4f:	31 d2                	xor    edx,edx
c001bf51:	56                   	push   esi
c001bf52:	52                   	push   edx
c001bf53:	50                   	push   eax
c001bf54:	55                   	push   ebp
c001bf55:	e8 80 6e ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001bf5a:	83 c4 10             	add    esp,0x10
c001bf5d:	85 c0                	test   eax,eax
c001bf5f:	0f 85 94 06 00 00    	jne    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf65:	83 ec 0c             	sub    esp,0xc
c001bf68:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bf6b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bf73:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf77:	0f af c2             	imul   eax,edx
c001bf7a:	50                   	push   eax
c001bf7b:	e8 54 35 ff ff       	call   c000f4d4 <malloc>
c001bf80:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf8e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf92:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf96:	0f af c2             	imul   eax,edx
c001bf99:	99                   	cdq    
c001bf9a:	52                   	push   edx
c001bf9b:	50                   	push   eax
c001bf9c:	55                   	push   ebp
c001bf9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfa0:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bfa3:	83 c4 20             	add    esp,0x20
c001bfa6:	85 c0                	test   eax,eax
c001bfa8:	0f 84 4b 06 00 00    	je     c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfae:	31 d2                	xor    edx,edx
c001bfb0:	51                   	push   ecx
c001bfb1:	52                   	push   edx
c001bfb2:	50                   	push   eax
c001bfb3:	55                   	push   ebp
c001bfb4:	e8 21 6e ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001bfb9:	83 c4 10             	add    esp,0x10
c001bfbc:	85 c0                	test   eax,eax
c001bfbe:	0f 85 35 06 00 00    	jne    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfc4:	83 ec 0c             	sub    esp,0xc
c001bfc7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfcb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfcf:	31 f6                	xor    esi,esi
c001bfd1:	0f af c2             	imul   eax,edx
c001bfd4:	50                   	push   eax
c001bfd5:	e8 fa 34 ff ff       	call   c000f4d4 <malloc>
c001bfda:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bfdd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfe8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfec:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bff0:	0f af c2             	imul   eax,edx
c001bff3:	99                   	cdq    
c001bff4:	52                   	push   edx
c001bff5:	50                   	push   eax
c001bff6:	55                   	push   ebp
c001bff7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bffa:	83 c4 20             	add    esp,0x20
c001bffd:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c001:	0f 86 8a 00 00 00    	jbe    c001c091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c007:	0f b7 de             	movzx  ebx,si
c001c00a:	c1 e3 05             	shl    ebx,0x5
c001c00d:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c011:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c014:	75 75                	jne    c001c08b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c016:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c019:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c01d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c020:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c024:	52                   	push   edx
c001c025:	31 d2                	xor    edx,edx
c001c027:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c02a:	52                   	push   edx
c001c02b:	50                   	push   eax
c001c02c:	55                   	push   ebp
c001c02d:	e8 a8 6d ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	85 c0                	test   eax,eax
c001c037:	0f 85 bc 05 00 00    	jne    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c03d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c044:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c047:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c04b:	31 d2                	xor    edx,edx
c001c04d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c051:	83 ec 0c             	sub    esp,0xc
c001c054:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c058:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c05f:	50                   	push   eax
c001c060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c064:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c068:	52                   	push   edx
c001c069:	50                   	push   eax
c001c06a:	55                   	push   ebp
c001c06b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c06e:	83 c4 1c             	add    esp,0x1c
c001c071:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c074:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c077:	50                   	push   eax
c001c078:	6a 00                	push   0x0
c001c07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c07e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c082:	50                   	push   eax
c001c083:	e8 03 46 fe ff       	call   c000068b <memset>
c001c088:	83 c4 10             	add    esp,0x10
c001c08b:	46                   	inc    esi
c001c08c:	e9 6c ff ff ff       	jmp    c001bffd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c091:	31 db                	xor    ebx,ebx
c001c093:	50                   	push   eax
c001c094:	68 00 01 00 00       	push   0x100
c001c099:	6a 00                	push   0x0
c001c09b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c09f:	50                   	push   eax
c001c0a0:	e8 e6 45 fe ff       	call   c000068b <memset>
c001c0a5:	83 c4 0c             	add    esp,0xc
c001c0a8:	68 00 01 00 00       	push   0x100
c001c0ad:	6a 00                	push   0x0
c001c0af:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c0b6:	50                   	push   eax
c001c0b7:	e8 cf 45 fe ff       	call   c000068b <memset>
c001c0bc:	83 c4 10             	add    esp,0x10
c001c0bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c0cf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c0d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c0e7:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c0eb:	0f 86 30 01 00 00    	jbe    c001c221 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c0f1:	0f b7 f3             	movzx  esi,bx
c001c0f4:	6b f6 28             	imul   esi,esi,0x28
c001c0f7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c0fb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c0fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c102:	50                   	push   eax
c001c103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c107:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c10b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c10d:	6b d2 28             	imul   edx,edx,0x28
c001c110:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c114:	31 d2                	xor    edx,edx
c001c116:	52                   	push   edx
c001c117:	50                   	push   eax
c001c118:	55                   	push   ebp
c001c119:	e8 bc 6c ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001c11e:	83 c4 0c             	add    esp,0xc
c001c121:	6a 20                	push   0x20
c001c123:	6a 00                	push   0x0
c001c125:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c12c:	51                   	push   ecx
c001c12d:	e8 59 45 fe ff       	call   c000068b <memset>
c001c132:	58                   	pop    eax
c001c133:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c136:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c13a:	52                   	push   edx
c001c13b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c142:	51                   	push   ecx
c001c143:	6a 00                	push   0x0
c001c145:	6a 1f                	push   0x1f
c001c147:	55                   	push   ebp
c001c148:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c14b:	83 c4 1c             	add    esp,0x1c
c001c14e:	6a 09                	push   0x9
c001c150:	68 6f a6 02 c0       	push   0xc002a66f
c001c155:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c15c:	51                   	push   ecx
c001c15d:	e8 90 44 fe ff       	call   c00005f2 <memcmp>
c001c162:	83 c4 10             	add    esp,0x10
c001c165:	85 c0                	test   eax,eax
c001c167:	75 21                	jne    c001c18a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c16d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c175:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c179:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c17c:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c183:	89 c8                	mov    eax,ecx
c001c185:	40                   	inc    eax
c001c186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c18a:	50                   	push   eax
c001c18b:	6a 09                	push   0x9
c001c18d:	68 79 a6 02 c0       	push   0xc002a679
c001c192:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c199:	50                   	push   eax
c001c19a:	e8 53 44 fe ff       	call   c00005f2 <memcmp>
c001c19f:	83 c4 10             	add    esp,0x10
c001c1a2:	85 c0                	test   eax,eax
c001c1a4:	75 21                	jne    c001c1c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c1ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1b2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c1b6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1b9:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c1c0:	89 c8                	mov    eax,ecx
c001c1c2:	40                   	inc    eax
c001c1c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1c7:	50                   	push   eax
c001c1c8:	50                   	push   eax
c001c1c9:	68 45 a6 02 c0       	push   0xc002a645
c001c1ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1d5:	50                   	push   eax
c001c1d6:	e8 a0 45 fe ff       	call   c000077b <strcmp>
c001c1db:	83 c4 10             	add    esp,0x10
c001c1de:	85 c0                	test   eax,eax
c001c1e0:	75 0f                	jne    c001c1f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c1e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1f1:	50                   	push   eax
c001c1f2:	50                   	push   eax
c001c1f3:	68 4d a6 02 c0       	push   0xc002a64d
c001c1f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1ff:	50                   	push   eax
c001c200:	e8 76 45 fe ff       	call   c000077b <strcmp>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	85 c0                	test   eax,eax
c001c20a:	75 0f                	jne    c001c21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c20c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c20f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c213:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c21b:	43                   	inc    ebx
c001c21c:	e9 c6 fe ff ff       	jmp    c001c0e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c221:	31 d2                	xor    edx,edx
c001c223:	50                   	push   eax
c001c224:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c228:	52                   	push   edx
c001c229:	50                   	push   eax
c001c22a:	55                   	push   ebp
c001c22b:	e8 aa 6b ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001c230:	5a                   	pop    edx
c001c231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c235:	e8 9a 32 ff ff       	call   c000f4d4 <malloc>
c001c23a:	31 d2                	xor    edx,edx
c001c23c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c240:	59                   	pop    ecx
c001c241:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c244:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c248:	53                   	push   ebx
c001c249:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c24d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c251:	52                   	push   edx
c001c252:	50                   	push   eax
c001c253:	55                   	push   ebp
c001c254:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c257:	83 c4 14             	add    esp,0x14
c001c25a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c25e:	e8 71 32 ff ff       	call   c000f4d4 <malloc>
c001c263:	31 d2                	xor    edx,edx
c001c265:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c269:	83 c4 0c             	add    esp,0xc
c001c26c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c270:	52                   	push   edx
c001c271:	50                   	push   eax
c001c272:	55                   	push   ebp
c001c273:	e8 62 6b ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001c278:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c27b:	31 d2                	xor    edx,edx
c001c27d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c280:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c284:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c288:	52                   	push   edx
c001c289:	50                   	push   eax
c001c28a:	55                   	push   ebp
c001c28b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c28e:	83 c4 20             	add    esp,0x20
c001c291:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c299:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c29d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c2a1:	0f 84 56 03 00 00    	je     c001c5fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c2a7:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c2ae:	31 d2                	xor    edx,edx
c001c2b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2b4:	c1 e8 03             	shr    eax,0x3
c001c2b7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c2bb:	50                   	push   eax
c001c2bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2c0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c2c4:	52                   	push   edx
c001c2c5:	50                   	push   eax
c001c2c6:	55                   	push   ebp
c001c2c7:	e8 0e 6b ff ff       	call   c0012dda <File::seek(unsigned long long)>
c001c2cc:	58                   	pop    eax
c001c2cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2d1:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c2d8:	e8 f7 31 ff ff       	call   c000f4d4 <malloc>
c001c2dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2e4:	31 d2                	xor    edx,edx
c001c2e6:	58                   	pop    eax
c001c2e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c2eb:	50                   	push   eax
c001c2ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2f4:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c2fb:	52                   	push   edx
c001c2fc:	50                   	push   eax
c001c2fd:	55                   	push   ebp
c001c2fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c301:	83 c4 20             	add    esp,0x20
c001c304:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c30c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c310:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c314:	0f 8d c7 02 00 00    	jge    c001c5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c31a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c31e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c322:	31 db                	xor    ebx,ebx
c001c324:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c327:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c32b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c32f:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c333:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c337:	c1 e8 08             	shr    eax,0x8
c001c33a:	89 c6                	mov    esi,eax
c001c33c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c340:	c1 e6 04             	shl    esi,0x4
c001c343:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c347:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c34a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c34e:	85 c0                	test   eax,eax
c001c350:	0f 85 17 01 00 00    	jne    c001c46d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c356:	83 ec 0c             	sub    esp,0xc
c001c359:	b3 01                	mov    bl,0x1
c001c35b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c35f:	03 06                	add    eax,DWORD PTR [esi]
c001c361:	50                   	push   eax
c001c362:	e8 48 f8 ff ff       	call   c001bbaf <Thr::getAddressOfKernelSymbol(char const*)>
c001c367:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c36b:	83 c4 10             	add    esp,0x10
c001c36e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c373:	0f 85 f4 00 00 00    	jne    c001c46d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c379:	50                   	push   eax
c001c37a:	50                   	push   eax
c001c37b:	68 83 a6 02 c0       	push   0xc002a683
c001c380:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c384:	03 06                	add    eax,DWORD PTR [esi]
c001c386:	50                   	push   eax
c001c387:	e8 ef 43 fe ff       	call   c000077b <strcmp>
c001c38c:	83 c4 10             	add    esp,0x10
c001c38f:	85 c0                	test   eax,eax
c001c391:	75 0a                	jne    c001c39d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c393:	b8 bc 53 02 c0       	mov    eax,0xc00253bc
c001c398:	e9 ca 00 00 00       	jmp    c001c467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c39d:	50                   	push   eax
c001c39e:	50                   	push   eax
c001c39f:	68 8d a6 02 c0       	push   0xc002a68d
c001c3a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3a8:	03 06                	add    eax,DWORD PTR [esi]
c001c3aa:	50                   	push   eax
c001c3ab:	e8 cb 43 fe ff       	call   c000077b <strcmp>
c001c3b0:	83 c4 10             	add    esp,0x10
c001c3b3:	85 c0                	test   eax,eax
c001c3b5:	75 0a                	jne    c001c3c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c3b7:	b8 f0 50 02 c0       	mov    eax,0xc00250f0
c001c3bc:	e9 a6 00 00 00       	jmp    c001c467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3c1:	53                   	push   ebx
c001c3c2:	53                   	push   ebx
c001c3c3:	68 96 a6 02 c0       	push   0xc002a696
c001c3c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3cc:	03 06                	add    eax,DWORD PTR [esi]
c001c3ce:	50                   	push   eax
c001c3cf:	e8 a7 43 fe ff       	call   c000077b <strcmp>
c001c3d4:	83 c4 10             	add    esp,0x10
c001c3d7:	85 c0                	test   eax,eax
c001c3d9:	75 0a                	jne    c001c3e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c3db:	b8 bc 54 02 c0       	mov    eax,0xc00254bc
c001c3e0:	e9 82 00 00 00       	jmp    c001c467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3e5:	51                   	push   ecx
c001c3e6:	51                   	push   ecx
c001c3e7:	68 a0 a6 02 c0       	push   0xc002a6a0
c001c3ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3f0:	03 06                	add    eax,DWORD PTR [esi]
c001c3f2:	50                   	push   eax
c001c3f3:	e8 83 43 fe ff       	call   c000077b <strcmp>
c001c3f8:	83 c4 10             	add    esp,0x10
c001c3fb:	85 c0                	test   eax,eax
c001c3fd:	74 63                	je     c001c462 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c3ff:	50                   	push   eax
c001c400:	50                   	push   eax
c001c401:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c405:	03 06                	add    eax,DWORD PTR [esi]
c001c407:	50                   	push   eax
c001c408:	68 a9 a6 02 c0       	push   0xc002a6a9
c001c40d:	e8 77 63 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001c412:	58                   	pop    eax
c001c413:	5a                   	pop    edx
c001c414:	68 c3 a6 02 c0       	push   0xc002a6c3
c001c419:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c420:	53                   	push   ebx
c001c421:	e8 04 43 fe ff       	call   c000072a <strcpy>
c001c426:	59                   	pop    ecx
c001c427:	58                   	pop    eax
c001c428:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c42c:	03 06                	add    eax,DWORD PTR [esi]
c001c42e:	50                   	push   eax
c001c42f:	53                   	push   ebx
c001c430:	e8 ac 43 fe ff       	call   c00007e1 <strcat>
c001c435:	58                   	pop    eax
c001c436:	5a                   	pop    edx
c001c437:	68 59 a7 02 c0       	push   0xc002a759
c001c43c:	53                   	push   ebx
c001c43d:	e8 9f 43 fe ff       	call   c00007e1 <strcat>
c001c442:	83 c4 10             	add    esp,0x10
c001c445:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c44a:	0f 84 4b 01 00 00    	je     c001c59b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	53                   	push   ebx
c001c454:	e8 4a d4 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c460:	eb 0b                	jmp    c001c46d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c462:	b8 3c 52 02 c0       	mov    eax,0xc002523c
c001c467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c46b:	b3 01                	mov    bl,0x1
c001c46d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c472:	0f 85 80 00 00 00    	jne    c001c4f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c478:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c47f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c483:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c487:	01 ce                	add    esi,ecx
c001c489:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c491:	8b 06                	mov    eax,DWORD PTR [esi]
c001c493:	0f 94 c2             	sete   dl
c001c496:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c49e:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c4a3:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c4a7:	84 db                	test   bl,bl
c001c4a9:	74 31                	je     c001c4dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c4ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c4af:	01 c3                	add    ebx,eax
c001c4b1:	84 d2                	test   dl,dl
c001c4b3:	75 0a                	jne    c001c4bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c4b5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4b9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4bd:	76 32                	jbe    c001c4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4bf:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4c4:	0f 84 d1 00 00 00    	je     c001c59b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	68 da a6 02 c0       	push   0xc002a6da
c001c4d2:	e8 cc d3 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	eb 15                	jmp    c001c4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4dc:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c4df:	84 d2                	test   dl,dl
c001c4e1:	75 0e                	jne    c001c4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4e3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4e7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4eb:	77 04                	ja     c001c4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4ed:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c4f1:	89 1e                	mov    DWORD PTR [esi],ebx
c001c4f3:	e9 e0 00 00 00       	jmp    c001c5d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c4f8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c4fd:	75 6e                	jne    c001c56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c4ff:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c506:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c50a:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c50e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c516:	74 17                	je     c001c52f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c518:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c520:	74 0d                	je     c001c52f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c522:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c526:	83 e8 04             	sub    eax,0x4
c001c529:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c52d:	76 17                	jbe    c001c546 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c52f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c534:	74 65                	je     c001c59b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c536:	83 ec 0c             	sub    esp,0xc
c001c539:	68 f6 a6 02 c0       	push   0xc002a6f6
c001c53e:	e8 60 d3 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c543:	83 c4 10             	add    esp,0x10
c001c546:	8b 16                	mov    edx,DWORD PTR [esi]
c001c548:	84 db                	test   bl,bl
c001c54a:	74 13                	je     c001c55f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c54c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c550:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c557:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c55b:	01 d0                	add    eax,edx
c001c55d:	eb 06                	jmp    c001c565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c55f:	89 d0                	mov    eax,edx
c001c561:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c565:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c569:	89 06                	mov    DWORD PTR [esi],eax
c001c56b:	eb 6b                	jmp    c001c5d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c56d:	50                   	push   eax
c001c56e:	50                   	push   eax
c001c56f:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c574:	50                   	push   eax
c001c575:	68 12 a7 02 c0       	push   0xc002a712
c001c57a:	e8 0a 62 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001c57f:	83 c4 10             	add    esp,0x10
c001c582:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c587:	74 12                	je     c001c59b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c589:	83 ec 0c             	sub    esp,0xc
c001c58c:	68 1d a7 02 c0       	push   0xc002a71d
c001c591:	e8 0d d3 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c596:	83 c4 10             	add    esp,0x10
c001c599:	eb 3d                	jmp    c001c5d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c59b:	83 ec 0c             	sub    esp,0xc
c001c59e:	55                   	push   ebp
c001c59f:	e8 d6 67 ff ff       	call   c0012d7a <File::close()>
c001c5a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5ad:	59                   	pop    ecx
c001c5ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5b2:	e8 2d 2f ff ff       	call   c000f4e4 <free>
c001c5b7:	5b                   	pop    ebx
c001c5b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5bc:	e8 23 2f ff ff       	call   c000f4e4 <free>
c001c5c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5c4:	e8 1b 2f ff ff       	call   c000f4e4 <free>
c001c5c9:	5e                   	pop    esi
c001c5ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c5ce:	e8 11 2f ff ff       	call   c000f4e4 <free>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	eb 21                	jmp    c001c5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c5d8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c5dc:	e9 2b fd ff ff       	jmp    c001c30c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c5e1:	83 ec 0c             	sub    esp,0xc
c001c5e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5e8:	e8 f7 2e ff ff       	call   c000f4e4 <free>
c001c5ed:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c5f1:	83 c4 10             	add    esp,0x10
c001c5f4:	e9 a0 fc ff ff       	jmp    c001c299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c5f9:	31 c0                	xor    eax,eax
c001c5fb:	eb 33                	jmp    c001c630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c5fd:	83 ec 0c             	sub    esp,0xc
c001c600:	55                   	push   ebp
c001c601:	e8 74 67 ff ff       	call   c0012d7a <File::close()>
c001c606:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c609:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c60c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c60f:	58                   	pop    eax
c001c610:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c614:	e8 cb 2e ff ff       	call   c000f4e4 <free>
c001c619:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c61c:	e8 c3 2e ff ff       	call   c000f4e4 <free>
c001c621:	5a                   	pop    edx
c001c622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c626:	e8 b9 2e ff ff       	call   c000f4e4 <free>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	b0 01                	mov    al,0x1
c001c630:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c636:	5b                   	pop    ebx
c001c637:	5e                   	pop    esi
c001c638:	5f                   	pop    edi
c001c639:	5d                   	pop    ebp
c001c63a:	c3                   	ret    

c001c63b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c63b:	56                   	push   esi
c001c63c:	31 d2                	xor    edx,edx
c001c63e:	53                   	push   ebx
c001c63f:	8b 1d c0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6c0
c001c645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c649:	39 d3                	cmp    ebx,edx
c001c64b:	7e 1b                	jle    c001c668 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c64d:	8b 04 95 e0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2720]
c001c654:	39 c8                	cmp    eax,ecx
c001c656:	77 0d                	ja     c001c665 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c658:	8b 34 95 e0 d6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2920]
c001c65f:	01 c6                	add    esi,eax
c001c661:	39 ce                	cmp    esi,ecx
c001c663:	77 05                	ja     c001c66a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c665:	42                   	inc    edx
c001c666:	eb e1                	jmp    c001c649 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c668:	31 c0                	xor    eax,eax
c001c66a:	5b                   	pop    ebx
c001c66b:	5e                   	pop    esi
c001c66c:	c3                   	ret    

c001c66d <Thr::getDriverNameFromAddress(unsigned long)>:
c001c66d:	53                   	push   ebx
c001c66e:	31 c0                	xor    eax,eax
c001c670:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c674:	8b 1d c0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6c0
c001c67a:	39 c3                	cmp    ebx,eax
c001c67c:	7e 22                	jle    c001c6a0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c67e:	8b 14 85 e0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2720]
c001c685:	39 ca                	cmp    edx,ecx
c001c687:	77 14                	ja     c001c69d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c689:	03 14 85 e0 d6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2920]
c001c690:	39 ca                	cmp    edx,ecx
c001c692:	76 09                	jbe    c001c69d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c694:	8b 04 85 e0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2520]
c001c69b:	eb 05                	jmp    c001c6a2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c69d:	40                   	inc    eax
c001c69e:	eb da                	jmp    c001c67a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c6a0:	31 c0                	xor    eax,eax
c001c6a2:	5b                   	pop    ebx
c001c6a3:	c3                   	ret    

c001c6a4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c6a4:	53                   	push   ebx
c001c6a5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c6a9:	53                   	push   ebx
c001c6aa:	e8 8c ff ff ff       	call   c001c63b <Thr::getDriverBaseFromAddress(unsigned long)>
c001c6af:	5a                   	pop    edx
c001c6b0:	31 d2                	xor    edx,edx
c001c6b2:	85 c0                	test   eax,eax
c001c6b4:	74 04                	je     c001c6ba <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c6b6:	89 da                	mov    edx,ebx
c001c6b8:	29 c2                	sub    edx,eax
c001c6ba:	89 d0                	mov    eax,edx
c001c6bc:	5b                   	pop    ebx
c001c6bd:	c3                   	ret    

c001c6be <Thr::loadDLL(char const*, bool)>:
c001c6be:	55                   	push   ebp
c001c6bf:	57                   	push   edi
c001c6c0:	56                   	push   esi
c001c6c1:	53                   	push   ebx
c001c6c2:	81 ec 34 01 00 00    	sub    esp,0x134
c001c6c8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c6cf:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c6d6:	56                   	push   esi
c001c6d7:	68 35 a7 02 c0       	push   0xc002a735
c001c6dc:	e8 a8 60 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001c6e1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6e8:	e8 e7 2d ff ff       	call   c000f4d4 <malloc>
c001c6ed:	83 c4 0c             	add    esp,0xc
c001c6f0:	89 c3                	mov    ebx,eax
c001c6f2:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001c6f8:	56                   	push   esi
c001c6f9:	50                   	push   eax
c001c6fa:	e8 b9 65 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001c6ff:	83 c4 10             	add    esp,0x10
c001c702:	85 db                	test   ebx,ebx
c001c704:	75 3c                	jne    c001c742 <Thr::loadDLL(char const*, bool)+0x84>
c001c706:	89 e8                	mov    eax,ebp
c001c708:	84 c0                	test   al,al
c001c70a:	0f 84 b0 01 00 00    	je     c001c8c0 <Thr::loadDLL(char const*, bool)+0x202>
c001c710:	50                   	push   eax
c001c711:	50                   	push   eax
c001c712:	68 46 a7 02 c0       	push   0xc002a746
c001c717:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c71b:	57                   	push   edi
c001c71c:	e8 09 40 fe ff       	call   c000072a <strcpy>
c001c721:	58                   	pop    eax
c001c722:	5a                   	pop    edx
c001c723:	56                   	push   esi
c001c724:	57                   	push   edi
c001c725:	e8 b7 40 fe ff       	call   c00007e1 <strcat>
c001c72a:	59                   	pop    ecx
c001c72b:	58                   	pop    eax
c001c72c:	68 59 a7 02 c0       	push   0xc002a759
c001c731:	57                   	push   edi
c001c732:	e8 aa 40 fe ff       	call   c00007e1 <strcat>
c001c737:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c73a:	e8 64 d1 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c73f:	83 c4 10             	add    esp,0x10
c001c742:	50                   	push   eax
c001c743:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c747:	50                   	push   eax
c001c748:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c74c:	50                   	push   eax
c001c74d:	53                   	push   ebx
c001c74e:	e8 75 68 ff ff       	call   c0012fc8 <File::stat(unsigned long long*, bool*)>
c001c753:	83 c4 10             	add    esp,0x10
c001c756:	85 db                	test   ebx,ebx
c001c758:	74 0c                	je     c001c766 <Thr::loadDLL(char const*, bool)+0xa8>
c001c75a:	83 ec 0c             	sub    esp,0xc
c001c75d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c75f:	53                   	push   ebx
c001c760:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c76b:	75 0a                	jne    c001c777 <Thr::loadDLL(char const*, bool)+0xb9>
c001c76d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c771:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c775:	75 3c                	jne    c001c7b3 <Thr::loadDLL(char const*, bool)+0xf5>
c001c777:	89 e8                	mov    eax,ebp
c001c779:	84 c0                	test   al,al
c001c77b:	0f 84 3d 01 00 00    	je     c001c8be <Thr::loadDLL(char const*, bool)+0x200>
c001c781:	50                   	push   eax
c001c782:	50                   	push   eax
c001c783:	68 46 a7 02 c0       	push   0xc002a746
c001c788:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c78c:	53                   	push   ebx
c001c78d:	e8 98 3f fe ff       	call   c000072a <strcpy>
c001c792:	58                   	pop    eax
c001c793:	5a                   	pop    edx
c001c794:	56                   	push   esi
c001c795:	53                   	push   ebx
c001c796:	e8 46 40 fe ff       	call   c00007e1 <strcat>
c001c79b:	59                   	pop    ecx
c001c79c:	5f                   	pop    edi
c001c79d:	68 59 a7 02 c0       	push   0xc002a759
c001c7a2:	53                   	push   ebx
c001c7a3:	e8 39 40 fe ff       	call   c00007e1 <strcat>
c001c7a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ab:	e8 f3 d0 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c7b0:	83 c4 10             	add    esp,0x10
c001c7b3:	e8 71 51 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c001c7b8:	51                   	push   ecx
c001c7b9:	6a 03                	push   0x3
c001c7bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c7bf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c7c3:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c7c9:	83 d3 00             	adc    ebx,0x0
c001c7cc:	89 ca                	mov    edx,ecx
c001c7ce:	89 d1                	mov    ecx,edx
c001c7d0:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c7d4:	51                   	push   ecx
c001c7d5:	50                   	push   eax
c001c7d6:	e8 89 57 ff ff       	call   c0011f64 <VAS::allocatePages(int, int)>
c001c7db:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7de:	89 c3                	mov    ebx,eax
c001c7e0:	e8 c3 3e fe ff       	call   c00006a8 <strlen>
c001c7e5:	8b 3d c0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c0
c001c7eb:	40                   	inc    eax
c001c7ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7ef:	e8 e0 2c ff ff       	call   c000f4d4 <malloc>
c001c7f4:	89 04 bd e0 da 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2520],eax
c001c7fb:	5f                   	pop    edi
c001c7fc:	58                   	pop    eax
c001c7fd:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c001c802:	56                   	push   esi
c001c803:	ff 34 85 e0 da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2520]
c001c80a:	e8 1b 3f fe ff       	call   c000072a <strcpy>
c001c80f:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c001c814:	8d 50 01             	lea    edx,[eax+0x1]
c001c817:	89 1c 85 e0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2720],ebx
c001c81e:	89 15 c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,edx
c001c824:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c828:	83 c4 0c             	add    esp,0xc
c001c82b:	89 14 85 e0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2920],edx
c001c832:	6a 01                	push   0x1
c001c834:	53                   	push   ebx
c001c835:	56                   	push   esi
c001c836:	e8 7f f6 ff ff       	call   c001beba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	89 c7                	mov    edi,eax
c001c840:	fe c8                	dec    al
c001c842:	74 16                	je     c001c85a <Thr::loadDLL(char const*, bool)+0x19c>
c001c844:	89 e8                	mov    eax,ebp
c001c846:	84 c0                	test   al,al
c001c848:	74 10                	je     c001c85a <Thr::loadDLL(char const*, bool)+0x19c>
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	68 5b a7 02 c0       	push   0xc002a75b
c001c852:	e8 4c d0 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	31 f6                	xor    esi,esi
c001c85c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c860:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c864:	05 ff 0f 00 00       	add    eax,0xfff
c001c869:	83 d2 00             	adc    edx,0x0
c001c86c:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c870:	c1 ea 0c             	shr    edx,0xc
c001c873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c877:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c87b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c87f:	ba 00 00 00 00       	mov    edx,0x0
c001c884:	89 d0                	mov    eax,edx
c001c886:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c88a:	73 2c                	jae    c001c8b8 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c88c:	e8 98 50 ff ff       	call   c0011929 <Virt::getAKernelVAS()>
c001c891:	89 f5                	mov    ebp,esi
c001c893:	c1 e5 0c             	shl    ebp,0xc
c001c896:	52                   	push   edx
c001c897:	01 dd                	add    ebp,ebx
c001c899:	52                   	push   edx
c001c89a:	55                   	push   ebp
c001c89b:	50                   	push   eax
c001c89c:	e8 3d 52 ff ff       	call   c0011ade <VAS::getPageTableEntry(unsigned long)>
c001c8a1:	83 c4 10             	add    esp,0x10
c001c8a4:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c8a7:	75 0c                	jne    c001c8b5 <Thr::loadDLL(char const*, bool)+0x1f7>
c001c8a9:	83 ec 0c             	sub    esp,0xc
c001c8ac:	55                   	push   ebp
c001c8ad:	e8 74 31 ff ff       	call   c000fa26 <Phys::freePage(unsigned long)>
c001c8b2:	83 c4 10             	add    esp,0x10
c001c8b5:	46                   	inc    esi
c001c8b6:	eb a4                	jmp    c001c85c <Thr::loadDLL(char const*, bool)+0x19e>
c001c8b8:	89 f8                	mov    eax,edi
c001c8ba:	84 c0                	test   al,al
c001c8bc:	75 02                	jne    c001c8c0 <Thr::loadDLL(char const*, bool)+0x202>
c001c8be:	31 db                	xor    ebx,ebx
c001c8c0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c8c6:	89 d8                	mov    eax,ebx
c001c8c8:	5b                   	pop    ebx
c001c8c9:	5e                   	pop    esi
c001c8ca:	5f                   	pop    edi
c001c8cb:	5d                   	pop    ebp
c001c8cc:	c3                   	ret    

c001c8cd <Thr::executeDLL(unsigned long, void*)>:
c001c8cd:	56                   	push   esi
c001c8ce:	53                   	push   ebx
c001c8cf:	51                   	push   ecx
c001c8d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c8d8:	85 db                	test   ebx,ebx
c001c8da:	75 10                	jne    c001c8ec <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c8dc:	83 ec 0c             	sub    esp,0xc
c001c8df:	68 7a a7 02 c0       	push   0xc002a77a
c001c8e4:	e8 ba cf ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001c8e9:	83 c4 10             	add    esp,0x10
c001c8ec:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c8f0:	89 d8                	mov    eax,ebx
c001c8f2:	5a                   	pop    edx
c001c8f3:	5b                   	pop    ebx
c001c8f4:	5e                   	pop    esi
c001c8f5:	ff e0                	jmp    eax
c001c8f7:	90                   	nop

c001c8f8 <changeTSS>:
c001c8f8:	83 ec 14             	sub    esp,0x14
c001c8fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c900:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c903:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c908:	c1 e2 15             	shl    edx,0x15
c001c90b:	29 d0                	sub    eax,edx
c001c90d:	50                   	push   eax
c001c90e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001c913:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c919:	05 7c 11 00 00       	add    eax,0x117c
c001c91e:	50                   	push   eax
c001c91f:	e8 b4 47 ff ff       	call   c00110d8 <TSS::setESP(unsigned long)>
c001c924:	83 c4 1c             	add    esp,0x1c
c001c927:	c3                   	ret    

c001c928 <Process::addArgs(char**)>:
c001c928:	57                   	push   edi
c001c929:	56                   	push   esi
c001c92a:	53                   	push   ebx
c001c92b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c92f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c933:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c93d:	85 ff                	test   edi,edi
c001c93f:	74 3d                	je     c001c97e <Process::addArgs(char**)+0x56>
c001c941:	8b 07                	mov    eax,DWORD PTR [edi]
c001c943:	85 c0                	test   eax,eax
c001c945:	74 37                	je     c001c97e <Process::addArgs(char**)+0x56>
c001c947:	31 db                	xor    ebx,ebx
c001c949:	83 ec 0c             	sub    esp,0xc
c001c94c:	50                   	push   eax
c001c94d:	e8 56 3d fe ff       	call   c00006a8 <strlen>
c001c952:	40                   	inc    eax
c001c953:	89 04 24             	mov    DWORD PTR [esp],eax
c001c956:	e8 79 2b ff ff       	call   c000f4d4 <malloc>
c001c95b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c962:	5a                   	pop    edx
c001c963:	59                   	pop    ecx
c001c964:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c967:	43                   	inc    ebx
c001c968:	50                   	push   eax
c001c969:	e8 bc 3d fe ff       	call   c000072a <strcpy>
c001c96e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c97a:	85 c0                	test   eax,eax
c001c97c:	75 cb                	jne    c001c949 <Process::addArgs(char**)+0x21>
c001c97e:	5b                   	pop    ebx
c001c97f:	5e                   	pop    esi
c001c980:	5f                   	pop    edi
c001c981:	c3                   	ret    

c001c982 <Process::Process(char const*, Process*, char**)>:
c001c982:	56                   	push   esi
c001c983:	53                   	push   ebx
c001c984:	83 ec 14             	sub    esp,0x14
c001c987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c98b:	05 0c 02 00 00       	add    eax,0x20c
c001c990:	bb 07 00 00 00       	mov    ebx,0x7
c001c995:	89 c6                	mov    esi,eax
c001c997:	85 db                	test   ebx,ebx
c001c999:	78 12                	js     c001c9ad <Process::Process(char const*, Process*, char**)+0x2b>
c001c99b:	83 ec 0c             	sub    esp,0xc
c001c99e:	56                   	push   esi
c001c99f:	e8 ce ac 00 00       	call   c0027672 <ThreadControlBlock::ThreadControlBlock()>
c001c9a4:	83 c4 10             	add    esp,0x10
c001c9a7:	83 c6 63             	add    esi,0x63
c001c9aa:	4b                   	dec    ebx
c001c9ab:	eb ea                	jmp    c001c997 <Process::Process(char const*, Process*, char**)+0x15>
c001c9ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9b1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9bf:	e8 30 cd ff ff       	call   c00196f4 <Krnl::newProcessEnv(Process*)>
c001c9c4:	83 c4 10             	add    esp,0x10
c001c9c7:	89 c2                	mov    edx,eax
c001c9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9cd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9d7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c9e0:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001c9e5:	8d 50 01             	lea    edx,[eax+0x1]
c001c9e8:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001c9ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9f2:	89 02                	mov    DWORD PTR [edx],eax
c001c9f4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c9fc:	83 ec 0c             	sub    esp,0xc
c001c9ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca03:	e8 cc 2a ff ff       	call   c000f4d4 <malloc>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	89 c3                	mov    ebx,eax
c001ca0d:	83 ec 08             	sub    esp,0x8
c001ca10:	6a 00                	push   0x0
c001ca12:	53                   	push   ebx
c001ca13:	e8 f4 58 ff ff       	call   c001230c <VAS::VAS(bool)>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca1f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ca25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca29:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ca33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca3b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ca41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca45:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca4b:	85 c0                	test   eax,eax
c001ca4d:	74 42                	je     c001ca91 <Process::Process(char const*, Process*, char**)+0x10f>
c001ca4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca53:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca59:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca63:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ca69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca73:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ca79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca7d:	05 0c 01 00 00       	add    eax,0x10c
c001ca82:	83 ec 08             	sub    esp,0x8
c001ca85:	52                   	push   edx
c001ca86:	50                   	push   eax
c001ca87:	e8 9e 3c fe ff       	call   c000072a <strcpy>
c001ca8c:	83 c4 10             	add    esp,0x10
c001ca8f:	eb 63                	jmp    c001caf4 <Process::Process(char const*, Process*, char**)+0x172>
c001ca91:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001ca99:	83 ec 0c             	sub    esp,0xc
c001ca9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001caa0:	e8 2f 2a ff ff       	call   c000f4d4 <malloc>
c001caa5:	83 c4 10             	add    esp,0x10
c001caa8:	89 c3                	mov    ebx,eax
c001caaa:	83 ec 08             	sub    esp,0x8
c001caad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cab1:	53                   	push   ebx
c001cab2:	e8 1f 43 ff ff       	call   c0010dd6 <VgaText::VgaText(char const*)>
c001cab7:	83 c4 10             	add    esp,0x10
c001caba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cabe:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	50                   	push   eax
c001cad2:	e8 4a 36 ff ff       	call   c0010121 <addToTerminalCycle(VgaText*)>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cade:	05 0c 01 00 00       	add    eax,0x10c
c001cae3:	83 ec 08             	sub    esp,0x8
c001cae6:	68 a4 a7 02 c0       	push   0xc002a7a4
c001caeb:	50                   	push   eax
c001caec:	e8 39 3c fe ff       	call   c000072a <strcpy>
c001caf1:	83 c4 10             	add    esp,0x10
c001caf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf8:	83 c0 0c             	add    eax,0xc
c001cafb:	83 ec 08             	sub    esp,0x8
c001cafe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb02:	50                   	push   eax
c001cb03:	e8 22 3c fe ff       	call   c000072a <strcpy>
c001cb08:	83 c4 10             	add    esp,0x10
c001cb0b:	83 ec 08             	sub    esp,0x8
c001cb0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb16:	e8 0d fe ff ff       	call   c001c928 <Process::addArgs(char**)>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	83 ec 08             	sub    esp,0x8
c001cb21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb29:	e8 58 ee ff ff       	call   c001b986 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb39:	83 f0 01             	xor    eax,0x1
c001cb3c:	88 c2                	mov    dl,al
c001cb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb42:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cb48:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb4d:	83 ec 08             	sub    esp,0x8
c001cb50:	50                   	push   eax
c001cb51:	68 a0 a8 02 c0       	push   0xc002a8a0
c001cb56:	e8 2e 5c ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	90                   	nop
c001cb5f:	83 c4 14             	add    esp,0x14
c001cb62:	5b                   	pop    ebx
c001cb63:	5e                   	pop    esi
c001cb64:	c3                   	ret    
c001cb65:	90                   	nop

c001cb66 <Process::Process(bool, char const*, Process*, char**)>:
c001cb66:	56                   	push   esi
c001cb67:	53                   	push   ebx
c001cb68:	83 ec 24             	sub    esp,0x24
c001cb6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb77:	05 0c 02 00 00       	add    eax,0x20c
c001cb7c:	bb 07 00 00 00       	mov    ebx,0x7
c001cb81:	89 c6                	mov    esi,eax
c001cb83:	85 db                	test   ebx,ebx
c001cb85:	78 12                	js     c001cb99 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cb87:	83 ec 0c             	sub    esp,0xc
c001cb8a:	56                   	push   esi
c001cb8b:	e8 e2 aa 00 00       	call   c0027672 <ThreadControlBlock::ThreadControlBlock()>
c001cb90:	83 c4 10             	add    esp,0x10
c001cb93:	83 c6 63             	add    esi,0x63
c001cb96:	4b                   	dec    ebx
c001cb97:	eb ea                	jmp    c001cb83 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cb99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb9d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbab:	e8 44 cb ff ff       	call   c00196f4 <Krnl::newProcessEnv(Process*)>
c001cbb0:	83 c4 10             	add    esp,0x10
c001cbb3:	89 c2                	mov    edx,eax
c001cbb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbb9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cbbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbc3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cbcc:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001cbd1:	8d 50 01             	lea    edx,[eax+0x1]
c001cbd4:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001cbda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbde:	89 02                	mov    DWORD PTR [edx],eax
c001cbe0:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbef:	e8 e0 28 ff ff       	call   c000f4d4 <malloc>
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	89 c3                	mov    ebx,eax
c001cbf9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cbfe:	83 ec 08             	sub    esp,0x8
c001cc01:	50                   	push   eax
c001cc02:	53                   	push   ebx
c001cc03:	e8 04 57 ff ff       	call   c001230c <VAS::VAS(bool)>
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc0f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cc15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc19:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cc23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc2b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cc31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc35:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc3b:	85 c0                	test   eax,eax
c001cc3d:	74 42                	je     c001cc81 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cc3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc43:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc49:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc53:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc5d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc63:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cc69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc6d:	05 0c 01 00 00       	add    eax,0x10c
c001cc72:	83 ec 08             	sub    esp,0x8
c001cc75:	52                   	push   edx
c001cc76:	50                   	push   eax
c001cc77:	e8 ae 3a fe ff       	call   c000072a <strcpy>
c001cc7c:	83 c4 10             	add    esp,0x10
c001cc7f:	eb 63                	jmp    c001cce4 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cc81:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cc89:	83 ec 0c             	sub    esp,0xc
c001cc8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc90:	e8 3f 28 ff ff       	call   c000f4d4 <malloc>
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	89 c3                	mov    ebx,eax
c001cc9a:	83 ec 08             	sub    esp,0x8
c001cc9d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cca1:	53                   	push   ebx
c001cca2:	e8 2f 41 ff ff       	call   c0010dd6 <VgaText::VgaText(char const*)>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccae:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ccb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccb8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	50                   	push   eax
c001ccc2:	e8 5a 34 ff ff       	call   c0010121 <addToTerminalCycle(VgaText*)>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccce:	05 0c 01 00 00       	add    eax,0x10c
c001ccd3:	83 ec 08             	sub    esp,0x8
c001ccd6:	68 a4 a7 02 c0       	push   0xc002a7a4
c001ccdb:	50                   	push   eax
c001ccdc:	e8 49 3a fe ff       	call   c000072a <strcpy>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cce8:	83 c0 0c             	add    eax,0xc
c001cceb:	83 ec 08             	sub    esp,0x8
c001ccee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccf2:	50                   	push   eax
c001ccf3:	e8 32 3a fe ff       	call   c000072a <strcpy>
c001ccf8:	83 c4 10             	add    esp,0x10
c001ccfb:	83 ec 08             	sub    esp,0x8
c001ccfe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd06:	e8 1d fc ff ff       	call   c001c928 <Process::addArgs(char**)>
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	90                   	nop
c001cd0f:	83 c4 24             	add    esp,0x24
c001cd12:	5b                   	pop    ebx
c001cd13:	5e                   	pop    esi
c001cd14:	c3                   	ret    

c001cd15 <disableIRQs()>:
c001cd15:	fa                   	cli    
c001cd16:	ff 05 8c de 02 c0    	inc    DWORD PTR ds:0xc002de8c
c001cd1c:	c3                   	ret    

c001cd1d <getIRQNestingLevel()>:
c001cd1d:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c001cd22:	c3                   	ret    

c001cd23 <enableIRQs()>:
c001cd23:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c001cd28:	48                   	dec    eax
c001cd29:	a3 8c de 02 c0       	mov    ds:0xc002de8c,eax
c001cd2e:	75 01                	jne    c001cd31 <enableIRQs()+0xe>
c001cd30:	fb                   	sti    
c001cd31:	c3                   	ret    

c001cd32 <lockScheduler()>:
c001cd32:	eb e1                	jmp    c001cd15 <disableIRQs()>

c001cd34 <unlockScheduler()>:
c001cd34:	eb ed                	jmp    c001cd23 <enableIRQs()>

c001cd36 <userModeEntryPoint(void*)>:
c001cd36:	83 ec 0c             	sub    esp,0xc
c001cd39:	e8 f6 ff ff ff       	call   c001cd34 <unlockScheduler()>
c001cd3e:	fb                   	sti    
c001cd3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd47:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cd4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd51:	83 c4 0c             	add    esp,0xc
c001cd54:	e9 86 35 fe ff       	jmp    c00002df <goToUsermode>

c001cd59 <lockStuff()>:
c001cd59:	e8 b7 ff ff ff       	call   c001cd15 <disableIRQs()>
c001cd5e:	ff 05 88 de 02 c0    	inc    DWORD PTR ds:0xc002de88
c001cd64:	c3                   	ret    

c001cd65 <taskStartupFunction>:
c001cd65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd6a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cd6d:	c3                   	ret    

c001cd6e <updateTimeUsed()>:
c001cd6e:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c001cd73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd79:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cd80:	74 50                	je     c001cdd2 <updateTimeUsed()+0x64>
c001cd82:	57                   	push   edi
c001cd83:	56                   	push   esi
c001cd84:	53                   	push   ebx
c001cd85:	0f 31                	rdtsc  
c001cd87:	89 c1                	mov    ecx,eax
c001cd89:	a3 c8 de 02 c0       	mov    ds:0xc002dec8,eax
c001cd8e:	2b 0d b8 de 02 c0    	sub    ecx,DWORD PTR ds:0xc002deb8
c001cd94:	89 d3                	mov    ebx,edx
c001cd96:	89 0d c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,ecx
c001cd9c:	1b 1d bc de 02 c0    	sbb    ebx,DWORD PTR ds:0xc002debc
c001cda2:	a3 b8 de 02 c0       	mov    ds:0xc002deb8,eax
c001cda7:	89 1d c4 de 02 c0    	mov    DWORD PTR ds:0xc002dec4,ebx
c001cdad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdb2:	89 15 cc de 02 c0    	mov    DWORD PTR ds:0xc002decc,edx
c001cdb8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cdbb:	89 15 bc de 02 c0    	mov    DWORD PTR ds:0xc002debc,edx
c001cdc1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cdc4:	01 f1                	add    ecx,esi
c001cdc6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cdc9:	11 fb                	adc    ebx,edi
c001cdcb:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cdce:	5b                   	pop    ebx
c001cdcf:	5e                   	pop    esi
c001cdd0:	5f                   	pop    edi
c001cdd1:	c3                   	ret    
c001cdd2:	c3                   	ret    

c001cdd3 <switchToThread(ThreadControlBlock*)>:
c001cdd3:	53                   	push   ebx
c001cdd4:	83 ec 08             	sub    esp,0x8
c001cdd7:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001cddc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cde0:	85 c0                	test   eax,eax
c001cde2:	75 30                	jne    c001ce14 <switchToThread(ThreadControlBlock*)+0x41>
c001cde4:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cde7:	3c ff                	cmp    al,0xff
c001cde9:	74 25                	je     c001ce10 <switchToThread(ThreadControlBlock*)+0x3d>
c001cdeb:	0f b6 d0             	movzx  edx,al
c001cdee:	b8 84 03 00 00       	mov    eax,0x384
c001cdf3:	29 d0                	sub    eax,edx
c001cdf5:	c1 e0 10             	shl    eax,0x10
c001cdf8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001cdfb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cdfe:	e8 6b ff ff ff       	call   c001cd6e <updateTimeUsed()>
c001ce03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ce07:	83 c4 08             	add    esp,0x8
c001ce0a:	5b                   	pop    ebx
c001ce0b:	e9 07 35 fe ff       	jmp    c0000317 <switchToThreadASM>
c001ce10:	31 c0                	xor    eax,eax
c001ce12:	eb e7                	jmp    c001cdfb <switchToThread(ThreadControlBlock*)+0x28>
c001ce14:	c7 05 84 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de84,0x1
c001ce1e:	83 c4 08             	add    esp,0x8
c001ce21:	5b                   	pop    ebx
c001ce22:	c3                   	ret    
c001ce23:	90                   	nop

c001ce24 <Semaphore::Semaphore(int)>:
c001ce24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce2c:	89 10                	mov    DWORD PTR [eax],edx
c001ce2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce32:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce4f:	90                   	nop
c001ce50:	c3                   	ret    
c001ce51:	90                   	nop

c001ce52 <Mutex::Mutex()>:
c001ce52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce56:	6a 01                	push   0x1
c001ce58:	50                   	push   eax
c001ce59:	e8 c6 ff ff ff       	call   c001ce24 <Semaphore::Semaphore(int)>
c001ce5e:	83 c4 08             	add    esp,0x8
c001ce61:	90                   	nop
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <Process::createThread(void (*)(void*), void*, int)>:
c001ce64:	55                   	push   ebp
c001ce65:	31 c9                	xor    ecx,ecx
c001ce67:	57                   	push   edi
c001ce68:	56                   	push   esi
c001ce69:	53                   	push   ebx
c001ce6a:	83 ec 1c             	sub    esp,0x1c
c001ce6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce71:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ce78:	89 f2                	mov    edx,esi
c001ce7a:	0f b7 c2             	movzx  eax,dx
c001ce7d:	83 e2 01             	and    edx,0x1
c001ce80:	74 14                	je     c001ce96 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ce82:	d1 f8                	sar    eax,1
c001ce84:	41                   	inc    ecx
c001ce85:	89 c2                	mov    edx,eax
c001ce87:	83 f9 10             	cmp    ecx,0x10
c001ce8a:	75 ee                	jne    c001ce7a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ce8c:	83 c4 1c             	add    esp,0x1c
c001ce8f:	31 c0                	xor    eax,eax
c001ce91:	5b                   	pop    ebx
c001ce92:	5e                   	pop    esi
c001ce93:	5f                   	pop    edi
c001ce94:	5d                   	pop    ebp
c001ce95:	c3                   	ret    
c001ce96:	83 ec 08             	sub    esp,0x8
c001ce99:	b8 01 00 00 00       	mov    eax,0x1
c001ce9e:	d3 e0                	shl    eax,cl
c001cea0:	09 c6                	or     esi,eax
c001cea2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cea8:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001ceaf:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ceb2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ceb5:	01 ce                	add    esi,ecx
c001ceb7:	89 f0                	mov    eax,esi
c001ceb9:	c1 e0 05             	shl    eax,0x5
c001cebc:	01 c6                	add    esi,eax
c001cebe:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cec1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cec7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cecd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ced1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001ced7:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cedd:	89 ca                	mov    edx,ecx
c001cedf:	f7 da                	neg    edx
c001cee1:	c1 e2 15             	shl    edx,0x15
c001cee4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ceea:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cef0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cef4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cefe:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cf04:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf08:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cf0e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cf18:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cf22:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cf29:	50                   	push   eax
c001cf2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf2e:	68 a8 de 02 c0       	push   0xc002dea8
c001cf33:	e8 c8 a5 00 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf38:	83 c4 10             	add    esp,0x10
c001cf3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf3f:	83 c4 1c             	add    esp,0x1c
c001cf42:	5b                   	pop    ebx
c001cf43:	5e                   	pop    esi
c001cf44:	5f                   	pop    edi
c001cf45:	5d                   	pop    ebp
c001cf46:	c3                   	ret    
c001cf47:	90                   	nop

c001cf48 <Process::createUserThread()>:
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	68 80 00 00 00       	push   0x80
c001cf50:	6a 00                	push   0x0
c001cf52:	68 36 cd 01 c0       	push   0xc001cd36
c001cf57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf5b:	e8 04 ff ff ff       	call   c001ce64 <Process::createThread(void (*)(void*), void*, int)>
c001cf60:	83 c4 1c             	add    esp,0x1c
c001cf63:	c3                   	ret    

c001cf64 <setupMultitasking(void (*)())>:
c001cf64:	56                   	push   esi
c001cf65:	53                   	push   ebx
c001cf66:	53                   	push   ebx
c001cf67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf6b:	eb 10                	jmp    c001cf7d <setupMultitasking(void (*)())+0x19>
c001cf6d:	83 ec 0c             	sub    esp,0xc
c001cf70:	68 a8 de 02 c0       	push   0xc002dea8
c001cf75:	e8 d8 a4 00 00       	call   c0027452 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf7a:	83 c4 10             	add    esp,0x10
c001cf7d:	83 ec 0c             	sub    esp,0xc
c001cf80:	68 a8 de 02 c0       	push   0xc002dea8
c001cf85:	e8 ac a4 00 00       	call   c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf8a:	83 c4 10             	add    esp,0x10
c001cf8d:	84 c0                	test   al,al
c001cf8f:	74 dc                	je     c001cf6d <setupMultitasking(void (*)())+0x9>
c001cf91:	83 ec 0c             	sub    esp,0xc
c001cf94:	68 3f 07 00 00       	push   0x73f
c001cf99:	e8 36 25 ff ff       	call   c000f4d4 <malloc>
c001cf9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cfa5:	89 c3                	mov    ebx,eax
c001cfa7:	6a 00                	push   0x0
c001cfa9:	68 a8 a7 02 c0       	push   0xc002a7a8
c001cfae:	6a 01                	push   0x1
c001cfb0:	50                   	push   eax
c001cfb1:	e8 b0 fb ff ff       	call   c001cb66 <Process::Process(bool, char const*, Process*, char**)>
c001cfb6:	83 c4 18             	add    esp,0x18
c001cfb9:	89 1d b4 de 02 c0    	mov    DWORD PTR ds:0xc002deb4,ebx
c001cfbf:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfc5:	68 c8 a8 02 c0       	push   0xc002a8c8
c001cfca:	e8 ba 57 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001cfcf:	58                   	pop    eax
c001cfd0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfd6:	e8 70 39 ff ff       	call   c001094b <setActiveTerminal(VgaText*)>
c001cfdb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cfe3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cfe9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfec:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cff6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cffc:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d002:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d00c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d016:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d020:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d026:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d02c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d036:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d03c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d046:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d04c:	5a                   	pop    edx
c001d04d:	59                   	pop    ecx
c001d04e:	68 a4 a7 02 c0       	push   0xc002a7a4
c001d053:	50                   	push   eax
c001d054:	e8 d1 36 fe ff       	call   c000072a <strcpy>
c001d059:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d060:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d064:	83 c4 14             	add    esp,0x14
c001d067:	5b                   	pop    ebx
c001d068:	5e                   	pop    esi
c001d069:	e9 9b 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d06e <schedule()>:
c001d06e:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001d073:	85 c0                	test   eax,eax
c001d075:	74 0b                	je     c001d082 <schedule()+0x14>
c001d077:	c7 05 84 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de84,0x1
c001d081:	c3                   	ret    
c001d082:	53                   	push   ebx
c001d083:	83 ec 14             	sub    esp,0x14
c001d086:	68 a8 de 02 c0       	push   0xc002dea8
c001d08b:	e8 a6 a3 00 00       	call   c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d090:	83 c4 10             	add    esp,0x10
c001d093:	84 c0                	test   al,al
c001d095:	75 38                	jne    c001d0cf <schedule()+0x61>
c001d097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d09c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d09f:	4a                   	dec    edx
c001d0a0:	74 32                	je     c001d0d4 <schedule()+0x66>
c001d0a2:	83 ec 0c             	sub    esp,0xc
c001d0a5:	68 a8 de 02 c0       	push   0xc002dea8
c001d0aa:	e8 7f a3 00 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0af:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d0b6:	89 c3                	mov    ebx,eax
c001d0b8:	e8 95 a3 00 00       	call   c0027452 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0bd:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d0c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c7:	e8 07 fd ff ff       	call   c001cdd3 <switchToThread(ThreadControlBlock*)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	83 c4 08             	add    esp,0x8
c001d0d2:	5b                   	pop    ebx
c001d0d3:	c3                   	ret    
c001d0d4:	83 ec 08             	sub    esp,0x8
c001d0d7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d0de:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d0e4:	68 a8 de 02 c0       	push   0xc002dea8
c001d0e9:	e8 12 a4 00 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d0ee:	83 c4 10             	add    esp,0x10
c001d0f1:	eb af                	jmp    c001d0a2 <schedule()+0x34>

c001d0f3 <unlockStuff()>:
c001d0f3:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001d0f8:	48                   	dec    eax
c001d0f9:	a3 88 de 02 c0       	mov    ds:0xc002de88,eax
c001d0fe:	75 09                	jne    c001d109 <unlockStuff()+0x16>
c001d100:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c001d105:	85 c0                	test   eax,eax
c001d107:	75 05                	jne    c001d10e <unlockStuff()+0x1b>
c001d109:	e9 15 fc ff ff       	jmp    c001cd23 <enableIRQs()>
c001d10e:	83 ec 0c             	sub    esp,0xc
c001d111:	c7 05 84 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de84,0x0
c001d11b:	e8 4e ff ff ff       	call   c001d06e <schedule()>
c001d120:	83 c4 0c             	add    esp,0xc
c001d123:	e9 fb fb ff ff       	jmp    c001cd23 <enableIRQs()>

c001d128 <Semaphore::tryAcquire()>:
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12f:	e8 25 fc ff ff       	call   c001cd59 <lockStuff()>
c001d134:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d137:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d139:	7c 0b                	jl     c001d146 <Semaphore::tryAcquire()+0x1e>
c001d13b:	e8 b3 ff ff ff       	call   c001d0f3 <unlockStuff()>
c001d140:	31 c0                	xor    eax,eax
c001d142:	83 c4 0c             	add    esp,0xc
c001d145:	c3                   	ret    
c001d146:	42                   	inc    edx
c001d147:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d14a:	e8 a4 ff ff ff       	call   c001d0f3 <unlockStuff()>
c001d14f:	b0 01                	mov    al,0x1
c001d151:	83 c4 0c             	add    esp,0xc
c001d154:	c3                   	ret    
c001d155:	90                   	nop

c001d156 <Semaphore::assertLocked(char const*)>:
c001d156:	83 ec 0c             	sub    esp,0xc
c001d159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d161:	e8 f3 fb ff ff       	call   c001cd59 <lockStuff()>
c001d166:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d168:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d16b:	7c 05                	jl     c001d172 <Semaphore::assertLocked(char const*)+0x1c>
c001d16d:	83 c4 0c             	add    esp,0xc
c001d170:	eb 81                	jmp    c001d0f3 <unlockStuff()>
c001d172:	83 ec 0c             	sub    esp,0xc
c001d175:	52                   	push   edx
c001d176:	e8 28 c7 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001d17b:	83 c4 10             	add    esp,0x10
c001d17e:	83 c4 0c             	add    esp,0xc
c001d181:	e9 6d ff ff ff       	jmp    c001d0f3 <unlockStuff()>

c001d186 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	e8 8f fb ff ff       	call   c001cd1d <getIRQNestingLevel()>
c001d18e:	83 ec 08             	sub    esp,0x8
c001d191:	50                   	push   eax
c001d192:	68 fc a8 02 c0       	push   0xc002a8fc
c001d197:	e8 ed 55 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d19c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1a8:	e8 c1 fe ff ff       	call   c001d06e <schedule()>
c001d1ad:	e8 82 fb ff ff       	call   c001cd34 <unlockScheduler()>
c001d1b2:	e8 66 fb ff ff       	call   c001cd1d <getIRQNestingLevel()>
c001d1b7:	5a                   	pop    edx
c001d1b8:	59                   	pop    ecx
c001d1b9:	50                   	push   eax
c001d1ba:	68 30 a9 02 c0       	push   0xc002a930
c001d1bf:	e8 c5 55 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d1c4:	83 c4 1c             	add    esp,0x1c
c001d1c7:	c3                   	ret    

c001d1c8 <blockTask(TaskState)>:
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d1cf:	e8 5e fb ff ff       	call   c001cd32 <lockScheduler()>
c001d1d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1dc:	e8 8d fe ff ff       	call   c001d06e <schedule()>
c001d1e1:	83 c4 0c             	add    esp,0xc
c001d1e4:	e9 4b fb ff ff       	jmp    c001cd34 <unlockScheduler()>

c001d1e9 <waitTask(int, int*, int)>:
c001d1e9:	83 ec 18             	sub    esp,0x18
c001d1ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1f5:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d1f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d201:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d204:	6a 07                	push   0x7
c001d206:	e8 bd ff ff ff       	call   c001d1c8 <blockTask(TaskState)>
c001d20b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d216:	85 d2                	test   edx,edx
c001d218:	74 0a                	je     c001d224 <waitTask(int, int*, int)+0x3b>
c001d21a:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d21d:	89 02                	mov    DWORD PTR [edx],eax
c001d21f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d224:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d227:	83 c4 0c             	add    esp,0xc
c001d22a:	c3                   	ret    

c001d22b <nanoSleepUntil(unsigned long long)>:
c001d22b:	83 ec 0c             	sub    esp,0xc
c001d22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d232:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d236:	3b 05 f0 cf 02 c0    	cmp    eax,DWORD PTR ds:0xc002cff0
c001d23c:	89 d1                	mov    ecx,edx
c001d23e:	1b 0d f4 cf 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cff4
c001d244:	73 04                	jae    c001d24a <nanoSleepUntil(unsigned long long)+0x1f>
c001d246:	83 c4 0c             	add    esp,0xc
c001d249:	c3                   	ret    
c001d24a:	e8 0a fb ff ff       	call   c001cd59 <lockStuff()>
c001d24f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d255:	83 ec 08             	sub    esp,0x8
c001d258:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d25b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d25e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d264:	68 9c de 02 c0       	push   0xc002de9c
c001d269:	e8 92 a2 00 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d26e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d275:	e8 4e ff ff ff       	call   c001d1c8 <blockTask(TaskState)>
c001d27a:	83 c4 1c             	add    esp,0x1c
c001d27d:	e9 71 fe ff ff       	jmp    c001d0f3 <unlockStuff()>

c001d282 <nanoSleep(unsigned long long)>:
c001d282:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c001d287:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c001d28d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d291:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d295:	eb 94                	jmp    c001d22b <nanoSleepUntil(unsigned long long)>

c001d297 <sleep(unsigned long long)>:
c001d297:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d29f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d2a4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d2a8:	01 ca                	add    edx,ecx
c001d2aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d2b2:	eb ce                	jmp    c001d282 <nanoSleep(unsigned long long)>

c001d2b4 <Semaphore::acquire()>:
c001d2b4:	83 ec 0c             	sub    esp,0xc
c001d2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2bb:	e8 99 fa ff ff       	call   c001cd59 <lockStuff()>
c001d2c0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2c3:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d2c5:	7d 0c                	jge    c001d2d3 <Semaphore::acquire()+0x1f>
c001d2c7:	42                   	inc    edx
c001d2c8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2cb:	83 c4 0c             	add    esp,0xc
c001d2ce:	e9 20 fe ff ff       	jmp    c001d0f3 <unlockStuff()>
c001d2d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2d9:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d2e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2e3:	85 d2                	test   edx,edx
c001d2e5:	74 2a                	je     c001d311 <Semaphore::acquire()+0x5d>
c001d2e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d2ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2f0:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d2f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2f9:	83 ec 0c             	sub    esp,0xc
c001d2fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2ff:	6a 05                	push   0x5
c001d301:	e8 c2 fe ff ff       	call   c001d1c8 <blockTask(TaskState)>
c001d306:	83 c4 10             	add    esp,0x10
c001d309:	83 c4 0c             	add    esp,0xc
c001d30c:	e9 e2 fd ff ff       	jmp    c001d0f3 <unlockStuff()>
c001d311:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d317:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d31a:	eb d7                	jmp    c001d2f3 <Semaphore::acquire()+0x3f>

c001d31c <taskReturned>:
c001d31c:	83 ec 18             	sub    esp,0x18
c001d31f:	68 64 a9 02 c0       	push   0xc002a964
c001d324:	e8 7a c5 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001d329:	83 c4 10             	add    esp,0x10
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	6a 02                	push   0x2
c001d331:	e8 92 fe ff ff       	call   c001d1c8 <blockTask(TaskState)>
c001d336:	e8 f7 f9 ff ff       	call   c001cd32 <lockScheduler()>
c001d33b:	e8 2e fd ff ff       	call   c001d06e <schedule()>
c001d340:	e8 ef f9 ff ff       	call   c001cd34 <unlockScheduler()>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	eb e2                	jmp    c001d32c <taskReturned+0x10>

c001d34a <unblockTask(ThreadControlBlock*)>:
c001d34a:	53                   	push   ebx
c001d34b:	83 ec 08             	sub    esp,0x8
c001d34e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d352:	e8 db f9 ff ff       	call   c001cd32 <lockScheduler()>
c001d357:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d35a:	85 c0                	test   eax,eax
c001d35c:	74 5c                	je     c001d3ba <unblockTask(ThreadControlBlock*)+0x70>
c001d35e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d361:	48                   	dec    eax
c001d362:	74 31                	je     c001d395 <unblockTask(ThreadControlBlock*)+0x4b>
c001d364:	83 ec 0c             	sub    esp,0xc
c001d367:	68 a8 de 02 c0       	push   0xc002dea8
c001d36c:	e8 bd a0 00 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d371:	83 c4 10             	add    esp,0x10
c001d374:	85 c0                	test   eax,eax
c001d376:	75 17                	jne    c001d38f <unblockTask(ThreadControlBlock*)+0x45>
c001d378:	eb 65                	jmp    c001d3df <unblockTask(ThreadControlBlock*)+0x95>
c001d37a:	83 ec 08             	sub    esp,0x8
c001d37d:	50                   	push   eax
c001d37e:	68 a8 de 02 c0       	push   0xc002dea8
c001d383:	e8 80 a3 00 00       	call   c0027708 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d388:	83 c4 10             	add    esp,0x10
c001d38b:	85 c0                	test   eax,eax
c001d38d:	74 50                	je     c001d3df <unblockTask(ThreadControlBlock*)+0x95>
c001d38f:	39 c3                	cmp    ebx,eax
c001d391:	75 e7                	jne    c001d37a <unblockTask(ThreadControlBlock*)+0x30>
c001d393:	eb 1c                	jmp    c001d3b1 <unblockTask(ThreadControlBlock*)+0x67>
c001d395:	83 ec 0c             	sub    esp,0xc
c001d398:	68 54 aa 02 c0       	push   0xc002aa54
c001d39d:	e8 e7 53 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d3a2:	c7 04 24 e0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9e0
c001d3a9:	e8 db 53 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d3ae:	83 c4 10             	add    esp,0x10
c001d3b1:	83 c4 08             	add    esp,0x8
c001d3b4:	5b                   	pop    ebx
c001d3b5:	e9 7a f9 ff ff       	jmp    c001cd34 <unlockScheduler()>
c001d3ba:	83 ec 0c             	sub    esp,0xc
c001d3bd:	68 98 a9 02 c0       	push   0xc002a998
c001d3c2:	e8 c2 53 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d3c7:	c7 04 24 e0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9e0
c001d3ce:	e8 b6 53 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d3d3:	83 c4 10             	add    esp,0x10
c001d3d6:	83 c4 08             	add    esp,0x8
c001d3d9:	5b                   	pop    ebx
c001d3da:	e9 55 f9 ff ff       	jmp    c001cd34 <unlockScheduler()>
c001d3df:	83 ec 08             	sub    esp,0x8
c001d3e2:	53                   	push   ebx
c001d3e3:	68 a8 de 02 c0       	push   0xc002dea8
c001d3e8:	e8 13 a1 00 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d3ed:	83 c4 10             	add    esp,0x10
c001d3f0:	83 c4 08             	add    esp,0x8
c001d3f3:	5b                   	pop    ebx
c001d3f4:	e9 3b f9 ff ff       	jmp    c001cd34 <unlockScheduler()>

c001d3f9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d3f9:	55                   	push   ebp
c001d3fa:	57                   	push   edi
c001d3fb:	56                   	push   esi
c001d3fc:	53                   	push   ebx
c001d3fd:	83 ec 1c             	sub    esp,0x1c
c001d400:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d404:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d407:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d40d:	85 ff                	test   edi,edi
c001d40f:	7e 20                	jle    c001d431 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d411:	31 f6                	xor    esi,esi
c001d413:	83 ec 0c             	sub    esp,0xc
c001d416:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d41d:	46                   	inc    esi
c001d41e:	e8 c1 20 ff ff       	call   c000f4e4 <free>
c001d423:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d426:	83 c4 10             	add    esp,0x10
c001d429:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d42f:	7f e2                	jg     c001d413 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d431:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d43b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d440:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d443:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d446:	d3 c0                	rol    eax,cl
c001d448:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d44f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d452:	89 f7                	mov    edi,esi
c001d454:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d45c:	0f 85 74 01 00 00    	jne    c001d5d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d462:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d468:	85 ed                	test   ebp,ebp
c001d46a:	74 1b                	je     c001d487 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d46c:	83 ec 0c             	sub    esp,0xc
c001d46f:	55                   	push   ebp
c001d470:	e8 9b c1 ff ff       	call   c0019610 <EnvVarContainer::~EnvVarContainer()>
c001d475:	59                   	pop    ecx
c001d476:	5e                   	pop    esi
c001d477:	6a 0c                	push   0xc
c001d479:	55                   	push   ebp
c001d47a:	e8 2a 52 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c001d47f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d482:	83 c4 10             	add    esp,0x10
c001d485:	89 f7                	mov    edi,esi
c001d487:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d48d:	85 c0                	test   eax,eax
c001d48f:	0f 84 aa 00 00 00    	je     c001d53f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d495:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d498:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d49c:	31 c9                	xor    ecx,ecx
c001d49e:	eb 10                	jmp    c001d4b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d4a0:	41                   	inc    ecx
c001d4a1:	83 f9 10             	cmp    ecx,0x10
c001d4a4:	0f 84 95 00 00 00    	je     c001d53f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d4aa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4b0:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d4b7:	d3 fa                	sar    edx,cl
c001d4b9:	83 e2 01             	and    edx,0x1
c001d4bc:	74 e2                	je     c001d4a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4be:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d4c1:	01 ca                	add    edx,ecx
c001d4c3:	89 d5                	mov    ebp,edx
c001d4c5:	c1 e5 05             	shl    ebp,0x5
c001d4c8:	01 ea                	add    edx,ebp
c001d4ca:	01 d0                	add    eax,edx
c001d4cc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d4d2:	83 fd 07             	cmp    ebp,0x7
c001d4d5:	75 c9                	jne    c001d4a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4d7:	05 40 02 00 00       	add    eax,0x240
c001d4dc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d4df:	83 fd ff             	cmp    ebp,0xffffffff
c001d4e2:	0f 8c 08 01 00 00    	jl     c001d5f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d4e8:	0f 84 b9 01 00 00    	je     c001d6a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d4ee:	85 ed                	test   ebp,ebp
c001d4f0:	0f 84 a0 01 00 00    	je     c001d696 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d4f6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d4f8:	75 a6                	jne    c001d4a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4fa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d500:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d504:	01 d0                	add    eax,edx
c001d506:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d513:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d516:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d51c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d523:	50                   	push   eax
c001d524:	e8 21 fe ff ff       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d52f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d533:	89 f7                	mov    edi,esi
c001d535:	41                   	inc    ecx
c001d536:	83 f9 10             	cmp    ecx,0x10
c001d539:	0f 85 6b ff ff ff    	jne    c001d4aa <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d53f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d545:	85 c0                	test   eax,eax
c001d547:	74 5d                	je     c001d5a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d549:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d54f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d555:	74 4f                	je     c001d5a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d557:	83 ec 0c             	sub    esp,0xc
c001d55a:	68 a8 de 02 c0       	push   0xc002dea8
c001d55f:	e8 ca 9e 00 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d564:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d56b:	89 c7                	mov    edi,eax
c001d56d:	e8 c4 9e 00 00       	call   c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d572:	83 c4 10             	add    esp,0x10
c001d575:	84 c0                	test   al,al
c001d577:	0f 84 e4 00 00 00    	je     c001d661 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d57d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d580:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d586:	85 d2                	test   edx,edx
c001d588:	74 0f                	je     c001d599 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d58a:	83 ec 0c             	sub    esp,0xc
c001d58d:	8b 02                	mov    eax,DWORD PTR [edx]
c001d58f:	52                   	push   edx
c001d590:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d593:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d5a3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d5a6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d5ac:	85 db                	test   ebx,ebx
c001d5ae:	74 16                	je     c001d5c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	53                   	push   ebx
c001d5b4:	e8 3f 47 ff ff       	call   c0011cf8 <VAS::~VAS()>
c001d5b9:	58                   	pop    eax
c001d5ba:	5a                   	pop    edx
c001d5bb:	6a 10                	push   0x10
c001d5bd:	53                   	push   ebx
c001d5be:	e8 e6 50 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c001d5c3:	83 c4 10             	add    esp,0x10
c001d5c6:	83 ec 0c             	sub    esp,0xc
c001d5c9:	68 af a7 02 c0       	push   0xc002a7af
c001d5ce:	e8 b6 51 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	83 ec 08             	sub    esp,0x8
c001d5d9:	68 3f 07 00 00       	push   0x73f
c001d5de:	68 bd a7 02 c0       	push   0xc002a7bd
c001d5e3:	e8 a1 51 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d5e8:	83 c4 2c             	add    esp,0x2c
c001d5eb:	5b                   	pop    ebx
c001d5ec:	5e                   	pop    esi
c001d5ed:	5f                   	pop    edi
c001d5ee:	5d                   	pop    ebp
c001d5ef:	c3                   	ret    
c001d5f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	68 98 aa 02 c0       	push   0xc002aa98
c001d5fc:	e8 a2 c2 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001d601:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d604:	83 c4 10             	add    esp,0x10
c001d607:	89 f7                	mov    edi,esi
c001d609:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d60d:	e9 8e fe ff ff       	jmp    c001d4a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d612:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d618:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d61e:	75 1c                	jne    c001d63c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d620:	83 ec 0c             	sub    esp,0xc
c001d623:	68 00 ab 02 c0       	push   0xc002ab00
c001d628:	e8 5c 51 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d62d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d634:	e8 8f fb ff ff       	call   c001d1c8 <blockTask(TaskState)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	83 ec 08             	sub    esp,0x8
c001d63f:	56                   	push   esi
c001d640:	68 a8 de 02 c0       	push   0xc002dea8
c001d645:	e8 b6 9e 00 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d64a:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d651:	e8 d8 9d 00 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d656:	83 c4 10             	add    esp,0x10
c001d659:	39 f8                	cmp    eax,edi
c001d65b:	0f 84 1c ff ff ff    	je     c001d57d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d661:	83 ec 0c             	sub    esp,0xc
c001d664:	68 a8 de 02 c0       	push   0xc002dea8
c001d669:	e8 c0 9d 00 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d66e:	c7 04 24 a8 de 02 c0 	mov    DWORD PTR [esp],0xc002dea8
c001d675:	89 c6                	mov    esi,eax
c001d677:	e8 d6 9d 00 00       	call   c0027452 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d67c:	83 c4 10             	add    esp,0x10
c001d67f:	39 f3                	cmp    ebx,esi
c001d681:	74 b9                	je     c001d63c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d683:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d686:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d689:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d68f:	75 ab                	jne    c001d63c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d691:	e9 7c ff ff ff       	jmp    c001d612 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d696:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d69a:	83 ec 0c             	sub    esp,0xc
c001d69d:	68 cc aa 02 c0       	push   0xc002aacc
c001d6a2:	e9 55 ff ff ff       	jmp    c001d5fc <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d6a7:	8b 36                	mov    esi,DWORD PTR [esi]
c001d6a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6ad:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d6b0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d6b3:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d6b9:	01 d7                	add    edi,edx
c001d6bb:	89 f8                	mov    eax,edi
c001d6bd:	e9 44 fe ff ff       	jmp    c001d506 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d6c2 <cleanerTaskFunction(void*)>:
c001d6c2:	53                   	push   ebx
c001d6c3:	83 ec 08             	sub    esp,0x8
c001d6c6:	e8 69 f6 ff ff       	call   c001cd34 <unlockScheduler()>
c001d6cb:	e8 62 f6 ff ff       	call   c001cd32 <lockScheduler()>
c001d6d0:	80 3d 6c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de6c,0x0
c001d6d7:	0f 85 8e 00 00 00    	jne    c001d76b <cleanerTaskFunction(void*)+0xa9>
c001d6dd:	83 ec 0c             	sub    esp,0xc
c001d6e0:	6a 02                	push   0x2
c001d6e2:	e8 9f fa ff ff       	call   c001d186 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d6e7:	83 c4 10             	add    esp,0x10
c001d6ea:	c6 05 6c de 02 c0 00 	mov    BYTE PTR ds:0xc002de6c,0x0
c001d6f1:	e8 63 f6 ff ff       	call   c001cd59 <lockStuff()>
c001d6f6:	e8 37 f6 ff ff       	call   c001cd32 <lockScheduler()>
c001d6fb:	83 ec 0c             	sub    esp,0xc
c001d6fe:	68 90 de 02 c0       	push   0xc002de90
c001d703:	e8 2e 9d 00 00       	call   c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d708:	83 c4 10             	add    esp,0x10
c001d70b:	84 c0                	test   al,al
c001d70d:	75 40                	jne    c001d74f <cleanerTaskFunction(void*)+0x8d>
c001d70f:	83 ec 0c             	sub    esp,0xc
c001d712:	68 90 de 02 c0       	push   0xc002de90
c001d717:	e8 12 9d 00 00       	call   c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d71c:	c7 04 24 90 de 02 c0 	mov    DWORD PTR [esp],0xc002de90
c001d723:	89 c3                	mov    ebx,eax
c001d725:	e8 28 9d 00 00       	call   c0027452 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d72a:	c7 04 24 d3 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7d3
c001d731:	e8 53 50 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d736:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d739:	e8 bb fc ff ff       	call   c001d3f9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d73e:	c7 04 24 ec a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ec
c001d745:	e8 3f 50 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d74a:	83 c4 10             	add    esp,0x10
c001d74d:	eb ac                	jmp    c001d6fb <cleanerTaskFunction(void*)+0x39>
c001d74f:	e8 e0 f5 ff ff       	call   c001cd34 <unlockScheduler()>
c001d754:	e8 9a f9 ff ff       	call   c001d0f3 <unlockStuff()>
c001d759:	e8 d4 f5 ff ff       	call   c001cd32 <lockScheduler()>
c001d75e:	80 3d 6c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de6c,0x0
c001d765:	0f 84 72 ff ff ff    	je     c001d6dd <cleanerTaskFunction(void*)+0x1b>
c001d76b:	e8 c4 f5 ff ff       	call   c001cd34 <unlockScheduler()>
c001d770:	e9 75 ff ff ff       	jmp    c001d6ea <cleanerTaskFunction(void*)+0x28>

c001d775 <terminateTask(int)>:
c001d775:	83 ec 14             	sub    esp,0x14
c001d778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d77d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d780:	83 c0 0c             	add    eax,0xc
c001d783:	50                   	push   eax
c001d784:	68 28 ab 02 c0       	push   0xc002ab28
c001d789:	e8 fb 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d78e:	e8 c6 f5 ff ff       	call   c001cd59 <lockStuff()>
c001d793:	e8 9a f5 ff ff       	call   c001cd32 <lockScheduler()>
c001d798:	c7 04 24 ff a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ff
c001d79f:	e8 e5 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d7a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7ad:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d7b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d7b8:	5a                   	pop    edx
c001d7b9:	59                   	pop    ecx
c001d7ba:	50                   	push   eax
c001d7bb:	68 90 de 02 c0       	push   0xc002de90
c001d7c0:	e8 3b 9d 00 00       	call   c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7ca:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d7d1:	c7 04 24 19 a8 02 c0 	mov    DWORD PTR [esp],0xc002a819
c001d7d8:	e8 ac 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001d7e5:	85 c0                	test   eax,eax
c001d7e7:	74 5a                	je     c001d843 <terminateTask(int)+0xce>
c001d7e9:	83 ec 0c             	sub    esp,0xc
c001d7ec:	68 33 a8 02 c0       	push   0xc002a833
c001d7f1:	e8 93 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d7f6:	58                   	pop    eax
c001d7f7:	c6 05 6c de 02 c0 01 	mov    BYTE PTR ds:0xc002de6c,0x1
c001d7fe:	ff 35 68 de 02 c0    	push   DWORD PTR ds:0xc002de68
c001d804:	e8 41 fb ff ff       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001d809:	c7 04 24 4d a8 02 c0 	mov    DWORD PTR [esp],0xc002a84d
c001d810:	e8 74 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	e8 17 f5 ff ff       	call   c001cd34 <unlockScheduler()>
c001d81d:	e8 d1 f8 ff ff       	call   c001d0f3 <unlockStuff()>
c001d822:	83 ec 0c             	sub    esp,0xc
c001d825:	68 85 a8 02 c0       	push   0xc002a885
c001d82a:	e8 5a 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d82f:	83 c4 10             	add    esp,0x10
c001d832:	e8 fb f4 ff ff       	call   c001cd32 <lockScheduler()>
c001d837:	e8 32 f8 ff ff       	call   c001d06e <schedule()>
c001d83c:	e8 f3 f4 ff ff       	call   c001cd34 <unlockScheduler()>
c001d841:	eb ef                	jmp    c001d832 <terminateTask(int)+0xbd>
c001d843:	83 ec 0c             	sub    esp,0xc
c001d846:	68 67 a8 02 c0       	push   0xc002a867
c001d84b:	e8 39 4f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d850:	83 c4 10             	add    esp,0x10
c001d853:	eb c3                	jmp    c001d818 <terminateTask(int)+0xa3>

c001d855 <Thr::terminateFromIRQ(int)>:
c001d855:	83 ec 18             	sub    esp,0x18
c001d858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d85c:	e8 14 ff ff ff       	call   c001d775 <terminateTask(int)>
c001d861:	90                   	nop

c001d862 <Semaphore::release()>:
c001d862:	83 ec 0c             	sub    esp,0xc
c001d865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d869:	e8 eb f4 ff ff       	call   c001cd59 <lockStuff()>
c001d86e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d871:	85 d2                	test   edx,edx
c001d873:	74 1a                	je     c001d88f <Semaphore::release()+0x2d>
c001d875:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d878:	83 ec 0c             	sub    esp,0xc
c001d87b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d87e:	52                   	push   edx
c001d87f:	e8 c6 fa ff ff       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001d884:	83 c4 10             	add    esp,0x10
c001d887:	83 c4 0c             	add    esp,0xc
c001d88a:	e9 64 f8 ff ff       	jmp    c001d0f3 <unlockStuff()>
c001d88f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d892:	83 c4 0c             	add    esp,0xc
c001d895:	e9 59 f8 ff ff       	jmp    c001d0f3 <unlockStuff()>

c001d89a <__static_initialization_and_destruction_0(int, int)>:
c001d89a:	83 ec 0c             	sub    esp,0xc
c001d89d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d8a2:	0f 85 88 00 00 00    	jne    c001d930 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8a8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d8b0:	75 7e                	jne    c001d930 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8b2:	83 ec 0c             	sub    esp,0xc
c001d8b5:	68 a8 de 02 c0       	push   0xc002dea8
c001d8ba:	e8 f1 9d 00 00       	call   c00276b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8bf:	83 c4 10             	add    esp,0x10
c001d8c2:	83 ec 04             	sub    esp,0x4
c001d8c5:	68 88 b8 02 c0       	push   0xc002b888
c001d8ca:	68 a8 de 02 c0       	push   0xc002dea8
c001d8cf:	68 70 76 02 c0       	push   0xc0027670
c001d8d4:	e8 4a 4d ff ff       	call   c0012623 <__cxa_atexit>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	83 ec 0c             	sub    esp,0xc
c001d8df:	68 9c de 02 c0       	push   0xc002de9c
c001d8e4:	e8 c7 9d 00 00       	call   c00276b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	83 ec 04             	sub    esp,0x4
c001d8ef:	68 88 b8 02 c0       	push   0xc002b888
c001d8f4:	68 9c de 02 c0       	push   0xc002de9c
c001d8f9:	68 70 76 02 c0       	push   0xc0027670
c001d8fe:	e8 20 4d ff ff       	call   c0012623 <__cxa_atexit>
c001d903:	83 c4 10             	add    esp,0x10
c001d906:	83 ec 0c             	sub    esp,0xc
c001d909:	68 90 de 02 c0       	push   0xc002de90
c001d90e:	e8 9d 9d 00 00       	call   c00276b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d913:	83 c4 10             	add    esp,0x10
c001d916:	83 ec 04             	sub    esp,0x4
c001d919:	68 88 b8 02 c0       	push   0xc002b888
c001d91e:	68 90 de 02 c0       	push   0xc002de90
c001d923:	68 70 76 02 c0       	push   0xc0027670
c001d928:	e8 f6 4c ff ff       	call   c0012623 <__cxa_atexit>
c001d92d:	83 c4 10             	add    esp,0x10
c001d930:	90                   	nop
c001d931:	83 c4 0c             	add    esp,0xc
c001d934:	c3                   	ret    

c001d935 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	83 ec 08             	sub    esp,0x8
c001d93b:	68 ff ff 00 00       	push   0xffff
c001d940:	6a 01                	push   0x1
c001d942:	e8 53 ff ff ff       	call   c001d89a <__static_initialization_and_destruction_0(int, int)>
c001d947:	83 c4 10             	add    esp,0x10
c001d94a:	83 c4 0c             	add    esp,0xc
c001d94d:	c3                   	ret    

c001d94e <Vm::inbv(unsigned short)>:
c001d94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d952:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d957:	75 06                	jne    c001d95f <Vm::inbv(unsigned short)+0x11>
c001d959:	a0 ec de 02 c0       	mov    al,ds:0xc002deec
c001d95e:	c3                   	ret    
c001d95f:	ec                   	in     al,dx
c001d960:	c3                   	ret    

c001d961 <Vm::outbv(unsigned short, unsigned char)>:
c001d961:	53                   	push   ebx
c001d962:	83 ec 08             	sub    esp,0x8
c001d965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d969:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d96d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d972:	75 38                	jne    c001d9ac <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d974:	0f b6 c3             	movzx  eax,bl
c001d977:	51                   	push   ecx
c001d978:	51                   	push   ecx
c001d979:	50                   	push   eax
c001d97a:	68 47 ab 02 c0       	push   0xc002ab47
c001d97f:	e8 05 4e ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001d984:	8b 15 ec de 02 c0    	mov    edx,DWORD PTR ds:0xc002deec
c001d98a:	83 c4 10             	add    esp,0x10
c001d98d:	8d 42 01             	lea    eax,[edx+0x1]
c001d990:	88 9a 00 df 02 c0    	mov    BYTE PTR [edx-0x3ffd2100],bl
c001d996:	a3 ec de 02 c0       	mov    ds:0xc002deec,eax
c001d99b:	83 f8 20             	cmp    eax,0x20
c001d99e:	75 0f                	jne    c001d9af <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9a0:	c7 05 ec de 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002deec,0x1f
c001d9aa:	eb 03                	jmp    c001d9af <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9ac:	88 d8                	mov    al,bl
c001d9ae:	ee                   	out    dx,al
c001d9af:	83 c4 08             	add    esp,0x8
c001d9b2:	5b                   	pop    ebx
c001d9b3:	c3                   	ret    

c001d9b4 <Vm::realToLinear(unsigned short, unsigned short)>:
c001d9b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d9b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d9be:	c1 e0 04             	shl    eax,0x4
c001d9c1:	01 d0                	add    eax,edx
c001d9c3:	c3                   	ret    

c001d9c4 <Vm::getSegment(unsigned int)>:
c001d9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c8:	c1 e8 10             	shr    eax,0x10
c001d9cb:	c3                   	ret    

c001d9cc <Vm::getOffset(unsigned int)>:
c001d9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9d0:	c3                   	ret    

c001d9d1 <Vm::mainloop2()>:
c001d9d1:	83 ec 0c             	sub    esp,0xc
c001d9d4:	e8 59 f3 ff ff       	call   c001cd32 <lockScheduler()>
c001d9d9:	83 ec 0c             	sub    esp,0xc
c001d9dc:	c6 05 e5 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee5,0x1
c001d9e3:	6a 02                	push   0x2
c001d9e5:	e8 9c f7 ff ff       	call   c001d186 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d9ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ef:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d9f3:	52                   	push   edx
c001d9f4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d9f8:	52                   	push   edx
c001d9f9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d9fd:	52                   	push   edx
c001d9fe:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001da02:	50                   	push   eax
c001da03:	e8 a7 28 fe ff       	call   c00002af <goToVM86>
c001da08:	83 c4 2c             	add    esp,0x2c
c001da0b:	c3                   	ret    

c001da0c <Vm::mainVm8086Loop(void*)>:
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	e8 20 f3 ff ff       	call   c001cd34 <unlockScheduler()>
c001da14:	83 c4 0c             	add    esp,0xc
c001da17:	eb b8                	jmp    c001d9d1 <Vm::mainloop2()>

c001da19 <Vm::mainloop3(unsigned long)>:
c001da19:	53                   	push   ebx
c001da1a:	83 ec 08             	sub    esp,0x8
c001da1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da21:	e8 0c f3 ff ff       	call   c001cd32 <lockScheduler()>
c001da26:	83 ec 0c             	sub    esp,0xc
c001da29:	89 1d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,ebx
c001da2f:	6a 02                	push   0x2
c001da31:	c6 05 e4 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee4,0x1
c001da38:	e8 49 f7 ff ff       	call   c001d186 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da3d:	83 c4 18             	add    esp,0x18
c001da40:	5b                   	pop    ebx
c001da41:	eb 8e                	jmp    c001d9d1 <Vm::mainloop2()>

c001da43 <Vm::initialise8086()>:
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	68 80 00 00 00       	push   0x80
c001da4b:	6a 00                	push   0x0
c001da4d:	68 0c da 01 c0       	push   0xc001da0c
c001da52:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001da58:	e8 07 f4 ff ff       	call   c001ce64 <Process::createThread(void (*)(void*), void*, int)>
c001da5d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001da64:	a3 e8 de 02 c0       	mov    ds:0xc002dee8,eax
c001da69:	68 00 01 00 00       	push   0x100
c001da6e:	a1 b4 de 02 c0       	mov    eax,ds:0xc002deb4
c001da73:	6a 00                	push   0x0
c001da75:	6a 00                	push   0x0
c001da77:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001da7d:	e8 d6 46 ff ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001da82:	83 c4 2c             	add    esp,0x2c
c001da85:	c3                   	ret    

c001da86 <Vm::finish8086()>:
c001da86:	53                   	push   ebx
c001da87:	83 ec 08             	sub    esp,0x8
c001da8a:	e8 a3 f2 ff ff       	call   c001cd32 <lockScheduler()>
c001da8f:	80 3d e4 de 02 c0 00 	cmp    BYTE PTR ds:0xc002dee4,0x0
c001da96:	75 0c                	jne    c001daa4 <Vm::finish8086()+0x1e>
c001da98:	e8 d1 f5 ff ff       	call   c001d06e <schedule()>
c001da9d:	e8 92 f2 ff ff       	call   c001cd34 <unlockScheduler()>
c001daa2:	eb e6                	jmp    c001da8a <Vm::finish8086()+0x4>
c001daa4:	83 ec 0c             	sub    esp,0xc
c001daa7:	8b 1d e0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dee0
c001daad:	ff 35 e8 de 02 c0    	push   DWORD PTR ds:0xc002dee8
c001dab3:	c6 05 e4 de 02 c0 00 	mov    BYTE PTR ds:0xc002dee4,0x0
c001daba:	e8 8b f8 ff ff       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001dabf:	e8 70 f2 ff ff       	call   c001cd34 <unlockScheduler()>
c001dac4:	89 d8                	mov    eax,ebx
c001dac6:	83 c4 18             	add    esp,0x18
c001dac9:	5b                   	pop    ebx
c001daca:	c3                   	ret    

c001dacb <Vm::getOutput8086(unsigned char*)>:
c001dacb:	83 ec 10             	sub    esp,0x10
c001dace:	ff 35 ec de 02 c0    	push   DWORD PTR ds:0xc002deec
c001dad4:	68 00 df 02 c0       	push   0xc002df00
c001dad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dadd:	e8 73 2b fe ff       	call   c0000655 <memcpy>
c001dae2:	a1 ec de 02 c0       	mov    eax,ds:0xc002deec
c001dae7:	c7 05 ec de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deec,0x0
c001daf1:	83 c4 1c             	add    esp,0x1c
c001daf4:	c3                   	ret    

c001daf5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001daf5:	55                   	push   ebp
c001daf6:	57                   	push   edi
c001daf7:	56                   	push   esi
c001daf8:	53                   	push   ebx
c001daf9:	83 ec 2c             	sub    esp,0x2c
c001dafc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001db00:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001db04:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001db08:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db0c:	e8 21 f2 ff ff       	call   c001cd32 <lockScheduler()>
c001db11:	a0 e5 de 02 c0       	mov    al,ds:0xc002dee5
c001db16:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db1a:	84 c0                	test   al,al
c001db1c:	75 0c                	jne    c001db2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001db1e:	e8 4b f5 ff ff       	call   c001d06e <schedule()>
c001db23:	e8 0c f2 ff ff       	call   c001cd34 <unlockScheduler()>
c001db28:	eb e2                	jmp    c001db0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001db2a:	a1 e8 de 02 c0       	mov    eax,ds:0xc002dee8
c001db2f:	c7 05 ec de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deec,0x0
c001db39:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001db3d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001db41:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001db45:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001db49:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001db4d:	50                   	push   eax
c001db4e:	6a 20                	push   0x20
c001db50:	6a 00                	push   0x0
c001db52:	68 00 df 02 c0       	push   0xc002df00
c001db57:	e8 2f 2b fe ff       	call   c000068b <memset>
c001db5c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db63:	e8 6c 19 ff ff       	call   c000f4d4 <malloc>
c001db68:	83 c4 0c             	add    esp,0xc
c001db6b:	89 c7                	mov    edi,eax
c001db6d:	ff 35 b4 de 02 c0    	push   DWORD PTR ds:0xc002deb4
c001db73:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db77:	50                   	push   eax
c001db78:	e8 3b 51 ff ff       	call   c0012cb8 <File::File(char const*, Process*)>
c001db7d:	83 c4 10             	add    esp,0x10
c001db80:	85 ff                	test   edi,edi
c001db82:	75 0a                	jne    c001db8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001db84:	83 ec 0c             	sub    esp,0xc
c001db87:	68 63 ab 02 c0       	push   0xc002ab63
c001db8c:	eb 27                	jmp    c001dbb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001db8e:	50                   	push   eax
c001db8f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001db93:	50                   	push   eax
c001db94:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db98:	50                   	push   eax
c001db99:	57                   	push   edi
c001db9a:	e8 29 54 ff ff       	call   c0012fc8 <File::stat(unsigned long long*, bool*)>
c001db9f:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dba4:	83 c4 10             	add    esp,0x10
c001dba7:	89 e8                	mov    eax,ebp
c001dba9:	84 c0                	test   al,al
c001dbab:	74 19                	je     c001dbc6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dbad:	83 ec 0c             	sub    esp,0xc
c001dbb0:	68 77 ab 02 c0       	push   0xc002ab77
c001dbb5:	e8 e9 bc ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001dbba:	31 ed                	xor    ebp,ebp
c001dbbc:	e8 73 f1 ff ff       	call   c001cd34 <unlockScheduler()>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	eb 75                	jmp    c001dc3b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbc6:	50                   	push   eax
c001dbc7:	50                   	push   eax
c001dbc8:	6a 01                	push   0x1
c001dbca:	57                   	push   edi
c001dbcb:	e8 4c 51 ff ff       	call   c0012d1c <File::open(FileOpenMode)>
c001dbd0:	83 c4 10             	add    esp,0x10
c001dbd3:	85 c0                	test   eax,eax
c001dbd5:	74 17                	je     c001dbee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dbd7:	83 ec 0c             	sub    esp,0xc
c001dbda:	68 90 ab 02 c0       	push   0xc002ab90
c001dbdf:	e8 bf bc ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001dbe4:	e8 4b f1 ff ff       	call   c001cd34 <unlockScheduler()>
c001dbe9:	83 c4 10             	add    esp,0x10
c001dbec:	eb 4d                	jmp    c001dc3b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbee:	0f b7 f6             	movzx  esi,si
c001dbf1:	50                   	push   eax
c001dbf2:	0f b7 db             	movzx  ebx,bx
c001dbf5:	50                   	push   eax
c001dbf6:	56                   	push   esi
c001dbf7:	53                   	push   ebx
c001dbf8:	e8 b7 fd ff ff       	call   c001d9b4 <Vm::realToLinear(unsigned short, unsigned short)>
c001dbfd:	5a                   	pop    edx
c001dbfe:	8b 17                	mov    edx,DWORD PTR [edi]
c001dc00:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dc04:	51                   	push   ecx
c001dc05:	50                   	push   eax
c001dc06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc0e:	57                   	push   edi
c001dc0f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dc12:	83 c4 14             	add    esp,0x14
c001dc15:	57                   	push   edi
c001dc16:	e8 5f 51 ff ff       	call   c0012d7a <File::close()>
c001dc1b:	c6 05 e5 de 02 c0 00 	mov    BYTE PTR ds:0xc002dee5,0x0
c001dc22:	e8 0d f1 ff ff       	call   c001cd34 <unlockScheduler()>
c001dc27:	59                   	pop    ecx
c001dc28:	ff 35 e8 de 02 c0    	push   DWORD PTR ds:0xc002dee8
c001dc2e:	e8 17 f7 ff ff       	call   c001d34a <unblockTask(ThreadControlBlock*)>
c001dc33:	83 c4 10             	add    esp,0x10
c001dc36:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dc3b:	83 c4 2c             	add    esp,0x2c
c001dc3e:	89 e8                	mov    eax,ebp
c001dc40:	5b                   	pop    ebx
c001dc41:	5e                   	pop    esi
c001dc42:	5f                   	pop    edi
c001dc43:	5d                   	pop    ebp
c001dc44:	c3                   	ret    

c001dc45 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dc45:	57                   	push   edi
c001dc46:	56                   	push   esi
c001dc47:	53                   	push   ebx
c001dc48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc54:	83 e8 06             	sub    eax,0x6
c001dc57:	0f b7 c0             	movzx  eax,ax
c001dc5a:	50                   	push   eax
c001dc5b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dc60:	50                   	push   eax
c001dc61:	e8 4e fd ff ff       	call   c001d9b4 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc66:	5a                   	pop    edx
c001dc67:	5e                   	pop    esi
c001dc68:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dc6b:	8d 56 fa             	lea    edx,[esi-0x6]
c001dc6e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dc74:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dc77:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dc7a:	83 c2 02             	add    edx,0x2
c001dc7d:	66 89 10             	mov    WORD PTR [eax],dx
c001dc80:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dc83:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dc87:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dc8a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dc8e:	89 d6                	mov    esi,edx
c001dc90:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dc96:	66 81 e6 ff fd       	and    si,0xfdff
c001dc9b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dc9f:	74 07                	je     c001dca8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dca1:	89 d6                	mov    esi,edx
c001dca3:	66 81 ce 00 02       	or     si,0x200
c001dca8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dcac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcb1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dcb5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dcbd:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dcc0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dcc8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dccb:	5b                   	pop    ebx
c001dccc:	5e                   	pop    esi
c001dccd:	5f                   	pop    edi
c001dcce:	c3                   	ret    

c001dccf <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dccf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcd4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcd9:	c1 e0 04             	shl    eax,0x4
c001dcdc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dcdf:	c3                   	ret    

c001dce0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dce0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dce5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcea:	c1 e0 04             	shl    eax,0x4
c001dced:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dcf1:	c3                   	ret    

c001dcf2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dcf2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcf7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcfc:	c1 e0 04             	shl    eax,0x4
c001dcff:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dd02:	c3                   	ret    

c001dd03 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dd03:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd08:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd0d:	c1 e0 04             	shl    eax,0x4
c001dd10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd14:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dd17:	c3                   	ret    

c001dd18 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dd18:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd1d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd22:	c1 e0 04             	shl    eax,0x4
c001dd25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd29:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dd2d:	c3                   	ret    

c001dd2e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dd2e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd38:	c1 e0 04             	shl    eax,0x4
c001dd3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd3f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dd42:	c3                   	ret    

c001dd43 <Vm::faultHandler(regs*)>:
c001dd43:	55                   	push   ebp
c001dd44:	57                   	push   edi
c001dd45:	56                   	push   esi
c001dd46:	53                   	push   ebx
c001dd47:	83 ec 1c             	sub    esp,0x1c
c001dd4a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd4e:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dd51:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dd54:	0f b7 c1             	movzx  eax,cx
c001dd57:	50                   	push   eax
c001dd58:	0f b7 c3             	movzx  eax,bx
c001dd5b:	c1 e3 04             	shl    ebx,0x4
c001dd5e:	50                   	push   eax
c001dd5f:	e8 50 fc ff ff       	call   c001d9b4 <Vm::realToLinear(unsigned short, unsigned short)>
c001dd64:	5a                   	pop    edx
c001dd65:	89 c5                	mov    ebp,eax
c001dd67:	5e                   	pop    esi
c001dd68:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dd6c:	50                   	push   eax
c001dd6d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dd71:	50                   	push   eax
c001dd72:	e8 3d fc ff ff       	call   c001d9b4 <Vm::realToLinear(unsigned short, unsigned short)>
c001dd77:	01 cb                	add    ebx,ecx
c001dd79:	89 c6                	mov    esi,eax
c001dd7b:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dd7f:	50                   	push   eax
c001dd80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd84:	50                   	push   eax
c001dd85:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd89:	50                   	push   eax
c001dd8a:	55                   	push   ebp
c001dd8b:	53                   	push   ebx
c001dd8c:	b3 06                	mov    bl,0x6
c001dd8e:	68 a9 ab 02 c0       	push   0xc002aba9
c001dd93:	e8 f1 49 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001dd98:	83 c4 20             	add    esp,0x20
c001dd9b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dda0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dda5:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dda9:	3c 9d                	cmp    al,0x9d
c001ddab:	0f 84 d7 02 00 00    	je     c001e088 <Vm::faultHandler(regs*)+0x345>
c001ddb1:	0f 87 a3 00 00 00    	ja     c001de5a <Vm::faultHandler(regs*)+0x117>
c001ddb7:	3c 66                	cmp    al,0x66
c001ddb9:	0f 84 15 02 00 00    	je     c001dfd4 <Vm::faultHandler(regs*)+0x291>
c001ddbf:	77 5f                	ja     c001de20 <Vm::faultHandler(regs*)+0xdd>
c001ddc1:	3c 36                	cmp    al,0x36
c001ddc3:	0f 84 f1 01 00 00    	je     c001dfba <Vm::faultHandler(regs*)+0x277>
c001ddc9:	77 28                	ja     c001ddf3 <Vm::faultHandler(regs*)+0xb0>
c001ddcb:	3c 26                	cmp    al,0x26
c001ddcd:	0f 84 99 01 00 00    	je     c001df6c <Vm::faultHandler(regs*)+0x229>
c001ddd3:	3c 2e                	cmp    al,0x2e
c001ddd5:	0f 85 3b 07 00 00    	jne    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001dddb:	83 ec 0c             	sub    esp,0xc
c001ddde:	31 db                	xor    ebx,ebx
c001dde0:	68 be ab 02 c0       	push   0xc002abbe
c001dde5:	e8 9f 49 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001ddea:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dded:	83 c4 10             	add    esp,0x10
c001ddf0:	45                   	inc    ebp
c001ddf1:	eb b2                	jmp    c001dda5 <Vm::faultHandler(regs*)+0x62>
c001ddf3:	3c 64                	cmp    al,0x64
c001ddf5:	0f 84 8b 01 00 00    	je     c001df86 <Vm::faultHandler(regs*)+0x243>
c001ddfb:	0f 87 9f 01 00 00    	ja     c001dfa0 <Vm::faultHandler(regs*)+0x25d>
c001de01:	3c 3e                	cmp    al,0x3e
c001de03:	0f 85 0d 07 00 00    	jne    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001de09:	83 ec 0c             	sub    esp,0xc
c001de0c:	b3 01                	mov    bl,0x1
c001de0e:	68 c2 ab 02 c0       	push   0xc002abc2
c001de13:	e8 71 49 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001de18:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de1b:	83 c4 10             	add    esp,0x10
c001de1e:	eb d0                	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001de20:	3c 6d                	cmp    al,0x6d
c001de22:	0f 84 af 03 00 00    	je     c001e1d7 <Vm::faultHandler(regs*)+0x494>
c001de28:	77 15                	ja     c001de3f <Vm::faultHandler(regs*)+0xfc>
c001de2a:	3c 67                	cmp    al,0x67
c001de2c:	0f 84 bf 01 00 00    	je     c001dff1 <Vm::faultHandler(regs*)+0x2ae>
c001de32:	3c 6c                	cmp    al,0x6c
c001de34:	0f 84 3f 03 00 00    	je     c001e179 <Vm::faultHandler(regs*)+0x436>
c001de3a:	e9 d7 06 00 00       	jmp    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001de3f:	3c 6f                	cmp    al,0x6f
c001de41:	0f 84 a4 04 00 00    	je     c001e2eb <Vm::faultHandler(regs*)+0x5a8>
c001de47:	0f 82 11 04 00 00    	jb     c001e25e <Vm::faultHandler(regs*)+0x51b>
c001de4d:	3c 9c                	cmp    al,0x9c
c001de4f:	0f 84 ba 01 00 00    	je     c001e00f <Vm::faultHandler(regs*)+0x2cc>
c001de55:	e9 bc 06 00 00       	jmp    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001de5a:	3c ec                	cmp    al,0xec
c001de5c:	0f 84 24 06 00 00    	je     c001e486 <Vm::faultHandler(regs*)+0x743>
c001de62:	0f 87 93 00 00 00    	ja     c001defb <Vm::faultHandler(regs*)+0x1b8>
c001de68:	3c e4                	cmp    al,0xe4
c001de6a:	0f 84 5c 05 00 00    	je     c001e3cc <Vm::faultHandler(regs*)+0x689>
c001de70:	77 6a                	ja     c001dedc <Vm::faultHandler(regs*)+0x199>
c001de72:	3c cd                	cmp    al,0xcd
c001de74:	0f 84 7e 02 00 00    	je     c001e0f8 <Vm::faultHandler(regs*)+0x3b5>
c001de7a:	3c cf                	cmp    al,0xcf
c001de7c:	0f 85 94 06 00 00    	jne    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001de82:	83 ec 0c             	sub    esp,0xc
c001de85:	68 06 ac 02 c0       	push   0xc002ac06
c001de8a:	e8 fa 48 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001de8f:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001de92:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001de95:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001de99:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001de9c:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001dea0:	0d 00 02 02 00       	or     eax,0x20200
c001dea5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dea8:	56                   	push   esi
c001dea9:	53                   	push   ebx
c001deaa:	52                   	push   edx
c001deab:	68 0c ac 02 c0       	push   0xc002ac0c
c001deb0:	e8 d4 48 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001deb5:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001deb9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001debf:	66 c1 e8 09          	shr    ax,0x9
c001dec3:	83 e0 01             	and    eax,0x1
c001dec6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001dec9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001decc:	83 c0 06             	add    eax,0x6
c001decf:	25 ff ff 00 00       	and    eax,0xffff
c001ded4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ded7:	e9 95 02 00 00       	jmp    c001e171 <Vm::faultHandler(regs*)+0x42e>
c001dedc:	3c e6                	cmp    al,0xe6
c001dede:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001dee2:	0f 84 4e 05 00 00    	je     c001e436 <Vm::faultHandler(regs*)+0x6f3>
c001dee8:	0f 82 0a 05 00 00    	jb     c001e3f8 <Vm::faultHandler(regs*)+0x6b5>
c001deee:	3c e7                	cmp    al,0xe7
c001def0:	0f 84 69 05 00 00    	je     c001e45f <Vm::faultHandler(regs*)+0x71c>
c001def6:	e9 1b 06 00 00       	jmp    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001defb:	3c ef                	cmp    al,0xef
c001defd:	0f 84 e6 05 00 00    	je     c001e4e9 <Vm::faultHandler(regs*)+0x7a6>
c001df03:	77 37                	ja     c001df3c <Vm::faultHandler(regs*)+0x1f9>
c001df05:	3c ed                	cmp    al,0xed
c001df07:	0f 84 a3 05 00 00    	je     c001e4b0 <Vm::faultHandler(regs*)+0x76d>
c001df0d:	3c ee                	cmp    al,0xee
c001df0f:	0f 85 01 06 00 00    	jne    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001df15:	52                   	push   edx
c001df16:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001df19:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001df1c:	68 a7 ac 02 c0       	push   0xc002aca7
c001df21:	e8 63 48 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001df26:	59                   	pop    ecx
c001df27:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001df2b:	5b                   	pop    ebx
c001df2c:	50                   	push   eax
c001df2d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001df31:	50                   	push   eax
c001df32:	e8 2a fa ff ff       	call   c001d961 <Vm::outbv(unsigned short, unsigned char)>
c001df37:	e9 a5 05 00 00       	jmp    c001e4e1 <Vm::faultHandler(regs*)+0x79e>
c001df3c:	3c fa                	cmp    al,0xfa
c001df3e:	0f 84 f7 01 00 00    	je     c001e13b <Vm::faultHandler(regs*)+0x3f8>
c001df44:	3c fb                	cmp    al,0xfb
c001df46:	0f 84 0a 02 00 00    	je     c001e156 <Vm::faultHandler(regs*)+0x413>
c001df4c:	3c f3                	cmp    al,0xf3
c001df4e:	0f 85 c2 05 00 00    	jne    c001e516 <Vm::faultHandler(regs*)+0x7d3>
c001df54:	83 ec 0c             	sub    esp,0xc
c001df57:	68 df ab 02 c0       	push   0xc002abdf
c001df5c:	e8 28 48 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001df61:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	e9 84 fe ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001df6c:	83 ec 0c             	sub    esp,0xc
c001df6f:	b3 02                	mov    bl,0x2
c001df71:	68 ba ab 02 c0       	push   0xc002abba
c001df76:	e8 0e 48 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001df7b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df7e:	83 c4 10             	add    esp,0x10
c001df81:	e9 6a fe ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001df86:	83 ec 0c             	sub    esp,0xc
c001df89:	b3 03                	mov    bl,0x3
c001df8b:	68 c6 ab 02 c0       	push   0xc002abc6
c001df90:	e8 f4 47 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001df95:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df98:	83 c4 10             	add    esp,0x10
c001df9b:	e9 50 fe ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	b3 04                	mov    bl,0x4
c001dfa5:	68 ca ab 02 c0       	push   0xc002abca
c001dfaa:	e8 da 47 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001dfaf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfb2:	83 c4 10             	add    esp,0x10
c001dfb5:	e9 36 fe ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	b3 05                	mov    bl,0x5
c001dfbf:	68 ce ab 02 c0       	push   0xc002abce
c001dfc4:	e8 c0 47 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001dfc9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfcc:	83 c4 10             	add    esp,0x10
c001dfcf:	e9 1c fe ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001dfd4:	83 ec 0c             	sub    esp,0xc
c001dfd7:	68 d2 ab 02 c0       	push   0xc002abd2
c001dfdc:	e8 a8 47 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001dfe1:	83 c4 10             	add    esp,0x10
c001dfe4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfe7:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dfec:	e9 ff fd ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001dff1:	50                   	push   eax
c001dff2:	50                   	push   eax
c001dff3:	6a 01                	push   0x1
c001dff5:	68 d7 ab 02 c0       	push   0xc002abd7
c001dffa:	e8 8a 47 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001dfff:	83 c4 10             	add    esp,0x10
c001e002:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e005:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e00a:	e9 e1 fd ff ff       	jmp    c001ddf0 <Vm::faultHandler(regs*)+0xad>
c001e00f:	83 ec 0c             	sub    esp,0xc
c001e012:	68 e5 ab 02 c0       	push   0xc002abe5
c001e017:	e8 6d 47 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e01c:	83 c4 10             	add    esp,0x10
c001e01f:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e022:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e027:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e02a:	74 2f                	je     c001e05b <Vm::faultHandler(regs*)+0x318>
c001e02c:	83 ea 04             	sub    edx,0x4
c001e02f:	25 ff 0d 00 00       	and    eax,0xdff
c001e034:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e03a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e03d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e040:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e046:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e04a:	0f 84 bf 04 00 00    	je     c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e050:	80 cc 02             	or     ah,0x2
c001e053:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e056:	e9 b4 04 00 00       	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e05b:	83 ea 02             	sub    edx,0x2
c001e05e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e064:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e067:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e06b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e071:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e075:	74 05                	je     c001e07c <Vm::faultHandler(regs*)+0x339>
c001e077:	80 cc 02             	or     ah,0x2
c001e07a:	eb 03                	jmp    c001e07f <Vm::faultHandler(regs*)+0x33c>
c001e07c:	80 e4 fd             	and    ah,0xfd
c001e07f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e083:	e9 87 04 00 00       	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	68 ec ab 02 c0       	push   0xc002abec
c001e090:	e8 f4 46 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e09d:	74 28                	je     c001e0c7 <Vm::faultHandler(regs*)+0x384>
c001e09f:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0a1:	25 ff 0d 00 00       	and    eax,0xdff
c001e0a6:	0d 00 02 02 00       	or     eax,0x20200
c001e0ab:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0ae:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0b6:	c1 e8 09             	shr    eax,0x9
c001e0b9:	83 e0 01             	and    eax,0x1
c001e0bc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0bf:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0c2:	83 c0 04             	add    eax,0x4
c001e0c5:	eb 24                	jmp    c001e0eb <Vm::faultHandler(regs*)+0x3a8>
c001e0c7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e0ca:	0d 00 02 02 00       	or     eax,0x20200
c001e0cf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0d2:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e0d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0db:	66 c1 e8 09          	shr    ax,0x9
c001e0df:	83 e0 01             	and    eax,0x1
c001e0e2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0e5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0e8:	83 c0 02             	add    eax,0x2
c001e0eb:	25 ff ff 00 00       	and    eax,0xffff
c001e0f0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e0f3:	e9 17 04 00 00       	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e0f8:	53                   	push   ebx
c001e0f9:	53                   	push   ebx
c001e0fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0fe:	50                   	push   eax
c001e0ff:	68 f2 ab 02 c0       	push   0xc002abf2
c001e104:	e8 80 46 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e109:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e10d:	83 c4 10             	add    esp,0x10
c001e110:	3c ee                	cmp    al,0xee
c001e112:	75 10                	jne    c001e124 <Vm::faultHandler(regs*)+0x3e1>
c001e114:	83 ec 0c             	sub    esp,0xc
c001e117:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e11a:	e8 fa f8 ff ff       	call   c001da19 <Vm::mainloop3(unsigned long)>
c001e11f:	e9 c0 03 00 00       	jmp    c001e4e4 <Vm::faultHandler(regs*)+0x7a1>
c001e124:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e128:	83 ec 0c             	sub    esp,0xc
c001e12b:	53                   	push   ebx
c001e12c:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e130:	53                   	push   ebx
c001e131:	55                   	push   ebp
c001e132:	50                   	push   eax
c001e133:	57                   	push   edi
c001e134:	e8 0c fb ff ff       	call   c001dc45 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e139:	eb 36                	jmp    c001e171 <Vm::faultHandler(regs*)+0x42e>
c001e13b:	83 ec 0c             	sub    esp,0xc
c001e13e:	68 fc ab 02 c0       	push   0xc002abfc
c001e143:	e8 41 46 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e148:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e151:	e9 8b 03 00 00       	jmp    c001e4e1 <Vm::faultHandler(regs*)+0x79e>
c001e156:	83 ec 0c             	sub    esp,0xc
c001e159:	68 01 ac 02 c0       	push   0xc002ac01
c001e15e:	e8 26 46 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e168:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e16c:	e9 70 03 00 00       	jmp    c001e4e1 <Vm::faultHandler(regs*)+0x79e>
c001e171:	83 c4 20             	add    esp,0x20
c001e174:	e9 99 03 00 00       	jmp    c001e512 <Vm::faultHandler(regs*)+0x7cf>
c001e179:	83 ec 0c             	sub    esp,0xc
c001e17c:	68 3f ac 02 c0       	push   0xc002ac3f
c001e181:	e8 03 46 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e186:	83 c4 10             	add    esp,0x10
c001e189:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e18c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e191:	74 0d                	je     c001e1a0 <Vm::faultHandler(regs*)+0x45d>
c001e193:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e19a:	0f 87 9e 01 00 00    	ja     c001e33e <Vm::faultHandler(regs*)+0x5fb>
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e1a7:	0f b7 db             	movzx  ebx,bx
c001e1aa:	50                   	push   eax
c001e1ab:	e8 9e f7 ff ff       	call   c001d94e <Vm::inbv(unsigned short)>
c001e1b0:	83 c4 0c             	add    esp,0xc
c001e1b3:	0f b6 c0             	movzx  eax,al
c001e1b6:	50                   	push   eax
c001e1b7:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e1bb:	50                   	push   eax
c001e1bc:	53                   	push   ebx
c001e1bd:	e8 41 fb ff ff       	call   c001dd03 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e1c2:	83 c4 10             	add    esp,0x10
c001e1c5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e1c8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1cc:	74 03                	je     c001e1d1 <Vm::faultHandler(regs*)+0x48e>
c001e1ce:	48                   	dec    eax
c001e1cf:	eb 01                	jmp    c001e1d2 <Vm::faultHandler(regs*)+0x48f>
c001e1d1:	40                   	inc    eax
c001e1d2:	0f b7 c0             	movzx  eax,ax
c001e1d5:	eb 7f                	jmp    c001e256 <Vm::faultHandler(regs*)+0x513>
c001e1d7:	83 ec 0c             	sub    esp,0xc
c001e1da:	68 71 ac 02 c0       	push   0xc002ac71
c001e1df:	e8 a5 45 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e1e4:	83 c4 10             	add    esp,0x10
c001e1e7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e1ea:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1ef:	74 0d                	je     c001e1fe <Vm::faultHandler(regs*)+0x4bb>
c001e1f1:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e1f8:	0f 87 40 01 00 00    	ja     c001e33e <Vm::faultHandler(regs*)+0x5fb>
c001e1fe:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e201:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e205:	0f b7 db             	movzx  ebx,bx
c001e208:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e20d:	74 20                	je     c001e22f <Vm::faultHandler(regs*)+0x4ec>
c001e20f:	ed                   	in     eax,dx
c001e210:	51                   	push   ecx
c001e211:	50                   	push   eax
c001e212:	56                   	push   esi
c001e213:	53                   	push   ebx
c001e214:	e8 15 fb ff ff       	call   c001dd2e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e21f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e223:	74 05                	je     c001e22a <Vm::faultHandler(regs*)+0x4e7>
c001e225:	83 e8 04             	sub    eax,0x4
c001e228:	eb 27                	jmp    c001e251 <Vm::faultHandler(regs*)+0x50e>
c001e22a:	83 c0 04             	add    eax,0x4
c001e22d:	eb 22                	jmp    c001e251 <Vm::faultHandler(regs*)+0x50e>
c001e22f:	66 ed                	in     ax,dx
c001e231:	0f b7 c0             	movzx  eax,ax
c001e234:	52                   	push   edx
c001e235:	50                   	push   eax
c001e236:	56                   	push   esi
c001e237:	53                   	push   ebx
c001e238:	e8 db fa ff ff       	call   c001dd18 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e243:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e247:	74 05                	je     c001e24e <Vm::faultHandler(regs*)+0x50b>
c001e249:	83 e8 02             	sub    eax,0x2
c001e24c:	eb 03                	jmp    c001e251 <Vm::faultHandler(regs*)+0x50e>
c001e24e:	83 c0 02             	add    eax,0x2
c001e251:	25 ff ff 00 00       	and    eax,0xffff
c001e256:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e259:	e9 b1 02 00 00       	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e25e:	83 ec 0c             	sub    esp,0xc
c001e261:	4b                   	dec    ebx
c001e262:	68 77 ac 02 c0       	push   0xc002ac77
c001e267:	e8 1d 45 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e26c:	83 c4 10             	add    esp,0x10
c001e26f:	80 fb 05             	cmp    bl,0x5
c001e272:	77 0a                	ja     c001e27e <Vm::faultHandler(regs*)+0x53b>
c001e274:	0f b6 db             	movzx  ebx,bl
c001e277:	ff 24 9d e8 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5318]
c001e27e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e282:	eb 1b                	jmp    c001e29f <Vm::faultHandler(regs*)+0x55c>
c001e284:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e288:	eb 15                	jmp    c001e29f <Vm::faultHandler(regs*)+0x55c>
c001e28a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e28e:	eb 0f                	jmp    c001e29f <Vm::faultHandler(regs*)+0x55c>
c001e290:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e294:	eb 09                	jmp    c001e29f <Vm::faultHandler(regs*)+0x55c>
c001e296:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e299:	eb 04                	jmp    c001e29f <Vm::faultHandler(regs*)+0x55c>
c001e29b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e29f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e2a4:	74 0d                	je     c001e2b3 <Vm::faultHandler(regs*)+0x570>
c001e2a6:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e2ad:	0f 87 8b 00 00 00    	ja     c001e33e <Vm::faultHandler(regs*)+0x5fb>
c001e2b3:	53                   	push   ebx
c001e2b4:	53                   	push   ebx
c001e2b5:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e2b9:	52                   	push   edx
c001e2ba:	50                   	push   eax
c001e2bb:	e8 0f fa ff ff       	call   c001dccf <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e2c0:	5e                   	pop    esi
c001e2c1:	0f b6 c0             	movzx  eax,al
c001e2c4:	5d                   	pop    ebp
c001e2c5:	50                   	push   eax
c001e2c6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e2ca:	50                   	push   eax
c001e2cb:	e8 91 f6 ff ff       	call   c001d961 <Vm::outbv(unsigned short, unsigned char)>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e2d6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2da:	74 03                	je     c001e2df <Vm::faultHandler(regs*)+0x59c>
c001e2dc:	48                   	dec    eax
c001e2dd:	eb 01                	jmp    c001e2e0 <Vm::faultHandler(regs*)+0x59d>
c001e2df:	40                   	inc    eax
c001e2e0:	0f b7 c0             	movzx  eax,ax
c001e2e3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e2e6:	e9 24 02 00 00       	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e2eb:	83 ec 0c             	sub    esp,0xc
c001e2ee:	4b                   	dec    ebx
c001e2ef:	68 77 ac 02 c0       	push   0xc002ac77
c001e2f4:	e8 90 44 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e2f9:	83 c4 10             	add    esp,0x10
c001e2fc:	80 fb 05             	cmp    bl,0x5
c001e2ff:	77 0a                	ja     c001e30b <Vm::faultHandler(regs*)+0x5c8>
c001e301:	0f b6 db             	movzx  ebx,bl
c001e304:	ff 24 9d 00 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5300]
c001e30b:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e30f:	eb 1b                	jmp    c001e32c <Vm::faultHandler(regs*)+0x5e9>
c001e311:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e315:	eb 15                	jmp    c001e32c <Vm::faultHandler(regs*)+0x5e9>
c001e317:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e31b:	eb 0f                	jmp    c001e32c <Vm::faultHandler(regs*)+0x5e9>
c001e31d:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e321:	eb 09                	jmp    c001e32c <Vm::faultHandler(regs*)+0x5e9>
c001e323:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e326:	eb 04                	jmp    c001e32c <Vm::faultHandler(regs*)+0x5e9>
c001e328:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e32c:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e32f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e334:	74 39                	je     c001e36f <Vm::faultHandler(regs*)+0x62c>
c001e336:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e33c:	76 31                	jbe    c001e36f <Vm::faultHandler(regs*)+0x62c>
c001e33e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e342:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e346:	51                   	push   ecx
c001e347:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e34b:	51                   	push   ecx
c001e34c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e350:	51                   	push   ecx
c001e351:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e355:	51                   	push   ecx
c001e356:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e35a:	52                   	push   edx
c001e35b:	50                   	push   eax
c001e35c:	50                   	push   eax
c001e35d:	68 44 ac 02 c0       	push   0xc002ac44
c001e362:	e8 22 44 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e367:	83 c4 20             	add    esp,0x20
c001e36a:	e9 fb 01 00 00       	jmp    c001e56a <Vm::faultHandler(regs*)+0x827>
c001e36f:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e372:	0f b7 d3             	movzx  edx,bx
c001e375:	81 e6 00 04 00 00    	and    esi,0x400
c001e37b:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e37e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e383:	74 1d                	je     c001e3a2 <Vm::faultHandler(regs*)+0x65f>
c001e385:	51                   	push   ecx
c001e386:	51                   	push   ecx
c001e387:	52                   	push   edx
c001e388:	50                   	push   eax
c001e389:	e8 64 f9 ff ff       	call   c001dcf2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	89 ea                	mov    edx,ebp
c001e393:	ef                   	out    dx,eax
c001e394:	85 f6                	test   esi,esi
c001e396:	74 05                	je     c001e39d <Vm::faultHandler(regs*)+0x65a>
c001e398:	83 eb 04             	sub    ebx,0x4
c001e39b:	eb 21                	jmp    c001e3be <Vm::faultHandler(regs*)+0x67b>
c001e39d:	83 c3 04             	add    ebx,0x4
c001e3a0:	eb 1c                	jmp    c001e3be <Vm::faultHandler(regs*)+0x67b>
c001e3a2:	51                   	push   ecx
c001e3a3:	51                   	push   ecx
c001e3a4:	52                   	push   edx
c001e3a5:	50                   	push   eax
c001e3a6:	e8 35 f9 ff ff       	call   c001dce0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e3ab:	83 c4 10             	add    esp,0x10
c001e3ae:	89 ea                	mov    edx,ebp
c001e3b0:	66 ef                	out    dx,ax
c001e3b2:	85 f6                	test   esi,esi
c001e3b4:	74 05                	je     c001e3bb <Vm::faultHandler(regs*)+0x678>
c001e3b6:	83 eb 02             	sub    ebx,0x2
c001e3b9:	eb 03                	jmp    c001e3be <Vm::faultHandler(regs*)+0x67b>
c001e3bb:	83 c3 02             	add    ebx,0x2
c001e3be:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e3c4:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e3c7:	e9 43 01 00 00       	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e3cc:	53                   	push   ebx
c001e3cd:	53                   	push   ebx
c001e3ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3d2:	50                   	push   eax
c001e3d3:	68 7d ac 02 c0       	push   0xc002ac7d
c001e3d8:	e8 ac 43 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e3dd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e3e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3eb:	e8 5e f5 ff ff       	call   c001d94e <Vm::inbv(unsigned short)>
c001e3f0:	0f b6 c0             	movzx  eax,al
c001e3f3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3f6:	eb 5e                	jmp    c001e456 <Vm::faultHandler(regs*)+0x713>
c001e3f8:	51                   	push   ecx
c001e3f9:	51                   	push   ecx
c001e3fa:	53                   	push   ebx
c001e3fb:	68 83 ac 02 c0       	push   0xc002ac83
c001e400:	e8 84 43 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e40d:	74 07                	je     c001e416 <Vm::faultHandler(regs*)+0x6d3>
c001e40f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e413:	ed                   	in     eax,dx
c001e414:	eb 14                	jmp    c001e42a <Vm::faultHandler(regs*)+0x6e7>
c001e416:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e419:	66 31 db             	xor    bx,bx
c001e41c:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e41f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e423:	66 ed                	in     ax,dx
c001e425:	0f b7 c0             	movzx  eax,ax
c001e428:	09 d8                	or     eax,ebx
c001e42a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e42d:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e431:	e9 dc 00 00 00       	jmp    c001e512 <Vm::faultHandler(regs*)+0x7cf>
c001e436:	50                   	push   eax
c001e437:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e43a:	53                   	push   ebx
c001e43b:	68 89 ac 02 c0       	push   0xc002ac89
c001e440:	e8 44 43 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e445:	58                   	pop    eax
c001e446:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e44a:	5a                   	pop    edx
c001e44b:	50                   	push   eax
c001e44c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e450:	50                   	push   eax
c001e451:	e8 0b f5 ff ff       	call   c001d961 <Vm::outbv(unsigned short, unsigned char)>
c001e456:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e45a:	e9 85 00 00 00       	jmp    c001e4e4 <Vm::faultHandler(regs*)+0x7a1>
c001e45f:	50                   	push   eax
c001e460:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e463:	53                   	push   ebx
c001e464:	68 92 ac 02 c0       	push   0xc002ac92
c001e469:	e8 1b 43 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e475:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e47a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e47d:	74 03                	je     c001e482 <Vm::faultHandler(regs*)+0x73f>
c001e47f:	ef                   	out    dx,eax
c001e480:	eb ab                	jmp    c001e42d <Vm::faultHandler(regs*)+0x6ea>
c001e482:	66 ef                	out    dx,ax
c001e484:	eb a7                	jmp    c001e42d <Vm::faultHandler(regs*)+0x6ea>
c001e486:	55                   	push   ebp
c001e487:	55                   	push   ebp
c001e488:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e48b:	68 9b ac 02 c0       	push   0xc002ac9b
c001e490:	e8 f4 42 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e495:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e49c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e4a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4a3:	e8 a6 f4 ff ff       	call   c001d94e <Vm::inbv(unsigned short)>
c001e4a8:	0f b6 c0             	movzx  eax,al
c001e4ab:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e4ae:	eb 31                	jmp    c001e4e1 <Vm::faultHandler(regs*)+0x79e>
c001e4b0:	56                   	push   esi
c001e4b1:	56                   	push   esi
c001e4b2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4b5:	68 a1 ac 02 c0       	push   0xc002aca1
c001e4ba:	e8 ca 42 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e4bf:	83 c4 10             	add    esp,0x10
c001e4c2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4c5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4ca:	74 03                	je     c001e4cf <Vm::faultHandler(regs*)+0x78c>
c001e4cc:	ed                   	in     eax,dx
c001e4cd:	eb 0d                	jmp    c001e4dc <Vm::faultHandler(regs*)+0x799>
c001e4cf:	66 ed                	in     ax,dx
c001e4d1:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e4d4:	0f b7 c0             	movzx  eax,ax
c001e4d7:	66 31 d2             	xor    dx,dx
c001e4da:	09 d0                	or     eax,edx
c001e4dc:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4df:	eb 2e                	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e4e1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4e4:	83 c4 10             	add    esp,0x10
c001e4e7:	eb 29                	jmp    c001e512 <Vm::faultHandler(regs*)+0x7cf>
c001e4e9:	50                   	push   eax
c001e4ea:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4ed:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4f0:	68 b0 ac 02 c0       	push   0xc002acb0
c001e4f5:	e8 8f 42 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e500:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e505:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e508:	74 03                	je     c001e50d <Vm::faultHandler(regs*)+0x7ca>
c001e50a:	ef                   	out    dx,eax
c001e50b:	eb 02                	jmp    c001e50f <Vm::faultHandler(regs*)+0x7cc>
c001e50d:	66 ef                	out    dx,ax
c001e50f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e512:	b0 01                	mov    al,0x1
c001e514:	eb 56                	jmp    c001e56c <Vm::faultHandler(regs*)+0x829>
c001e516:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e51a:	51                   	push   ecx
c001e51b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e51f:	51                   	push   ecx
c001e520:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e524:	51                   	push   ecx
c001e525:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e529:	51                   	push   ecx
c001e52a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e52e:	52                   	push   edx
c001e52f:	50                   	push   eax
c001e530:	50                   	push   eax
c001e531:	68 b9 ac 02 c0       	push   0xc002acb9
c001e536:	e8 4e 42 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001e53b:	83 c4 20             	add    esp,0x20
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	6a 60                	push   0x60
c001e543:	e8 06 f4 ff ff       	call   c001d94e <Vm::inbv(unsigned short)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	3c 1c                	cmp    al,0x1c
c001e54d:	74 04                	je     c001e553 <Vm::faultHandler(regs*)+0x810>
c001e54f:	3c 5a                	cmp    al,0x5a
c001e551:	75 eb                	jne    c001e53e <Vm::faultHandler(regs*)+0x7fb>
c001e553:	3c 1c                	cmp    al,0x1c
c001e555:	74 04                	je     c001e55b <Vm::faultHandler(regs*)+0x818>
c001e557:	3c 5a                	cmp    al,0x5a
c001e559:	75 0f                	jne    c001e56a <Vm::faultHandler(regs*)+0x827>
c001e55b:	83 ec 0c             	sub    esp,0xc
c001e55e:	6a 60                	push   0x60
c001e560:	e8 e9 f3 ff ff       	call   c001d94e <Vm::inbv(unsigned short)>
c001e565:	83 c4 10             	add    esp,0x10
c001e568:	eb e9                	jmp    c001e553 <Vm::faultHandler(regs*)+0x810>
c001e56a:	31 c0                	xor    eax,eax
c001e56c:	83 c4 1c             	add    esp,0x1c
c001e56f:	5b                   	pop    ebx
c001e570:	5e                   	pop    esi
c001e571:	5f                   	pop    edi
c001e572:	5d                   	pop    ebp
c001e573:	c3                   	ret    

c001e574 <Vm::fpuInternalTo32(unsigned long long)>:
c001e574:	57                   	push   edi
c001e575:	56                   	push   esi
c001e576:	53                   	push   ebx
c001e577:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e57f:	89 d6                	mov    esi,edx
c001e581:	89 d7                	mov    edi,edx
c001e583:	89 c1                	mov    ecx,eax
c001e585:	c1 ef 14             	shr    edi,0x14
c001e588:	89 d3                	mov    ebx,edx
c001e58a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e590:	31 d2                	xor    edx,edx
c001e592:	89 f8                	mov    eax,edi
c001e594:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e59a:	bf ff 00 00 00       	mov    edi,0xff
c001e59f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e5a4:	83 d2 ff             	adc    edx,0xffffffff
c001e5a7:	39 c7                	cmp    edi,eax
c001e5a9:	bf 00 00 00 00       	mov    edi,0x0
c001e5ae:	19 d7                	sbb    edi,edx
c001e5b0:	72 15                	jb     c001e5c7 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e5b2:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e5b6:	c1 e0 17             	shl    eax,0x17
c001e5b9:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e5bf:	09 f1                	or     ecx,esi
c001e5c1:	09 c1                	or     ecx,eax
c001e5c3:	89 cf                	mov    edi,ecx
c001e5c5:	eb 02                	jmp    c001e5c9 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e5c7:	31 ff                	xor    edi,edi
c001e5c9:	89 f8                	mov    eax,edi
c001e5cb:	5b                   	pop    ebx
c001e5cc:	5e                   	pop    esi
c001e5cd:	5f                   	pop    edi
c001e5ce:	c3                   	ret    

c001e5cf <Vm::fpuInternalTo64(unsigned long long)>:
c001e5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5d7:	c3                   	ret    

c001e5d8 <Vm::fpu32ToInternal(unsigned int)>:
c001e5d8:	57                   	push   edi
c001e5d9:	31 ff                	xor    edi,edi
c001e5db:	56                   	push   esi
c001e5dc:	53                   	push   ebx
c001e5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5e1:	89 cb                	mov    ebx,ecx
c001e5e3:	89 ce                	mov    esi,ecx
c001e5e5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e5eb:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e5f1:	c1 e9 17             	shr    ecx,0x17
c001e5f4:	89 f0                	mov    eax,esi
c001e5f6:	0f b6 d1             	movzx  edx,cl
c001e5f9:	81 c2 80 03 00 00    	add    edx,0x380
c001e5ff:	89 d1                	mov    ecx,edx
c001e601:	89 fa                	mov    edx,edi
c001e603:	c1 e1 14             	shl    ecx,0x14
c001e606:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e60a:	c1 e0 1d             	shl    eax,0x1d
c001e60d:	89 d7                	mov    edi,edx
c001e60f:	89 c6                	mov    esi,eax
c001e611:	89 ca                	mov    edx,ecx
c001e613:	89 f0                	mov    eax,esi
c001e615:	09 fa                	or     edx,edi
c001e617:	09 da                	or     edx,ebx
c001e619:	5b                   	pop    ebx
c001e61a:	5e                   	pop    esi
c001e61b:	5f                   	pop    edi
c001e61c:	c3                   	ret    

c001e61d <Vm::fpu64ToInternal(unsigned long long)>:
c001e61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e621:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e625:	c3                   	ret    

c001e626 <Vm::fpuFloatToLong(unsigned long long)>:
c001e626:	57                   	push   edi
c001e627:	31 c0                	xor    eax,eax
c001e629:	56                   	push   esi
c001e62a:	31 d2                	xor    edx,edx
c001e62c:	53                   	push   ebx
c001e62d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e631:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e635:	89 d9                	mov    ecx,ebx
c001e637:	c1 e9 14             	shr    ecx,0x14
c001e63a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e640:	89 cf                	mov    edi,ecx
c001e642:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e648:	78 33                	js     c001e67d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e64a:	89 d9                	mov    ecx,ebx
c001e64c:	89 f0                	mov    eax,esi
c001e64e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e654:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e65a:	89 ca                	mov    edx,ecx
c001e65c:	b9 34 00 00 00       	mov    ecx,0x34
c001e661:	29 f9                	sub    ecx,edi
c001e663:	0f ad d0             	shrd   eax,edx,cl
c001e666:	d3 fa                	sar    edx,cl
c001e668:	f6 c1 20             	test   cl,0x20
c001e66b:	74 05                	je     c001e672 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e66d:	89 d0                	mov    eax,edx
c001e66f:	c1 fa 1f             	sar    edx,0x1f
c001e672:	85 db                	test   ebx,ebx
c001e674:	79 07                	jns    c001e67d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e676:	f7 d8                	neg    eax
c001e678:	83 d2 00             	adc    edx,0x0
c001e67b:	f7 da                	neg    edx
c001e67d:	5b                   	pop    ebx
c001e67e:	5e                   	pop    esi
c001e67f:	5f                   	pop    edi
c001e680:	c3                   	ret    

c001e681 <Vm::fpuULongToFloat(unsigned long long)>:
c001e681:	57                   	push   edi
c001e682:	31 c9                	xor    ecx,ecx
c001e684:	56                   	push   esi
c001e685:	53                   	push   ebx
c001e686:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e68a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e68e:	0f ba e7 14          	bt     edi,0x14
c001e692:	72 07                	jb     c001e69b <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e694:	01 f6                	add    esi,esi
c001e696:	11 ff                	adc    edi,edi
c001e698:	41                   	inc    ecx
c001e699:	eb f3                	jmp    c001e68e <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e69b:	89 fa                	mov    edx,edi
c001e69d:	89 f0                	mov    eax,esi
c001e69f:	bb 33 04 00 00       	mov    ebx,0x433
c001e6a4:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e6aa:	29 cb                	sub    ebx,ecx
c001e6ac:	89 d9                	mov    ecx,ebx
c001e6ae:	5b                   	pop    ebx
c001e6af:	c1 e1 14             	shl    ecx,0x14
c001e6b2:	5e                   	pop    esi
c001e6b3:	09 ca                	or     edx,ecx
c001e6b5:	5f                   	pop    edi
c001e6b6:	c3                   	ret    

c001e6b7 <Vm::fpuLongToFloat(long long)>:
c001e6b7:	56                   	push   esi
c001e6b8:	31 c0                	xor    eax,eax
c001e6ba:	53                   	push   ebx
c001e6bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6c3:	39 c8                	cmp    eax,ecx
c001e6c5:	19 d8                	sbb    eax,ebx
c001e6c7:	7d 04                	jge    c001e6cd <Vm::fpuLongToFloat(long long)+0x16>
c001e6c9:	31 f6                	xor    esi,esi
c001e6cb:	eb 0c                	jmp    c001e6d9 <Vm::fpuLongToFloat(long long)+0x22>
c001e6cd:	f7 d9                	neg    ecx
c001e6cf:	be 01 00 00 00       	mov    esi,0x1
c001e6d4:	83 d3 00             	adc    ebx,0x0
c001e6d7:	f7 db                	neg    ebx
c001e6d9:	31 c0                	xor    eax,eax
c001e6db:	0f ba e3 14          	bt     ebx,0x14
c001e6df:	72 07                	jb     c001e6e8 <Vm::fpuLongToFloat(long long)+0x31>
c001e6e1:	01 c9                	add    ecx,ecx
c001e6e3:	11 db                	adc    ebx,ebx
c001e6e5:	40                   	inc    eax
c001e6e6:	eb f3                	jmp    c001e6db <Vm::fpuLongToFloat(long long)+0x24>
c001e6e8:	ba 33 04 00 00       	mov    edx,0x433
c001e6ed:	29 c2                	sub    edx,eax
c001e6ef:	89 c8                	mov    eax,ecx
c001e6f1:	c1 e2 14             	shl    edx,0x14
c001e6f4:	89 d9                	mov    ecx,ebx
c001e6f6:	89 f3                	mov    ebx,esi
c001e6f8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e6fe:	09 ca                	or     edx,ecx
c001e700:	84 db                	test   bl,bl
c001e702:	74 06                	je     c001e70a <Vm::fpuLongToFloat(long long)+0x53>
c001e704:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e70a:	5b                   	pop    ebx
c001e70b:	5e                   	pop    esi
c001e70c:	c3                   	ret    

c001e70d <Vm::fpuGet0()>:
c001e70d:	31 c0                	xor    eax,eax
c001e70f:	31 d2                	xor    edx,edx
c001e711:	c3                   	ret    

c001e712 <Vm::fpuGet1()>:
c001e712:	b8 01 00 00 00       	mov    eax,0x1
c001e717:	31 d2                	xor    edx,edx
c001e719:	c3                   	ret    

c001e71a <Vm::fpuGetPi()>:
c001e71a:	b8 03 00 00 00       	mov    eax,0x3
c001e71f:	31 d2                	xor    edx,edx
c001e721:	c3                   	ret    

c001e722 <Vm::fpuGetLog2E()>:
c001e722:	83 ec 18             	sub    esp,0x18
c001e725:	68 18 ad 02 c0       	push   0xc002ad18
c001e72a:	e8 74 b1 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001e72f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e734:	31 d2                	xor    edx,edx
c001e736:	83 c4 1c             	add    esp,0x1c
c001e739:	c3                   	ret    

c001e73a <Vm::fpuGetLogE2()>:
c001e73a:	83 ec 18             	sub    esp,0x18
c001e73d:	68 24 ad 02 c0       	push   0xc002ad24
c001e742:	e8 5c b1 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001e747:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e74c:	31 d2                	xor    edx,edx
c001e74e:	83 c4 1c             	add    esp,0x1c
c001e751:	c3                   	ret    

c001e752 <Vm::fpuGetLog210()>:
c001e752:	83 ec 18             	sub    esp,0x18
c001e755:	68 30 ad 02 c0       	push   0xc002ad30
c001e75a:	e8 44 b1 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001e75f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e764:	31 d2                	xor    edx,edx
c001e766:	83 c4 1c             	add    esp,0x1c
c001e769:	c3                   	ret    

c001e76a <Vm::fpuGetLog102()>:
c001e76a:	83 ec 18             	sub    esp,0x18
c001e76d:	68 3d ad 02 c0       	push   0xc002ad3d
c001e772:	e8 2c b1 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001e777:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e77c:	31 d2                	xor    edx,edx
c001e77e:	83 c4 1c             	add    esp,0x1c
c001e781:	c3                   	ret    

c001e782 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e786:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e78a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e78e:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e792:	0f 92 c0             	setb   al
c001e795:	c3                   	ret    

c001e796 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e796:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79e:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e7a2:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e7a6:	09 c2                	or     edx,eax
c001e7a8:	0f 94 c0             	sete   al
c001e7ab:	c3                   	ret    

c001e7ac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e7ac:	57                   	push   edi
c001e7ad:	56                   	push   esi
c001e7ae:	53                   	push   ebx
c001e7af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e7bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e7bf:	57                   	push   edi
c001e7c0:	56                   	push   esi
c001e7c1:	53                   	push   ebx
c001e7c2:	51                   	push   ecx
c001e7c3:	e8 ce ff ff ff       	call   c001e796 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e7c8:	83 c4 10             	add    esp,0x10
c001e7cb:	88 c2                	mov    dl,al
c001e7cd:	31 c0                	xor    eax,eax
c001e7cf:	84 d2                	test   dl,dl
c001e7d1:	75 0c                	jne    c001e7df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e7d3:	57                   	push   edi
c001e7d4:	56                   	push   esi
c001e7d5:	53                   	push   ebx
c001e7d6:	51                   	push   ecx
c001e7d7:	e8 a6 ff ff ff       	call   c001e782 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e7dc:	83 c4 10             	add    esp,0x10
c001e7df:	83 e0 01             	and    eax,0x1
c001e7e2:	5b                   	pop    ebx
c001e7e3:	88 c1                	mov    cl,al
c001e7e5:	83 e2 01             	and    edx,0x1
c001e7e8:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e7ed:	c1 e2 06             	shl    edx,0x6
c001e7f0:	83 e0 ba             	and    eax,0xffffffba
c001e7f3:	5e                   	pop    esi
c001e7f4:	09 c8                	or     eax,ecx
c001e7f6:	5f                   	pop    edi
c001e7f7:	09 d0                	or     eax,edx
c001e7f9:	a2 21 df 02 c0       	mov    ds:0xc002df21,al
c001e7fe:	c3                   	ret    

c001e7ff <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e7ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e803:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e807:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e80b:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e80f:	c3                   	ret    

c001e810 <Vm::fpuAbs(unsigned long long)>:
c001e810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e814:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e818:	c3                   	ret    

c001e819 <Vm::fpuChs(unsigned long long)>:
c001e819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e81d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e821:	f7 d8                	neg    eax
c001e823:	83 d2 00             	adc    edx,0x0
c001e826:	f7 da                	neg    edx
c001e828:	c3                   	ret    

c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e829:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e82d:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e832:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e836:	eb c7                	jmp    c001e7ff <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e838 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e838:	53                   	push   ebx
c001e839:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e83d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e845:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e849:	0f af ca             	imul   ecx,edx
c001e84c:	0f af d8             	imul   ebx,eax
c001e84f:	f7 e2                	mul    edx
c001e851:	01 d9                	add    ecx,ebx
c001e853:	5b                   	pop    ebx
c001e854:	01 ca                	add    edx,ecx
c001e856:	c3                   	ret    

c001e857 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e857:	83 ec 0c             	sub    esp,0xc
c001e85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e86a:	e8 4d 6b 00 00       	call   c00253bc <__udivdi3>
c001e86f:	83 c4 1c             	add    esp,0x1c
c001e872:	c3                   	ret    

c001e873 <Vm::fpuSquare(unsigned long long)>:
c001e873:	50                   	push   eax
c001e874:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e878:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e87c:	52                   	push   edx
c001e87d:	50                   	push   eax
c001e87e:	52                   	push   edx
c001e87f:	50                   	push   eax
c001e880:	e8 b3 ff ff ff       	call   c001e838 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e885:	83 c4 14             	add    esp,0x14
c001e888:	c3                   	ret    

c001e889 <Vm::fpuGetReg(int)>:
c001e889:	83 ec 0c             	sub    esp,0xc
c001e88c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e891:	76 10                	jbe    c001e8a3 <Vm::fpuGetReg(int)+0x1a>
c001e893:	83 ec 0c             	sub    esp,0xc
c001e896:	68 4a ad 02 c0       	push   0xc002ad4a
c001e89b:	e8 03 b0 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001e8a0:	83 c4 10             	add    esp,0x10
c001e8a3:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e8a8:	b9 08 00 00 00       	mov    ecx,0x8
c001e8ad:	c0 e8 03             	shr    al,0x3
c001e8b0:	83 e0 07             	and    eax,0x7
c001e8b3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8b7:	99                   	cdq    
c001e8b8:	f7 f9                	idiv   ecx
c001e8ba:	8b 04 d5 24 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd20dc]
c001e8c1:	8b 14 d5 28 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd20d8]
c001e8c8:	83 c4 0c             	add    esp,0xc
c001e8cb:	c3                   	ret    

c001e8cc <Vm::fpuSetReg(int, unsigned long long)>:
c001e8cc:	57                   	push   edi
c001e8cd:	56                   	push   esi
c001e8ce:	52                   	push   edx
c001e8cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e8d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e8d7:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e8dc:	76 10                	jbe    c001e8ee <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e8de:	83 ec 0c             	sub    esp,0xc
c001e8e1:	68 5d ad 02 c0       	push   0xc002ad5d
c001e8e6:	e8 b8 af ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e8f3:	b9 08 00 00 00       	mov    ecx,0x8
c001e8f8:	c0 e8 03             	shr    al,0x3
c001e8fb:	83 e0 07             	and    eax,0x7
c001e8fe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e902:	99                   	cdq    
c001e903:	f7 f9                	idiv   ecx
c001e905:	89 34 d5 24 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20dc],esi
c001e90c:	89 3c d5 28 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20d8],edi
c001e913:	58                   	pop    eax
c001e914:	5e                   	pop    esi
c001e915:	5f                   	pop    edi
c001e916:	c3                   	ret    

c001e917 <Vm::fpuPush(unsigned long long)>:
c001e917:	a0 21 df 02 c0       	mov    al,ds:0xc002df21
c001e91c:	c0 e8 03             	shr    al,0x3
c001e91f:	83 e0 07             	and    eax,0x7
c001e922:	83 c0 07             	add    eax,0x7
c001e925:	88 c2                	mov    dl,al
c001e927:	83 e0 07             	and    eax,0x7
c001e92a:	83 e2 07             	and    edx,0x7
c001e92d:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e934:	8a 15 21 df 02 c0    	mov    dl,BYTE PTR ds:0xc002df21
c001e93a:	83 e2 c7             	and    edx,0xffffffc7
c001e93d:	09 ca                	or     edx,ecx
c001e93f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e943:	88 15 21 df 02 c0    	mov    BYTE PTR ds:0xc002df21,dl
c001e949:	89 0c c5 28 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20d8],ecx
c001e950:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e954:	89 14 c5 24 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20dc],edx
c001e95b:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c001e960:	83 f8 08             	cmp    eax,0x8
c001e963:	75 08                	jne    c001e96d <Vm::fpuPush(unsigned long long)+0x56>
c001e965:	80 0d 20 df 02 c0 40 	or     BYTE PTR ds:0xc002df20,0x40
c001e96c:	c3                   	ret    
c001e96d:	40                   	inc    eax
c001e96e:	a3 64 df 02 c0       	mov    ds:0xc002df64,eax
c001e973:	c3                   	ret    

c001e974 <Vm::fpuPop()>:
c001e974:	8a 0d 21 df 02 c0    	mov    cl,BYTE PTR ds:0xc002df21
c001e97a:	53                   	push   ebx
c001e97b:	c0 e9 03             	shr    cl,0x3
c001e97e:	8a 1d 21 df 02 c0    	mov    bl,BYTE PTR ds:0xc002df21
c001e984:	83 e1 07             	and    ecx,0x7
c001e987:	83 e3 c7             	and    ebx,0xffffffc7
c001e98a:	8b 04 cd 24 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd20dc]
c001e991:	8b 14 cd 28 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd20d8]
c001e998:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e99f:	83 e1 38             	and    ecx,0x38
c001e9a2:	09 d9                	or     ecx,ebx
c001e9a4:	88 0d 21 df 02 c0    	mov    BYTE PTR ds:0xc002df21,cl
c001e9aa:	8b 0d 64 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df64
c001e9b0:	85 c9                	test   ecx,ecx
c001e9b2:	74 09                	je     c001e9bd <Vm::fpuPop()+0x49>
c001e9b4:	49                   	dec    ecx
c001e9b5:	89 0d 64 df 02 c0    	mov    DWORD PTR ds:0xc002df64,ecx
c001e9bb:	eb 07                	jmp    c001e9c4 <Vm::fpuPop()+0x50>
c001e9bd:	80 0d 20 df 02 c0 40 	or     BYTE PTR ds:0xc002df20,0x40
c001e9c4:	5b                   	pop    ebx
c001e9c5:	c3                   	ret    

c001e9c6 <Vm::x87Handler(regs*)>:
c001e9c6:	55                   	push   ebp
c001e9c7:	57                   	push   edi
c001e9c8:	56                   	push   esi
c001e9c9:	53                   	push   ebx
c001e9ca:	83 ec 1c             	sub    esp,0x1c
c001e9cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9d1:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e9d6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e9d9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e9e1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e9e5:	50                   	push   eax
c001e9e6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e9ea:	50                   	push   eax
c001e9eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9ef:	50                   	push   eax
c001e9f0:	53                   	push   ebx
c001e9f1:	e8 de a6 ff ff       	call   c00190d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e9f6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	89 c6                	mov    esi,eax
c001e9fe:	80 fa d9             	cmp    dl,0xd9
c001ea01:	0f 85 52 01 00 00    	jne    c001eb59 <Vm::x87Handler(regs*)+0x193>
c001ea07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea0b:	8d 50 20             	lea    edx,[eax+0x20]
c001ea0e:	80 fa 0e             	cmp    dl,0xe
c001ea11:	0f 87 86 00 00 00    	ja     c001ea9d <Vm::x87Handler(regs*)+0xd7>
c001ea17:	0f b6 d2             	movzx  edx,dl
c001ea1a:	ff 24 95 70 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5290]
c001ea21:	e8 e7 fc ff ff       	call   c001e70d <Vm::fpuGet0()>
c001ea26:	eb 05                	jmp    c001ea2d <Vm::x87Handler(regs*)+0x67>
c001ea28:	e8 e5 fc ff ff       	call   c001e712 <Vm::fpuGet1()>
c001ea2d:	57                   	push   edi
c001ea2e:	57                   	push   edi
c001ea2f:	52                   	push   edx
c001ea30:	50                   	push   eax
c001ea31:	e8 e1 fe ff ff       	call   c001e917 <Vm::fpuPush(unsigned long long)>
c001ea36:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ea3a:	83 c4 10             	add    esp,0x10
c001ea3d:	b0 01                	mov    al,0x1
c001ea3f:	e9 e3 09 00 00       	jmp    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001ea44:	83 ec 0c             	sub    esp,0xc
c001ea47:	6a 00                	push   0x0
c001ea49:	e8 3b fe ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ea4e:	59                   	pop    ecx
c001ea4f:	5e                   	pop    esi
c001ea50:	52                   	push   edx
c001ea51:	50                   	push   eax
c001ea52:	e8 c2 fd ff ff       	call   c001e819 <Vm::fpuChs(unsigned long long)>
c001ea57:	eb 13                	jmp    c001ea6c <Vm::x87Handler(regs*)+0xa6>
c001ea59:	83 ec 0c             	sub    esp,0xc
c001ea5c:	6a 00                	push   0x0
c001ea5e:	e8 26 fe ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ea63:	5f                   	pop    edi
c001ea64:	5d                   	pop    ebp
c001ea65:	52                   	push   edx
c001ea66:	50                   	push   eax
c001ea67:	e8 a4 fd ff ff       	call   c001e810 <Vm::fpuAbs(unsigned long long)>
c001ea6c:	83 c4 0c             	add    esp,0xc
c001ea6f:	52                   	push   edx
c001ea70:	50                   	push   eax
c001ea71:	6a 00                	push   0x0
c001ea73:	e8 54 fe ff ff       	call   c001e8cc <Vm::fpuSetReg(int, unsigned long long)>
c001ea78:	eb bc                	jmp    c001ea36 <Vm::x87Handler(regs*)+0x70>
c001ea7a:	e8 d3 fc ff ff       	call   c001e752 <Vm::fpuGetLog210()>
c001ea7f:	eb ac                	jmp    c001ea2d <Vm::x87Handler(regs*)+0x67>
c001ea81:	e8 9c fc ff ff       	call   c001e722 <Vm::fpuGetLog2E()>
c001ea86:	eb a5                	jmp    c001ea2d <Vm::x87Handler(regs*)+0x67>
c001ea88:	e8 8d fc ff ff       	call   c001e71a <Vm::fpuGetPi()>
c001ea8d:	eb 9e                	jmp    c001ea2d <Vm::x87Handler(regs*)+0x67>
c001ea8f:	e8 d6 fc ff ff       	call   c001e76a <Vm::fpuGetLog102()>
c001ea94:	eb 97                	jmp    c001ea2d <Vm::x87Handler(regs*)+0x67>
c001ea96:	e8 9f fc ff ff       	call   c001e73a <Vm::fpuGetLogE2()>
c001ea9b:	eb 90                	jmp    c001ea2d <Vm::x87Handler(regs*)+0x67>
c001ea9d:	8d 50 40             	lea    edx,[eax+0x40]
c001eaa0:	80 fa 07             	cmp    dl,0x7
c001eaa3:	77 15                	ja     c001eaba <Vm::x87Handler(regs*)+0xf4>
c001eaa5:	83 ec 0c             	sub    esp,0xc
c001eaa8:	2d c0 00 00 00       	sub    eax,0xc0
c001eaad:	50                   	push   eax
c001eaae:	e8 d6 fd ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eab3:	59                   	pop    ecx
c001eab4:	5e                   	pop    esi
c001eab5:	e9 75 ff ff ff       	jmp    c001ea2f <Vm::x87Handler(regs*)+0x69>
c001eaba:	8d 50 38             	lea    edx,[eax+0x38]
c001eabd:	80 fa 07             	cmp    dl,0x7
c001eac0:	77 3c                	ja     c001eafe <Vm::x87Handler(regs*)+0x138>
c001eac2:	83 ec 0c             	sub    esp,0xc
c001eac5:	2d c8 00 00 00       	sub    eax,0xc8
c001eaca:	50                   	push   eax
c001eacb:	e8 b9 fd ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ead0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ead7:	89 c6                	mov    esi,eax
c001ead9:	89 d7                	mov    edi,edx
c001eadb:	e8 a9 fd ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eae0:	83 c4 0c             	add    esp,0xc
c001eae3:	52                   	push   edx
c001eae4:	50                   	push   eax
c001eae5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eae9:	2d c8 00 00 00       	sub    eax,0xc8
c001eaee:	50                   	push   eax
c001eaef:	e8 d8 fd ff ff       	call   c001e8cc <Vm::fpuSetReg(int, unsigned long long)>
c001eaf4:	83 c4 0c             	add    esp,0xc
c001eaf7:	57                   	push   edi
c001eaf8:	56                   	push   esi
c001eaf9:	e9 73 ff ff ff       	jmp    c001ea71 <Vm::x87Handler(regs*)+0xab>
c001eafe:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb02:	84 d2                	test   dl,dl
c001eb04:	75 0f                	jne    c001eb15 <Vm::x87Handler(regs*)+0x14f>
c001eb06:	83 ec 0c             	sub    esp,0xc
c001eb09:	ff 36                	push   DWORD PTR [esi]
c001eb0b:	e8 c8 fa ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001eb10:	e9 bf 00 00 00       	jmp    c001ebd4 <Vm::x87Handler(regs*)+0x20e>
c001eb15:	80 fa 03             	cmp    dl,0x3
c001eb18:	75 13                	jne    c001eb2d <Vm::x87Handler(regs*)+0x167>
c001eb1a:	e8 55 fe ff ff       	call   c001e974 <Vm::fpuPop()>
c001eb1f:	55                   	push   ebp
c001eb20:	55                   	push   ebp
c001eb21:	52                   	push   edx
c001eb22:	50                   	push   eax
c001eb23:	e8 4c fa ff ff       	call   c001e574 <Vm::fpuInternalTo32(unsigned long long)>
c001eb28:	e9 88 00 00 00       	jmp    c001ebb5 <Vm::x87Handler(regs*)+0x1ef>
c001eb2d:	80 fa 05             	cmp    dl,0x5
c001eb30:	75 0e                	jne    c001eb40 <Vm::x87Handler(regs*)+0x17a>
c001eb32:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eb35:	66 a3 22 df 02 c0    	mov    ds:0xc002df22,ax
c001eb3b:	e9 df 00 00 00       	jmp    c001ec1f <Vm::x87Handler(regs*)+0x259>
c001eb40:	31 c0                	xor    eax,eax
c001eb42:	80 fa 07             	cmp    dl,0x7
c001eb45:	0f 85 dc 08 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001eb4b:	66 a1 22 df 02 c0    	mov    ax,ds:0xc002df22
c001eb51:	66 89 06             	mov    WORD PTR [esi],ax
c001eb54:	e9 c6 00 00 00       	jmp    c001ec1f <Vm::x87Handler(regs*)+0x259>
c001eb59:	80 fa d8             	cmp    dl,0xd8
c001eb5c:	0f 84 c9 00 00 00    	je     c001ec2b <Vm::x87Handler(regs*)+0x265>
c001eb62:	80 fa dc             	cmp    dl,0xdc
c001eb65:	0f 84 0d 02 00 00    	je     c001ed78 <Vm::x87Handler(regs*)+0x3b2>
c001eb6b:	80 fa de             	cmp    dl,0xde
c001eb6e:	0f 84 cd 02 00 00    	je     c001ee41 <Vm::x87Handler(regs*)+0x47b>
c001eb74:	80 fa dd             	cmp    dl,0xdd
c001eb77:	0f 84 5f 04 00 00    	je     c001efdc <Vm::x87Handler(regs*)+0x616>
c001eb7d:	80 fa da             	cmp    dl,0xda
c001eb80:	0f 84 24 05 00 00    	je     c001f0aa <Vm::x87Handler(regs*)+0x6e4>
c001eb86:	80 fa df             	cmp    dl,0xdf
c001eb89:	0f 84 68 05 00 00    	je     c001f0f7 <Vm::x87Handler(regs*)+0x731>
c001eb8f:	31 c0                	xor    eax,eax
c001eb91:	80 fa db             	cmp    dl,0xdb
c001eb94:	0f 85 8d 08 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001eb9a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb9e:	80 fa 03             	cmp    dl,0x3
c001eba1:	0f 85 70 06 00 00    	jne    c001f217 <Vm::x87Handler(regs*)+0x851>
c001eba7:	e8 c8 fd ff ff       	call   c001e974 <Vm::fpuPop()>
c001ebac:	55                   	push   ebp
c001ebad:	55                   	push   ebp
c001ebae:	52                   	push   edx
c001ebaf:	50                   	push   eax
c001ebb0:	e8 71 fa ff ff       	call   c001e626 <Vm::fpuFloatToLong(unsigned long long)>
c001ebb5:	83 c4 10             	add    esp,0x10
c001ebb8:	89 06                	mov    DWORD PTR [esi],eax
c001ebba:	eb 63                	jmp    c001ec1f <Vm::x87Handler(regs*)+0x259>
c001ebbc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ebc0:	84 d2                	test   dl,dl
c001ebc2:	0f 85 e6 05 00 00    	jne    c001f1ae <Vm::x87Handler(regs*)+0x7e8>
c001ebc8:	57                   	push   edi
c001ebc9:	57                   	push   edi
c001ebca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebcd:	ff 36                	push   DWORD PTR [esi]
c001ebcf:	e8 49 fa ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001ebd4:	5e                   	pop    esi
c001ebd5:	5f                   	pop    edi
c001ebd6:	52                   	push   edx
c001ebd7:	50                   	push   eax
c001ebd8:	e8 3a fd ff ff       	call   c001e917 <Vm::fpuPush(unsigned long long)>
c001ebdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebe1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ebe4:	e9 51 fe ff ff       	jmp    c001ea3a <Vm::x87Handler(regs*)+0x74>
c001ebe9:	80 fa 03             	cmp    dl,0x3
c001ebec:	0f 85 d7 06 00 00    	jne    c001f2c9 <Vm::x87Handler(regs*)+0x903>
c001ebf2:	57                   	push   edi
c001ebf3:	57                   	push   edi
c001ebf4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebf7:	ff 36                	push   DWORD PTR [esi]
c001ebf9:	e8 1f fa ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001ebfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec05:	89 c6                	mov    esi,eax
c001ec07:	89 d7                	mov    edi,edx
c001ec09:	e8 7b fc ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ec0e:	57                   	push   edi
c001ec0f:	56                   	push   esi
c001ec10:	52                   	push   edx
c001ec11:	50                   	push   eax
c001ec12:	e8 95 fb ff ff       	call   c001e7ac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ec17:	83 c4 20             	add    esp,0x20
c001ec1a:	e8 55 fd ff ff       	call   c001e974 <Vm::fpuPop()>
c001ec1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec23:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec26:	e9 12 fe ff ff       	jmp    c001ea3d <Vm::x87Handler(regs*)+0x77>
c001ec2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec2f:	8d 50 40             	lea    edx,[eax+0x40]
c001ec32:	80 fa 07             	cmp    dl,0x7
c001ec35:	77 29                	ja     c001ec60 <Vm::x87Handler(regs*)+0x29a>
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	2d c0 00 00 00       	sub    eax,0xc0
c001ec3f:	50                   	push   eax
c001ec40:	e8 44 fc ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ec45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec4c:	89 c6                	mov    esi,eax
c001ec4e:	89 d7                	mov    edi,edx
c001ec50:	e8 34 fc ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ec55:	57                   	push   edi
c001ec56:	56                   	push   esi
c001ec57:	52                   	push   edx
c001ec58:	50                   	push   eax
c001ec59:	e8 a1 fb ff ff       	call   c001e7ff <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ec5e:	eb 2f                	jmp    c001ec8f <Vm::x87Handler(regs*)+0x2c9>
c001ec60:	8d 50 38             	lea    edx,[eax+0x38]
c001ec63:	80 fa 07             	cmp    dl,0x7
c001ec66:	77 2f                	ja     c001ec97 <Vm::x87Handler(regs*)+0x2d1>
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	2d c8 00 00 00       	sub    eax,0xc8
c001ec70:	50                   	push   eax
c001ec71:	e8 13 fc ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ec76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec7d:	89 c6                	mov    esi,eax
c001ec7f:	89 d7                	mov    edi,edx
c001ec81:	e8 03 fc ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ec86:	57                   	push   edi
c001ec87:	56                   	push   esi
c001ec88:	52                   	push   edx
c001ec89:	50                   	push   eax
c001ec8a:	e8 a9 fb ff ff       	call   c001e838 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ec8f:	83 c4 1c             	add    esp,0x1c
c001ec92:	e9 d8 fd ff ff       	jmp    c001ea6f <Vm::x87Handler(regs*)+0xa9>
c001ec97:	8d 50 30             	lea    edx,[eax+0x30]
c001ec9a:	80 fa 07             	cmp    dl,0x7
c001ec9d:	77 0d                	ja     c001ecac <Vm::x87Handler(regs*)+0x2e6>
c001ec9f:	83 ec 0c             	sub    esp,0xc
c001eca2:	2d d0 00 00 00       	sub    eax,0xd0
c001eca7:	e9 99 03 00 00       	jmp    c001f045 <Vm::x87Handler(regs*)+0x67f>
c001ecac:	8d 50 28             	lea    edx,[eax+0x28]
c001ecaf:	80 fa 07             	cmp    dl,0x7
c001ecb2:	77 0d                	ja     c001ecc1 <Vm::x87Handler(regs*)+0x2fb>
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	2d d8 00 00 00       	sub    eax,0xd8
c001ecbc:	e9 c0 03 00 00       	jmp    c001f081 <Vm::x87Handler(regs*)+0x6bb>
c001ecc1:	8d 50 20             	lea    edx,[eax+0x20]
c001ecc4:	80 fa 07             	cmp    dl,0x7
c001ecc7:	77 1b                	ja     c001ece4 <Vm::x87Handler(regs*)+0x31e>
c001ecc9:	83 ec 0c             	sub    esp,0xc
c001eccc:	2d e0 00 00 00       	sub    eax,0xe0
c001ecd1:	50                   	push   eax
c001ecd2:	e8 b2 fb ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ecd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecde:	89 c6                	mov    esi,eax
c001ece0:	89 d7                	mov    edi,edx
c001ece2:	eb 22                	jmp    c001ed06 <Vm::x87Handler(regs*)+0x340>
c001ece4:	8d 50 18             	lea    edx,[eax+0x18]
c001ece7:	80 fa 07             	cmp    dl,0x7
c001ecea:	77 2d                	ja     c001ed19 <Vm::x87Handler(regs*)+0x353>
c001ecec:	83 ec 0c             	sub    esp,0xc
c001ecef:	6a 00                	push   0x0
c001ecf1:	e8 93 fb ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ecf6:	89 c6                	mov    esi,eax
c001ecf8:	89 d7                	mov    edi,edx
c001ecfa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecfe:	2d e8 00 00 00       	sub    eax,0xe8
c001ed03:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed06:	e8 7e fb ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ed0b:	57                   	push   edi
c001ed0c:	56                   	push   esi
c001ed0d:	52                   	push   edx
c001ed0e:	50                   	push   eax
c001ed0f:	e8 15 fb ff ff       	call   c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed14:	e9 76 ff ff ff       	jmp    c001ec8f <Vm::x87Handler(regs*)+0x2c9>
c001ed19:	8d 50 10             	lea    edx,[eax+0x10]
c001ed1c:	80 fa 07             	cmp    dl,0x7
c001ed1f:	77 1b                	ja     c001ed3c <Vm::x87Handler(regs*)+0x376>
c001ed21:	83 ec 0c             	sub    esp,0xc
c001ed24:	2d f0 00 00 00       	sub    eax,0xf0
c001ed29:	50                   	push   eax
c001ed2a:	e8 5a fb ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ed2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed36:	89 c6                	mov    esi,eax
c001ed38:	89 d7                	mov    edi,edx
c001ed3a:	eb 22                	jmp    c001ed5e <Vm::x87Handler(regs*)+0x398>
c001ed3c:	3c f7                	cmp    al,0xf7
c001ed3e:	0f 86 d1 03 00 00    	jbe    c001f115 <Vm::x87Handler(regs*)+0x74f>
c001ed44:	83 ec 0c             	sub    esp,0xc
c001ed47:	6a 00                	push   0x0
c001ed49:	e8 3b fb ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ed4e:	89 c6                	mov    esi,eax
c001ed50:	89 d7                	mov    edi,edx
c001ed52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed56:	2d f8 00 00 00       	sub    eax,0xf8
c001ed5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed5e:	e8 26 fb ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ed63:	57                   	push   edi
c001ed64:	56                   	push   esi
c001ed65:	52                   	push   edx
c001ed66:	50                   	push   eax
c001ed67:	e8 eb fa ff ff       	call   c001e857 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ed6c:	83 c4 1c             	add    esp,0x1c
c001ed6f:	52                   	push   edx
c001ed70:	50                   	push   eax
c001ed71:	6a 00                	push   0x0
c001ed73:	e9 51 02 00 00       	jmp    c001efc9 <Vm::x87Handler(regs*)+0x603>
c001ed78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed7c:	8d 50 40             	lea    edx,[eax+0x40]
c001ed7f:	80 fa 07             	cmp    dl,0x7
c001ed82:	77 37                	ja     c001edbb <Vm::x87Handler(regs*)+0x3f5>
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	2d c0 00 00 00       	sub    eax,0xc0
c001ed8c:	50                   	push   eax
c001ed8d:	e8 f7 fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ed92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed99:	89 c6                	mov    esi,eax
c001ed9b:	89 d7                	mov    edi,edx
c001ed9d:	e8 e7 fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eda2:	57                   	push   edi
c001eda3:	56                   	push   esi
c001eda4:	52                   	push   edx
c001eda5:	50                   	push   eax
c001eda6:	e8 54 fa ff ff       	call   c001e7ff <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001edab:	83 c4 1c             	add    esp,0x1c
c001edae:	52                   	push   edx
c001edaf:	50                   	push   eax
c001edb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edb4:	2d c0 00 00 00       	sub    eax,0xc0
c001edb9:	eb 3d                	jmp    c001edf8 <Vm::x87Handler(regs*)+0x432>
c001edbb:	8d 50 38             	lea    edx,[eax+0x38]
c001edbe:	80 fa 07             	cmp    dl,0x7
c001edc1:	77 3b                	ja     c001edfe <Vm::x87Handler(regs*)+0x438>
c001edc3:	83 ec 0c             	sub    esp,0xc
c001edc6:	2d c8 00 00 00       	sub    eax,0xc8
c001edcb:	50                   	push   eax
c001edcc:	e8 b8 fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001edd1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edd8:	89 c6                	mov    esi,eax
c001edda:	89 d7                	mov    edi,edx
c001eddc:	e8 a8 fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ede1:	57                   	push   edi
c001ede2:	56                   	push   esi
c001ede3:	52                   	push   edx
c001ede4:	50                   	push   eax
c001ede5:	e8 4e fa ff ff       	call   c001e838 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001edea:	83 c4 1c             	add    esp,0x1c
c001eded:	52                   	push   edx
c001edee:	50                   	push   eax
c001edef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edf3:	2d c8 00 00 00       	sub    eax,0xc8
c001edf8:	50                   	push   eax
c001edf9:	e9 75 fc ff ff       	jmp    c001ea73 <Vm::x87Handler(regs*)+0xad>
c001edfe:	83 c0 18             	add    eax,0x18
c001ee01:	3c 07                	cmp    al,0x7
c001ee03:	0f 87 3b 04 00 00    	ja     c001f244 <Vm::x87Handler(regs*)+0x87e>
c001ee09:	83 ec 0c             	sub    esp,0xc
c001ee0c:	6a 00                	push   0x0
c001ee0e:	e8 76 fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ee13:	89 c6                	mov    esi,eax
c001ee15:	89 d7                	mov    edi,edx
c001ee17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee1b:	2d e8 00 00 00       	sub    eax,0xe8
c001ee20:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee23:	e8 61 fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ee28:	57                   	push   edi
c001ee29:	56                   	push   esi
c001ee2a:	52                   	push   edx
c001ee2b:	50                   	push   eax
c001ee2c:	e8 f8 f9 ff ff       	call   c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee31:	83 c4 1c             	add    esp,0x1c
c001ee34:	52                   	push   edx
c001ee35:	50                   	push   eax
c001ee36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee3a:	2d e8 00 00 00       	sub    eax,0xe8
c001ee3f:	eb b7                	jmp    c001edf8 <Vm::x87Handler(regs*)+0x432>
c001ee41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee45:	8d 50 40             	lea    edx,[eax+0x40]
c001ee48:	80 fa 07             	cmp    dl,0x7
c001ee4b:	77 3a                	ja     c001ee87 <Vm::x87Handler(regs*)+0x4c1>
c001ee4d:	83 ec 0c             	sub    esp,0xc
c001ee50:	2d c0 00 00 00       	sub    eax,0xc0
c001ee55:	50                   	push   eax
c001ee56:	e8 2e fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ee5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee62:	89 c6                	mov    esi,eax
c001ee64:	89 d7                	mov    edi,edx
c001ee66:	e8 1e fa ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ee6b:	57                   	push   edi
c001ee6c:	56                   	push   esi
c001ee6d:	52                   	push   edx
c001ee6e:	50                   	push   eax
c001ee6f:	e8 8b f9 ff ff       	call   c001e7ff <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee74:	83 c4 1c             	add    esp,0x1c
c001ee77:	52                   	push   edx
c001ee78:	50                   	push   eax
c001ee79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee7d:	2d c0 00 00 00       	sub    eax,0xc0
c001ee82:	e9 9e 01 00 00       	jmp    c001f025 <Vm::x87Handler(regs*)+0x65f>
c001ee87:	8d 50 20             	lea    edx,[eax+0x20]
c001ee8a:	80 fa 07             	cmp    dl,0x7
c001ee8d:	77 3a                	ja     c001eec9 <Vm::x87Handler(regs*)+0x503>
c001ee8f:	83 ec 0c             	sub    esp,0xc
c001ee92:	2d e0 00 00 00       	sub    eax,0xe0
c001ee97:	50                   	push   eax
c001ee98:	e8 ec f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ee9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eea4:	89 c6                	mov    esi,eax
c001eea6:	89 d7                	mov    edi,edx
c001eea8:	e8 dc f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eead:	57                   	push   edi
c001eeae:	56                   	push   esi
c001eeaf:	52                   	push   edx
c001eeb0:	50                   	push   eax
c001eeb1:	e8 73 f9 ff ff       	call   c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eeb6:	83 c4 1c             	add    esp,0x1c
c001eeb9:	52                   	push   edx
c001eeba:	50                   	push   eax
c001eebb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eebf:	2d e0 00 00 00       	sub    eax,0xe0
c001eec4:	e9 5c 01 00 00       	jmp    c001f025 <Vm::x87Handler(regs*)+0x65f>
c001eec9:	8d 50 18             	lea    edx,[eax+0x18]
c001eecc:	80 fa 07             	cmp    dl,0x7
c001eecf:	77 3b                	ja     c001ef0c <Vm::x87Handler(regs*)+0x546>
c001eed1:	83 ec 0c             	sub    esp,0xc
c001eed4:	6a 00                	push   0x0
c001eed6:	e8 ae f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eedb:	89 c6                	mov    esi,eax
c001eedd:	89 d7                	mov    edi,edx
c001eedf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee3:	2d e8 00 00 00       	sub    eax,0xe8
c001eee8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeeb:	e8 99 f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eef0:	57                   	push   edi
c001eef1:	56                   	push   esi
c001eef2:	52                   	push   edx
c001eef3:	50                   	push   eax
c001eef4:	e8 30 f9 ff ff       	call   c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eef9:	83 c4 1c             	add    esp,0x1c
c001eefc:	52                   	push   edx
c001eefd:	50                   	push   eax
c001eefe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef02:	2d e8 00 00 00       	sub    eax,0xe8
c001ef07:	e9 19 01 00 00       	jmp    c001f025 <Vm::x87Handler(regs*)+0x65f>
c001ef0c:	8d 50 38             	lea    edx,[eax+0x38]
c001ef0f:	80 fa 07             	cmp    dl,0x7
c001ef12:	77 37                	ja     c001ef4b <Vm::x87Handler(regs*)+0x585>
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	2d c8 00 00 00       	sub    eax,0xc8
c001ef1c:	50                   	push   eax
c001ef1d:	e8 67 f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ef22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef29:	89 c6                	mov    esi,eax
c001ef2b:	89 d7                	mov    edi,edx
c001ef2d:	e8 57 f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ef32:	57                   	push   edi
c001ef33:	56                   	push   esi
c001ef34:	52                   	push   edx
c001ef35:	50                   	push   eax
c001ef36:	e8 fd f8 ff ff       	call   c001e838 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef3b:	83 c4 1c             	add    esp,0x1c
c001ef3e:	52                   	push   edx
c001ef3f:	50                   	push   eax
c001ef40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef44:	2d c8 00 00 00       	sub    eax,0xc8
c001ef49:	eb 7d                	jmp    c001efc8 <Vm::x87Handler(regs*)+0x602>
c001ef4b:	3c f7                	cmp    al,0xf7
c001ef4d:	76 38                	jbe    c001ef87 <Vm::x87Handler(regs*)+0x5c1>
c001ef4f:	83 ec 0c             	sub    esp,0xc
c001ef52:	6a 00                	push   0x0
c001ef54:	e8 30 f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ef59:	89 c6                	mov    esi,eax
c001ef5b:	89 d7                	mov    edi,edx
c001ef5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef61:	2d f8 00 00 00       	sub    eax,0xf8
c001ef66:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef69:	e8 1b f9 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001ef6e:	57                   	push   edi
c001ef6f:	56                   	push   esi
c001ef70:	52                   	push   edx
c001ef71:	50                   	push   eax
c001ef72:	e8 e0 f8 ff ff       	call   c001e857 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef77:	83 c4 1c             	add    esp,0x1c
c001ef7a:	52                   	push   edx
c001ef7b:	50                   	push   eax
c001ef7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef80:	2d f8 00 00 00       	sub    eax,0xf8
c001ef85:	eb 41                	jmp    c001efc8 <Vm::x87Handler(regs*)+0x602>
c001ef87:	8d 50 10             	lea    edx,[eax+0x10]
c001ef8a:	80 fa 07             	cmp    dl,0x7
c001ef8d:	0f 87 5a 01 00 00    	ja     c001f0ed <Vm::x87Handler(regs*)+0x727>
c001ef93:	83 ec 0c             	sub    esp,0xc
c001ef96:	2d f0 00 00 00       	sub    eax,0xf0
c001ef9b:	50                   	push   eax
c001ef9c:	e8 e8 f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001efa1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efa8:	89 c6                	mov    esi,eax
c001efaa:	89 d7                	mov    edi,edx
c001efac:	e8 d8 f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001efb1:	57                   	push   edi
c001efb2:	56                   	push   esi
c001efb3:	52                   	push   edx
c001efb4:	50                   	push   eax
c001efb5:	e8 9d f8 ff ff       	call   c001e857 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efba:	83 c4 1c             	add    esp,0x1c
c001efbd:	52                   	push   edx
c001efbe:	50                   	push   eax
c001efbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efc3:	2d f0 00 00 00       	sub    eax,0xf0
c001efc8:	50                   	push   eax
c001efc9:	e8 fe f8 ff ff       	call   c001e8cc <Vm::fpuSetReg(int, unsigned long long)>
c001efce:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efd2:	e8 9d f9 ff ff       	call   c001e974 <Vm::fpuPop()>
c001efd7:	e9 5e fa ff ff       	jmp    c001ea3a <Vm::x87Handler(regs*)+0x74>
c001efdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efe0:	8d 50 30             	lea    edx,[eax+0x30]
c001efe3:	80 fa 07             	cmp    dl,0x7
c001efe6:	77 1d                	ja     c001f005 <Vm::x87Handler(regs*)+0x63f>
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	6a 00                	push   0x0
c001efed:	e8 97 f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001eff2:	83 c4 0c             	add    esp,0xc
c001eff5:	52                   	push   edx
c001eff6:	50                   	push   eax
c001eff7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001effb:	2d d0 00 00 00       	sub    eax,0xd0
c001f000:	e9 f3 fd ff ff       	jmp    c001edf8 <Vm::x87Handler(regs*)+0x432>
c001f005:	8d 50 28             	lea    edx,[eax+0x28]
c001f008:	80 fa 07             	cmp    dl,0x7
c001f00b:	77 28                	ja     c001f035 <Vm::x87Handler(regs*)+0x66f>
c001f00d:	83 ec 0c             	sub    esp,0xc
c001f010:	6a 00                	push   0x0
c001f012:	e8 72 f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f017:	83 c4 0c             	add    esp,0xc
c001f01a:	52                   	push   edx
c001f01b:	50                   	push   eax
c001f01c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f020:	2d d8 00 00 00       	sub    eax,0xd8
c001f025:	50                   	push   eax
c001f026:	e8 a1 f8 ff ff       	call   c001e8cc <Vm::fpuSetReg(int, unsigned long long)>
c001f02b:	e8 44 f9 ff ff       	call   c001e974 <Vm::fpuPop()>
c001f030:	e9 01 fa ff ff       	jmp    c001ea36 <Vm::x87Handler(regs*)+0x70>
c001f035:	8d 50 20             	lea    edx,[eax+0x20]
c001f038:	80 fa 07             	cmp    dl,0x7
c001f03b:	77 30                	ja     c001f06d <Vm::x87Handler(regs*)+0x6a7>
c001f03d:	83 ec 0c             	sub    esp,0xc
c001f040:	2d e0 00 00 00       	sub    eax,0xe0
c001f045:	50                   	push   eax
c001f046:	e8 3e f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f04b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f052:	89 c6                	mov    esi,eax
c001f054:	89 d7                	mov    edi,edx
c001f056:	e8 2e f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f05b:	57                   	push   edi
c001f05c:	56                   	push   esi
c001f05d:	52                   	push   edx
c001f05e:	50                   	push   eax
c001f05f:	e8 48 f7 ff ff       	call   c001e7ac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f064:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f068:	e9 54 02 00 00       	jmp    c001f2c1 <Vm::x87Handler(regs*)+0x8fb>
c001f06d:	8d 50 18             	lea    edx,[eax+0x18]
c001f070:	80 fa 07             	cmp    dl,0x7
c001f073:	0f 87 43 fb ff ff    	ja     c001ebbc <Vm::x87Handler(regs*)+0x1f6>
c001f079:	83 ec 0c             	sub    esp,0xc
c001f07c:	2d e8 00 00 00       	sub    eax,0xe8
c001f081:	50                   	push   eax
c001f082:	e8 02 f8 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f087:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f08e:	89 c6                	mov    esi,eax
c001f090:	89 d7                	mov    edi,edx
c001f092:	e8 f2 f7 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f097:	57                   	push   edi
c001f098:	56                   	push   esi
c001f099:	52                   	push   edx
c001f09a:	50                   	push   eax
c001f09b:	e8 0c f7 ff ff       	call   c001e7ac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0a0:	83 c4 20             	add    esp,0x20
c001f0a3:	e8 cc f8 ff ff       	call   c001e974 <Vm::fpuPop()>
c001f0a8:	eb 62                	jmp    c001f10c <Vm::x87Handler(regs*)+0x746>
c001f0aa:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f0ae:	0f 85 0f 01 00 00    	jne    c001f1c3 <Vm::x87Handler(regs*)+0x7fd>
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	6a 01                	push   0x1
c001f0b9:	e8 cb f7 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f0be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0c5:	89 c6                	mov    esi,eax
c001f0c7:	89 d7                	mov    edi,edx
c001f0c9:	e8 bb f7 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f0ce:	57                   	push   edi
c001f0cf:	56                   	push   esi
c001f0d0:	52                   	push   edx
c001f0d1:	50                   	push   eax
c001f0d2:	e8 d5 f6 ff ff       	call   c001e7ac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0d7:	83 c4 20             	add    esp,0x20
c001f0da:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0de:	e8 91 f8 ff ff       	call   c001e974 <Vm::fpuPop()>
c001f0e3:	e8 8c f8 ff ff       	call   c001e974 <Vm::fpuPop()>
c001f0e8:	e9 50 f9 ff ff       	jmp    c001ea3d <Vm::x87Handler(regs*)+0x77>
c001f0ed:	3c d9                	cmp    al,0xd9
c001f0ef:	0f 85 b5 02 00 00    	jne    c001f3aa <Vm::x87Handler(regs*)+0x9e4>
c001f0f5:	eb bd                	jmp    c001f0b4 <Vm::x87Handler(regs*)+0x6ee>
c001f0f7:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f0fb:	0f 85 ea 02 00 00    	jne    c001f3eb <Vm::x87Handler(regs*)+0xa25>
c001f101:	0f b7 05 20 df 02 c0 	movzx  eax,WORD PTR ds:0xc002df20
c001f108:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f10c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f110:	e9 28 f9 ff ff       	jmp    c001ea3d <Vm::x87Handler(regs*)+0x77>
c001f115:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f119:	84 d2                	test   dl,dl
c001f11b:	75 0f                	jne    c001f12c <Vm::x87Handler(regs*)+0x766>
c001f11d:	83 ec 0c             	sub    esp,0xc
c001f120:	ff 36                	push   DWORD PTR [esi]
c001f122:	e8 b1 f4 ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001f127:	e9 2c 01 00 00       	jmp    c001f258 <Vm::x87Handler(regs*)+0x892>
c001f12c:	80 fa 01             	cmp    dl,0x1
c001f12f:	75 0f                	jne    c001f140 <Vm::x87Handler(regs*)+0x77a>
c001f131:	83 ec 0c             	sub    esp,0xc
c001f134:	ff 36                	push   DWORD PTR [esi]
c001f136:	e8 9d f4 ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001f13b:	e9 81 02 00 00       	jmp    c001f3c1 <Vm::x87Handler(regs*)+0x9fb>
c001f140:	80 fa 04             	cmp    dl,0x4
c001f143:	75 0f                	jne    c001f154 <Vm::x87Handler(regs*)+0x78e>
c001f145:	83 ec 0c             	sub    esp,0xc
c001f148:	ff 36                	push   DWORD PTR [esi]
c001f14a:	e8 89 f4 ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001f14f:	e9 86 01 00 00       	jmp    c001f2da <Vm::x87Handler(regs*)+0x914>
c001f154:	80 fa 05             	cmp    dl,0x5
c001f157:	75 1b                	jne    c001f174 <Vm::x87Handler(regs*)+0x7ae>
c001f159:	83 ec 0c             	sub    esp,0xc
c001f15c:	6a 00                	push   0x0
c001f15e:	e8 26 f7 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f163:	89 c7                	mov    edi,eax
c001f165:	89 d5                	mov    ebp,edx
c001f167:	58                   	pop    eax
c001f168:	ff 36                	push   DWORD PTR [esi]
c001f16a:	e8 69 f4 ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001f16f:	e9 a3 01 00 00       	jmp    c001f317 <Vm::x87Handler(regs*)+0x951>
c001f174:	80 fa 06             	cmp    dl,0x6
c001f177:	75 0f                	jne    c001f188 <Vm::x87Handler(regs*)+0x7c2>
c001f179:	83 ec 0c             	sub    esp,0xc
c001f17c:	ff 36                	push   DWORD PTR [esi]
c001f17e:	e8 55 f4 ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001f183:	e9 ae 01 00 00       	jmp    c001f336 <Vm::x87Handler(regs*)+0x970>
c001f188:	31 c0                	xor    eax,eax
c001f18a:	80 fa 07             	cmp    dl,0x7
c001f18d:	0f 85 94 02 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f193:	83 ec 0c             	sub    esp,0xc
c001f196:	6a 00                	push   0x0
c001f198:	e8 ec f6 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f19d:	89 c7                	mov    edi,eax
c001f19f:	89 d5                	mov    ebp,edx
c001f1a1:	58                   	pop    eax
c001f1a2:	ff 36                	push   DWORD PTR [esi]
c001f1a4:	e8 2f f4 ff ff       	call   c001e5d8 <Vm::fpu32ToInternal(unsigned int)>
c001f1a9:	e9 cb 01 00 00       	jmp    c001f379 <Vm::x87Handler(regs*)+0x9b3>
c001f1ae:	80 fa 03             	cmp    dl,0x3
c001f1b1:	0f 85 d3 01 00 00    	jne    c001f38a <Vm::x87Handler(regs*)+0x9c4>
c001f1b7:	e8 b8 f7 ff ff       	call   c001e974 <Vm::fpuPop()>
c001f1bc:	51                   	push   ecx
c001f1bd:	51                   	push   ecx
c001f1be:	e9 de 01 00 00       	jmp    c001f3a1 <Vm::x87Handler(regs*)+0x9db>
c001f1c3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1c7:	80 fa 01             	cmp    dl,0x1
c001f1ca:	75 09                	jne    c001f1d5 <Vm::x87Handler(regs*)+0x80f>
c001f1cc:	57                   	push   edi
c001f1cd:	57                   	push   edi
c001f1ce:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1d0:	e9 e3 01 00 00       	jmp    c001f3b8 <Vm::x87Handler(regs*)+0x9f2>
c001f1d5:	80 fa 04             	cmp    dl,0x4
c001f1d8:	75 12                	jne    c001f1ec <Vm::x87Handler(regs*)+0x826>
c001f1da:	31 d2                	xor    edx,edx
c001f1dc:	51                   	push   ecx
c001f1dd:	51                   	push   ecx
c001f1de:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1e0:	52                   	push   edx
c001f1e1:	50                   	push   eax
c001f1e2:	e8 d0 f4 ff ff       	call   c001e6b7 <Vm::fpuLongToFloat(long long)>
c001f1e7:	e9 ee 00 00 00       	jmp    c001f2da <Vm::x87Handler(regs*)+0x914>
c001f1ec:	31 c0                	xor    eax,eax
c001f1ee:	80 fa 07             	cmp    dl,0x7
c001f1f1:	0f 85 30 02 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f1f7:	83 ec 0c             	sub    esp,0xc
c001f1fa:	6a 00                	push   0x0
c001f1fc:	e8 88 f6 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f201:	89 c7                	mov    edi,eax
c001f203:	89 d5                	mov    ebp,edx
c001f205:	58                   	pop    eax
c001f206:	8b 06                	mov    eax,DWORD PTR [esi]
c001f208:	5a                   	pop    edx
c001f209:	31 d2                	xor    edx,edx
c001f20b:	52                   	push   edx
c001f20c:	50                   	push   eax
c001f20d:	e8 a5 f4 ff ff       	call   c001e6b7 <Vm::fpuLongToFloat(long long)>
c001f212:	e9 62 01 00 00       	jmp    c001f379 <Vm::x87Handler(regs*)+0x9b3>
c001f217:	84 d2                	test   dl,dl
c001f219:	75 0d                	jne    c001f228 <Vm::x87Handler(regs*)+0x862>
c001f21b:	31 d2                	xor    edx,edx
c001f21d:	55                   	push   ebp
c001f21e:	55                   	push   ebp
c001f21f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f221:	52                   	push   edx
c001f222:	50                   	push   eax
c001f223:	e9 d3 01 00 00       	jmp    c001f3fb <Vm::x87Handler(regs*)+0xa35>
c001f228:	31 c0                	xor    eax,eax
c001f22a:	80 fa 02             	cmp    dl,0x2
c001f22d:	0f 85 f4 01 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f233:	83 ec 0c             	sub    esp,0xc
c001f236:	6a 00                	push   0x0
c001f238:	e8 4c f6 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f23d:	59                   	pop    ecx
c001f23e:	5f                   	pop    edi
c001f23f:	e9 6a f9 ff ff       	jmp    c001ebae <Vm::x87Handler(regs*)+0x1e8>
c001f244:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f248:	84 d2                	test   dl,dl
c001f24a:	75 2a                	jne    c001f276 <Vm::x87Handler(regs*)+0x8b0>
c001f24c:	50                   	push   eax
c001f24d:	50                   	push   eax
c001f24e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f251:	ff 36                	push   DWORD PTR [esi]
c001f253:	e8 c5 f3 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f258:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f25f:	89 c6                	mov    esi,eax
c001f261:	89 d7                	mov    edi,edx
c001f263:	e8 21 f6 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f268:	57                   	push   edi
c001f269:	56                   	push   esi
c001f26a:	52                   	push   edx
c001f26b:	50                   	push   eax
c001f26c:	e8 8e f5 ff ff       	call   c001e7ff <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f271:	e9 64 01 00 00       	jmp    c001f3da <Vm::x87Handler(regs*)+0xa14>
c001f276:	80 fa 01             	cmp    dl,0x1
c001f279:	75 11                	jne    c001f28c <Vm::x87Handler(regs*)+0x8c6>
c001f27b:	50                   	push   eax
c001f27c:	50                   	push   eax
c001f27d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f280:	ff 36                	push   DWORD PTR [esi]
c001f282:	e8 96 f3 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f287:	e9 35 01 00 00       	jmp    c001f3c1 <Vm::x87Handler(regs*)+0x9fb>
c001f28c:	80 fa 02             	cmp    dl,0x2
c001f28f:	0f 85 54 f9 ff ff    	jne    c001ebe9 <Vm::x87Handler(regs*)+0x223>
c001f295:	55                   	push   ebp
c001f296:	55                   	push   ebp
c001f297:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f29a:	ff 36                	push   DWORD PTR [esi]
c001f29c:	e8 7c f3 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f2a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2a8:	89 c6                	mov    esi,eax
c001f2aa:	89 d7                	mov    edi,edx
c001f2ac:	e8 d8 f5 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f2b1:	57                   	push   edi
c001f2b2:	56                   	push   esi
c001f2b3:	52                   	push   edx
c001f2b4:	50                   	push   eax
c001f2b5:	e8 f2 f4 ff ff       	call   c001e7ac <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f2be:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f2c1:	83 c4 20             	add    esp,0x20
c001f2c4:	e9 74 f7 ff ff       	jmp    c001ea3d <Vm::x87Handler(regs*)+0x77>
c001f2c9:	80 fa 04             	cmp    dl,0x4
c001f2cc:	75 2a                	jne    c001f2f8 <Vm::x87Handler(regs*)+0x932>
c001f2ce:	51                   	push   ecx
c001f2cf:	51                   	push   ecx
c001f2d0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2d3:	ff 36                	push   DWORD PTR [esi]
c001f2d5:	e8 43 f3 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f2da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2e1:	89 c6                	mov    esi,eax
c001f2e3:	89 d7                	mov    edi,edx
c001f2e5:	e8 9f f5 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f2ea:	57                   	push   edi
c001f2eb:	56                   	push   esi
c001f2ec:	52                   	push   edx
c001f2ed:	50                   	push   eax
c001f2ee:	e8 36 f5 ff ff       	call   c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2f3:	e9 e2 00 00 00       	jmp    c001f3da <Vm::x87Handler(regs*)+0xa14>
c001f2f8:	80 fa 05             	cmp    dl,0x5
c001f2fb:	75 28                	jne    c001f325 <Vm::x87Handler(regs*)+0x95f>
c001f2fd:	83 ec 0c             	sub    esp,0xc
c001f300:	6a 00                	push   0x0
c001f302:	e8 82 f5 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f307:	89 c7                	mov    edi,eax
c001f309:	89 d5                	mov    ebp,edx
c001f30b:	58                   	pop    eax
c001f30c:	5a                   	pop    edx
c001f30d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f310:	ff 36                	push   DWORD PTR [esi]
c001f312:	e8 06 f3 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f317:	83 c4 10             	add    esp,0x10
c001f31a:	55                   	push   ebp
c001f31b:	57                   	push   edi
c001f31c:	52                   	push   edx
c001f31d:	50                   	push   eax
c001f31e:	e8 06 f5 ff ff       	call   c001e829 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f323:	eb 60                	jmp    c001f385 <Vm::x87Handler(regs*)+0x9bf>
c001f325:	80 fa 06             	cmp    dl,0x6
c001f328:	75 2a                	jne    c001f354 <Vm::x87Handler(regs*)+0x98e>
c001f32a:	51                   	push   ecx
c001f32b:	51                   	push   ecx
c001f32c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f32f:	ff 36                	push   DWORD PTR [esi]
c001f331:	e8 e7 f2 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f336:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f33d:	89 c6                	mov    esi,eax
c001f33f:	89 d7                	mov    edi,edx
c001f341:	e8 43 f5 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f346:	57                   	push   edi
c001f347:	56                   	push   esi
c001f348:	52                   	push   edx
c001f349:	50                   	push   eax
c001f34a:	e8 08 f5 ff ff       	call   c001e857 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f34f:	e9 86 00 00 00       	jmp    c001f3da <Vm::x87Handler(regs*)+0xa14>
c001f354:	31 c0                	xor    eax,eax
c001f356:	80 fa 07             	cmp    dl,0x7
c001f359:	0f 85 c8 00 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f35f:	83 ec 0c             	sub    esp,0xc
c001f362:	6a 00                	push   0x0
c001f364:	e8 20 f5 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f369:	89 c7                	mov    edi,eax
c001f36b:	89 d5                	mov    ebp,edx
c001f36d:	58                   	pop    eax
c001f36e:	5a                   	pop    edx
c001f36f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f372:	ff 36                	push   DWORD PTR [esi]
c001f374:	e8 a4 f2 ff ff       	call   c001e61d <Vm::fpu64ToInternal(unsigned long long)>
c001f379:	83 c4 10             	add    esp,0x10
c001f37c:	55                   	push   ebp
c001f37d:	57                   	push   edi
c001f37e:	52                   	push   edx
c001f37f:	50                   	push   eax
c001f380:	e8 d2 f4 ff ff       	call   c001e857 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f385:	83 c4 0c             	add    esp,0xc
c001f388:	eb 53                	jmp    c001f3dd <Vm::x87Handler(regs*)+0xa17>
c001f38a:	31 c0                	xor    eax,eax
c001f38c:	80 fa 02             	cmp    dl,0x2
c001f38f:	0f 85 92 00 00 00    	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f395:	83 ec 0c             	sub    esp,0xc
c001f398:	6a 00                	push   0x0
c001f39a:	e8 ea f4 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f39f:	59                   	pop    ecx
c001f3a0:	5f                   	pop    edi
c001f3a1:	52                   	push   edx
c001f3a2:	50                   	push   eax
c001f3a3:	e8 27 f2 ff ff       	call   c001e5cf <Vm::fpuInternalTo64(unsigned long long)>
c001f3a8:	eb 70                	jmp    c001f41a <Vm::x87Handler(regs*)+0xa54>
c001f3aa:	31 c0                	xor    eax,eax
c001f3ac:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f3b1:	75 74                	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f3b3:	50                   	push   eax
c001f3b4:	50                   	push   eax
c001f3b5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f3b8:	31 d2                	xor    edx,edx
c001f3ba:	52                   	push   edx
c001f3bb:	50                   	push   eax
c001f3bc:	e8 f6 f2 ff ff       	call   c001e6b7 <Vm::fpuLongToFloat(long long)>
c001f3c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3c8:	89 c6                	mov    esi,eax
c001f3ca:	89 d7                	mov    edi,edx
c001f3cc:	e8 b8 f4 ff ff       	call   c001e889 <Vm::fpuGetReg(int)>
c001f3d1:	57                   	push   edi
c001f3d2:	56                   	push   esi
c001f3d3:	52                   	push   edx
c001f3d4:	50                   	push   eax
c001f3d5:	e8 5e f4 ff ff       	call   c001e838 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3da:	83 c4 1c             	add    esp,0x1c
c001f3dd:	52                   	push   edx
c001f3de:	50                   	push   eax
c001f3df:	6a 00                	push   0x0
c001f3e1:	e8 e6 f4 ff ff       	call   c001e8cc <Vm::fpuSetReg(int, unsigned long long)>
c001f3e6:	e9 f2 f7 ff ff       	jmp    c001ebdd <Vm::x87Handler(regs*)+0x217>
c001f3eb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3ef:	80 fa 05             	cmp    dl,0x5
c001f3f2:	75 11                	jne    c001f405 <Vm::x87Handler(regs*)+0xa3f>
c001f3f4:	55                   	push   ebp
c001f3f5:	55                   	push   ebp
c001f3f6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3f9:	ff 36                	push   DWORD PTR [esi]
c001f3fb:	e8 81 f2 ff ff       	call   c001e681 <Vm::fpuULongToFloat(unsigned long long)>
c001f400:	e9 cf f7 ff ff       	jmp    c001ebd4 <Vm::x87Handler(regs*)+0x20e>
c001f405:	31 c0                	xor    eax,eax
c001f407:	80 fa 07             	cmp    dl,0x7
c001f40a:	75 1b                	jne    c001f427 <Vm::x87Handler(regs*)+0xa61>
c001f40c:	e8 63 f5 ff ff       	call   c001e974 <Vm::fpuPop()>
c001f411:	51                   	push   ecx
c001f412:	51                   	push   ecx
c001f413:	52                   	push   edx
c001f414:	50                   	push   eax
c001f415:	e8 0c f2 ff ff       	call   c001e626 <Vm::fpuFloatToLong(unsigned long long)>
c001f41a:	83 c4 10             	add    esp,0x10
c001f41d:	89 06                	mov    DWORD PTR [esi],eax
c001f41f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f422:	e9 f8 f7 ff ff       	jmp    c001ec1f <Vm::x87Handler(regs*)+0x259>
c001f427:	83 c4 1c             	add    esp,0x1c
c001f42a:	5b                   	pop    ebx
c001f42b:	5e                   	pop    esi
c001f42c:	5f                   	pop    edi
c001f42d:	5d                   	pop    ebp
c001f42e:	c3                   	ret    

c001f42f <__static_initialization_and_destruction_0(int, int)>:
c001f42f:	83 ec 0c             	sub    esp,0xc
c001f432:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f437:	75 1a                	jne    c001f453 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f439:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f441:	75 10                	jne    c001f453 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f443:	83 ec 0c             	sub    esp,0xc
c001f446:	68 20 df 02 c0       	push   0xc002df20
c001f44b:	e8 c0 82 00 00       	call   c0027710 <Vm::_FPUState::_FPUState()>
c001f450:	83 c4 10             	add    esp,0x10
c001f453:	90                   	nop
c001f454:	83 c4 0c             	add    esp,0xc
c001f457:	c3                   	ret    

c001f458 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	83 ec 08             	sub    esp,0x8
c001f45e:	68 ff ff 00 00       	push   0xffff
c001f463:	6a 01                	push   0x1
c001f465:	e8 c5 ff ff ff       	call   c001f42f <__static_initialization_and_destruction_0(int, int)>
c001f46a:	83 c4 10             	add    esp,0x10
c001f46d:	83 c4 0c             	add    esp,0xc
c001f470:	c3                   	ret    
c001f471:	90                   	nop

c001f472 <FAT::getName()>:
c001f472:	b8 ac ad 02 c0       	mov    eax,0xc002adac
c001f477:	c3                   	ret    

c001f478 <FAT::tell(void*, unsigned long long*)>:
c001f478:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f47d:	75 06                	jne    c001f485 <FAT::tell(void*, unsigned long long*)+0xd>
c001f47f:	b8 04 00 00 00       	mov    eax,0x4
c001f484:	c3                   	ret    
c001f485:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f48a:	75 06                	jne    c001f492 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f48c:	b8 04 00 00 00       	mov    eax,0x4
c001f491:	c3                   	ret    
c001f492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f496:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f499:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f49c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4a0:	89 01                	mov    DWORD PTR [ecx],eax
c001f4a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4a5:	b8 00 00 00 00       	mov    eax,0x0
c001f4aa:	c3                   	ret    
c001f4ab:	90                   	nop

c001f4ac <FAT::stat(void*, unsigned long long*)>:
c001f4ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f4b1:	75 06                	jne    c001f4b9 <FAT::stat(void*, unsigned long long*)+0xd>
c001f4b3:	b8 04 00 00 00       	mov    eax,0x4
c001f4b8:	c3                   	ret    
c001f4b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4be:	75 06                	jne    c001f4c6 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f4c0:	b8 04 00 00 00       	mov    eax,0x4
c001f4c5:	c3                   	ret    
c001f4c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4ca:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f4cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f4d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4d4:	89 01                	mov    DWORD PTR [ecx],eax
c001f4d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4d9:	b8 00 00 00 00       	mov    eax,0x0
c001f4de:	c3                   	ret    
c001f4df:	90                   	nop

c001f4e0 <FAT::~FAT()>:
c001f4e0:	83 ec 0c             	sub    esp,0xc
c001f4e3:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001f4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ec:	89 10                	mov    DWORD PTR [eax],edx
c001f4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	50                   	push   eax
c001f4f6:	e8 b7 35 ff ff       	call   c0012ab2 <Filesystem::~Filesystem()>
c001f4fb:	83 c4 10             	add    esp,0x10
c001f4fe:	90                   	nop
c001f4ff:	83 c4 0c             	add    esp,0xc
c001f502:	c3                   	ret    
c001f503:	90                   	nop

c001f504 <FAT::~FAT()>:
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	83 ec 0c             	sub    esp,0xc
c001f50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f50e:	e8 cd ff ff ff       	call   c001f4e0 <FAT::~FAT()>
c001f513:	83 c4 10             	add    esp,0x10
c001f516:	83 ec 08             	sub    esp,0x8
c001f519:	6a 08                	push   0x8
c001f51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f51f:	e8 85 31 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c001f524:	83 c4 10             	add    esp,0x10
c001f527:	83 c4 0c             	add    esp,0xc
c001f52a:	c3                   	ret    
c001f52b:	90                   	nop

c001f52c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f52c:	83 ec 1c             	sub    esp,0x1c
c001f52f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f536:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f53b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f53f:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f546:	83 f8 ff             	cmp    eax,0xffffffff
c001f549:	75 34                	jne    c001f57f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f54b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f54f:	88 c2                	mov    dl,al
c001f551:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f556:	01 d0                	add    eax,edx
c001f558:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f55c:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f562:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f566:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f56d:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f572:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f576:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f57d:	eb 17                	jmp    c001f596 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f57f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f583:	88 c2                	mov    dl,al
c001f585:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f589:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f590:	01 d0                	add    eax,edx
c001f592:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f596:	83 ec 04             	sub    esp,0x4
c001f599:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f59d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f5a1:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f5a5:	50                   	push   eax
c001f5a6:	e8 3d 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f5ab:	83 c4 10             	add    esp,0x10
c001f5ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f5b7:	75 07                	jne    c001f5c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f5b9:	b8 00 00 00 00       	mov    eax,0x0
c001f5be:	eb 05                	jmp    c001f5c5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f5c0:	b8 01 00 00 00       	mov    eax,0x1
c001f5c5:	83 c4 1c             	add    esp,0x1c
c001f5c8:	c3                   	ret    
c001f5c9:	90                   	nop

c001f5ca <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f5ca:	57                   	push   edi
c001f5cb:	83 ec 58             	sub    esp,0x58
c001f5ce:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f5d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f5da:	b9 0f 00 00 00       	mov    ecx,0xf
c001f5df:	b8 00 00 00 00       	mov    eax,0x0
c001f5e4:	fc                   	cld    
c001f5e5:	89 d7                	mov    edi,edx
c001f5e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f5e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5ed:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f5f4:	83 f8 ff             	cmp    eax,0xffffffff
c001f5f7:	75 34                	jne    c001f62d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f5f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f5fd:	88 c2                	mov    dl,al
c001f5ff:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f604:	01 d0                	add    eax,edx
c001f606:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f60a:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f610:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f614:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f61b:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f620:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f624:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f62b:	eb 17                	jmp    c001f644 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f62d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f631:	88 c2                	mov    dl,al
c001f633:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f637:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f63e:	01 d0                	add    eax,edx
c001f640:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f644:	83 ec 08             	sub    esp,0x8
c001f647:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f64b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f64f:	50                   	push   eax
c001f650:	e8 8c 11 fe ff       	call   c00007e1 <strcat>
c001f655:	83 c4 10             	add    esp,0x10
c001f658:	83 ec 0c             	sub    esp,0xc
c001f65b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f65f:	50                   	push   eax
c001f660:	e8 71 76 fe ff       	call   c0006cd6 <f_setlabel>
c001f665:	83 c4 10             	add    esp,0x10
c001f668:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f66c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f671:	75 07                	jne    c001f67a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f673:	b8 00 00 00 00       	mov    eax,0x0
c001f678:	eb 05                	jmp    c001f67f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f67a:	b8 01 00 00 00       	mov    eax,0x1
c001f67f:	83 c4 58             	add    esp,0x58
c001f682:	5f                   	pop    edi
c001f683:	c3                   	ret    

c001f684 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f684:	83 ec 2c             	sub    esp,0x2c
c001f687:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f68f:	83 ec 08             	sub    esp,0x8
c001f692:	68 d0 ad 02 c0       	push   0xc002add0
c001f697:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f69b:	e8 db 10 fe ff       	call   c000077b <strcmp>
c001f6a0:	83 c4 10             	add    esp,0x10
c001f6a3:	85 c0                	test   eax,eax
c001f6a5:	0f 94 c0             	sete   al
c001f6a8:	84 c0                	test   al,al
c001f6aa:	74 0d                	je     c001f6b9 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f6ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6b4:	e9 a6 00 00 00       	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6b9:	83 ec 08             	sub    esp,0x8
c001f6bc:	68 c2 ad 02 c0       	push   0xc002adc2
c001f6c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6c5:	e8 b1 10 fe ff       	call   c000077b <strcmp>
c001f6ca:	83 c4 10             	add    esp,0x10
c001f6cd:	85 c0                	test   eax,eax
c001f6cf:	0f 94 c0             	sete   al
c001f6d2:	84 c0                	test   al,al
c001f6d4:	74 0a                	je     c001f6e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f6d6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6de:	eb 7f                	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6e0:	83 ec 08             	sub    esp,0x8
c001f6e3:	68 c8 ad 02 c0       	push   0xc002adc8
c001f6e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6ec:	e8 8a 10 fe ff       	call   c000077b <strcmp>
c001f6f1:	83 c4 10             	add    esp,0x10
c001f6f4:	85 c0                	test   eax,eax
c001f6f6:	0f 94 c0             	sete   al
c001f6f9:	84 c0                	test   al,al
c001f6fb:	74 0a                	je     c001f707 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f6fd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f705:	eb 58                	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f707:	83 ec 08             	sub    esp,0x8
c001f70a:	68 2c 7e 02 c0       	push   0xc0027e2c
c001f70f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f713:	e8 63 10 fe ff       	call   c000077b <strcmp>
c001f718:	83 c4 10             	add    esp,0x10
c001f71b:	85 c0                	test   eax,eax
c001f71d:	0f 94 c0             	sete   al
c001f720:	84 c0                	test   al,al
c001f722:	74 0a                	je     c001f72e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f724:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f72c:	eb 31                	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f72e:	83 ec 08             	sub    esp,0x8
c001f731:	68 ce ad 02 c0       	push   0xc002adce
c001f736:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f73a:	e8 3c 10 fe ff       	call   c000077b <strcmp>
c001f73f:	83 c4 10             	add    esp,0x10
c001f742:	85 c0                	test   eax,eax
c001f744:	0f 94 c0             	sete   al
c001f747:	84 c0                	test   al,al
c001f749:	74 0a                	je     c001f755 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f74b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f753:	eb 0a                	jmp    c001f75f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f755:	b8 08 00 00 00       	mov    eax,0x8
c001f75a:	e9 04 01 00 00       	jmp    c001f863 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f75f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f766:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f76b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f76f:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f776:	83 f8 ff             	cmp    eax,0xffffffff
c001f779:	75 34                	jne    c001f7af <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f77b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f77f:	88 c2                	mov    dl,al
c001f781:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f786:	01 d0                	add    eax,edx
c001f788:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f78c:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f792:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f796:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f79d:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f7a2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f7a6:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f7ad:	eb 17                	jmp    c001f7c6 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f7af:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f7b3:	88 c2                	mov    dl,al
c001f7b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7b9:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f7c0:	01 d0                	add    eax,edx
c001f7c2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f7c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7ca:	88 04 24             	mov    BYTE PTR [esp],al
c001f7cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f7d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f7dd:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f7e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7ea:	83 ec 0c             	sub    esp,0xc
c001f7ed:	68 00 20 00 00       	push   0x2000
c001f7f2:	e8 dd fc fe ff       	call   c000f4d4 <malloc>
c001f7f7:	83 c4 10             	add    esp,0x10
c001f7fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7fe:	68 00 20 00 00       	push   0x2000
c001f803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f807:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f80b:	50                   	push   eax
c001f80c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f810:	50                   	push   eax
c001f811:	e8 0b 79 fe ff       	call   c0007121 <f_mkfs>
c001f816:	83 c4 10             	add    esp,0x10
c001f819:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f81d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f822:	75 07                	jne    c001f82b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f824:	b8 00 00 00 00       	mov    eax,0x0
c001f829:	eb 38                	jmp    c001f863 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f82b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f830:	75 17                	jne    c001f849 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	68 00 ae 02 c0       	push   0xc002ae00
c001f83a:	e8 4a 2f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001f83f:	83 c4 10             	add    esp,0x10
c001f842:	b8 09 00 00 00       	mov    eax,0x9
c001f847:	eb 1a                	jmp    c001f863 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f84d:	83 ec 08             	sub    esp,0x8
c001f850:	50                   	push   eax
c001f851:	68 d4 ad 02 c0       	push   0xc002add4
c001f856:	e8 2e 2f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c001f85b:	83 c4 10             	add    esp,0x10
c001f85e:	b8 01 00 00 00       	mov    eax,0x1
c001f863:	83 c4 2c             	add    esp,0x2c
c001f866:	c3                   	ret    
c001f867:	90                   	nop

c001f868 <FAT::tryMount(LogicalDisk*, int)>:
c001f868:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f86e:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f873:	83 f8 14             	cmp    eax,0x14
c001f876:	75 17                	jne    c001f88f <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f878:	83 ec 0c             	sub    esp,0xc
c001f87b:	68 e6 ad 02 c0       	push   0xc002ade6
c001f880:	e8 1e a0 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c001f885:	83 c4 10             	add    esp,0x10
c001f888:	b0 00                	mov    al,0x0
c001f88a:	e9 d7 01 00 00       	jmp    c001fa66 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f88f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f896:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f89c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f8a2:	3d 00 02 00 00       	cmp    eax,0x200
c001f8a7:	74 07                	je     c001f8b0 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f8a9:	b0 00                	mov    al,0x0
c001f8ab:	e9 b6 01 00 00       	jmp    c001fa66 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8b0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f8b8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8bf:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001f8c6:	83 f8 ff             	cmp    eax,0xffffffff
c001f8c9:	74 07                	je     c001f8d2 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f8cb:	b0 01                	mov    al,0x1
c001f8cd:	e9 94 01 00 00       	jmp    c001fa66 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8d2:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f8dc:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f8e4:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f8eb:	88 c2                	mov    dl,al
c001f8ed:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f8f2:	01 d0                	add    eax,edx
c001f8f4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f8fb:	8b 15 80 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df80
c001f901:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f908:	89 14 85 a0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2060],edx
c001f90f:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001f914:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f91b:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	68 54 02 00 00       	push   0x254
c001f92a:	e8 a5 fb fe ff       	call   c000f4d4 <malloc>
c001f92f:	83 c4 10             	add    esp,0x10
c001f932:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f939:	83 ec 04             	sub    esp,0x4
c001f93c:	6a 00                	push   0x0
c001f93e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f945:	50                   	push   eax
c001f946:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f94d:	e8 8d 53 fe ff       	call   c0004cdf <f_mount>
c001f952:	83 c4 10             	add    esp,0x10
c001f955:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f95c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f964:	74 19                	je     c001f97f <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f970:	e8 7f fb fe ff       	call   c000f4f4 <rfree>
c001f975:	83 c4 10             	add    esp,0x10
c001f978:	b0 00                	mov    al,0x0
c001f97a:	e9 e7 00 00 00       	jmp    c001fa66 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f97f:	83 ec 04             	sub    esp,0x4
c001f982:	68 00 01 00 00       	push   0x100
c001f987:	6a 00                	push   0x0
c001f989:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f990:	50                   	push   eax
c001f991:	e8 f5 0c fe ff       	call   c000068b <memset>
c001f996:	83 c4 10             	add    esp,0x10
c001f999:	83 ec 08             	sub    esp,0x8
c001f99c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f9a3:	50                   	push   eax
c001f9a4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9ab:	50                   	push   eax
c001f9ac:	e8 30 0e fe ff       	call   c00007e1 <strcat>
c001f9b1:	83 c4 10             	add    esp,0x10
c001f9b4:	83 ec 08             	sub    esp,0x8
c001f9b7:	68 f4 ad 02 c0       	push   0xc002adf4
c001f9bc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9c3:	50                   	push   eax
c001f9c4:	e8 18 0e fe ff       	call   c00007e1 <strcat>
c001f9c9:	83 c4 10             	add    esp,0x10
c001f9cc:	83 ec 04             	sub    esp,0x4
c001f9cf:	6a 01                	push   0x1
c001f9d1:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f9d8:	50                   	push   eax
c001f9d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9dd:	50                   	push   eax
c001f9de:	e8 5e 53 fe ff       	call   c0004d41 <f_open>
c001f9e3:	83 c4 10             	add    esp,0x10
c001f9e6:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f9ed:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f9f4:	85 c0                	test   eax,eax
c001f9f6:	74 0a                	je     c001fa02 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f9f8:	78 2d                	js     c001fa27 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9fa:	83 e8 04             	sub    eax,0x4
c001f9fd:	83 f8 01             	cmp    eax,0x1
c001fa00:	77 25                	ja     c001fa27 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa02:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa11:	50                   	push   eax
c001fa12:	e8 7c 5e fe ff       	call   c0005893 <f_close>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	90                   	nop
c001fa1b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fa23:	74 3a                	je     c001fa5f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fa25:	eb 2d                	jmp    c001fa54 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fa27:	83 ec 0c             	sub    esp,0xc
c001fa2a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fa31:	e8 be fa fe ff       	call   c000f4f4 <rfree>
c001fa36:	83 c4 10             	add    esp,0x10
c001fa39:	83 ec 04             	sub    esp,0x4
c001fa3c:	6a 00                	push   0x0
c001fa3e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa45:	50                   	push   eax
c001fa46:	6a 00                	push   0x0
c001fa48:	e8 92 52 fe ff       	call   c0004cdf <f_mount>
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	b0 00                	mov    al,0x0
c001fa52:	eb 12                	jmp    c001fa66 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa54:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c001fa59:	40                   	inc    eax
c001fa5a:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c001fa5f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fa66:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fa6c:	c3                   	ret    
c001fa6d:	90                   	nop

c001fa6e <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fa6e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fa74:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fa7c:	74 0a                	je     c001fa88 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fa7e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fa86:	75 0a                	jne    c001fa92 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fa88:	b8 04 00 00 00       	mov    eax,0x4
c001fa8d:	e9 db 00 00 00       	jmp    c001fb6d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa92:	83 ec 08             	sub    esp,0x8
c001fa95:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa9c:	50                   	push   eax
c001fa9d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001faa4:	e8 f4 63 fe ff       	call   c0005e9d <f_readdir>
c001faa9:	83 c4 10             	add    esp,0x10
c001faac:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fab3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fab9:	83 ec 0c             	sub    esp,0xc
c001fabc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fac3:	83 c0 1a             	add    eax,0x1a
c001fac6:	50                   	push   eax
c001fac7:	e8 dc 0b fe ff       	call   c00006a8 <strlen>
c001facc:	83 c4 10             	add    esp,0x10
c001facf:	ba 00 00 00 00       	mov    edx,0x0
c001fad4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fad8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fadc:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fae3:	0f b6 c0             	movzx  eax,al
c001fae6:	83 e0 10             	and    eax,0x10
c001fae9:	74 07                	je     c001faf2 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001faeb:	b8 02 00 00 00       	mov    eax,0x2
c001faf0:	eb 05                	jmp    c001faf7 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001faf2:	b8 01 00 00 00       	mov    eax,0x1
c001faf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fafb:	83 ec 08             	sub    esp,0x8
c001fafe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fb05:	83 c0 1a             	add    eax,0x1a
c001fb08:	50                   	push   eax
c001fb09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fb0d:	83 c0 10             	add    eax,0x10
c001fb10:	50                   	push   eax
c001fb11:	e8 14 0c fe ff       	call   c000072a <strcpy>
c001fb16:	83 c4 10             	add    esp,0x10
c001fb19:	83 ec 04             	sub    esp,0x4
c001fb1c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fb23:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb27:	50                   	push   eax
c001fb28:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fb2f:	e8 21 0b fe ff       	call   c0000655 <memcpy>
c001fb34:	83 c4 10             	add    esp,0x10
c001fb37:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fb3e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fb44:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fb4b:	84 c0                	test   al,al
c001fb4d:	75 07                	jne    c001fb56 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fb4f:	b8 07 00 00 00       	mov    eax,0x7
c001fb54:	eb 17                	jmp    c001fb6d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb56:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fb5d:	85 c0                	test   eax,eax
c001fb5f:	75 07                	jne    c001fb68 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fb61:	b8 00 00 00 00       	mov    eax,0x0
c001fb66:	eb 05                	jmp    c001fb6d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb68:	b8 01 00 00 00       	mov    eax,0x1
c001fb6d:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fb73:	c3                   	ret    

c001fb74 <FAT::read(void*, unsigned long, void*, int*)>:
c001fb74:	83 ec 1c             	sub    esp,0x1c
c001fb77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb7c:	74 07                	je     c001fb85 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fb7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fb83:	75 07                	jne    c001fb8c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fb85:	b8 04 00 00 00       	mov    eax,0x4
c001fb8a:	eb 3d                	jmp    c001fbc9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb90:	50                   	push   eax
c001fb91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fb95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fb99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb9d:	e8 db 55 fe ff       	call   c000517d <f_read>
c001fba2:	83 c4 10             	add    esp,0x10
c001fba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbad:	89 c2                	mov    edx,eax
c001fbaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fbb3:	89 10                	mov    DWORD PTR [eax],edx
c001fbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb9:	85 c0                	test   eax,eax
c001fbbb:	75 07                	jne    c001fbc4 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fbbd:	b8 00 00 00 00       	mov    eax,0x0
c001fbc2:	eb 05                	jmp    c001fbc9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fbc4:	b8 01 00 00 00       	mov    eax,0x1
c001fbc9:	83 c4 1c             	add    esp,0x1c
c001fbcc:	c3                   	ret    
c001fbcd:	90                   	nop

c001fbce <FAT::write(void*, unsigned long, void*, int*)>:
c001fbce:	83 ec 1c             	sub    esp,0x1c
c001fbd1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbd6:	74 07                	je     c001fbdf <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fbd8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fbdd:	75 07                	jne    c001fbe6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fbdf:	b8 04 00 00 00       	mov    eax,0x4
c001fbe4:	eb 3d                	jmp    c001fc23 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fbe6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbea:	50                   	push   eax
c001fbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fbf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbf7:	e8 01 58 fe ff       	call   c00053fd <f_write>
c001fbfc:	83 c4 10             	add    esp,0x10
c001fbff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc07:	89 c2                	mov    edx,eax
c001fc09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc0d:	89 10                	mov    DWORD PTR [eax],edx
c001fc0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc13:	85 c0                	test   eax,eax
c001fc15:	75 07                	jne    c001fc1e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fc17:	b8 00 00 00 00       	mov    eax,0x0
c001fc1c:	eb 05                	jmp    c001fc23 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc1e:	b8 01 00 00 00       	mov    eax,0x1
c001fc23:	83 c4 1c             	add    esp,0x1c
c001fc26:	c3                   	ret    
c001fc27:	90                   	nop

c001fc28 <FAT::close(void*)>:
c001fc28:	83 ec 1c             	sub    esp,0x1c
c001fc2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc30:	75 07                	jne    c001fc39 <FAT::close(void*)+0x11>
c001fc32:	b8 04 00 00 00       	mov    eax,0x4
c001fc37:	eb 36                	jmp    c001fc6f <FAT::close(void*)+0x47>
c001fc39:	83 ec 0c             	sub    esp,0xc
c001fc3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc40:	e8 4e 5c fe ff       	call   c0005893 <f_close>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc53:	e8 8c f8 fe ff       	call   c000f4e4 <free>
c001fc58:	83 c4 10             	add    esp,0x10
c001fc5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc5f:	85 c0                	test   eax,eax
c001fc61:	75 07                	jne    c001fc6a <FAT::close(void*)+0x42>
c001fc63:	b8 00 00 00 00       	mov    eax,0x0
c001fc68:	eb 05                	jmp    c001fc6f <FAT::close(void*)+0x47>
c001fc6a:	b8 01 00 00 00       	mov    eax,0x1
c001fc6f:	83 c4 1c             	add    esp,0x1c
c001fc72:	c3                   	ret    
c001fc73:	90                   	nop

c001fc74 <FAT::closeDir(void*)>:
c001fc74:	83 ec 1c             	sub    esp,0x1c
c001fc77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc7c:	75 07                	jne    c001fc85 <FAT::closeDir(void*)+0x11>
c001fc7e:	b8 04 00 00 00       	mov    eax,0x4
c001fc83:	eb 36                	jmp    c001fcbb <FAT::closeDir(void*)+0x47>
c001fc85:	83 ec 0c             	sub    esp,0xc
c001fc88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc8c:	e8 ea 61 fe ff       	call   c0005e7b <f_closedir>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc9f:	e8 40 f8 fe ff       	call   c000f4e4 <free>
c001fca4:	83 c4 10             	add    esp,0x10
c001fca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcab:	85 c0                	test   eax,eax
c001fcad:	75 07                	jne    c001fcb6 <FAT::closeDir(void*)+0x42>
c001fcaf:	b8 00 00 00 00       	mov    eax,0x0
c001fcb4:	eb 05                	jmp    c001fcbb <FAT::closeDir(void*)+0x47>
c001fcb6:	b8 01 00 00 00       	mov    eax,0x1
c001fcbb:	83 c4 1c             	add    esp,0x1c
c001fcbe:	c3                   	ret    
c001fcbf:	90                   	nop

c001fcc0 <FAT::seek(void*, unsigned long long)>:
c001fcc0:	83 ec 2c             	sub    esp,0x2c
c001fcc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fccb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcd3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fcd8:	75 07                	jne    c001fce1 <FAT::seek(void*, unsigned long long)+0x21>
c001fcda:	b8 04 00 00 00       	mov    eax,0x4
c001fcdf:	eb 2f                	jmp    c001fd10 <FAT::seek(void*, unsigned long long)+0x50>
c001fce1:	83 ec 04             	sub    esp,0x4
c001fce4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fce8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fcf0:	e8 cd 5b fe ff       	call   c00058c2 <f_lseek>
c001fcf5:	83 c4 10             	add    esp,0x10
c001fcf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd00:	85 c0                	test   eax,eax
c001fd02:	75 07                	jne    c001fd0b <FAT::seek(void*, unsigned long long)+0x4b>
c001fd04:	b8 00 00 00 00       	mov    eax,0x0
c001fd09:	eb 05                	jmp    c001fd10 <FAT::seek(void*, unsigned long long)+0x50>
c001fd0b:	b8 01 00 00 00       	mov    eax,0x1
c001fd10:	83 c4 2c             	add    esp,0x2c
c001fd13:	c3                   	ret    

c001fd14 <fatWrapperReadDisk>:
c001fd14:	83 ec 1c             	sub    esp,0x1c
c001fd17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd23:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd33:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fd3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd45:	52                   	push   edx
c001fd46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd4e:	50                   	push   eax
c001fd4f:	e8 c2 60 ff ff       	call   c0015e16 <LogicalDisk::read(unsigned long long, int, void*)>
c001fd54:	83 c4 20             	add    esp,0x20
c001fd57:	83 c4 1c             	add    esp,0x1c
c001fd5a:	c3                   	ret    

c001fd5b <fatWrapperWriteDisk>:
c001fd5b:	83 ec 1c             	sub    esp,0x1c
c001fd5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd62:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd6a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd75:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd7a:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fd81:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd85:	83 ec 0c             	sub    esp,0xc
c001fd88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd8c:	52                   	push   edx
c001fd8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd95:	50                   	push   eax
c001fd96:	e8 e7 60 ff ff       	call   c0015e82 <LogicalDisk::write(unsigned long long, int, void*)>
c001fd9b:	83 c4 20             	add    esp,0x20
c001fd9e:	83 c4 1c             	add    esp,0x1c
c001fda1:	c3                   	ret    

c001fda2 <fatWrapperIoctl>:
c001fda2:	53                   	push   ebx
c001fda3:	83 ec 28             	sub    esp,0x28
c001fda6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fdaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fdae:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fdb2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fdb6:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fdbb:	75 31                	jne    c001fdee <fatWrapperIoctl+0x4c>
c001fdbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fdc5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdca:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fdd1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fdd7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fddd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fde1:	66 89 02             	mov    WORD PTR [edx],ax
c001fde4:	b8 00 00 00 00       	mov    eax,0x0
c001fde9:	e9 b2 00 00 00       	jmp    c001fea0 <fatWrapperIoctl+0xfe>
c001fdee:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fdf3:	75 6a                	jne    c001fe5f <fatWrapperIoctl+0xbd>
c001fdf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fdfd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe02:	8b 04 85 80 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3080]
c001fe09:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe0f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fe15:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fe1b:	89 c8                	mov    eax,ecx
c001fe1d:	89 da                	mov    edx,ebx
c001fe1f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fe23:	c1 e0 0a             	shl    eax,0xa
c001fe26:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fe2b:	8b 0c 8d 80 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3080]
c001fe32:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fe38:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fe3e:	89 cb                	mov    ebx,ecx
c001fe40:	c1 fb 1f             	sar    ebx,0x1f
c001fe43:	53                   	push   ebx
c001fe44:	51                   	push   ecx
c001fe45:	52                   	push   edx
c001fe46:	50                   	push   eax
c001fe47:	e8 70 55 00 00       	call   c00253bc <__udivdi3>
c001fe4c:	83 c4 10             	add    esp,0x10
c001fe4f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe53:	89 01                	mov    DWORD PTR [ecx],eax
c001fe55:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe58:	b8 00 00 00 00       	mov    eax,0x0
c001fe5d:	eb 41                	jmp    c001fea0 <fatWrapperIoctl+0xfe>
c001fe5f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fe64:	75 07                	jne    c001fe6d <fatWrapperIoctl+0xcb>
c001fe66:	b8 00 00 00 00       	mov    eax,0x0
c001fe6b:	eb 33                	jmp    c001fea0 <fatWrapperIoctl+0xfe>
c001fe6d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fe72:	75 19                	jne    c001fe8d <fatWrapperIoctl+0xeb>
c001fe74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fe80:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fe86:	b8 00 00 00 00       	mov    eax,0x0
c001fe8b:	eb 13                	jmp    c001fea0 <fatWrapperIoctl+0xfe>
c001fe8d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fe92:	75 07                	jne    c001fe9b <fatWrapperIoctl+0xf9>
c001fe94:	b8 00 00 00 00       	mov    eax,0x0
c001fe99:	eb 05                	jmp    c001fea0 <fatWrapperIoctl+0xfe>
c001fe9b:	b8 04 00 00 00       	mov    eax,0x4
c001fea0:	83 c4 28             	add    esp,0x28
c001fea3:	5b                   	pop    ebx
c001fea4:	c3                   	ret    
c001fea5:	90                   	nop

c001fea6 <FAT::FAT()>:
c001fea6:	83 ec 1c             	sub    esp,0x1c
c001fea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fead:	83 ec 0c             	sub    esp,0xc
c001feb0:	50                   	push   eax
c001feb1:	e8 d8 2b ff ff       	call   c0012a8e <Filesystem::Filesystem()>
c001feb6:	83 c4 10             	add    esp,0x10
c001feb9:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c001febe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fec2:	89 10                	mov    DWORD PTR [eax],edx
c001fec4:	c7 05 80 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df80,0x0
c001fece:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fed6:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fedb:	7f 15                	jg     c001fef2 <FAT::FAT()+0x4c>
c001fedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fee1:	c7 04 85 a0 df 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2060],0xffffffff
c001feec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fef0:	eb e4                	jmp    c001fed6 <FAT::FAT()+0x30>
c001fef2:	90                   	nop
c001fef3:	83 c4 1c             	add    esp,0x1c
c001fef6:	c3                   	ret    
c001fef7:	90                   	nop

c001fef8 <FAT::fixFilepath(char*)>:
c001fef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fefc:	8a 00                	mov    al,BYTE PTR [eax]
c001fefe:	3c 40                	cmp    al,0x40
c001ff00:	7e 2c                	jle    c001ff2e <FAT::fixFilepath(char*)+0x36>
c001ff02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff06:	8a 00                	mov    al,BYTE PTR [eax]
c001ff08:	83 e8 41             	sub    eax,0x41
c001ff0b:	88 c2                	mov    dl,al
c001ff0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff11:	88 10                	mov    BYTE PTR [eax],dl
c001ff13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff17:	8a 00                	mov    al,BYTE PTR [eax]
c001ff19:	0f be c0             	movsx  eax,al
c001ff1c:	8b 04 85 a0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2060]
c001ff23:	83 c0 30             	add    eax,0x30
c001ff26:	88 c2                	mov    dl,al
c001ff28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff2c:	88 10                	mov    BYTE PTR [eax],dl
c001ff2e:	90                   	nop
c001ff2f:	c3                   	ret    

c001ff30 <FAT::open(char const*, void**, FileOpenMode)>:
c001ff30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff3e:	74 0a                	je     c001ff4a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ff40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff48:	75 0a                	jne    c001ff54 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ff4a:	b8 04 00 00 00       	mov    eax,0x4
c001ff4f:	e9 fd 00 00 00       	jmp    c0020051 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff54:	83 ec 08             	sub    esp,0x8
c001ff57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff62:	50                   	push   eax
c001ff63:	e8 c2 07 fe ff       	call   c000072a <strcpy>
c001ff68:	83 c4 10             	add    esp,0x10
c001ff6b:	83 ec 08             	sub    esp,0x8
c001ff6e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ff72:	50                   	push   eax
c001ff73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff7a:	e8 79 ff ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ff8a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff91:	83 e0 01             	and    eax,0x1
c001ff94:	74 08                	je     c001ff9e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ff96:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ff9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffa5:	83 e0 04             	and    eax,0x4
c001ffa8:	74 10                	je     c001ffba <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ffaa:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ffb2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffc1:	83 e0 02             	and    eax,0x2
c001ffc4:	74 08                	je     c001ffce <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ffc6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffd5:	83 e0 08             	and    eax,0x8
c001ffd8:	74 08                	je     c001ffe2 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ffda:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ffe2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffe9:	83 e0 10             	and    eax,0x10
c001ffec:	74 08                	je     c001fff6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ffee:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	68 50 02 00 00       	push   0x250
c001fffe:	e8 d1 f4 fe ff       	call   c000f4d4 <malloc>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	89 c2                	mov    edx,eax
c0020008:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002000f:	89 10                	mov    DWORD PTR [eax],edx
c0020011:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020019:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020020:	8b 00                	mov    eax,DWORD PTR [eax]
c0020022:	83 ec 04             	sub    esp,0x4
c0020025:	52                   	push   edx
c0020026:	8d 54 24 10          	lea    edx,[esp+0x10]
c002002a:	52                   	push   edx
c002002b:	50                   	push   eax
c002002c:	e8 10 4d fe ff       	call   c0004d41 <f_open>
c0020031:	83 c4 10             	add    esp,0x10
c0020034:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002003b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020043:	74 07                	je     c002004c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020045:	b8 01 00 00 00       	mov    eax,0x1
c002004a:	eb 05                	jmp    c0020051 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002004c:	b8 00 00 00 00       	mov    eax,0x0
c0020051:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020057:	c3                   	ret    

c0020058 <FAT::openDir(char const*, void**)>:
c0020058:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002005e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020066:	74 0a                	je     c0020072 <FAT::openDir(char const*, void**)+0x1a>
c0020068:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020070:	75 07                	jne    c0020079 <FAT::openDir(char const*, void**)+0x21>
c0020072:	b8 04 00 00 00       	mov    eax,0x4
c0020077:	eb 7d                	jmp    c00200f6 <FAT::openDir(char const*, void**)+0x9e>
c0020079:	83 ec 08             	sub    esp,0x8
c002007c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020083:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020087:	50                   	push   eax
c0020088:	e8 9d 06 fe ff       	call   c000072a <strcpy>
c002008d:	83 c4 10             	add    esp,0x10
c0020090:	83 ec 08             	sub    esp,0x8
c0020093:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020097:	50                   	push   eax
c0020098:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002009f:	e8 54 fe ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c00200a4:	83 c4 10             	add    esp,0x10
c00200a7:	83 ec 0c             	sub    esp,0xc
c00200aa:	6a 4c                	push   0x4c
c00200ac:	e8 23 f4 fe ff       	call   c000f4d4 <malloc>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	89 c2                	mov    edx,eax
c00200b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200bd:	89 10                	mov    DWORD PTR [eax],edx
c00200bf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c8:	83 ec 08             	sub    esp,0x8
c00200cb:	8d 54 24 14          	lea    edx,[esp+0x14]
c00200cf:	52                   	push   edx
c00200d0:	50                   	push   eax
c00200d1:	e8 a3 5c fe ff       	call   c0005d79 <f_opendir>
c00200d6:	83 c4 10             	add    esp,0x10
c00200d9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00200e0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00200e8:	74 07                	je     c00200f1 <FAT::openDir(char const*, void**)+0x99>
c00200ea:	b8 01 00 00 00       	mov    eax,0x1
c00200ef:	eb 05                	jmp    c00200f6 <FAT::openDir(char const*, void**)+0x9e>
c00200f1:	b8 00 00 00 00       	mov    eax,0x0
c00200f6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00200fc:	c3                   	ret    
c00200fd:	90                   	nop

c00200fe <FAT::stat(char const*, unsigned long long*, bool*)>:
c00200fe:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020104:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002010c:	75 0a                	jne    c0020118 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002010e:	b8 04 00 00 00       	mov    eax,0x4
c0020113:	e9 c9 00 00 00       	jmp    c00201e1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020118:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020120:	75 0a                	jne    c002012c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020122:	b8 04 00 00 00       	mov    eax,0x4
c0020127:	e9 b5 00 00 00       	jmp    c00201e1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002012c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020134:	75 0a                	jne    c0020140 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020136:	b8 04 00 00 00       	mov    eax,0x4
c002013b:	e9 a1 00 00 00       	jmp    c00201e1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020140:	83 ec 08             	sub    esp,0x8
c0020143:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002014a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020151:	50                   	push   eax
c0020152:	e8 d3 05 fe ff       	call   c000072a <strcpy>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	83 ec 08             	sub    esp,0x8
c002015d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020164:	50                   	push   eax
c0020165:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002016c:	e8 87 fd ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c0020171:	83 c4 10             	add    esp,0x10
c0020174:	83 ec 08             	sub    esp,0x8
c0020177:	8d 44 24 08          	lea    eax,[esp+0x8]
c002017b:	50                   	push   eax
c002017c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020183:	50                   	push   eax
c0020184:	e8 af 5d fe ff       	call   c0005f38 <f_stat>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020193:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002019a:	85 c0                	test   eax,eax
c002019c:	74 07                	je     c00201a5 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002019e:	83 f8 04             	cmp    eax,0x4
c00201a1:	74 32                	je     c00201d5 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00201a3:	eb 37                	jmp    c00201dc <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00201a5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201a9:	0f b6 c0             	movzx  eax,al
c00201ac:	83 e0 10             	and    eax,0x10
c00201af:	0f 95 c2             	setne  dl
c00201b2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00201b9:	88 10                	mov    BYTE PTR [eax],dl
c00201bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00201be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201c2:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00201c9:	89 01                	mov    DWORD PTR [ecx],eax
c00201cb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201ce:	b8 00 00 00 00       	mov    eax,0x0
c00201d3:	eb 0c                	jmp    c00201e1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201d5:	b8 02 00 00 00       	mov    eax,0x2
c00201da:	eb 05                	jmp    c00201e1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201dc:	b8 01 00 00 00       	mov    eax,0x1
c00201e1:	81 c4 2c 02 00 00    	add    esp,0x22c
c00201e7:	c3                   	ret    

c00201e8 <FAT::unlink(char const*)>:
c00201e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00201ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00201f6:	75 07                	jne    c00201ff <FAT::unlink(char const*)+0x17>
c00201f8:	b8 04 00 00 00       	mov    eax,0x4
c00201fd:	eb 5c                	jmp    c002025b <FAT::unlink(char const*)+0x73>
c00201ff:	83 ec 08             	sub    esp,0x8
c0020202:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020209:	8d 44 24 18          	lea    eax,[esp+0x18]
c002020d:	50                   	push   eax
c002020e:	e8 17 05 fe ff       	call   c000072a <strcpy>
c0020213:	83 c4 10             	add    esp,0x10
c0020216:	83 ec 08             	sub    esp,0x8
c0020219:	8d 44 24 14          	lea    eax,[esp+0x14]
c002021d:	50                   	push   eax
c002021e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020225:	e8 ce fc ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c002022a:	83 c4 10             	add    esp,0x10
c002022d:	83 ec 0c             	sub    esp,0xc
c0020230:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020234:	50                   	push   eax
c0020235:	e8 50 60 fe ff       	call   c000628a <f_unlink>
c002023a:	83 c4 10             	add    esp,0x10
c002023d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020244:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002024b:	85 c0                	test   eax,eax
c002024d:	75 07                	jne    c0020256 <FAT::unlink(char const*)+0x6e>
c002024f:	b8 00 00 00 00       	mov    eax,0x0
c0020254:	eb 05                	jmp    c002025b <FAT::unlink(char const*)+0x73>
c0020256:	b8 01 00 00 00       	mov    eax,0x1
c002025b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020261:	c3                   	ret    

c0020262 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020262:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020268:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002026f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020276:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002027a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002027e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020286:	75 0a                	jne    c0020292 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020288:	b8 04 00 00 00       	mov    eax,0x4
c002028d:	e9 1c 01 00 00       	jmp    c00203ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020292:	83 ec 08             	sub    esp,0x8
c0020295:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002029c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00202a0:	50                   	push   eax
c00202a1:	e8 84 04 fe ff       	call   c000072a <strcpy>
c00202a6:	83 c4 10             	add    esp,0x10
c00202a9:	83 ec 08             	sub    esp,0x8
c00202ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c00202b0:	50                   	push   eax
c00202b1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00202b8:	e8 3b fc ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c00202bd:	83 c4 10             	add    esp,0x10
c00202c0:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00202c8:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00202d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202d5:	83 e0 01             	and    eax,0x1
c00202d8:	74 08                	je     c00202e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00202da:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00202e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202e7:	83 e0 02             	and    eax,0x2
c00202ea:	74 08                	je     c00202f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00202ec:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00202f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202f9:	83 e0 04             	and    eax,0x4
c00202fc:	74 08                	je     c0020306 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00202fe:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020306:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002030b:	83 e0 08             	and    eax,0x8
c002030e:	74 08                	je     c0020318 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020310:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020318:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002031d:	83 e0 01             	and    eax,0x1
c0020320:	74 08                	je     c002032a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020322:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002032a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002032f:	83 e0 02             	and    eax,0x2
c0020332:	74 08                	je     c002033c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020334:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002033c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020341:	83 e0 04             	and    eax,0x4
c0020344:	74 08                	je     c002034e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020346:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002034e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020353:	83 e0 08             	and    eax,0x8
c0020356:	74 08                	je     c0020360 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020358:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020360:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020367:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002036e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020376:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002037e:	83 ec 04             	sub    esp,0x4
c0020381:	52                   	push   edx
c0020382:	50                   	push   eax
c0020383:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020387:	50                   	push   eax
c0020388:	e8 9f 65 fe ff       	call   c000692c <f_chmod>
c002038d:	83 c4 10             	add    esp,0x10
c0020390:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020397:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002039e:	85 c0                	test   eax,eax
c00203a0:	75 07                	jne    c00203a9 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00203a2:	b8 00 00 00 00       	mov    eax,0x0
c00203a7:	eb 05                	jmp    c00203ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00203a9:	b8 01 00 00 00       	mov    eax,0x1
c00203ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c00203b4:	c3                   	ret    
c00203b5:	90                   	nop

c00203b6 <FAT::rename(char const*, char const*)>:
c00203b6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00203bc:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00203c4:	74 0a                	je     c00203d0 <FAT::rename(char const*, char const*)+0x1a>
c00203c6:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00203ce:	75 0a                	jne    c00203da <FAT::rename(char const*, char const*)+0x24>
c00203d0:	b8 04 00 00 00       	mov    eax,0x4
c00203d5:	e9 98 00 00 00       	jmp    c0020472 <FAT::rename(char const*, char const*)+0xbc>
c00203da:	83 ec 08             	sub    esp,0x8
c00203dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203e4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00203eb:	50                   	push   eax
c00203ec:	e8 39 03 fe ff       	call   c000072a <strcpy>
c00203f1:	83 c4 10             	add    esp,0x10
c00203f4:	83 ec 08             	sub    esp,0x8
c00203f7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00203fe:	50                   	push   eax
c00203ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020406:	e8 ed fa ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c002040b:	83 c4 10             	add    esp,0x10
c002040e:	83 ec 08             	sub    esp,0x8
c0020411:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020418:	8d 44 24 18          	lea    eax,[esp+0x18]
c002041c:	50                   	push   eax
c002041d:	e8 08 03 fe ff       	call   c000072a <strcpy>
c0020422:	83 c4 10             	add    esp,0x10
c0020425:	83 ec 08             	sub    esp,0x8
c0020428:	8d 44 24 14          	lea    eax,[esp+0x14]
c002042c:	50                   	push   eax
c002042d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020434:	e8 bf fa ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c0020439:	83 c4 10             	add    esp,0x10
c002043c:	83 ec 08             	sub    esp,0x8
c002043f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020443:	50                   	push   eax
c0020444:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002044b:	50                   	push   eax
c002044c:	e8 e8 61 fe ff       	call   c0006639 <f_rename>
c0020451:	83 c4 10             	add    esp,0x10
c0020454:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002045b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020462:	85 c0                	test   eax,eax
c0020464:	75 07                	jne    c002046d <FAT::rename(char const*, char const*)+0xb7>
c0020466:	b8 00 00 00 00       	mov    eax,0x0
c002046b:	eb 05                	jmp    c0020472 <FAT::rename(char const*, char const*)+0xbc>
c002046d:	b8 01 00 00 00       	mov    eax,0x1
c0020472:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020478:	c3                   	ret    
c0020479:	90                   	nop

c002047a <FAT::mkdir(char const*)>:
c002047a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020480:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020488:	75 07                	jne    c0020491 <FAT::mkdir(char const*)+0x17>
c002048a:	b8 04 00 00 00       	mov    eax,0x4
c002048f:	eb 5c                	jmp    c00204ed <FAT::mkdir(char const*)+0x73>
c0020491:	83 ec 08             	sub    esp,0x8
c0020494:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002049b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002049f:	50                   	push   eax
c00204a0:	e8 85 02 fe ff       	call   c000072a <strcpy>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	83 ec 08             	sub    esp,0x8
c00204ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204af:	50                   	push   eax
c00204b0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204b7:	e8 3c fa ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c00204bc:	83 c4 10             	add    esp,0x10
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204c6:	50                   	push   eax
c00204c7:	e8 41 5f fe ff       	call   c000640d <f_mkdir>
c00204cc:	83 c4 10             	add    esp,0x10
c00204cf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00204d6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00204dd:	85 c0                	test   eax,eax
c00204df:	75 07                	jne    c00204e8 <FAT::mkdir(char const*)+0x6e>
c00204e1:	b8 00 00 00 00       	mov    eax,0x0
c00204e6:	eb 05                	jmp    c00204ed <FAT::mkdir(char const*)+0x73>
c00204e8:	b8 01 00 00 00       	mov    eax,0x1
c00204ed:	81 c4 1c 01 00 00    	add    esp,0x11c
c00204f3:	c3                   	ret    

c00204f4 <FAT::exists(char const*)>:
c00204f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00204fa:	83 ec 08             	sub    esp,0x8
c00204fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020504:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020508:	50                   	push   eax
c0020509:	e8 1c 02 fe ff       	call   c000072a <strcpy>
c002050e:	83 c4 10             	add    esp,0x10
c0020511:	83 ec 08             	sub    esp,0x8
c0020514:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020518:	50                   	push   eax
c0020519:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020520:	e8 d3 f9 ff ff       	call   c001fef8 <FAT::fixFilepath(char*)>
c0020525:	83 c4 10             	add    esp,0x10
c0020528:	83 ec 08             	sub    esp,0x8
c002052b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020532:	50                   	push   eax
c0020533:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020537:	50                   	push   eax
c0020538:	e8 fb 59 fe ff       	call   c0005f38 <f_stat>
c002053d:	83 c4 10             	add    esp,0x10
c0020540:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020547:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002054e:	85 c0                	test   eax,eax
c0020550:	75 04                	jne    c0020556 <FAT::exists(char const*)+0x62>
c0020552:	b0 01                	mov    al,0x1
c0020554:	eb 02                	jmp    c0020558 <FAT::exists(char const*)+0x64>
c0020556:	b0 00                	mov    al,0x0
c0020558:	81 c4 2c 02 00 00    	add    esp,0x22c
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020560:	b8 08 00 00 00       	mov    eax,0x8
c0020565:	c3                   	ret    

c0020566 <ISO9660::seek(void*, unsigned long long)>:
c0020566:	53                   	push   ebx
c0020567:	b8 04 00 00 00       	mov    eax,0x4
c002056c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020570:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020574:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020578:	85 d2                	test   edx,edx
c002057a:	74 17                	je     c0020593 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002057c:	89 c8                	mov    eax,ecx
c002057e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020581:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020584:	b8 01 00 00 00       	mov    eax,0x1
c0020589:	73 08                	jae    c0020593 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002058b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002058e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020591:	31 c0                	xor    eax,eax
c0020593:	5b                   	pop    ebx
c0020594:	c3                   	ret    
c0020595:	90                   	nop

c0020596 <ISO9660::tell(void*, unsigned long long*)>:
c0020596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002059a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002059e:	85 d2                	test   edx,edx
c00205a0:	74 12                	je     c00205b4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00205a2:	85 c0                	test   eax,eax
c00205a4:	74 0e                	je     c00205b4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00205a6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00205a9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00205ac:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205af:	89 10                	mov    DWORD PTR [eax],edx
c00205b1:	31 c0                	xor    eax,eax
c00205b3:	c3                   	ret    
c00205b4:	b8 04 00 00 00       	mov    eax,0x4
c00205b9:	c3                   	ret    

c00205ba <ISO9660::getName()>:
c00205ba:	b8 8c ae 02 c0       	mov    eax,0xc002ae8c
c00205bf:	c3                   	ret    

c00205c0 <ISO9660::stat(void*, unsigned long long*)>:
c00205c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205c8:	85 d2                	test   edx,edx
c00205ca:	74 12                	je     c00205de <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205cc:	85 c0                	test   eax,eax
c00205ce:	74 0e                	je     c00205de <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205d0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00205d3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00205d6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205d9:	89 10                	mov    DWORD PTR [eax],edx
c00205db:	31 c0                	xor    eax,eax
c00205dd:	c3                   	ret    
c00205de:	b8 04 00 00 00       	mov    eax,0x4
c00205e3:	c3                   	ret    

c00205e4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00205e4:	b8 01 00 00 00       	mov    eax,0x1
c00205e9:	c3                   	ret    

c00205ea <ISO9660::unlink(char const*)>:
c00205ea:	b8 01 00 00 00       	mov    eax,0x1
c00205ef:	c3                   	ret    

c00205f0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00205f0:	b8 01 00 00 00       	mov    eax,0x1
c00205f5:	c3                   	ret    

c00205f6 <ISO9660::rename(char const*, char const*)>:
c00205f6:	b8 01 00 00 00       	mov    eax,0x1
c00205fb:	c3                   	ret    

c00205fc <ISO9660::mkdir(char const*)>:
c00205fc:	b8 01 00 00 00       	mov    eax,0x1
c0020601:	c3                   	ret    

c0020602 <ISO9660::close(void*)>:
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	b8 04 00 00 00       	mov    eax,0x4
c002060a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002060e:	85 d2                	test   edx,edx
c0020610:	74 0e                	je     c0020620 <ISO9660::close(void*)+0x1e>
c0020612:	83 ec 0c             	sub    esp,0xc
c0020615:	52                   	push   edx
c0020616:	e8 c9 ee fe ff       	call   c000f4e4 <free>
c002061b:	83 c4 10             	add    esp,0x10
c002061e:	31 c0                	xor    eax,eax
c0020620:	83 c4 0c             	add    esp,0xc
c0020623:	c3                   	ret    

c0020624 <ISO9660::closeDir(void*)>:
c0020624:	83 ec 0c             	sub    esp,0xc
c0020627:	b8 04 00 00 00       	mov    eax,0x4
c002062c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020630:	85 d2                	test   edx,edx
c0020632:	74 0e                	je     c0020642 <ISO9660::closeDir(void*)+0x1e>
c0020634:	83 ec 0c             	sub    esp,0xc
c0020637:	52                   	push   edx
c0020638:	e8 a7 ee fe ff       	call   c000f4e4 <free>
c002063d:	83 c4 10             	add    esp,0x10
c0020640:	31 c0                	xor    eax,eax
c0020642:	83 c4 0c             	add    esp,0xc
c0020645:	c3                   	ret    

c0020646 <ISO9660::~ISO9660()>:
c0020646:	83 ec 0c             	sub    esp,0xc
c0020649:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c002064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020652:	89 10                	mov    DWORD PTR [eax],edx
c0020654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020658:	83 ec 0c             	sub    esp,0xc
c002065b:	50                   	push   eax
c002065c:	e8 51 24 ff ff       	call   c0012ab2 <Filesystem::~Filesystem()>
c0020661:	83 c4 10             	add    esp,0x10
c0020664:	90                   	nop
c0020665:	83 c4 0c             	add    esp,0xc
c0020668:	c3                   	ret    
c0020669:	90                   	nop

c002066a <ISO9660::~ISO9660()>:
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	83 ec 0c             	sub    esp,0xc
c0020670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020674:	e8 cd ff ff ff       	call   c0020646 <ISO9660::~ISO9660()>
c0020679:	83 c4 10             	add    esp,0x10
c002067c:	83 ec 08             	sub    esp,0x8
c002067f:	6a 08                	push   0x8
c0020681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020685:	e8 1f 20 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c002068a:	83 c4 10             	add    esp,0x10
c002068d:	83 c4 0c             	add    esp,0xc
c0020690:	c3                   	ret    

c0020691 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020691:	55                   	push   ebp
c0020692:	31 c9                	xor    ecx,ecx
c0020694:	57                   	push   edi
c0020695:	56                   	push   esi
c0020696:	53                   	push   ebx
c0020697:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002069b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002069f:	89 eb                	mov    ebx,ebp
c00206a1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00206a5:	39 ce                	cmp    esi,ecx
c00206a7:	7e 17                	jle    c00206c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00206a9:	31 d2                	xor    edx,edx
c00206ab:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00206af:	7d 13                	jge    c00206c4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00206b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00206b5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00206b8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00206bb:	75 0d                	jne    c00206ca <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00206bd:	42                   	inc    edx
c00206be:	eb eb                	jmp    c00206ab <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00206c0:	31 c0                	xor    eax,eax
c00206c2:	eb 0a                	jmp    c00206ce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206c4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00206c8:	eb 04                	jmp    c00206ce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206ca:	41                   	inc    ecx
c00206cb:	43                   	inc    ebx
c00206cc:	eb d7                	jmp    c00206a5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00206ce:	5b                   	pop    ebx
c00206cf:	5e                   	pop    esi
c00206d0:	5f                   	pop    edi
c00206d1:	5d                   	pop    ebp
c00206d2:	c3                   	ret    

c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00206d3:	56                   	push   esi
c00206d4:	53                   	push   ebx
c00206d5:	52                   	push   edx
c00206d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00206de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00206e2:	39 0d 80 e0 02 c0    	cmp    DWORD PTR ds:0xc002e080,ecx
c00206e8:	75 08                	jne    c00206f2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00206ea:	38 05 f4 be 02 c0    	cmp    BYTE PTR ds:0xc002bef4,al
c00206f0:	74 2b                	je     c002071d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	a2 f4 be 02 c0       	mov    ds:0xc002bef4,al
c00206fa:	68 a0 e0 02 c0       	push   0xc002e0a0
c00206ff:	0f be c0             	movsx  eax,al
c0020702:	6a 01                	push   0x1
c0020704:	89 0d 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,ecx
c002070a:	31 db                	xor    ebx,ebx
c002070c:	53                   	push   ebx
c002070d:	51                   	push   ecx
c002070e:	ff 34 85 7c ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd3184]
c0020715:	e8 fc 56 ff ff       	call   c0015e16 <LogicalDisk::read(unsigned long long, int, void*)>
c002071a:	83 c4 20             	add    esp,0x20
c002071d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020725:	c7 44 24 14 a0 e0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e0a0
c002072d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020731:	58                   	pop    eax
c0020732:	5b                   	pop    ebx
c0020733:	5e                   	pop    esi
c0020734:	e9 1c ff fd ff       	jmp    c0000655 <memcpy>
c0020739:	90                   	nop

c002073a <ISO9660::tryMount(LogicalDisk*, int)>:
c002073a:	81 ec 10 08 00 00    	sub    esp,0x810
c0020740:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020747:	83 c0 41             	add    eax,0x41
c002074a:	0f be c0             	movsx  eax,al
c002074d:	50                   	push   eax
c002074e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020752:	50                   	push   eax
c0020753:	6a 10                	push   0x10
c0020755:	e8 79 ff ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002075a:	83 c4 10             	add    esp,0x10
c002075d:	31 c0                	xor    eax,eax
c002075f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020764:	75 1d                	jne    c0020783 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020766:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002076b:	75 16                	jne    c0020783 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002076d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020772:	75 0f                	jne    c0020783 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020774:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020779:	75 08                	jne    c0020783 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002077b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020780:	0f 94 c0             	sete   al
c0020783:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020789:	c3                   	ret    

c002078a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002078a:	55                   	push   ebp
c002078b:	57                   	push   edi
c002078c:	56                   	push   esi
c002078d:	53                   	push   ebx
c002078e:	81 ec 34 08 00 00    	sub    esp,0x834
c0020794:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c002079b:	55                   	push   ebp
c002079c:	68 a7 ae 02 c0       	push   0xc002aea7
c00207a1:	e8 e3 1f ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00207a6:	83 c4 10             	add    esp,0x10
c00207a9:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00207b1:	0f 84 06 02 00 00    	je     c00209bd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207b7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00207bf:	0f 84 f8 01 00 00    	je     c00209bd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207c5:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00207cc:	b8 01 00 00 00       	mov    eax,0x1
c00207d1:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c00207d5:	0f 85 e7 01 00 00    	jne    c00209c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00207db:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00207de:	31 d2                	xor    edx,edx
c00207e0:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00207e3:	89 e9                	mov    ecx,ebp
c00207e5:	89 d3                	mov    ebx,edx
c00207e7:	01 f1                	add    ecx,esi
c00207e9:	11 fb                	adc    ebx,edi
c00207eb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207ef:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00207f3:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00207fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00207fd:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0020800:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020804:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020808:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002080c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020810:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0020814:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020818:	72 19                	jb     c0020833 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c002081a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020822:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020826:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020829:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002082d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020831:	eb 13                	jmp    c0020846 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0020833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002083b:	29 f0                	sub    eax,esi
c002083d:	19 fa                	sbb    edx,edi
c002083f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020842:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020846:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c002084d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020850:	8b 00                	mov    eax,DWORD PTR [eax]
c0020852:	53                   	push   ebx
c0020853:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020857:	c1 e0 0b             	shl    eax,0xb
c002085a:	01 c6                	add    esi,eax
c002085c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020863:	11 d7                	adc    edi,edx
c0020865:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020869:	89 fa                	mov    edx,edi
c002086b:	50                   	push   eax
c002086c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020870:	50                   	push   eax
c0020871:	89 f0                	mov    eax,esi
c0020873:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020877:	50                   	push   eax
c0020878:	e8 56 fe ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002087d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020888:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002088b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002088f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020895:	83 c4 10             	add    esp,0x10
c0020898:	b8 00 08 00 00       	mov    eax,0x800
c002089d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00208a1:	29 d0                	sub    eax,edx
c00208a3:	39 c1                	cmp    ecx,eax
c00208a5:	83 db 00             	sbb    ebx,0x0
c00208a8:	7d 19                	jge    c00208c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00208aa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00208af:	75 16                	jne    c00208c7 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00208b1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00208b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208be:	e9 f6 00 00 00       	jmp    c00209b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00208c3:	89 c5                	mov    ebp,eax
c00208c5:	eb 03                	jmp    c00208ca <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00208c7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00208ca:	51                   	push   ecx
c00208cb:	55                   	push   ebp
c00208cc:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c00208d0:	50                   	push   eax
c00208d1:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00208d8:	e8 78 fd fd ff       	call   c0000655 <memcpy>
c00208dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00208e5:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00208ec:	01 e8                	add    eax,ebp
c00208ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00208f2:	89 e8                	mov    eax,ebp
c00208f4:	99                   	cdq    
c00208f5:	01 ee                	add    esi,ebp
c00208f7:	11 d7                	adc    edi,edx
c00208f9:	29 e9                	sub    ecx,ebp
c00208fb:	19 d3                	sbb    ebx,edx
c00208fd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020901:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020905:	83 c4 10             	add    esp,0x10
c0020908:	b8 ff 07 00 00       	mov    eax,0x7ff
c002090d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020910:	b8 00 00 00 00       	mov    eax,0x0
c0020915:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020919:	7d 3f                	jge    c002095a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002091b:	52                   	push   edx
c002091c:	89 fa                	mov    edx,edi
c002091e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020925:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020929:	50                   	push   eax
c002092a:	89 f0                	mov    eax,esi
c002092c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020930:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020934:	50                   	push   eax
c0020935:	e8 99 fd ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002093a:	81 c6 00 08 00 00    	add    esi,0x800
c0020940:	83 d7 00             	adc    edi,0x0
c0020943:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002094b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020953:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020958:	eb ab                	jmp    c0020905 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c002095a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002095e:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020961:	74 34                	je     c0020997 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0020963:	89 fa                	mov    edx,edi
c0020965:	50                   	push   eax
c0020966:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002096d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020971:	50                   	push   eax
c0020972:	89 f0                	mov    eax,esi
c0020974:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020978:	0f ac d0 0b          	shrd   eax,edx,0xb
c002097c:	55                   	push   ebp
c002097d:	50                   	push   eax
c002097e:	e8 50 fd ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020983:	83 c4 0c             	add    esp,0xc
c0020986:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002098a:	55                   	push   ebp
c002098b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002098f:	e8 c1 fc fd ff       	call   c0000655 <memcpy>
c0020994:	83 c4 10             	add    esp,0x10
c0020997:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002099e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00209a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00209a6:	89 38                	mov    DWORD PTR [eax],edi
c00209a8:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00209af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209b3:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00209b6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c00209b9:	31 c0                	xor    eax,eax
c00209bb:	eb 05                	jmp    c00209c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00209bd:	b8 04 00 00 00       	mov    eax,0x4
c00209c2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00209c8:	5b                   	pop    ebx
c00209c9:	5e                   	pop    esi
c00209ca:	5f                   	pop    edi
c00209cb:	5d                   	pop    ebp
c00209cc:	c3                   	ret    
c00209cd:	90                   	nop

c00209ce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00209ce:	55                   	push   ebp
c00209cf:	57                   	push   edi
c00209d0:	56                   	push   esi
c00209d1:	53                   	push   ebx
c00209d2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00209d8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00209df:	85 f6                	test   esi,esi
c00209e1:	0f 84 64 02 00 00    	je     c0020c4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209e7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00209ef:	0f 84 56 02 00 00    	je     c0020c4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00209f8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00209fb:	75 0a                	jne    c0020a07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00209fd:	b8 07 00 00 00       	mov    eax,0x7
c0020a02:	e9 49 02 00 00       	jmp    c0020c50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020a07:	50                   	push   eax
c0020a08:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a0c:	50                   	push   eax
c0020a0d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a14:	53                   	push   ebx
c0020a15:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a17:	c1 e0 0b             	shl    eax,0xb
c0020a1a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020a1d:	c1 e8 0b             	shr    eax,0xb
c0020a20:	50                   	push   eax
c0020a21:	e8 ad fc ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a29:	83 c4 10             	add    esp,0x10
c0020a2c:	89 c1                	mov    ecx,eax
c0020a2e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020a31:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020a37:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a3a:	84 db                	test   bl,bl
c0020a3c:	0f 85 90 00 00 00    	jne    c0020ad2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a42:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a48:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a4e:	29 c7                	sub    edi,eax
c0020a50:	89 fb                	mov    ebx,edi
c0020a52:	c1 fb 1f             	sar    ebx,0x1f
c0020a55:	01 f8                	add    eax,edi
c0020a57:	11 da                	adc    edx,ebx
c0020a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a61:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020a64:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020a67:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020a6a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a74:	89 d8                	mov    eax,ebx
c0020a76:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020a79:	ba 00 00 00 00       	mov    edx,0x0
c0020a7e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020a82:	b8 00 00 00 00       	mov    eax,0x0
c0020a87:	73 0b                	jae    c0020a94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020a89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a90:	29 f8                	sub    eax,edi
c0020a92:	19 da                	sbb    edx,ebx
c0020a94:	89 d3                	mov    ebx,edx
c0020a96:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020a99:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020a9c:	09 c3                	or     ebx,eax
c0020a9e:	0f 84 59 ff ff ff    	je     c00209fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020aa4:	55                   	push   ebp
c0020aa5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020aa9:	50                   	push   eax
c0020aaa:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020ab1:	53                   	push   ebx
c0020ab2:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ab4:	c1 e0 0b             	shl    eax,0xb
c0020ab7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020abb:	c1 e8 0b             	shr    eax,0xb
c0020abe:	50                   	push   eax
c0020abf:	e8 0f fc ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ac4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ac7:	83 c4 10             	add    esp,0x10
c0020aca:	25 ff 07 00 00       	and    eax,0x7ff
c0020acf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020ad2:	57                   	push   edi
c0020ad3:	6a 28                	push   0x28
c0020ad5:	6a 00                	push   0x0
c0020ad7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020adb:	50                   	push   eax
c0020adc:	e8 aa fb fd ff       	call   c000068b <memset>
c0020ae1:	31 d2                	xor    edx,edx
c0020ae3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020ae6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020aec:	89 f8                	mov    eax,edi
c0020aee:	83 c0 21             	add    eax,0x21
c0020af1:	83 d2 00             	adc    edx,0x0
c0020af4:	89 c7                	mov    edi,eax
c0020af6:	89 d5                	mov    ebp,edx
c0020af8:	83 c4 10             	add    esp,0x10
c0020afb:	31 c9                	xor    ecx,ecx
c0020afd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020b04:	83 f9 28             	cmp    ecx,0x28
c0020b07:	88 04 24             	mov    BYTE PTR [esp],al
c0020b0a:	0f 94 c2             	sete   dl
c0020b0d:	88 d0                	mov    al,dl
c0020b0f:	ba ff 07 00 00       	mov    edx,0x7ff
c0020b14:	39 fa                	cmp    edx,edi
c0020b16:	ba 00 00 00 00       	mov    edx,0x0
c0020b1b:	19 ea                	sbb    edx,ebp
c0020b1d:	0f 92 c2             	setb   dl
c0020b20:	09 c2                	or     edx,eax
c0020b22:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020b26:	0f 94 c0             	sete   al
c0020b29:	08 d0                	or     al,dl
c0020b2b:	75 16                	jne    c0020b43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b2d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020b31:	74 10                	je     c0020b43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b33:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020b36:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b3a:	41                   	inc    ecx
c0020b3b:	83 c7 01             	add    edi,0x1
c0020b3e:	83 d5 00             	adc    ebp,0x0
c0020b41:	eb ba                	jmp    c0020afd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b43:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b4a:	83 ec 0c             	sub    esp,0xc
c0020b4d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b51:	57                   	push   edi
c0020b52:	e8 51 fb fd ff       	call   c00006a8 <strlen>
c0020b57:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020b5f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b63:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020b6a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b6d:	5a                   	pop    edx
c0020b6e:	25 ff 07 00 00       	and    eax,0x7ff
c0020b73:	01 c8                	add    eax,ecx
c0020b75:	59                   	pop    ecx
c0020b76:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020b7c:	83 e0 02             	and    eax,0x2
c0020b7f:	3c 01                	cmp    al,0x1
c0020b81:	19 c0                	sbb    eax,eax
c0020b83:	83 c0 02             	add    eax,0x2
c0020b86:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b8a:	57                   	push   edi
c0020b8b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020b8f:	50                   	push   eax
c0020b90:	e8 95 fb fd ff       	call   c000072a <strcpy>
c0020b95:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	84 c0                	test   al,al
c0020b9e:	75 21                	jne    c0020bc1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020ba0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020ba8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020bb0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bb8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020bbf:	eb 28                	jmp    c0020be9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bc1:	fe c8                	dec    al
c0020bc3:	75 24                	jne    c0020be9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bc5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020bcd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020bd5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bdd:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020be4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020be9:	0f b6 fb             	movzx  edi,bl
c0020bec:	31 db                	xor    ebx,ebx
c0020bee:	50                   	push   eax
c0020bef:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020bf6:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020bfa:	50                   	push   eax
c0020bfb:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020c02:	e8 4e fa fd ff       	call   c0000655 <memcpy>
c0020c07:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020c0e:	89 f9                	mov    ecx,edi
c0020c10:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c16:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020c19:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c1c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020c1f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c22:	83 c4 10             	add    esp,0x10
c0020c25:	39 c7                	cmp    edi,eax
c0020c27:	89 df                	mov    edi,ebx
c0020c29:	19 d7                	sbb    edi,edx
c0020c2b:	72 10                	jb     c0020c3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020c2d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020c34:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c3b:	eb 0a                	jmp    c0020c47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c3d:	29 c8                	sub    eax,ecx
c0020c3f:	19 da                	sbb    edx,ebx
c0020c41:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c44:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c47:	31 c0                	xor    eax,eax
c0020c49:	eb 05                	jmp    c0020c50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c4b:	b8 04 00 00 00       	mov    eax,0x4
c0020c50:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c56:	5b                   	pop    ebx
c0020c57:	5e                   	pop    esi
c0020c58:	5f                   	pop    edi
c0020c59:	5d                   	pop    ebp
c0020c5a:	c3                   	ret    

c0020c5b <readRoot(unsigned int*, unsigned int*, char)>:
c0020c5b:	81 ec 40 08 00 00    	sub    esp,0x840
c0020c61:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020c69:	50                   	push   eax
c0020c6a:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020c6e:	50                   	push   eax
c0020c6f:	6a 10                	push   0x10
c0020c71:	e8 5d fa ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c76:	83 c4 0c             	add    esp,0xc
c0020c79:	6a 22                	push   0x22
c0020c7b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020c82:	50                   	push   eax
c0020c83:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020c87:	50                   	push   eax
c0020c88:	e8 c8 f9 fd ff       	call   c0000655 <memcpy>
c0020c8d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020c94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020c98:	89 10                	mov    DWORD PTR [eax],edx
c0020c9a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020ca1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ca5:	89 10                	mov    DWORD PTR [eax],edx
c0020ca7:	b0 01                	mov    al,0x1
c0020ca9:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020caf:	c3                   	ret    

c0020cb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020cb0:	55                   	push   ebp
c0020cb1:	57                   	push   edi
c0020cb2:	56                   	push   esi
c0020cb3:	53                   	push   ebx
c0020cb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cba:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020cc1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020cc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ccc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020cd0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020cd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cd8:	75 03                	jne    c0020cdd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020cda:	83 c3 02             	add    ebx,0x2
c0020cdd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020ce0:	75 03                	jne    c0020ce5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020ce2:	43                   	inc    ebx
c0020ce3:	eb f8                	jmp    c0020cdd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020ce5:	51                   	push   ecx
c0020ce6:	68 00 01 00 00       	push   0x100
c0020ceb:	6a 00                	push   0x0
c0020ced:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020cf1:	50                   	push   eax
c0020cf2:	e8 94 f9 fd ff       	call   c000068b <memset>
c0020cf7:	83 c4 10             	add    esp,0x10
c0020cfa:	31 d2                	xor    edx,edx
c0020cfc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020cff:	84 c0                	test   al,al
c0020d01:	74 21                	je     c0020d24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020d03:	3c 2f                	cmp    al,0x2f
c0020d05:	75 0b                	jne    c0020d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020d07:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020d0b:	bd 01 00 00 00       	mov    ebp,0x1
c0020d10:	eb 14                	jmp    c0020d26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020d12:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020d15:	80 f9 19             	cmp    cl,0x19
c0020d18:	77 03                	ja     c0020d1d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020d1a:	83 e8 20             	sub    eax,0x20
c0020d1d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020d21:	42                   	inc    edx
c0020d22:	eb d8                	jmp    c0020cfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020d24:	31 ed                	xor    ebp,ebp
c0020d26:	83 ec 0c             	sub    esp,0xc
c0020d29:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020d30:	e8 9f e7 fe ff       	call   c000f4d4 <malloc>
c0020d35:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d3c:	89 c6                	mov    esi,eax
c0020d3e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d44:	c1 ef 0b             	shr    edi,0xb
c0020d47:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d4e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d52:	83 c4 10             	add    esp,0x10
c0020d55:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d5e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020d65:	74 28                	je     c0020d8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020d67:	52                   	push   edx
c0020d68:	57                   	push   edi
c0020d69:	50                   	push   eax
c0020d6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d6e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020d75:	e8 59 f9 ff ff       	call   c00206d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d7e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020d85:	05 00 08 00 00       	add    eax,0x800
c0020d8a:	83 c4 10             	add    esp,0x10
c0020d8d:	eb cb                	jmp    c0020d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020d8f:	83 ec 0c             	sub    esp,0xc
c0020d92:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020d96:	57                   	push   edi
c0020d97:	e8 0c f9 fd ff       	call   c00006a8 <strlen>
c0020d9c:	50                   	push   eax
c0020d9d:	57                   	push   edi
c0020d9e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020da5:	56                   	push   esi
c0020da6:	e8 e6 f8 ff ff       	call   c0020691 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020dab:	83 c4 20             	add    esp,0x20
c0020dae:	85 c0                	test   eax,eax
c0020db0:	75 13                	jne    c0020dc5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020db2:	83 ec 0c             	sub    esp,0xc
c0020db5:	56                   	push   esi
c0020db6:	e8 29 e7 fe ff       	call   c000f4e4 <free>
c0020dbb:	83 c4 10             	add    esp,0x10
c0020dbe:	31 c0                	xor    eax,eax
c0020dc0:	e9 b3 00 00 00       	jmp    c0020e78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020dc5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020dc9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020dcd:	c1 e7 08             	shl    edi,0x8
c0020dd0:	c1 e2 10             	shl    edx,0x10
c0020dd3:	09 d7                	or     edi,edx
c0020dd5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020dd9:	09 d7                	or     edi,edx
c0020ddb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020ddf:	c1 e2 18             	shl    edx,0x18
c0020de2:	09 d7                	or     edi,edx
c0020de4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020de8:	89 d1                	mov    ecx,edx
c0020dea:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020dee:	c1 e1 08             	shl    ecx,0x8
c0020df1:	c1 e2 10             	shl    edx,0x10
c0020df4:	09 ca                	or     edx,ecx
c0020df6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020dfa:	09 ca                	or     edx,ecx
c0020dfc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020e00:	c1 e1 18             	shl    ecx,0x18
c0020e03:	09 ca                	or     edx,ecx
c0020e05:	89 e9                	mov    ecx,ebp
c0020e07:	84 c9                	test   cl,cl
c0020e09:	74 3c                	je     c0020e47 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020e0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e0f:	83 ec 0c             	sub    esp,0xc
c0020e12:	56                   	push   esi
c0020e13:	e8 cc e6 fe ff       	call   c000f4e4 <free>
c0020e18:	83 c4 0c             	add    esp,0xc
c0020e1b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e22:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020e27:	50                   	push   eax
c0020e28:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e2f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e3a:	52                   	push   edx
c0020e3b:	57                   	push   edi
c0020e3c:	53                   	push   ebx
c0020e3d:	e8 6e fe ff ff       	call   c0020cb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e42:	83 c4 20             	add    esp,0x20
c0020e45:	eb 31                	jmp    c0020e78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e47:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e4a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e51:	d0 e8                	shr    al,1
c0020e53:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e55:	83 e0 01             	and    eax,0x1
c0020e58:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020e5f:	83 ec 0c             	sub    esp,0xc
c0020e62:	89 13                	mov    DWORD PTR [ebx],edx
c0020e64:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020e6b:	89 03                	mov    DWORD PTR [ebx],eax
c0020e6d:	56                   	push   esi
c0020e6e:	e8 71 e6 fe ff       	call   c000f4e4 <free>
c0020e73:	83 c4 10             	add    esp,0x10
c0020e76:	b0 01                	mov    al,0x1
c0020e78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e7e:	5b                   	pop    ebx
c0020e7f:	5e                   	pop    esi
c0020e80:	5f                   	pop    edi
c0020e81:	5d                   	pop    ebp
c0020e82:	c3                   	ret    

c0020e83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020e83:	55                   	push   ebp
c0020e84:	57                   	push   edi
c0020e85:	56                   	push   esi
c0020e86:	53                   	push   ebx
c0020e87:	83 ec 20             	sub    esp,0x20
c0020e8a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020e8e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020e92:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020e96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e9e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020ea6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020eab:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020eb1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020eb7:	57                   	push   edi
c0020eb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ebc:	50                   	push   eax
c0020ebd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ec1:	50                   	push   eax
c0020ec2:	e8 94 fd ff ff       	call   c0020c5b <readRoot(unsigned int*, unsigned int*, char)>
c0020ec7:	5a                   	pop    edx
c0020ec8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ecc:	e8 d7 f7 fd ff       	call   c00006a8 <strlen>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	83 f8 03             	cmp    eax,0x3
c0020ed7:	77 17                	ja     c0020ef0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020ed9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020edd:	89 03                	mov    DWORD PTR [ebx],eax
c0020edf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ee3:	89 06                	mov    DWORD PTR [esi],eax
c0020ee5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020eec:	b0 01                	mov    al,0x1
c0020eee:	eb 19                	jmp    c0020f09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020ef0:	50                   	push   eax
c0020ef1:	55                   	push   ebp
c0020ef2:	57                   	push   edi
c0020ef3:	56                   	push   esi
c0020ef4:	53                   	push   ebx
c0020ef5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ef9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020efd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020f01:	e8 aa fd ff ff       	call   c0020cb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020f06:	83 c4 20             	add    esp,0x20
c0020f09:	83 c4 1c             	add    esp,0x1c
c0020f0c:	5b                   	pop    ebx
c0020f0d:	5e                   	pop    esi
c0020f0e:	5f                   	pop    edi
c0020f0f:	5d                   	pop    ebp
c0020f10:	c3                   	ret    
c0020f11:	90                   	nop

c0020f12 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020f12:	57                   	push   edi
c0020f13:	56                   	push   esi
c0020f14:	53                   	push   ebx
c0020f15:	83 ec 10             	sub    esp,0x10
c0020f18:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f1c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f20:	85 ff                	test   edi,edi
c0020f22:	74 7b                	je     c0020f9f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f24:	85 f6                	test   esi,esi
c0020f26:	74 77                	je     c0020f9f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f28:	83 ec 0c             	sub    esp,0xc
c0020f2b:	6a 1c                	push   0x1c
c0020f2d:	e8 a2 e5 fe ff       	call   c000f4d4 <malloc>
c0020f32:	89 07                	mov    DWORD PTR [edi],eax
c0020f34:	89 c3                	mov    ebx,eax
c0020f36:	58                   	pop    eax
c0020f37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f3b:	50                   	push   eax
c0020f3c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f3f:	50                   	push   eax
c0020f40:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f44:	50                   	push   eax
c0020f45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f49:	50                   	push   eax
c0020f4a:	56                   	push   esi
c0020f4b:	e8 33 ff ff ff       	call   c0020e83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f50:	83 c4 20             	add    esp,0x20
c0020f53:	84 c0                	test   al,al
c0020f55:	74 07                	je     c0020f5e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020f57:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f5c:	74 0b                	je     c0020f69 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020f5e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020f62:	b8 01 00 00 00       	mov    eax,0x1
c0020f67:	eb 3b                	jmp    c0020fa4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f6d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020f71:	89 03                	mov    DWORD PTR [ebx],eax
c0020f73:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020f7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f7e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020f85:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f8c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020f8f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020f96:	8a 06                	mov    al,BYTE PTR [esi]
c0020f98:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020f9b:	31 c0                	xor    eax,eax
c0020f9d:	eb 05                	jmp    c0020fa4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f9f:	b8 04 00 00 00       	mov    eax,0x4
c0020fa4:	83 c4 10             	add    esp,0x10
c0020fa7:	5b                   	pop    ebx
c0020fa8:	5e                   	pop    esi
c0020fa9:	5f                   	pop    edi
c0020faa:	c3                   	ret    
c0020fab:	90                   	nop

c0020fac <ISO9660::exists(char const*)>:
c0020fac:	83 ec 28             	sub    esp,0x28
c0020faf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020fb3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020fb7:	52                   	push   edx
c0020fb8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020fbb:	52                   	push   edx
c0020fbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fc0:	52                   	push   edx
c0020fc1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fc5:	52                   	push   edx
c0020fc6:	50                   	push   eax
c0020fc7:	e8 b7 fe ff ff       	call   c0020e83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fcc:	83 c4 3c             	add    esp,0x3c
c0020fcf:	c3                   	ret    

c0020fd0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020fd0:	56                   	push   esi
c0020fd1:	53                   	push   ebx
c0020fd2:	83 ec 14             	sub    esp,0x14
c0020fd5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020fd9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020fdd:	85 db                	test   ebx,ebx
c0020fdf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020fe3:	0f 94 c2             	sete   dl
c0020fe6:	85 f6                	test   esi,esi
c0020fe8:	0f 94 c0             	sete   al
c0020feb:	08 c2                	or     dl,al
c0020fed:	75 68                	jne    c0021057 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fef:	85 c9                	test   ecx,ecx
c0020ff1:	74 64                	je     c0021057 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020ff3:	83 ec 0c             	sub    esp,0xc
c0020ff6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020ff9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ffd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021003:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002100a:	50                   	push   eax
c002100b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002100e:	50                   	push   eax
c002100f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021013:	50                   	push   eax
c0021014:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021018:	50                   	push   eax
c0021019:	51                   	push   ecx
c002101a:	e8 64 fe ff ff       	call   c0020e83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002101f:	83 c4 20             	add    esp,0x20
c0021022:	ba 01 00 00 00       	mov    edx,0x1
c0021027:	84 c0                	test   al,al
c0021029:	74 31                	je     c002105c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002102b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002102f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021036:	89 03                	mov    DWORD PTR [ebx],eax
c0021038:	ba 00 00 00 00       	mov    edx,0x0
c002103d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021041:	85 c0                	test   eax,eax
c0021043:	0f 95 06             	setne  BYTE PTR [esi]
c0021046:	74 14                	je     c002105c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021048:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002104e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021055:	eb 05                	jmp    c002105c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021057:	ba 04 00 00 00       	mov    edx,0x4
c002105c:	83 c4 14             	add    esp,0x14
c002105f:	89 d0                	mov    eax,edx
c0021061:	5b                   	pop    ebx
c0021062:	5e                   	pop    esi
c0021063:	c3                   	ret    

c0021064 <ISO9660::openDir(char const*, void**)>:
c0021064:	57                   	push   edi
c0021065:	56                   	push   esi
c0021066:	53                   	push   ebx
c0021067:	83 ec 10             	sub    esp,0x10
c002106a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002106e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021072:	85 ff                	test   edi,edi
c0021074:	0f 84 95 00 00 00    	je     c002110f <ISO9660::openDir(char const*, void**)+0xab>
c002107a:	85 f6                	test   esi,esi
c002107c:	0f 84 8d 00 00 00    	je     c002110f <ISO9660::openDir(char const*, void**)+0xab>
c0021082:	83 ec 0c             	sub    esp,0xc
c0021085:	6a 1c                	push   0x1c
c0021087:	e8 48 e4 fe ff       	call   c000f4d4 <malloc>
c002108c:	89 07                	mov    DWORD PTR [edi],eax
c002108e:	89 c3                	mov    ebx,eax
c0021090:	59                   	pop    ecx
c0021091:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021095:	50                   	push   eax
c0021096:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021099:	50                   	push   eax
c002109a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002109e:	50                   	push   eax
c002109f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210a3:	50                   	push   eax
c00210a4:	56                   	push   esi
c00210a5:	e8 d9 fd ff ff       	call   c0020e83 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00210aa:	83 c4 20             	add    esp,0x20
c00210ad:	84 c0                	test   al,al
c00210af:	74 07                	je     c00210b8 <ISO9660::openDir(char const*, void**)+0x54>
c00210b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00210b6:	75 21                	jne    c00210d9 <ISO9660::openDir(char const*, void**)+0x75>
c00210b8:	0f b6 c0             	movzx  eax,al
c00210bb:	52                   	push   edx
c00210bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210c0:	50                   	push   eax
c00210c1:	68 ba ae 02 c0       	push   0xc002aeba
c00210c6:	e8 be 16 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00210cb:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00210cf:	83 c4 10             	add    esp,0x10
c00210d2:	b8 01 00 00 00       	mov    eax,0x1
c00210d7:	eb 3b                	jmp    c0021114 <ISO9660::openDir(char const*, void**)+0xb0>
c00210d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00210e1:	89 03                	mov    DWORD PTR [ebx],eax
c00210e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00210ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00210f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00210ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021106:	8a 06                	mov    al,BYTE PTR [esi]
c0021108:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002110b:	31 c0                	xor    eax,eax
c002110d:	eb 05                	jmp    c0021114 <ISO9660::openDir(char const*, void**)+0xb0>
c002110f:	b8 04 00 00 00       	mov    eax,0x4
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	5b                   	pop    ebx
c0021118:	5e                   	pop    esi
c0021119:	5f                   	pop    edi
c002111a:	c3                   	ret    
c002111b:	90                   	nop

c002111c <ISO9660::ISO9660()>:
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021123:	83 ec 0c             	sub    esp,0xc
c0021126:	50                   	push   eax
c0021127:	e8 62 19 ff ff       	call   c0012a8e <Filesystem::Filesystem()>
c002112c:	83 c4 10             	add    esp,0x10
c002112f:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c0021134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021138:	89 10                	mov    DWORD PTR [eax],edx
c002113a:	90                   	nop
c002113b:	83 c4 0c             	add    esp,0xc
c002113e:	c3                   	ret    
c002113f:	90                   	nop

c0021140 <SoundChannel::~SoundChannel()>:
c0021140:	83 ec 0c             	sub    esp,0xc
c0021143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021147:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002114a:	83 ec 0c             	sub    esp,0xc
c002114d:	50                   	push   eax
c002114e:	e8 91 e3 fe ff       	call   c000f4e4 <free>
c0021153:	83 c4 10             	add    esp,0x10
c0021156:	90                   	nop
c0021157:	83 c4 0c             	add    esp,0xc
c002115a:	c3                   	ret    
c002115b:	90                   	nop

c002115c <SoundChannel::setSpeed(float)>:
c002115c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021164:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021167:	c3                   	ret    

c0021168 <SoundChannel::getSpeed()>:
c0021168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002116c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002116f:	c3                   	ret    

c0021170 <SoundChannel::setVolume(int)>:
c0021170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021174:	83 f8 64             	cmp    eax,0x64
c0021177:	7e 05                	jle    c002117e <SoundChannel::setVolume(int)+0xe>
c0021179:	b8 64 00 00 00       	mov    eax,0x64
c002117e:	85 c0                	test   eax,eax
c0021180:	79 02                	jns    c0021184 <SoundChannel::setVolume(int)+0x14>
c0021182:	31 c0                	xor    eax,eax
c0021184:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021188:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002118b:	c3                   	ret    

c002118c <SoundChannel::getVolume()>:
c002118c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021190:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021193:	c3                   	ret    

c0021194 <SoundChannel::pause()>:
c0021194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021198:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002119c:	c3                   	ret    
c002119d:	90                   	nop

c002119e <SoundChannel::SoundChannel(int, int, int, int)>:
c002119e:	83 ec 1c             	sub    esp,0x1c
c00211a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211a5:	e8 ea ff ff ff       	call   c0021194 <SoundChannel::pause()>
c00211aa:	83 c4 04             	add    esp,0x4
c00211ad:	6a 50                	push   0x50
c00211af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211b3:	e8 b8 ff ff ff       	call   c0021170 <SoundChannel::setVolume(int)>
c00211b8:	83 c4 08             	add    esp,0x8
c00211bb:	a1 58 af 02 c0       	mov    eax,ds:0xc002af58
c00211c0:	50                   	push   eax
c00211c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211c5:	e8 92 ff ff ff       	call   c002115c <SoundChannel::setSpeed(float)>
c00211ca:	83 c4 08             	add    esp,0x8
c00211cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00211d5:	89 10                	mov    DWORD PTR [eax],edx
c00211d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00211df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211e6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00211ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211ed:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00211f2:	75 23                	jne    c0021217 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00211f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00211fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021201:	0f af c2             	imul   eax,edx
c0021204:	85 c0                	test   eax,eax
c0021206:	79 03                	jns    c002120b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021208:	83 c0 03             	add    eax,0x3
c002120b:	c1 f8 02             	sar    eax,0x2
c002120e:	05 a0 0f 00 00       	add    eax,0xfa0
c0021213:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002121b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002121f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021226:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002122d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021231:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002123c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002123f:	c1 e0 02             	shl    eax,0x2
c0021242:	83 ec 0c             	sub    esp,0xc
c0021245:	50                   	push   eax
c0021246:	e8 89 e2 fe ff       	call   c000f4d4 <malloc>
c002124b:	83 c4 10             	add    esp,0x10
c002124e:	89 c2                	mov    edx,eax
c0021250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021254:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021257:	83 ec 04             	sub    esp,0x4
c002125a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002125e:	50                   	push   eax
c002125f:	6a 01                	push   0x1
c0021261:	6a 04                	push   0x4
c0021263:	e8 e7 76 fe ff       	call   c000894f <src_new>
c0021268:	83 c4 10             	add    esp,0x10
c002126b:	89 c2                	mov    edx,eax
c002126d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021271:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021278:	85 c0                	test   eax,eax
c002127a:	74 10                	je     c002128c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002127c:	83 ec 0c             	sub    esp,0xc
c002127f:	68 3c af 02 c0       	push   0xc002af3c
c0021284:	e8 1a 86 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0021289:	83 c4 10             	add    esp,0x10
c002128c:	a0 a0 ec 02 c0       	mov    al,ds:0xc002eca0
c0021291:	83 f0 01             	xor    eax,0x1
c0021294:	84 c0                	test   al,al
c0021296:	74 57                	je     c00212ef <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021298:	a1 5c af 02 c0       	mov    eax,ds:0xc002af5c
c002129d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00212a9:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00212b1:	7f 35                	jg     c00212e8 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00212b3:	83 ec 0c             	sub    esp,0xc
c00212b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00212ba:	e8 28 4a 00 00       	call   c0025ce7 <__floatsisf>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	8b 15 5c af 02 c0    	mov    edx,DWORD PTR ds:0xc002af5c
c00212c8:	83 ec 08             	sub    esp,0x8
c00212cb:	52                   	push   edx
c00212cc:	50                   	push   eax
c00212cd:	e8 27 46 00 00       	call   c00258f9 <__mulsf3>
c00212d2:	83 c4 10             	add    esp,0x10
c00212d5:	89 c2                	mov    edx,eax
c00212d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212db:	89 14 85 a0 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1760],edx
c00212e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00212e6:	eb c1                	jmp    c00212a9 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00212e8:	c6 05 a0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca0,0x1
c00212ef:	90                   	nop
c00212f0:	83 c4 1c             	add    esp,0x1c
c00212f3:	c3                   	ret    

c00212f4 <SoundChannel::play()>:
c00212f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00212fc:	c3                   	ret    
c00212fd:	90                   	nop

c00212fe <SoundChannel::paused()>:
c00212fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021302:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021305:	c3                   	ret    

c0021306 <SoundChannel::getSampleRate()>:
c0021306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002130a:	8b 00                	mov    eax,DWORD PTR [eax]
c002130c:	c3                   	ret    
c002130d:	90                   	nop

c002130e <SoundChannel::getBits()>:
c002130e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021315:	c3                   	ret    

c0021316 <SoundChannel::getBufferUsed()>:
c0021316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002131a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002131d:	c3                   	ret    

c002131e <SoundChannel::getBufferSize()>:
c002131e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021322:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021325:	c3                   	ret    

c0021326 <SoundChannel::unbuffer(float*, int, int)>:
c0021326:	56                   	push   esi
c0021327:	53                   	push   ebx
c0021328:	83 ec 40             	sub    esp,0x40
c002132b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002132f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021332:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021336:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021339:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002133d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021341:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021345:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021349:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002134d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021351:	e8 91 49 00 00       	call   c0025ce7 <__floatsisf>
c0021356:	5a                   	pop    edx
c0021357:	89 c6                	mov    esi,eax
c0021359:	ff 33                	push   DWORD PTR [ebx]
c002135b:	e8 87 49 00 00       	call   c0025ce7 <__floatsisf>
c0021360:	59                   	pop    ecx
c0021361:	5a                   	pop    edx
c0021362:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021365:	50                   	push   eax
c0021366:	e8 8e 45 00 00       	call   c00258f9 <__mulsf3>
c002136b:	59                   	pop    ecx
c002136c:	5a                   	pop    edx
c002136d:	50                   	push   eax
c002136e:	56                   	push   esi
c002136f:	e8 48 47 00 00       	call   c0025abc <__divsf3>
c0021374:	89 04 24             	mov    DWORD PTR [esp],eax
c0021377:	e8 3b 5c 00 00       	call   c0026fb7 <__extendsfdf2>
c002137c:	59                   	pop    ecx
c002137d:	5e                   	pop    esi
c002137e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021382:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021386:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002138e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021392:	50                   	push   eax
c0021393:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021396:	e8 a9 71 fe ff       	call   c0008544 <src_process>
c002139b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002139f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00213a2:	83 c4 0c             	add    esp,0xc
c00213a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00213a8:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00213ab:	29 d0                	sub    eax,edx
c00213ad:	c1 e0 02             	shl    eax,0x2
c00213b0:	50                   	push   eax
c00213b1:	8d 04 91             	lea    eax,[ecx+edx*4]
c00213b4:	50                   	push   eax
c00213b5:	51                   	push   ecx
c00213b6:	e8 62 f2 fd ff       	call   c000061d <memmove>
c00213bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213bf:	83 c4 44             	add    esp,0x44
c00213c2:	5b                   	pop    ebx
c00213c3:	5e                   	pop    esi
c00213c4:	c3                   	ret    
c00213c5:	90                   	nop

c00213c6 <SoundChannel::buffer8(unsigned char*, int)>:
c00213c6:	55                   	push   ebp
c00213c7:	57                   	push   edi
c00213c8:	56                   	push   esi
c00213c9:	53                   	push   ebx
c00213ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213ce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00213d2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213d9:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213dc:	74 7a                	je     c0021458 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213de:	85 ff                	test   edi,edi
c00213e0:	7e 76                	jle    c0021458 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213e2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00213e6:	8d 70 01             	lea    esi,[eax+0x1]
c00213e9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213ec:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213ef:	8b 1c 9d a0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1760]
c00213f6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00213f9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213fc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213ff:	74 5e                	je     c002145f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021401:	83 ff 01             	cmp    edi,0x1
c0021404:	74 4b                	je     c0021451 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021406:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002140a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002140d:	8d 70 01             	lea    esi,[eax+0x1]
c0021410:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021413:	8b 1c 9d a0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1760]
c002141a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002141d:	b8 02 00 00 00       	mov    eax,0x2
c0021422:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021425:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021428:	75 23                	jne    c002144d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002142a:	eb 27                	jmp    c0021453 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002142c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021431:	8d 71 01             	lea    esi,[ecx+0x1]
c0021434:	40                   	inc    eax
c0021435:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021438:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002143b:	8b 1c 9d a0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1760]
c0021442:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021445:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021448:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002144b:	74 06                	je     c0021453 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002144d:	39 c7                	cmp    edi,eax
c002144f:	75 db                	jne    c002142c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021451:	89 f8                	mov    eax,edi
c0021453:	5b                   	pop    ebx
c0021454:	5e                   	pop    esi
c0021455:	5f                   	pop    edi
c0021456:	5d                   	pop    ebp
c0021457:	c3                   	ret    
c0021458:	5b                   	pop    ebx
c0021459:	31 c0                	xor    eax,eax
c002145b:	5e                   	pop    esi
c002145c:	5f                   	pop    edi
c002145d:	5d                   	pop    ebp
c002145e:	c3                   	ret    
c002145f:	b8 01 00 00 00       	mov    eax,0x1
c0021464:	eb ed                	jmp    c0021453 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021466 <SoundDevice::SoundDevice(char const*)>:
c0021466:	83 ec 1c             	sub    esp,0x1c
c0021469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002146d:	83 ec 08             	sub    esp,0x8
c0021470:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021474:	50                   	push   eax
c0021475:	e8 ee 28 ff ff       	call   c0013d68 <Device::Device(char const*)>
c002147a:	83 c4 10             	add    esp,0x10
c002147d:	ba 68 af 02 c0       	mov    edx,0xc002af68
c0021482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021486:	89 10                	mov    DWORD PTR [eax],edx
c0021488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002148c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002149a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00214a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214ac:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214b1:	7f 19                	jg     c00214cc <SoundDevice::SoundDevice(char const*)+0x66>
c00214b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214bb:	83 c2 54             	add    edx,0x54
c00214be:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00214c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00214ca:	eb e0                	jmp    c00214ac <SoundDevice::SoundDevice(char const*)+0x46>
c00214cc:	90                   	nop
c00214cd:	83 c4 1c             	add    esp,0x1c
c00214d0:	c3                   	ret    
c00214d1:	90                   	nop

c00214d2 <SoundDevice::~SoundDevice()>:
c00214d2:	53                   	push   ebx
c00214d3:	83 ec 18             	sub    esp,0x18
c00214d6:	ba 68 af 02 c0       	mov    edx,0xc002af68
c00214db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214df:	89 10                	mov    DWORD PTR [eax],edx
c00214e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214e9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214ee:	7f 46                	jg     c0021536 <SoundDevice::~SoundDevice()+0x64>
c00214f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214f8:	83 c2 54             	add    edx,0x54
c00214fb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00214ff:	85 c0                	test   eax,eax
c0021501:	74 2d                	je     c0021530 <SoundDevice::~SoundDevice()+0x5e>
c0021503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021507:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002150b:	83 c2 54             	add    edx,0x54
c002150e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021512:	85 db                	test   ebx,ebx
c0021514:	74 1a                	je     c0021530 <SoundDevice::~SoundDevice()+0x5e>
c0021516:	83 ec 0c             	sub    esp,0xc
c0021519:	53                   	push   ebx
c002151a:	e8 21 fc ff ff       	call   c0021140 <SoundChannel::~SoundChannel()>
c002151f:	83 c4 10             	add    esp,0x10
c0021522:	83 ec 08             	sub    esp,0x8
c0021525:	6a 2c                	push   0x2c
c0021527:	53                   	push   ebx
c0021528:	e8 7c 11 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c002152d:	83 c4 10             	add    esp,0x10
c0021530:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021534:	eb b3                	jmp    c00214e9 <SoundDevice::~SoundDevice()+0x17>
c0021536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002153a:	83 ec 0c             	sub    esp,0xc
c002153d:	50                   	push   eax
c002153e:	e8 07 25 ff ff       	call   c0013a4a <Device::~Device()>
c0021543:	83 c4 10             	add    esp,0x10
c0021546:	90                   	nop
c0021547:	83 c4 18             	add    esp,0x18
c002154a:	5b                   	pop    ebx
c002154b:	c3                   	ret    

c002154c <SoundDevice::~SoundDevice()>:
c002154c:	83 ec 0c             	sub    esp,0xc
c002154f:	83 ec 0c             	sub    esp,0xc
c0021552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021556:	e8 77 ff ff ff       	call   c00214d2 <SoundDevice::~SoundDevice()>
c002155b:	83 c4 10             	add    esp,0x10
c002155e:	83 ec 08             	sub    esp,0x8
c0021561:	68 e4 01 00 00       	push   0x1e4
c0021566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002156a:	e8 3a 11 ff ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	83 c4 0c             	add    esp,0xc
c0021575:	c3                   	ret    

c0021576 <SoundDevice::getFreeChannelNum()>:
c0021576:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002157a:	31 c0                	xor    eax,eax
c002157c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021584:	74 09                	je     c002158f <SoundDevice::getFreeChannelNum()+0x19>
c0021586:	40                   	inc    eax
c0021587:	83 f8 20             	cmp    eax,0x20
c002158a:	75 f0                	jne    c002157c <SoundDevice::getFreeChannelNum()+0x6>
c002158c:	83 c8 ff             	or     eax,0xffffffff
c002158f:	c3                   	ret    

c0021590 <SoundDevice::addChannel(SoundChannel*)>:
c0021590:	56                   	push   esi
c0021591:	53                   	push   ebx
c0021592:	51                   	push   ecx
c0021593:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021597:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002159b:	53                   	push   ebx
c002159c:	e8 d5 ff ff ff       	call   c0021576 <SoundDevice::getFreeChannelNum()>
c00215a1:	5a                   	pop    edx
c00215a2:	83 f8 ff             	cmp    eax,0xffffffff
c00215a5:	74 51                	je     c00215f8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215a7:	85 f6                	test   esi,esi
c00215a9:	74 4d                	je     c00215f8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215ab:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00215b2:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00215b9:	75 30                	jne    c00215eb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00215bb:	83 ec 0c             	sub    esp,0xc
c00215be:	56                   	push   esi
c00215bf:	e8 42 fd ff ff       	call   c0021306 <SoundChannel::getSampleRate()>
c00215c4:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00215ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00215cd:	e8 3c fd ff ff       	call   c002130e <SoundChannel::getBits()>
c00215d2:	83 c4 0c             	add    esp,0xc
c00215d5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00215db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215dd:	50                   	push   eax
c00215de:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00215e4:	53                   	push   ebx
c00215e5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00215e8:	83 c4 10             	add    esp,0x10
c00215eb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00215f1:	b8 01 00 00 00       	mov    eax,0x1
c00215f6:	eb 03                	jmp    c00215fb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00215f8:	83 c8 ff             	or     eax,0xffffffff
c00215fb:	5a                   	pop    edx
c00215fc:	5b                   	pop    ebx
c00215fd:	5e                   	pop    esi
c00215fe:	c3                   	ret    
c00215ff:	90                   	nop

c0021600 <SoundDevice::removeChannel(int)>:
c0021600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021608:	83 fa 1f             	cmp    edx,0x1f
c002160b:	77 23                	ja     c0021630 <SoundDevice::removeChannel(int)+0x30>
c002160d:	8d 14 90             	lea    edx,[eax+edx*4]
c0021610:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021617:	74 17                	je     c0021630 <SoundDevice::removeChannel(int)+0x30>
c0021619:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021623:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021629:	75 05                	jne    c0021630 <SoundDevice::removeChannel(int)+0x30>
c002162b:	8b 00                	mov    eax,DWORD PTR [eax]
c002162d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021630:	c3                   	ret    
c0021631:	90                   	nop

c0021632 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021632:	57                   	push   edi
c0021633:	56                   	push   esi
c0021634:	53                   	push   ebx
c0021635:	31 db                	xor    ebx,ebx
c0021637:	83 ec 10             	sub    esp,0x10
c002163a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002163e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021642:	0f 8d cb 00 00 00    	jge    c0021713 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021648:	83 ec 0c             	sub    esp,0xc
c002164b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002164f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021652:	e8 60 59 00 00       	call   c0026fb7 <__extendsfdf2>
c0021657:	83 c4 10             	add    esp,0x10
c002165a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002165e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021662:	68 00 00 f0 3f       	push   0x3ff00000
c0021667:	6a 00                	push   0x0
c0021669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002166d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021671:	e8 cd 48 00 00       	call   c0025f43 <__adddf3>
c0021676:	83 c4 10             	add    esp,0x10
c0021679:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002167d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021681:	68 00 00 e0 3f       	push   0x3fe00000
c0021686:	6a 00                	push   0x0
c0021688:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002168c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021690:	e8 2b 4f 00 00       	call   c00265c0 <__muldf3>
c0021695:	83 c4 10             	add    esp,0x10
c0021698:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002169c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216a0:	68 00 00 60 40       	push   0x40600000
c00216a5:	6a 00                	push   0x0
c00216a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216af:	e8 0c 4f 00 00       	call   c00265c0 <__muldf3>
c00216b4:	59                   	pop    ecx
c00216b5:	5f                   	pop    edi
c00216b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00216ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00216be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216c6:	e8 c8 57 00 00       	call   c0026e93 <__truncdfsf2>
c00216cb:	5a                   	pop    edx
c00216cc:	89 c7                	mov    edi,eax
c00216ce:	59                   	pop    ecx
c00216cf:	68 00 00 fe 42       	push   0x42fe0000
c00216d4:	50                   	push   eax
c00216d5:	e8 63 48 00 00       	call   c0025f3d <__gesf2>
c00216da:	83 c4 10             	add    esp,0x10
c00216dd:	85 c0                	test   eax,eax
c00216df:	78 06                	js     c00216e7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00216e1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00216e5:	eb 26                	jmp    c002170d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216e7:	50                   	push   eax
c00216e8:	50                   	push   eax
c00216e9:	6a 00                	push   0x0
c00216eb:	57                   	push   edi
c00216ec:	e8 50 48 00 00       	call   c0025f41 <__lesf2>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	85 c0                	test   eax,eax
c00216f6:	7f 06                	jg     c00216fe <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00216f8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00216fc:	eb 0f                	jmp    c002170d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216fe:	83 ec 0c             	sub    esp,0xc
c0021701:	57                   	push   edi
c0021702:	e8 45 59 00 00       	call   c002704c <lrintf>
c0021707:	83 c4 10             	add    esp,0x10
c002170a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002170d:	43                   	inc    ebx
c002170e:	e9 2b ff ff ff       	jmp    c002163e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021713:	83 c4 10             	add    esp,0x10
c0021716:	5b                   	pop    ebx
c0021717:	5e                   	pop    esi
c0021718:	5f                   	pop    edi
c0021719:	c3                   	ret    

c002171a <SoundDevice::getAudio(int, float*, float*)>:
c002171a:	55                   	push   ebp
c002171b:	57                   	push   edi
c002171c:	56                   	push   esi
c002171d:	53                   	push   ebx
c002171e:	31 db                	xor    ebx,ebx
c0021720:	83 ec 20             	sub    esp,0x20
c0021723:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021727:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002172b:	c1 e0 02             	shl    eax,0x2
c002172e:	50                   	push   eax
c002172f:	6a 00                	push   0x0
c0021731:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021735:	e8 51 ef fd ff       	call   c000068b <memset>
c002173a:	83 c4 10             	add    esp,0x10
c002173d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021741:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021748:	85 c0                	test   eax,eax
c002174a:	0f 84 d7 00 00 00    	je     c0021827 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021750:	83 ec 0c             	sub    esp,0xc
c0021753:	50                   	push   eax
c0021754:	e8 a5 fb ff ff       	call   c00212fe <SoundChannel::paused()>
c0021759:	83 c4 10             	add    esp,0x10
c002175c:	84 c0                	test   al,al
c002175e:	0f 85 c3 00 00 00    	jne    c0021827 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021764:	83 ec 0c             	sub    esp,0xc
c0021767:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002176e:	e8 19 fa ff ff       	call   c002118c <SoundChannel::getVolume()>
c0021773:	83 c4 10             	add    esp,0x10
c0021776:	85 c0                	test   eax,eax
c0021778:	0f 84 a9 00 00 00    	je     c0021827 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002177e:	83 ec 0c             	sub    esp,0xc
c0021781:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021788:	e8 ff f9 ff ff       	call   c002118c <SoundChannel::getVolume()>
c002178d:	83 ec 0c             	sub    esp,0xc
c0021790:	50                   	push   eax
c0021791:	e8 51 45 00 00       	call   c0025ce7 <__floatsisf>
c0021796:	59                   	pop    ecx
c0021797:	5d                   	pop    ebp
c0021798:	31 ed                	xor    ebp,ebp
c002179a:	68 00 00 c8 42       	push   0x42c80000
c002179f:	50                   	push   eax
c00217a0:	e8 17 43 00 00       	call   c0025abc <__divsf3>
c00217a5:	83 c4 10             	add    esp,0x10
c00217a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00217b0:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00217b6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00217ba:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217c1:	e8 60 fb ff ff       	call   c0021326 <SoundChannel::unbuffer(float*, int, int)>
c00217c6:	83 c4 20             	add    esp,0x20
c00217c9:	89 c1                	mov    ecx,eax
c00217cb:	39 cd                	cmp    ebp,ecx
c00217cd:	7d 52                	jge    c0021821 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00217cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00217d3:	50                   	push   eax
c00217d4:	50                   	push   eax
c00217d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00217d9:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217e0:	e8 14 41 00 00       	call   c00258f9 <__mulsf3>
c00217e5:	5a                   	pop    edx
c00217e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217ea:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00217f0:	e8 f2 44 00 00       	call   c0025ce7 <__floatsisf>
c00217f5:	59                   	pop    ecx
c00217f6:	5a                   	pop    edx
c00217f7:	50                   	push   eax
c00217f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00217fc:	e8 bb 42 00 00       	call   c0025abc <__divsf3>
c0021801:	59                   	pop    ecx
c0021802:	5a                   	pop    edx
c0021803:	50                   	push   eax
c0021804:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021808:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002180b:	e8 c6 3d 00 00       	call   c00255d6 <__addsf3>
c0021810:	83 c4 10             	add    esp,0x10
c0021813:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021817:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002181b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002181e:	45                   	inc    ebp
c002181f:	eb aa                	jmp    c00217cb <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021821:	39 cf                	cmp    edi,ecx
c0021823:	7e 02                	jle    c0021827 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021825:	89 cf                	mov    edi,ecx
c0021827:	43                   	inc    ebx
c0021828:	83 fb 20             	cmp    ebx,0x20
c002182b:	0f 85 10 ff ff ff    	jne    c0021741 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021831:	83 c4 1c             	add    esp,0x1c
c0021834:	89 f8                	mov    eax,edi
c0021836:	5b                   	pop    ebx
c0021837:	5e                   	pop    esi
c0021838:	5f                   	pop    edi
c0021839:	5d                   	pop    ebp
c002183a:	c3                   	ret    
c002183b:	90                   	nop

c002183c <PCI::open(int, int, void*)>:
c002183c:	83 ec 18             	sub    esp,0x18
c002183f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021843:	8b 10                	mov    edx,DWORD PTR [eax]
c0021845:	50                   	push   eax
c0021846:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021849:	31 c0                	xor    eax,eax
c002184b:	83 c4 1c             	add    esp,0x1c
c002184e:	c3                   	ret    
c002184f:	90                   	nop

c0021850 <PCI::close(int, int, void*)>:
c0021850:	31 c0                	xor    eax,eax
c0021852:	c3                   	ret    
c0021853:	90                   	nop

c0021854 <PCI::PCI()>:
c0021854:	83 ec 0c             	sub    esp,0xc
c0021857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185b:	83 ec 08             	sub    esp,0x8
c002185e:	68 98 af 02 c0       	push   0xc002af98
c0021863:	50                   	push   eax
c0021864:	e8 bb 1b ff ff       	call   c0013424 <Bus::Bus(char const*)>
c0021869:	83 c4 10             	add    esp,0x10
c002186c:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c0021871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021875:	89 10                	mov    DWORD PTR [eax],edx
c0021877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002187b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021881:	0f b6 d0             	movzx  edx,al
c0021884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021888:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021899:	0f b6 d0             	movzx  edx,al
c002189c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a0:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00218a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218af:	8d 50 01             	lea    edx,[eax+0x1]
c00218b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218b6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00218bc:	0f b6 d0             	movzx  edx,al
c00218bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00218c7:	83 c9 c0             	or     ecx,0xffffffc0
c00218ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00218ce:	90                   	nop
c00218cf:	83 c4 0c             	add    esp,0xc
c00218d2:	c3                   	ret    
c00218d3:	90                   	nop

c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00218d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00218dd:	89 ca                	mov    edx,ecx
c00218df:	c1 e0 10             	shl    eax,0x10
c00218e2:	81 e2 fc 00 00 00    	and    edx,0xfc
c00218e8:	09 d0                	or     eax,edx
c00218ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00218ef:	c1 e2 08             	shl    edx,0x8
c00218f2:	09 d0                	or     eax,edx
c00218f4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00218f9:	c1 e2 0b             	shl    edx,0xb
c00218fc:	09 d0                	or     eax,edx
c00218fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021903:	0d 00 00 00 80       	or     eax,0x80000000
c0021908:	ef                   	out    dx,eax
c0021909:	ba fc 0c 00 00       	mov    edx,0xcfc
c002190e:	ed                   	in     eax,dx
c002190f:	83 e1 02             	and    ecx,0x2
c0021912:	0f b6 c9             	movzx  ecx,cl
c0021915:	c1 e1 03             	shl    ecx,0x3
c0021918:	d3 e8                	shr    eax,cl
c002191a:	c3                   	ret    
c002191b:	90                   	nop

c002191c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002191c:	6a 00                	push   0x0
c002191e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021923:	50                   	push   eax
c0021924:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021929:	50                   	push   eax
c002192a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002192f:	50                   	push   eax
c0021930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021934:	e8 9b ff ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021939:	83 c4 14             	add    esp,0x14
c002193c:	c3                   	ret    
c002193d:	90                   	nop

c002193e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002193e:	6a 0e                	push   0xe
c0021940:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021945:	50                   	push   eax
c0021946:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002194b:	50                   	push   eax
c002194c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021951:	50                   	push   eax
c0021952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021956:	e8 79 ff ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002195b:	83 c4 14             	add    esp,0x14
c002195e:	0f b6 c0             	movzx  eax,al
c0021961:	c3                   	ret    

c0021962 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021962:	55                   	push   ebp
c0021963:	57                   	push   edi
c0021964:	56                   	push   esi
c0021965:	53                   	push   ebx
c0021966:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002196b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021970:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021975:	6a 0a                	push   0xa
c0021977:	56                   	push   esi
c0021978:	55                   	push   ebp
c0021979:	57                   	push   edi
c002197a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002197e:	e8 51 ff ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021983:	6a 0a                	push   0xa
c0021985:	89 c3                	mov    ebx,eax
c0021987:	56                   	push   esi
c0021988:	0f b6 db             	movzx  ebx,bl
c002198b:	55                   	push   ebp
c002198c:	57                   	push   edi
c002198d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021991:	e8 3e ff ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021996:	83 c4 28             	add    esp,0x28
c0021999:	25 00 ff 00 00       	and    eax,0xff00
c002199e:	09 d8                	or     eax,ebx
c00219a0:	5b                   	pop    ebx
c00219a1:	5e                   	pop    esi
c00219a2:	5f                   	pop    edi
c00219a3:	5d                   	pop    ebp
c00219a4:	c3                   	ret    
c00219a5:	90                   	nop

c00219a6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00219a6:	6a 08                	push   0x8
c00219a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ad:	50                   	push   eax
c00219ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219b3:	50                   	push   eax
c00219b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219b9:	50                   	push   eax
c00219ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219be:	e8 11 ff ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219c3:	83 c4 14             	add    esp,0x14
c00219c6:	0f b6 c4             	movzx  eax,ah
c00219c9:	c3                   	ret    

c00219ca <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00219ca:	6a 08                	push   0x8
c00219cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219d1:	50                   	push   eax
c00219d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219d7:	50                   	push   eax
c00219d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219dd:	50                   	push   eax
c00219de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219e2:	e8 ed fe ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219e7:	83 c4 14             	add    esp,0x14
c00219ea:	c3                   	ret    
c00219eb:	90                   	nop

c00219ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00219ec:	6a 3c                	push   0x3c
c00219ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f3:	50                   	push   eax
c00219f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f9:	50                   	push   eax
c00219fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ff:	50                   	push   eax
c0021a00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a04:	e8 cb fe ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a09:	83 c4 14             	add    esp,0x14
c0021a0c:	c3                   	ret    
c0021a0d:	90                   	nop

c0021a0e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021a0e:	6a 18                	push   0x18
c0021a10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a15:	50                   	push   eax
c0021a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a1b:	50                   	push   eax
c0021a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a21:	50                   	push   eax
c0021a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a26:	e8 a9 fe ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a2b:	83 c4 14             	add    esp,0x14
c0021a2e:	0f b6 c4             	movzx  eax,ah
c0021a31:	c3                   	ret    

c0021a32 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a32:	55                   	push   ebp
c0021a33:	57                   	push   edi
c0021a34:	56                   	push   esi
c0021a35:	53                   	push   ebx
c0021a36:	50                   	push   eax
c0021a37:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021a3b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021a40:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021a45:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021a4a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021a51:	8d 43 12             	lea    eax,[ebx+0x12]
c0021a54:	83 c3 10             	add    ebx,0x10
c0021a57:	0f b6 c0             	movzx  eax,al
c0021a5a:	0f b6 db             	movzx  ebx,bl
c0021a5d:	50                   	push   eax
c0021a5e:	51                   	push   ecx
c0021a5f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a63:	57                   	push   edi
c0021a64:	55                   	push   ebp
c0021a65:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021a69:	e8 66 fe ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a6e:	53                   	push   ebx
c0021a6f:	89 c6                	mov    esi,eax
c0021a71:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021a75:	c1 e6 10             	shl    esi,0x10
c0021a78:	51                   	push   ecx
c0021a79:	57                   	push   edi
c0021a7a:	55                   	push   ebp
c0021a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a7f:	e8 50 fe ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a84:	83 c4 2c             	add    esp,0x2c
c0021a87:	0f b7 c0             	movzx  eax,ax
c0021a8a:	5b                   	pop    ebx
c0021a8b:	09 f0                	or     eax,esi
c0021a8d:	5e                   	pop    esi
c0021a8e:	5f                   	pop    edi
c0021a8f:	5d                   	pop    ebp
c0021a90:	c3                   	ret    
c0021a91:	90                   	nop

c0021a92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021a92:	53                   	push   ebx
c0021a93:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021a98:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021a9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021aa1:	c1 e1 10             	shl    ecx,0x10
c0021aa4:	25 fc 00 00 00       	and    eax,0xfc
c0021aa9:	09 c1                	or     ecx,eax
c0021aab:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ab0:	c1 e0 08             	shl    eax,0x8
c0021ab3:	09 c1                	or     ecx,eax
c0021ab5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021aba:	c1 e0 0b             	shl    eax,0xb
c0021abd:	09 c1                	or     ecx,eax
c0021abf:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021ac5:	89 c8                	mov    eax,ecx
c0021ac7:	ef                   	out    dx,eax
c0021ac8:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021acd:	ed                   	in     eax,dx
c0021ace:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021ad3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021ad8:	74 0a                	je     c0021ae4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021ada:	0f b7 d8             	movzx  ebx,ax
c0021add:	89 d0                	mov    eax,edx
c0021adf:	c1 e0 10             	shl    eax,0x10
c0021ae2:	eb 05                	jmp    c0021ae9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021ae4:	66 31 c0             	xor    ax,ax
c0021ae7:	89 d3                	mov    ebx,edx
c0021ae9:	09 c3                	or     ebx,eax
c0021aeb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021af0:	89 c8                	mov    eax,ecx
c0021af2:	ef                   	out    dx,eax
c0021af3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021af8:	89 d8                	mov    eax,ebx
c0021afa:	ef                   	out    dx,eax
c0021afb:	5b                   	pop    ebx
c0021afc:	c3                   	ret    
c0021afd:	90                   	nop

c0021afe <PCI::checkBus(unsigned char)>:
c0021afe:	56                   	push   esi
c0021aff:	53                   	push   ebx
c0021b00:	31 db                	xor    ebx,ebx
c0021b02:	51                   	push   ecx
c0021b03:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021b08:	52                   	push   edx
c0021b09:	53                   	push   ebx
c0021b0a:	43                   	inc    ebx
c0021b0b:	56                   	push   esi
c0021b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b10:	e8 2b 03 00 00       	call   c0021e40 <PCI::checkDevice(unsigned char, unsigned char)>
c0021b15:	83 c4 10             	add    esp,0x10
c0021b18:	83 fb 20             	cmp    ebx,0x20
c0021b1b:	75 eb                	jne    c0021b08 <PCI::checkBus(unsigned char)+0xa>
c0021b1d:	58                   	pop    eax
c0021b1e:	5b                   	pop    ebx
c0021b1f:	5e                   	pop    esi
c0021b20:	c3                   	ret    
c0021b21:	90                   	nop

c0021b22 <PCI::foundDevice(PCIDeviceInfo)>:
c0021b22:	55                   	push   ebp
c0021b23:	57                   	push   edi
c0021b24:	56                   	push   esi
c0021b25:	53                   	push   ebx
c0021b26:	83 ec 1c             	sub    esp,0x1c
c0021b29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b2d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021b33:	0f 84 52 01 00 00    	je     c0021c8b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b39:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021b3d:	66 81 f9 06 04       	cmp    cx,0x406
c0021b42:	75 2c                	jne    c0021b70 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021b44:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021b49:	50                   	push   eax
c0021b4a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021b4f:	50                   	push   eax
c0021b50:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021b55:	50                   	push   eax
c0021b56:	56                   	push   esi
c0021b57:	e8 b2 fe ff ff       	call   c0021a0e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021b5c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021b60:	0f b6 c0             	movzx  eax,al
c0021b63:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021b67:	83 c4 2c             	add    esp,0x2c
c0021b6a:	5b                   	pop    ebx
c0021b6b:	5e                   	pop    esi
c0021b6c:	5f                   	pop    edi
c0021b6d:	5d                   	pop    ebp
c0021b6e:	eb 8e                	jmp    c0021afe <PCI::checkBus(unsigned char)>
c0021b70:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b74:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021b7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b7e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021b82:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021b86:	88 d3                	mov    bl,dl
c0021b88:	85 c0                	test   eax,eax
c0021b8a:	74 33                	je     c0021bbf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021b8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021b8f:	85 d2                	test   edx,edx
c0021b91:	74 28                	je     c0021bbb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b93:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021b99:	31 ef                	xor    edi,ebp
c0021b9b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021ba1:	75 18                	jne    c0021bbb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021ba3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ba7:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021bad:	75 0c                	jne    c0021bbb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021baf:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021bb5:	0f 84 d0 00 00 00    	je     c0021c8b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bbd:	eb c9                	jmp    c0021b88 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021bbf:	66 81 f9 01 06       	cmp    cx,0x601
c0021bc4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021bc8:	75 19                	jne    c0021be3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021bca:	83 ec 0c             	sub    esp,0xc
c0021bcd:	68 64 01 00 00       	push   0x164
c0021bd2:	e8 fd d8 fe ff       	call   c000f4d4 <malloc>
c0021bd7:	89 c5                	mov    ebp,eax
c0021bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bdc:	e8 95 0f 00 00       	call   c0022b76 <SATABus::SATABus()>
c0021be1:	eb 1e                	jmp    c0021c01 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021be3:	66 81 f9 01 01       	cmp    cx,0x101
c0021be8:	75 60                	jne    c0021c4a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021bea:	83 ec 0c             	sub    esp,0xc
c0021bed:	68 70 02 00 00       	push   0x270
c0021bf2:	e8 dd d8 fe ff       	call   c000f4d4 <malloc>
c0021bf7:	89 c5                	mov    ebp,eax
c0021bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bfc:	e8 03 03 00 00       	call   c0021f04 <IDE::IDE()>
c0021c01:	58                   	pop    eax
c0021c02:	5a                   	pop    edx
c0021c03:	55                   	push   ebp
c0021c04:	56                   	push   esi
c0021c05:	e8 6e 1f ff ff       	call   c0013b78 <Device::addChild(Device*)>
c0021c0a:	83 ec 1c             	sub    esp,0x1c
c0021c0d:	b9 09 00 00 00       	mov    ecx,0x9
c0021c12:	fc                   	cld    
c0021c13:	89 e7                	mov    edi,esp
c0021c15:	89 de                	mov    esi,ebx
c0021c17:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c19:	55                   	push   ebp
c0021c1a:	e8 63 1e ff ff       	call   c0013a82 <Device::preOpenPCI(PCIDeviceInfo)>
c0021c1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c22:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021c26:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021c2e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021c36:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021c3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c41:	83 c4 4c             	add    esp,0x4c
c0021c44:	5b                   	pop    ebx
c0021c45:	5e                   	pop    esi
c0021c46:	5f                   	pop    edi
c0021c47:	5d                   	pop    ebp
c0021c48:	ff e0                	jmp    eax
c0021c4a:	83 ec 0c             	sub    esp,0xc
c0021c4d:	68 58 01 00 00       	push   0x158
c0021c52:	e8 7d d8 fe ff       	call   c000f4d4 <malloc>
c0021c57:	89 c5                	mov    ebp,eax
c0021c59:	58                   	pop    eax
c0021c5a:	5a                   	pop    edx
c0021c5b:	68 a0 af 02 c0       	push   0xc002afa0
c0021c60:	55                   	push   ebp
c0021c61:	e8 08 22 ff ff       	call   c0013e6e <DriverlessDevice::DriverlessDevice(char const*)>
c0021c66:	59                   	pop    ecx
c0021c67:	5f                   	pop    edi
c0021c68:	55                   	push   ebp
c0021c69:	56                   	push   esi
c0021c6a:	e8 09 1f ff ff       	call   c0013b78 <Device::addChild(Device*)>
c0021c6f:	b9 09 00 00 00       	mov    ecx,0x9
c0021c74:	fc                   	cld    
c0021c75:	89 df                	mov    edi,ebx
c0021c77:	89 de                	mov    esi,ebx
c0021c79:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c7b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021c7f:	83 c4 2c             	add    esp,0x2c
c0021c82:	5b                   	pop    ebx
c0021c83:	5e                   	pop    esi
c0021c84:	5f                   	pop    edi
c0021c85:	5d                   	pop    ebp
c0021c86:	e9 f7 1d ff ff       	jmp    c0013a82 <Device::preOpenPCI(PCIDeviceInfo)>
c0021c8b:	83 c4 1c             	add    esp,0x1c
c0021c8e:	5b                   	pop    ebx
c0021c8f:	5e                   	pop    esi
c0021c90:	5f                   	pop    edi
c0021c91:	5d                   	pop    ebp
c0021c92:	c3                   	ret    
c0021c93:	90                   	nop

c0021c94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021c94:	55                   	push   ebp
c0021c95:	57                   	push   edi
c0021c96:	56                   	push   esi
c0021c97:	53                   	push   ebx
c0021c98:	83 ec 5c             	sub    esp,0x5c
c0021c9b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021c9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ca3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021ca7:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021cac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021cb0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021cb4:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021cb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cbd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021cc2:	6a 0c                	push   0xc
c0021cc4:	55                   	push   ebp
c0021cc5:	53                   	push   ebx
c0021cc6:	57                   	push   edi
c0021cc7:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021cce:	e8 01 fc ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cd3:	55                   	push   ebp
c0021cd4:	53                   	push   ebx
c0021cd5:	57                   	push   edi
c0021cd6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021cdd:	e8 80 fc ff ff       	call   c0021962 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021ce2:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021ce7:	83 c4 24             	add    esp,0x24
c0021cea:	55                   	push   ebp
c0021ceb:	53                   	push   ebx
c0021cec:	57                   	push   edi
c0021ced:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021cf1:	e8 f6 fc ff ff       	call   c00219ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021cf6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021cfa:	6a 3c                	push   0x3c
c0021cfc:	55                   	push   ebp
c0021cfd:	53                   	push   ebx
c0021cfe:	57                   	push   edi
c0021cff:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d06:	e8 c9 fb ff ff       	call   c00218d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d0b:	0f b6 c4             	movzx  eax,ah
c0021d0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d12:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021d16:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021d1a:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0021d1f:	83 c4 24             	add    esp,0x24
c0021d22:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d28:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021d2f:	74 6c                	je     c0021d9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d31:	31 f6                	xor    esi,esi
c0021d33:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0021d39:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d3f:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021d45:	7e 56                	jle    c0021d9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d47:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021d4a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021d51:	39 cb                	cmp    ebx,ecx
c0021d53:	75 45                	jne    c0021d9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d55:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021d5c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021d60:	75 38                	jne    c0021d9a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d62:	83 ec 0c             	sub    esp,0xc
c0021d65:	68 ba af 02 c0       	push   0xc002afba
c0021d6a:	e8 1a 0a ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0021d6f:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c0021d75:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d7b:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021d83:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021d87:	52                   	push   edx
c0021d88:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d8c:	53                   	push   ebx
c0021d8d:	68 df af 02 c0       	push   0xc002afdf
c0021d92:	e8 f2 09 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0021d97:	83 c4 20             	add    esp,0x20
c0021d9a:	46                   	inc    esi
c0021d9b:	eb 96                	jmp    c0021d33 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021d9d:	31 d2                	xor    edx,edx
c0021d9f:	83 ec 0c             	sub    esp,0xc
c0021da2:	55                   	push   ebp
c0021da3:	53                   	push   ebx
c0021da4:	57                   	push   edi
c0021da5:	52                   	push   edx
c0021da6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021daa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021db1:	e8 7c fc ff ff       	call   c0021a32 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021db6:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021dbe:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021dc2:	42                   	inc    edx
c0021dc3:	83 c4 20             	add    esp,0x20
c0021dc6:	83 fa 06             	cmp    edx,0x6
c0021dc9:	75 d4                	jne    c0021d9f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021dcb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021dcf:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021dd3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021dd7:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021ddb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021ddf:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021de3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021de8:	86 e0                	xchg   al,ah
c0021dea:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021def:	55                   	push   ebp
c0021df0:	53                   	push   ebx
c0021df1:	57                   	push   edi
c0021df2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021df6:	e8 ab fb ff ff       	call   c00219a6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021dfb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021dff:	55                   	push   ebp
c0021e00:	53                   	push   ebx
c0021e01:	57                   	push   edi
c0021e02:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e09:	e8 0e fb ff ff       	call   c002191c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e0e:	83 ec 0c             	sub    esp,0xc
c0021e11:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021e16:	b9 09 00 00 00       	mov    ecx,0x9
c0021e1b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021e1f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021e23:	fc                   	cld    
c0021e24:	89 e7                	mov    edi,esp
c0021e26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e28:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021e2f:	e8 ee fc ff ff       	call   c0021b22 <PCI::foundDevice(PCIDeviceInfo)>
c0021e34:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021e3a:	5b                   	pop    ebx
c0021e3b:	5e                   	pop    esi
c0021e3c:	5f                   	pop    edi
c0021e3d:	5d                   	pop    ebp
c0021e3e:	c3                   	ret    
c0021e3f:	90                   	nop

c0021e40 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021e40:	55                   	push   ebp
c0021e41:	57                   	push   edi
c0021e42:	56                   	push   esi
c0021e43:	53                   	push   ebx
c0021e44:	83 ec 0c             	sub    esp,0xc
c0021e47:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021e4b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021e50:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e55:	6a 00                	push   0x0
c0021e57:	56                   	push   esi
c0021e58:	57                   	push   edi
c0021e59:	55                   	push   ebp
c0021e5a:	e8 bd fa ff ff       	call   c002191c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e5f:	6a 00                	push   0x0
c0021e61:	56                   	push   esi
c0021e62:	57                   	push   edi
c0021e63:	55                   	push   ebp
c0021e64:	e8 2b fe ff ff       	call   c0021c94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e69:	83 c4 20             	add    esp,0x20
c0021e6c:	6a 00                	push   0x0
c0021e6e:	56                   	push   esi
c0021e6f:	57                   	push   edi
c0021e70:	55                   	push   ebp
c0021e71:	e8 c8 fa ff ff       	call   c002193e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e76:	83 c4 10             	add    esp,0x10
c0021e79:	84 c0                	test   al,al
c0021e7b:	79 27                	jns    c0021ea4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021e7d:	bb 01 00 00 00       	mov    ebx,0x1
c0021e82:	53                   	push   ebx
c0021e83:	56                   	push   esi
c0021e84:	57                   	push   edi
c0021e85:	55                   	push   ebp
c0021e86:	e8 91 fa ff ff       	call   c002191c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e8b:	83 c4 10             	add    esp,0x10
c0021e8e:	66 40                	inc    ax
c0021e90:	74 0c                	je     c0021e9e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021e92:	53                   	push   ebx
c0021e93:	56                   	push   esi
c0021e94:	57                   	push   edi
c0021e95:	55                   	push   ebp
c0021e96:	e8 f9 fd ff ff       	call   c0021c94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e9b:	83 c4 10             	add    esp,0x10
c0021e9e:	43                   	inc    ebx
c0021e9f:	83 fb 08             	cmp    ebx,0x8
c0021ea2:	75 de                	jne    c0021e82 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021ea4:	83 c4 0c             	add    esp,0xc
c0021ea7:	5b                   	pop    ebx
c0021ea8:	5e                   	pop    esi
c0021ea9:	5f                   	pop    edi
c0021eaa:	5d                   	pop    ebp
c0021eab:	c3                   	ret    

c0021eac <PCI::detect()>:
c0021eac:	56                   	push   esi
c0021ead:	53                   	push   ebx
c0021eae:	53                   	push   ebx
c0021eaf:	31 db                	xor    ebx,ebx
c0021eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021eb5:	6a 00                	push   0x0
c0021eb7:	6a 00                	push   0x0
c0021eb9:	6a 00                	push   0x0
c0021ebb:	56                   	push   esi
c0021ebc:	e8 7d fa ff ff       	call   c002193e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021ec1:	83 c4 10             	add    esp,0x10
c0021ec4:	a8 80                	test   al,0x80
c0021ec6:	75 21                	jne    c0021ee9 <PCI::detect()+0x3d>
c0021ec8:	51                   	push   ecx
c0021ec9:	51                   	push   ecx
c0021eca:	6a 00                	push   0x0
c0021ecc:	56                   	push   esi
c0021ecd:	e8 2c fc ff ff       	call   c0021afe <PCI::checkBus(unsigned char)>
c0021ed2:	83 c4 10             	add    esp,0x10
c0021ed5:	eb 24                	jmp    c0021efb <PCI::detect()+0x4f>
c0021ed7:	52                   	push   edx
c0021ed8:	52                   	push   edx
c0021ed9:	53                   	push   ebx
c0021eda:	43                   	inc    ebx
c0021edb:	56                   	push   esi
c0021edc:	e8 1d fc ff ff       	call   c0021afe <PCI::checkBus(unsigned char)>
c0021ee1:	83 c4 10             	add    esp,0x10
c0021ee4:	83 fb 08             	cmp    ebx,0x8
c0021ee7:	74 12                	je     c0021efb <PCI::detect()+0x4f>
c0021ee9:	53                   	push   ebx
c0021eea:	6a 00                	push   0x0
c0021eec:	6a 00                	push   0x0
c0021eee:	56                   	push   esi
c0021eef:	e8 28 fa ff ff       	call   c002191c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021ef4:	83 c4 10             	add    esp,0x10
c0021ef7:	66 40                	inc    ax
c0021ef9:	74 dc                	je     c0021ed7 <PCI::detect()+0x2b>
c0021efb:	58                   	pop    eax
c0021efc:	5b                   	pop    ebx
c0021efd:	5e                   	pop    esi
c0021efe:	c3                   	ret    
c0021eff:	90                   	nop

c0021f00 <IDE::close(int, int, void*)>:
c0021f00:	83 c8 ff             	or     eax,0xffffffff
c0021f03:	c3                   	ret    

c0021f04 <IDE::IDE()>:
c0021f04:	83 ec 0c             	sub    esp,0xc
c0021f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0b:	83 ec 08             	sub    esp,0x8
c0021f0e:	68 28 b0 02 c0       	push   0xc002b028
c0021f13:	50                   	push   eax
c0021f14:	e8 eb 1f ff ff       	call   c0013f04 <HardDiskController::HardDiskController(char const*)>
c0021f19:	83 c4 10             	add    esp,0x10
c0021f1c:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0021f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f25:	89 10                	mov    DWORD PTR [eax],edx
c0021f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021f32:	90                   	nop
c0021f33:	83 c4 0c             	add    esp,0xc
c0021f36:	c3                   	ret    
c0021f37:	90                   	nop

c0021f38 <IDE::prepareInterrupt(unsigned char)>:
c0021f38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021f3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f41:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021f49:	c3                   	ret    

c0021f4a <selectDrive(unsigned char, unsigned char)>:
c0021f4a:	c3                   	ret    
c0021f4b:	90                   	nop

c0021f4c <IDE::getBase(unsigned char)>:
c0021f4c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f55:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021f5d:	c3                   	ret    

c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021f5e:	55                   	push   ebp
c0021f5f:	57                   	push   edi
c0021f60:	56                   	push   esi
c0021f61:	53                   	push   ebx
c0021f62:	83 ec 1c             	sub    esp,0x1c
c0021f65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f6d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021f70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f78:	80 f9 03             	cmp    cl,0x3
c0021f7b:	77 51                	ja     c0021fce <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021f7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f81:	0f b6 f2             	movzx  esi,dl
c0021f84:	0f b6 db             	movzx  ebx,bl
c0021f87:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f8a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021f8e:	83 ca 80             	or     edx,0xffffff80
c0021f91:	0f b6 d2             	movzx  edx,dl
c0021f94:	52                   	push   edx
c0021f95:	6a 0c                	push   0xc
c0021f97:	56                   	push   esi
c0021f98:	57                   	push   edi
c0021f99:	e8 c0 ff ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f9e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021fa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fa7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021fab:	ee                   	out    dx,al
c0021fac:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021fb1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021fb5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021fb9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021fbd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021fc5:	83 c4 2c             	add    esp,0x2c
c0021fc8:	5b                   	pop    ebx
c0021fc9:	5e                   	pop    esi
c0021fca:	5f                   	pop    edi
c0021fcb:	5d                   	pop    ebp
c0021fcc:	eb 90                	jmp    c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fce:	80 fb 07             	cmp    bl,0x7
c0021fd1:	77 12                	ja     c0021fe5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021fd3:	0f b6 d2             	movzx  edx,dl
c0021fd6:	0f b6 db             	movzx  ebx,bl
c0021fd9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021fe1:	89 da                	mov    edx,ebx
c0021fe3:	eb 2f                	jmp    c0022014 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021fe5:	80 fb 0d             	cmp    bl,0xd
c0021fe8:	77 13                	ja     c0021ffd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021fea:	0f b6 d2             	movzx  edx,dl
c0021fed:	0f b6 db             	movzx  ebx,bl
c0021ff0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021ff7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021ffb:	eb 17                	jmp    c0022014 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021ffd:	80 fb 15             	cmp    bl,0x15
c0022000:	77 13                	ja     c0022015 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022002:	0f b6 d2             	movzx  edx,dl
c0022005:	0f b6 db             	movzx  ebx,bl
c0022008:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022010:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022014:	ee                   	out    dx,al
c0022015:	83 c4 1c             	add    esp,0x1c
c0022018:	5b                   	pop    ebx
c0022019:	5e                   	pop    esi
c002201a:	5f                   	pop    edi
c002201b:	5d                   	pop    ebp
c002201c:	c3                   	ret    
c002201d:	90                   	nop

c002201e <IDE::read(unsigned char, unsigned char)>:
c002201e:	55                   	push   ebp
c002201f:	57                   	push   edi
c0022020:	56                   	push   esi
c0022021:	53                   	push   ebx
c0022022:	83 ec 1c             	sub    esp,0x1c
c0022025:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022029:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002202d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022030:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022034:	3c 03                	cmp    al,0x3
c0022036:	77 43                	ja     c002207b <IDE::read(unsigned char, unsigned char)+0x5d>
c0022038:	0f b6 f2             	movzx  esi,dl
c002203b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002203e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022042:	83 c8 80             	or     eax,0xffffff80
c0022045:	0f b6 c0             	movzx  eax,al
c0022048:	50                   	push   eax
c0022049:	6a 0c                	push   0xc
c002204b:	56                   	push   esi
c002204c:	57                   	push   edi
c002204d:	e8 0c ff ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022052:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022057:	0f b6 c3             	movzx  eax,bl
c002205a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002205e:	ec                   	in     al,dx
c002205f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022063:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022068:	52                   	push   edx
c0022069:	6a 0c                	push   0xc
c002206b:	56                   	push   esi
c002206c:	57                   	push   edi
c002206d:	e8 ec fe ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022072:	83 c4 20             	add    esp,0x20
c0022075:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022079:	eb 49                	jmp    c00220c4 <IDE::read(unsigned char, unsigned char)+0xa6>
c002207b:	80 fb 07             	cmp    bl,0x7
c002207e:	77 12                	ja     c0022092 <IDE::read(unsigned char, unsigned char)+0x74>
c0022080:	0f b6 d2             	movzx  edx,dl
c0022083:	0f b6 c3             	movzx  eax,bl
c0022086:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002208e:	89 c2                	mov    edx,eax
c0022090:	eb 31                	jmp    c00220c3 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022092:	80 fb 0d             	cmp    bl,0xd
c0022095:	77 13                	ja     c00220aa <IDE::read(unsigned char, unsigned char)+0x8c>
c0022097:	0f b6 d2             	movzx  edx,dl
c002209a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00220a1:	0f b6 d3             	movzx  edx,bl
c00220a4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00220a8:	eb 19                	jmp    c00220c3 <IDE::read(unsigned char, unsigned char)+0xa5>
c00220aa:	31 c0                	xor    eax,eax
c00220ac:	80 fb 15             	cmp    bl,0x15
c00220af:	77 13                	ja     c00220c4 <IDE::read(unsigned char, unsigned char)+0xa6>
c00220b1:	0f b6 d2             	movzx  edx,dl
c00220b4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00220bc:	0f b6 d3             	movzx  edx,bl
c00220bf:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00220c3:	ec                   	in     al,dx
c00220c4:	83 c4 1c             	add    esp,0x1c
c00220c7:	5b                   	pop    ebx
c00220c8:	5e                   	pop    esi
c00220c9:	5f                   	pop    edi
c00220ca:	5d                   	pop    ebp
c00220cb:	c3                   	ret    

c00220cc <IDE::waitInterrupt(unsigned char)>:
c00220cc:	55                   	push   ebp
c00220cd:	57                   	push   edi
c00220ce:	56                   	push   esi
c00220cf:	53                   	push   ebx
c00220d0:	31 db                	xor    ebx,ebx
c00220d2:	83 ec 0c             	sub    esp,0xc
c00220d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00220d9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00220de:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00220e6:	89 e8                	mov    eax,ebp
c00220e8:	84 c0                	test   al,al
c00220ea:	75 34                	jne    c0022120 <IDE::waitInterrupt(unsigned char)+0x54>
c00220ec:	52                   	push   edx
c00220ed:	6a 0c                	push   0xc
c00220ef:	56                   	push   esi
c00220f0:	57                   	push   edi
c00220f1:	e8 28 ff ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c00220f6:	83 c4 10             	add    esp,0x10
c00220f9:	a8 01                	test   al,0x1
c00220fb:	75 2b                	jne    c0022128 <IDE::waitInterrupt(unsigned char)+0x5c>
c00220fd:	f6 c3 04             	test   bl,0x4
c0022100:	75 16                	jne    c0022118 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022102:	83 fb 32             	cmp    ebx,0x32
c0022105:	7e 11                	jle    c0022118 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022107:	50                   	push   eax
c0022108:	50                   	push   eax
c0022109:	6a 00                	push   0x0
c002210b:	68 80 96 98 00       	push   0x989680
c0022110:	e8 6d b1 ff ff       	call   c001d282 <nanoSleep(unsigned long long)>
c0022115:	83 c4 10             	add    esp,0x10
c0022118:	83 fb 3c             	cmp    ebx,0x3c
c002211b:	74 0b                	je     c0022128 <IDE::waitInterrupt(unsigned char)+0x5c>
c002211d:	43                   	inc    ebx
c002211e:	eb be                	jmp    c00220de <IDE::waitInterrupt(unsigned char)+0x12>
c0022120:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022128:	83 c4 0c             	add    esp,0xc
c002212b:	89 e8                	mov    eax,ebp
c002212d:	5b                   	pop    ebx
c002212e:	5e                   	pop    esi
c002212f:	5f                   	pop    edi
c0022130:	5d                   	pop    ebp
c0022131:	c3                   	ret    

c0022132 <ideChannel0IRQHandler(regs*, void*)>:
c0022132:	83 ec 10             	sub    esp,0x10
c0022135:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022139:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022140:	6a 07                	push   0x7
c0022142:	6a 00                	push   0x0
c0022144:	50                   	push   eax
c0022145:	e8 d4 fe ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002214a:	83 c4 1c             	add    esp,0x1c
c002214d:	c3                   	ret    

c002214e <ideChannel1IRQHandler(regs*, void*)>:
c002214e:	83 ec 10             	sub    esp,0x10
c0022151:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022155:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002215c:	6a 07                	push   0x7
c002215e:	6a 01                	push   0x1
c0022160:	50                   	push   eax
c0022161:	e8 b8 fe ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022166:	83 c4 1c             	add    esp,0x1c
c0022169:	c3                   	ret    

c002216a <IDE::enableIRQs(unsigned char, bool)>:
c002216a:	57                   	push   edi
c002216b:	56                   	push   esi
c002216c:	be 04 00 00 00       	mov    esi,0x4
c0022171:	53                   	push   ebx
c0022172:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022177:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002217b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022180:	0f 94 c0             	sete   al
c0022183:	d1 e0                	shl    eax,1
c0022185:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002218c:	0f b6 c0             	movzx  eax,al
c002218f:	50                   	push   eax
c0022190:	6a 0c                	push   0xc
c0022192:	57                   	push   edi
c0022193:	53                   	push   ebx
c0022194:	e8 c5 fd ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022199:	83 c4 10             	add    esp,0x10
c002219c:	50                   	push   eax
c002219d:	6a 0c                	push   0xc
c002219f:	57                   	push   edi
c00221a0:	53                   	push   ebx
c00221a1:	e8 78 fe ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c00221a6:	83 c4 10             	add    esp,0x10
c00221a9:	4e                   	dec    esi
c00221aa:	75 f0                	jne    c002219c <IDE::enableIRQs(unsigned char, bool)+0x32>
c00221ac:	5b                   	pop    ebx
c00221ad:	5e                   	pop    esi
c00221ae:	5f                   	pop    edi
c00221af:	c3                   	ret    

c00221b0 <IDE::open(int, int, void*)>:
c00221b0:	55                   	push   ebp
c00221b1:	57                   	push   edi
c00221b2:	56                   	push   esi
c00221b3:	53                   	push   ebx
c00221b4:	83 ec 1c             	sub    esp,0x1c
c00221b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00221bb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00221c4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00221cd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00221d4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00221db:	0f 85 b0 02 00 00    	jne    c0022491 <IDE::open(int, int, void*)+0x2e1>
c00221e1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00221e7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00221eb:	83 e0 7f             	and    eax,0x7f
c00221ee:	3c 05                	cmp    al,0x5
c00221f0:	74 04                	je     c00221f6 <IDE::open(int, int, void*)+0x46>
c00221f2:	3c 0f                	cmp    al,0xf
c00221f4:	75 32                	jne    c0022228 <IDE::open(int, int, void*)+0x78>
c00221f6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00221fc:	83 e0 fc             	and    eax,0xfffffffc
c00221ff:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022206:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002220c:	83 e0 fc             	and    eax,0xfffffffc
c002220f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022216:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002221c:	83 e0 fc             	and    eax,0xfffffffc
c002221f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022226:	eb 14                	jmp    c002223c <IDE::open(int, int, void*)+0x8c>
c0022228:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022232:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002223c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022243:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002224a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002224e:	89 c6                	mov    esi,eax
c0022250:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022255:	c1 e6 10             	shl    esi,0x10
c0022258:	89 e8                	mov    eax,ebp
c002225a:	89 fa                	mov    edx,edi
c002225c:	c1 e0 0b             	shl    eax,0xb
c002225f:	09 f0                	or     eax,esi
c0022261:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022268:	c1 e6 08             	shl    esi,0x8
c002226b:	09 c6                	or     esi,eax
c002226d:	89 f0                	mov    eax,esi
c002226f:	0d 08 00 00 80       	or     eax,0x80000008
c0022274:	ef                   	out    dx,eax
c0022275:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002227a:	89 ca                	mov    edx,ecx
c002227c:	ed                   	in     eax,dx
c002227d:	c1 e8 10             	shr    eax,0x10
c0022280:	3d ff ff 00 00       	cmp    eax,0xffff
c0022285:	0f 84 f5 00 00 00    	je     c0022380 <IDE::open(int, int, void*)+0x1d0>
c002228b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022291:	89 fa                	mov    edx,edi
c0022293:	89 f0                	mov    eax,esi
c0022295:	ef                   	out    dx,eax
c0022296:	b0 fe                	mov    al,0xfe
c0022298:	89 ca                	mov    edx,ecx
c002229a:	ee                   	out    dx,al
c002229b:	89 f0                	mov    eax,esi
c002229d:	89 fa                	mov    edx,edi
c002229f:	ef                   	out    dx,eax
c00222a0:	89 ca                	mov    edx,ecx
c00222a2:	ed                   	in     eax,dx
c00222a3:	3c fe                	cmp    al,0xfe
c00222a5:	0f 85 a9 00 00 00    	jne    c0022354 <IDE::open(int, int, void*)+0x1a4>
c00222ab:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c00222b1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00222b8:	74 33                	je     c00222ed <IDE::open(int, int, void*)+0x13d>
c00222ba:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00222c0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00222c4:	40                   	inc    eax
c00222c5:	83 ec 0c             	sub    esp,0xc
c00222c8:	0f b6 c0             	movzx  eax,al
c00222cb:	50                   	push   eax
c00222cc:	55                   	push   ebp
c00222cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222d1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00222d7:	51                   	push   ecx
c00222d8:	e8 bb 54 ff ff       	call   c0017798 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00222dd:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00222e2:	83 c4 1c             	add    esp,0x1c
c00222e5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00222eb:	eb 0a                	jmp    c00222f7 <IDE::open(int, int, void*)+0x147>
c00222ed:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00222f7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00222fe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022305:	c1 e1 10             	shl    ecx,0x10
c0022308:	c1 e0 08             	shl    eax,0x8
c002230b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022310:	09 c1                	or     ecx,eax
c0022312:	89 fa                	mov    edx,edi
c0022314:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002231b:	c1 e0 0b             	shl    eax,0xb
c002231e:	09 c1                	or     ecx,eax
c0022320:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022326:	89 c8                	mov    eax,ecx
c0022328:	ef                   	out    dx,eax
c0022329:	be fc 0c 00 00       	mov    esi,0xcfc
c002232e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022334:	89 f2                	mov    edx,esi
c0022336:	ee                   	out    dx,al
c0022337:	89 c8                	mov    eax,ecx
c0022339:	89 fa                	mov    edx,edi
c002233b:	ef                   	out    dx,eax
c002233c:	89 f2                	mov    edx,esi
c002233e:	ed                   	in     eax,dx
c002233f:	0f b6 c0             	movzx  eax,al
c0022342:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022348:	74 46                	je     c0022390 <IDE::open(int, int, void*)+0x1e0>
c002234a:	83 ec 0c             	sub    esp,0xc
c002234d:	68 40 b0 02 c0       	push   0xc002b040
c0022352:	eb 34                	jmp    c0022388 <IDE::open(int, int, void*)+0x1d8>
c0022354:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002235d:	75 17                	jne    c0022376 <IDE::open(int, int, void*)+0x1c6>
c002235f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022364:	74 07                	je     c002236d <IDE::open(int, int, void*)+0x1bd>
c0022366:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002236b:	75 09                	jne    c0022376 <IDE::open(int, int, void*)+0x1c6>
c002236d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022374:	eb 1a                	jmp    c0022390 <IDE::open(int, int, void*)+0x1e0>
c0022376:	83 ec 0c             	sub    esp,0xc
c0022379:	68 48 b0 02 c0       	push   0xc002b048
c002237e:	eb 08                	jmp    c0022388 <IDE::open(int, int, void*)+0x1d8>
c0022380:	83 ec 0c             	sub    esp,0xc
c0022383:	68 79 b0 02 c0       	push   0xc002b079
c0022388:	e8 16 75 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c002238d:	83 c4 10             	add    esp,0x10
c0022390:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022397:	79 1a                	jns    c00223b3 <IDE::open(int, int, void*)+0x203>
c0022399:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002239f:	83 e0 fc             	and    eax,0xfffffffc
c00223a2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00223a9:	83 c0 08             	add    eax,0x8
c00223ac:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00223b3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00223b9:	89 c2                	mov    edx,eax
c00223bb:	83 e2 0f             	and    edx,0xf
c00223be:	66 83 fa 08          	cmp    dx,0x8
c00223c2:	75 0a                	jne    c00223ce <IDE::open(int, int, void*)+0x21e>
c00223c4:	83 e8 02             	sub    eax,0x2
c00223c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00223ce:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00223d4:	89 c2                	mov    edx,eax
c00223d6:	83 e2 0f             	and    edx,0xf
c00223d9:	66 83 fa 08          	cmp    dx,0x8
c00223dd:	75 0a                	jne    c00223e9 <IDE::open(int, int, void*)+0x239>
c00223df:	83 e8 02             	sub    eax,0x2
c00223e2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00223e9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00223f0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00223f7:	89 d0                	mov    eax,edx
c00223f9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00223fc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022400:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022404:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022407:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002240c:	0f b6 c9             	movzx  ecx,cl
c002240f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022416:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022419:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002241d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022421:	8d 50 02             	lea    edx,[eax+0x2]
c0022424:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022429:	0f b6 d2             	movzx  edx,dl
c002242c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022432:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022435:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022439:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002243d:	8d 48 03             	lea    ecx,[eax+0x3]
c0022440:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022445:	0f b6 c9             	movzx  ecx,cl
c0022448:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002244e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022451:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022455:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022459:	8d 50 04             	lea    edx,[eax+0x4]
c002245c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022462:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022467:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002246e:	66 85 f6             	test   si,si
c0022471:	74 3e                	je     c00224b1 <IDE::open(int, int, void*)+0x301>
c0022473:	0f b6 d2             	movzx  edx,dl
c0022476:	83 c0 05             	add    eax,0x5
c0022479:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002247c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022480:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022484:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002248a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002248f:	eb 20                	jmp    c00224b1 <IDE::open(int, int, void*)+0x301>
c0022491:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002249b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00224a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00224ac:	e9 02 ff ff ff       	jmp    c00223b3 <IDE::open(int, int, void*)+0x203>
c00224b1:	52                   	push   edx
c00224b2:	52                   	push   edx
c00224b3:	6a 00                	push   0x0
c00224b5:	53                   	push   ebx
c00224b6:	e8 7d fa ff ff       	call   c0021f38 <IDE::prepareInterrupt(unsigned char)>
c00224bb:	59                   	pop    ecx
c00224bc:	5e                   	pop    esi
c00224bd:	6a 01                	push   0x1
c00224bf:	53                   	push   ebx
c00224c0:	e8 73 fa ff ff       	call   c0021f38 <IDE::prepareInterrupt(unsigned char)>
c00224c5:	83 c4 0c             	add    esp,0xc
c00224c8:	6a 00                	push   0x0
c00224ca:	6a 00                	push   0x0
c00224cc:	53                   	push   ebx
c00224cd:	e8 98 fc ff ff       	call   c002216a <IDE::enableIRQs(unsigned char, bool)>
c00224d2:	83 c4 0c             	add    esp,0xc
c00224d5:	6a 00                	push   0x0
c00224d7:	6a 01                	push   0x1
c00224d9:	53                   	push   ebx
c00224da:	e8 8b fc ff ff       	call   c002216a <IDE::enableIRQs(unsigned char, bool)>
c00224df:	83 c4 10             	add    esp,0x10
c00224e2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00224e9:	74 40                	je     c002252b <IDE::open(int, int, void*)+0x37b>
c00224eb:	83 ec 0c             	sub    esp,0xc
c00224ee:	68 a3 b0 02 c0       	push   0xc002b0a3
c00224f3:	e8 91 02 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00224f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00224fb:	6a 01                	push   0x1
c00224fd:	68 32 21 02 c0       	push   0xc0022132
c0022502:	6a 0e                	push   0xe
c0022504:	53                   	push   ebx
c0022505:	e8 f2 15 ff ff       	call   c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002250a:	83 c4 14             	add    esp,0x14
c002250d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022513:	53                   	push   ebx
c0022514:	6a 01                	push   0x1
c0022516:	68 4e 21 02 c0       	push   0xc002214e
c002251b:	6a 0f                	push   0xf
c002251d:	53                   	push   ebx
c002251e:	e8 d9 15 ff ff       	call   c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022523:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022529:	eb 4a                	jmp    c0022575 <IDE::open(int, int, void*)+0x3c5>
c002252b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022535:	50                   	push   eax
c0022536:	6a 0f                	push   0xf
c0022538:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002253e:	68 bf b0 02 c0       	push   0xc002b0bf
c0022543:	e8 41 02 ff ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022548:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002254b:	6a 00                	push   0x0
c002254d:	68 32 21 02 c0       	push   0xc0022132
c0022552:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022558:	53                   	push   ebx
c0022559:	e8 9e 15 ff ff       	call   c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002255e:	83 c4 14             	add    esp,0x14
c0022561:	53                   	push   ebx
c0022562:	6a 00                	push   0x0
c0022564:	68 4e 21 02 c0       	push   0xc002214e
c0022569:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002256f:	53                   	push   ebx
c0022570:	e8 87 15 ff ff       	call   c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022575:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022577:	83 c4 20             	add    esp,0x20
c002257a:	83 ec 0c             	sub    esp,0xc
c002257d:	53                   	push   ebx
c002257e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022581:	83 c4 0c             	add    esp,0xc
c0022584:	6a 07                	push   0x7
c0022586:	6a 00                	push   0x0
c0022588:	53                   	push   ebx
c0022589:	e8 90 fa ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002258e:	83 c4 0c             	add    esp,0xc
c0022591:	6a 07                	push   0x7
c0022593:	6a 01                	push   0x1
c0022595:	53                   	push   ebx
c0022596:	e8 83 fa ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002259b:	83 c4 0c             	add    esp,0xc
c002259e:	6a 01                	push   0x1
c00225a0:	6a 00                	push   0x0
c00225a2:	53                   	push   ebx
c00225a3:	e8 c2 fb ff ff       	call   c002216a <IDE::enableIRQs(unsigned char, bool)>
c00225a8:	83 c4 0c             	add    esp,0xc
c00225ab:	6a 01                	push   0x1
c00225ad:	6a 01                	push   0x1
c00225af:	53                   	push   ebx
c00225b0:	e8 b5 fb ff ff       	call   c002216a <IDE::enableIRQs(unsigned char, bool)>
c00225b5:	83 c4 2c             	add    esp,0x2c
c00225b8:	31 c0                	xor    eax,eax
c00225ba:	5b                   	pop    ebx
c00225bb:	5e                   	pop    esi
c00225bc:	5f                   	pop    edi
c00225bd:	5d                   	pop    ebp
c00225be:	c3                   	ret    
c00225bf:	90                   	nop

c00225c0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00225c0:	55                   	push   ebp
c00225c1:	57                   	push   edi
c00225c2:	56                   	push   esi
c00225c3:	53                   	push   ebx
c00225c4:	83 ec 1c             	sub    esp,0x1c
c00225c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00225cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225cf:	8d 50 f8             	lea    edx,[eax-0x8]
c00225d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00225da:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225de:	80 fa 03             	cmp    dl,0x3
c00225e1:	77 5d                	ja     c0022640 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00225e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00225e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225eb:	0f b6 db             	movzx  ebx,bl
c00225ee:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00225f1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00225f5:	83 ca 80             	or     edx,0xffffff80
c00225f8:	0f b6 d2             	movzx  edx,dl
c00225fb:	52                   	push   edx
c00225fc:	6a 0c                	push   0xc
c00225fe:	53                   	push   ebx
c00225ff:	56                   	push   esi
c0022600:	e8 59 f9 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022605:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002260a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002260e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022612:	0f b6 c0             	movzx  eax,al
c0022615:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022619:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002261b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022620:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022624:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022628:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002262c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022634:	83 c4 2c             	add    esp,0x2c
c0022637:	5b                   	pop    ebx
c0022638:	5e                   	pop    esi
c0022639:	5f                   	pop    edi
c002263a:	5d                   	pop    ebp
c002263b:	e9 1e f9 ff ff       	jmp    c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022640:	3c 07                	cmp    al,0x7
c0022642:	77 10                	ja     c0022654 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022644:	0f b6 db             	movzx  ebx,bl
c0022647:	0f b6 d0             	movzx  edx,al
c002264a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022652:	eb 2d                	jmp    c0022681 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022654:	3c 0d                	cmp    al,0xd
c0022656:	77 13                	ja     c002266b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022658:	0f b6 db             	movzx  ebx,bl
c002265b:	0f b6 c0             	movzx  eax,al
c002265e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022665:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022669:	eb 16                	jmp    c0022681 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002266b:	3c 15                	cmp    al,0x15
c002266d:	77 14                	ja     c0022683 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002266f:	0f b6 db             	movzx  ebx,bl
c0022672:	0f b6 c0             	movzx  eax,al
c0022675:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002267d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022681:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022683:	83 c4 1c             	add    esp,0x1c
c0022686:	5b                   	pop    ebx
c0022687:	5e                   	pop    esi
c0022688:	5f                   	pop    edi
c0022689:	5d                   	pop    ebp
c002268a:	c3                   	ret    
c002268b:	90                   	nop

c002268c <IDE::detect()>:
c002268c:	55                   	push   ebp
c002268d:	57                   	push   edi
c002268e:	56                   	push   esi
c002268f:	53                   	push   ebx
c0022690:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022696:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002269d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00226a4:	0f 85 be 02 00 00    	jne    c0022968 <IDE::detect()+0x2dc>
c00226aa:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00226b1:	31 f6                	xor    esi,esi
c00226b3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00226bb:	31 ed                	xor    ebp,ebp
c00226bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226c1:	c1 e0 06             	shl    eax,0x6
c00226c4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00226cc:	89 e8                	mov    eax,ebp
c00226ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00226d2:	c1 e0 04             	shl    eax,0x4
c00226d5:	83 c8 a0             	or     eax,0xffffffa0
c00226d8:	0f b6 c0             	movzx  eax,al
c00226db:	50                   	push   eax
c00226dc:	6a 06                	push   0x6
c00226de:	56                   	push   esi
c00226df:	53                   	push   ebx
c00226e0:	e8 79 f8 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226e5:	83 c4 0c             	add    esp,0xc
c00226e8:	6a 0c                	push   0xc
c00226ea:	56                   	push   esi
c00226eb:	53                   	push   ebx
c00226ec:	e8 2d f9 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c00226f1:	83 c4 0c             	add    esp,0xc
c00226f4:	6a 0c                	push   0xc
c00226f6:	56                   	push   esi
c00226f7:	53                   	push   ebx
c00226f8:	e8 21 f9 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c00226fd:	83 c4 0c             	add    esp,0xc
c0022700:	6a 0c                	push   0xc
c0022702:	56                   	push   esi
c0022703:	53                   	push   ebx
c0022704:	e8 15 f9 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022709:	83 c4 0c             	add    esp,0xc
c002270c:	6a 0c                	push   0xc
c002270e:	56                   	push   esi
c002270f:	53                   	push   ebx
c0022710:	e8 09 f9 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022715:	68 ec 00 00 00       	push   0xec
c002271a:	6a 07                	push   0x7
c002271c:	56                   	push   esi
c002271d:	53                   	push   ebx
c002271e:	e8 3b f8 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022723:	83 c4 1c             	add    esp,0x1c
c0022726:	6a 0c                	push   0xc
c0022728:	56                   	push   esi
c0022729:	53                   	push   ebx
c002272a:	e8 ef f8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002272f:	83 c4 0c             	add    esp,0xc
c0022732:	6a 0c                	push   0xc
c0022734:	56                   	push   esi
c0022735:	53                   	push   ebx
c0022736:	e8 e3 f8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002273b:	83 c4 0c             	add    esp,0xc
c002273e:	6a 0c                	push   0xc
c0022740:	56                   	push   esi
c0022741:	53                   	push   ebx
c0022742:	e8 d7 f8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022747:	83 c4 0c             	add    esp,0xc
c002274a:	6a 0c                	push   0xc
c002274c:	56                   	push   esi
c002274d:	53                   	push   ebx
c002274e:	e8 cb f8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022753:	83 c4 0c             	add    esp,0xc
c0022756:	6a 0c                	push   0xc
c0022758:	56                   	push   esi
c0022759:	53                   	push   ebx
c002275a:	e8 bf f8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002275f:	83 c4 10             	add    esp,0x10
c0022762:	84 c0                	test   al,al
c0022764:	0f 84 8b 01 00 00    	je     c00228f5 <IDE::detect()+0x269>
c002276a:	31 ff                	xor    edi,edi
c002276c:	50                   	push   eax
c002276d:	6a 0c                	push   0xc
c002276f:	56                   	push   esi
c0022770:	53                   	push   ebx
c0022771:	e8 a8 f8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022776:	83 c4 10             	add    esp,0x10
c0022779:	a8 01                	test   al,0x1
c002277b:	0f 85 8e 01 00 00    	jne    c002290f <IDE::detect()+0x283>
c0022781:	84 c0                	test   al,al
c0022783:	78 04                	js     c0022789 <IDE::detect()+0xfd>
c0022785:	a8 08                	test   al,0x8
c0022787:	75 27                	jne    c00227b0 <IDE::detect()+0x124>
c0022789:	47                   	inc    edi
c002278a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022790:	7e da                	jle    c002276c <IDE::detect()+0xe0>
c0022792:	50                   	push   eax
c0022793:	50                   	push   eax
c0022794:	6a 00                	push   0x0
c0022796:	68 40 4b 4c 00       	push   0x4c4b40
c002279b:	e8 e2 aa ff ff       	call   c001d282 <nanoSleep(unsigned long long)>
c00227a0:	83 c4 10             	add    esp,0x10
c00227a3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00227a9:	75 c1                	jne    c002276c <IDE::detect()+0xe0>
c00227ab:	e9 5f 01 00 00       	jmp    c002290f <IDE::detect()+0x283>
c00227b0:	31 c9                	xor    ecx,ecx
c00227b2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00227b6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00227ba:	83 ec 0c             	sub    esp,0xc
c00227bd:	68 80 00 00 00       	push   0x80
c00227c2:	57                   	push   edi
c00227c3:	6a 00                	push   0x0
c00227c5:	56                   	push   esi
c00227c6:	53                   	push   ebx
c00227c7:	e8 f4 fd ff ff       	call   c00225c0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00227cc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00227d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00227d5:	89 d1                	mov    ecx,edx
c00227d7:	c1 e0 06             	shl    eax,0x6
c00227da:	01 d8                	add    eax,ebx
c00227dc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00227e3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00227ea:	89 f2                	mov    edx,esi
c00227ec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00227f2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00227f6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00227fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022800:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022807:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002280f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022816:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002281e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022824:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002282b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022831:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022835:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022839:	83 c4 20             	add    esp,0x20
c002283c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002283f:	83 c0 02             	add    eax,0x2
c0022842:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022848:	83 c7 02             	add    edi,0x2
c002284b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002284e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022854:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022858:	75 e2                	jne    c002283c <IDE::detect()+0x1b0>
c002285a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002285e:	c1 e0 06             	shl    eax,0x6
c0022861:	01 d8                	add    eax,ebx
c0022863:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022869:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022870:	66 c1 ea 09          	shr    dx,0x9
c0022874:	83 e2 01             	and    edx,0x1
c0022877:	84 c9                	test   cl,cl
c0022879:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002287f:	75 2f                	jne    c00228b0 <IDE::detect()+0x224>
c0022881:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022887:	85 c0                	test   eax,eax
c0022889:	74 66                	je     c00228f1 <IDE::detect()+0x265>
c002288b:	50                   	push   eax
c002288c:	55                   	push   ebp
c002288d:	56                   	push   esi
c002288e:	68 db b0 02 c0       	push   0xc002b0db
c0022893:	e8 f1 fe fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022898:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002289f:	e8 30 cc fe ff       	call   c000f4d4 <malloc>
c00228a4:	89 c7                	mov    edi,eax
c00228a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00228a9:	e8 62 06 00 00       	call   c0022f10 <ATA::ATA()>
c00228ae:	eb 28                	jmp    c00228d8 <IDE::detect()+0x24c>
c00228b0:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00228b6:	55                   	push   ebp
c00228b7:	56                   	push   esi
c00228b8:	68 0a b1 02 c0       	push   0xc002b10a
c00228bd:	e8 c7 fe fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00228c2:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00228c9:	e8 06 cc fe ff       	call   c000f4d4 <malloc>
c00228ce:	89 c7                	mov    edi,eax
c00228d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00228d3:	e8 68 0c 00 00       	call   c0023540 <ATAPI::ATAPI()>
c00228d8:	5a                   	pop    edx
c00228d9:	59                   	pop    ecx
c00228da:	57                   	push   edi
c00228db:	53                   	push   ebx
c00228dc:	e8 97 12 ff ff       	call   c0013b78 <Device::addChild(Device*)>
c00228e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00228e3:	53                   	push   ebx
c00228e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00228e8:	6a 00                	push   0x0
c00228ea:	57                   	push   edi
c00228eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00228ee:	83 c4 20             	add    esp,0x20
c00228f1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00228f5:	4d                   	dec    ebp
c00228f6:	74 0a                	je     c0022902 <IDE::detect()+0x276>
c00228f8:	bd 01 00 00 00       	mov    ebp,0x1
c00228fd:	e9 bb fd ff ff       	jmp    c00226bd <IDE::detect()+0x31>
c0022902:	4e                   	dec    esi
c0022903:	74 63                	je     c0022968 <IDE::detect()+0x2dc>
c0022905:	be 01 00 00 00       	mov    esi,0x1
c002290a:	e9 ac fd ff ff       	jmp    c00226bb <IDE::detect()+0x2f>
c002290f:	50                   	push   eax
c0022910:	6a 04                	push   0x4
c0022912:	56                   	push   esi
c0022913:	53                   	push   ebx
c0022914:	e8 05 f7 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022919:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002291d:	83 c4 0c             	add    esp,0xc
c0022920:	6a 05                	push   0x5
c0022922:	56                   	push   esi
c0022923:	53                   	push   ebx
c0022924:	e8 f5 f6 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022929:	83 c4 10             	add    esp,0x10
c002292c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022930:	80 fa 14             	cmp    dl,0x14
c0022933:	75 04                	jne    c0022939 <IDE::detect()+0x2ad>
c0022935:	3c eb                	cmp    al,0xeb
c0022937:	eb 07                	jmp    c0022940 <IDE::detect()+0x2b4>
c0022939:	3c 96                	cmp    al,0x96
c002293b:	75 b8                	jne    c00228f5 <IDE::detect()+0x269>
c002293d:	80 fa 69             	cmp    dl,0x69
c0022940:	75 b3                	jne    c00228f5 <IDE::detect()+0x269>
c0022942:	68 a1 00 00 00       	push   0xa1
c0022947:	6a 07                	push   0x7
c0022949:	56                   	push   esi
c002294a:	53                   	push   ebx
c002294b:	e8 0e f6 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022950:	5f                   	pop    edi
c0022951:	58                   	pop    eax
c0022952:	6a 00                	push   0x0
c0022954:	68 40 42 0f 00       	push   0xf4240
c0022959:	e8 24 a9 ff ff       	call   c001d282 <nanoSleep(unsigned long long)>
c002295e:	83 c4 10             	add    esp,0x10
c0022961:	b1 01                	mov    cl,0x1
c0022963:	e9 4a fe ff ff       	jmp    c00227b2 <IDE::detect()+0x126>
c0022968:	81 c4 1c 02 00 00    	add    esp,0x21c
c002296e:	5b                   	pop    ebx
c002296f:	5e                   	pop    esi
c0022970:	5f                   	pop    edi
c0022971:	5d                   	pop    ebp
c0022972:	c3                   	ret    
c0022973:	90                   	nop

c0022974 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022974:	55                   	push   ebp
c0022975:	57                   	push   edi
c0022976:	56                   	push   esi
c0022977:	53                   	push   ebx
c0022978:	83 ec 1c             	sub    esp,0x1c
c002297b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002297f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022983:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022987:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002298b:	88 c3                	mov    bl,al
c002298d:	84 c0                	test   al,al
c002298f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022993:	0f 84 67 01 00 00    	je     c0022b00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022999:	83 ec 0c             	sub    esp,0xc
c002299c:	68 3b b1 02 c0       	push   0xc002b13b
c00229a1:	e8 e3 fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00229a6:	83 c4 10             	add    esp,0x10
c00229a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229ad:	3c 01                	cmp    al,0x1
c00229af:	75 17                	jne    c00229c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00229b1:	83 ec 0c             	sub    esp,0xc
c00229b4:	b3 13                	mov    bl,0x13
c00229b6:	68 47 b1 02 c0       	push   0xc002b147
c00229bb:	e8 c9 fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00229c0:	83 c4 10             	add    esp,0x10
c00229c3:	e9 25 01 00 00       	jmp    c0022aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229c8:	3c 02                	cmp    al,0x2
c00229ca:	0f 85 ef 00 00 00    	jne    c0022abf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00229d0:	d1 e6                	shl    esi,1
c00229d2:	09 ee                	or     esi,ebp
c00229d4:	52                   	push   edx
c00229d5:	89 f0                	mov    eax,esi
c00229d7:	6a 01                	push   0x1
c00229d9:	0f b6 f0             	movzx  esi,al
c00229dc:	c1 e6 06             	shl    esi,0x6
c00229df:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00229e7:	50                   	push   eax
c00229e8:	57                   	push   edi
c00229e9:	e8 30 f6 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c00229ee:	83 c4 10             	add    esp,0x10
c00229f1:	89 c6                	mov    esi,eax
c00229f3:	a8 01                	test   al,0x1
c00229f5:	74 12                	je     c0022a09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00229f7:	83 ec 0c             	sub    esp,0xc
c00229fa:	b3 07                	mov    bl,0x7
c00229fc:	68 5c b1 02 c0       	push   0xc002b15c
c0022a01:	e8 83 fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022a06:	83 c4 10             	add    esp,0x10
c0022a09:	f7 c6 02 00 00 00    	test   esi,0x2
c0022a0f:	74 12                	je     c0022a23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022a11:	83 ec 0c             	sub    esp,0xc
c0022a14:	b3 03                	mov    bl,0x3
c0022a16:	68 7a b1 02 c0       	push   0xc002b17a
c0022a1b:	e8 69 fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022a20:	83 c4 10             	add    esp,0x10
c0022a23:	f7 c6 04 00 00 00    	test   esi,0x4
c0022a29:	74 12                	je     c0022a3d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022a2b:	83 ec 0c             	sub    esp,0xc
c0022a2e:	b3 14                	mov    bl,0x14
c0022a30:	68 9a b1 02 c0       	push   0xc002b19a
c0022a35:	e8 4f fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022a3a:	83 c4 10             	add    esp,0x10
c0022a3d:	f7 c6 08 00 00 00    	test   esi,0x8
c0022a43:	74 12                	je     c0022a57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022a45:	83 ec 0c             	sub    esp,0xc
c0022a48:	b3 03                	mov    bl,0x3
c0022a4a:	68 7a b1 02 c0       	push   0xc002b17a
c0022a4f:	e8 35 fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022a54:	83 c4 10             	add    esp,0x10
c0022a57:	f7 c6 10 00 00 00    	test   esi,0x10
c0022a5d:	74 12                	je     c0022a71 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022a5f:	83 ec 0c             	sub    esp,0xc
c0022a62:	b3 15                	mov    bl,0x15
c0022a64:	68 b2 b1 02 c0       	push   0xc002b1b2
c0022a69:	e8 1b fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022a6e:	83 c4 10             	add    esp,0x10
c0022a71:	f7 c6 20 00 00 00    	test   esi,0x20
c0022a77:	74 12                	je     c0022a8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022a79:	83 ec 0c             	sub    esp,0xc
c0022a7c:	b3 03                	mov    bl,0x3
c0022a7e:	68 7a b1 02 c0       	push   0xc002b17a
c0022a83:	e8 01 fd fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022a88:	83 c4 10             	add    esp,0x10
c0022a8b:	f7 c6 40 00 00 00    	test   esi,0x40
c0022a91:	74 12                	je     c0022aa5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022a93:	83 ec 0c             	sub    esp,0xc
c0022a96:	b3 16                	mov    bl,0x16
c0022a98:	68 cc b1 02 c0       	push   0xc002b1cc
c0022a9d:	e8 e7 fc fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022aa2:	83 c4 10             	add    esp,0x10
c0022aa5:	89 f0                	mov    eax,esi
c0022aa7:	84 c0                	test   al,al
c0022aa9:	79 42                	jns    c0022aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022aab:	83 ec 0c             	sub    esp,0xc
c0022aae:	b3 0d                	mov    bl,0xd
c0022ab0:	68 ed b1 02 c0       	push   0xc002b1ed
c0022ab5:	e8 cf fc fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022aba:	83 c4 10             	add    esp,0x10
c0022abd:	eb 2e                	jmp    c0022aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022abf:	3c 03                	cmp    al,0x3
c0022ac1:	75 14                	jne    c0022ad7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022ac3:	83 ec 0c             	sub    esp,0xc
c0022ac6:	b3 17                	mov    bl,0x17
c0022ac8:	68 01 b2 02 c0       	push   0xc002b201
c0022acd:	e8 b7 fc fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022ad2:	83 c4 10             	add    esp,0x10
c0022ad5:	eb 16                	jmp    c0022aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ad7:	3c 04                	cmp    al,0x4
c0022ad9:	75 12                	jne    c0022aed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022adb:	83 ec 0c             	sub    esp,0xc
c0022ade:	b3 08                	mov    bl,0x8
c0022ae0:	68 17 b2 02 c0       	push   0xc002b217
c0022ae5:	e8 9f fc fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022aea:	83 c4 10             	add    esp,0x10
c0022aed:	50                   	push   eax
c0022aee:	50                   	push   eax
c0022aef:	0f b6 c3             	movzx  eax,bl
c0022af2:	50                   	push   eax
c0022af3:	68 2f b2 02 c0       	push   0xc002b22f
c0022af8:	e8 8c fc fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022afd:	83 c4 10             	add    esp,0x10
c0022b00:	83 c4 1c             	add    esp,0x1c
c0022b03:	88 d8                	mov    al,bl
c0022b05:	5b                   	pop    ebx
c0022b06:	5e                   	pop    esi
c0022b07:	5f                   	pop    edi
c0022b08:	5d                   	pop    ebp
c0022b09:	c3                   	ret    

c0022b0a <IDE::polling(unsigned char, unsigned int)>:
c0022b0a:	57                   	push   edi
c0022b0b:	56                   	push   esi
c0022b0c:	53                   	push   ebx
c0022b0d:	bb 04 00 00 00       	mov    ebx,0x4
c0022b12:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022b16:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b1b:	52                   	push   edx
c0022b1c:	6a 0c                	push   0xc
c0022b1e:	56                   	push   esi
c0022b1f:	57                   	push   edi
c0022b20:	e8 f9 f4 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022b25:	83 c4 10             	add    esp,0x10
c0022b28:	4b                   	dec    ebx
c0022b29:	75 f0                	jne    c0022b1b <IDE::polling(unsigned char, unsigned int)+0x11>
c0022b2b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b30:	50                   	push   eax
c0022b31:	6a 0c                	push   0xc
c0022b33:	56                   	push   esi
c0022b34:	57                   	push   edi
c0022b35:	e8 e4 f4 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022b3a:	83 c4 10             	add    esp,0x10
c0022b3d:	a8 01                	test   al,0x1
c0022b3f:	74 12                	je     c0022b53 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022b41:	83 ec 0c             	sub    esp,0xc
c0022b44:	68 49 b2 02 c0       	push   0xc002b249
c0022b49:	e8 3b fc fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022b4e:	83 c4 10             	add    esp,0x10
c0022b51:	eb 17                	jmp    c0022b6a <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b53:	a8 20                	test   al,0x20
c0022b55:	75 0f                	jne    c0022b66 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022b57:	4b                   	dec    ebx
c0022b58:	74 10                	je     c0022b6a <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b5a:	84 c0                	test   al,al
c0022b5c:	78 d2                	js     c0022b30 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b5e:	a8 08                	test   al,0x8
c0022b60:	74 ce                	je     c0022b30 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b62:	31 c0                	xor    eax,eax
c0022b64:	eb 06                	jmp    c0022b6c <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b66:	b0 01                	mov    al,0x1
c0022b68:	eb 02                	jmp    c0022b6c <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b6a:	b0 02                	mov    al,0x2
c0022b6c:	5b                   	pop    ebx
c0022b6d:	5e                   	pop    esi
c0022b6e:	5f                   	pop    edi
c0022b6f:	c3                   	ret    

c0022b70 <SATABus::close(int, int, void*)>:
c0022b70:	31 c0                	xor    eax,eax
c0022b72:	c3                   	ret    
c0022b73:	90                   	nop

c0022b74 <SATABus::detect()>:
c0022b74:	c3                   	ret    
c0022b75:	90                   	nop

c0022b76 <SATABus::SATABus()>:
c0022b76:	83 ec 0c             	sub    esp,0xc
c0022b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7d:	83 ec 08             	sub    esp,0x8
c0022b80:	68 8c b2 02 c0       	push   0xc002b28c
c0022b85:	50                   	push   eax
c0022b86:	e8 79 13 ff ff       	call   c0013f04 <HardDiskController::HardDiskController(char const*)>
c0022b8b:	83 c4 10             	add    esp,0x10
c0022b8e:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0022b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b97:	89 10                	mov    DWORD PTR [eax],edx
c0022b99:	83 ec 0c             	sub    esp,0xc
c0022b9c:	6a 50                	push   0x50
c0022b9e:	e8 d5 cf fe ff       	call   c000fb78 <Phys::allocateContiguousPages(int)>
c0022ba3:	83 c4 10             	add    esp,0x10
c0022ba6:	89 c2                	mov    edx,eax
c0022ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bac:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022bb2:	83 ec 0c             	sub    esp,0xc
c0022bb5:	6a 50                	push   0x50
c0022bb7:	e8 dd eb fe ff       	call   c0011799 <Virt::allocateKernelVirtualPages(int)>
c0022bbc:	83 c4 10             	add    esp,0x10
c0022bbf:	89 c2                	mov    edx,eax
c0022bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022bcb:	e8 59 ed fe ff       	call   c0011929 <Virt::getAKernelVAS()>
c0022bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bd4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022bda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bde:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022be4:	83 ec 0c             	sub    esp,0xc
c0022be7:	6a 03                	push   0x3
c0022be9:	6a 50                	push   0x50
c0022beb:	51                   	push   ecx
c0022bec:	52                   	push   edx
c0022bed:	50                   	push   eax
c0022bee:	e8 65 f5 fe ff       	call   c0012158 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022bf3:	83 c4 20             	add    esp,0x20
c0022bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfa:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c0a:	83 ec 04             	sub    esp,0x4
c0022c0d:	52                   	push   edx
c0022c0e:	50                   	push   eax
c0022c0f:	68 b0 b2 02 c0       	push   0xc002b2b0
c0022c14:	e8 70 fb fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022c19:	83 c4 10             	add    esp,0x10
c0022c1c:	90                   	nop
c0022c1d:	83 c4 0c             	add    esp,0xc
c0022c20:	c3                   	ret    
c0022c21:	90                   	nop

c0022c22 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022c22:	83 ec 0c             	sub    esp,0xc
c0022c25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c29:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022c2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022c2f:	09 c2                	or     edx,eax
c0022c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022c3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022c3d:	31 c0                	xor    eax,eax
c0022c3f:	c1 e9 08             	shr    ecx,0x8
c0022c42:	83 e1 0f             	and    ecx,0xf
c0022c45:	39 c8                	cmp    eax,ecx
c0022c47:	74 0a                	je     c0022c53 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022c49:	f6 c2 01             	test   dl,0x1
c0022c4c:	74 18                	je     c0022c66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c4e:	d1 ea                	shr    edx,1
c0022c50:	40                   	inc    eax
c0022c51:	eb f2                	jmp    c0022c45 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022c53:	83 ec 0c             	sub    esp,0xc
c0022c56:	68 d4 b2 02 c0       	push   0xc002b2d4
c0022c5b:	e8 43 6c ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0022c60:	83 c4 10             	add    esp,0x10
c0022c63:	83 c8 ff             	or     eax,0xffffffff
c0022c66:	83 c4 0c             	add    esp,0xc
c0022c69:	c3                   	ret    

c0022c6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022c6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022c6e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022c71:	89 c2                	mov    edx,eax
c0022c73:	c1 ea 08             	shr    edx,0x8
c0022c76:	83 e2 0f             	and    edx,0xf
c0022c79:	fe ca                	dec    dl
c0022c7b:	75 31                	jne    c0022cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c7d:	83 e0 0f             	and    eax,0xf
c0022c80:	3c 03                	cmp    al,0x3
c0022c82:	75 2a                	jne    c0022cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c84:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022c87:	b8 02 00 00 00       	mov    eax,0x2
c0022c8c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022c92:	74 1c                	je     c0022cb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c94:	b8 04 00 00 00       	mov    eax,0x4
c0022c99:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022c9f:	74 0f                	je     c0022cb0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022ca1:	31 c0                	xor    eax,eax
c0022ca3:	83 fa 03             	cmp    edx,0x3
c0022ca6:	0f 94 c0             	sete   al
c0022ca9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022cad:	c3                   	ret    
c0022cae:	31 c0                	xor    eax,eax
c0022cb0:	c3                   	ret    
c0022cb1:	90                   	nop

c0022cb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cb6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cb9:	0f ba e2 0f          	bt     edx,0xf
c0022cbd:	72 f7                	jb     c0022cb6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022cbf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cc2:	83 ca 10             	or     edx,0x10
c0022cc5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ccb:	83 ca 01             	or     edx,0x1
c0022cce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cd1:	c3                   	ret    

c0022cd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cd9:	83 e2 fe             	and    edx,0xfffffffe
c0022cdc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cdf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ce2:	83 e2 ef             	and    edx,0xffffffef
c0022ce5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022ce8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ceb:	0f ba e2 0e          	bt     edx,0xe
c0022cef:	72 f7                	jb     c0022ce8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cf4:	0f ba e2 0f          	bt     edx,0xf
c0022cf8:	72 ee                	jb     c0022ce8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cfa:	c3                   	ret    
c0022cfb:	90                   	nop

c0022cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022cfc:	55                   	push   ebp
c0022cfd:	57                   	push   edi
c0022cfe:	56                   	push   esi
c0022cff:	53                   	push   ebx
c0022d00:	83 ec 1c             	sub    esp,0x1c
c0022d03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022d0f:	53                   	push   ebx
c0022d10:	89 fd                	mov    ebp,edi
c0022d12:	56                   	push   esi
c0022d13:	c1 e5 0a             	shl    ebp,0xa
c0022d16:	e8 b7 ff ff ff       	call   c0022cd2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022d1b:	83 ec 0c             	sub    esp,0xc
c0022d1e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022d24:	01 e8                	add    eax,ebp
c0022d26:	89 03                	mov    DWORD PTR [ebx],eax
c0022d28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d2a:	68 00 04 00 00       	push   0x400
c0022d2f:	6a 00                	push   0x0
c0022d31:	50                   	push   eax
c0022d32:	e8 54 d9 fd ff       	call   c000068b <memset>
c0022d37:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022d3d:	89 fa                	mov    edx,edi
c0022d3f:	01 e8                	add    eax,ebp
c0022d41:	c1 e7 0d             	shl    edi,0xd
c0022d44:	89 03                	mov    DWORD PTR [ebx],eax
c0022d46:	c1 e2 08             	shl    edx,0x8
c0022d49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022d50:	81 c2 00 80 00 00    	add    edx,0x8000
c0022d56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022d5a:	89 d0                	mov    eax,edx
c0022d5c:	83 c4 1c             	add    esp,0x1c
c0022d5f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d65:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022d68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022d6b:	68 00 01 00 00       	push   0x100
c0022d70:	6a 00                	push   0x0
c0022d72:	50                   	push   eax
c0022d73:	e8 13 d9 fd ff       	call   c000068b <memset>
c0022d78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d7c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022d82:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022d88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d8c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022d8f:	83 c4 10             	add    esp,0x10
c0022d92:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022d99:	31 ff                	xor    edi,edi
c0022d9b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022da1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dab:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022db1:	83 c5 20             	add    ebp,0x20
c0022db4:	01 f8                	add    eax,edi
c0022db6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022db9:	52                   	push   edx
c0022dba:	68 00 01 00 00       	push   0x100
c0022dbf:	6a 00                	push   0x0
c0022dc1:	50                   	push   eax
c0022dc2:	e8 c4 d8 fd ff       	call   c000068b <memset>
c0022dc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dcb:	83 c4 10             	add    esp,0x10
c0022dce:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022dd4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022ddb:	01 f8                	add    eax,edi
c0022ddd:	81 c7 00 01 00 00    	add    edi,0x100
c0022de3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022de6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022dec:	75 b3                	jne    c0022da1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022dee:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022df2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022df6:	83 c4 1c             	add    esp,0x1c
c0022df9:	5b                   	pop    ebx
c0022dfa:	5e                   	pop    esi
c0022dfb:	5f                   	pop    edi
c0022dfc:	5d                   	pop    ebp
c0022dfd:	e9 b0 fe ff ff       	jmp    c0022cb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022e02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022e02:	55                   	push   ebp
c0022e03:	57                   	push   edi
c0022e04:	56                   	push   esi
c0022e05:	53                   	push   ebx
c0022e06:	31 db                	xor    ebx,ebx
c0022e08:	83 ec 0c             	sub    esp,0xc
c0022e0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022e0f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022e13:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022e16:	f7 c7 01 00 00 00    	test   edi,0x1
c0022e1c:	0f 84 94 00 00 00    	je     c0022eb6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e26:	89 d8                	mov    eax,ebx
c0022e28:	c1 e0 07             	shl    eax,0x7
c0022e2b:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022e32:	55                   	push   ebp
c0022e33:	56                   	push   esi
c0022e34:	e8 31 fe ff ff       	call   c0022c6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022e39:	59                   	pop    ecx
c0022e3a:	83 f8 01             	cmp    eax,0x1
c0022e3d:	5a                   	pop    edx
c0022e3e:	75 47                	jne    c0022e87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022e40:	51                   	push   ecx
c0022e41:	51                   	push   ecx
c0022e42:	53                   	push   ebx
c0022e43:	68 f9 b2 02 c0       	push   0xc002b2f9
c0022e48:	e8 3c f9 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022e4d:	83 c4 0c             	add    esp,0xc
c0022e50:	53                   	push   ebx
c0022e51:	55                   	push   ebp
c0022e52:	56                   	push   esi
c0022e53:	e8 a4 fe ff ff       	call   c0022cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e58:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022e5f:	e8 70 c6 fe ff       	call   c000f4d4 <malloc>
c0022e64:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e67:	89 c5                	mov    ebp,eax
c0022e69:	e8 de 0c 00 00       	call   c0023b4c <SATA::SATA()>
c0022e6e:	58                   	pop    eax
c0022e6f:	5a                   	pop    edx
c0022e70:	55                   	push   ebp
c0022e71:	56                   	push   esi
c0022e72:	e8 01 0d ff ff       	call   c0013b78 <Device::addChild(Device*)>
c0022e77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e7a:	56                   	push   esi
c0022e7b:	6a 00                	push   0x0
c0022e7d:	53                   	push   ebx
c0022e7e:	55                   	push   ebp
c0022e7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022e82:	83 c4 20             	add    esp,0x20
c0022e85:	eb 2f                	jmp    c0022eb6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e87:	83 f8 04             	cmp    eax,0x4
c0022e8a:	75 1a                	jne    c0022ea6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022e8c:	52                   	push   edx
c0022e8d:	52                   	push   edx
c0022e8e:	53                   	push   ebx
c0022e8f:	68 10 b3 02 c0       	push   0xc002b310
c0022e94:	e8 f0 f8 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022e99:	83 c4 0c             	add    esp,0xc
c0022e9c:	53                   	push   ebx
c0022e9d:	55                   	push   ebp
c0022e9e:	56                   	push   esi
c0022e9f:	e8 58 fe ff ff       	call   c0022cfc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022ea4:	eb 0d                	jmp    c0022eb3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022ea6:	50                   	push   eax
c0022ea7:	50                   	push   eax
c0022ea8:	53                   	push   ebx
c0022ea9:	68 29 b3 02 c0       	push   0xc002b329
c0022eae:	e8 d6 f8 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0022eb3:	83 c4 10             	add    esp,0x10
c0022eb6:	d1 ef                	shr    edi,1
c0022eb8:	43                   	inc    ebx
c0022eb9:	83 fb 20             	cmp    ebx,0x20
c0022ebc:	0f 85 54 ff ff ff    	jne    c0022e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022ec2:	83 c4 0c             	add    esp,0xc
c0022ec5:	5b                   	pop    ebx
c0022ec6:	5e                   	pop    esi
c0022ec7:	5f                   	pop    edi
c0022ec8:	5d                   	pop    ebp
c0022ec9:	c3                   	ret    

c0022eca <SATABus::open(int, int, void*)>:
c0022eca:	83 ec 14             	sub    esp,0x14
c0022ecd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ed1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022ed7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022edd:	52                   	push   edx
c0022ede:	50                   	push   eax
c0022edf:	e8 1e ff ff ff       	call   c0022e02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022ee4:	31 c0                	xor    eax,eax
c0022ee6:	83 c4 1c             	add    esp,0x1c
c0022ee9:	c3                   	ret    

c0022eea <ATA::close(int, int, void*)>:
c0022eea:	83 ec 0c             	sub    esp,0xc
c0022eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022ef7:	85 c0                	test   eax,eax
c0022ef9:	74 0c                	je     c0022f07 <ATA::close(int, int, void*)+0x1d>
c0022efb:	83 ec 0c             	sub    esp,0xc
c0022efe:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f00:	50                   	push   eax
c0022f01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022f04:	83 c4 10             	add    esp,0x10
c0022f07:	31 c0                	xor    eax,eax
c0022f09:	83 c4 0c             	add    esp,0xc
c0022f0c:	c3                   	ret    
c0022f0d:	90                   	nop

c0022f0e <ATA::powerSaving(PowerSavingLevel)>:
c0022f0e:	c3                   	ret    
c0022f0f:	90                   	nop

c0022f10 <ATA::ATA()>:
c0022f10:	83 ec 0c             	sub    esp,0xc
c0022f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f17:	83 ec 04             	sub    esp,0x4
c0022f1a:	68 00 02 00 00       	push   0x200
c0022f1f:	68 3c b4 02 c0       	push   0xc002b43c
c0022f24:	50                   	push   eax
c0022f25:	e8 5e 10 ff ff       	call   c0013f88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022f2a:	83 c4 10             	add    esp,0x10
c0022f2d:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c0022f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f36:	89 10                	mov    DWORD PTR [eax],edx
c0022f38:	90                   	nop
c0022f39:	83 c4 0c             	add    esp,0xc
c0022f3c:	c3                   	ret    
c0022f3d:	90                   	nop

c0022f3e <ATA::flush(bool)>:
c0022f3e:	53                   	push   ebx
c0022f3f:	83 ec 08             	sub    esp,0x8
c0022f42:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022f47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f4b:	19 c0                	sbb    eax,eax
c0022f4d:	83 e0 fd             	and    eax,0xfffffffd
c0022f50:	05 ea 00 00 00       	add    eax,0xea
c0022f55:	50                   	push   eax
c0022f56:	6a 07                	push   0x7
c0022f58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f5f:	50                   	push   eax
c0022f60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f66:	e8 f3 ef ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f6b:	83 c4 0c             	add    esp,0xc
c0022f6e:	6a 00                	push   0x0
c0022f70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f77:	50                   	push   eax
c0022f78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f7e:	e8 87 fb ff ff       	call   c0022b0a <IDE::polling(unsigned char, unsigned int)>
c0022f83:	83 c4 18             	add    esp,0x18
c0022f86:	5b                   	pop    ebx
c0022f87:	c3                   	ret    

c0022f88 <ATA::readyForCommand()>:
c0022f88:	56                   	push   esi
c0022f89:	53                   	push   ebx
c0022f8a:	31 db                	xor    ebx,ebx
c0022f8c:	50                   	push   eax
c0022f8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f91:	50                   	push   eax
c0022f92:	6a 0c                	push   0xc
c0022f94:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022f9b:	50                   	push   eax
c0022f9c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022fa2:	e8 77 f0 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0022fa7:	83 c4 10             	add    esp,0x10
c0022faa:	a8 88                	test   al,0x88
c0022fac:	74 23                	je     c0022fd1 <ATA::readyForCommand()+0x49>
c0022fae:	43                   	inc    ebx
c0022faf:	83 fb 63             	cmp    ebx,0x63
c0022fb2:	7e dd                	jle    c0022f91 <ATA::readyForCommand()+0x9>
c0022fb4:	51                   	push   ecx
c0022fb5:	51                   	push   ecx
c0022fb6:	6a 00                	push   0x0
c0022fb8:	68 40 42 0f 00       	push   0xf4240
c0022fbd:	e8 c0 a2 ff ff       	call   c001d282 <nanoSleep(unsigned long long)>
c0022fc2:	83 c4 10             	add    esp,0x10
c0022fc5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022fcb:	75 c4                	jne    c0022f91 <ATA::readyForCommand()+0x9>
c0022fcd:	31 c0                	xor    eax,eax
c0022fcf:	eb 02                	jmp    c0022fd3 <ATA::readyForCommand()+0x4b>
c0022fd1:	b0 01                	mov    al,0x1
c0022fd3:	5a                   	pop    edx
c0022fd4:	5b                   	pop    ebx
c0022fd5:	5e                   	pop    esi
c0022fd6:	c3                   	ret    
c0022fd7:	90                   	nop

c0022fd8 <ATA::access(unsigned long long, int, void*, bool)>:
c0022fd8:	55                   	push   ebp
c0022fd9:	57                   	push   edi
c0022fda:	56                   	push   esi
c0022fdb:	53                   	push   ebx
c0022fdc:	83 ec 2c             	sub    esp,0x2c
c0022fdf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022fe3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022fe7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022fef:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022ff3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022ff7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022ffb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023001:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023005:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002300f:	c1 e0 06             	shl    eax,0x6
c0023012:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002301a:	74 5d                	je     c0023079 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002301c:	89 fa                	mov    edx,edi
c002301e:	89 f0                	mov    eax,esi
c0023020:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023024:	c1 ea 1c             	shr    edx,0x1c
c0023027:	89 d1                	mov    ecx,edx
c0023029:	09 c1                	or     ecx,eax
c002302b:	74 25                	je     c0023052 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002302d:	31 ed                	xor    ebp,ebp
c002302f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023036:	89 fa                	mov    edx,edi
c0023038:	89 f0                	mov    eax,esi
c002303a:	0f ad d0             	shrd   eax,edx,cl
c002303d:	d3 ea                	shr    edx,cl
c002303f:	f6 c1 20             	test   cl,0x20
c0023042:	74 02                	je     c0023046 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023044:	89 d0                	mov    eax,edx
c0023046:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002304a:	45                   	inc    ebp
c002304b:	83 fd 06             	cmp    ebp,0x6
c002304e:	75 df                	jne    c002302f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023050:	eb 76                	jmp    c00230c8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023052:	89 f0                	mov    eax,esi
c0023054:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023059:	89 fa                	mov    edx,edi
c002305b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023062:	0f ac d0 10          	shrd   eax,edx,0x10
c0023066:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002306b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002306f:	c1 ee 18             	shr    esi,0x18
c0023072:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023077:	eb 56                	jmp    c00230cf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023079:	6a 00                	push   0x0
c002307b:	6a 3f                	push   0x3f
c002307d:	57                   	push   edi
c002307e:	56                   	push   esi
c002307f:	e8 38 24 00 00       	call   c00254bc <__umoddi3>
c0023084:	83 c4 10             	add    esp,0x10
c0023087:	40                   	inc    eax
c0023088:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002308c:	6a 00                	push   0x0
c002308e:	68 f0 03 00 00       	push   0x3f0
c0023093:	57                   	push   edi
c0023094:	56                   	push   esi
c0023095:	e8 22 23 00 00       	call   c00253bc <__udivdi3>
c002309a:	83 c4 10             	add    esp,0x10
c002309d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00230a2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00230a9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00230ae:	6a 00                	push   0x0
c00230b0:	6a 3f                	push   0x3f
c00230b2:	57                   	push   edi
c00230b3:	56                   	push   esi
c00230b4:	e8 03 23 00 00       	call   c00253bc <__udivdi3>
c00230b9:	83 c4 10             	add    esp,0x10
c00230bc:	89 c6                	mov    esi,eax
c00230be:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00230c3:	83 e6 0f             	and    esi,0xf
c00230c6:	eb 07                	jmp    c00230cf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00230c8:	31 f6                	xor    esi,esi
c00230ca:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00230cf:	bf 01 00 00 00       	mov    edi,0x1
c00230d4:	50                   	push   eax
c00230d5:	6a 00                	push   0x0
c00230d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230de:	50                   	push   eax
c00230df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230e3:	e8 82 f0 ff ff       	call   c002216a <IDE::enableIRQs(unsigned char, bool)>
c00230e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230eb:	e8 98 fe ff ff       	call   c0022f88 <ATA::readyForCommand()>
c00230f0:	83 c4 10             	add    esp,0x10
c00230f3:	84 c0                	test   al,al
c00230f5:	0f 84 50 02 00 00    	je     c002334b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00230fb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023101:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023107:	c1 e0 04             	shl    eax,0x4
c002310a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023111:	09 c6                	or     esi,eax
c0023113:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023118:	75 05                	jne    c002311f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002311a:	83 ce a0             	or     esi,0xffffffa0
c002311d:	eb 03                	jmp    c0023122 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002311f:	83 ce e0             	or     esi,0xffffffe0
c0023122:	89 f0                	mov    eax,esi
c0023124:	0f b6 f0             	movzx  esi,al
c0023127:	56                   	push   esi
c0023128:	6a 06                	push   0x6
c002312a:	51                   	push   ecx
c002312b:	52                   	push   edx
c002312c:	e8 2d ee ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023131:	83 c4 10             	add    esp,0x10
c0023134:	6a 00                	push   0x0
c0023136:	6a 01                	push   0x1
c0023138:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002313f:	50                   	push   eax
c0023140:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023146:	e8 13 ee ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002314b:	83 c4 10             	add    esp,0x10
c002314e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023153:	75 6e                	jne    c00231c3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023155:	6a 00                	push   0x0
c0023157:	6a 08                	push   0x8
c0023159:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023160:	50                   	push   eax
c0023161:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023167:	e8 f2 ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002316c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023171:	50                   	push   eax
c0023172:	6a 09                	push   0x9
c0023174:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002317b:	50                   	push   eax
c002317c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023182:	e8 d7 ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023187:	83 c4 20             	add    esp,0x20
c002318a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002318f:	50                   	push   eax
c0023190:	6a 0a                	push   0xa
c0023192:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023199:	50                   	push   eax
c002319a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231a0:	e8 b9 ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231a5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00231aa:	50                   	push   eax
c00231ab:	6a 0b                	push   0xb
c00231ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231b4:	50                   	push   eax
c00231b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231bb:	e8 9e ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c0:	83 c4 20             	add    esp,0x20
c00231c3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00231c8:	50                   	push   eax
c00231c9:	6a 02                	push   0x2
c00231cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231d2:	50                   	push   eax
c00231d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231d9:	e8 80 ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231de:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00231e3:	50                   	push   eax
c00231e4:	6a 03                	push   0x3
c00231e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ed:	50                   	push   eax
c00231ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231f4:	e8 65 ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231f9:	83 c4 20             	add    esp,0x20
c00231fc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023201:	50                   	push   eax
c0023202:	6a 04                	push   0x4
c0023204:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002320b:	50                   	push   eax
c002320c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023212:	e8 47 ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023217:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002321c:	50                   	push   eax
c002321d:	6a 05                	push   0x5
c002321f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023226:	50                   	push   eax
c0023227:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002322d:	e8 2c ed ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023232:	83 c4 20             	add    esp,0x20
c0023235:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002323a:	0f 94 c0             	sete   al
c002323d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023242:	74 09                	je     c002324d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023244:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002324b:	eb 07                	jmp    c0023254 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002324d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023254:	0f b6 c0             	movzx  eax,al
c0023257:	50                   	push   eax
c0023258:	6a 07                	push   0x7
c002325a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023261:	50                   	push   eax
c0023262:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023268:	e8 f1 ec ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002326d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023271:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023275:	83 c4 10             	add    esp,0x10
c0023278:	85 f6                	test   esi,esi
c002327a:	0f 84 ac 00 00 00    	je     c002332c <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023280:	50                   	push   eax
c0023281:	6a 01                	push   0x1
c0023283:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002328a:	50                   	push   eax
c002328b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023291:	e8 74 f8 ff ff       	call   c0022b0a <IDE::polling(unsigned char, unsigned int)>
c0023296:	83 c4 10             	add    esp,0x10
c0023299:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002329f:	84 c0                	test   al,al
c00232a1:	74 20                	je     c00232c3 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00232a3:	0f b6 f8             	movzx  edi,al
c00232a6:	0f b6 d2             	movzx  edx,dl
c00232a9:	57                   	push   edi
c00232aa:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00232b1:	50                   	push   eax
c00232b2:	52                   	push   edx
c00232b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232b9:	e8 b6 f6 ff ff       	call   c0022974 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00232be:	e9 85 00 00 00       	jmp    c0023348 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00232c3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00232c8:	74 41                	je     c002330b <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00232ca:	31 c9                	xor    ecx,ecx
c00232cc:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00232d0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232d4:	50                   	push   eax
c00232d5:	50                   	push   eax
c00232d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232dd:	50                   	push   eax
c00232de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232e4:	e8 63 ec ff ff       	call   c0021f4c <IDE::getBase(unsigned char)>
c00232e9:	89 c2                	mov    edx,eax
c00232eb:	89 e8                	mov    eax,ebp
c00232ed:	66 ef                	out    dx,ax
c00232ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232f3:	83 c4 10             	add    esp,0x10
c00232f6:	41                   	inc    ecx
c00232f7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00232fd:	75 cd                	jne    c00232cc <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00232ff:	4e                   	dec    esi
c0023300:	81 c7 00 02 00 00    	add    edi,0x200
c0023306:	e9 6d ff ff ff       	jmp    c0023278 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002330b:	0f b6 d2             	movzx  edx,dl
c002330e:	51                   	push   ecx
c002330f:	51                   	push   ecx
c0023310:	52                   	push   edx
c0023311:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023317:	e8 30 ec ff ff       	call   c0021f4c <IDE::getBase(unsigned char)>
c002331c:	b9 00 01 00 00       	mov    ecx,0x100
c0023321:	89 c2                	mov    edx,eax
c0023323:	fc                   	cld    
c0023324:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023327:	83 c4 10             	add    esp,0x10
c002332a:	eb d3                	jmp    c00232ff <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002332c:	31 ff                	xor    edi,edi
c002332e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023333:	74 16                	je     c002334b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023335:	50                   	push   eax
c0023336:	50                   	push   eax
c0023337:	31 c0                	xor    eax,eax
c0023339:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002333e:	0f 94 c0             	sete   al
c0023341:	50                   	push   eax
c0023342:	53                   	push   ebx
c0023343:	e8 f6 fb ff ff       	call   c0022f3e <ATA::flush(bool)>
c0023348:	83 c4 10             	add    esp,0x10
c002334b:	83 c4 2c             	add    esp,0x2c
c002334e:	89 f8                	mov    eax,edi
c0023350:	5b                   	pop    ebx
c0023351:	5e                   	pop    esi
c0023352:	5f                   	pop    edi
c0023353:	5d                   	pop    ebp
c0023354:	c3                   	ret    
c0023355:	90                   	nop

c0023356 <ATA::read(unsigned long long, int, void*)>:
c0023356:	57                   	push   edi
c0023357:	b8 04 00 00 00       	mov    eax,0x4
c002335c:	56                   	push   esi
c002335d:	53                   	push   ebx
c002335e:	83 ec 10             	sub    esp,0x10
c0023361:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023365:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023369:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002336c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023370:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023374:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002337a:	77 3b                	ja     c00233b7 <ATA::read(unsigned long long, int, void*)+0x61>
c002337c:	b8 06 00 00 00       	mov    eax,0x6
c0023381:	85 d2                	test   edx,edx
c0023383:	74 32                	je     c00233b7 <ATA::read(unsigned long long, int, void*)+0x61>
c0023385:	50                   	push   eax
c0023386:	50                   	push   eax
c0023387:	6a 00                	push   0x0
c0023389:	52                   	push   edx
c002338a:	53                   	push   ebx
c002338b:	57                   	push   edi
c002338c:	56                   	push   esi
c002338d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023391:	e8 42 fc ff ff       	call   c0022fd8 <ATA::access(unsigned long long, int, void*, bool)>
c0023396:	83 c4 20             	add    esp,0x20
c0023399:	85 c0                	test   eax,eax
c002339b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002339f:	75 11                	jne    c00233b2 <ATA::read(unsigned long long, int, void*)+0x5c>
c00233a1:	01 1d a8 ec 02 c0    	add    DWORD PTR ds:0xc002eca8,ebx
c00233a7:	e8 ca d1 fe ff       	call   c0010576 <VgaText::updateDiskUsage()>
c00233ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233b0:	eb 05                	jmp    c00233b7 <ATA::read(unsigned long long, int, void*)+0x61>
c00233b2:	b8 01 00 00 00       	mov    eax,0x1
c00233b7:	83 c4 10             	add    esp,0x10
c00233ba:	5b                   	pop    ebx
c00233bb:	5e                   	pop    esi
c00233bc:	5f                   	pop    edi
c00233bd:	c3                   	ret    

c00233be <ATA::write(unsigned long long, int, void*)>:
c00233be:	57                   	push   edi
c00233bf:	b8 04 00 00 00       	mov    eax,0x4
c00233c4:	56                   	push   esi
c00233c5:	53                   	push   ebx
c00233c6:	83 ec 10             	sub    esp,0x10
c00233c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00233cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00233d1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00233d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233dc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233e2:	77 3b                	ja     c002341f <ATA::write(unsigned long long, int, void*)+0x61>
c00233e4:	b8 06 00 00 00       	mov    eax,0x6
c00233e9:	85 d2                	test   edx,edx
c00233eb:	74 32                	je     c002341f <ATA::write(unsigned long long, int, void*)+0x61>
c00233ed:	50                   	push   eax
c00233ee:	50                   	push   eax
c00233ef:	6a 01                	push   0x1
c00233f1:	52                   	push   edx
c00233f2:	53                   	push   ebx
c00233f3:	57                   	push   edi
c00233f4:	56                   	push   esi
c00233f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00233f9:	e8 da fb ff ff       	call   c0022fd8 <ATA::access(unsigned long long, int, void*, bool)>
c00233fe:	83 c4 20             	add    esp,0x20
c0023401:	85 c0                	test   eax,eax
c0023403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023407:	75 11                	jne    c002341a <ATA::write(unsigned long long, int, void*)+0x5c>
c0023409:	01 1d a4 ec 02 c0    	add    DWORD PTR ds:0xc002eca4,ebx
c002340f:	e8 62 d1 fe ff       	call   c0010576 <VgaText::updateDiskUsage()>
c0023414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023418:	eb 05                	jmp    c002341f <ATA::write(unsigned long long, int, void*)+0x61>
c002341a:	b8 01 00 00 00       	mov    eax,0x1
c002341f:	83 c4 10             	add    esp,0x10
c0023422:	5b                   	pop    ebx
c0023423:	5e                   	pop    esi
c0023424:	5f                   	pop    edi
c0023425:	c3                   	ret    

c0023426 <ATA::detectCHS()>:
c0023426:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002342a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023430:	c1 e0 06             	shl    eax,0x6
c0023433:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023439:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023443:	c7 44 24 04 6c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b36c
c002344b:	e9 53 64 ff ff       	jmp    c00198a3 <Krnl::panic(char const*)>

c0023450 <ATA::open(int, int, void*)>:
c0023450:	53                   	push   ebx
c0023451:	83 ec 08             	sub    esp,0x8
c0023454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023458:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002345c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023460:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023466:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002346c:	c1 e0 06             	shl    eax,0x6
c002346f:	01 d0                	add    eax,edx
c0023471:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023478:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002347e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023485:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002348f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023495:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002349c:	75 0c                	jne    c00234aa <ATA::open(int, int, void*)+0x5a>
c002349e:	83 ec 0c             	sub    esp,0xc
c00234a1:	53                   	push   ebx
c00234a2:	e8 7f ff ff ff       	call   c0023426 <ATA::detectCHS()>
c00234a7:	83 c4 10             	add    esp,0x10
c00234aa:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00234b0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00234b6:	c1 e0 06             	shl    eax,0x6
c00234b9:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00234c0:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00234ca:	d1 e8                	shr    eax,1
c00234cc:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00234d2:	6a 04                	push   0x4
c00234d4:	6a 0c                	push   0xc
c00234d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234dd:	50                   	push   eax
c00234de:	52                   	push   edx
c00234df:	e8 7a ea ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234e4:	90                   	nop
c00234e5:	90                   	nop
c00234e6:	6a 00                	push   0x0
c00234e8:	6a 0c                	push   0xc
c00234ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234f1:	50                   	push   eax
c00234f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234f8:	e8 61 ea ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234fd:	83 c4 14             	add    esp,0x14
c0023500:	53                   	push   ebx
c0023501:	e8 ea 0a ff ff       	call   c0013ff0 <PhysicalDisk::startCache()>
c0023506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023509:	e8 0c 2b ff ff       	call   c001601a <createPartitionsForDisk(PhysicalDisk*)>
c002350e:	31 c0                	xor    eax,eax
c0023510:	83 c4 18             	add    esp,0x18
c0023513:	5b                   	pop    ebx
c0023514:	c3                   	ret    
c0023515:	90                   	nop

c0023516 <ATAPI::write(unsigned long long, int, void*)>:
c0023516:	b8 03 00 00 00       	mov    eax,0x3
c002351b:	c3                   	ret    

c002351c <ATAPI::close(int, int, void*)>:
c002351c:	83 ec 0c             	sub    esp,0xc
c002351f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023523:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023529:	85 c0                	test   eax,eax
c002352b:	74 0c                	je     c0023539 <ATAPI::close(int, int, void*)+0x1d>
c002352d:	83 ec 0c             	sub    esp,0xc
c0023530:	8b 10                	mov    edx,DWORD PTR [eax]
c0023532:	50                   	push   eax
c0023533:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023536:	83 c4 10             	add    esp,0x10
c0023539:	31 c0                	xor    eax,eax
c002353b:	83 c4 0c             	add    esp,0xc
c002353e:	c3                   	ret    
c002353f:	90                   	nop

c0023540 <ATAPI::ATAPI()>:
c0023540:	83 ec 0c             	sub    esp,0xc
c0023543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023547:	83 ec 04             	sub    esp,0x4
c002354a:	68 00 08 00 00       	push   0x800
c002354f:	68 b4 b3 02 c0       	push   0xc002b3b4
c0023554:	50                   	push   eax
c0023555:	e8 2e 0a ff ff       	call   c0013f88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002355a:	83 c4 10             	add    esp,0x10
c002355d:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c0023562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023566:	89 10                	mov    DWORD PTR [eax],edx
c0023568:	90                   	nop
c0023569:	83 c4 0c             	add    esp,0xc
c002356c:	c3                   	ret    
c002356d:	90                   	nop

c002356e <ATAPI::readyForCommand()>:
c002356e:	56                   	push   esi
c002356f:	53                   	push   ebx
c0023570:	31 db                	xor    ebx,ebx
c0023572:	50                   	push   eax
c0023573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023577:	50                   	push   eax
c0023578:	6a 0c                	push   0xc
c002357a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023581:	50                   	push   eax
c0023582:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023588:	e8 91 ea ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002358d:	83 c4 10             	add    esp,0x10
c0023590:	a8 88                	test   al,0x88
c0023592:	74 23                	je     c00235b7 <ATAPI::readyForCommand()+0x49>
c0023594:	43                   	inc    ebx
c0023595:	83 fb 63             	cmp    ebx,0x63
c0023598:	7e dd                	jle    c0023577 <ATAPI::readyForCommand()+0x9>
c002359a:	51                   	push   ecx
c002359b:	51                   	push   ecx
c002359c:	6a 00                	push   0x0
c002359e:	68 40 42 0f 00       	push   0xf4240
c00235a3:	e8 da 9c ff ff       	call   c001d282 <nanoSleep(unsigned long long)>
c00235a8:	83 c4 10             	add    esp,0x10
c00235ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00235b1:	75 c4                	jne    c0023577 <ATAPI::readyForCommand()+0x9>
c00235b3:	31 c0                	xor    eax,eax
c00235b5:	eb 02                	jmp    c00235b9 <ATAPI::readyForCommand()+0x4b>
c00235b7:	b0 01                	mov    al,0x1
c00235b9:	5a                   	pop    edx
c00235ba:	5b                   	pop    ebx
c00235bb:	5e                   	pop    esi
c00235bc:	c3                   	ret    
c00235bd:	90                   	nop

c00235be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00235be:	55                   	push   ebp
c00235bf:	57                   	push   edi
c00235c0:	56                   	push   esi
c00235c1:	53                   	push   ebx
c00235c2:	83 ec 20             	sub    esp,0x20
c00235c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00235c9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00235cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00235d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00235d5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00235d9:	6a 01                	push   0x1
c00235db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235e2:	50                   	push   eax
c00235e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235e9:	e8 7c eb ff ff       	call   c002216a <IDE::enableIRQs(unsigned char, bool)>
c00235ee:	5e                   	pop    esi
c00235ef:	58                   	pop    eax
c00235f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235f7:	50                   	push   eax
c00235f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235fe:	e8 35 e9 ff ff       	call   c0021f38 <IDE::prepareInterrupt(unsigned char)>
c0023603:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023606:	e8 63 ff ff ff       	call   c002356e <ATAPI::readyForCommand()>
c002360b:	83 c4 10             	add    esp,0x10
c002360e:	84 c0                	test   al,al
c0023610:	75 0a                	jne    c002361c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023612:	bb 01 00 00 00       	mov    ebx,0x1
c0023617:	e9 57 02 00 00       	jmp    c0023873 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002361c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023622:	c1 e0 04             	shl    eax,0x4
c0023625:	0f b6 c0             	movzx  eax,al
c0023628:	50                   	push   eax
c0023629:	6a 06                	push   0x6
c002362b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023632:	50                   	push   eax
c0023633:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023639:	e8 20 e9 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002363e:	6a 00                	push   0x0
c0023640:	6a 01                	push   0x1
c0023642:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023649:	50                   	push   eax
c002364a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023650:	e8 09 e9 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023655:	83 c4 20             	add    esp,0x20
c0023658:	0f b6 c3             	movzx  eax,bl
c002365b:	0f b6 df             	movzx  ebx,bh
c002365e:	50                   	push   eax
c002365f:	6a 04                	push   0x4
c0023661:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023668:	50                   	push   eax
c0023669:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002366f:	e8 ea e8 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023674:	53                   	push   ebx
c0023675:	6a 05                	push   0x5
c0023677:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002367e:	50                   	push   eax
c002367f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023685:	e8 d4 e8 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368a:	83 c4 20             	add    esp,0x20
c002368d:	68 a0 00 00 00       	push   0xa0
c0023692:	6a 07                	push   0x7
c0023694:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002369b:	50                   	push   eax
c002369c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236a2:	e8 b7 e8 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 01                	push   0x1
c00236ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236b3:	50                   	push   eax
c00236b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236ba:	e8 4b f4 ff ff       	call   c0022b0a <IDE::polling(unsigned char, unsigned int)>
c00236bf:	83 c4 10             	add    esp,0x10
c00236c2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00236c8:	84 c0                	test   al,al
c00236ca:	74 23                	je     c00236ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00236cc:	0f b6 d8             	movzx  ebx,al
c00236cf:	0f b6 d2             	movzx  edx,dl
c00236d2:	53                   	push   ebx
c00236d3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00236da:	50                   	push   eax
c00236db:	52                   	push   edx
c00236dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236e2:	e8 8d f2 ff ff       	call   c0022974 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236e7:	83 c4 10             	add    esp,0x10
c00236ea:	e9 84 01 00 00       	jmp    c0023873 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00236ef:	0f b6 d2             	movzx  edx,dl
c00236f2:	53                   	push   ebx
c00236f3:	53                   	push   ebx
c00236f4:	52                   	push   edx
c00236f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236fb:	e8 4c e8 ff ff       	call   c0021f4c <IDE::getBase(unsigned char)>
c0023700:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023704:	b9 06 00 00 00       	mov    ecx,0x6
c0023709:	89 c2                	mov    edx,eax
c002370b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002370e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023712:	83 c4 10             	add    esp,0x10
c0023715:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002371b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023722:	85 db                	test   ebx,ebx
c0023724:	0f 84 ec 00 00 00    	je     c0023816 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002372a:	51                   	push   ecx
c002372b:	51                   	push   ecx
c002372c:	52                   	push   edx
c002372d:	50                   	push   eax
c002372e:	e8 99 e9 ff ff       	call   c00220cc <IDE::waitInterrupt(unsigned char)>
c0023733:	83 c4 10             	add    esp,0x10
c0023736:	84 c0                	test   al,al
c0023738:	0f 84 d4 fe ff ff    	je     c0023612 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002373e:	56                   	push   esi
c002373f:	56                   	push   esi
c0023740:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023747:	50                   	push   eax
c0023748:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002374e:	e8 e5 e7 ff ff       	call   c0021f38 <IDE::prepareInterrupt(unsigned char)>
c0023753:	83 c4 0c             	add    esp,0xc
c0023756:	6a 04                	push   0x4
c0023758:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002375f:	50                   	push   eax
c0023760:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023766:	e8 b3 e8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c002376b:	83 c4 0c             	add    esp,0xc
c002376e:	89 c6                	mov    esi,eax
c0023770:	6a 05                	push   0x5
c0023772:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023779:	50                   	push   eax
c002377a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023780:	e8 99 e8 ff ff       	call   c002201e <IDE::read(unsigned char, unsigned char)>
c0023785:	89 f1                	mov    ecx,esi
c0023787:	0f b6 c0             	movzx  eax,al
c002378a:	0f b6 f1             	movzx  esi,cl
c002378d:	c1 e0 08             	shl    eax,0x8
c0023790:	09 c6                	or     esi,eax
c0023792:	d1 fe                	sar    esi,1
c0023794:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023798:	83 c4 10             	add    esp,0x10
c002379b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00237a0:	74 41                	je     c00237e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00237a2:	31 c9                	xor    ecx,ecx
c00237a4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237aa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237b1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00237b5:	75 0a                	jne    c00237c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00237b7:	01 c9                	add    ecx,ecx
c00237b9:	01 cd                	add    ebp,ecx
c00237bb:	4b                   	dec    ebx
c00237bc:	e9 54 ff ff ff       	jmp    c0023715 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00237c1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00237c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00237ca:	51                   	push   ecx
c00237cb:	51                   	push   ecx
c00237cc:	52                   	push   edx
c00237cd:	50                   	push   eax
c00237ce:	e8 79 e7 ff ff       	call   c0021f4c <IDE::getBase(unsigned char)>
c00237d3:	89 c2                	mov    edx,eax
c00237d5:	89 f0                	mov    eax,esi
c00237d7:	66 ef                	out    dx,ax
c00237d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237dd:	83 c4 10             	add    esp,0x10
c00237e0:	41                   	inc    ecx
c00237e1:	eb c1                	jmp    c00237a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00237e3:	31 f6                	xor    esi,esi
c00237e5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237eb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237f2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00237f6:	75 06                	jne    c00237fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00237f8:	01 f6                	add    esi,esi
c00237fa:	01 f5                	add    ebp,esi
c00237fc:	eb bd                	jmp    c00237bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00237fe:	51                   	push   ecx
c00237ff:	51                   	push   ecx
c0023800:	52                   	push   edx
c0023801:	50                   	push   eax
c0023802:	e8 45 e7 ff ff       	call   c0021f4c <IDE::getBase(unsigned char)>
c0023807:	89 c2                	mov    edx,eax
c0023809:	66 ed                	in     ax,dx
c002380b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023810:	83 c4 10             	add    esp,0x10
c0023813:	46                   	inc    esi
c0023814:	eb cf                	jmp    c00237e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023816:	51                   	push   ecx
c0023817:	51                   	push   ecx
c0023818:	52                   	push   edx
c0023819:	50                   	push   eax
c002381a:	e8 ad e8 ff ff       	call   c00220cc <IDE::waitInterrupt(unsigned char)>
c002381f:	83 c4 10             	add    esp,0x10
c0023822:	84 c0                	test   al,al
c0023824:	0f 84 e8 fd ff ff    	je     c0023612 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002382a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002382f:	52                   	push   edx
c0023830:	52                   	push   edx
c0023831:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023838:	50                   	push   eax
c0023839:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002383f:	e8 f4 e6 ff ff       	call   c0021f38 <IDE::prepareInterrupt(unsigned char)>
c0023844:	83 c4 10             	add    esp,0x10
c0023847:	50                   	push   eax
c0023848:	50                   	push   eax
c0023849:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023850:	50                   	push   eax
c0023851:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023857:	e8 f0 e6 ff ff       	call   c0021f4c <IDE::getBase(unsigned char)>
c002385c:	8d 50 07             	lea    edx,[eax+0x7]
c002385f:	ec                   	in     al,dx
c0023860:	83 c4 10             	add    esp,0x10
c0023863:	a8 88                	test   al,0x88
c0023865:	74 0a                	je     c0023871 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023867:	4b                   	dec    ebx
c0023868:	75 dd                	jne    c0023847 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002386a:	bb 02 00 00 00       	mov    ebx,0x2
c002386f:	eb 02                	jmp    c0023873 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023871:	31 db                	xor    ebx,ebx
c0023873:	83 c4 1c             	add    esp,0x1c
c0023876:	89 d8                	mov    eax,ebx
c0023878:	5b                   	pop    ebx
c0023879:	5e                   	pop    esi
c002387a:	5f                   	pop    edi
c002387b:	5d                   	pop    ebp
c002387c:	c3                   	ret    
c002387d:	90                   	nop

c002387e <ATAPI::diskRemoved()>:
c002387e:	83 ec 18             	sub    esp,0x18
c0023881:	68 bf b3 02 c0       	push   0xc002b3bf
c0023886:	e8 fe ee fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c002388b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002388f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023896:	83 c4 1c             	add    esp,0x1c
c0023899:	c3                   	ret    

c002389a <ATAPI::eject()>:
c002389a:	57                   	push   edi
c002389b:	b9 03 00 00 00       	mov    ecx,0x3
c00238a0:	53                   	push   ebx
c00238a1:	83 ec 14             	sub    esp,0x14
c00238a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00238a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00238ac:	fc                   	cld    
c00238ad:	31 c0                	xor    eax,eax
c00238af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00238b1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00238b6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00238bb:	50                   	push   eax
c00238bc:	50                   	push   eax
c00238bd:	6a 00                	push   0x0
c00238bf:	6a 00                	push   0x0
c00238c1:	6a 00                	push   0x0
c00238c3:	6a 02                	push   0x2
c00238c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00238c9:	50                   	push   eax
c00238ca:	53                   	push   ebx
c00238cb:	e8 ee fc ff ff       	call   c00235be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00238d0:	83 c4 14             	add    esp,0x14
c00238d3:	53                   	push   ebx
c00238d4:	e8 a5 ff ff ff       	call   c002387e <ATAPI::diskRemoved()>
c00238d9:	83 c4 24             	add    esp,0x24
c00238dc:	5b                   	pop    ebx
c00238dd:	5f                   	pop    edi
c00238de:	c3                   	ret    
c00238df:	90                   	nop

c00238e0 <ATAPI::diskInserted()>:
c00238e0:	53                   	push   ebx
c00238e1:	83 ec 14             	sub    esp,0x14
c00238e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238e8:	68 d5 b3 02 c0       	push   0xc002b3d5
c00238ed:	e8 97 ee fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c00238f2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00238f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00238fc:	e8 ef 06 ff ff       	call   c0013ff0 <PhysicalDisk::startCache()>
c0023901:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023905:	83 c4 18             	add    esp,0x18
c0023908:	5b                   	pop    ebx
c0023909:	e9 0c 27 ff ff       	jmp    c001601a <createPartitionsForDisk(PhysicalDisk*)>

c002390e <ATAPI::detectMedia()>:
c002390e:	56                   	push   esi
c002390f:	53                   	push   ebx
c0023910:	83 ec 28             	sub    esp,0x28
c0023913:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023917:	6a 0c                	push   0xc
c0023919:	6a 00                	push   0x0
c002391b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002391f:	56                   	push   esi
c0023920:	e8 66 cd fd ff       	call   c000068b <memset>
c0023925:	58                   	pop    eax
c0023926:	5a                   	pop    edx
c0023927:	6a 00                	push   0x0
c0023929:	6a 00                	push   0x0
c002392b:	6a 00                	push   0x0
c002392d:	6a 00                	push   0x0
c002392f:	56                   	push   esi
c0023930:	53                   	push   ebx
c0023931:	e8 88 fc ff ff       	call   c00235be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023936:	83 c4 1c             	add    esp,0x1c
c0023939:	6a 0c                	push   0xc
c002393b:	6a 00                	push   0x0
c002393d:	56                   	push   esi
c002393e:	e8 48 cd fd ff       	call   c000068b <memset>
c0023943:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023948:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002394d:	59                   	pop    ecx
c002394e:	58                   	pop    eax
c002394f:	6a 01                	push   0x1
c0023951:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023955:	50                   	push   eax
c0023956:	6a 00                	push   0x0
c0023958:	6a 12                	push   0x12
c002395a:	56                   	push   esi
c002395b:	53                   	push   ebx
c002395c:	e8 5d fc ff ff       	call   c00235be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023961:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023965:	83 c4 20             	add    esp,0x20
c0023968:	83 e0 7f             	and    eax,0x7f
c002396b:	3c 70                	cmp    al,0x70
c002396d:	74 15                	je     c0023984 <ATAPI::detectMedia()+0x76>
c002396f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023976:	75 0c                	jne    c0023984 <ATAPI::detectMedia()+0x76>
c0023978:	83 ec 0c             	sub    esp,0xc
c002397b:	53                   	push   ebx
c002397c:	e8 5f ff ff ff       	call   c00238e0 <ATAPI::diskInserted()>
c0023981:	83 c4 10             	add    esp,0x10
c0023984:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023988:	83 e0 0f             	and    eax,0xf
c002398b:	3c 02                	cmp    al,0x2
c002398d:	75 1b                	jne    c00239aa <ATAPI::detectMedia()+0x9c>
c002398f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023994:	75 2d                	jne    c00239c3 <ATAPI::detectMedia()+0xb5>
c0023996:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002399d:	74 24                	je     c00239c3 <ATAPI::detectMedia()+0xb5>
c002399f:	83 ec 0c             	sub    esp,0xc
c00239a2:	53                   	push   ebx
c00239a3:	e8 d6 fe ff ff       	call   c002387e <ATAPI::diskRemoved()>
c00239a8:	eb 16                	jmp    c00239c0 <ATAPI::detectMedia()+0xb2>
c00239aa:	84 c0                	test   al,al
c00239ac:	75 15                	jne    c00239c3 <ATAPI::detectMedia()+0xb5>
c00239ae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239b5:	75 0c                	jne    c00239c3 <ATAPI::detectMedia()+0xb5>
c00239b7:	83 ec 0c             	sub    esp,0xc
c00239ba:	53                   	push   ebx
c00239bb:	e8 20 ff ff ff       	call   c00238e0 <ATAPI::diskInserted()>
c00239c0:	83 c4 10             	add    esp,0x10
c00239c3:	83 c4 24             	add    esp,0x24
c00239c6:	5b                   	pop    ebx
c00239c7:	5e                   	pop    esi
c00239c8:	c3                   	ret    
c00239c9:	90                   	nop

c00239ca <ATAPI::open(int, int, void*)>:
c00239ca:	53                   	push   ebx
c00239cb:	83 ec 08             	sub    esp,0x8
c00239ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00239da:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00239e0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00239e6:	c1 e0 06             	shl    eax,0x6
c00239e9:	01 d0                	add    eax,edx
c00239eb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00239f2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00239f8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00239ff:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023a09:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023a0f:	6a 04                	push   0x4
c0023a11:	6a 0c                	push   0xc
c0023a13:	51                   	push   ecx
c0023a14:	52                   	push   edx
c0023a15:	e8 44 e5 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a1a:	90                   	nop
c0023a1b:	90                   	nop
c0023a1c:	6a 00                	push   0x0
c0023a1e:	6a 0c                	push   0xc
c0023a20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a27:	50                   	push   eax
c0023a28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a2e:	e8 2b e5 ff ff       	call   c0021f5e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a33:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023a3a:	83 c4 14             	add    esp,0x14
c0023a3d:	53                   	push   ebx
c0023a3e:	e8 cb fe ff ff       	call   c002390e <ATAPI::detectMedia()>
c0023a43:	31 c0                	xor    eax,eax
c0023a45:	83 c4 18             	add    esp,0x18
c0023a48:	5b                   	pop    ebx
c0023a49:	c3                   	ret    

c0023a4a <ATAPI::read(unsigned long long, int, void*)>:
c0023a4a:	55                   	push   ebp
c0023a4b:	57                   	push   edi
c0023a4c:	56                   	push   esi
c0023a4d:	53                   	push   ebx
c0023a4e:	83 ec 1c             	sub    esp,0x1c
c0023a51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023a5d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a64:	74 41                	je     c0023aa7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023a66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a6a:	b9 03 00 00 00       	mov    ecx,0x3
c0023a6f:	fc                   	cld    
c0023a70:	31 c0                	xor    eax,eax
c0023a72:	86 fb                	xchg   bl,bh
c0023a74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023a76:	c1 c3 10             	rol    ebx,0x10
c0023a79:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023a7e:	89 e8                	mov    eax,ebp
c0023a80:	86 fb                	xchg   bl,bh
c0023a82:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023a86:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023a8a:	50                   	push   eax
c0023a8b:	50                   	push   eax
c0023a8c:	55                   	push   ebp
c0023a8d:	c1 e5 0b             	shl    ebp,0xb
c0023a90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023a94:	6a 00                	push   0x0
c0023a96:	55                   	push   ebp
c0023a97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023a9b:	50                   	push   eax
c0023a9c:	56                   	push   esi
c0023a9d:	e8 1c fb ff ff       	call   c00235be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023aa2:	83 c4 20             	add    esp,0x20
c0023aa5:	eb 1a                	jmp    c0023ac1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	56                   	push   esi
c0023aab:	e8 5e fe ff ff       	call   c002390e <ATAPI::detectMedia()>
c0023ab0:	83 c4 10             	add    esp,0x10
c0023ab3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023aba:	75 aa                	jne    c0023a66 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023abc:	b8 02 00 00 00       	mov    eax,0x2
c0023ac1:	83 c4 1c             	add    esp,0x1c
c0023ac4:	5b                   	pop    ebx
c0023ac5:	5e                   	pop    esi
c0023ac6:	5f                   	pop    edi
c0023ac7:	5d                   	pop    ebp
c0023ac8:	c3                   	ret    
c0023ac9:	90                   	nop

c0023aca <SATA::close(int, int, void*)>:
c0023aca:	83 ec 0c             	sub    esp,0xc
c0023acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ad7:	85 c0                	test   eax,eax
c0023ad9:	74 0c                	je     c0023ae7 <SATA::close(int, int, void*)+0x1d>
c0023adb:	83 ec 0c             	sub    esp,0xc
c0023ade:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ae0:	50                   	push   eax
c0023ae1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ae4:	83 c4 10             	add    esp,0x10
c0023ae7:	31 c0                	xor    eax,eax
c0023ae9:	83 c4 0c             	add    esp,0xc
c0023aec:	c3                   	ret    
c0023aed:	90                   	nop

c0023aee <SATA::powerSaving(PowerSavingLevel)>:
c0023aee:	c3                   	ret    
c0023aef:	90                   	nop

c0023af0 <SATA::open(int, int, void*)>:
c0023af0:	53                   	push   ebx
c0023af1:	83 ec 14             	sub    esp,0x14
c0023af4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023af8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023afc:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023b06:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023b0c:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b1a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023b24:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023b2a:	68 20 b4 02 c0       	push   0xc002b420
c0023b2f:	e8 55 ec fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0023b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b37:	e8 b4 04 ff ff       	call   c0013ff0 <PhysicalDisk::startCache()>
c0023b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b3f:	e8 d6 24 ff ff       	call   c001601a <createPartitionsForDisk(PhysicalDisk*)>
c0023b44:	31 c0                	xor    eax,eax
c0023b46:	83 c4 18             	add    esp,0x18
c0023b49:	5b                   	pop    ebx
c0023b4a:	c3                   	ret    
c0023b4b:	90                   	nop

c0023b4c <SATA::SATA()>:
c0023b4c:	83 ec 0c             	sub    esp,0xc
c0023b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b53:	83 ec 04             	sub    esp,0x4
c0023b56:	68 00 02 00 00       	push   0x200
c0023b5b:	68 3b b4 02 c0       	push   0xc002b43b
c0023b60:	50                   	push   eax
c0023b61:	e8 22 04 ff ff       	call   c0013f88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c0023b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b72:	89 10                	mov    DWORD PTR [eax],edx
c0023b74:	90                   	nop
c0023b75:	83 c4 0c             	add    esp,0xc
c0023b78:	c3                   	ret    
c0023b79:	90                   	nop

c0023b7a <SATA::access(unsigned long long, int, void*, bool)>:
c0023b7a:	55                   	push   ebp
c0023b7b:	57                   	push   edi
c0023b7c:	56                   	push   esi
c0023b7d:	53                   	push   ebx
c0023b7e:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023b84:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023b8b:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023b92:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023b99:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023ba0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023ba4:	83 ff 08             	cmp    edi,0x8
c0023ba7:	7e 10                	jle    c0023bb9 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023ba9:	83 ec 0c             	sub    esp,0xc
c0023bac:	68 4b b4 02 c0       	push   0xc002b44b
c0023bb1:	e8 ed 5c ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0023bb6:	83 c4 10             	add    esp,0x10
c0023bb9:	51                   	push   ecx
c0023bba:	68 00 02 00 00       	push   0x200
c0023bbf:	68 ee 00 00 00       	push   0xee
c0023bc4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023bc8:	55                   	push   ebp
c0023bc9:	e8 bd ca fd ff       	call   c000068b <memset>
c0023bce:	83 c4 0c             	add    esp,0xc
c0023bd1:	68 00 02 00 00       	push   0x200
c0023bd6:	68 ee 00 00 00       	push   0xee
c0023bdb:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023be2:	50                   	push   eax
c0023be3:	e8 a3 ca fd ff       	call   c000068b <memset>
c0023be8:	55                   	push   ebp
c0023be9:	57                   	push   edi
c0023bea:	56                   	push   esi
c0023beb:	68 7d b4 02 c0       	push   0xc002b47d
c0023bf0:	e8 94 eb fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0023bf5:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023bfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c01:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023c05:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023c0f:	c1 e0 07             	shl    eax,0x7
c0023c12:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023c16:	83 c4 18             	add    esp,0x18
c0023c19:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023c23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c27:	8d 50 02             	lea    edx,[eax+0x2]
c0023c2a:	c1 e2 07             	shl    edx,0x7
c0023c2d:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023c31:	52                   	push   edx
c0023c32:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c36:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023c3c:	e8 e1 ef ff ff       	call   c0022c22 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023c41:	89 c1                	mov    ecx,eax
c0023c43:	58                   	pop    eax
c0023c44:	5a                   	pop    edx
c0023c45:	51                   	push   ecx
c0023c46:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023c4a:	68 b2 b4 02 c0       	push   0xc002b4b2
c0023c4f:	e8 35 eb fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0023c54:	83 c4 10             	add    esp,0x10
c0023c57:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c5b:	83 f9 ff             	cmp    ecx,0xffffffff
c0023c5e:	0f 84 9a 01 00 00    	je     c0023dfe <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023c64:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c6e:	8b 12                	mov    edx,DWORD PTR [edx]
c0023c70:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023c76:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023c7c:	89 c8                	mov    eax,ecx
c0023c7e:	c1 e0 05             	shl    eax,0x5
c0023c81:	01 c2                	add    edx,eax
c0023c83:	8a 02                	mov    al,BYTE PTR [edx]
c0023c85:	83 e0 a0             	and    eax,0xffffffa0
c0023c88:	83 c8 05             	or     eax,0x5
c0023c8b:	88 02                	mov    BYTE PTR [edx],al
c0023c8d:	8d 47 ff             	lea    eax,[edi-0x1]
c0023c90:	c1 f8 04             	sar    eax,0x4
c0023c93:	40                   	inc    eax
c0023c94:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023c98:	0f b7 c0             	movzx  eax,ax
c0023c9b:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023ca1:	83 c0 08             	add    eax,0x8
c0023ca4:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023caa:	c1 e0 04             	shl    eax,0x4
c0023cad:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023cb3:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023cb6:	01 cb                	add    ebx,ecx
c0023cb8:	52                   	push   edx
c0023cb9:	50                   	push   eax
c0023cba:	6a 00                	push   0x0
c0023cbc:	53                   	push   ebx
c0023cbd:	e8 c9 c9 fd ff       	call   c000068b <memset>
c0023cc2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023cc8:	83 c4 10             	add    esp,0x10
c0023ccb:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023cd1:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023cd6:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023cdd:	0d ff 01 00 80       	or     eax,0x800001ff
c0023ce2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023ce6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023cec:	b8 01 00 00 00       	mov    eax,0x1
c0023cf1:	89 c2                	mov    edx,eax
c0023cf3:	c1 e2 04             	shl    edx,0x4
c0023cf6:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023cfd:	8d 50 08             	lea    edx,[eax+0x8]
c0023d00:	40                   	inc    eax
c0023d01:	c1 e2 04             	shl    edx,0x4
c0023d04:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023d0c:	83 f8 10             	cmp    eax,0x10
c0023d0f:	75 e0                	jne    c0023cf1 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023d11:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023d14:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023d18:	66 25 00 7f          	and    ax,0x7f00
c0023d1c:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023d20:	66 0d 27 80          	or     ax,0x8027
c0023d24:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d28:	66 89 03             	mov    WORD PTR [ebx],ax
c0023d2b:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023d2f:	89 f0                	mov    eax,esi
c0023d31:	31 d2                	xor    edx,edx
c0023d33:	c1 e8 10             	shr    eax,0x10
c0023d36:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023d39:	89 f0                	mov    eax,esi
c0023d3b:	c1 e8 18             	shr    eax,0x18
c0023d3e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023d41:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023d45:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023d48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d4c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d53:	c1 e0 07             	shl    eax,0x7
c0023d56:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023d5a:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023d60:	80 e3 88             	and    bl,0x88
c0023d63:	74 0b                	je     c0023d70 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023d65:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d6b:	74 0b                	je     c0023d78 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023d6d:	42                   	inc    edx
c0023d6e:	eb ea                	jmp    c0023d5a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023d70:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d76:	75 0a                	jne    c0023d82 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023d78:	83 ec 0c             	sub    esp,0xc
c0023d7b:	68 bb b4 02 c0       	push   0xc002b4bb
c0023d80:	eb 60                	jmp    c0023de2 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023d82:	be 01 00 00 00       	mov    esi,0x1
c0023d87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d8b:	d3 e6                	shl    esi,cl
c0023d8d:	c1 e3 07             	shl    ebx,0x7
c0023d90:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023d96:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023d9a:	83 ec 0c             	sub    esp,0xc
c0023d9d:	68 c9 b4 02 c0       	push   0xc002b4c9
c0023da2:	e8 e2 e9 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0023da7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023dad:	83 c4 10             	add    esp,0x10
c0023db0:	85 c6                	test   esi,eax
c0023db2:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023db8:	74 1a                	je     c0023dd4 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023dba:	0f ba e0 1e          	bt     eax,0x1e
c0023dbe:	73 da                	jae    c0023d9a <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023dc0:	83 ec 0c             	sub    esp,0xc
c0023dc3:	68 d6 b4 02 c0       	push   0xc002b4d6
c0023dc8:	e8 d6 5a ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0023dcd:	83 c4 10             	add    esp,0x10
c0023dd0:	31 c0                	xor    eax,eax
c0023dd2:	eb 2f                	jmp    c0023e03 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023dd4:	0f ba e0 1e          	bt     eax,0x1e
c0023dd8:	73 12                	jae    c0023dec <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023dda:	83 ec 0c             	sub    esp,0xc
c0023ddd:	68 d6 b4 02 c0       	push   0xc002b4d6
c0023de2:	e8 bc 5a ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0023de7:	83 c4 10             	add    esp,0x10
c0023dea:	eb 12                	jmp    c0023dfe <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023dec:	83 ec 0c             	sub    esp,0xc
c0023def:	68 e7 b4 02 c0       	push   0xc002b4e7
c0023df4:	e8 aa 5a ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0023df9:	83 c4 10             	add    esp,0x10
c0023dfc:	eb fe                	jmp    c0023dfc <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023dfe:	b8 01 00 00 00       	mov    eax,0x1
c0023e03:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023e09:	5b                   	pop    ebx
c0023e0a:	5e                   	pop    esi
c0023e0b:	5f                   	pop    edi
c0023e0c:	5d                   	pop    ebp
c0023e0d:	c3                   	ret    

c0023e0e <SATA::read(unsigned long long, int, void*)>:
c0023e0e:	57                   	push   edi
c0023e0f:	b8 04 00 00 00       	mov    eax,0x4
c0023e14:	56                   	push   esi
c0023e15:	53                   	push   ebx
c0023e16:	83 ec 10             	sub    esp,0x10
c0023e19:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e21:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e24:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e2c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e32:	77 3b                	ja     c0023e6f <SATA::read(unsigned long long, int, void*)+0x61>
c0023e34:	b8 06 00 00 00       	mov    eax,0x6
c0023e39:	85 d2                	test   edx,edx
c0023e3b:	74 32                	je     c0023e6f <SATA::read(unsigned long long, int, void*)+0x61>
c0023e3d:	50                   	push   eax
c0023e3e:	50                   	push   eax
c0023e3f:	6a 00                	push   0x0
c0023e41:	52                   	push   edx
c0023e42:	53                   	push   ebx
c0023e43:	57                   	push   edi
c0023e44:	56                   	push   esi
c0023e45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e49:	e8 2c fd ff ff       	call   c0023b7a <SATA::access(unsigned long long, int, void*, bool)>
c0023e4e:	83 c4 20             	add    esp,0x20
c0023e51:	85 c0                	test   eax,eax
c0023e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e57:	75 11                	jne    c0023e6a <SATA::read(unsigned long long, int, void*)+0x5c>
c0023e59:	01 1d a8 ec 02 c0    	add    DWORD PTR ds:0xc002eca8,ebx
c0023e5f:	e8 12 c7 fe ff       	call   c0010576 <VgaText::updateDiskUsage()>
c0023e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e68:	eb 05                	jmp    c0023e6f <SATA::read(unsigned long long, int, void*)+0x61>
c0023e6a:	b8 01 00 00 00       	mov    eax,0x1
c0023e6f:	83 c4 10             	add    esp,0x10
c0023e72:	5b                   	pop    ebx
c0023e73:	5e                   	pop    esi
c0023e74:	5f                   	pop    edi
c0023e75:	c3                   	ret    

c0023e76 <SATA::write(unsigned long long, int, void*)>:
c0023e76:	57                   	push   edi
c0023e77:	b8 04 00 00 00       	mov    eax,0x4
c0023e7c:	56                   	push   esi
c0023e7d:	53                   	push   ebx
c0023e7e:	83 ec 10             	sub    esp,0x10
c0023e81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e89:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e94:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e9a:	77 3b                	ja     c0023ed7 <SATA::write(unsigned long long, int, void*)+0x61>
c0023e9c:	b8 06 00 00 00       	mov    eax,0x6
c0023ea1:	85 d2                	test   edx,edx
c0023ea3:	74 32                	je     c0023ed7 <SATA::write(unsigned long long, int, void*)+0x61>
c0023ea5:	50                   	push   eax
c0023ea6:	50                   	push   eax
c0023ea7:	6a 01                	push   0x1
c0023ea9:	52                   	push   edx
c0023eaa:	53                   	push   ebx
c0023eab:	57                   	push   edi
c0023eac:	56                   	push   esi
c0023ead:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023eb1:	e8 c4 fc ff ff       	call   c0023b7a <SATA::access(unsigned long long, int, void*, bool)>
c0023eb6:	83 c4 20             	add    esp,0x20
c0023eb9:	85 c0                	test   eax,eax
c0023ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ebf:	75 11                	jne    c0023ed2 <SATA::write(unsigned long long, int, void*)+0x5c>
c0023ec1:	01 1d a4 ec 02 c0    	add    DWORD PTR ds:0xc002eca4,ebx
c0023ec7:	e8 aa c6 fe ff       	call   c0010576 <VgaText::updateDiskUsage()>
c0023ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ed0:	eb 05                	jmp    c0023ed7 <SATA::write(unsigned long long, int, void*)+0x61>
c0023ed2:	b8 01 00 00 00       	mov    eax,0x1
c0023ed7:	83 c4 10             	add    esp,0x10
c0023eda:	5b                   	pop    ebx
c0023edb:	5e                   	pop    esi
c0023edc:	5f                   	pop    edi
c0023edd:	c3                   	ret    

c0023ede <AVX::open(int, int, void*)>:
c0023ede:	83 ec 0c             	sub    esp,0xc
c0023ee1:	e8 42 11 00 00       	call   c0025028 <avxInit>
c0023ee6:	b8 00 00 00 00       	mov    eax,0x0
c0023eeb:	83 c4 0c             	add    esp,0xc
c0023eee:	c3                   	ret    
c0023eef:	90                   	nop

c0023ef0 <AVX::close(int, int, void*)>:
c0023ef0:	83 ec 0c             	sub    esp,0xc
c0023ef3:	e8 31 11 00 00       	call   c0025029 <avxClose>
c0023ef8:	b8 00 00 00 00       	mov    eax,0x0
c0023efd:	83 c4 0c             	add    esp,0xc
c0023f00:	c3                   	ret    
c0023f01:	90                   	nop

c0023f02 <AVX::available()>:
c0023f02:	83 ec 0c             	sub    esp,0xc
c0023f05:	e8 16 11 00 00       	call   c0025020 <avxDetect>
c0023f0a:	85 c0                	test   eax,eax
c0023f0c:	0f 95 c0             	setne  al
c0023f0f:	83 c4 0c             	add    esp,0xc
c0023f12:	c3                   	ret    
c0023f13:	90                   	nop

c0023f14 <AVX::save(void*)>:
c0023f14:	83 ec 0c             	sub    esp,0xc
c0023f17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f1b:	83 ec 0c             	sub    esp,0xc
c0023f1e:	50                   	push   eax
c0023f1f:	e8 02 11 00 00       	call   c0025026 <avxSave>
c0023f24:	83 c4 10             	add    esp,0x10
c0023f27:	90                   	nop
c0023f28:	83 c4 0c             	add    esp,0xc
c0023f2b:	c3                   	ret    

c0023f2c <AVX::load(void*)>:
c0023f2c:	83 ec 0c             	sub    esp,0xc
c0023f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f33:	83 ec 0c             	sub    esp,0xc
c0023f36:	50                   	push   eax
c0023f37:	e8 eb 10 00 00       	call   c0025027 <avxLoad>
c0023f3c:	83 c4 10             	add    esp,0x10
c0023f3f:	90                   	nop
c0023f40:	83 c4 0c             	add    esp,0xc
c0023f43:	c3                   	ret    

c0023f44 <AVX::AVX()>:
c0023f44:	83 ec 0c             	sub    esp,0xc
c0023f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f4b:	83 ec 08             	sub    esp,0x8
c0023f4e:	68 44 b5 02 c0       	push   0xc002b544
c0023f53:	50                   	push   eax
c0023f54:	e8 0d 01 ff ff       	call   c0014066 <FPU::FPU(char const*)>
c0023f59:	83 c4 10             	add    esp,0x10
c0023f5c:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c0023f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f65:	89 10                	mov    DWORD PTR [eax],edx
c0023f67:	90                   	nop
c0023f68:	83 c4 0c             	add    esp,0xc
c0023f6b:	c3                   	ret    

c0023f6c <MMX::available()>:
c0023f6c:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0023f71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023f77:	83 e0 20             	and    eax,0x20
c0023f7a:	84 c0                	test   al,al
c0023f7c:	0f 95 c0             	setne  al
c0023f7f:	c3                   	ret    

c0023f80 <MMX::open(int, int, void*)>:
c0023f80:	83 ec 0c             	sub    esp,0xc
c0023f83:	e8 24 11 00 00       	call   c00250ac <x87Init>
c0023f88:	b8 00 00 00 00       	mov    eax,0x0
c0023f8d:	83 c4 0c             	add    esp,0xc
c0023f90:	c3                   	ret    
c0023f91:	90                   	nop

c0023f92 <MMX::close(int, int, void*)>:
c0023f92:	83 ec 0c             	sub    esp,0xc
c0023f95:	e8 2c 11 00 00       	call   c00250c6 <x87Close>
c0023f9a:	b8 00 00 00 00       	mov    eax,0x0
c0023f9f:	83 c4 0c             	add    esp,0xc
c0023fa2:	c3                   	ret    
c0023fa3:	90                   	nop

c0023fa4 <MMX::save(void*)>:
c0023fa4:	83 ec 0c             	sub    esp,0xc
c0023fa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fab:	83 ec 0c             	sub    esp,0xc
c0023fae:	50                   	push   eax
c0023faf:	e8 ed 10 00 00       	call   c00250a1 <x87Save>
c0023fb4:	83 c4 10             	add    esp,0x10
c0023fb7:	90                   	nop
c0023fb8:	83 c4 0c             	add    esp,0xc
c0023fbb:	c3                   	ret    

c0023fbc <MMX::load(void*)>:
c0023fbc:	83 ec 0c             	sub    esp,0xc
c0023fbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fc3:	83 ec 0c             	sub    esp,0xc
c0023fc6:	50                   	push   eax
c0023fc7:	e8 db 10 00 00       	call   c00250a7 <x87Load>
c0023fcc:	83 c4 10             	add    esp,0x10
c0023fcf:	90                   	nop
c0023fd0:	83 c4 0c             	add    esp,0xc
c0023fd3:	c3                   	ret    

c0023fd4 <MMX::MMX()>:
c0023fd4:	83 ec 0c             	sub    esp,0xc
c0023fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fdb:	83 ec 08             	sub    esp,0x8
c0023fde:	68 84 b5 02 c0       	push   0xc002b584
c0023fe3:	50                   	push   eax
c0023fe4:	e8 7d 00 ff ff       	call   c0014066 <FPU::FPU(char const*)>
c0023fe9:	83 c4 10             	add    esp,0x10
c0023fec:	ba 94 b5 02 c0       	mov    edx,0xc002b594
c0023ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ff5:	89 10                	mov    DWORD PTR [eax],edx
c0023ff7:	90                   	nop
c0023ff8:	83 c4 0c             	add    esp,0xc
c0023ffb:	c3                   	ret    

c0023ffc <SSE::open(int, int, void*)>:
c0023ffc:	83 ec 0c             	sub    esp,0xc
c0023fff:	e8 60 10 00 00       	call   c0025064 <sseInit>
c0024004:	b8 00 00 00 00       	mov    eax,0x0
c0024009:	83 c4 0c             	add    esp,0xc
c002400c:	c3                   	ret    
c002400d:	90                   	nop

c002400e <SSE::close(int, int, void*)>:
c002400e:	83 ec 0c             	sub    esp,0xc
c0024011:	e8 5e 10 00 00       	call   c0025074 <sseClose>
c0024016:	b8 00 00 00 00       	mov    eax,0x0
c002401b:	83 c4 0c             	add    esp,0xc
c002401e:	c3                   	ret    
c002401f:	90                   	nop

c0024020 <SSE::available()>:
c0024020:	83 ec 1c             	sub    esp,0x1c
c0024023:	e8 18 10 00 00       	call   c0025040 <absolutelyNoChanceInHell>
c0024028:	85 c0                	test   eax,eax
c002402a:	0f 95 c0             	setne  al
c002402d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024031:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024035:	83 c4 1c             	add    esp,0x1c
c0024038:	c3                   	ret    
c0024039:	90                   	nop

c002403a <SSE::save(void*)>:
c002403a:	83 ec 0c             	sub    esp,0xc
c002403d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024041:	83 ec 0c             	sub    esp,0xc
c0024044:	50                   	push   eax
c0024045:	e8 0e 10 00 00       	call   c0025058 <sseSave>
c002404a:	83 c4 10             	add    esp,0x10
c002404d:	90                   	nop
c002404e:	83 c4 0c             	add    esp,0xc
c0024051:	c3                   	ret    

c0024052 <SSE::load(void*)>:
c0024052:	83 ec 0c             	sub    esp,0xc
c0024055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024059:	83 ec 0c             	sub    esp,0xc
c002405c:	50                   	push   eax
c002405d:	e8 fc 0f 00 00       	call   c002505e <sseLoad>
c0024062:	83 c4 10             	add    esp,0x10
c0024065:	90                   	nop
c0024066:	83 c4 0c             	add    esp,0xc
c0024069:	c3                   	ret    

c002406a <SSE::SSE()>:
c002406a:	83 ec 0c             	sub    esp,0xc
c002406d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024071:	83 ec 08             	sub    esp,0x8
c0024074:	68 c4 b5 02 c0       	push   0xc002b5c4
c0024079:	50                   	push   eax
c002407a:	e8 e7 ff fe ff       	call   c0014066 <FPU::FPU(char const*)>
c002407f:	83 c4 10             	add    esp,0x10
c0024082:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c0024087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002408b:	89 10                	mov    DWORD PTR [eax],edx
c002408d:	90                   	nop
c002408e:	83 c4 0c             	add    esp,0xc
c0024091:	c3                   	ret    

c0024092 <x87::open(int, int, void*)>:
c0024092:	83 ec 0c             	sub    esp,0xc
c0024095:	e8 12 10 00 00       	call   c00250ac <x87Init>
c002409a:	b8 00 00 00 00       	mov    eax,0x0
c002409f:	83 c4 0c             	add    esp,0xc
c00240a2:	c3                   	ret    
c00240a3:	90                   	nop

c00240a4 <x87::close(int, int, void*)>:
c00240a4:	83 ec 0c             	sub    esp,0xc
c00240a7:	e8 1a 10 00 00       	call   c00250c6 <x87Close>
c00240ac:	b8 00 00 00 00       	mov    eax,0x0
c00240b1:	83 c4 0c             	add    esp,0xc
c00240b4:	c3                   	ret    
c00240b5:	90                   	nop

c00240b6 <x87::available()>:
c00240b6:	83 ec 0c             	sub    esp,0xc
c00240b9:	e8 c8 0f 00 00       	call   c0025086 <x87Detect>
c00240be:	85 c0                	test   eax,eax
c00240c0:	0f 95 c0             	setne  al
c00240c3:	83 c4 0c             	add    esp,0xc
c00240c6:	c3                   	ret    
c00240c7:	90                   	nop

c00240c8 <x87::save(void*)>:
c00240c8:	83 ec 0c             	sub    esp,0xc
c00240cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240cf:	83 ec 0c             	sub    esp,0xc
c00240d2:	50                   	push   eax
c00240d3:	e8 c9 0f 00 00       	call   c00250a1 <x87Save>
c00240d8:	83 c4 10             	add    esp,0x10
c00240db:	90                   	nop
c00240dc:	83 c4 0c             	add    esp,0xc
c00240df:	c3                   	ret    

c00240e0 <x87::load(void*)>:
c00240e0:	83 ec 0c             	sub    esp,0xc
c00240e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240e7:	83 ec 0c             	sub    esp,0xc
c00240ea:	50                   	push   eax
c00240eb:	e8 b7 0f 00 00       	call   c00250a7 <x87Load>
c00240f0:	83 c4 10             	add    esp,0x10
c00240f3:	90                   	nop
c00240f4:	83 c4 0c             	add    esp,0xc
c00240f7:	c3                   	ret    

c00240f8 <x87::x87()>:
c00240f8:	83 ec 0c             	sub    esp,0xc
c00240fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240ff:	83 ec 08             	sub    esp,0x8
c0024102:	68 04 b6 02 c0       	push   0xc002b604
c0024107:	50                   	push   eax
c0024108:	e8 59 ff fe ff       	call   c0014066 <FPU::FPU(char const*)>
c002410d:	83 c4 10             	add    esp,0x10
c0024110:	ba 14 b6 02 c0       	mov    edx,0xc002b614
c0024115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024119:	89 10                	mov    DWORD PTR [eax],edx
c002411b:	90                   	nop
c002411c:	83 c4 0c             	add    esp,0xc
c002411f:	c3                   	ret    

c0024120 <APIC::disable()>:
c0024120:	90                   	nop
c0024121:	c3                   	ret    

c0024122 <APIC::close(int, int, void*)>:
c0024122:	55                   	push   ebp
c0024123:	89 e5                	mov    ebp,esp
c0024125:	83 ec 08             	sub    esp,0x8
c0024128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002412b:	8b 00                	mov    eax,DWORD PTR [eax]
c002412d:	83 c0 3c             	add    eax,0x3c
c0024130:	8b 00                	mov    eax,DWORD PTR [eax]
c0024132:	83 ec 0c             	sub    esp,0xc
c0024135:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024138:	ff d0                	call   eax
c002413a:	83 c4 10             	add    esp,0x10
c002413d:	b8 00 00 00 00       	mov    eax,0x0
c0024142:	c9                   	leave  
c0024143:	c3                   	ret    

c0024144 <IOAPIC::close(int, int, void*)>:
c0024144:	b8 00 00 00 00       	mov    eax,0x0
c0024149:	c3                   	ret    

c002414a <APIC::io_wait()>:
c002414a:	eb 00                	jmp    c002414c <APIC::io_wait()+0x2>
c002414c:	eb 00                	jmp    c002414e <APIC::io_wait()+0x4>
c002414e:	90                   	nop
c002414f:	c3                   	ret    

c0024150 <APIC::getBase()>:
c0024150:	55                   	push   ebp
c0024151:	89 e5                	mov    ebp,esp
c0024153:	83 ec 18             	sub    esp,0x18
c0024156:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c002415b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024161:	83 e0 08             	and    eax,0x8
c0024164:	84 c0                	test   al,al
c0024166:	75 07                	jne    c002416f <APIC::getBase()+0x1f>
c0024168:	b8 00 00 00 00       	mov    eax,0x0
c002416d:	eb 21                	jmp    c0024190 <APIC::getBase()+0x40>
c002416f:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024174:	83 ec 08             	sub    esp,0x8
c0024177:	6a 1b                	push   0x1b
c0024179:	50                   	push   eax
c002417a:	e8 fd a8 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c002417f:	83 c4 10             	add    esp,0x10
c0024182:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024185:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024188:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002418b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024190:	c9                   	leave  
c0024191:	c3                   	ret    

c0024192 <APIC::eoi(unsigned char)>:
c0024192:	55                   	push   ebp
c0024193:	89 e5                	mov    ebp,esp
c0024195:	83 ec 28             	sub    esp,0x28
c0024198:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002419b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002419e:	83 ec 0c             	sub    esp,0xc
c00241a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241a4:	e8 a7 ff ff ff       	call   c0024150 <APIC::getBase()>
c00241a9:	83 c4 10             	add    esp,0x10
c00241ac:	05 b0 00 00 00       	add    eax,0xb0
c00241b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00241b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00241b7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00241bd:	90                   	nop
c00241be:	c9                   	leave  
c00241bf:	c3                   	ret    

c00241c0 <APIC::open(int, int, void*)>:
c00241c0:	55                   	push   ebp
c00241c1:	89 e5                	mov    ebp,esp
c00241c3:	57                   	push   edi
c00241c4:	56                   	push   esi
c00241c5:	53                   	push   ebx
c00241c6:	83 ec 2c             	sub    esp,0x2c
c00241c9:	83 ec 0c             	sub    esp,0xc
c00241cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241cf:	e8 7c ff ff ff       	call   c0024150 <APIC::getBase()>
c00241d4:	83 c4 10             	add    esp,0x10
c00241d7:	89 c2                	mov    edx,eax
c00241d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00241e2:	0f b6 f8             	movzx  edi,al
c00241e5:	89 d0                	mov    eax,edx
c00241e7:	ba 00 00 00 00       	mov    edx,0x0
c00241ec:	89 c1                	mov    ecx,eax
c00241ee:	80 e5 ff             	and    ch,0xff
c00241f1:	89 cb                	mov    ebx,ecx
c00241f3:	0f b6 f2             	movzx  esi,dl
c00241f6:	89 d8                	mov    eax,ebx
c00241f8:	89 f2                	mov    edx,esi
c00241fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00241fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024200:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024204:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024208:	83 e0 00             	and    eax,0x0
c002420b:	09 d0                	or     eax,edx
c002420d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024214:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002421a:	8d 50 01             	lea    edx,[eax+0x1]
c002421d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024220:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024226:	0f b6 d0             	movzx  edx,al
c0024229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002422c:	83 c2 08             	add    edx,0x8
c002422f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024233:	0f b6 c9             	movzx  ecx,cl
c0024236:	81 c9 00 00 01 00    	or     ecx,0x10000
c002423c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024240:	83 ec 0c             	sub    esp,0xc
c0024243:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024246:	e8 05 ff ff ff       	call   c0024150 <APIC::getBase()>
c002424b:	83 c4 10             	add    esp,0x10
c002424e:	05 f0 00 00 00       	add    eax,0xf0
c0024253:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024256:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024259:	8b 00                	mov    eax,DWORD PTR [eax]
c002425b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002425e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024265:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002426c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002426f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024272:	89 10                	mov    DWORD PTR [eax],edx
c0024274:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002427b:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c0024280:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024283:	7d 7c                	jge    c0024301 <APIC::open(int, int, void*)+0x141>
c0024285:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024288:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c002428f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024292:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024295:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c002429c:	c1 e8 08             	shr    eax,0x8
c002429f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00242a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242a6:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c00242ad:	c1 e8 18             	shr    eax,0x18
c00242b0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00242b3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00242b7:	75 40                	jne    c00242f9 <APIC::open(int, int, void*)+0x139>
c00242b9:	83 ec 0c             	sub    esp,0xc
c00242bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242bf:	e8 8c fe ff ff       	call   c0024150 <APIC::getBase()>
c00242c4:	83 c4 10             	add    esp,0x10
c00242c7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00242cb:	75 07                	jne    c00242d4 <APIC::open(int, int, void*)+0x114>
c00242cd:	ba 60 03 00 00       	mov    edx,0x360
c00242d2:	eb 05                	jmp    c00242d9 <APIC::open(int, int, void*)+0x119>
c00242d4:	ba 50 03 00 00       	mov    edx,0x350
c00242d9:	01 d0                	add    eax,edx
c00242db:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00242de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00242e3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00242e6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00242ed:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00242f1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242f4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00242f7:	89 10                	mov    DWORD PTR [eax],edx
c00242f9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00242fc:	e9 7a ff ff ff       	jmp    c002427b <APIC::open(int, int, void*)+0xbb>
c0024301:	b8 00 00 00 00       	mov    eax,0x0
c0024306:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024309:	5b                   	pop    ebx
c002430a:	5e                   	pop    esi
c002430b:	5f                   	pop    edi
c002430c:	5d                   	pop    ebp
c002430d:	c3                   	ret    

c002430e <IOAPIC::IOAPIC()>:
c002430e:	83 ec 0c             	sub    esp,0xc
c0024311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024315:	83 ec 08             	sub    esp,0x8
c0024318:	68 44 b6 02 c0       	push   0xc002b644
c002431d:	50                   	push   eax
c002431e:	e8 45 fa fe ff       	call   c0013d68 <Device::Device(char const*)>
c0024323:	83 c4 10             	add    esp,0x10
c0024326:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c002432b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002432f:	89 10                	mov    DWORD PTR [eax],edx
c0024331:	90                   	nop
c0024332:	83 c4 0c             	add    esp,0xc
c0024335:	c3                   	ret    

c0024336 <APIC::APIC()>:
c0024336:	53                   	push   ebx
c0024337:	83 ec 18             	sub    esp,0x18
c002433a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002433e:	83 ec 08             	sub    esp,0x8
c0024341:	68 4c b6 02 c0       	push   0xc002b64c
c0024346:	50                   	push   eax
c0024347:	e8 74 01 ff ff       	call   c00144c0 <InterruptController::InterruptController(char const*)>
c002434c:	83 c4 10             	add    esp,0x10
c002434f:	ba 24 b7 02 c0       	mov    edx,0xc002b724
c0024354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024358:	89 10                	mov    DWORD PTR [eax],edx
c002435a:	a0 00 ed 02 c0       	mov    al,ds:0xc002ed00
c002435f:	83 f0 01             	xor    eax,0x1
c0024362:	84 c0                	test   al,al
c0024364:	0f 84 a1 00 00 00    	je     c002440b <APIC::APIC()+0xd5>
c002436a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002436f:	a0 e0 d2 02 c0       	mov    al,ds:0xc002d2e0
c0024374:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024378:	0f 83 86 00 00 00    	jae    c0024404 <APIC::APIC()+0xce>
c002437e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024386:	83 ec 0c             	sub    esp,0xc
c0024389:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002438d:	e8 42 b1 fe ff       	call   c000f4d4 <malloc>
c0024392:	83 c4 10             	add    esp,0x10
c0024395:	89 c3                	mov    ebx,eax
c0024397:	83 ec 0c             	sub    esp,0xc
c002439a:	53                   	push   ebx
c002439b:	e8 6e ff ff ff       	call   c002430e <IOAPIC::IOAPIC()>
c00243a0:	83 c4 10             	add    esp,0x10
c00243a3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00243a7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00243ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00243b0:	89 14 85 e0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1320],edx
c00243b7:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c00243bc:	40                   	inc    eax
c00243bd:	a3 c0 ec 02 c0       	mov    ds:0xc002ecc0,eax
c00243c2:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00243c7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00243cd:	83 ec 08             	sub    esp,0x8
c00243d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00243d4:	50                   	push   eax
c00243d5:	e8 9e f7 fe ff       	call   c0013b78 <Device::addChild(Device*)>
c00243da:	83 c4 10             	add    esp,0x10
c00243dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00243e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00243e3:	83 c0 08             	add    eax,0x8
c00243e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00243e8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00243ed:	6a 00                	push   0x0
c00243ef:	6a 00                	push   0x0
c00243f1:	52                   	push   edx
c00243f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243f6:	ff d0                	call   eax
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00243ff:	e9 6b ff ff ff       	jmp    c002436f <APIC::APIC()+0x39>
c0024404:	c6 05 00 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed00,0x1
c002440b:	90                   	nop
c002440c:	83 c4 18             	add    esp,0x18
c002440f:	5b                   	pop    ebx
c0024410:	c3                   	ret    
c0024411:	90                   	nop

c0024412 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024412:	55                   	push   ebp
c0024413:	89 e5                	mov    ebp,esp
c0024415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024418:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002441e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024421:	72 1d                	jb     c0024440 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024426:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002442c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002442f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024435:	01 d0                	add    eax,edx
c0024437:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002443a:	73 04                	jae    c0024440 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002443c:	b0 01                	mov    al,0x1
c002443e:	eb 02                	jmp    c0024442 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024440:	b0 00                	mov    al,0x0
c0024442:	5d                   	pop    ebp
c0024443:	c3                   	ret    

c0024444 <IOAPIC::read(int)>:
c0024444:	55                   	push   ebp
c0024445:	89 e5                	mov    ebp,esp
c0024447:	83 ec 10             	sub    esp,0x10
c002444a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002444d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024453:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024456:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024459:	0f b6 d0             	movzx  edx,al
c002445c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002445f:	89 10                	mov    DWORD PTR [eax],edx
c0024461:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024464:	83 c0 10             	add    eax,0x10
c0024467:	8b 00                	mov    eax,DWORD PTR [eax]
c0024469:	c9                   	leave  
c002446a:	c3                   	ret    
c002446b:	90                   	nop

c002446c <IOAPIC::open(int, int, void*)>:
c002446c:	55                   	push   ebp
c002446d:	89 e5                	mov    ebp,esp
c002446f:	57                   	push   edi
c0024470:	56                   	push   esi
c0024471:	53                   	push   ebx
c0024472:	83 ec 0c             	sub    esp,0xc
c0024475:	83 ec 0c             	sub    esp,0xc
c0024478:	68 77 b6 02 c0       	push   0xc002b677
c002447d:	e8 07 e3 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0024482:	83 c4 10             	add    esp,0x10
c0024485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024488:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002448b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024494:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002449a:	8b 14 85 20 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ce0]
c00244a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244b3:	8b 14 85 a0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c60]
c00244ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244bd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00244c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00244cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00244d5:	0f b6 f8             	movzx  edi,al
c00244d8:	89 d0                	mov    eax,edx
c00244da:	ba 00 00 00 00       	mov    edx,0x0
c00244df:	89 c1                	mov    ecx,eax
c00244e1:	80 e5 ff             	and    ch,0xff
c00244e4:	89 cb                	mov    ebx,ecx
c00244e6:	0f b6 f2             	movzx  esi,dl
c00244e9:	89 d8                	mov    eax,ebx
c00244eb:	89 f2                	mov    edx,esi
c00244ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244f0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00244f3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00244f7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00244fb:	83 e0 00             	and    eax,0x0
c00244fe:	09 d0                	or     eax,edx
c0024500:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024507:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002450d:	8d 50 01             	lea    edx,[eax+0x1]
c0024510:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024513:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024519:	0f b6 d0             	movzx  edx,al
c002451c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002451f:	83 c2 08             	add    edx,0x8
c0024522:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024526:	0f b6 c9             	movzx  ecx,cl
c0024529:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002452f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024533:	83 ec 08             	sub    esp,0x8
c0024536:	6a 01                	push   0x1
c0024538:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002453b:	e8 04 ff ff ff       	call   c0024444 <IOAPIC::read(int)>
c0024540:	83 c4 10             	add    esp,0x10
c0024543:	c1 f8 10             	sar    eax,0x10
c0024546:	0f b6 c0             	movzx  eax,al
c0024549:	8d 50 01             	lea    edx,[eax+0x1]
c002454c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002454f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024555:	b8 00 00 00 00       	mov    eax,0x0
c002455a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002455d:	5b                   	pop    ebx
c002455e:	5e                   	pop    esi
c002455f:	5f                   	pop    edi
c0024560:	5d                   	pop    ebp
c0024561:	c3                   	ret    

c0024562 <IOAPIC::write(int, int)>:
c0024562:	55                   	push   ebp
c0024563:	89 e5                	mov    ebp,esp
c0024565:	83 ec 10             	sub    esp,0x10
c0024568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002456b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024571:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024574:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024577:	0f b6 d0             	movzx  edx,al
c002457a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002457d:	89 10                	mov    DWORD PTR [eax],edx
c002457f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024582:	8d 50 10             	lea    edx,[eax+0x10]
c0024585:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024588:	89 02                	mov    DWORD PTR [edx],eax
c002458a:	90                   	nop
c002458b:	c9                   	leave  
c002458c:	c3                   	ret    
c002458d:	90                   	nop

c002458e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002458e:	55                   	push   ebp
c002458f:	89 e5                	mov    ebp,esp
c0024591:	53                   	push   ebx
c0024592:	83 ec 2c             	sub    esp,0x2c
c0024595:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024598:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002459b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002459e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00245a1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00245a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00245a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00245aa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00245ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00245b0:	88 d8                	mov    al,bl
c00245b2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00245b5:	88 c8                	mov    al,cl
c00245b7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00245ba:	88 d0                	mov    al,dl
c00245bc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00245bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245c3:	83 c0 08             	add    eax,0x8
c00245c6:	01 c0                	add    eax,eax
c00245c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245cf:	83 c0 08             	add    eax,0x8
c00245d2:	01 c0                	add    eax,eax
c00245d4:	40                   	inc    eax
c00245d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245db:	50                   	push   eax
c00245dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245df:	e8 60 fe ff ff       	call   c0024444 <IOAPIC::read(int)>
c00245e4:	83 c4 08             	add    esp,0x8
c00245e7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245ea:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00245f1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245f4:	c1 e0 18             	shl    eax,0x18
c00245f7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00245fa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00245fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024600:	52                   	push   edx
c0024601:	50                   	push   eax
c0024602:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024605:	e8 58 ff ff ff       	call   c0024562 <IOAPIC::write(int, int)>
c002460a:	83 c4 0c             	add    esp,0xc
c002460d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024610:	50                   	push   eax
c0024611:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024614:	e8 2b fe ff ff       	call   c0024444 <IOAPIC::read(int)>
c0024619:	83 c4 08             	add    esp,0x8
c002461c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002461f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024626:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002462d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024634:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024638:	74 09                	je     c0024643 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002463a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024641:	eb 07                	jmp    c002464a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024643:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002464a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002464e:	74 09                	je     c0024659 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024650:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024657:	eb 07                	jmp    c0024660 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024659:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024660:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024667:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002466b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002466e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024671:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024674:	52                   	push   edx
c0024675:	50                   	push   eax
c0024676:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024679:	e8 e4 fe ff ff       	call   c0024562 <IOAPIC::write(int, int)>
c002467e:	83 c4 0c             	add    esp,0xc
c0024681:	90                   	nop
c0024682:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024685:	c9                   	leave  
c0024686:	c3                   	ret    
c0024687:	90                   	nop

c0024688 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024688:	55                   	push   ebp
c0024689:	89 e5                	mov    ebp,esp
c002468b:	57                   	push   edi
c002468c:	56                   	push   esi
c002468d:	53                   	push   ebx
c002468e:	83 ec 2c             	sub    esp,0x2c
c0024691:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024694:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024697:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002469b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002469f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00246a3:	74 5a                	je     c00246ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246a5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00246a9:	7f 44                	jg     c00246ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00246ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246ae:	05 c0 bb 02 c0       	add    eax,0xc002bbc0
c00246b3:	8a 00                	mov    al,BYTE PTR [eax]
c00246b5:	0f b6 c0             	movzx  eax,al
c00246b8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00246bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246be:	66 8b 84 00 c0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d40]
c00246c6:	0f b7 c0             	movzx  eax,ax
c00246c9:	83 e0 02             	and    eax,0x2
c00246cc:	85 c0                	test   eax,eax
c00246ce:	74 04                	je     c00246d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00246d0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00246d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246d7:	66 8b 84 00 c0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d40]
c00246df:	0f b7 c0             	movzx  eax,ax
c00246e2:	83 e0 08             	and    eax,0x8
c00246e5:	85 c0                	test   eax,eax
c00246e7:	74 16                	je     c00246ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246e9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246ed:	eb 10                	jmp    c00246ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246ef:	83 ec 0c             	sub    esp,0xc
c00246f2:	68 88 b6 02 c0       	push   0xc002b688
c00246f7:	e8 a7 51 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00246fc:	83 c4 10             	add    esp,0x10
c00246ff:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024703:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c0024708:	83 ec 08             	sub    esp,0x8
c002470b:	50                   	push   eax
c002470c:	68 c0 b6 02 c0       	push   0xc002b6c0
c0024711:	e8 73 e0 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0024716:	83 c4 10             	add    esp,0x10
c0024719:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024720:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c0024725:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024728:	7d 67                	jge    c0024791 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002472a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002472d:	8b 04 85 e0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1320]
c0024734:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024737:	83 ec 08             	sub    esp,0x8
c002473a:	52                   	push   edx
c002473b:	50                   	push   eax
c002473c:	e8 d1 fc ff ff       	call   c0024412 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024741:	83 c4 10             	add    esp,0x10
c0024744:	84 c0                	test   al,al
c0024746:	74 44                	je     c002478c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024748:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002474b:	8b 1c 85 e0 ec 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1320]
c0024752:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024756:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024759:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002475d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024760:	83 c0 20             	add    eax,0x20
c0024763:	0f b6 f0             	movzx  esi,al
c0024766:	b8 00 00 00 00       	mov    eax,0x0
c002476b:	99                   	cdq    
c002476c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002476f:	0f b6 c9             	movzx  ecx,cl
c0024772:	83 ec 04             	sub    esp,0x4
c0024775:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024778:	57                   	push   edi
c0024779:	56                   	push   esi
c002477a:	52                   	push   edx
c002477b:	50                   	push   eax
c002477c:	51                   	push   ecx
c002477d:	53                   	push   ebx
c002477e:	e8 0b fe ff ff       	call   c002458e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024783:	83 c4 20             	add    esp,0x20
c0024786:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002478a:	eb 05                	jmp    c0024791 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002478c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002478f:	eb 8f                	jmp    c0024720 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024791:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024794:	83 f0 01             	xor    eax,0x1
c0024797:	84 c0                	test   al,al
c0024799:	74 10                	je     c00247ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002479b:	83 ec 0c             	sub    esp,0xc
c002479e:	68 d7 b6 02 c0       	push   0xc002b6d7
c00247a3:	e8 fb 50 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00247a8:	83 c4 10             	add    esp,0x10
c00247ab:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00247af:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00247b6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00247ba:	7f 65                	jg     c0024821 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00247bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247c2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247c9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247cc:	01 ca                	add    edx,ecx
c00247ce:	83 c2 54             	add    edx,0x54
c00247d1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00247d5:	85 c0                	test   eax,eax
c00247d7:	75 43                	jne    c002481c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00247d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247e6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247e9:	01 ca                	add    edx,ecx
c00247eb:	8d 4a 54             	lea    ecx,[edx+0x54]
c00247ee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00247f1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00247f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024802:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024805:	01 ca                	add    edx,ecx
c0024807:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002480d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024810:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024814:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024817:	83 e8 20             	sub    eax,0x20
c002481a:	eb 1a                	jmp    c0024836 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002481c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002481f:	eb 95                	jmp    c00247b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024821:	83 ec 0c             	sub    esp,0xc
c0024824:	68 e4 b6 02 c0       	push   0xc002b6e4
c0024829:	e8 75 50 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c002482e:	83 c4 10             	add    esp,0x10
c0024831:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024836:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024839:	5b                   	pop    ebx
c002483a:	5e                   	pop    esi
c002483b:	5f                   	pop    edi
c002483c:	5d                   	pop    ebp
c002483d:	c3                   	ret    

c002483e <PIC::disable()>:
c002483e:	55                   	push   ebp
c002483f:	89 e5                	mov    ebp,esp
c0024841:	83 ec 10             	sub    esp,0x10
c0024844:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002484a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002484e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024851:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024855:	ee                   	out    dx,al
c0024856:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002485c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024860:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024863:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024867:	ee                   	out    dx,al
c0024868:	90                   	nop
c0024869:	c9                   	leave  
c002486a:	c3                   	ret    
c002486b:	90                   	nop

c002486c <PIC::close(int, int, void*)>:
c002486c:	55                   	push   ebp
c002486d:	89 e5                	mov    ebp,esp
c002486f:	83 ec 08             	sub    esp,0x8
c0024872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024875:	8b 00                	mov    eax,DWORD PTR [eax]
c0024877:	83 c0 3c             	add    eax,0x3c
c002487a:	8b 00                	mov    eax,DWORD PTR [eax]
c002487c:	83 ec 0c             	sub    esp,0xc
c002487f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024882:	ff d0                	call   eax
c0024884:	83 c4 10             	add    esp,0x10
c0024887:	b8 00 00 00 00       	mov    eax,0x0
c002488c:	c9                   	leave  
c002488d:	c3                   	ret    

c002488e <PIC::PIC()>:
c002488e:	83 ec 0c             	sub    esp,0xc
c0024891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024895:	83 ec 08             	sub    esp,0x8
c0024898:	68 90 b7 02 c0       	push   0xc002b790
c002489d:	50                   	push   eax
c002489e:	e8 1d fc fe ff       	call   c00144c0 <InterruptController::InterruptController(char const*)>
c00248a3:	83 c4 10             	add    esp,0x10
c00248a6:	ba bc b7 02 c0       	mov    edx,0xc002b7bc
c00248ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248af:	89 10                	mov    DWORD PTR [eax],edx
c00248b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248bb:	0f b6 d0             	movzx  edx,al
c00248be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00248c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248d3:	0f b6 d0             	movzx  edx,al
c00248d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248da:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00248df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248e9:	8d 50 01             	lea    edx,[eax+0x1]
c00248ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248f0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00248f6:	0f b6 d0             	movzx  edx,al
c00248f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248fd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024901:	83 e1 3f             	and    ecx,0x3f
c0024904:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002490c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024912:	0f b6 d0             	movzx  edx,al
c0024915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024919:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024924:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002492a:	0f b6 d0             	movzx  edx,al
c002492d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024931:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002493a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024940:	8d 50 01             	lea    edx,[eax+0x1]
c0024943:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024947:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002494d:	0f b6 d0             	movzx  edx,al
c0024950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024954:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024958:	83 e1 3f             	and    ecx,0x3f
c002495b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002495f:	90                   	nop
c0024960:	83 c4 0c             	add    esp,0xc
c0024963:	c3                   	ret    

c0024964 <PIC::ioWait()>:
c0024964:	eb 00                	jmp    c0024966 <PIC::ioWait()+0x2>
c0024966:	eb 00                	jmp    c0024968 <PIC::ioWait()+0x4>
c0024968:	90                   	nop
c0024969:	c3                   	ret    

c002496a <PIC::getIRQReg(int)>:
c002496a:	55                   	push   ebp
c002496b:	89 e5                	mov    ebp,esp
c002496d:	83 ec 10             	sub    esp,0x10
c0024970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024973:	0f b6 c0             	movzx  eax,al
c0024976:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002497c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002497f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024982:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024986:	ee                   	out    dx,al
c0024987:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002498a:	0f b6 c0             	movzx  eax,al
c002498d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024993:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024996:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024999:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002499d:	ee                   	out    dx,al
c002499e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00249a4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00249a8:	89 c2                	mov    edx,eax
c00249aa:	ec                   	in     al,dx
c00249ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00249ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00249b1:	0f b6 c0             	movzx  eax,al
c00249b4:	c1 e0 08             	shl    eax,0x8
c00249b7:	89 c1                	mov    ecx,eax
c00249b9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00249bf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00249c3:	89 c2                	mov    edx,eax
c00249c5:	ec                   	in     al,dx
c00249c6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00249c9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00249cc:	0f b6 c0             	movzx  eax,al
c00249cf:	09 c8                	or     eax,ecx
c00249d1:	c9                   	leave  
c00249d2:	c3                   	ret    
c00249d3:	90                   	nop

c00249d4 <PIC::eoi(unsigned char)>:
c00249d4:	55                   	push   ebp
c00249d5:	89 e5                	mov    ebp,esp
c00249d7:	83 ec 14             	sub    esp,0x14
c00249da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249dd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00249e0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00249e4:	75 1e                	jne    c0024a04 <PIC::eoi(unsigned char)+0x30>
c00249e6:	6a 0b                	push   0xb
c00249e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249eb:	e8 7a ff ff ff       	call   c002496a <PIC::getIRQReg(int)>
c00249f0:	83 c4 08             	add    esp,0x8
c00249f3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00249f7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00249fb:	25 80 00 00 00       	and    eax,0x80
c0024a00:	85 c0                	test   eax,eax
c0024a02:	74 5f                	je     c0024a63 <PIC::eoi(unsigned char)+0x8f>
c0024a04:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024a08:	75 2d                	jne    c0024a37 <PIC::eoi(unsigned char)+0x63>
c0024a0a:	6a 0b                	push   0xb
c0024a0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a0f:	e8 56 ff ff ff       	call   c002496a <PIC::getIRQReg(int)>
c0024a14:	83 c4 08             	add    esp,0x8
c0024a17:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024a1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a1e:	66 85 c0             	test   ax,ax
c0024a21:	78 14                	js     c0024a37 <PIC::eoi(unsigned char)+0x63>
c0024a23:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024a29:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024a2d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a30:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a34:	ee                   	out    dx,al
c0024a35:	eb 2d                	jmp    c0024a64 <PIC::eoi(unsigned char)+0x90>
c0024a37:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a3b:	76 12                	jbe    c0024a4f <PIC::eoi(unsigned char)+0x7b>
c0024a3d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a43:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024a47:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a4a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a4e:	ee                   	out    dx,al
c0024a4f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a55:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024a59:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a5c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a60:	ee                   	out    dx,al
c0024a61:	eb 01                	jmp    c0024a64 <PIC::eoi(unsigned char)+0x90>
c0024a63:	90                   	nop
c0024a64:	c9                   	leave  
c0024a65:	c3                   	ret    

c0024a66 <PIC::remap()>:
c0024a66:	55                   	push   ebp
c0024a67:	89 e5                	mov    ebp,esp
c0024a69:	83 ec 48             	sub    esp,0x48
c0024a6c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024a73:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024a7a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024a80:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024a83:	89 c2                	mov    edx,eax
c0024a85:	ec                   	in     al,dx
c0024a86:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024a89:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024a8c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024a8f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024a95:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024a98:	89 c2                	mov    edx,eax
c0024a9a:	ec                   	in     al,dx
c0024a9b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024a9e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024aa1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024aa4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024aaa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024aae:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024ab1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024ab4:	ee                   	out    dx,al
c0024ab5:	83 ec 0c             	sub    esp,0xc
c0024ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024abb:	e8 a4 fe ff ff       	call   c0024964 <PIC::ioWait()>
c0024ac0:	83 c4 10             	add    esp,0x10
c0024ac3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024ac9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024acd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024ad0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024ad3:	ee                   	out    dx,al
c0024ad4:	83 ec 0c             	sub    esp,0xc
c0024ad7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ada:	e8 85 fe ff ff       	call   c0024964 <PIC::ioWait()>
c0024adf:	83 c4 10             	add    esp,0x10
c0024ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024ae5:	0f b6 c0             	movzx  eax,al
c0024ae8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024aee:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024af1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024af4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024af7:	ee                   	out    dx,al
c0024af8:	83 ec 0c             	sub    esp,0xc
c0024afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024afe:	e8 61 fe ff ff       	call   c0024964 <PIC::ioWait()>
c0024b03:	83 c4 10             	add    esp,0x10
c0024b06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b09:	0f b6 c0             	movzx  eax,al
c0024b0c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024b12:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024b15:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024b18:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b1b:	ee                   	out    dx,al
c0024b1c:	83 ec 0c             	sub    esp,0xc
c0024b1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b22:	e8 3d fe ff ff       	call   c0024964 <PIC::ioWait()>
c0024b27:	83 c4 10             	add    esp,0x10
c0024b2a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024b30:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024b34:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024b37:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024b3a:	ee                   	out    dx,al
c0024b3b:	83 ec 0c             	sub    esp,0xc
c0024b3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b41:	e8 1e fe ff ff       	call   c0024964 <PIC::ioWait()>
c0024b46:	83 c4 10             	add    esp,0x10
c0024b49:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024b4f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024b53:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024b56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b59:	ee                   	out    dx,al
c0024b5a:	83 ec 0c             	sub    esp,0xc
c0024b5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b60:	e8 ff fd ff ff       	call   c0024964 <PIC::ioWait()>
c0024b65:	83 c4 10             	add    esp,0x10
c0024b68:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024b6e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024b72:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024b75:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024b78:	ee                   	out    dx,al
c0024b79:	83 ec 0c             	sub    esp,0xc
c0024b7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b7f:	e8 e0 fd ff ff       	call   c0024964 <PIC::ioWait()>
c0024b84:	83 c4 10             	add    esp,0x10
c0024b87:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024b8d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024b91:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024b94:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024b97:	ee                   	out    dx,al
c0024b98:	83 ec 0c             	sub    esp,0xc
c0024b9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b9e:	e8 c1 fd ff ff       	call   c0024964 <PIC::ioWait()>
c0024ba3:	83 c4 10             	add    esp,0x10
c0024ba6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024baa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024bb0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024bb3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024bb6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024bb9:	ee                   	out    dx,al
c0024bba:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024bbe:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024bc4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024bc7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024bca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024bcd:	ee                   	out    dx,al
c0024bce:	90                   	nop
c0024bcf:	c9                   	leave  
c0024bd0:	c3                   	ret    
c0024bd1:	90                   	nop

c0024bd2 <PIC::open(int, int, void*)>:
c0024bd2:	55                   	push   ebp
c0024bd3:	89 e5                	mov    ebp,esp
c0024bd5:	83 ec 18             	sub    esp,0x18
c0024bd8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024bde:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024be2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024be5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024be9:	ee                   	out    dx,al
c0024bea:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024bf0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024bf4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024bf7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024bfb:	ee                   	out    dx,al
c0024bfc:	83 ec 0c             	sub    esp,0xc
c0024bff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c02:	e8 5f fe ff ff       	call   c0024a66 <PIC::remap()>
c0024c07:	83 c4 10             	add    esp,0x10
c0024c0a:	b8 00 00 00 00       	mov    eax,0x0
c0024c0f:	c9                   	leave  
c0024c10:	c3                   	ret    
c0024c11:	90                   	nop

c0024c12 <APICTimer::close(int, int, void*)>:
c0024c12:	b8 00 00 00 00       	mov    eax,0x0
c0024c17:	c3                   	ret    

c0024c18 <apicTimerHandler(regs*, void*)>:
c0024c18:	83 ec 0c             	sub    esp,0xc
c0024c1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c21:	99                   	cdq    
c0024c22:	52                   	push   edx
c0024c23:	50                   	push   eax
c0024c24:	6a 00                	push   0x0
c0024c26:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024c2b:	e8 8c 07 00 00       	call   c00253bc <__udivdi3>
c0024c30:	83 c4 10             	add    esp,0x10
c0024c33:	83 ec 08             	sub    esp,0x8
c0024c36:	52                   	push   edx
c0024c37:	50                   	push   eax
c0024c38:	e8 82 17 ff ff       	call   c00163bf <timerHandler(unsigned long long)>
c0024c3d:	83 c4 10             	add    esp,0x10
c0024c40:	90                   	nop
c0024c41:	83 c4 0c             	add    esp,0xc
c0024c44:	c3                   	ret    
c0024c45:	90                   	nop

c0024c46 <APICTimer::write(int)>:
c0024c46:	53                   	push   ebx
c0024c47:	83 ec 28             	sub    esp,0x28
c0024c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024c52:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024c58:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024c5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c63:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c69:	83 ec 0c             	sub    esp,0xc
c0024c6c:	50                   	push   eax
c0024c6d:	e8 de f4 ff ff       	call   c0024150 <APIC::getBase()>
c0024c72:	83 c4 10             	add    esp,0x10
c0024c75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c79:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c0024c7e:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c0024c84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c88:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c90:	05 e0 03 00 00       	add    eax,0x3e0
c0024c95:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c9f:	05 80 03 00 00       	add    eax,0x380
c0024ca4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024caa:	fb                   	sti    
c0024cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024caf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024cb3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024cb8:	83 d2 00             	adc    edx,0x0
c0024cbb:	89 c1                	mov    ecx,eax
c0024cbd:	89 d3                	mov    ebx,edx
c0024cbf:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c0024cc4:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c0024cca:	39 c8                	cmp    eax,ecx
c0024ccc:	89 d0                	mov    eax,edx
c0024cce:	19 d8                	sbb    eax,ebx
c0024cd0:	73 02                	jae    c0024cd4 <APICTimer::write(int)+0x8e>
c0024cd2:	eb d7                	jmp    c0024cab <APICTimer::write(int)+0x65>
c0024cd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cd8:	05 20 03 00 00       	add    eax,0x320
c0024cdd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ce7:	05 90 03 00 00       	add    eax,0x390
c0024cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cee:	f7 d0                	not    eax
c0024cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cf4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cfc:	ba 00 00 00 00       	mov    edx,0x0
c0024d01:	f7 f3                	div    ebx
c0024d03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d0b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024d11:	0d 00 00 02 00       	or     eax,0x20000
c0024d16:	89 c2                	mov    edx,eax
c0024d18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d1c:	05 20 03 00 00       	add    eax,0x320
c0024d21:	89 10                	mov    DWORD PTR [eax],edx
c0024d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d27:	05 e0 03 00 00       	add    eax,0x3e0
c0024d2c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d36:	05 80 03 00 00       	add    eax,0x380
c0024d3b:	89 c2                	mov    edx,eax
c0024d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024d41:	89 02                	mov    DWORD PTR [edx],eax
c0024d43:	90                   	nop
c0024d44:	83 c4 28             	add    esp,0x28
c0024d47:	5b                   	pop    ebx
c0024d48:	c3                   	ret    
c0024d49:	90                   	nop

c0024d4a <APICTimer::open(int, int, void*)>:
c0024d4a:	57                   	push   edi
c0024d4b:	56                   	push   esi
c0024d4c:	53                   	push   ebx
c0024d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d53:	83 c0 24             	add    eax,0x24
c0024d56:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d58:	83 ec 08             	sub    esp,0x8
c0024d5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d63:	ff d0                	call   eax
c0024d65:	83 c4 10             	add    esp,0x10
c0024d68:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c0024d6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d73:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024d79:	83 ec 0c             	sub    esp,0xc
c0024d7c:	50                   	push   eax
c0024d7d:	e8 ce f3 ff ff       	call   c0024150 <APIC::getBase()>
c0024d82:	83 c4 10             	add    esp,0x10
c0024d85:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d8f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d95:	0f b6 f8             	movzx  edi,al
c0024d98:	89 d0                	mov    eax,edx
c0024d9a:	ba 00 00 00 00       	mov    edx,0x0
c0024d9f:	89 c1                	mov    ecx,eax
c0024da1:	80 e5 ff             	and    ch,0xff
c0024da4:	89 cb                	mov    ebx,ecx
c0024da6:	0f b6 f2             	movzx  esi,dl
c0024da9:	89 d8                	mov    eax,ebx
c0024dab:	89 f2                	mov    edx,esi
c0024dad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024db1:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024db4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024db8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024dbc:	83 e0 00             	and    eax,0x0
c0024dbf:	09 d0                	or     eax,edx
c0024dc1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024dcf:	8d 50 01             	lea    edx,[eax+0x1]
c0024dd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dd6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024ddc:	0f b6 d0             	movzx  edx,al
c0024ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024de3:	83 c2 08             	add    edx,0x8
c0024de6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024dea:	0f b6 c9             	movzx  ecx,cl
c0024ded:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024df3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024dff:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e0d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024e13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e17:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024e1d:	83 ec 0c             	sub    esp,0xc
c0024e20:	51                   	push   ecx
c0024e21:	6a 01                	push   0x1
c0024e23:	68 18 4c 02 c0       	push   0xc0024c18
c0024e28:	52                   	push   edx
c0024e29:	50                   	push   eax
c0024e2a:	e8 cd ec fe ff       	call   c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e2f:	83 c4 20             	add    esp,0x20
c0024e32:	89 c2                	mov    edx,eax
c0024e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e38:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e3e:	b8 00 00 00 00       	mov    eax,0x0
c0024e43:	5b                   	pop    ebx
c0024e44:	5e                   	pop    esi
c0024e45:	5f                   	pop    edi
c0024e46:	c3                   	ret    
c0024e47:	90                   	nop

c0024e48 <APICTimer::APICTimer()>:
c0024e48:	83 ec 0c             	sub    esp,0xc
c0024e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4f:	83 ec 08             	sub    esp,0x8
c0024e52:	68 fc b7 02 c0       	push   0xc002b7fc
c0024e57:	50                   	push   eax
c0024e58:	e8 d3 14 ff ff       	call   c0016330 <Timer::Timer(char const*)>
c0024e5d:	83 c4 10             	add    esp,0x10
c0024e60:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0024e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e69:	89 10                	mov    DWORD PTR [eax],edx
c0024e6b:	90                   	nop
c0024e6c:	83 c4 0c             	add    esp,0xc
c0024e6f:	c3                   	ret    

c0024e70 <PIT::write(int)>:
c0024e70:	83 ec 10             	sub    esp,0x10
c0024e73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024e81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e85:	a3 04 ed 02 c0       	mov    ds:0xc002ed04,eax
c0024e8a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024e8f:	99                   	cdq    
c0024e90:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024e94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e98:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024e9f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024ea4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024ea8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024ead:	ee                   	out    dx,al
c0024eae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024eb2:	0f b6 c0             	movzx  eax,al
c0024eb5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024ebc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024ec0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024ec4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024ec9:	ee                   	out    dx,al
c0024eca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ece:	c1 f8 08             	sar    eax,0x8
c0024ed1:	0f b6 c0             	movzx  eax,al
c0024ed4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024edb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024edf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024ee3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024ee8:	ee                   	out    dx,al
c0024ee9:	90                   	nop
c0024eea:	83 c4 10             	add    esp,0x10
c0024eed:	c3                   	ret    

c0024eee <pitHandler(regs*, void*)>:
c0024eee:	83 ec 0c             	sub    esp,0xc
c0024ef1:	a1 04 ed 02 c0       	mov    eax,ds:0xc002ed04
c0024ef6:	99                   	cdq    
c0024ef7:	52                   	push   edx
c0024ef8:	50                   	push   eax
c0024ef9:	6a 00                	push   0x0
c0024efb:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024f00:	e8 b7 04 00 00       	call   c00253bc <__udivdi3>
c0024f05:	83 c4 10             	add    esp,0x10
c0024f08:	83 ec 08             	sub    esp,0x8
c0024f0b:	52                   	push   edx
c0024f0c:	50                   	push   eax
c0024f0d:	e8 ad 14 ff ff       	call   c00163bf <timerHandler(unsigned long long)>
c0024f12:	83 c4 10             	add    esp,0x10
c0024f15:	90                   	nop
c0024f16:	83 c4 0c             	add    esp,0xc
c0024f19:	c3                   	ret    

c0024f1a <PIT::open(int, int, void*)>:
c0024f1a:	83 ec 0c             	sub    esp,0xc
c0024f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f21:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f23:	83 c0 24             	add    eax,0x24
c0024f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f28:	83 ec 08             	sub    esp,0x8
c0024f2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f33:	ff d0                	call   eax
c0024f35:	83 c4 10             	add    esp,0x10
c0024f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f3c:	83 ec 0c             	sub    esp,0xc
c0024f3f:	6a 00                	push   0x0
c0024f41:	6a 01                	push   0x1
c0024f43:	68 ee 4e 02 c0       	push   0xc0024eee
c0024f48:	6a 00                	push   0x0
c0024f4a:	50                   	push   eax
c0024f4b:	e8 ac eb fe ff       	call   c0013afc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024f50:	83 c4 20             	add    esp,0x20
c0024f53:	89 c2                	mov    edx,eax
c0024f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f59:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024f5f:	b8 00 00 00 00       	mov    eax,0x0
c0024f64:	83 c4 0c             	add    esp,0xc
c0024f67:	c3                   	ret    

c0024f68 <PIT::close(int, int, void*)>:
c0024f68:	83 ec 0c             	sub    esp,0xc
c0024f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f6f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f7d:	6a 01                	push   0x1
c0024f7f:	68 ee 4e 02 c0       	push   0xc0024eee
c0024f84:	6a 00                	push   0x0
c0024f86:	50                   	push   eax
c0024f87:	e8 ae eb fe ff       	call   c0013b3a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024f8c:	83 c4 10             	add    esp,0x10
c0024f8f:	b8 00 00 00 00       	mov    eax,0x0
c0024f94:	83 c4 0c             	add    esp,0xc
c0024f97:	c3                   	ret    

c0024f98 <PIT::PIT()>:
c0024f98:	83 ec 0c             	sub    esp,0xc
c0024f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9f:	83 ec 08             	sub    esp,0x8
c0024fa2:	68 38 b8 02 c0       	push   0xc002b838
c0024fa7:	50                   	push   eax
c0024fa8:	e8 83 13 ff ff       	call   c0016330 <Timer::Timer(char const*)>
c0024fad:	83 c4 10             	add    esp,0x10
c0024fb0:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c0024fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb9:	89 10                	mov    DWORD PTR [eax],edx
c0024fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fc5:	0f b6 d0             	movzx  edx,al
c0024fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fdd:	0f b6 d0             	movzx  edx,al
c0024fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ff3:	8d 50 01             	lea    edx,[eax+0x1]
c0024ff6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ffa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025000:	0f b6 d0             	movzx  edx,al
c0025003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025007:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002500b:	83 e1 3f             	and    ecx,0x3f
c002500e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025012:	90                   	nop
c0025013:	83 c4 0c             	add    esp,0xc
c0025016:	c3                   	ret    
c0025017:	66 90                	xchg   ax,ax
c0025019:	66 90                	xchg   ax,ax
c002501b:	66 90                	xchg   ax,ax
c002501d:	66 90                	xchg   ax,ax
c002501f:	90                   	nop

c0025020 <avxDetect>:
c0025020:	b8 00 00 00 00       	mov    eax,0x0
c0025025:	c3                   	ret    

c0025026 <avxSave>:
c0025026:	c3                   	ret    

c0025027 <avxLoad>:
c0025027:	c3                   	ret    

c0025028 <avxInit>:
c0025028:	c3                   	ret    

c0025029 <avxClose>:
c0025029:	c3                   	ret    

c002502a <wouldSheSayYes>:
c002502a:	c3                   	ret    
c002502b:	49                   	dec    ecx
c002502c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025030:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025034:	75 20                	jne    c0025056 <sseDetect.noSSE+0x1>
c0025036:	4e                   	dec    esi
c0025037:	79 61                	jns    c002509a <x87Detect+0x14>
c0025039:	68 2e 2e 2e 00       	push   0x2e2e2e
c002503e:	66 90                	xchg   ax,ax

c0025040 <absolutelyNoChanceInHell>:
c0025040:	b8 01 00 00 00       	mov    eax,0x1
c0025045:	0f a2                	cpuid  
c0025047:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002504d:	74 06                	je     c0025055 <sseDetect.noSSE>
c002504f:	b8 01 00 00 00       	mov    eax,0x1
c0025054:	c3                   	ret    

c0025055 <sseDetect.noSSE>:
c0025055:	31 c0                	xor    eax,eax
c0025057:	c3                   	ret    

c0025058 <sseSave>:
c0025058:	0f ae 44 24 08       	fxsave [esp+0x8]
c002505d:	c3                   	ret    

c002505e <sseLoad>:
c002505e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025063:	c3                   	ret    

c0025064 <sseInit>:
c0025064:	e8 43 00 00 00       	call   c00250ac <x87Init>
c0025069:	0f 20 e0             	mov    eax,cr4
c002506c:	66 0d 00 06          	or     ax,0x600
c0025070:	0f 22 e0             	mov    cr4,eax
c0025073:	c3                   	ret    

c0025074 <sseClose>:
c0025074:	c3                   	ret    
c0025075:	66 90                	xchg   ax,ax
c0025077:	66 90                	xchg   ax,ax
c0025079:	66 90                	xchg   ax,ax
c002507b:	66 90                	xchg   ax,ax
c002507d:	66 90                	xchg   ax,ax
c002507f:	90                   	nop

c0025080 <value_37F>:
c0025080:	7f 03                	jg     c0025085 <value_37A+0x1>

c0025082 <value_37E>:
c0025082:	7e 03                	jle    c0025087 <x87Detect+0x1>

c0025084 <value_37A>:
c0025084:	7a 03                	jp     c0025089 <x87Detect+0x3>

c0025086 <x87Detect>:
c0025086:	b8 01 00 00 00       	mov    eax,0x1
c002508b:	0f a2                	cpuid  
c002508d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025093:	74 06                	je     c002509b <x87Detect.nox87>
c0025095:	b8 01 00 00 00       	mov    eax,0x1
c002509a:	c3                   	ret    

c002509b <x87Detect.nox87>:
c002509b:	b8 00 00 00 00       	mov    eax,0x0
c00250a0:	c3                   	ret    

c00250a1 <x87Save>:
c00250a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00250a6:	c3                   	ret    

c00250a7 <x87Load>:
c00250a7:	dd 64 24 08          	frstor [esp+0x8]
c00250ab:	c3                   	ret    

c00250ac <x87Init>:
c00250ac:	9b db e3             	finit  
c00250af:	0f 20 c0             	mov    eax,cr0
c00250b2:	66 25 fb ff          	and    ax,0xfffb
c00250b6:	66 0d 22 00          	or     ax,0x22
c00250ba:	0f 22 c0             	mov    cr0,eax
c00250bd:	0f 06                	clts   
c00250bf:	d9 2d 84 50 02 c0    	fldcw  WORD PTR ds:0xc0025084
c00250c5:	c3                   	ret    

c00250c6 <x87Close>:
c00250c6:	c3                   	ret    
c00250c7:	90                   	nop

c00250c8 <__do_global_ctors_aux>:
c00250c8:	a1 bc 7b 02 c0       	mov    eax,ds:0xc0027bbc
c00250cd:	83 f8 ff             	cmp    eax,0xffffffff
c00250d0:	74 1a                	je     c00250ec <__do_global_ctors_aux+0x24>
c00250d2:	55                   	push   ebp
c00250d3:	89 e5                	mov    ebp,esp
c00250d5:	53                   	push   ebx
c00250d6:	52                   	push   edx
c00250d7:	bb bc 7b 02 c0       	mov    ebx,0xc0027bbc
c00250dc:	ff d0                	call   eax
c00250de:	83 eb 04             	sub    ebx,0x4
c00250e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250e3:	83 f8 ff             	cmp    eax,0xffffffff
c00250e6:	75 f4                	jne    c00250dc <__do_global_ctors_aux+0x14>
c00250e8:	58                   	pop    eax
c00250e9:	5b                   	pop    ebx
c00250ea:	5d                   	pop    ebp
c00250eb:	c3                   	ret    
c00250ec:	c3                   	ret    
c00250ed:	66 90                	xchg   ax,ax
c00250ef:	90                   	nop

c00250f0 <__divdi3>:
c00250f0:	55                   	push   ebp
c00250f1:	57                   	push   edi
c00250f2:	56                   	push   esi
c00250f3:	53                   	push   ebx
c00250f4:	83 ec 1c             	sub    esp,0x1c
c00250f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00250fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025102:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025106:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002510a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002510e:	85 db                	test   ebx,ebx
c0025110:	0f 88 8e 00 00 00    	js     c00251a4 <__divdi3+0xb4>
c0025116:	89 dd                	mov    ebp,ebx
c0025118:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025120:	89 d3                	mov    ebx,edx
c0025122:	85 d2                	test   edx,edx
c0025124:	79 0d                	jns    c0025133 <__divdi3+0x43>
c0025126:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002512a:	f7 d8                	neg    eax
c002512c:	83 d2 00             	adc    edx,0x0
c002512f:	f7 da                	neg    edx
c0025131:	89 d3                	mov    ebx,edx
c0025133:	89 c7                	mov    edi,eax
c0025135:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025138:	85 db                	test   ebx,ebx
c002513a:	75 48                	jne    c0025184 <__divdi3+0x94>
c002513c:	39 ef                	cmp    edi,ebp
c002513e:	76 24                	jbe    c0025164 <__divdi3+0x74>
c0025140:	89 ea                	mov    edx,ebp
c0025142:	f7 f7                	div    edi
c0025144:	89 c1                	mov    ecx,eax
c0025146:	31 f6                	xor    esi,esi
c0025148:	89 c8                	mov    eax,ecx
c002514a:	89 f2                	mov    edx,esi
c002514c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025150:	85 c9                	test   ecx,ecx
c0025152:	74 07                	je     c002515b <__divdi3+0x6b>
c0025154:	f7 d8                	neg    eax
c0025156:	83 d2 00             	adc    edx,0x0
c0025159:	f7 da                	neg    edx
c002515b:	83 c4 1c             	add    esp,0x1c
c002515e:	5b                   	pop    ebx
c002515f:	5e                   	pop    esi
c0025160:	5f                   	pop    edi
c0025161:	5d                   	pop    ebp
c0025162:	c3                   	ret    
c0025163:	90                   	nop
c0025164:	85 ff                	test   edi,edi
c0025166:	75 0b                	jne    c0025173 <__divdi3+0x83>
c0025168:	b8 01 00 00 00       	mov    eax,0x1
c002516d:	31 d2                	xor    edx,edx
c002516f:	f7 f3                	div    ebx
c0025171:	89 c7                	mov    edi,eax
c0025173:	31 d2                	xor    edx,edx
c0025175:	89 e8                	mov    eax,ebp
c0025177:	f7 f7                	div    edi
c0025179:	89 c6                	mov    esi,eax
c002517b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002517e:	f7 f7                	div    edi
c0025180:	89 c1                	mov    ecx,eax
c0025182:	eb c4                	jmp    c0025148 <__divdi3+0x58>
c0025184:	39 eb                	cmp    ebx,ebp
c0025186:	77 3c                	ja     c00251c4 <__divdi3+0xd4>
c0025188:	0f bd f3             	bsr    esi,ebx
c002518b:	83 f6 1f             	xor    esi,0x1f
c002518e:	75 40                	jne    c00251d0 <__divdi3+0xe0>
c0025190:	39 eb                	cmp    ebx,ebp
c0025192:	72 09                	jb     c002519d <__divdi3+0xad>
c0025194:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025197:	0f 87 97 00 00 00    	ja     c0025234 <__divdi3+0x144>
c002519d:	b9 01 00 00 00       	mov    ecx,0x1
c00251a2:	eb a4                	jmp    c0025148 <__divdi3+0x58>
c00251a4:	f7 d9                	neg    ecx
c00251a6:	83 d3 00             	adc    ebx,0x0
c00251a9:	f7 db                	neg    ebx
c00251ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00251ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00251b2:	89 dd                	mov    ebp,ebx
c00251b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00251bc:	e9 5f ff ff ff       	jmp    c0025120 <__divdi3+0x30>
c00251c1:	8d 76 00             	lea    esi,[esi+0x0]
c00251c4:	31 f6                	xor    esi,esi
c00251c6:	31 c9                	xor    ecx,ecx
c00251c8:	e9 7b ff ff ff       	jmp    c0025148 <__divdi3+0x58>
c00251cd:	8d 76 00             	lea    esi,[esi+0x0]
c00251d0:	b8 20 00 00 00       	mov    eax,0x20
c00251d5:	29 f0                	sub    eax,esi
c00251d7:	89 f1                	mov    ecx,esi
c00251d9:	d3 e3                	shl    ebx,cl
c00251db:	89 fa                	mov    edx,edi
c00251dd:	88 c1                	mov    cl,al
c00251df:	d3 ea                	shr    edx,cl
c00251e1:	09 da                	or     edx,ebx
c00251e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00251e7:	89 f1                	mov    ecx,esi
c00251e9:	d3 e7                	shl    edi,cl
c00251eb:	89 eb                	mov    ebx,ebp
c00251ed:	88 c1                	mov    cl,al
c00251ef:	d3 eb                	shr    ebx,cl
c00251f1:	89 f1                	mov    ecx,esi
c00251f3:	d3 e5                	shl    ebp,cl
c00251f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00251f8:	88 c1                	mov    cl,al
c00251fa:	d3 ea                	shr    edx,cl
c00251fc:	09 d5                	or     ebp,edx
c00251fe:	89 e8                	mov    eax,ebp
c0025200:	89 da                	mov    edx,ebx
c0025202:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025206:	89 d3                	mov    ebx,edx
c0025208:	89 c5                	mov    ebp,eax
c002520a:	f7 e7                	mul    edi
c002520c:	39 d3                	cmp    ebx,edx
c002520e:	72 18                	jb     c0025228 <__divdi3+0x138>
c0025210:	74 0a                	je     c002521c <__divdi3+0x12c>
c0025212:	89 e9                	mov    ecx,ebp
c0025214:	31 f6                	xor    esi,esi
c0025216:	e9 2d ff ff ff       	jmp    c0025148 <__divdi3+0x58>
c002521b:	90                   	nop
c002521c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002521f:	89 f1                	mov    ecx,esi
c0025221:	d3 e7                	shl    edi,cl
c0025223:	39 c7                	cmp    edi,eax
c0025225:	73 eb                	jae    c0025212 <__divdi3+0x122>
c0025227:	90                   	nop
c0025228:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002522b:	31 f6                	xor    esi,esi
c002522d:	e9 16 ff ff ff       	jmp    c0025148 <__divdi3+0x58>
c0025232:	66 90                	xchg   ax,ax
c0025234:	31 c9                	xor    ecx,ecx
c0025236:	e9 0d ff ff ff       	jmp    c0025148 <__divdi3+0x58>
c002523b:	90                   	nop

c002523c <__moddi3>:
c002523c:	55                   	push   ebp
c002523d:	57                   	push   edi
c002523e:	56                   	push   esi
c002523f:	53                   	push   ebx
c0025240:	83 ec 2c             	sub    esp,0x2c
c0025243:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025247:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002524f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025253:	85 db                	test   ebx,ebx
c0025255:	0f 88 85 00 00 00    	js     c00252e0 <__moddi3+0xa4>
c002525b:	89 de                	mov    esi,ebx
c002525d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025265:	89 d7                	mov    edi,edx
c0025267:	85 d2                	test   edx,edx
c0025269:	79 09                	jns    c0025274 <__moddi3+0x38>
c002526b:	f7 d8                	neg    eax
c002526d:	83 d2 00             	adc    edx,0x0
c0025270:	f7 da                	neg    edx
c0025272:	89 d7                	mov    edi,edx
c0025274:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025278:	89 cd                	mov    ebp,ecx
c002527a:	85 ff                	test   edi,edi
c002527c:	75 52                	jne    c00252d0 <__moddi3+0x94>
c002527e:	89 c3                	mov    ebx,eax
c0025280:	39 f0                	cmp    eax,esi
c0025282:	76 24                	jbe    c00252a8 <__moddi3+0x6c>
c0025284:	89 c8                	mov    eax,ecx
c0025286:	89 f2                	mov    edx,esi
c0025288:	f7 f3                	div    ebx
c002528a:	89 d6                	mov    esi,edx
c002528c:	89 f0                	mov    eax,esi
c002528e:	31 d2                	xor    edx,edx
c0025290:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025294:	85 c9                	test   ecx,ecx
c0025296:	74 07                	je     c002529f <__moddi3+0x63>
c0025298:	f7 d8                	neg    eax
c002529a:	83 d2 00             	adc    edx,0x0
c002529d:	f7 da                	neg    edx
c002529f:	83 c4 2c             	add    esp,0x2c
c00252a2:	5b                   	pop    ebx
c00252a3:	5e                   	pop    esi
c00252a4:	5f                   	pop    edi
c00252a5:	5d                   	pop    ebp
c00252a6:	c3                   	ret    
c00252a7:	90                   	nop
c00252a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00252ac:	85 db                	test   ebx,ebx
c00252ae:	75 0d                	jne    c00252bd <__moddi3+0x81>
c00252b0:	b8 01 00 00 00       	mov    eax,0x1
c00252b5:	31 d2                	xor    edx,edx
c00252b7:	f7 f7                	div    edi
c00252b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252bd:	89 f0                	mov    eax,esi
c00252bf:	31 d2                	xor    edx,edx
c00252c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00252c5:	f7 f7                	div    edi
c00252c7:	89 e8                	mov    eax,ebp
c00252c9:	f7 f7                	div    edi
c00252cb:	89 d6                	mov    esi,edx
c00252cd:	eb bd                	jmp    c002528c <__moddi3+0x50>
c00252cf:	90                   	nop
c00252d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00252d4:	39 f7                	cmp    edi,esi
c00252d6:	76 20                	jbe    c00252f8 <__moddi3+0xbc>
c00252d8:	89 c8                	mov    eax,ecx
c00252da:	89 f2                	mov    edx,esi
c00252dc:	eb b2                	jmp    c0025290 <__moddi3+0x54>
c00252de:	66 90                	xchg   ax,ax
c00252e0:	f7 d9                	neg    ecx
c00252e2:	83 d3 00             	adc    ebx,0x0
c00252e5:	f7 db                	neg    ebx
c00252e7:	89 de                	mov    esi,ebx
c00252e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00252f1:	e9 6f ff ff ff       	jmp    c0025265 <__moddi3+0x29>
c00252f6:	66 90                	xchg   ax,ax
c00252f8:	0f bd c7             	bsr    eax,edi
c00252fb:	83 f0 1f             	xor    eax,0x1f
c00252fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025302:	75 24                	jne    c0025328 <__moddi3+0xec>
c0025304:	39 f7                	cmp    edi,esi
c0025306:	72 06                	jb     c002530e <__moddi3+0xd2>
c0025308:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002530c:	77 0c                	ja     c002531a <__moddi3+0xde>
c002530e:	89 e9                	mov    ecx,ebp
c0025310:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025314:	19 fe                	sbb    esi,edi
c0025316:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002531a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002531e:	89 f2                	mov    edx,esi
c0025320:	e9 6b ff ff ff       	jmp    c0025290 <__moddi3+0x54>
c0025325:	8d 76 00             	lea    esi,[esi+0x0]
c0025328:	b8 20 00 00 00       	mov    eax,0x20
c002532d:	89 c2                	mov    edx,eax
c002532f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025333:	29 da                	sub    edx,ebx
c0025335:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025339:	88 d9                	mov    cl,bl
c002533b:	d3 e7                	shl    edi,cl
c002533d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025341:	88 d1                	mov    cl,dl
c0025343:	d3 e8                	shr    eax,cl
c0025345:	09 c7                	or     edi,eax
c0025347:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002534b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002534f:	89 d8                	mov    eax,ebx
c0025351:	88 d9                	mov    cl,bl
c0025353:	d3 e7                	shl    edi,cl
c0025355:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025359:	89 f3                	mov    ebx,esi
c002535b:	88 d1                	mov    cl,dl
c002535d:	d3 eb                	shr    ebx,cl
c002535f:	89 c7                	mov    edi,eax
c0025361:	88 c1                	mov    cl,al
c0025363:	d3 e6                	shl    esi,cl
c0025365:	89 e8                	mov    eax,ebp
c0025367:	88 d1                	mov    cl,dl
c0025369:	d3 e8                	shr    eax,cl
c002536b:	09 f0                	or     eax,esi
c002536d:	89 f9                	mov    ecx,edi
c002536f:	d3 e5                	shl    ebp,cl
c0025371:	89 da                	mov    edx,ebx
c0025373:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025377:	89 d3                	mov    ebx,edx
c0025379:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002537d:	89 c6                	mov    esi,eax
c002537f:	89 d1                	mov    ecx,edx
c0025381:	39 d3                	cmp    ebx,edx
c0025383:	72 27                	jb     c00253ac <__moddi3+0x170>
c0025385:	74 21                	je     c00253a8 <__moddi3+0x16c>
c0025387:	29 f5                	sub    ebp,esi
c0025389:	19 cb                	sbb    ebx,ecx
c002538b:	89 de                	mov    esi,ebx
c002538d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025391:	d3 e6                	shl    esi,cl
c0025393:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025397:	89 f9                	mov    ecx,edi
c0025399:	d3 ed                	shr    ebp,cl
c002539b:	09 ee                	or     esi,ebp
c002539d:	89 f0                	mov    eax,esi
c002539f:	d3 eb                	shr    ebx,cl
c00253a1:	89 da                	mov    edx,ebx
c00253a3:	e9 e8 fe ff ff       	jmp    c0025290 <__moddi3+0x54>
c00253a8:	39 c5                	cmp    ebp,eax
c00253aa:	73 db                	jae    c0025387 <__moddi3+0x14b>
c00253ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00253b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00253b4:	89 d1                	mov    ecx,edx
c00253b6:	89 c6                	mov    esi,eax
c00253b8:	eb cd                	jmp    c0025387 <__moddi3+0x14b>
c00253ba:	66 90                	xchg   ax,ax

c00253bc <__udivdi3>:
c00253bc:	55                   	push   ebp
c00253bd:	57                   	push   edi
c00253be:	56                   	push   esi
c00253bf:	53                   	push   ebx
c00253c0:	83 ec 1c             	sub    esp,0x1c
c00253c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00253cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253d3:	85 d2                	test   edx,edx
c00253d5:	75 41                	jne    c0025418 <__udivdi3+0x5c>
c00253d7:	39 f7                	cmp    edi,esi
c00253d9:	76 15                	jbe    c00253f0 <__udivdi3+0x34>
c00253db:	89 e8                	mov    eax,ebp
c00253dd:	89 f2                	mov    edx,esi
c00253df:	f7 f7                	div    edi
c00253e1:	31 db                	xor    ebx,ebx
c00253e3:	89 da                	mov    edx,ebx
c00253e5:	83 c4 1c             	add    esp,0x1c
c00253e8:	5b                   	pop    ebx
c00253e9:	5e                   	pop    esi
c00253ea:	5f                   	pop    edi
c00253eb:	5d                   	pop    ebp
c00253ec:	c3                   	ret    
c00253ed:	8d 76 00             	lea    esi,[esi+0x0]
c00253f0:	89 f9                	mov    ecx,edi
c00253f2:	85 ff                	test   edi,edi
c00253f4:	75 0b                	jne    c0025401 <__udivdi3+0x45>
c00253f6:	b8 01 00 00 00       	mov    eax,0x1
c00253fb:	31 d2                	xor    edx,edx
c00253fd:	f7 f7                	div    edi
c00253ff:	89 c1                	mov    ecx,eax
c0025401:	31 d2                	xor    edx,edx
c0025403:	89 f0                	mov    eax,esi
c0025405:	f7 f1                	div    ecx
c0025407:	89 c3                	mov    ebx,eax
c0025409:	89 e8                	mov    eax,ebp
c002540b:	f7 f1                	div    ecx
c002540d:	89 da                	mov    edx,ebx
c002540f:	83 c4 1c             	add    esp,0x1c
c0025412:	5b                   	pop    ebx
c0025413:	5e                   	pop    esi
c0025414:	5f                   	pop    edi
c0025415:	5d                   	pop    ebp
c0025416:	c3                   	ret    
c0025417:	90                   	nop
c0025418:	39 f2                	cmp    edx,esi
c002541a:	77 1c                	ja     c0025438 <__udivdi3+0x7c>
c002541c:	0f bd da             	bsr    ebx,edx
c002541f:	83 f3 1f             	xor    ebx,0x1f
c0025422:	75 24                	jne    c0025448 <__udivdi3+0x8c>
c0025424:	39 f2                	cmp    edx,esi
c0025426:	72 08                	jb     c0025430 <__udivdi3+0x74>
c0025428:	39 ef                	cmp    edi,ebp
c002542a:	0f 87 84 00 00 00    	ja     c00254b4 <__udivdi3+0xf8>
c0025430:	b8 01 00 00 00       	mov    eax,0x1
c0025435:	eb ac                	jmp    c00253e3 <__udivdi3+0x27>
c0025437:	90                   	nop
c0025438:	31 db                	xor    ebx,ebx
c002543a:	31 c0                	xor    eax,eax
c002543c:	89 da                	mov    edx,ebx
c002543e:	83 c4 1c             	add    esp,0x1c
c0025441:	5b                   	pop    ebx
c0025442:	5e                   	pop    esi
c0025443:	5f                   	pop    edi
c0025444:	5d                   	pop    ebp
c0025445:	c3                   	ret    
c0025446:	66 90                	xchg   ax,ax
c0025448:	b8 20 00 00 00       	mov    eax,0x20
c002544d:	29 d8                	sub    eax,ebx
c002544f:	88 d9                	mov    cl,bl
c0025451:	d3 e2                	shl    edx,cl
c0025453:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025457:	89 fa                	mov    edx,edi
c0025459:	88 c1                	mov    cl,al
c002545b:	d3 ea                	shr    edx,cl
c002545d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025461:	09 d1                	or     ecx,edx
c0025463:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025467:	88 d9                	mov    cl,bl
c0025469:	d3 e7                	shl    edi,cl
c002546b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002546f:	89 f7                	mov    edi,esi
c0025471:	88 c1                	mov    cl,al
c0025473:	d3 ef                	shr    edi,cl
c0025475:	88 d9                	mov    cl,bl
c0025477:	d3 e6                	shl    esi,cl
c0025479:	89 ea                	mov    edx,ebp
c002547b:	88 c1                	mov    cl,al
c002547d:	d3 ea                	shr    edx,cl
c002547f:	09 d6                	or     esi,edx
c0025481:	89 f0                	mov    eax,esi
c0025483:	89 fa                	mov    edx,edi
c0025485:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025489:	89 d7                	mov    edi,edx
c002548b:	89 c6                	mov    esi,eax
c002548d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025491:	39 d7                	cmp    edi,edx
c0025493:	72 13                	jb     c00254a8 <__udivdi3+0xec>
c0025495:	74 09                	je     c00254a0 <__udivdi3+0xe4>
c0025497:	89 f0                	mov    eax,esi
c0025499:	31 db                	xor    ebx,ebx
c002549b:	e9 43 ff ff ff       	jmp    c00253e3 <__udivdi3+0x27>
c00254a0:	88 d9                	mov    cl,bl
c00254a2:	d3 e5                	shl    ebp,cl
c00254a4:	39 c5                	cmp    ebp,eax
c00254a6:	73 ef                	jae    c0025497 <__udivdi3+0xdb>
c00254a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00254ab:	31 db                	xor    ebx,ebx
c00254ad:	e9 31 ff ff ff       	jmp    c00253e3 <__udivdi3+0x27>
c00254b2:	66 90                	xchg   ax,ax
c00254b4:	31 c0                	xor    eax,eax
c00254b6:	e9 28 ff ff ff       	jmp    c00253e3 <__udivdi3+0x27>
c00254bb:	90                   	nop

c00254bc <__umoddi3>:
c00254bc:	55                   	push   ebp
c00254bd:	57                   	push   edi
c00254be:	56                   	push   esi
c00254bf:	53                   	push   ebx
c00254c0:	83 ec 1c             	sub    esp,0x1c
c00254c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00254cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00254d3:	89 da                	mov    edx,ebx
c00254d5:	85 c0                	test   eax,eax
c00254d7:	75 37                	jne    c0025510 <__umoddi3+0x54>
c00254d9:	39 df                	cmp    edi,ebx
c00254db:	76 13                	jbe    c00254f0 <__umoddi3+0x34>
c00254dd:	89 f0                	mov    eax,esi
c00254df:	f7 f7                	div    edi
c00254e1:	89 d0                	mov    eax,edx
c00254e3:	31 d2                	xor    edx,edx
c00254e5:	83 c4 1c             	add    esp,0x1c
c00254e8:	5b                   	pop    ebx
c00254e9:	5e                   	pop    esi
c00254ea:	5f                   	pop    edi
c00254eb:	5d                   	pop    ebp
c00254ec:	c3                   	ret    
c00254ed:	8d 76 00             	lea    esi,[esi+0x0]
c00254f0:	89 fd                	mov    ebp,edi
c00254f2:	85 ff                	test   edi,edi
c00254f4:	75 0b                	jne    c0025501 <__umoddi3+0x45>
c00254f6:	b8 01 00 00 00       	mov    eax,0x1
c00254fb:	31 d2                	xor    edx,edx
c00254fd:	f7 f7                	div    edi
c00254ff:	89 c5                	mov    ebp,eax
c0025501:	89 d8                	mov    eax,ebx
c0025503:	31 d2                	xor    edx,edx
c0025505:	f7 f5                	div    ebp
c0025507:	89 f0                	mov    eax,esi
c0025509:	f7 f5                	div    ebp
c002550b:	89 d0                	mov    eax,edx
c002550d:	eb d4                	jmp    c00254e3 <__umoddi3+0x27>
c002550f:	90                   	nop
c0025510:	89 f1                	mov    ecx,esi
c0025512:	39 d8                	cmp    eax,ebx
c0025514:	76 0a                	jbe    c0025520 <__umoddi3+0x64>
c0025516:	89 f0                	mov    eax,esi
c0025518:	83 c4 1c             	add    esp,0x1c
c002551b:	5b                   	pop    ebx
c002551c:	5e                   	pop    esi
c002551d:	5f                   	pop    edi
c002551e:	5d                   	pop    ebp
c002551f:	c3                   	ret    
c0025520:	0f bd e8             	bsr    ebp,eax
c0025523:	83 f5 1f             	xor    ebp,0x1f
c0025526:	75 1c                	jne    c0025544 <__umoddi3+0x88>
c0025528:	39 d8                	cmp    eax,ebx
c002552a:	72 04                	jb     c0025530 <__umoddi3+0x74>
c002552c:	39 f7                	cmp    edi,esi
c002552e:	77 08                	ja     c0025538 <__umoddi3+0x7c>
c0025530:	89 da                	mov    edx,ebx
c0025532:	29 fe                	sub    esi,edi
c0025534:	19 c2                	sbb    edx,eax
c0025536:	89 f1                	mov    ecx,esi
c0025538:	89 c8                	mov    eax,ecx
c002553a:	83 c4 1c             	add    esp,0x1c
c002553d:	5b                   	pop    ebx
c002553e:	5e                   	pop    esi
c002553f:	5f                   	pop    edi
c0025540:	5d                   	pop    ebp
c0025541:	c3                   	ret    
c0025542:	66 90                	xchg   ax,ax
c0025544:	ba 20 00 00 00       	mov    edx,0x20
c0025549:	29 ea                	sub    edx,ebp
c002554b:	89 e9                	mov    ecx,ebp
c002554d:	d3 e0                	shl    eax,cl
c002554f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025553:	89 f8                	mov    eax,edi
c0025555:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025559:	88 d1                	mov    cl,dl
c002555b:	d3 e8                	shr    eax,cl
c002555d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025561:	09 c1                	or     ecx,eax
c0025563:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025567:	89 e9                	mov    ecx,ebp
c0025569:	d3 e7                	shl    edi,cl
c002556b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002556f:	89 d8                	mov    eax,ebx
c0025571:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025575:	88 d1                	mov    cl,dl
c0025577:	d3 e8                	shr    eax,cl
c0025579:	89 c7                	mov    edi,eax
c002557b:	89 e9                	mov    ecx,ebp
c002557d:	d3 e3                	shl    ebx,cl
c002557f:	89 f0                	mov    eax,esi
c0025581:	88 d1                	mov    cl,dl
c0025583:	d3 e8                	shr    eax,cl
c0025585:	09 d8                	or     eax,ebx
c0025587:	89 e9                	mov    ecx,ebp
c0025589:	d3 e6                	shl    esi,cl
c002558b:	89 f3                	mov    ebx,esi
c002558d:	89 fa                	mov    edx,edi
c002558f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025593:	89 d1                	mov    ecx,edx
c0025595:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025599:	89 c6                	mov    esi,eax
c002559b:	89 d7                	mov    edi,edx
c002559d:	39 d1                	cmp    ecx,edx
c002559f:	72 27                	jb     c00255c8 <__umoddi3+0x10c>
c00255a1:	74 21                	je     c00255c4 <__umoddi3+0x108>
c00255a3:	89 ca                	mov    edx,ecx
c00255a5:	29 f3                	sub    ebx,esi
c00255a7:	19 fa                	sbb    edx,edi
c00255a9:	89 d0                	mov    eax,edx
c00255ab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00255af:	d3 e0                	shl    eax,cl
c00255b1:	89 e9                	mov    ecx,ebp
c00255b3:	d3 eb                	shr    ebx,cl
c00255b5:	09 d8                	or     eax,ebx
c00255b7:	d3 ea                	shr    edx,cl
c00255b9:	83 c4 1c             	add    esp,0x1c
c00255bc:	5b                   	pop    ebx
c00255bd:	5e                   	pop    esi
c00255be:	5f                   	pop    edi
c00255bf:	5d                   	pop    ebp
c00255c0:	c3                   	ret    
c00255c1:	8d 76 00             	lea    esi,[esi+0x0]
c00255c4:	39 c3                	cmp    ebx,eax
c00255c6:	73 db                	jae    c00255a3 <__umoddi3+0xe7>
c00255c8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00255cc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00255d0:	89 d7                	mov    edi,edx
c00255d2:	89 c6                	mov    esi,eax
c00255d4:	eb cd                	jmp    c00255a3 <__umoddi3+0xe7>

c00255d6 <__addsf3>:
c00255d6:	55                   	push   ebp
c00255d7:	89 e5                	mov    ebp,esp
c00255d9:	57                   	push   edi
c00255da:	56                   	push   esi
c00255db:	53                   	push   ebx
c00255dc:	83 ec 08             	sub    esp,0x8
c00255df:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00255e2:	89 fa                	mov    edx,edi
c00255e4:	89 f8                	mov    eax,edi
c00255e6:	c1 f8 17             	sar    eax,0x17
c00255e9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00255ec:	c1 e2 08             	shl    edx,0x8
c00255ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00255f5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00255f8:	89 de                	mov    esi,ebx
c00255fa:	c1 fe 17             	sar    esi,0x17
c00255fd:	c1 e3 08             	shl    ebx,0x8
c0025600:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025606:	31 f0                	xor    eax,esi
c0025608:	0f 88 3b 01 00 00    	js     c0025749 <__addsf3+0x173>
c002560e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025611:	29 f1                	sub    ecx,esi
c0025613:	85 c9                	test   ecx,ecx
c0025615:	7e 54                	jle    c002566b <__addsf3+0x95>
c0025617:	89 f0                	mov    eax,esi
c0025619:	84 c0                	test   al,al
c002561b:	75 10                	jne    c002562d <__addsf3+0x57>
c002561d:	85 db                	test   ebx,ebx
c002561f:	0f 84 aa 02 00 00    	je     c00258cf <__addsf3+0x2f9>
c0025625:	49                   	dec    ecx
c0025626:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025629:	74 38                	je     c0025663 <__addsf3+0x8d>
c002562b:	eb 13                	jmp    c0025640 <__addsf3+0x6a>
c002562d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025630:	f7 d0                	not    eax
c0025632:	84 c0                	test   al,al
c0025634:	0f 84 95 02 00 00    	je     c00258cf <__addsf3+0x2f9>
c002563a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025640:	83 f9 1f             	cmp    ecx,0x1f
c0025643:	0f 8f 86 02 00 00    	jg     c00258cf <__addsf3+0x2f9>
c0025649:	89 de                	mov    esi,ebx
c002564b:	d3 ee                	shr    esi,cl
c002564d:	b8 20 00 00 00       	mov    eax,0x20
c0025652:	29 c8                	sub    eax,ecx
c0025654:	89 c1                	mov    ecx,eax
c0025656:	d3 e3                	shl    ebx,cl
c0025658:	31 c0                	xor    eax,eax
c002565a:	85 db                	test   ebx,ebx
c002565c:	0f 95 c0             	setne  al
c002565f:	09 f0                	or     eax,esi
c0025661:	01 d0                	add    eax,edx
c0025663:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025666:	e9 b6 00 00 00       	jmp    c0025721 <__addsf3+0x14b>
c002566b:	74 5c                	je     c00256c9 <__addsf3+0xf3>
c002566d:	89 f1                	mov    ecx,esi
c002566f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025672:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025675:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025679:	75 14                	jne    c002568f <__addsf3+0xb9>
c002567b:	85 d2                	test   edx,edx
c002567d:	0f 84 4c 02 00 00    	je     c00258cf <__addsf3+0x2f9>
c0025683:	49                   	dec    ecx
c0025684:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025687:	0f 84 94 00 00 00    	je     c0025721 <__addsf3+0x14b>
c002568d:	eb 12                	jmp    c00256a1 <__addsf3+0xcb>
c002568f:	89 f0                	mov    eax,esi
c0025691:	f7 d0                	not    eax
c0025693:	84 c0                	test   al,al
c0025695:	0f 84 34 02 00 00    	je     c00258cf <__addsf3+0x2f9>
c002569b:	81 ca 00 00 00 80    	or     edx,0x80000000
c00256a1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256a4:	83 f9 1f             	cmp    ecx,0x1f
c00256a7:	0f 8f 22 02 00 00    	jg     c00258cf <__addsf3+0x2f9>
c00256ad:	89 d7                	mov    edi,edx
c00256af:	d3 ef                	shr    edi,cl
c00256b1:	b8 20 00 00 00       	mov    eax,0x20
c00256b6:	29 c8                	sub    eax,ecx
c00256b8:	89 c1                	mov    ecx,eax
c00256ba:	d3 e2                	shl    edx,cl
c00256bc:	31 c0                	xor    eax,eax
c00256be:	85 d2                	test   edx,edx
c00256c0:	0f 95 c0             	setne  al
c00256c3:	09 f8                	or     eax,edi
c00256c5:	01 d8                	add    eax,ebx
c00256c7:	eb 58                	jmp    c0025721 <__addsf3+0x14b>
c00256c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256cc:	8d 70 01             	lea    esi,[eax+0x1]
c00256cf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00256d5:	75 32                	jne    c0025709 <__addsf3+0x133>
c00256d7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00256db:	75 1f                	jne    c00256fc <__addsf3+0x126>
c00256dd:	85 d2                	test   edx,edx
c00256df:	0f 84 e0 01 00 00    	je     c00258c5 <__addsf3+0x2ef>
c00256e5:	85 db                	test   ebx,ebx
c00256e7:	0f 84 e2 01 00 00    	je     c00258cf <__addsf3+0x2f9>
c00256ed:	89 d0                	mov    eax,edx
c00256ef:	01 d8                	add    eax,ebx
c00256f1:	0f 89 a9 01 00 00    	jns    c00258a0 <__addsf3+0x2ca>
c00256f7:	e9 9d 01 00 00       	jmp    c0025899 <__addsf3+0x2c3>
c00256fc:	85 d2                	test   edx,edx
c00256fe:	0f 85 cb 01 00 00    	jne    c00258cf <__addsf3+0x2f9>
c0025704:	e9 bc 01 00 00       	jmp    c00258c5 <__addsf3+0x2ef>
c0025709:	31 c0                	xor    eax,eax
c002570b:	89 f1                	mov    ecx,esi
c002570d:	f7 d1                	not    ecx
c002570f:	84 c9                	test   cl,cl
c0025711:	0f 84 90 01 00 00    	je     c00258a7 <__addsf3+0x2d1>
c0025717:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002571a:	d1 e8                	shr    eax,1
c002571c:	e9 86 01 00 00       	jmp    c00258a7 <__addsf3+0x2d1>
c0025721:	85 c0                	test   eax,eax
c0025723:	0f 89 7e 01 00 00    	jns    c00258a7 <__addsf3+0x2d1>
c0025729:	46                   	inc    esi
c002572a:	89 f2                	mov    edx,esi
c002572c:	f7 d2                	not    edx
c002572e:	84 d2                	test   dl,dl
c0025730:	0f 84 6f 01 00 00    	je     c00258a5 <__addsf3+0x2cf>
c0025736:	89 c2                	mov    edx,eax
c0025738:	83 e2 01             	and    edx,0x1
c002573b:	d1 e8                	shr    eax,1
c002573d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025742:	09 d0                	or     eax,edx
c0025744:	e9 5e 01 00 00       	jmp    c00258a7 <__addsf3+0x2d1>
c0025749:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002574d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025750:	89 f0                	mov    eax,esi
c0025752:	0f b6 c0             	movzx  eax,al
c0025755:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025758:	29 c1                	sub    ecx,eax
c002575a:	85 c9                	test   ecx,ecx
c002575c:	7e 55                	jle    c00257b3 <__addsf3+0x1dd>
c002575e:	85 c0                	test   eax,eax
c0025760:	75 11                	jne    c0025773 <__addsf3+0x19d>
c0025762:	85 db                	test   ebx,ebx
c0025764:	0f 84 65 01 00 00    	je     c00258cf <__addsf3+0x2f9>
c002576a:	49                   	dec    ecx
c002576b:	75 19                	jne    c0025786 <__addsf3+0x1b0>
c002576d:	89 d0                	mov    eax,edx
c002576f:	29 d8                	sub    eax,ebx
c0025771:	eb 38                	jmp    c00257ab <__addsf3+0x1d5>
c0025773:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025776:	f7 d0                	not    eax
c0025778:	84 c0                	test   al,al
c002577a:	0f 84 4f 01 00 00    	je     c00258cf <__addsf3+0x2f9>
c0025780:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025786:	83 f9 1f             	cmp    ecx,0x1f
c0025789:	0f 8f 40 01 00 00    	jg     c00258cf <__addsf3+0x2f9>
c002578f:	89 de                	mov    esi,ebx
c0025791:	d3 ee                	shr    esi,cl
c0025793:	b8 20 00 00 00       	mov    eax,0x20
c0025798:	29 c8                	sub    eax,ecx
c002579a:	89 c1                	mov    ecx,eax
c002579c:	d3 e3                	shl    ebx,cl
c002579e:	31 c0                	xor    eax,eax
c00257a0:	85 db                	test   ebx,ebx
c00257a2:	0f 95 c0             	setne  al
c00257a5:	09 f0                	or     eax,esi
c00257a7:	29 c2                	sub    edx,eax
c00257a9:	89 d0                	mov    eax,edx
c00257ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257ae:	e9 af 00 00 00       	jmp    c0025862 <__addsf3+0x28c>
c00257b3:	74 5c                	je     c0025811 <__addsf3+0x23b>
c00257b5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00257b8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257bb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00257bf:	75 14                	jne    c00257d5 <__addsf3+0x1ff>
c00257c1:	85 d2                	test   edx,edx
c00257c3:	0f 84 06 01 00 00    	je     c00258cf <__addsf3+0x2f9>
c00257c9:	48                   	dec    eax
c00257ca:	75 1b                	jne    c00257e7 <__addsf3+0x211>
c00257cc:	89 d8                	mov    eax,ebx
c00257ce:	29 d0                	sub    eax,edx
c00257d0:	e9 8d 00 00 00       	jmp    c0025862 <__addsf3+0x28c>
c00257d5:	89 f1                	mov    ecx,esi
c00257d7:	f7 d1                	not    ecx
c00257d9:	84 c9                	test   cl,cl
c00257db:	0f 84 ee 00 00 00    	je     c00258cf <__addsf3+0x2f9>
c00257e1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00257e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257ea:	83 f8 1f             	cmp    eax,0x1f
c00257ed:	0f 8f dc 00 00 00    	jg     c00258cf <__addsf3+0x2f9>
c00257f3:	89 d7                	mov    edi,edx
c00257f5:	88 c1                	mov    cl,al
c00257f7:	d3 ef                	shr    edi,cl
c00257f9:	b9 20 00 00 00       	mov    ecx,0x20
c00257fe:	29 c1                	sub    ecx,eax
c0025800:	d3 e2                	shl    edx,cl
c0025802:	31 c0                	xor    eax,eax
c0025804:	85 d2                	test   edx,edx
c0025806:	0f 95 c0             	setne  al
c0025809:	09 f8                	or     eax,edi
c002580b:	29 c3                	sub    ebx,eax
c002580d:	89 d8                	mov    eax,ebx
c002580f:	eb 51                	jmp    c0025862 <__addsf3+0x28c>
c0025811:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025814:	40                   	inc    eax
c0025815:	a8 fe                	test   al,0xfe
c0025817:	75 3d                	jne    c0025856 <__addsf3+0x280>
c0025819:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002581d:	0f 85 a7 00 00 00    	jne    c00258ca <__addsf3+0x2f4>
c0025823:	85 d2                	test   edx,edx
c0025825:	75 12                	jne    c0025839 <__addsf3+0x263>
c0025827:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002582a:	85 db                	test   ebx,ebx
c002582c:	0f 85 9d 00 00 00    	jne    c00258cf <__addsf3+0x2f9>
c0025832:	31 ff                	xor    edi,edi
c0025834:	e9 96 00 00 00       	jmp    c00258cf <__addsf3+0x2f9>
c0025839:	85 db                	test   ebx,ebx
c002583b:	0f 84 8e 00 00 00    	je     c00258cf <__addsf3+0x2f9>
c0025841:	89 d0                	mov    eax,edx
c0025843:	29 d8                	sub    eax,ebx
c0025845:	79 06                	jns    c002584d <__addsf3+0x277>
c0025847:	89 d8                	mov    eax,ebx
c0025849:	29 d0                	sub    eax,edx
c002584b:	eb 5a                	jmp    c00258a7 <__addsf3+0x2d1>
c002584d:	bf 00 00 00 00       	mov    edi,0x0
c0025852:	74 7b                	je     c00258cf <__addsf3+0x2f9>
c0025854:	eb 4a                	jmp    c00258a0 <__addsf3+0x2ca>
c0025856:	89 d0                	mov    eax,edx
c0025858:	29 d8                	sub    eax,ebx
c002585a:	79 12                	jns    c002586e <__addsf3+0x298>
c002585c:	89 d8                	mov    eax,ebx
c002585e:	29 d0                	sub    eax,edx
c0025860:	eb 09                	jmp    c002586b <__addsf3+0x295>
c0025862:	85 c0                	test   eax,eax
c0025864:	79 41                	jns    c00258a7 <__addsf3+0x2d1>
c0025866:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002586b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002586e:	31 f6                	xor    esi,esi
c0025870:	85 c0                	test   eax,eax
c0025872:	74 33                	je     c00258a7 <__addsf3+0x2d1>
c0025874:	0f bd c8             	bsr    ecx,eax
c0025877:	83 f1 1f             	xor    ecx,0x1f
c002587a:	d3 e0                	shl    eax,cl
c002587c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025880:	39 ca                	cmp    edx,ecx
c0025882:	7f 10                	jg     c0025894 <__addsf3+0x2be>
c0025884:	29 d1                	sub    ecx,edx
c0025886:	41                   	inc    ecx
c0025887:	d3 e8                	shr    eax,cl
c0025889:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002588c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025892:	eb 13                	jmp    c00258a7 <__addsf3+0x2d1>
c0025894:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025897:	29 ce                	sub    esi,ecx
c0025899:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002589e:	eb 07                	jmp    c00258a7 <__addsf3+0x2d1>
c00258a0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258a3:	eb 02                	jmp    c00258a7 <__addsf3+0x2d1>
c00258a5:	31 c0                	xor    eax,eax
c00258a7:	89 c2                	mov    edx,eax
c00258a9:	c1 ea 08             	shr    edx,0x8
c00258ac:	a8 7f                	test   al,0x7f
c00258ae:	0f 95 c1             	setne  cl
c00258b1:	09 d1                	or     ecx,edx
c00258b3:	83 e1 01             	and    ecx,0x1
c00258b6:	c1 e8 07             	shr    eax,0x7
c00258b9:	21 c8                	and    eax,ecx
c00258bb:	c1 e6 17             	shl    esi,0x17
c00258be:	09 d6                	or     esi,edx
c00258c0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00258c3:	eb 0a                	jmp    c00258cf <__addsf3+0x2f9>
c00258c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258c8:	eb 05                	jmp    c00258cf <__addsf3+0x2f9>
c00258ca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00258cf:	89 f8                	mov    eax,edi
c00258d1:	5a                   	pop    edx
c00258d2:	59                   	pop    ecx
c00258d3:	5b                   	pop    ebx
c00258d4:	5e                   	pop    esi
c00258d5:	5f                   	pop    edi
c00258d6:	5d                   	pop    ebp
c00258d7:	c3                   	ret    

c00258d8 <__subsf3>:
c00258d8:	55                   	push   ebp
c00258d9:	89 e5                	mov    ebp,esp
c00258db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258de:	05 00 00 00 80       	add    eax,0x80000000
c00258e3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258e6:	5d                   	pop    ebp
c00258e7:	e9 ea fc ff ff       	jmp    c00255d6 <__addsf3>

c00258ec <__negsf2>:
c00258ec:	55                   	push   ebp
c00258ed:	89 e5                	mov    ebp,esp
c00258ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f2:	05 00 00 00 80       	add    eax,0x80000000
c00258f7:	5d                   	pop    ebp
c00258f8:	c3                   	ret    

c00258f9 <__mulsf3>:
c00258f9:	55                   	push   ebp
c00258fa:	89 e5                	mov    ebp,esp
c00258fc:	57                   	push   edi
c00258fd:	56                   	push   esi
c00258fe:	53                   	push   ebx
c00258ff:	83 ec 1c             	sub    esp,0x1c
c0025902:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025905:	89 f0                	mov    eax,esi
c0025907:	89 f1                	mov    ecx,esi
c0025909:	c1 f9 17             	sar    ecx,0x17
c002590c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002590f:	c1 e0 08             	shl    eax,0x8
c0025912:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025917:	89 c1                	mov    ecx,eax
c0025919:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002591c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002591f:	89 c7                	mov    edi,eax
c0025921:	c1 ff 17             	sar    edi,0x17
c0025924:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025928:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002592b:	89 f8                	mov    eax,edi
c002592d:	0f b6 c0             	movzx  eax,al
c0025930:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025933:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025937:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002593a:	42                   	inc    edx
c002593b:	80 e2 fe             	and    dl,0xfe
c002593e:	75 7b                	jne    c00259bb <__mulsf3+0xc2>
c0025940:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025944:	74 54                	je     c002599a <__mulsf3+0xa1>
c0025946:	85 c9                	test   ecx,ecx
c0025948:	0f 85 64 01 00 00    	jne    c0025ab2 <__mulsf3+0x1b9>
c002594e:	8d 57 01             	lea    edx,[edi+0x1]
c0025951:	80 e2 fe             	and    dl,0xfe
c0025954:	75 1f                	jne    c0025975 <__mulsf3+0x7c>
c0025956:	85 c0                	test   eax,eax
c0025958:	b8 00 00 00 00       	mov    eax,0x0
c002595d:	74 29                	je     c0025988 <__mulsf3+0x8f>
c002595f:	53                   	push   ebx
c0025960:	53                   	push   ebx
c0025961:	50                   	push   eax
c0025962:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025965:	e8 96 05 00 00       	call   c0025f00 <__nesf2>
c002596a:	83 c4 10             	add    esp,0x10
c002596d:	85 c0                	test   eax,eax
c002596f:	0f 85 3a 01 00 00    	jne    c0025aaf <__mulsf3+0x1b6>
c0025975:	85 ff                	test   edi,edi
c0025977:	0f 89 35 01 00 00    	jns    c0025ab2 <__mulsf3+0x1b9>
c002597d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025983:	e9 2a 01 00 00       	jmp    c0025ab2 <__mulsf3+0x1b9>
c0025988:	51                   	push   ecx
c0025989:	51                   	push   ecx
c002598a:	50                   	push   eax
c002598b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002598e:	e8 6d 05 00 00       	call   c0025f00 <__nesf2>
c0025993:	83 c4 10             	add    esp,0x10
c0025996:	85 c0                	test   eax,eax
c0025998:	eb 15                	jmp    c00259af <__mulsf3+0xb6>
c002599a:	85 c9                	test   ecx,ecx
c002599c:	74 0b                	je     c00259a9 <__mulsf3+0xb0>
c002599e:	8d 53 ff             	lea    edx,[ebx-0x1]
c00259a1:	01 c9                	add    ecx,ecx
c00259a3:	78 16                	js     c00259bb <__mulsf3+0xc2>
c00259a5:	89 d3                	mov    ebx,edx
c00259a7:	eb f5                	jmp    c002599e <__mulsf3+0xa5>
c00259a9:	89 f8                	mov    eax,edi
c00259ab:	f7 d0                	not    eax
c00259ad:	84 c0                	test   al,al
c00259af:	75 c4                	jne    c0025975 <__mulsf3+0x7c>
c00259b1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00259b6:	e9 f7 00 00 00       	jmp    c0025ab2 <__mulsf3+0x1b9>
c00259bb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00259be:	c1 e6 08             	shl    esi,0x8
c00259c1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00259c7:	8d 57 01             	lea    edx,[edi+0x1]
c00259ca:	80 e2 fe             	and    dl,0xfe
c00259cd:	75 63                	jne    c0025a32 <__mulsf3+0x139>
c00259cf:	85 c0                	test   eax,eax
c00259d1:	74 2f                	je     c0025a02 <__mulsf3+0x109>
c00259d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00259d7:	0f 89 d2 00 00 00    	jns    c0025aaf <__mulsf3+0x1b6>
c00259dd:	52                   	push   edx
c00259de:	52                   	push   edx
c00259df:	6a 00                	push   0x0
c00259e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259e4:	e8 dc 04 00 00       	call   c0025ec5 <__eqsf2>
c00259e9:	83 c4 10             	add    esp,0x10
c00259ec:	85 c0                	test   eax,eax
c00259ee:	0f 85 bb 00 00 00    	jne    c0025aaf <__mulsf3+0x1b6>
c00259f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259f7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00259fd:	e9 b0 00 00 00       	jmp    c0025ab2 <__mulsf3+0x1b9>
c0025a02:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025a05:	50                   	push   eax
c0025a06:	50                   	push   eax
c0025a07:	6a 00                	push   0x0
c0025a09:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a0c:	e8 b4 04 00 00       	call   c0025ec5 <__eqsf2>
c0025a11:	83 c4 10             	add    esp,0x10
c0025a14:	85 c0                	test   eax,eax
c0025a16:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025a19:	75 0c                	jne    c0025a27 <__mulsf3+0x12e>
c0025a1b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a1f:	0f 89 8a 00 00 00    	jns    c0025aaf <__mulsf3+0x1b6>
c0025a25:	eb cd                	jmp    c00259f4 <__mulsf3+0xfb>
c0025a27:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a2a:	01 f6                	add    esi,esi
c0025a2c:	78 04                	js     c0025a32 <__mulsf3+0x139>
c0025a2e:	89 c3                	mov    ebx,eax
c0025a30:	eb f5                	jmp    c0025a27 <__mulsf3+0x12e>
c0025a32:	89 c8                	mov    eax,ecx
c0025a34:	0d 00 00 00 80       	or     eax,0x80000000
c0025a39:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025a3f:	f7 e6                	mul    esi
c0025a41:	85 c0                	test   eax,eax
c0025a43:	0f 95 c0             	setne  al
c0025a46:	0f b6 c0             	movzx  eax,al
c0025a49:	09 c2                	or     edx,eax
c0025a4b:	78 03                	js     c0025a50 <__mulsf3+0x157>
c0025a4d:	01 d2                	add    edx,edx
c0025a4f:	4b                   	dec    ebx
c0025a50:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025a56:	7f 22                	jg     c0025a7a <__mulsf3+0x181>
c0025a58:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025a5e:	85 db                	test   ebx,ebx
c0025a60:	7f 23                	jg     c0025a85 <__mulsf3+0x18c>
c0025a62:	83 fb e9             	cmp    ebx,0xffffffe9
c0025a65:	7c 1a                	jl     c0025a81 <__mulsf3+0x188>
c0025a67:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a6d:	b9 01 00 00 00       	mov    ecx,0x1
c0025a72:	29 d9                	sub    ecx,ebx
c0025a74:	d3 ea                	shr    edx,cl
c0025a76:	31 db                	xor    ebx,ebx
c0025a78:	eb 0b                	jmp    c0025a85 <__mulsf3+0x18c>
c0025a7a:	bb ff 00 00 00       	mov    ebx,0xff
c0025a7f:	eb 02                	jmp    c0025a83 <__mulsf3+0x18a>
c0025a81:	31 db                	xor    ebx,ebx
c0025a83:	31 d2                	xor    edx,edx
c0025a85:	89 d0                	mov    eax,edx
c0025a87:	c1 e8 08             	shr    eax,0x8
c0025a8a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025a8d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025a93:	09 fb                	or     ebx,edi
c0025a95:	c1 e3 17             	shl    ebx,0x17
c0025a98:	09 c3                	or     ebx,eax
c0025a9a:	f6 c2 7f             	test   dl,0x7f
c0025a9d:	0f 95 c1             	setne  cl
c0025aa0:	09 c8                	or     eax,ecx
c0025aa2:	83 e0 01             	and    eax,0x1
c0025aa5:	c1 ea 07             	shr    edx,0x7
c0025aa8:	21 c2                	and    edx,eax
c0025aaa:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025aad:	eb 03                	jmp    c0025ab2 <__mulsf3+0x1b9>
c0025aaf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025ab2:	89 f0                	mov    eax,esi
c0025ab4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ab7:	5b                   	pop    ebx
c0025ab8:	5e                   	pop    esi
c0025ab9:	5f                   	pop    edi
c0025aba:	5d                   	pop    ebp
c0025abb:	c3                   	ret    

c0025abc <__divsf3>:
c0025abc:	55                   	push   ebp
c0025abd:	89 e5                	mov    ebp,esp
c0025abf:	57                   	push   edi
c0025ac0:	56                   	push   esi
c0025ac1:	53                   	push   ebx
c0025ac2:	83 ec 1c             	sub    esp,0x1c
c0025ac5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ac8:	89 d8                	mov    eax,ebx
c0025aca:	89 d9                	mov    ecx,ebx
c0025acc:	c1 f9 17             	sar    ecx,0x17
c0025acf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025ad2:	c1 e0 08             	shl    eax,0x8
c0025ad5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025ada:	89 c1                	mov    ecx,eax
c0025adc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025adf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ae2:	89 c7                	mov    edi,eax
c0025ae4:	c1 ff 17             	sar    edi,0x17
c0025ae7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025aeb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025aee:	89 f8                	mov    eax,edi
c0025af0:	0f b6 c0             	movzx  eax,al
c0025af3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025af6:	29 c6                	sub    esi,eax
c0025af8:	83 c6 7f             	add    esi,0x7f
c0025afb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025afe:	42                   	inc    edx
c0025aff:	80 e2 fe             	and    dl,0xfe
c0025b02:	0f 85 9c 00 00 00    	jne    c0025ba4 <__divsf3+0xe8>
c0025b08:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025b0c:	74 33                	je     c0025b41 <__divsf3+0x85>
c0025b0e:	85 c9                	test   ecx,ecx
c0025b10:	0f 85 c7 01 00 00    	jne    c0025cdd <__divsf3+0x221>
c0025b16:	8d 57 01             	lea    edx,[edi+0x1]
c0025b19:	80 e2 fe             	and    dl,0xfe
c0025b1c:	75 2f                	jne    c0025b4d <__divsf3+0x91>
c0025b1e:	85 c0                	test   eax,eax
c0025b20:	74 2b                	je     c0025b4d <__divsf3+0x91>
c0025b22:	51                   	push   ecx
c0025b23:	51                   	push   ecx
c0025b24:	6a 00                	push   0x0
c0025b26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b29:	e8 d2 03 00 00       	call   c0025f00 <__nesf2>
c0025b2e:	83 c4 10             	add    esp,0x10
c0025b31:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025b34:	85 c0                	test   eax,eax
c0025b36:	0f 85 a1 01 00 00    	jne    c0025cdd <__divsf3+0x221>
c0025b3c:	e9 92 01 00 00       	jmp    c0025cd3 <__divsf3+0x217>
c0025b41:	85 c9                	test   ecx,ecx
c0025b43:	75 1b                	jne    c0025b60 <__divsf3+0xa4>
c0025b45:	8d 57 01             	lea    edx,[edi+0x1]
c0025b48:	80 e2 fe             	and    dl,0xfe
c0025b4b:	74 1e                	je     c0025b6b <__divsf3+0xaf>
c0025b4d:	85 ff                	test   edi,edi
c0025b4f:	0f 89 88 01 00 00    	jns    c0025cdd <__divsf3+0x221>
c0025b55:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025b5b:	e9 7d 01 00 00       	jmp    c0025cdd <__divsf3+0x221>
c0025b60:	8d 56 ff             	lea    edx,[esi-0x1]
c0025b63:	01 c9                	add    ecx,ecx
c0025b65:	78 3d                	js     c0025ba4 <__divsf3+0xe8>
c0025b67:	89 d6                	mov    esi,edx
c0025b69:	eb f5                	jmp    c0025b60 <__divsf3+0xa4>
c0025b6b:	85 c0                	test   eax,eax
c0025b6d:	b8 00 00 00 00       	mov    eax,0x0
c0025b72:	74 18                	je     c0025b8c <__divsf3+0xd0>
c0025b74:	52                   	push   edx
c0025b75:	52                   	push   edx
c0025b76:	50                   	push   eax
c0025b77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b7a:	e8 81 03 00 00       	call   c0025f00 <__nesf2>
c0025b7f:	83 c4 10             	add    esp,0x10
c0025b82:	85 c0                	test   eax,eax
c0025b84:	0f 85 50 01 00 00    	jne    c0025cda <__divsf3+0x21e>
c0025b8a:	eb c1                	jmp    c0025b4d <__divsf3+0x91>
c0025b8c:	56                   	push   esi
c0025b8d:	56                   	push   esi
c0025b8e:	50                   	push   eax
c0025b8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b92:	e8 69 03 00 00       	call   c0025f00 <__nesf2>
c0025b97:	83 c4 10             	add    esp,0x10
c0025b9a:	85 c0                	test   eax,eax
c0025b9c:	0f 84 31 01 00 00    	je     c0025cd3 <__divsf3+0x217>
c0025ba2:	eb a9                	jmp    c0025b4d <__divsf3+0x91>
c0025ba4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025ba7:	c1 e3 08             	shl    ebx,0x8
c0025baa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025bb0:	8d 57 01             	lea    edx,[edi+0x1]
c0025bb3:	80 e2 fe             	and    dl,0xfe
c0025bb6:	75 71                	jne    c0025c29 <__divsf3+0x16d>
c0025bb8:	85 c0                	test   eax,eax
c0025bba:	ba 00 00 00 00       	mov    edx,0x0
c0025bbf:	74 2f                	je     c0025bf0 <__divsf3+0x134>
c0025bc1:	51                   	push   ecx
c0025bc2:	51                   	push   ecx
c0025bc3:	52                   	push   edx
c0025bc4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bc7:	e8 f9 02 00 00       	call   c0025ec5 <__eqsf2>
c0025bcc:	83 c4 10             	add    esp,0x10
c0025bcf:	85 c0                	test   eax,eax
c0025bd1:	0f 85 03 01 00 00    	jne    c0025cda <__divsf3+0x21e>
c0025bd7:	31 d2                	xor    edx,edx
c0025bd9:	89 d3                	mov    ebx,edx
c0025bdb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025bde:	31 f8                	xor    eax,edi
c0025be0:	0f 89 f7 00 00 00    	jns    c0025cdd <__divsf3+0x221>
c0025be6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025beb:	e9 ed 00 00 00       	jmp    c0025cdd <__divsf3+0x221>
c0025bf0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025bf3:	50                   	push   eax
c0025bf4:	50                   	push   eax
c0025bf5:	52                   	push   edx
c0025bf6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bf9:	e8 c7 02 00 00       	call   c0025ec5 <__eqsf2>
c0025bfe:	83 c4 10             	add    esp,0x10
c0025c01:	85 c0                	test   eax,eax
c0025c03:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025c06:	75 16                	jne    c0025c1e <__divsf3+0x162>
c0025c08:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025c0b:	31 fb                	xor    ebx,edi
c0025c0d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025c13:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025c19:	e9 bf 00 00 00       	jmp    c0025cdd <__divsf3+0x221>
c0025c1e:	8d 46 01             	lea    eax,[esi+0x1]
c0025c21:	01 db                	add    ebx,ebx
c0025c23:	78 04                	js     c0025c29 <__divsf3+0x16d>
c0025c25:	89 c6                	mov    esi,eax
c0025c27:	eb f5                	jmp    c0025c1e <__divsf3+0x162>
c0025c29:	89 c8                	mov    eax,ecx
c0025c2b:	0d 00 00 00 80       	or     eax,0x80000000
c0025c30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025c36:	31 d2                	xor    edx,edx
c0025c38:	39 d8                	cmp    eax,ebx
c0025c3a:	72 07                	jb     c0025c43 <__divsf3+0x187>
c0025c3c:	29 d8                	sub    eax,ebx
c0025c3e:	ba 01 00 00 00       	mov    edx,0x1
c0025c43:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025c4a:	01 d2                	add    edx,edx
c0025c4c:	89 c1                	mov    ecx,eax
c0025c4e:	01 c0                	add    eax,eax
c0025c50:	85 c9                	test   ecx,ecx
c0025c52:	78 04                	js     c0025c58 <__divsf3+0x19c>
c0025c54:	39 c3                	cmp    ebx,eax
c0025c56:	77 05                	ja     c0025c5d <__divsf3+0x1a1>
c0025c58:	29 d8                	sub    eax,ebx
c0025c5a:	83 ca 01             	or     edx,0x1
c0025c5d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025c60:	75 e8                	jne    c0025c4a <__divsf3+0x18e>
c0025c62:	85 c0                	test   eax,eax
c0025c64:	0f 95 c0             	setne  al
c0025c67:	0f b6 c0             	movzx  eax,al
c0025c6a:	c1 e2 06             	shl    edx,0x6
c0025c6d:	09 c2                	or     edx,eax
c0025c6f:	78 03                	js     c0025c74 <__divsf3+0x1b8>
c0025c71:	01 d2                	add    edx,edx
c0025c73:	4e                   	dec    esi
c0025c74:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025c7a:	7f 22                	jg     c0025c9e <__divsf3+0x1e2>
c0025c7c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c82:	85 f6                	test   esi,esi
c0025c84:	7f 23                	jg     c0025ca9 <__divsf3+0x1ed>
c0025c86:	83 fe e9             	cmp    esi,0xffffffe9
c0025c89:	7c 1a                	jl     c0025ca5 <__divsf3+0x1e9>
c0025c8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025c91:	b9 01 00 00 00       	mov    ecx,0x1
c0025c96:	29 f1                	sub    ecx,esi
c0025c98:	d3 ea                	shr    edx,cl
c0025c9a:	31 f6                	xor    esi,esi
c0025c9c:	eb 0b                	jmp    c0025ca9 <__divsf3+0x1ed>
c0025c9e:	be ff 00 00 00       	mov    esi,0xff
c0025ca3:	eb 02                	jmp    c0025ca7 <__divsf3+0x1eb>
c0025ca5:	31 f6                	xor    esi,esi
c0025ca7:	31 d2                	xor    edx,edx
c0025ca9:	89 d0                	mov    eax,edx
c0025cab:	c1 e8 08             	shr    eax,0x8
c0025cae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025cb1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025cb7:	09 fe                	or     esi,edi
c0025cb9:	c1 e6 17             	shl    esi,0x17
c0025cbc:	09 c6                	or     esi,eax
c0025cbe:	f6 c2 7f             	test   dl,0x7f
c0025cc1:	0f 95 c1             	setne  cl
c0025cc4:	09 c8                	or     eax,ecx
c0025cc6:	83 e0 01             	and    eax,0x1
c0025cc9:	c1 ea 07             	shr    edx,0x7
c0025ccc:	21 c2                	and    edx,eax
c0025cce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025cd1:	eb 0a                	jmp    c0025cdd <__divsf3+0x221>
c0025cd3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025cd8:	eb 03                	jmp    c0025cdd <__divsf3+0x221>
c0025cda:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025cdd:	89 d8                	mov    eax,ebx
c0025cdf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ce2:	5b                   	pop    ebx
c0025ce3:	5e                   	pop    esi
c0025ce4:	5f                   	pop    edi
c0025ce5:	5d                   	pop    ebp
c0025ce6:	c3                   	ret    

c0025ce7 <__floatsisf>:
c0025ce7:	55                   	push   ebp
c0025ce8:	89 e5                	mov    ebp,esp
c0025cea:	53                   	push   ebx
c0025ceb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025cee:	85 d2                	test   edx,edx
c0025cf0:	7e 2b                	jle    c0025d1d <__floatsisf+0x36>
c0025cf2:	0f bd ca             	bsr    ecx,edx
c0025cf5:	83 f1 1f             	xor    ecx,0x1f
c0025cf8:	d3 e2                	shl    edx,cl
c0025cfa:	89 d0                	mov    eax,edx
c0025cfc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d01:	89 c3                	mov    ebx,eax
c0025d03:	c1 eb 08             	shr    ebx,0x8
c0025d06:	80 e2 7f             	and    dl,0x7f
c0025d09:	0f 95 c2             	setne  dl
c0025d0c:	09 da                	or     edx,ebx
c0025d0e:	83 e2 01             	and    edx,0x1
c0025d11:	c1 e8 07             	shr    eax,0x7
c0025d14:	21 c2                	and    edx,eax
c0025d16:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d1b:	eb 32                	jmp    c0025d4f <__floatsisf+0x68>
c0025d1d:	b8 00 00 00 00       	mov    eax,0x0
c0025d22:	74 34                	je     c0025d58 <__floatsisf+0x71>
c0025d24:	f7 da                	neg    edx
c0025d26:	0f bd ca             	bsr    ecx,edx
c0025d29:	83 f1 1f             	xor    ecx,0x1f
c0025d2c:	d3 e2                	shl    edx,cl
c0025d2e:	89 d0                	mov    eax,edx
c0025d30:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d35:	89 c3                	mov    ebx,eax
c0025d37:	c1 eb 08             	shr    ebx,0x8
c0025d3a:	80 e2 7f             	and    dl,0x7f
c0025d3d:	0f 95 c2             	setne  dl
c0025d40:	09 da                	or     edx,ebx
c0025d42:	83 e2 01             	and    edx,0x1
c0025d45:	c1 e8 07             	shr    eax,0x7
c0025d48:	21 c2                	and    edx,eax
c0025d4a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025d4f:	29 c8                	sub    eax,ecx
c0025d51:	c1 e0 17             	shl    eax,0x17
c0025d54:	09 d8                	or     eax,ebx
c0025d56:	01 d0                	add    eax,edx
c0025d58:	5b                   	pop    ebx
c0025d59:	5d                   	pop    ebp
c0025d5a:	c3                   	ret    

c0025d5b <__floatunsisf>:
c0025d5b:	55                   	push   ebp
c0025d5c:	89 e5                	mov    ebp,esp
c0025d5e:	53                   	push   ebx
c0025d5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d62:	31 c0                	xor    eax,eax
c0025d64:	85 d2                	test   edx,edx
c0025d66:	74 32                	je     c0025d9a <__floatunsisf+0x3f>
c0025d68:	0f bd ca             	bsr    ecx,edx
c0025d6b:	83 f1 1f             	xor    ecx,0x1f
c0025d6e:	d3 e2                	shl    edx,cl
c0025d70:	89 d0                	mov    eax,edx
c0025d72:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d77:	89 c3                	mov    ebx,eax
c0025d79:	c1 eb 08             	shr    ebx,0x8
c0025d7c:	80 e2 7f             	and    dl,0x7f
c0025d7f:	0f 95 c2             	setne  dl
c0025d82:	09 da                	or     edx,ebx
c0025d84:	83 e2 01             	and    edx,0x1
c0025d87:	c1 e8 07             	shr    eax,0x7
c0025d8a:	21 c2                	and    edx,eax
c0025d8c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d91:	29 c8                	sub    eax,ecx
c0025d93:	c1 e0 17             	shl    eax,0x17
c0025d96:	09 d8                	or     eax,ebx
c0025d98:	01 d0                	add    eax,edx
c0025d9a:	5b                   	pop    ebx
c0025d9b:	5d                   	pop    ebp
c0025d9c:	c3                   	ret    

c0025d9d <__fixsfsi>:
c0025d9d:	55                   	push   ebp
c0025d9e:	89 e5                	mov    ebp,esp
c0025da0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025da3:	89 d1                	mov    ecx,edx
c0025da5:	c1 e1 08             	shl    ecx,0x8
c0025da8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025dae:	c1 fa 17             	sar    edx,0x17
c0025db1:	78 1c                	js     c0025dcf <__fixsfsi+0x32>
c0025db3:	83 ea 7f             	sub    edx,0x7f
c0025db6:	31 c0                	xor    eax,eax
c0025db8:	83 fa 1e             	cmp    edx,0x1e
c0025dbb:	77 40                	ja     c0025dfd <__fixsfsi+0x60>
c0025dbd:	89 c8                	mov    eax,ecx
c0025dbf:	0d 00 00 00 80       	or     eax,0x80000000
c0025dc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025dc9:	29 d1                	sub    ecx,edx
c0025dcb:	d3 e8                	shr    eax,cl
c0025dcd:	eb 2e                	jmp    c0025dfd <__fixsfsi+0x60>
c0025dcf:	31 c0                	xor    eax,eax
c0025dd1:	81 c2 81 00 00 00    	add    edx,0x81
c0025dd7:	78 24                	js     c0025dfd <__fixsfsi+0x60>
c0025dd9:	83 fa 1e             	cmp    edx,0x1e
c0025ddc:	7e 09                	jle    c0025de7 <__fixsfsi+0x4a>
c0025dde:	83 fa 1f             	cmp    edx,0x1f
c0025de1:	75 18                	jne    c0025dfb <__fixsfsi+0x5e>
c0025de3:	85 c9                	test   ecx,ecx
c0025de5:	75 14                	jne    c0025dfb <__fixsfsi+0x5e>
c0025de7:	89 c8                	mov    eax,ecx
c0025de9:	0d 00 00 00 80       	or     eax,0x80000000
c0025dee:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025df3:	29 d1                	sub    ecx,edx
c0025df5:	d3 e8                	shr    eax,cl
c0025df7:	f7 d8                	neg    eax
c0025df9:	eb 02                	jmp    c0025dfd <__fixsfsi+0x60>
c0025dfb:	31 c0                	xor    eax,eax
c0025dfd:	5d                   	pop    ebp
c0025dfe:	c3                   	ret    

c0025dff <__fixunssfsi>:
c0025dff:	55                   	push   ebp
c0025e00:	89 e5                	mov    ebp,esp
c0025e02:	53                   	push   ebx
c0025e03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e06:	89 d3                	mov    ebx,edx
c0025e08:	c1 fb 17             	sar    ebx,0x17
c0025e0b:	83 eb 7f             	sub    ebx,0x7f
c0025e0e:	31 c0                	xor    eax,eax
c0025e10:	83 fb 1f             	cmp    ebx,0x1f
c0025e13:	77 18                	ja     c0025e2d <__fixunssfsi+0x2e>
c0025e15:	89 d0                	mov    eax,edx
c0025e17:	c1 e0 08             	shl    eax,0x8
c0025e1a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e1f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e24:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e29:	29 d9                	sub    ecx,ebx
c0025e2b:	d3 e8                	shr    eax,cl
c0025e2d:	5b                   	pop    ebx
c0025e2e:	5d                   	pop    ebp
c0025e2f:	c3                   	ret    

c0025e30 <__cmpsf2>:
c0025e30:	55                   	push   ebp
c0025e31:	89 e5                	mov    ebp,esp
c0025e33:	57                   	push   edi
c0025e34:	56                   	push   esi
c0025e35:	53                   	push   ebx
c0025e36:	83 ec 24             	sub    esp,0x24
c0025e39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e3f:	e8 4f 10 00 00       	call   c0026e93 <__truncdfsf2>
c0025e44:	5a                   	pop    edx
c0025e45:	59                   	pop    ecx
c0025e46:	89 c3                	mov    ebx,eax
c0025e48:	c1 e8 17             	shr    eax,0x17
c0025e4b:	0f b6 f0             	movzx  esi,al
c0025e4e:	89 d8                	mov    eax,ebx
c0025e50:	c1 e8 1f             	shr    eax,0x1f
c0025e53:	31 c6                	xor    esi,eax
c0025e55:	c1 e3 08             	shl    ebx,0x8
c0025e58:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025e5b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025e5e:	e8 30 10 00 00       	call   c0026e93 <__truncdfsf2>
c0025e63:	83 c4 10             	add    esp,0x10
c0025e66:	89 c1                	mov    ecx,eax
c0025e68:	c1 e9 17             	shr    ecx,0x17
c0025e6b:	0f b6 c9             	movzx  ecx,cl
c0025e6e:	89 c7                	mov    edi,eax
c0025e70:	c1 ef 1f             	shr    edi,0x1f
c0025e73:	89 ca                	mov    edx,ecx
c0025e75:	31 fa                	xor    edx,edi
c0025e77:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025e7a:	c1 e0 08             	shl    eax,0x8
c0025e7d:	89 c2                	mov    edx,eax
c0025e7f:	89 d8                	mov    eax,ebx
c0025e81:	09 d0                	or     eax,edx
c0025e83:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e88:	09 f0                	or     eax,esi
c0025e8a:	75 08                	jne    c0025e94 <__cmpsf2+0x64>
c0025e8c:	31 c0                	xor    eax,eax
c0025e8e:	39 f9                	cmp    ecx,edi
c0025e90:	75 0c                	jne    c0025e9e <__cmpsf2+0x6e>
c0025e92:	eb 29                	jmp    c0025ebd <__cmpsf2+0x8d>
c0025e94:	b8 01 00 00 00       	mov    eax,0x1
c0025e99:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e9c:	7f 1f                	jg     c0025ebd <__cmpsf2+0x8d>
c0025e9e:	83 c8 ff             	or     eax,0xffffffff
c0025ea1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025ea4:	7c 17                	jl     c0025ebd <__cmpsf2+0x8d>
c0025ea6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025eac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025eb2:	b8 01 00 00 00       	mov    eax,0x1
c0025eb7:	39 d3                	cmp    ebx,edx
c0025eb9:	77 02                	ja     c0025ebd <__cmpsf2+0x8d>
c0025ebb:	19 c0                	sbb    eax,eax
c0025ebd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ec0:	5b                   	pop    ebx
c0025ec1:	5e                   	pop    esi
c0025ec2:	5f                   	pop    edi
c0025ec3:	5d                   	pop    ebp
c0025ec4:	c3                   	ret    

c0025ec5 <__eqsf2>:
c0025ec5:	55                   	push   ebp
c0025ec6:	89 e5                	mov    ebp,esp
c0025ec8:	83 ec 24             	sub    esp,0x24
c0025ecb:	6a 01                	push   0x1
c0025ecd:	83 ec 0c             	sub    esp,0xc
c0025ed0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ed3:	e8 df 10 00 00       	call   c0026fb7 <__extendsfdf2>
c0025ed8:	83 c4 10             	add    esp,0x10
c0025edb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ede:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ee1:	52                   	push   edx
c0025ee2:	50                   	push   eax
c0025ee3:	50                   	push   eax
c0025ee4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee7:	e8 cb 10 00 00       	call   c0026fb7 <__extendsfdf2>
c0025eec:	59                   	pop    ecx
c0025eed:	59                   	pop    ecx
c0025eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ef4:	52                   	push   edx
c0025ef5:	50                   	push   eax
c0025ef6:	e8 35 ff ff ff       	call   c0025e30 <__cmpsf2>
c0025efb:	83 c4 20             	add    esp,0x20
c0025efe:	c9                   	leave  
c0025eff:	c3                   	ret    

c0025f00 <__nesf2>:
c0025f00:	eb c3                	jmp    c0025ec5 <__eqsf2>

c0025f02 <__gtsf2>:
c0025f02:	55                   	push   ebp
c0025f03:	89 e5                	mov    ebp,esp
c0025f05:	83 ec 24             	sub    esp,0x24
c0025f08:	6a ff                	push   0xffffffff
c0025f0a:	83 ec 0c             	sub    esp,0xc
c0025f0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f10:	e8 a2 10 00 00       	call   c0026fb7 <__extendsfdf2>
c0025f15:	83 c4 10             	add    esp,0x10
c0025f18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f1b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f1e:	52                   	push   edx
c0025f1f:	50                   	push   eax
c0025f20:	50                   	push   eax
c0025f21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f24:	e8 8e 10 00 00       	call   c0026fb7 <__extendsfdf2>
c0025f29:	59                   	pop    ecx
c0025f2a:	59                   	pop    ecx
c0025f2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f31:	52                   	push   edx
c0025f32:	50                   	push   eax
c0025f33:	e8 f8 fe ff ff       	call   c0025e30 <__cmpsf2>
c0025f38:	83 c4 20             	add    esp,0x20
c0025f3b:	c9                   	leave  
c0025f3c:	c3                   	ret    

c0025f3d <__gesf2>:
c0025f3d:	eb c3                	jmp    c0025f02 <__gtsf2>

c0025f3f <__ltsf2>:
c0025f3f:	eb 84                	jmp    c0025ec5 <__eqsf2>

c0025f41 <__lesf2>:
c0025f41:	eb 82                	jmp    c0025ec5 <__eqsf2>

c0025f43 <__adddf3>:
c0025f43:	55                   	push   ebp
c0025f44:	89 e5                	mov    ebp,esp
c0025f46:	57                   	push   edi
c0025f47:	56                   	push   esi
c0025f48:	53                   	push   ebx
c0025f49:	83 ec 24             	sub    esp,0x24
c0025f4c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025f4f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f55:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f5b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f5e:	89 c8                	mov    eax,ecx
c0025f60:	89 ce                	mov    esi,ecx
c0025f62:	c1 fe 14             	sar    esi,0x14
c0025f65:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025f68:	89 fb                	mov    ebx,edi
c0025f6a:	89 fa                	mov    edx,edi
c0025f6c:	c1 e2 0b             	shl    edx,0xb
c0025f6f:	c1 e0 0b             	shl    eax,0xb
c0025f72:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025f77:	c1 eb 15             	shr    ebx,0x15
c0025f7a:	09 d8                	or     eax,ebx
c0025f7c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025f7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025f82:	c1 fe 14             	sar    esi,0x14
c0025f85:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025f88:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025f8b:	89 f3                	mov    ebx,esi
c0025f8d:	c1 e3 0b             	shl    ebx,0xb
c0025f90:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025f93:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025f96:	c1 e3 0b             	shl    ebx,0xb
c0025f99:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025f9f:	c1 ee 15             	shr    esi,0x15
c0025fa2:	09 f3                	or     ebx,esi
c0025fa4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025fa7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025faa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025fad:	0f 88 5f 02 00 00    	js     c0026212 <__adddf3+0x2cf>
c0025fb3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025fb6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025fb9:	85 db                	test   ebx,ebx
c0025fbb:	0f 8e c7 00 00 00    	jle    c0026088 <__adddf3+0x145>
c0025fc1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025fc8:	75 1a                	jne    c0025fe4 <__adddf3+0xa1>
c0025fca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025fcd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025fd0:	0f 84 b2 05 00 00    	je     c0026588 <__adddf3+0x645>
c0025fd6:	4b                   	dec    ebx
c0025fd7:	75 23                	jne    c0025ffc <__adddf3+0xb9>
c0025fd9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025fdc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025fdf:	e9 99 00 00 00       	jmp    c002607d <__adddf3+0x13a>
c0025fe4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025fe7:	f7 d6                	not    esi
c0025fe9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025fef:	0f 84 93 05 00 00    	je     c0026588 <__adddf3+0x645>
c0025ff5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025ffc:	83 fb 1f             	cmp    ebx,0x1f
c0025fff:	7e 42                	jle    c0026043 <__adddf3+0x100>
c0026001:	83 fb 3f             	cmp    ebx,0x3f
c0026004:	0f 8f 7e 05 00 00    	jg     c0026588 <__adddf3+0x645>
c002600a:	83 e3 1f             	and    ebx,0x1f
c002600d:	89 d9                	mov    ecx,ebx
c002600f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026012:	d3 ef                	shr    edi,cl
c0026014:	31 db                	xor    ebx,ebx
c0026016:	85 c9                	test   ecx,ecx
c0026018:	74 15                	je     c002602f <__adddf3+0xec>
c002601a:	be 20 00 00 00       	mov    esi,0x20
c002601f:	29 ce                	sub    esi,ecx
c0026021:	89 f1                	mov    ecx,esi
c0026023:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026026:	d3 e6                	shl    esi,cl
c0026028:	31 db                	xor    ebx,ebx
c002602a:	85 f6                	test   esi,esi
c002602c:	0f 95 c3             	setne  bl
c002602f:	31 c9                	xor    ecx,ecx
c0026031:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026035:	0f 95 c1             	setne  cl
c0026038:	09 cf                	or     edi,ecx
c002603a:	09 fb                	or     ebx,edi
c002603c:	01 da                	add    edx,ebx
c002603e:	83 d0 00             	adc    eax,0x0
c0026041:	eb 3a                	jmp    c002607d <__adddf3+0x13a>
c0026043:	bf 20 00 00 00       	mov    edi,0x20
c0026048:	29 df                	sub    edi,ebx
c002604a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002604d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026050:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026053:	d3 e6                	shl    esi,cl
c0026055:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026058:	88 d9                	mov    cl,bl
c002605a:	d3 ef                	shr    edi,cl
c002605c:	09 fe                	or     esi,edi
c002605e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026061:	88 d9                	mov    cl,bl
c0026063:	d3 ef                	shr    edi,cl
c0026065:	89 fb                	mov    ebx,edi
c0026067:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002606a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002606d:	d3 e7                	shl    edi,cl
c002606f:	85 ff                	test   edi,edi
c0026071:	0f 95 c1             	setne  cl
c0026074:	0f b6 c9             	movzx  ecx,cl
c0026077:	09 ce                	or     esi,ecx
c0026079:	01 f2                	add    edx,esi
c002607b:	11 d8                	adc    eax,ebx
c002607d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026080:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026083:	e9 52 01 00 00       	jmp    c00261da <__adddf3+0x297>
c0026088:	0f 84 d5 00 00 00    	je     c0026163 <__adddf3+0x220>
c002608e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026091:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026094:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026097:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002609a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00260a1:	75 20                	jne    c00260c3 <__adddf3+0x180>
c00260a3:	89 d6                	mov    esi,edx
c00260a5:	09 c6                	or     esi,eax
c00260a7:	0f 84 db 04 00 00    	je     c0026588 <__adddf3+0x645>
c00260ad:	4b                   	dec    ebx
c00260ae:	75 29                	jne    c00260d9 <__adddf3+0x196>
c00260b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00260b6:	01 d1                	add    ecx,edx
c00260b8:	11 c6                	adc    esi,eax
c00260ba:	89 f0                	mov    eax,esi
c00260bc:	89 ca                	mov    edx,ecx
c00260be:	e9 17 01 00 00       	jmp    c00261da <__adddf3+0x297>
c00260c3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00260c6:	f7 d6                	not    esi
c00260c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00260ce:	0f 84 b4 04 00 00    	je     c0026588 <__adddf3+0x645>
c00260d4:	0d 00 00 00 80       	or     eax,0x80000000
c00260d9:	83 fb 1f             	cmp    ebx,0x1f
c00260dc:	7e 48                	jle    c0026126 <__adddf3+0x1e3>
c00260de:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260e1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260e4:	83 fb 3f             	cmp    ebx,0x3f
c00260e7:	0f 8f 9b 04 00 00    	jg     c0026588 <__adddf3+0x645>
c00260ed:	83 e3 1f             	and    ebx,0x1f
c00260f0:	89 d9                	mov    ecx,ebx
c00260f2:	89 c7                	mov    edi,eax
c00260f4:	d3 ef                	shr    edi,cl
c00260f6:	31 db                	xor    ebx,ebx
c00260f8:	85 c9                	test   ecx,ecx
c00260fa:	74 12                	je     c002610e <__adddf3+0x1cb>
c00260fc:	be 20 00 00 00       	mov    esi,0x20
c0026101:	29 ce                	sub    esi,ecx
c0026103:	89 f1                	mov    ecx,esi
c0026105:	d3 e0                	shl    eax,cl
c0026107:	31 db                	xor    ebx,ebx
c0026109:	85 c0                	test   eax,eax
c002610b:	0f 95 c3             	setne  bl
c002610e:	31 c0                	xor    eax,eax
c0026110:	85 d2                	test   edx,edx
c0026112:	0f 95 c0             	setne  al
c0026115:	09 c7                	or     edi,eax
c0026117:	09 fb                	or     ebx,edi
c0026119:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002611c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002611f:	01 da                	add    edx,ebx
c0026121:	83 d6 00             	adc    esi,0x0
c0026124:	eb 39                	jmp    c002615f <__adddf3+0x21c>
c0026126:	be 20 00 00 00       	mov    esi,0x20
c002612b:	29 de                	sub    esi,ebx
c002612d:	89 c7                	mov    edi,eax
c002612f:	89 f1                	mov    ecx,esi
c0026131:	d3 e7                	shl    edi,cl
c0026133:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026136:	89 d7                	mov    edi,edx
c0026138:	88 d9                	mov    cl,bl
c002613a:	d3 ef                	shr    edi,cl
c002613c:	89 f9                	mov    ecx,edi
c002613e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026141:	09 cf                	or     edi,ecx
c0026143:	88 d9                	mov    cl,bl
c0026145:	d3 e8                	shr    eax,cl
c0026147:	89 f1                	mov    ecx,esi
c0026149:	d3 e2                	shl    edx,cl
c002614b:	85 d2                	test   edx,edx
c002614d:	0f 95 c2             	setne  dl
c0026150:	0f b6 d2             	movzx  edx,dl
c0026153:	09 d7                	or     edi,edx
c0026155:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026158:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002615b:	01 fa                	add    edx,edi
c002615d:	11 c6                	adc    esi,eax
c002615f:	89 f0                	mov    eax,esi
c0026161:	eb 77                	jmp    c00261da <__adddf3+0x297>
c0026163:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026166:	46                   	inc    esi
c0026167:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002616a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026170:	75 41                	jne    c00261b3 <__adddf3+0x270>
c0026172:	89 d3                	mov    ebx,edx
c0026174:	09 c3                	or     ebx,eax
c0026176:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002617d:	75 27                	jne    c00261a6 <__adddf3+0x263>
c002617f:	85 db                	test   ebx,ebx
c0026181:	0f 84 fb 03 00 00    	je     c0026582 <__adddf3+0x63f>
c0026187:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002618a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002618d:	0f 84 f5 03 00 00    	je     c0026588 <__adddf3+0x645>
c0026193:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026196:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026199:	85 c0                	test   eax,eax
c002619b:	0f 89 91 03 00 00    	jns    c0026532 <__adddf3+0x5ef>
c00261a1:	e9 85 03 00 00       	jmp    c002652b <__adddf3+0x5e8>
c00261a6:	85 db                	test   ebx,ebx
c00261a8:	0f 85 da 03 00 00    	jne    c0026588 <__adddf3+0x645>
c00261ae:	e9 cf 03 00 00       	jmp    c0026582 <__adddf3+0x63f>
c00261b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00261b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00261b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261bc:	f7 d1                	not    ecx
c00261be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261c4:	0f 84 70 03 00 00    	je     c002653a <__adddf3+0x5f7>
c00261ca:	d1 ea                	shr    edx,1
c00261cc:	89 c1                	mov    ecx,eax
c00261ce:	c1 e1 1f             	shl    ecx,0x1f
c00261d1:	09 ca                	or     edx,ecx
c00261d3:	d1 e8                	shr    eax,1
c00261d5:	e9 6f 03 00 00       	jmp    c0026549 <__adddf3+0x606>
c00261da:	85 c0                	test   eax,eax
c00261dc:	0f 89 67 03 00 00    	jns    c0026549 <__adddf3+0x606>
c00261e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00261e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261e8:	f7 d1                	not    ecx
c00261ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261f0:	0f 84 44 03 00 00    	je     c002653a <__adddf3+0x5f7>
c00261f6:	89 d1                	mov    ecx,edx
c00261f8:	d1 e9                	shr    ecx,1
c00261fa:	83 e2 01             	and    edx,0x1
c00261fd:	09 ca                	or     edx,ecx
c00261ff:	89 c1                	mov    ecx,eax
c0026201:	c1 e1 1f             	shl    ecx,0x1f
c0026204:	09 ca                	or     edx,ecx
c0026206:	d1 e8                	shr    eax,1
c0026208:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002620d:	e9 37 03 00 00       	jmp    c0026549 <__adddf3+0x606>
c0026212:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026215:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002621b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002621e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026221:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026227:	29 de                	sub    esi,ebx
c0026229:	85 f6                	test   esi,esi
c002622b:	0f 8e bd 00 00 00    	jle    c00262ee <__adddf3+0x3ab>
c0026231:	85 db                	test   ebx,ebx
c0026233:	75 17                	jne    c002624c <__adddf3+0x309>
c0026235:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026238:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002623b:	0f 84 47 03 00 00    	je     c0026588 <__adddf3+0x645>
c0026241:	4e                   	dec    esi
c0026242:	75 20                	jne    c0026264 <__adddf3+0x321>
c0026244:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026247:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002624a:	eb 5b                	jmp    c00262a7 <__adddf3+0x364>
c002624c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002624f:	f7 d3                	not    ebx
c0026251:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026257:	0f 84 2b 03 00 00    	je     c0026588 <__adddf3+0x645>
c002625d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026264:	83 fe 1f             	cmp    esi,0x1f
c0026267:	7e 49                	jle    c00262b2 <__adddf3+0x36f>
c0026269:	83 fe 3f             	cmp    esi,0x3f
c002626c:	0f 8f 16 03 00 00    	jg     c0026588 <__adddf3+0x645>
c0026272:	83 e6 1f             	and    esi,0x1f
c0026275:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026278:	89 f1                	mov    ecx,esi
c002627a:	d3 ef                	shr    edi,cl
c002627c:	31 db                	xor    ebx,ebx
c002627e:	85 f6                	test   esi,esi
c0026280:	74 13                	je     c0026295 <__adddf3+0x352>
c0026282:	b9 20 00 00 00       	mov    ecx,0x20
c0026287:	29 f1                	sub    ecx,esi
c0026289:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002628c:	d3 e6                	shl    esi,cl
c002628e:	31 db                	xor    ebx,ebx
c0026290:	85 f6                	test   esi,esi
c0026292:	0f 95 c3             	setne  bl
c0026295:	31 c9                	xor    ecx,ecx
c0026297:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002629b:	0f 95 c1             	setne  cl
c002629e:	09 cf                	or     edi,ecx
c00262a0:	09 fb                	or     ebx,edi
c00262a2:	29 da                	sub    edx,ebx
c00262a4:	83 d8 00             	sbb    eax,0x0
c00262a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262ad:	e9 aa 01 00 00       	jmp    c002645c <__adddf3+0x519>
c00262b2:	bf 20 00 00 00       	mov    edi,0x20
c00262b7:	29 f7                	sub    edi,esi
c00262b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00262bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262c2:	d3 e3                	shl    ebx,cl
c00262c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262c7:	89 f1                	mov    ecx,esi
c00262c9:	d3 ef                	shr    edi,cl
c00262cb:	09 fb                	or     ebx,edi
c00262cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262d0:	89 f1                	mov    ecx,esi
c00262d2:	d3 ef                	shr    edi,cl
c00262d4:	89 fe                	mov    esi,edi
c00262d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262dc:	d3 e7                	shl    edi,cl
c00262de:	85 ff                	test   edi,edi
c00262e0:	0f 95 c1             	setne  cl
c00262e3:	0f b6 c9             	movzx  ecx,cl
c00262e6:	09 cb                	or     ebx,ecx
c00262e8:	29 da                	sub    edx,ebx
c00262ea:	19 f0                	sbb    eax,esi
c00262ec:	eb b9                	jmp    c00262a7 <__adddf3+0x364>
c00262ee:	0f 84 cd 00 00 00    	je     c00263c1 <__adddf3+0x47e>
c00262f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00262f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026301:	75 1b                	jne    c002631e <__adddf3+0x3db>
c0026303:	89 d6                	mov    esi,edx
c0026305:	09 c6                	or     esi,eax
c0026307:	0f 84 7b 02 00 00    	je     c0026588 <__adddf3+0x645>
c002630d:	4b                   	dec    ebx
c002630e:	75 24                	jne    c0026334 <__adddf3+0x3f1>
c0026310:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026313:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026316:	29 d1                	sub    ecx,edx
c0026318:	19 c6                	sbb    esi,eax
c002631a:	89 ca                	mov    edx,ecx
c002631c:	eb 61                	jmp    c002637f <__adddf3+0x43c>
c002631e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026321:	f7 d6                	not    esi
c0026323:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026329:	0f 84 59 02 00 00    	je     c0026588 <__adddf3+0x645>
c002632f:	0d 00 00 00 80       	or     eax,0x80000000
c0026334:	83 fb 1f             	cmp    ebx,0x1f
c0026337:	7e 4d                	jle    c0026386 <__adddf3+0x443>
c0026339:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002633c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002633f:	83 fb 3f             	cmp    ebx,0x3f
c0026342:	0f 8f 40 02 00 00    	jg     c0026588 <__adddf3+0x645>
c0026348:	83 e3 1f             	and    ebx,0x1f
c002634b:	89 d9                	mov    ecx,ebx
c002634d:	89 c7                	mov    edi,eax
c002634f:	d3 ef                	shr    edi,cl
c0026351:	31 db                	xor    ebx,ebx
c0026353:	85 c9                	test   ecx,ecx
c0026355:	74 12                	je     c0026369 <__adddf3+0x426>
c0026357:	be 20 00 00 00       	mov    esi,0x20
c002635c:	29 ce                	sub    esi,ecx
c002635e:	89 f1                	mov    ecx,esi
c0026360:	d3 e0                	shl    eax,cl
c0026362:	31 db                	xor    ebx,ebx
c0026364:	85 c0                	test   eax,eax
c0026366:	0f 95 c3             	setne  bl
c0026369:	31 c0                	xor    eax,eax
c002636b:	85 d2                	test   edx,edx
c002636d:	0f 95 c0             	setne  al
c0026370:	09 c7                	or     edi,eax
c0026372:	09 fb                	or     ebx,edi
c0026374:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026377:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002637a:	29 da                	sub    edx,ebx
c002637c:	83 de 00             	sbb    esi,0x0
c002637f:	89 f0                	mov    eax,esi
c0026381:	e9 d6 00 00 00       	jmp    c002645c <__adddf3+0x519>
c0026386:	be 20 00 00 00       	mov    esi,0x20
c002638b:	29 de                	sub    esi,ebx
c002638d:	89 c7                	mov    edi,eax
c002638f:	89 f1                	mov    ecx,esi
c0026391:	d3 e7                	shl    edi,cl
c0026393:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026396:	89 d7                	mov    edi,edx
c0026398:	88 d9                	mov    cl,bl
c002639a:	d3 ef                	shr    edi,cl
c002639c:	89 f9                	mov    ecx,edi
c002639e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263a1:	09 cf                	or     edi,ecx
c00263a3:	88 d9                	mov    cl,bl
c00263a5:	d3 e8                	shr    eax,cl
c00263a7:	89 f1                	mov    ecx,esi
c00263a9:	d3 e2                	shl    edx,cl
c00263ab:	85 d2                	test   edx,edx
c00263ad:	0f 95 c2             	setne  dl
c00263b0:	0f b6 d2             	movzx  edx,dl
c00263b3:	09 d7                	or     edi,edx
c00263b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263bb:	29 fa                	sub    edx,edi
c00263bd:	19 c6                	sbb    esi,eax
c00263bf:	eb be                	jmp    c002637f <__adddf3+0x43c>
c00263c1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00263c7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00263cd:	75 6a                	jne    c0026439 <__adddf3+0x4f6>
c00263cf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00263d3:	75 58                	jne    c002642d <__adddf3+0x4ea>
c00263d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00263d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00263db:	89 d6                	mov    esi,edx
c00263dd:	09 c6                	or     esi,eax
c00263df:	75 17                	jne    c00263f8 <__adddf3+0x4b5>
c00263e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263e7:	85 db                	test   ebx,ebx
c00263e9:	0f 85 99 01 00 00    	jne    c0026588 <__adddf3+0x645>
c00263ef:	31 ff                	xor    edi,edi
c00263f1:	31 c9                	xor    ecx,ecx
c00263f3:	e9 90 01 00 00       	jmp    c0026588 <__adddf3+0x645>
c00263f8:	85 db                	test   ebx,ebx
c00263fa:	0f 84 88 01 00 00    	je     c0026588 <__adddf3+0x645>
c0026400:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026403:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026406:	85 c0                	test   eax,eax
c0026408:	79 10                	jns    c002641a <__adddf3+0x4d7>
c002640a:	31 c9                	xor    ecx,ecx
c002640c:	f7 da                	neg    edx
c002640e:	0f 95 c1             	setne  cl
c0026411:	01 c8                	add    eax,ecx
c0026413:	f7 d8                	neg    eax
c0026415:	e9 2f 01 00 00       	jmp    c0026549 <__adddf3+0x606>
c002641a:	31 ff                	xor    edi,edi
c002641c:	31 c9                	xor    ecx,ecx
c002641e:	89 c3                	mov    ebx,eax
c0026420:	09 d3                	or     ebx,edx
c0026422:	0f 84 60 01 00 00    	je     c0026588 <__adddf3+0x645>
c0026428:	e9 05 01 00 00       	jmp    c0026532 <__adddf3+0x5ef>
c002642d:	31 ff                	xor    edi,edi
c002642f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026434:	e9 4f 01 00 00       	jmp    c0026588 <__adddf3+0x645>
c0026439:	89 c1                	mov    ecx,eax
c002643b:	89 d0                	mov    eax,edx
c002643d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026440:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026443:	89 ca                	mov    edx,ecx
c0026445:	85 c9                	test   ecx,ecx
c0026447:	79 2c                	jns    c0026475 <__adddf3+0x532>
c0026449:	31 c9                	xor    ecx,ecx
c002644b:	f7 d8                	neg    eax
c002644d:	0f 95 c1             	setne  cl
c0026450:	01 ca                	add    edx,ecx
c0026452:	f7 da                	neg    edx
c0026454:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026457:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002645a:	eb 19                	jmp    c0026475 <__adddf3+0x532>
c002645c:	85 c0                	test   eax,eax
c002645e:	0f 89 e5 00 00 00    	jns    c0026549 <__adddf3+0x606>
c0026464:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026469:	89 c1                	mov    ecx,eax
c002646b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002646e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026471:	89 d0                	mov    eax,edx
c0026473:	89 ca                	mov    edx,ecx
c0026475:	85 d2                	test   edx,edx
c0026477:	74 59                	je     c00264d2 <__adddf3+0x58f>
c0026479:	0f bd da             	bsr    ebx,edx
c002647c:	83 f3 1f             	xor    ebx,0x1f
c002647f:	88 d9                	mov    cl,bl
c0026481:	d3 e2                	shl    edx,cl
c0026483:	bf 20 00 00 00       	mov    edi,0x20
c0026488:	89 f9                	mov    ecx,edi
c002648a:	29 d9                	sub    ecx,ebx
c002648c:	89 c6                	mov    esi,eax
c002648e:	d3 ee                	shr    esi,cl
c0026490:	09 d6                	or     esi,edx
c0026492:	88 d9                	mov    cl,bl
c0026494:	d3 e0                	shl    eax,cl
c0026496:	89 c2                	mov    edx,eax
c0026498:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002649b:	25 ff 07 00 00       	and    eax,0x7ff
c00264a0:	39 d8                	cmp    eax,ebx
c00264a2:	7f 22                	jg     c00264c6 <__adddf3+0x583>
c00264a4:	29 c3                	sub    ebx,eax
c00264a6:	43                   	inc    ebx
c00264a7:	88 d9                	mov    cl,bl
c00264a9:	d3 ea                	shr    edx,cl
c00264ab:	29 df                	sub    edi,ebx
c00264ad:	89 f9                	mov    ecx,edi
c00264af:	89 f0                	mov    eax,esi
c00264b1:	d3 e0                	shl    eax,cl
c00264b3:	09 c2                	or     edx,eax
c00264b5:	89 f0                	mov    eax,esi
c00264b7:	88 d9                	mov    cl,bl
c00264b9:	d3 e8                	shr    eax,cl
c00264bb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264be:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00264c4:	eb 6f                	jmp    c0026535 <__adddf3+0x5f2>
c00264c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264c9:	29 d8                	sub    eax,ebx
c00264cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264ce:	89 f0                	mov    eax,esi
c00264d0:	eb 59                	jmp    c002652b <__adddf3+0x5e8>
c00264d2:	85 c0                	test   eax,eax
c00264d4:	74 6a                	je     c0026540 <__adddf3+0x5fd>
c00264d6:	0f bd c8             	bsr    ecx,eax
c00264d9:	83 f1 1f             	xor    ecx,0x1f
c00264dc:	d3 e0                	shl    eax,cl
c00264de:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00264e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00264e7:	83 c1 20             	add    ecx,0x20
c00264ea:	39 cb                	cmp    ebx,ecx
c00264ec:	7f 35                	jg     c0026523 <__adddf3+0x5e0>
c00264ee:	29 d9                	sub    ecx,ebx
c00264f0:	8d 71 01             	lea    esi,[ecx+0x1]
c00264f3:	83 fe 1f             	cmp    esi,0x1f
c00264f6:	7e 09                	jle    c0026501 <__adddf3+0x5be>
c00264f8:	83 e9 1f             	sub    ecx,0x1f
c00264fb:	d3 e8                	shr    eax,cl
c00264fd:	89 c3                	mov    ebx,eax
c00264ff:	eb 11                	jmp    c0026512 <__adddf3+0x5cf>
c0026501:	b9 20 00 00 00       	mov    ecx,0x20
c0026506:	29 f1                	sub    ecx,esi
c0026508:	89 c3                	mov    ebx,eax
c002650a:	d3 e3                	shl    ebx,cl
c002650c:	89 f1                	mov    ecx,esi
c002650e:	d3 e8                	shr    eax,cl
c0026510:	89 c2                	mov    edx,eax
c0026512:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026515:	25 00 f8 ff ff       	and    eax,0xfffff800
c002651a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002651d:	89 d0                	mov    eax,edx
c002651f:	89 da                	mov    edx,ebx
c0026521:	eb 26                	jmp    c0026549 <__adddf3+0x606>
c0026523:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026526:	29 cf                	sub    edi,ecx
c0026528:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002652b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026530:	eb 17                	jmp    c0026549 <__adddf3+0x606>
c0026532:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026535:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026538:	eb 0f                	jmp    c0026549 <__adddf3+0x606>
c002653a:	31 d2                	xor    edx,edx
c002653c:	31 c0                	xor    eax,eax
c002653e:	eb 09                	jmp    c0026549 <__adddf3+0x606>
c0026540:	89 c2                	mov    edx,eax
c0026542:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026549:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002654c:	c1 e1 14             	shl    ecx,0x14
c002654f:	89 c3                	mov    ebx,eax
c0026551:	c1 eb 0b             	shr    ebx,0xb
c0026554:	09 d9                	or     ecx,ebx
c0026556:	89 d3                	mov    ebx,edx
c0026558:	c1 eb 0b             	shr    ebx,0xb
c002655b:	c1 e0 15             	shl    eax,0x15
c002655e:	09 d8                	or     eax,ebx
c0026560:	89 c7                	mov    edi,eax
c0026562:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026568:	0f 95 c0             	setne  al
c002656b:	89 c6                	mov    esi,eax
c002656d:	09 f3                	or     ebx,esi
c002656f:	83 e3 01             	and    ebx,0x1
c0026572:	c1 ea 0a             	shr    edx,0xa
c0026575:	21 da                	and    edx,ebx
c0026577:	89 f8                	mov    eax,edi
c0026579:	01 d0                	add    eax,edx
c002657b:	83 d1 00             	adc    ecx,0x0
c002657e:	89 c7                	mov    edi,eax
c0026580:	eb 06                	jmp    c0026588 <__adddf3+0x645>
c0026582:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026585:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026588:	89 f8                	mov    eax,edi
c002658a:	89 ca                	mov    edx,ecx
c002658c:	83 c4 24             	add    esp,0x24
c002658f:	5b                   	pop    ebx
c0026590:	5e                   	pop    esi
c0026591:	5f                   	pop    edi
c0026592:	5d                   	pop    ebp
c0026593:	c3                   	ret    

c0026594 <__subdf3>:
c0026594:	55                   	push   ebp
c0026595:	89 e5                	mov    ebp,esp
c0026597:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002659a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002659d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265a3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00265a6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00265a9:	5d                   	pop    ebp
c00265aa:	e9 94 f9 ff ff       	jmp    c0025f43 <__adddf3>

c00265af <__negdf2>:
c00265af:	55                   	push   ebp
c00265b0:	89 e5                	mov    ebp,esp
c00265b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265b8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265be:	5d                   	pop    ebp
c00265bf:	c3                   	ret    

c00265c0 <__muldf3>:
c00265c0:	55                   	push   ebp
c00265c1:	89 e5                	mov    ebp,esp
c00265c3:	57                   	push   edi
c00265c4:	56                   	push   esi
c00265c5:	53                   	push   ebx
c00265c6:	83 ec 24             	sub    esp,0x24
c00265c9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00265cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265d5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00265d8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00265db:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265de:	89 c8                	mov    eax,ecx
c00265e0:	c1 f8 14             	sar    eax,0x14
c00265e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00265e6:	89 f8                	mov    eax,edi
c00265e8:	89 fb                	mov    ebx,edi
c00265ea:	c1 e3 0b             	shl    ebx,0xb
c00265ed:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00265f0:	c1 e1 0b             	shl    ecx,0xb
c00265f3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00265f9:	c1 e8 15             	shr    eax,0x15
c00265fc:	09 c1                	or     ecx,eax
c00265fe:	89 d6                	mov    esi,edx
c0026600:	89 d0                	mov    eax,edx
c0026602:	c1 f8 14             	sar    eax,0x14
c0026605:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026608:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002660b:	89 c3                	mov    ebx,eax
c002660d:	c1 e3 0b             	shl    ebx,0xb
c0026610:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026613:	c1 e6 0b             	shl    esi,0xb
c0026616:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002661c:	c1 e8 15             	shr    eax,0x15
c002661f:	09 c6                	or     esi,eax
c0026621:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026624:	25 ff 07 00 00       	and    eax,0x7ff
c0026629:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002662c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002662f:	25 ff 07 00 00       	and    eax,0x7ff
c0026634:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026637:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002663a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002663d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026644:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026647:	40                   	inc    eax
c0026648:	a9 fe 07 00 00       	test   eax,0x7fe
c002664d:	0f 85 8d 00 00 00    	jne    c00266e0 <__muldf3+0x120>
c0026653:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026656:	09 c8                	or     eax,ecx
c0026658:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002665c:	74 44                	je     c00266a2 <__muldf3+0xe2>
c002665e:	85 c0                	test   eax,eax
c0026660:	0f 85 31 02 00 00    	jne    c0026897 <__muldf3+0x2d7>
c0026666:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026669:	40                   	inc    eax
c002666a:	a9 fe 07 00 00       	test   eax,0x7fe
c002666f:	75 13                	jne    c0026684 <__muldf3+0xc4>
c0026671:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026674:	09 f1                	or     ecx,esi
c0026676:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002667a:	74 22                	je     c002669e <__muldf3+0xde>
c002667c:	85 c9                	test   ecx,ecx
c002667e:	0f 85 0d 02 00 00    	jne    c0026891 <__muldf3+0x2d1>
c0026684:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026688:	0f 89 09 02 00 00    	jns    c0026897 <__muldf3+0x2d7>
c002668e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026691:	05 00 00 00 80       	add    eax,0x80000000
c0026696:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026699:	e9 f9 01 00 00       	jmp    c0026897 <__muldf3+0x2d7>
c002669e:	85 c9                	test   ecx,ecx
c00266a0:	eb 2e                	jmp    c00266d0 <__muldf3+0x110>
c00266a2:	85 c0                	test   eax,eax
c00266a4:	74 20                	je     c00266c6 <__muldf3+0x106>
c00266a6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00266a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266ac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266af:	c1 ef 1f             	shr    edi,0x1f
c00266b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00266b5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00266b8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00266bb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00266be:	09 f9                	or     ecx,edi
c00266c0:	78 1e                	js     c00266e0 <__muldf3+0x120>
c00266c2:	89 c3                	mov    ebx,eax
c00266c4:	eb e0                	jmp    c00266a6 <__muldf3+0xe6>
c00266c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266c9:	f7 d0                	not    eax
c00266cb:	a9 ff 07 00 00       	test   eax,0x7ff
c00266d0:	75 b2                	jne    c0026684 <__muldf3+0xc4>
c00266d2:	31 ff                	xor    edi,edi
c00266d4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00266db:	e9 b7 01 00 00       	jmp    c0026897 <__muldf3+0x2d7>
c00266e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266e3:	40                   	inc    eax
c00266e4:	a9 fe 07 00 00       	test   eax,0x7fe
c00266e9:	75 57                	jne    c0026742 <__muldf3+0x182>
c00266eb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266ee:	09 f0                	or     eax,esi
c00266f0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266f4:	74 23                	je     c0026719 <__muldf3+0x159>
c00266f6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00266fa:	0f 89 91 01 00 00    	jns    c0026891 <__muldf3+0x2d1>
c0026700:	85 c0                	test   eax,eax
c0026702:	0f 85 89 01 00 00    	jne    c0026891 <__muldf3+0x2d1>
c0026708:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002670b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026711:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026714:	e9 7e 01 00 00       	jmp    c0026897 <__muldf3+0x2d7>
c0026719:	85 c0                	test   eax,eax
c002671b:	75 0c                	jne    c0026729 <__muldf3+0x169>
c002671d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026721:	0f 89 6a 01 00 00    	jns    c0026891 <__muldf3+0x2d1>
c0026727:	eb df                	jmp    c0026708 <__muldf3+0x148>
c0026729:	01 f6                	add    esi,esi
c002672b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002672e:	c1 ea 1f             	shr    edx,0x1f
c0026731:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026734:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026737:	8d 43 ff             	lea    eax,[ebx-0x1]
c002673a:	09 d6                	or     esi,edx
c002673c:	78 04                	js     c0026742 <__muldf3+0x182>
c002673e:	89 c3                	mov    ebx,eax
c0026740:	eb e7                	jmp    c0026729 <__muldf3+0x169>
c0026742:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026748:	81 ce 00 00 00 80    	or     esi,0x80000000
c002674e:	89 c8                	mov    eax,ecx
c0026750:	f7 e6                	mul    esi
c0026752:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026755:	89 c7                	mov    edi,eax
c0026757:	89 c8                	mov    eax,ecx
c0026759:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002675c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002675f:	89 c1                	mov    ecx,eax
c0026761:	89 f0                	mov    eax,esi
c0026763:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026766:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026769:	89 c6                	mov    esi,eax
c002676b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002676e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026771:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026774:	31 c0                	xor    eax,eax
c0026776:	01 f1                	add    ecx,esi
c0026778:	0f 92 c0             	setb   al
c002677b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002677e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026781:	83 d6 00             	adc    esi,0x0
c0026784:	01 c7                	add    edi,eax
c0026786:	83 d6 00             	adc    esi,0x0
c0026789:	01 ca                	add    edx,ecx
c002678b:	0f 92 c1             	setb   cl
c002678e:	0f b6 c9             	movzx  ecx,cl
c0026791:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026794:	83 d6 00             	adc    esi,0x0
c0026797:	01 cf                	add    edi,ecx
c0026799:	83 d6 00             	adc    esi,0x0
c002679c:	31 c9                	xor    ecx,ecx
c002679e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00267a1:	0f 95 c1             	setne  cl
c00267a4:	09 cf                	or     edi,ecx
c00267a6:	85 f6                	test   esi,esi
c00267a8:	78 0c                	js     c00267b6 <__muldf3+0x1f6>
c00267aa:	01 f6                	add    esi,esi
c00267ac:	89 f8                	mov    eax,edi
c00267ae:	c1 e8 1f             	shr    eax,0x1f
c00267b1:	09 c6                	or     esi,eax
c00267b3:	01 ff                	add    edi,edi
c00267b5:	4b                   	dec    ebx
c00267b6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00267bc:	0f 8f 85 00 00 00    	jg     c0026847 <__muldf3+0x287>
c00267c2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00267c8:	85 db                	test   ebx,ebx
c00267ca:	0f 8f 84 00 00 00    	jg     c0026854 <__muldf3+0x294>
c00267d0:	83 fb cc             	cmp    ebx,0xffffffcc
c00267d3:	7c 79                	jl     c002684e <__muldf3+0x28e>
c00267d5:	ba 01 00 00 00       	mov    edx,0x1
c00267da:	29 da                	sub    edx,ebx
c00267dc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267e2:	83 fa 1f             	cmp    edx,0x1f
c00267e5:	7e 30                	jle    c0026817 <__muldf3+0x257>
c00267e7:	83 fa 20             	cmp    edx,0x20
c00267ea:	75 0b                	jne    c00267f7 <__muldf3+0x237>
c00267ec:	31 c0                	xor    eax,eax
c00267ee:	85 ff                	test   edi,edi
c00267f0:	0f 95 c0             	setne  al
c00267f3:	89 c7                	mov    edi,eax
c00267f5:	eb 1a                	jmp    c0026811 <__muldf3+0x251>
c00267f7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00267fa:	89 f0                	mov    eax,esi
c00267fc:	d3 e0                	shl    eax,cl
c00267fe:	09 f8                	or     eax,edi
c0026800:	0f 95 c0             	setne  al
c0026803:	0f b6 c0             	movzx  eax,al
c0026806:	89 c7                	mov    edi,eax
c0026808:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002680d:	29 d9                	sub    ecx,ebx
c002680f:	d3 ee                	shr    esi,cl
c0026811:	09 f7                	or     edi,esi
c0026813:	31 db                	xor    ebx,ebx
c0026815:	eb 3b                	jmp    c0026852 <__muldf3+0x292>
c0026817:	83 c3 1f             	add    ebx,0x1f
c002681a:	89 f0                	mov    eax,esi
c002681c:	88 d9                	mov    cl,bl
c002681e:	d3 e0                	shl    eax,cl
c0026820:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026823:	89 f8                	mov    eax,edi
c0026825:	88 d1                	mov    cl,dl
c0026827:	d3 e8                	shr    eax,cl
c0026829:	89 c1                	mov    ecx,eax
c002682b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002682e:	09 c8                	or     eax,ecx
c0026830:	88 d9                	mov    cl,bl
c0026832:	d3 e7                	shl    edi,cl
c0026834:	31 db                	xor    ebx,ebx
c0026836:	85 ff                	test   edi,edi
c0026838:	0f 95 c3             	setne  bl
c002683b:	89 df                	mov    edi,ebx
c002683d:	09 c7                	or     edi,eax
c002683f:	88 d1                	mov    cl,dl
c0026841:	d3 ee                	shr    esi,cl
c0026843:	31 db                	xor    ebx,ebx
c0026845:	eb 0d                	jmp    c0026854 <__muldf3+0x294>
c0026847:	bb ff 07 00 00       	mov    ebx,0x7ff
c002684c:	eb 02                	jmp    c0026850 <__muldf3+0x290>
c002684e:	31 db                	xor    ebx,ebx
c0026850:	31 ff                	xor    edi,edi
c0026852:	31 f6                	xor    esi,esi
c0026854:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026857:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002685a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002685f:	09 c3                	or     ebx,eax
c0026861:	c1 e3 14             	shl    ebx,0x14
c0026864:	89 f0                	mov    eax,esi
c0026866:	c1 e8 0b             	shr    eax,0xb
c0026869:	09 c3                	or     ebx,eax
c002686b:	89 f8                	mov    eax,edi
c002686d:	c1 e8 0b             	shr    eax,0xb
c0026870:	c1 e6 15             	shl    esi,0x15
c0026873:	09 c6                	or     esi,eax
c0026875:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002687b:	0f 95 c1             	setne  cl
c002687e:	09 c8                	or     eax,ecx
c0026880:	83 e0 01             	and    eax,0x1
c0026883:	c1 ef 0a             	shr    edi,0xa
c0026886:	21 c7                	and    edi,eax
c0026888:	01 f7                	add    edi,esi
c002688a:	83 d3 00             	adc    ebx,0x0
c002688d:	89 da                	mov    edx,ebx
c002688f:	eb 03                	jmp    c0026894 <__muldf3+0x2d4>
c0026891:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026894:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026897:	89 f8                	mov    eax,edi
c0026899:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002689c:	83 c4 24             	add    esp,0x24
c002689f:	5b                   	pop    ebx
c00268a0:	5e                   	pop    esi
c00268a1:	5f                   	pop    edi
c00268a2:	5d                   	pop    ebp
c00268a3:	c3                   	ret    

c00268a4 <__divdf3>:
c00268a4:	55                   	push   ebp
c00268a5:	89 e5                	mov    ebp,esp
c00268a7:	57                   	push   edi
c00268a8:	56                   	push   esi
c00268a9:	53                   	push   ebx
c00268aa:	83 ec 2c             	sub    esp,0x2c
c00268ad:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00268b0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00268b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268b6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00268b9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268bc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00268bf:	89 ce                	mov    esi,ecx
c00268c1:	89 c8                	mov    eax,ecx
c00268c3:	c1 f8 14             	sar    eax,0x14
c00268c6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268c9:	89 f8                	mov    eax,edi
c00268cb:	89 fb                	mov    ebx,edi
c00268cd:	c1 e3 0b             	shl    ebx,0xb
c00268d0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00268d3:	c1 e6 0b             	shl    esi,0xb
c00268d6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00268dc:	c1 e8 15             	shr    eax,0x15
c00268df:	09 c6                	or     esi,eax
c00268e1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00268e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00268e7:	89 c2                	mov    edx,eax
c00268e9:	c1 fa 14             	sar    edx,0x14
c00268ec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00268ef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00268f2:	89 de                	mov    esi,ebx
c00268f4:	c1 e6 0b             	shl    esi,0xb
c00268f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00268fa:	c1 e0 0b             	shl    eax,0xb
c00268fd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026902:	c1 eb 15             	shr    ebx,0x15
c0026905:	09 d8                	or     eax,ebx
c0026907:	89 c2                	mov    edx,eax
c0026909:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002690c:	25 ff 07 00 00       	and    eax,0x7ff
c0026911:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026914:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026917:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002691d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026920:	29 d8                	sub    eax,ebx
c0026922:	05 ff 03 00 00       	add    eax,0x3ff
c0026927:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002692a:	46                   	inc    esi
c002692b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026931:	0f 85 a5 00 00 00    	jne    c00269dc <__divdf3+0x138>
c0026937:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002693a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002693d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026941:	74 2a                	je     c002696d <__divdf3+0xc9>
c0026943:	85 f6                	test   esi,esi
c0026945:	0f 85 cc 02 00 00    	jne    c0026c17 <__divdf3+0x373>
c002694b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002694e:	40                   	inc    eax
c002694f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026954:	75 26                	jne    c002697c <__divdf3+0xd8>
c0026956:	85 db                	test   ebx,ebx
c0026958:	74 22                	je     c002697c <__divdf3+0xd8>
c002695a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002695d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026960:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026963:	09 d0                	or     eax,edx
c0026965:	0f 85 ac 02 00 00    	jne    c0026c17 <__divdf3+0x373>
c002696b:	eb 63                	jmp    c00269d0 <__divdf3+0x12c>
c002696d:	85 f6                	test   esi,esi
c002696f:	75 22                	jne    c0026993 <__divdf3+0xef>
c0026971:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026974:	40                   	inc    eax
c0026975:	a9 fe 07 00 00       	test   eax,0x7fe
c002697a:	74 36                	je     c00269b2 <__divdf3+0x10e>
c002697c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026980:	0f 89 91 02 00 00    	jns    c0026c17 <__divdf3+0x373>
c0026986:	89 f8                	mov    eax,edi
c0026988:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002698e:	e9 80 02 00 00       	jmp    c0026c13 <__divdf3+0x36f>
c0026993:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026996:	01 f6                	add    esi,esi
c0026998:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002699b:	c1 ef 1f             	shr    edi,0x1f
c002699e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00269a1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00269a4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00269a7:	09 f7                	or     edi,esi
c00269a9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00269ac:	78 2e                	js     c00269dc <__divdf3+0x138>
c00269ae:	89 c8                	mov    eax,ecx
c00269b0:	eb e1                	jmp    c0026993 <__divdf3+0xef>
c00269b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00269b5:	09 d0                	or     eax,edx
c00269b7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269bb:	74 0f                	je     c00269cc <__divdf3+0x128>
c00269bd:	85 c0                	test   eax,eax
c00269bf:	74 bb                	je     c002697c <__divdf3+0xd8>
c00269c1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269c4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269c7:	e9 4b 02 00 00       	jmp    c0026c17 <__divdf3+0x373>
c00269cc:	85 c0                	test   eax,eax
c00269ce:	75 ac                	jne    c002697c <__divdf3+0xd8>
c00269d0:	31 ff                	xor    edi,edi
c00269d2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00269d7:	e9 3b 02 00 00       	jmp    c0026c17 <__divdf3+0x373>
c00269dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00269df:	8d 4f 01             	lea    ecx,[edi+0x1]
c00269e2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00269e8:	75 6b                	jne    c0026a55 <__divdf3+0x1b1>
c00269ea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00269ed:	09 d6                	or     esi,edx
c00269ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269f3:	74 28                	je     c0026a1d <__divdf3+0x179>
c00269f5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269f8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269fb:	85 f6                	test   esi,esi
c00269fd:	0f 85 14 02 00 00    	jne    c0026c17 <__divdf3+0x373>
c0026a03:	31 ff                	xor    edi,edi
c0026a05:	31 c9                	xor    ecx,ecx
c0026a07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a0a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a0d:	0f 89 04 02 00 00    	jns    c0026c17 <__divdf3+0x373>
c0026a13:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026a18:	e9 fa 01 00 00       	jmp    c0026c17 <__divdf3+0x373>
c0026a1d:	85 f6                	test   esi,esi
c0026a1f:	75 1b                	jne    c0026a3c <__divdf3+0x198>
c0026a21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a24:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a27:	25 00 00 00 80       	and    eax,0x80000000
c0026a2c:	31 c9                	xor    ecx,ecx
c0026a2e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026a33:	89 cf                	mov    edi,ecx
c0026a35:	89 c1                	mov    ecx,eax
c0026a37:	e9 db 01 00 00       	jmp    c0026c17 <__divdf3+0x373>
c0026a3c:	01 d2                	add    edx,edx
c0026a3e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a41:	c1 eb 1f             	shr    ebx,0x1f
c0026a44:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a47:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026a4a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026a4d:	09 da                	or     edx,ebx
c0026a4f:	78 04                	js     c0026a55 <__divdf3+0x1b1>
c0026a51:	89 c8                	mov    eax,ecx
c0026a53:	eb e7                	jmp    c0026a3c <__divdf3+0x198>
c0026a55:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a58:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a5e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a64:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026a67:	39 d6                	cmp    esi,edx
c0026a69:	77 0d                	ja     c0026a78 <__divdf3+0x1d4>
c0026a6b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a6e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026a71:	72 1b                	jb     c0026a8e <__divdf3+0x1ea>
c0026a73:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026a76:	75 16                	jne    c0026a8e <__divdf3+0x1ea>
c0026a78:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a7b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a7e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026a81:	83 de 00             	sbb    esi,0x0
c0026a84:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026a87:	ba 01 00 00 00       	mov    edx,0x1
c0026a8c:	eb 02                	jmp    c0026a90 <__divdf3+0x1ec>
c0026a8e:	31 d2                	xor    edx,edx
c0026a90:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026a97:	31 ff                	xor    edi,edi
c0026a99:	01 ff                	add    edi,edi
c0026a9b:	89 d1                	mov    ecx,edx
c0026a9d:	c1 e9 1f             	shr    ecx,0x1f
c0026aa0:	09 cf                	or     edi,ecx
c0026aa2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026aa5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026aa8:	89 da                	mov    edx,ebx
c0026aaa:	89 f3                	mov    ebx,esi
c0026aac:	8d 34 36             	lea    esi,[esi+esi*1]
c0026aaf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ab2:	c1 e9 1f             	shr    ecx,0x1f
c0026ab5:	09 ce                	or     esi,ecx
c0026ab7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026aba:	01 c9                	add    ecx,ecx
c0026abc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026abf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026ac2:	85 db                	test   ebx,ebx
c0026ac4:	78 29                	js     c0026aef <__divdf3+0x24b>
c0026ac6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026ac9:	72 07                	jb     c0026ad2 <__divdf3+0x22e>
c0026acb:	75 3c                	jne    c0026b09 <__divdf3+0x265>
c0026acd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ad0:	77 37                	ja     c0026b09 <__divdf3+0x265>
c0026ad2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ad5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026ad8:	31 d2                	xor    edx,edx
c0026ada:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026add:	0f 97 c2             	seta   dl
c0026ae0:	29 d6                	sub    esi,edx
c0026ae2:	89 d9                	mov    ecx,ebx
c0026ae4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026ae7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026aea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026aed:	eb 17                	jmp    c0026b06 <__divdf3+0x262>
c0026aef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026af2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026af5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026af8:	0f 97 c1             	seta   cl
c0026afb:	0f b6 c9             	movzx  ecx,cl
c0026afe:	29 ce                	sub    esi,ecx
c0026b00:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026b03:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026b06:	83 ca 01             	or     edx,0x1
c0026b09:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026b0c:	75 8b                	jne    c0026a99 <__divdf3+0x1f5>
c0026b0e:	c1 e7 09             	shl    edi,0x9
c0026b11:	89 d1                	mov    ecx,edx
c0026b13:	c1 e9 17             	shr    ecx,0x17
c0026b16:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b19:	09 f3                	or     ebx,esi
c0026b1b:	0f 95 c3             	setne  bl
c0026b1e:	0f b6 db             	movzx  ebx,bl
c0026b21:	c1 e2 09             	shl    edx,0x9
c0026b24:	09 d3                	or     ebx,edx
c0026b26:	89 ca                	mov    edx,ecx
c0026b28:	09 fa                	or     edx,edi
c0026b2a:	78 0c                	js     c0026b38 <__divdf3+0x294>
c0026b2c:	01 d2                	add    edx,edx
c0026b2e:	89 d9                	mov    ecx,ebx
c0026b30:	c1 e9 1f             	shr    ecx,0x1f
c0026b33:	09 ca                	or     edx,ecx
c0026b35:	01 db                	add    ebx,ebx
c0026b37:	48                   	dec    eax
c0026b38:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026b3d:	0f 8f 83 00 00 00    	jg     c0026bc6 <__divdf3+0x322>
c0026b43:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b49:	85 c0                	test   eax,eax
c0026b4b:	0f 8f 82 00 00 00    	jg     c0026bd3 <__divdf3+0x32f>
c0026b51:	83 f8 cc             	cmp    eax,0xffffffcc
c0026b54:	7c 77                	jl     c0026bcd <__divdf3+0x329>
c0026b56:	be 01 00 00 00       	mov    esi,0x1
c0026b5b:	29 c6                	sub    esi,eax
c0026b5d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b63:	83 fe 1f             	cmp    esi,0x1f
c0026b66:	7e 2f                	jle    c0026b97 <__divdf3+0x2f3>
c0026b68:	83 fe 20             	cmp    esi,0x20
c0026b6b:	75 0a                	jne    c0026b77 <__divdf3+0x2d3>
c0026b6d:	85 db                	test   ebx,ebx
c0026b6f:	0f 95 c3             	setne  bl
c0026b72:	0f b6 db             	movzx  ebx,bl
c0026b75:	eb 1a                	jmp    c0026b91 <__divdf3+0x2ed>
c0026b77:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026b7a:	89 d7                	mov    edi,edx
c0026b7c:	d3 e7                	shl    edi,cl
c0026b7e:	89 f9                	mov    ecx,edi
c0026b80:	09 d9                	or     ecx,ebx
c0026b82:	0f 95 c3             	setne  bl
c0026b85:	0f b6 db             	movzx  ebx,bl
c0026b88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026b8d:	29 c1                	sub    ecx,eax
c0026b8f:	d3 ea                	shr    edx,cl
c0026b91:	09 d3                	or     ebx,edx
c0026b93:	31 c0                	xor    eax,eax
c0026b95:	eb 3a                	jmp    c0026bd1 <__divdf3+0x32d>
c0026b97:	83 c0 1f             	add    eax,0x1f
c0026b9a:	89 d7                	mov    edi,edx
c0026b9c:	88 c1                	mov    cl,al
c0026b9e:	d3 e7                	shl    edi,cl
c0026ba0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ba3:	89 df                	mov    edi,ebx
c0026ba5:	89 f1                	mov    ecx,esi
c0026ba7:	d3 ef                	shr    edi,cl
c0026ba9:	89 f9                	mov    ecx,edi
c0026bab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026bae:	09 cf                	or     edi,ecx
c0026bb0:	88 c1                	mov    cl,al
c0026bb2:	d3 e3                	shl    ebx,cl
c0026bb4:	85 db                	test   ebx,ebx
c0026bb6:	0f 95 c3             	setne  bl
c0026bb9:	0f b6 db             	movzx  ebx,bl
c0026bbc:	09 fb                	or     ebx,edi
c0026bbe:	89 f1                	mov    ecx,esi
c0026bc0:	d3 ea                	shr    edx,cl
c0026bc2:	31 c0                	xor    eax,eax
c0026bc4:	eb 0d                	jmp    c0026bd3 <__divdf3+0x32f>
c0026bc6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026bcb:	eb 02                	jmp    c0026bcf <__divdf3+0x32b>
c0026bcd:	31 c0                	xor    eax,eax
c0026bcf:	31 db                	xor    ebx,ebx
c0026bd1:	31 d2                	xor    edx,edx
c0026bd3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026bd6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026bd9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026bdf:	09 c8                	or     eax,ecx
c0026be1:	c1 e0 14             	shl    eax,0x14
c0026be4:	89 d1                	mov    ecx,edx
c0026be6:	c1 e9 0b             	shr    ecx,0xb
c0026be9:	09 c8                	or     eax,ecx
c0026beb:	89 c6                	mov    esi,eax
c0026bed:	89 d9                	mov    ecx,ebx
c0026bef:	c1 e9 0b             	shr    ecx,0xb
c0026bf2:	c1 e2 15             	shl    edx,0x15
c0026bf5:	09 ca                	or     edx,ecx
c0026bf7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026bfd:	0f 95 c0             	setne  al
c0026c00:	09 c1                	or     ecx,eax
c0026c02:	83 e1 01             	and    ecx,0x1
c0026c05:	c1 eb 0a             	shr    ebx,0xa
c0026c08:	21 cb                	and    ebx,ecx
c0026c0a:	01 d3                	add    ebx,edx
c0026c0c:	89 d8                	mov    eax,ebx
c0026c0e:	83 d6 00             	adc    esi,0x0
c0026c11:	89 f2                	mov    edx,esi
c0026c13:	89 c7                	mov    edi,eax
c0026c15:	89 d1                	mov    ecx,edx
c0026c17:	89 f8                	mov    eax,edi
c0026c19:	89 ca                	mov    edx,ecx
c0026c1b:	83 c4 2c             	add    esp,0x2c
c0026c1e:	5b                   	pop    ebx
c0026c1f:	5e                   	pop    esi
c0026c20:	5f                   	pop    edi
c0026c21:	5d                   	pop    ebp
c0026c22:	c3                   	ret    

c0026c23 <__floatsidf>:
c0026c23:	55                   	push   ebp
c0026c24:	89 e5                	mov    ebp,esp
c0026c26:	56                   	push   esi
c0026c27:	53                   	push   ebx
c0026c28:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c2b:	85 db                	test   ebx,ebx
c0026c2d:	7e 15                	jle    c0026c44 <__floatsidf+0x21>
c0026c2f:	0f bd cb             	bsr    ecx,ebx
c0026c32:	83 f1 1f             	xor    ecx,0x1f
c0026c35:	d3 e3                	shl    ebx,cl
c0026c37:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c3d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c42:	eb 21                	jmp    c0026c65 <__floatsidf+0x42>
c0026c44:	b8 00 00 00 00       	mov    eax,0x0
c0026c49:	ba 00 00 00 00       	mov    edx,0x0
c0026c4e:	74 2a                	je     c0026c7a <__floatsidf+0x57>
c0026c50:	f7 db                	neg    ebx
c0026c52:	0f bd cb             	bsr    ecx,ebx
c0026c55:	83 f1 1f             	xor    ecx,0x1f
c0026c58:	d3 e3                	shl    ebx,cl
c0026c5a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c60:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026c65:	29 c8                	sub    eax,ecx
c0026c67:	c1 e0 14             	shl    eax,0x14
c0026c6a:	89 c1                	mov    ecx,eax
c0026c6c:	89 de                	mov    esi,ebx
c0026c6e:	c1 ee 0b             	shr    esi,0xb
c0026c71:	09 f1                	or     ecx,esi
c0026c73:	89 ca                	mov    edx,ecx
c0026c75:	c1 e3 15             	shl    ebx,0x15
c0026c78:	89 d8                	mov    eax,ebx
c0026c7a:	5b                   	pop    ebx
c0026c7b:	5e                   	pop    esi
c0026c7c:	5d                   	pop    ebp
c0026c7d:	c3                   	ret    

c0026c7e <__floatunsidf>:
c0026c7e:	55                   	push   ebp
c0026c7f:	89 e5                	mov    ebp,esp
c0026c81:	56                   	push   esi
c0026c82:	53                   	push   ebx
c0026c83:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c86:	85 db                	test   ebx,ebx
c0026c88:	74 2a                	je     c0026cb4 <__floatunsidf+0x36>
c0026c8a:	0f bd cb             	bsr    ecx,ebx
c0026c8d:	83 f1 1f             	xor    ecx,0x1f
c0026c90:	d3 e3                	shl    ebx,cl
c0026c92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c98:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c9d:	29 c8                	sub    eax,ecx
c0026c9f:	c1 e0 14             	shl    eax,0x14
c0026ca2:	89 c1                	mov    ecx,eax
c0026ca4:	89 de                	mov    esi,ebx
c0026ca6:	c1 ee 0b             	shr    esi,0xb
c0026ca9:	09 f1                	or     ecx,esi
c0026cab:	89 ca                	mov    edx,ecx
c0026cad:	c1 e3 15             	shl    ebx,0x15
c0026cb0:	89 d8                	mov    eax,ebx
c0026cb2:	eb 04                	jmp    c0026cb8 <__floatunsidf+0x3a>
c0026cb4:	31 c0                	xor    eax,eax
c0026cb6:	31 d2                	xor    edx,edx
c0026cb8:	5b                   	pop    ebx
c0026cb9:	5e                   	pop    esi
c0026cba:	5d                   	pop    ebp
c0026cbb:	c3                   	ret    

c0026cbc <__fixdfsi>:
c0026cbc:	55                   	push   ebp
c0026cbd:	89 e5                	mov    ebp,esp
c0026cbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026cc2:	89 d1                	mov    ecx,edx
c0026cc4:	c1 e1 0b             	shl    ecx,0xb
c0026cc7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cd0:	c1 e8 15             	shr    eax,0x15
c0026cd3:	09 c1                	or     ecx,eax
c0026cd5:	c1 fa 14             	sar    edx,0x14
c0026cd8:	78 1f                	js     c0026cf9 <__fixdfsi+0x3d>
c0026cda:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026ce0:	31 c0                	xor    eax,eax
c0026ce2:	83 fa 1e             	cmp    edx,0x1e
c0026ce5:	77 40                	ja     c0026d27 <__fixdfsi+0x6b>
c0026ce7:	89 c8                	mov    eax,ecx
c0026ce9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cee:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cf3:	29 d1                	sub    ecx,edx
c0026cf5:	d3 e8                	shr    eax,cl
c0026cf7:	eb 2e                	jmp    c0026d27 <__fixdfsi+0x6b>
c0026cf9:	31 c0                	xor    eax,eax
c0026cfb:	81 c2 01 04 00 00    	add    edx,0x401
c0026d01:	78 24                	js     c0026d27 <__fixdfsi+0x6b>
c0026d03:	83 fa 1e             	cmp    edx,0x1e
c0026d06:	7e 09                	jle    c0026d11 <__fixdfsi+0x55>
c0026d08:	83 fa 1f             	cmp    edx,0x1f
c0026d0b:	75 18                	jne    c0026d25 <__fixdfsi+0x69>
c0026d0d:	85 c9                	test   ecx,ecx
c0026d0f:	75 14                	jne    c0026d25 <__fixdfsi+0x69>
c0026d11:	89 c8                	mov    eax,ecx
c0026d13:	0d 00 00 00 80       	or     eax,0x80000000
c0026d18:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d1d:	29 d1                	sub    ecx,edx
c0026d1f:	d3 e8                	shr    eax,cl
c0026d21:	f7 d8                	neg    eax
c0026d23:	eb 02                	jmp    c0026d27 <__fixdfsi+0x6b>
c0026d25:	31 c0                	xor    eax,eax
c0026d27:	5d                   	pop    ebp
c0026d28:	c3                   	ret    

c0026d29 <__fixunsdfsi>:
c0026d29:	55                   	push   ebp
c0026d2a:	89 e5                	mov    ebp,esp
c0026d2c:	53                   	push   ebx
c0026d2d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026d30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d33:	89 d3                	mov    ebx,edx
c0026d35:	c1 fb 14             	sar    ebx,0x14
c0026d38:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026d3e:	31 c0                	xor    eax,eax
c0026d40:	83 fb 1f             	cmp    ebx,0x1f
c0026d43:	77 1d                	ja     c0026d62 <__fixunsdfsi+0x39>
c0026d45:	89 d0                	mov    eax,edx
c0026d47:	c1 e0 0b             	shl    eax,0xb
c0026d4a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d4f:	c1 e9 15             	shr    ecx,0x15
c0026d52:	09 c8                	or     eax,ecx
c0026d54:	0d 00 00 00 80       	or     eax,0x80000000
c0026d59:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d5e:	29 d9                	sub    ecx,ebx
c0026d60:	d3 e8                	shr    eax,cl
c0026d62:	5b                   	pop    ebx
c0026d63:	5d                   	pop    ebp
c0026d64:	c3                   	ret    

c0026d65 <__cmpdf2>:
c0026d65:	55                   	push   ebp
c0026d66:	89 e5                	mov    ebp,esp
c0026d68:	57                   	push   edi
c0026d69:	56                   	push   esi
c0026d6a:	53                   	push   ebx
c0026d6b:	83 ec 0c             	sub    esp,0xc
c0026d6e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026d71:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026d74:	89 ca                	mov    edx,ecx
c0026d76:	c1 ea 14             	shr    edx,0x14
c0026d79:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026d7f:	89 cb                	mov    ebx,ecx
c0026d81:	c1 fb 1f             	sar    ebx,0x1f
c0026d84:	31 da                	xor    edx,ebx
c0026d86:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d89:	89 df                	mov    edi,ebx
c0026d8b:	c1 e7 0b             	shl    edi,0xb
c0026d8e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d91:	c1 e1 0b             	shl    ecx,0xb
c0026d94:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d9a:	c1 eb 15             	shr    ebx,0x15
c0026d9d:	09 d9                	or     ecx,ebx
c0026d9f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026da2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026da5:	89 ce                	mov    esi,ecx
c0026da7:	c1 ee 14             	shr    esi,0x14
c0026daa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026db0:	89 cb                	mov    ebx,ecx
c0026db2:	c1 fb 1f             	sar    ebx,0x1f
c0026db5:	31 de                	xor    esi,ebx
c0026db7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026dba:	89 df                	mov    edi,ebx
c0026dbc:	c1 e7 0b             	shl    edi,0xb
c0026dbf:	c1 e1 0b             	shl    ecx,0xb
c0026dc2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026dc8:	c1 eb 15             	shr    ebx,0x15
c0026dcb:	09 d9                	or     ecx,ebx
c0026dcd:	89 d3                	mov    ebx,edx
c0026dcf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026dd5:	43                   	inc    ebx
c0026dd6:	83 fb 01             	cmp    ebx,0x1
c0026dd9:	77 08                	ja     c0026de3 <__cmpdf2+0x7e>
c0026ddb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026dde:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026de1:	75 68                	jne    c0026e4b <__cmpdf2+0xe6>
c0026de3:	89 f3                	mov    ebx,esi
c0026de5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026deb:	43                   	inc    ebx
c0026dec:	83 fb 01             	cmp    ebx,0x1
c0026def:	77 06                	ja     c0026df7 <__cmpdf2+0x92>
c0026df1:	89 fb                	mov    ebx,edi
c0026df3:	09 cb                	or     ebx,ecx
c0026df5:	75 54                	jne    c0026e4b <__cmpdf2+0xe6>
c0026df7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026dfa:	09 f8                	or     eax,edi
c0026dfc:	09 c8                	or     eax,ecx
c0026dfe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026e01:	75 12                	jne    c0026e15 <__cmpdf2+0xb0>
c0026e03:	8d 42 01             	lea    eax,[edx+0x1]
c0026e06:	83 f8 01             	cmp    eax,0x1
c0026e09:	77 0a                	ja     c0026e15 <__cmpdf2+0xb0>
c0026e0b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026e0e:	31 c0                	xor    eax,eax
c0026e10:	83 fb 01             	cmp    ebx,0x1
c0026e13:	76 36                	jbe    c0026e4b <__cmpdf2+0xe6>
c0026e15:	b8 01 00 00 00       	mov    eax,0x1
c0026e1a:	39 f2                	cmp    edx,esi
c0026e1c:	7f 2d                	jg     c0026e4b <__cmpdf2+0xe6>
c0026e1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026e23:	7c 26                	jl     c0026e4b <__cmpdf2+0xe6>
c0026e25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e28:	77 07                	ja     c0026e31 <__cmpdf2+0xcc>
c0026e2a:	72 16                	jb     c0026e42 <__cmpdf2+0xdd>
c0026e2c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026e2f:	76 0a                	jbe    c0026e3b <__cmpdf2+0xd6>
c0026e31:	89 d0                	mov    eax,edx
c0026e33:	c1 f8 1f             	sar    eax,0x1f
c0026e36:	83 c8 01             	or     eax,0x1
c0026e39:	eb 10                	jmp    c0026e4b <__cmpdf2+0xe6>
c0026e3b:	b8 00 00 00 00       	mov    eax,0x0
c0026e40:	73 09                	jae    c0026e4b <__cmpdf2+0xe6>
c0026e42:	89 d0                	mov    eax,edx
c0026e44:	c1 f8 1f             	sar    eax,0x1f
c0026e47:	83 e0 02             	and    eax,0x2
c0026e4a:	48                   	dec    eax
c0026e4b:	83 c4 0c             	add    esp,0xc
c0026e4e:	5b                   	pop    ebx
c0026e4f:	5e                   	pop    esi
c0026e50:	5f                   	pop    edi
c0026e51:	5d                   	pop    ebp
c0026e52:	c3                   	ret    

c0026e53 <__eqdf2>:
c0026e53:	55                   	push   ebp
c0026e54:	89 e5                	mov    ebp,esp
c0026e56:	50                   	push   eax
c0026e57:	6a 01                	push   0x1
c0026e59:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e5c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e65:	e8 fb fe ff ff       	call   c0026d65 <__cmpdf2>
c0026e6a:	83 c4 18             	add    esp,0x18
c0026e6d:	c9                   	leave  
c0026e6e:	c3                   	ret    

c0026e6f <__nedf2>:
c0026e6f:	eb e2                	jmp    c0026e53 <__eqdf2>

c0026e71 <__gtdf2>:
c0026e71:	55                   	push   ebp
c0026e72:	89 e5                	mov    ebp,esp
c0026e74:	50                   	push   eax
c0026e75:	6a ff                	push   0xffffffff
c0026e77:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e7a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e83:	e8 dd fe ff ff       	call   c0026d65 <__cmpdf2>
c0026e88:	83 c4 18             	add    esp,0x18
c0026e8b:	c9                   	leave  
c0026e8c:	c3                   	ret    

c0026e8d <__gedf2>:
c0026e8d:	eb e2                	jmp    c0026e71 <__gtdf2>

c0026e8f <__ltdf2>:
c0026e8f:	eb c2                	jmp    c0026e53 <__eqdf2>

c0026e91 <__ledf2>:
c0026e91:	eb c0                	jmp    c0026e53 <__eqdf2>

c0026e93 <__truncdfsf2>:
c0026e93:	55                   	push   ebp
c0026e94:	89 e5                	mov    ebp,esp
c0026e96:	57                   	push   edi
c0026e97:	56                   	push   esi
c0026e98:	53                   	push   ebx
c0026e99:	83 ec 0c             	sub    esp,0xc
c0026e9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026e9f:	89 d1                	mov    ecx,edx
c0026ea1:	c1 f9 14             	sar    ecx,0x14
c0026ea4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ea7:	89 df                	mov    edi,ebx
c0026ea9:	c1 e7 0b             	shl    edi,0xb
c0026eac:	89 d0                	mov    eax,edx
c0026eae:	c1 e0 0b             	shl    eax,0xb
c0026eb1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026eb6:	c1 eb 15             	shr    ebx,0x15
c0026eb9:	09 d8                	or     eax,ebx
c0026ebb:	89 cb                	mov    ebx,ecx
c0026ebd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026ec3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026ec9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026ecf:	0f 86 9e 00 00 00    	jbe    c0026f73 <__truncdfsf2+0xe0>
c0026ed5:	85 db                	test   ebx,ebx
c0026ed7:	75 0a                	jne    c0026ee3 <__truncdfsf2+0x50>
c0026ed9:	c1 fa 17             	sar    edx,0x17
c0026edc:	30 d2                	xor    dl,dl
c0026ede:	e9 84 00 00 00       	jmp    c0026f67 <__truncdfsf2+0xd4>
c0026ee3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026ee9:	83 fe 83             	cmp    esi,0xffffff83
c0026eec:	7d 4b                	jge    c0026f39 <__truncdfsf2+0xa6>
c0026eee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026ef3:	29 f1                	sub    ecx,esi
c0026ef5:	83 f9 1f             	cmp    ecx,0x1f
c0026ef8:	7f 6b                	jg     c0026f65 <__truncdfsf2+0xd2>
c0026efa:	0d 00 00 00 80       	or     eax,0x80000000
c0026eff:	89 c3                	mov    ebx,eax
c0026f01:	d3 eb                	shr    ebx,cl
c0026f03:	be 01 00 00 00       	mov    esi,0x1
c0026f08:	d3 e6                	shl    esi,cl
c0026f0a:	4e                   	dec    esi
c0026f0b:	21 f0                	and    eax,esi
c0026f0d:	09 f8                	or     eax,edi
c0026f0f:	0f 95 c0             	setne  al
c0026f12:	0f b6 c0             	movzx  eax,al
c0026f15:	09 c3                	or     ebx,eax
c0026f17:	89 d9                	mov    ecx,ebx
c0026f19:	c1 e9 08             	shr    ecx,0x8
c0026f1c:	f6 c3 7f             	test   bl,0x7f
c0026f1f:	0f 95 c0             	setne  al
c0026f22:	09 c8                	or     eax,ecx
c0026f24:	83 e0 01             	and    eax,0x1
c0026f27:	c1 eb 07             	shr    ebx,0x7
c0026f2a:	21 c3                	and    ebx,eax
c0026f2c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026f32:	09 d1                	or     ecx,edx
c0026f34:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026f37:	eb 76                	jmp    c0026faf <__truncdfsf2+0x11c>
c0026f39:	83 c6 80             	add    esi,0xffffff80
c0026f3c:	7e 1d                	jle    c0026f5b <__truncdfsf2+0xc8>
c0026f3e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026f44:	75 0b                	jne    c0026f51 <__truncdfsf2+0xbe>
c0026f46:	09 f8                	or     eax,edi
c0026f48:	74 09                	je     c0026f53 <__truncdfsf2+0xc0>
c0026f4a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026f4f:	eb 02                	jmp    c0026f53 <__truncdfsf2+0xc0>
c0026f51:	31 c0                	xor    eax,eax
c0026f53:	c1 fa 17             	sar    edx,0x17
c0026f56:	80 ca ff             	or     dl,0xff
c0026f59:	eb 0e                	jmp    c0026f69 <__truncdfsf2+0xd6>
c0026f5b:	c1 fa 1f             	sar    edx,0x1f
c0026f5e:	c1 e2 08             	shl    edx,0x8
c0026f61:	09 ca                	or     edx,ecx
c0026f63:	eb 04                	jmp    c0026f69 <__truncdfsf2+0xd6>
c0026f65:	31 d2                	xor    edx,edx
c0026f67:	31 c0                	xor    eax,eax
c0026f69:	c1 e2 17             	shl    edx,0x17
c0026f6c:	c1 e8 08             	shr    eax,0x8
c0026f6f:	09 d0                	or     eax,edx
c0026f71:	eb 3c                	jmp    c0026faf <__truncdfsf2+0x11c>
c0026f73:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026f79:	89 ca                	mov    edx,ecx
c0026f7b:	c1 fa 0b             	sar    edx,0xb
c0026f7e:	c1 e2 08             	shl    edx,0x8
c0026f81:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026f84:	31 db                	xor    ebx,ebx
c0026f86:	85 ff                	test   edi,edi
c0026f88:	0f 95 c3             	setne  bl
c0026f8b:	09 d8                	or     eax,ebx
c0026f8d:	89 c3                	mov    ebx,eax
c0026f8f:	c1 eb 08             	shr    ebx,0x8
c0026f92:	a8 7f                	test   al,0x7f
c0026f94:	0f 95 c2             	setne  dl
c0026f97:	89 d6                	mov    esi,edx
c0026f99:	09 de                	or     esi,ebx
c0026f9b:	83 e6 01             	and    esi,0x1
c0026f9e:	c1 e8 07             	shr    eax,0x7
c0026fa1:	21 f0                	and    eax,esi
c0026fa3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026fa6:	09 ca                	or     edx,ecx
c0026fa8:	c1 e2 17             	shl    edx,0x17
c0026fab:	09 da                	or     edx,ebx
c0026fad:	01 d0                	add    eax,edx
c0026faf:	83 c4 0c             	add    esp,0xc
c0026fb2:	5b                   	pop    ebx
c0026fb3:	5e                   	pop    esi
c0026fb4:	5f                   	pop    edi
c0026fb5:	5d                   	pop    ebp
c0026fb6:	c3                   	ret    

c0026fb7 <__extendsfdf2>:
c0026fb7:	55                   	push   ebp
c0026fb8:	89 e5                	mov    ebp,esp
c0026fba:	57                   	push   edi
c0026fbb:	56                   	push   esi
c0026fbc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fbf:	89 d1                	mov    ecx,edx
c0026fc1:	c1 f9 17             	sar    ecx,0x17
c0026fc4:	c1 e2 08             	shl    edx,0x8
c0026fc7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fcd:	89 c8                	mov    eax,ecx
c0026fcf:	80 e4 f8             	and    ah,0xf8
c0026fd2:	8d 71 01             	lea    esi,[ecx+0x1]
c0026fd5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026fdb:	75 27                	jne    c0027004 <__extendsfdf2+0x4d>
c0026fdd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026fe3:	75 18                	jne    c0026ffd <__extendsfdf2+0x46>
c0026fe5:	85 d2                	test   edx,edx
c0026fe7:	74 20                	je     c0027009 <__extendsfdf2+0x52>
c0026fe9:	41                   	inc    ecx
c0026fea:	01 d2                	add    edx,edx
c0026fec:	79 fb                	jns    c0026fe9 <__extendsfdf2+0x32>
c0026fee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ff4:	29 c8                	sub    eax,ecx
c0026ff6:	05 81 03 00 00       	add    eax,0x381
c0026ffb:	eb 0c                	jmp    c0027009 <__extendsfdf2+0x52>
c0026ffd:	05 00 07 00 00       	add    eax,0x700
c0027002:	eb 05                	jmp    c0027009 <__extendsfdf2+0x52>
c0027004:	05 80 03 00 00       	add    eax,0x380
c0027009:	c1 e0 14             	shl    eax,0x14
c002700c:	89 c1                	mov    ecx,eax
c002700e:	89 d0                	mov    eax,edx
c0027010:	c1 e8 0b             	shr    eax,0xb
c0027013:	09 c1                	or     ecx,eax
c0027015:	c1 e2 15             	shl    edx,0x15
c0027018:	89 d0                	mov    eax,edx
c002701a:	89 ca                	mov    edx,ecx
c002701c:	5e                   	pop    esi
c002701d:	5f                   	pop    edi
c002701e:	5d                   	pop    ebp
c002701f:	c3                   	ret    

c0027020 <fabs>:
c0027020:	83 ec 0c             	sub    esp,0xc
c0027023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027027:	89 04 24             	mov    DWORD PTR [esp],eax
c002702a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002702e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027037:	dd 04 24             	fld    QWORD PTR [esp]
c002703a:	83 c4 0c             	add    esp,0xc
c002703d:	c3                   	ret    
c002703e:	66 90                	xchg   ax,ax

c0027040 <lrint>:
c0027040:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027044:	83 ec 04             	sub    esp,0x4
c0027047:	db 1c 24             	fistp  DWORD PTR [esp]
c002704a:	58                   	pop    eax
c002704b:	c3                   	ret    

c002704c <lrintf>:
c002704c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027050:	83 ec 04             	sub    esp,0x4
c0027053:	db 1c 24             	fistp  DWORD PTR [esp]
c0027056:	58                   	pop    eax
c0027057:	c3                   	ret    

Disassembly of section .init:

c0027058 <_init>:
c0027058:	55                   	push   ebp
c0027059:	89 e5                	mov    ebp,esp
c002705b:	e8 b8 90 fd ff       	call   c0000118 <frame_dummy>
c0027060:	e8 63 e0 ff ff       	call   c00250c8 <__do_global_ctors_aux>
c0027065:	5d                   	pop    ebp
c0027066:	c3                   	ret    

Disassembly of section .fini:

c0027067 <_fini>:
c0027067:	55                   	push   ebp
c0027068:	89 e5                	mov    ebp,esp
c002706a:	e8 39 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002706f:	5d                   	pop    ebp
c0027070:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027072 <Computer::~Computer()>:
c0027072:	83 ec 0c             	sub    esp,0xc
c0027075:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c002707a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707e:	89 10                	mov    DWORD PTR [eax],edx
c0027080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027084:	83 ec 0c             	sub    esp,0xc
c0027087:	50                   	push   eax
c0027088:	e8 bd c9 fe ff       	call   c0013a4a <Device::~Device()>
c002708d:	83 c4 10             	add    esp,0x10
c0027090:	90                   	nop
c0027091:	83 c4 0c             	add    esp,0xc
c0027094:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027096 <Computer::~Computer()>:
c0027096:	83 ec 0c             	sub    esp,0xc
c0027099:	83 ec 0c             	sub    esp,0xc
c002709c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270a0:	e8 cd ff ff ff       	call   c0027072 <Computer::~Computer()>
c00270a5:	83 c4 10             	add    esp,0x10
c00270a8:	83 ec 08             	sub    esp,0x8
c00270ab:	68 ec 01 00 00       	push   0x1ec
c00270b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270b4:	e8 f0 b5 fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00270b9:	83 c4 10             	add    esp,0x10
c00270bc:	83 c4 0c             	add    esp,0xc
c00270bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00270c0 <idleCommon()>:
c00270c0:	83 ec 0c             	sub    esp,0xc
c00270c3:	e8 6a 5c ff ff       	call   c001cd32 <lockScheduler()>
c00270c8:	e8 a1 5f ff ff       	call   c001d06e <schedule()>
c00270cd:	83 c4 0c             	add    esp,0xc
c00270d0:	e9 5f 5c ff ff       	jmp    c001cd34 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00270d6 <LinkedList<UnixFile>::~LinkedList()>:
c00270d6:	90                   	nop
c00270d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00270d8 <LinkedList<UnixFile>::LinkedList()>:
c00270d8:	83 ec 0c             	sub    esp,0xc
c00270db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00270f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027109:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027114:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002711b:	83 ec 0c             	sub    esp,0xc
c002711e:	68 86 8d 02 c0       	push   0xc0028d86
c0027123:	e8 61 b6 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0027128:	83 c4 10             	add    esp,0x10
c002712b:	90                   	nop
c002712c:	83 c4 0c             	add    esp,0xc
c002712f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027130 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027130:	83 ec 0c             	sub    esp,0xc
c0027133:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027138:	75 10                	jne    c002714a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002713a:	83 ec 0c             	sub    esp,0xc
c002713d:	68 a0 8d 02 c0       	push   0xc0028da0
c0027142:	e8 5c 27 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027147:	83 c4 10             	add    esp,0x10
c002714a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027150:	85 c0                	test   eax,eax
c0027152:	74 34                	je     c0027188 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027158:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002715b:	85 c0                	test   eax,eax
c002715d:	74 29                	je     c0027188 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002715f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027163:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027166:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002716a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002716d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027171:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027175:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002717c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002717f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027186:	eb 65                	jmp    c00271ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002718c:	8b 00                	mov    eax,DWORD PTR [eax]
c002718e:	85 c0                	test   eax,eax
c0027190:	75 4b                	jne    c00271dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027199:	85 c0                	test   eax,eax
c002719b:	75 40                	jne    c00271dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002719d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271a5:	89 10                	mov    DWORD PTR [eax],edx
c00271a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00271b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271c7:	85 c0                	test   eax,eax
c00271c9:	74 22                	je     c00271ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271cb:	83 ec 0c             	sub    esp,0xc
c00271ce:	68 c2 8d 02 c0       	push   0xc0028dc2
c00271d3:	e8 cb 26 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00271d8:	83 c4 10             	add    esp,0x10
c00271db:	eb 10                	jmp    c00271ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271dd:	83 ec 0c             	sub    esp,0xc
c00271e0:	68 cc 8d 02 c0       	push   0xc0028dcc
c00271e5:	e8 b9 26 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00271ea:	83 c4 10             	add    esp,0x10
c00271ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271f4:	8d 50 01             	lea    edx,[eax+0x1]
c00271f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271fe:	90                   	nop
c00271ff:	83 c4 0c             	add    esp,0xc
c0027202:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027204 <LinkedList<UnixFile>::getFirstElement()>:
c0027204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027208:	8b 00                	mov    eax,DWORD PTR [eax]
c002720a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002720c <LinkedList<UnixFile>::removeFirst()>:
c002720c:	83 ec 0c             	sub    esp,0xc
c002720f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027213:	8b 00                	mov    eax,DWORD PTR [eax]
c0027215:	85 c0                	test   eax,eax
c0027217:	75 12                	jne    c002722b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027219:	83 ec 0c             	sub    esp,0xc
c002721c:	68 d8 8d 02 c0       	push   0xc0028dd8
c0027221:	e8 7d 26 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027226:	83 c4 10             	add    esp,0x10
c0027229:	eb 7e                	jmp    c00272a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002722b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027232:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027235:	85 c0                	test   eax,eax
c0027237:	74 10                	je     c0027249 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027239:	83 ec 0c             	sub    esp,0xc
c002723c:	68 23 8e 02 c0       	push   0xc0028e23
c0027241:	e8 5d 26 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027246:	83 c4 10             	add    esp,0x10
c0027249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002724d:	8b 00                	mov    eax,DWORD PTR [eax]
c002724f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027252:	85 c0                	test   eax,eax
c0027254:	75 33                	jne    c0027289 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027264:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002726b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027272:	83 f8 01             	cmp    eax,0x1
c0027275:	74 21                	je     c0027298 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027277:	83 ec 0c             	sub    esp,0xc
c002727a:	68 fc 8d 02 c0       	push   0xc0028dfc
c002727f:	e8 1f 26 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027284:	83 c4 10             	add    esp,0x10
c0027287:	eb 0f                	jmp    c0027298 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002728d:	8b 00                	mov    eax,DWORD PTR [eax]
c002728f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027296:	89 10                	mov    DWORD PTR [eax],edx
c0027298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002729f:	8d 50 ff             	lea    edx,[eax-0x1]
c00272a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00272a9:	83 c4 0c             	add    esp,0xc
c00272ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00272ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00272ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00272b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00272b6 <DriverlessDevice::~DriverlessDevice()>:
c00272b6:	ba e4 94 02 c0       	mov    edx,0xc00294e4
c00272bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272bf:	89 10                	mov    DWORD PTR [eax],edx
c00272c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272c5:	50                   	push   eax
c00272c6:	e8 7f c7 fe ff       	call   c0013a4a <Device::~Device()>
c00272cb:	83 c4 04             	add    esp,0x4
c00272ce:	90                   	nop
c00272cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00272d0 <DriverlessDevice::~DriverlessDevice()>:
c00272d0:	83 ec 0c             	sub    esp,0xc
c00272d3:	83 ec 0c             	sub    esp,0xc
c00272d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272da:	e8 d7 ff ff ff       	call   c00272b6 <DriverlessDevice::~DriverlessDevice()>
c00272df:	83 c4 10             	add    esp,0x10
c00272e2:	83 ec 08             	sub    esp,0x8
c00272e5:	68 58 01 00 00       	push   0x158
c00272ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ee:	e8 b6 b3 fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00272f3:	83 c4 10             	add    esp,0x10
c00272f6:	83 c4 0c             	add    esp,0xc
c00272f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00272fa <LinkedList<Device>::addElement(Device*)>:
c00272fa:	83 ec 0c             	sub    esp,0xc
c00272fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027302:	75 10                	jne    c0027314 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027304:	83 ec 0c             	sub    esp,0xc
c0027307:	68 a0 8d 02 c0       	push   0xc0028da0
c002730c:	e8 92 25 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027311:	83 c4 10             	add    esp,0x10
c0027314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027318:	8b 00                	mov    eax,DWORD PTR [eax]
c002731a:	85 c0                	test   eax,eax
c002731c:	74 3a                	je     c0027358 <LinkedList<Device>::addElement(Device*)+0x5e>
c002731e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027322:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027325:	85 c0                	test   eax,eax
c0027327:	74 2f                	je     c0027358 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002732d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027330:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027334:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002733a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027342:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027349:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002734c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027356:	eb 68                	jmp    c00273c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002735c:	8b 00                	mov    eax,DWORD PTR [eax]
c002735e:	85 c0                	test   eax,eax
c0027360:	75 4e                	jne    c00273b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027369:	85 c0                	test   eax,eax
c002736b:	75 43                	jne    c00273b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002736d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027371:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027375:	89 10                	mov    DWORD PTR [eax],edx
c0027377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002737b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002737f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027386:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027389:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027397:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002739a:	85 c0                	test   eax,eax
c002739c:	74 22                	je     c00273c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002739e:	83 ec 0c             	sub    esp,0xc
c00273a1:	68 c2 8d 02 c0       	push   0xc0028dc2
c00273a6:	e8 f8 24 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00273ab:	83 c4 10             	add    esp,0x10
c00273ae:	eb 10                	jmp    c00273c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273b0:	83 ec 0c             	sub    esp,0xc
c00273b3:	68 cc 8d 02 c0       	push   0xc0028dcc
c00273b8:	e8 e6 24 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00273bd:	83 c4 10             	add    esp,0x10
c00273c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273c7:	8d 50 01             	lea    edx,[eax+0x1]
c00273ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273d1:	90                   	nop
c00273d2:	83 c4 0c             	add    esp,0xc
c00273d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00273d6 <LinkedList<Device>::LinkedList()>:
c00273d6:	83 ec 0c             	sub    esp,0xc
c00273d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027407:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002740e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027412:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027419:	83 ec 0c             	sub    esp,0xc
c002741c:	68 86 8d 02 c0       	push   0xc0028d86
c0027421:	e8 63 b3 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0027426:	83 c4 10             	add    esp,0x10
c0027429:	90                   	nop
c002742a:	83 c4 0c             	add    esp,0xc
c002742d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002742e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002742e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027432:	8b 00                	mov    eax,DWORD PTR [eax]
c0027434:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027436 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002743a:	8b 00                	mov    eax,DWORD PTR [eax]
c002743c:	85 c0                	test   eax,eax
c002743e:	75 0e                	jne    c002744e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027447:	85 c0                	test   eax,eax
c0027449:	75 03                	jne    c002744e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002744b:	b0 01                	mov    al,0x1
c002744d:	c3                   	ret    
c002744e:	b0 00                	mov    al,0x0
c0027450:	90                   	nop
c0027451:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027452 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027452:	83 ec 0c             	sub    esp,0xc
c0027455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027459:	8b 00                	mov    eax,DWORD PTR [eax]
c002745b:	85 c0                	test   eax,eax
c002745d:	75 15                	jne    c0027474 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002745f:	83 ec 0c             	sub    esp,0xc
c0027462:	68 d8 8d 02 c0       	push   0xc0028dd8
c0027467:	e8 37 24 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c002746c:	83 c4 10             	add    esp,0x10
c002746f:	e9 88 00 00 00       	jmp    c00274fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002747b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002747e:	85 c0                	test   eax,eax
c0027480:	0f 95 c0             	setne  al
c0027483:	84 c0                	test   al,al
c0027485:	74 10                	je     c0027497 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027487:	83 ec 0c             	sub    esp,0xc
c002748a:	68 23 8e 02 c0       	push   0xc0028e23
c002748f:	e8 0f 24 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027494:	83 c4 10             	add    esp,0x10
c0027497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749b:	8b 00                	mov    eax,DWORD PTR [eax]
c002749d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00274a0:	85 c0                	test   eax,eax
c00274a2:	0f 94 c0             	sete   al
c00274a5:	84 c0                	test   al,al
c00274a7:	74 33                	je     c00274dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00274a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00274be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274c5:	83 f8 01             	cmp    eax,0x1
c00274c8:	74 21                	je     c00274eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274ca:	83 ec 0c             	sub    esp,0xc
c00274cd:	68 fc 8d 02 c0       	push   0xc0028dfc
c00274d2:	e8 cc 23 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00274d7:	83 c4 10             	add    esp,0x10
c00274da:	eb 0f                	jmp    c00274eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00274e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00274e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e9:	89 10                	mov    DWORD PTR [eax],edx
c00274eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00274f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274fc:	83 c4 0c             	add    esp,0xc
c00274ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027500 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027500:	83 ec 0c             	sub    esp,0xc
c0027503:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027508:	75 10                	jne    c002751a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002750a:	83 ec 0c             	sub    esp,0xc
c002750d:	68 a0 8d 02 c0       	push   0xc0028da0
c0027512:	e8 8c 23 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c0027517:	83 c4 10             	add    esp,0x10
c002751a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002751e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027520:	85 c0                	test   eax,eax
c0027522:	74 34                	je     c0027558 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002752b:	85 c0                	test   eax,eax
c002752d:	74 29                	je     c0027558 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002752f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027533:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027536:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002753a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002753d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027541:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027545:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002754c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002754f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027556:	eb 65                	jmp    c00275bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755c:	8b 00                	mov    eax,DWORD PTR [eax]
c002755e:	85 c0                	test   eax,eax
c0027560:	75 4b                	jne    c00275ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027569:	85 c0                	test   eax,eax
c002756b:	75 40                	jne    c00275ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002756d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027571:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027575:	89 10                	mov    DWORD PTR [eax],edx
c0027577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002757b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002757f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027589:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027594:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027597:	85 c0                	test   eax,eax
c0027599:	74 22                	je     c00275bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002759b:	83 ec 0c             	sub    esp,0xc
c002759e:	68 c2 8d 02 c0       	push   0xc0028dc2
c00275a3:	e8 fb 22 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00275a8:	83 c4 10             	add    esp,0x10
c00275ab:	eb 10                	jmp    c00275bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275ad:	83 ec 0c             	sub    esp,0xc
c00275b0:	68 cc 8d 02 c0       	push   0xc0028dcc
c00275b5:	e8 e9 22 ff ff       	call   c00198a3 <Krnl::panic(char const*)>
c00275ba:	83 c4 10             	add    esp,0x10
c00275bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275c4:	8d 50 01             	lea    edx,[eax+0x1]
c00275c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275ce:	90                   	nop
c00275cf:	83 c4 0c             	add    esp,0xc
c00275d2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00275d4 <ACPI::~ACPI()>:
c00275d4:	83 ec 0c             	sub    esp,0xc
c00275d7:	ba 88 9d 02 c0       	mov    edx,0xc0029d88
c00275dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e0:	89 10                	mov    DWORD PTR [eax],edx
c00275e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e6:	83 ec 0c             	sub    esp,0xc
c00275e9:	50                   	push   eax
c00275ea:	e8 5b c4 fe ff       	call   c0013a4a <Device::~Device()>
c00275ef:	83 c4 10             	add    esp,0x10
c00275f2:	90                   	nop
c00275f3:	83 c4 0c             	add    esp,0xc
c00275f6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00275f8 <ACPI::~ACPI()>:
c00275f8:	83 ec 0c             	sub    esp,0xc
c00275fb:	83 ec 0c             	sub    esp,0xc
c00275fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027602:	e8 cd ff ff ff       	call   c00275d4 <ACPI::~ACPI()>
c0027607:	83 c4 10             	add    esp,0x10
c002760a:	83 ec 08             	sub    esp,0x8
c002760d:	68 68 22 00 00       	push   0x2268
c0027612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027616:	e8 8e b0 fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c002761b:	83 c4 10             	add    esp,0x10
c002761e:	83 c4 0c             	add    esp,0xc
c0027621:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027622 <CPU::~CPU()>:
c0027622:	83 ec 0c             	sub    esp,0xc
c0027625:	ba 78 a1 02 c0       	mov    edx,0xc002a178
c002762a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002762e:	89 10                	mov    DWORD PTR [eax],edx
c0027630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027634:	83 ec 0c             	sub    esp,0xc
c0027637:	50                   	push   eax
c0027638:	e8 0d c4 fe ff       	call   c0013a4a <Device::~Device()>
c002763d:	83 c4 10             	add    esp,0x10
c0027640:	90                   	nop
c0027641:	83 c4 0c             	add    esp,0xc
c0027644:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027646 <CPU::~CPU()>:
c0027646:	83 ec 0c             	sub    esp,0xc
c0027649:	83 ec 0c             	sub    esp,0xc
c002764c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027650:	e8 cd ff ff ff       	call   c0027622 <CPU::~CPU()>
c0027655:	83 c4 10             	add    esp,0x10
c0027658:	83 ec 08             	sub    esp,0x8
c002765b:	68 98 11 00 00       	push   0x1198
c0027660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027664:	e8 40 b0 fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027669:	83 c4 10             	add    esp,0x10
c002766c:	83 c4 0c             	add    esp,0xc
c002766f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027670 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027670:	90                   	nop
c0027671:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027672 <ThreadControlBlock::ThreadControlBlock()>:
c0027672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027676:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002767d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027681:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002768c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027697:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002769e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276a2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00276a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276aa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00276ae:	90                   	nop
c00276af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00276b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00276b0:	83 ec 0c             	sub    esp,0xc
c00276b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276f3:	83 ec 0c             	sub    esp,0xc
c00276f6:	68 86 8d 02 c0       	push   0xc0028d86
c00276fb:	e8 89 b0 fe ff       	call   c0012789 <Dbg::kprintf(char const*, ...)>
c0027700:	83 c4 10             	add    esp,0x10
c0027703:	90                   	nop
c0027704:	83 c4 0c             	add    esp,0xc
c0027707:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027708 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002770c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002770f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027710 <Vm::_FPUState::_FPUState()>:
c0027710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027714:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002771b:	90                   	nop
c002771c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002771e <PCI::~PCI()>:
c002771e:	83 ec 0c             	sub    esp,0xc
c0027721:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c0027726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002772a:	89 10                	mov    DWORD PTR [eax],edx
c002772c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027730:	83 ec 0c             	sub    esp,0xc
c0027733:	50                   	push   eax
c0027734:	e8 21 bd fe ff       	call   c001345a <Bus::~Bus()>
c0027739:	83 c4 10             	add    esp,0x10
c002773c:	90                   	nop
c002773d:	83 c4 0c             	add    esp,0xc
c0027740:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027742 <PCI::~PCI()>:
c0027742:	83 ec 0c             	sub    esp,0xc
c0027745:	83 ec 0c             	sub    esp,0xc
c0027748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002774c:	e8 cd ff ff ff       	call   c002771e <PCI::~PCI()>
c0027751:	83 c4 10             	add    esp,0x10
c0027754:	83 ec 08             	sub    esp,0x8
c0027757:	68 58 01 00 00       	push   0x158
c002775c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027760:	e8 44 af fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027765:	83 c4 10             	add    esp,0x10
c0027768:	83 c4 0c             	add    esp,0xc
c002776b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002776c <IDE::~IDE()>:
c002776c:	83 ec 0c             	sub    esp,0xc
c002776f:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0027774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027778:	89 10                	mov    DWORD PTR [eax],edx
c002777a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002777e:	83 ec 0c             	sub    esp,0xc
c0027781:	50                   	push   eax
c0027782:	e8 b3 c7 fe ff       	call   c0013f3a <HardDiskController::~HardDiskController()>
c0027787:	83 c4 10             	add    esp,0x10
c002778a:	90                   	nop
c002778b:	83 c4 0c             	add    esp,0xc
c002778e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027790 <IDE::~IDE()>:
c0027790:	83 ec 0c             	sub    esp,0xc
c0027793:	83 ec 0c             	sub    esp,0xc
c0027796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002779a:	e8 cd ff ff ff       	call   c002776c <IDE::~IDE()>
c002779f:	83 c4 10             	add    esp,0x10
c00277a2:	83 ec 08             	sub    esp,0x8
c00277a5:	68 70 02 00 00       	push   0x270
c00277aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277ae:	e8 f6 ae fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00277b3:	83 c4 10             	add    esp,0x10
c00277b6:	83 c4 0c             	add    esp,0xc
c00277b9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00277ba <SATABus::~SATABus()>:
c00277ba:	83 ec 0c             	sub    esp,0xc
c00277bd:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c00277c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277c6:	89 10                	mov    DWORD PTR [eax],edx
c00277c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277cc:	83 ec 0c             	sub    esp,0xc
c00277cf:	50                   	push   eax
c00277d0:	e8 65 c7 fe ff       	call   c0013f3a <HardDiskController::~HardDiskController()>
c00277d5:	83 c4 10             	add    esp,0x10
c00277d8:	90                   	nop
c00277d9:	83 c4 0c             	add    esp,0xc
c00277dc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00277de <SATABus::~SATABus()>:
c00277de:	83 ec 0c             	sub    esp,0xc
c00277e1:	83 ec 0c             	sub    esp,0xc
c00277e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277e8:	e8 cd ff ff ff       	call   c00277ba <SATABus::~SATABus()>
c00277ed:	83 c4 10             	add    esp,0x10
c00277f0:	83 ec 08             	sub    esp,0x8
c00277f3:	68 64 01 00 00       	push   0x164
c00277f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277fc:	e8 a8 ae fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027801:	83 c4 10             	add    esp,0x10
c0027804:	83 c4 0c             	add    esp,0xc
c0027807:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027808 <ATA::~ATA()>:
c0027808:	83 ec 0c             	sub    esp,0xc
c002780b:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c0027810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027814:	89 10                	mov    DWORD PTR [eax],edx
c0027816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002781a:	83 ec 0c             	sub    esp,0xc
c002781d:	50                   	push   eax
c002781e:	e8 f5 c7 fe ff       	call   c0014018 <PhysicalDisk::~PhysicalDisk()>
c0027823:	83 c4 10             	add    esp,0x10
c0027826:	90                   	nop
c0027827:	83 c4 0c             	add    esp,0xc
c002782a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002782c <ATA::~ATA()>:
c002782c:	83 ec 0c             	sub    esp,0xc
c002782f:	83 ec 0c             	sub    esp,0xc
c0027832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027836:	e8 cd ff ff ff       	call   c0027808 <ATA::~ATA()>
c002783b:	83 c4 10             	add    esp,0x10
c002783e:	83 ec 08             	sub    esp,0x8
c0027841:	68 7c 01 00 00       	push   0x17c
c0027846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002784a:	e8 5a ae fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c002784f:	83 c4 10             	add    esp,0x10
c0027852:	83 c4 0c             	add    esp,0xc
c0027855:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027856 <ATAPI::~ATAPI()>:
c0027856:	83 ec 0c             	sub    esp,0xc
c0027859:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c002785e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027862:	89 10                	mov    DWORD PTR [eax],edx
c0027864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027868:	83 ec 0c             	sub    esp,0xc
c002786b:	50                   	push   eax
c002786c:	e8 a7 c7 fe ff       	call   c0014018 <PhysicalDisk::~PhysicalDisk()>
c0027871:	83 c4 10             	add    esp,0x10
c0027874:	90                   	nop
c0027875:	83 c4 0c             	add    esp,0xc
c0027878:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002787a <ATAPI::~ATAPI()>:
c002787a:	83 ec 0c             	sub    esp,0xc
c002787d:	83 ec 0c             	sub    esp,0xc
c0027880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027884:	e8 cd ff ff ff       	call   c0027856 <ATAPI::~ATAPI()>
c0027889:	83 c4 10             	add    esp,0x10
c002788c:	83 ec 08             	sub    esp,0x8
c002788f:	68 80 01 00 00       	push   0x180
c0027894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027898:	e8 0c ae fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c002789d:	83 c4 10             	add    esp,0x10
c00278a0:	83 c4 0c             	add    esp,0xc
c00278a3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00278a4 <SATA::~SATA()>:
c00278a4:	83 ec 0c             	sub    esp,0xc
c00278a7:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c00278ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b0:	89 10                	mov    DWORD PTR [eax],edx
c00278b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b6:	83 ec 0c             	sub    esp,0xc
c00278b9:	50                   	push   eax
c00278ba:	e8 59 c7 fe ff       	call   c0014018 <PhysicalDisk::~PhysicalDisk()>
c00278bf:	83 c4 10             	add    esp,0x10
c00278c2:	90                   	nop
c00278c3:	83 c4 0c             	add    esp,0xc
c00278c6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00278c8 <SATA::~SATA()>:
c00278c8:	83 ec 0c             	sub    esp,0xc
c00278cb:	83 ec 0c             	sub    esp,0xc
c00278ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278d2:	e8 cd ff ff ff       	call   c00278a4 <SATA::~SATA()>
c00278d7:	83 c4 10             	add    esp,0x10
c00278da:	83 ec 08             	sub    esp,0x8
c00278dd:	68 74 01 00 00       	push   0x174
c00278e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278e6:	e8 be ad fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00278eb:	83 c4 10             	add    esp,0x10
c00278ee:	83 c4 0c             	add    esp,0xc
c00278f1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00278f2 <AVX::~AVX()>:
c00278f2:	83 ec 0c             	sub    esp,0xc
c00278f5:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c00278fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278fe:	89 10                	mov    DWORD PTR [eax],edx
c0027900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027904:	83 ec 0c             	sub    esp,0xc
c0027907:	50                   	push   eax
c0027908:	e8 8f c7 fe ff       	call   c001409c <FPU::~FPU()>
c002790d:	83 c4 10             	add    esp,0x10
c0027910:	90                   	nop
c0027911:	83 c4 0c             	add    esp,0xc
c0027914:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027916 <AVX::~AVX()>:
c0027916:	83 ec 0c             	sub    esp,0xc
c0027919:	83 ec 0c             	sub    esp,0xc
c002791c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027920:	e8 cd ff ff ff       	call   c00278f2 <AVX::~AVX()>
c0027925:	83 c4 10             	add    esp,0x10
c0027928:	83 ec 08             	sub    esp,0x8
c002792b:	68 58 01 00 00       	push   0x158
c0027930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027934:	e8 70 ad fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027939:	83 c4 10             	add    esp,0x10
c002793c:	83 c4 0c             	add    esp,0xc
c002793f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027940 <MMX::~MMX()>:
c0027940:	83 ec 0c             	sub    esp,0xc
c0027943:	ba 94 b5 02 c0       	mov    edx,0xc002b594
c0027948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002794c:	89 10                	mov    DWORD PTR [eax],edx
c002794e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027952:	83 ec 0c             	sub    esp,0xc
c0027955:	50                   	push   eax
c0027956:	e8 41 c7 fe ff       	call   c001409c <FPU::~FPU()>
c002795b:	83 c4 10             	add    esp,0x10
c002795e:	90                   	nop
c002795f:	83 c4 0c             	add    esp,0xc
c0027962:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027964 <MMX::~MMX()>:
c0027964:	83 ec 0c             	sub    esp,0xc
c0027967:	83 ec 0c             	sub    esp,0xc
c002796a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002796e:	e8 cd ff ff ff       	call   c0027940 <MMX::~MMX()>
c0027973:	83 c4 10             	add    esp,0x10
c0027976:	83 ec 08             	sub    esp,0x8
c0027979:	68 58 01 00 00       	push   0x158
c002797e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027982:	e8 22 ad fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027987:	83 c4 10             	add    esp,0x10
c002798a:	83 c4 0c             	add    esp,0xc
c002798d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002798e <SSE::~SSE()>:
c002798e:	83 ec 0c             	sub    esp,0xc
c0027991:	ba d4 b5 02 c0       	mov    edx,0xc002b5d4
c0027996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002799a:	89 10                	mov    DWORD PTR [eax],edx
c002799c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a0:	83 ec 0c             	sub    esp,0xc
c00279a3:	50                   	push   eax
c00279a4:	e8 f3 c6 fe ff       	call   c001409c <FPU::~FPU()>
c00279a9:	83 c4 10             	add    esp,0x10
c00279ac:	90                   	nop
c00279ad:	83 c4 0c             	add    esp,0xc
c00279b0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00279b2 <SSE::~SSE()>:
c00279b2:	83 ec 0c             	sub    esp,0xc
c00279b5:	83 ec 0c             	sub    esp,0xc
c00279b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279bc:	e8 cd ff ff ff       	call   c002798e <SSE::~SSE()>
c00279c1:	83 c4 10             	add    esp,0x10
c00279c4:	83 ec 08             	sub    esp,0x8
c00279c7:	68 58 01 00 00       	push   0x158
c00279cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279d0:	e8 d4 ac fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c00279d5:	83 c4 10             	add    esp,0x10
c00279d8:	83 c4 0c             	add    esp,0xc
c00279db:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00279dc <x87::~x87()>:
c00279dc:	83 ec 0c             	sub    esp,0xc
c00279df:	ba 14 b6 02 c0       	mov    edx,0xc002b614
c00279e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279e8:	89 10                	mov    DWORD PTR [eax],edx
c00279ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ee:	83 ec 0c             	sub    esp,0xc
c00279f1:	50                   	push   eax
c00279f2:	e8 a5 c6 fe ff       	call   c001409c <FPU::~FPU()>
c00279f7:	83 c4 10             	add    esp,0x10
c00279fa:	90                   	nop
c00279fb:	83 c4 0c             	add    esp,0xc
c00279fe:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027a00 <x87::~x87()>:
c0027a00:	83 ec 0c             	sub    esp,0xc
c0027a03:	83 ec 0c             	sub    esp,0xc
c0027a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a0a:	e8 cd ff ff ff       	call   c00279dc <x87::~x87()>
c0027a0f:	83 c4 10             	add    esp,0x10
c0027a12:	83 ec 08             	sub    esp,0x8
c0027a15:	68 58 01 00 00       	push   0x158
c0027a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a1e:	e8 86 ac fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027a23:	83 c4 10             	add    esp,0x10
c0027a26:	83 c4 0c             	add    esp,0xc
c0027a29:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027a2a <IOAPIC::~IOAPIC()>:
c0027a2a:	83 ec 0c             	sub    esp,0xc
c0027a2d:	ba 6c b7 02 c0       	mov    edx,0xc002b76c
c0027a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a36:	89 10                	mov    DWORD PTR [eax],edx
c0027a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a3c:	83 ec 0c             	sub    esp,0xc
c0027a3f:	50                   	push   eax
c0027a40:	e8 05 c0 fe ff       	call   c0013a4a <Device::~Device()>
c0027a45:	83 c4 10             	add    esp,0x10
c0027a48:	90                   	nop
c0027a49:	83 c4 0c             	add    esp,0xc
c0027a4c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027a4e <IOAPIC::~IOAPIC()>:
c0027a4e:	83 ec 0c             	sub    esp,0xc
c0027a51:	83 ec 0c             	sub    esp,0xc
c0027a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a58:	e8 cd ff ff ff       	call   c0027a2a <IOAPIC::~IOAPIC()>
c0027a5d:	83 c4 10             	add    esp,0x10
c0027a60:	83 ec 08             	sub    esp,0x8
c0027a63:	68 68 01 00 00       	push   0x168
c0027a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a6c:	e8 38 ac fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027a71:	83 c4 10             	add    esp,0x10
c0027a74:	83 c4 0c             	add    esp,0xc
c0027a77:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027a78 <APIC::~APIC()>:
c0027a78:	83 ec 0c             	sub    esp,0xc
c0027a7b:	ba 24 b7 02 c0       	mov    edx,0xc002b724
c0027a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a84:	89 10                	mov    DWORD PTR [eax],edx
c0027a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a8a:	83 ec 0c             	sub    esp,0xc
c0027a8d:	50                   	push   eax
c0027a8e:	e8 d3 ca fe ff       	call   c0014566 <InterruptController::~InterruptController()>
c0027a93:	83 c4 10             	add    esp,0x10
c0027a96:	90                   	nop
c0027a97:	83 c4 0c             	add    esp,0xc
c0027a9a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027a9c <APIC::~APIC()>:
c0027a9c:	83 ec 0c             	sub    esp,0xc
c0027a9f:	83 ec 0c             	sub    esp,0xc
c0027aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aa6:	e8 cd ff ff ff       	call   c0027a78 <APIC::~APIC()>
c0027aab:	83 c4 10             	add    esp,0x10
c0027aae:	83 ec 08             	sub    esp,0x8
c0027ab1:	68 58 21 00 00       	push   0x2158
c0027ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aba:	e8 ea ab fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027abf:	83 c4 10             	add    esp,0x10
c0027ac2:	83 c4 0c             	add    esp,0xc
c0027ac5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027ac6 <PIC::~PIC()>:
c0027ac6:	83 ec 0c             	sub    esp,0xc
c0027ac9:	ba bc b7 02 c0       	mov    edx,0xc002b7bc
c0027ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ad2:	89 10                	mov    DWORD PTR [eax],edx
c0027ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ad8:	83 ec 0c             	sub    esp,0xc
c0027adb:	50                   	push   eax
c0027adc:	e8 85 ca fe ff       	call   c0014566 <InterruptController::~InterruptController()>
c0027ae1:	83 c4 10             	add    esp,0x10
c0027ae4:	90                   	nop
c0027ae5:	83 c4 0c             	add    esp,0xc
c0027ae8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027aea <PIC::~PIC()>:
c0027aea:	83 ec 0c             	sub    esp,0xc
c0027aed:	83 ec 0c             	sub    esp,0xc
c0027af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027af4:	e8 cd ff ff ff       	call   c0027ac6 <PIC::~PIC()>
c0027af9:	83 c4 10             	add    esp,0x10
c0027afc:	83 ec 08             	sub    esp,0x8
c0027aff:	68 58 21 00 00       	push   0x2158
c0027b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b08:	e8 9c ab fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027b0d:	83 c4 10             	add    esp,0x10
c0027b10:	83 c4 0c             	add    esp,0xc
c0027b13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027b14 <APICTimer::~APICTimer()>:
c0027b14:	83 ec 0c             	sub    esp,0xc
c0027b17:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0027b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b20:	89 10                	mov    DWORD PTR [eax],edx
c0027b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b26:	83 ec 0c             	sub    esp,0xc
c0027b29:	50                   	push   eax
c0027b2a:	e8 37 e8 fe ff       	call   c0016366 <Timer::~Timer()>
c0027b2f:	83 c4 10             	add    esp,0x10
c0027b32:	90                   	nop
c0027b33:	83 c4 0c             	add    esp,0xc
c0027b36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027b38 <APICTimer::~APICTimer()>:
c0027b38:	83 ec 0c             	sub    esp,0xc
c0027b3b:	83 ec 0c             	sub    esp,0xc
c0027b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b42:	e8 cd ff ff ff       	call   c0027b14 <APICTimer::~APICTimer()>
c0027b47:	83 c4 10             	add    esp,0x10
c0027b4a:	83 ec 08             	sub    esp,0x8
c0027b4d:	68 60 01 00 00       	push   0x160
c0027b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b56:	e8 4e ab fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027b5b:	83 c4 10             	add    esp,0x10
c0027b5e:	83 c4 0c             	add    esp,0xc
c0027b61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027b62 <PIT::~PIT()>:
c0027b62:	83 ec 0c             	sub    esp,0xc
c0027b65:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c0027b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b6e:	89 10                	mov    DWORD PTR [eax],edx
c0027b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b74:	83 ec 0c             	sub    esp,0xc
c0027b77:	50                   	push   eax
c0027b78:	e8 e9 e7 fe ff       	call   c0016366 <Timer::~Timer()>
c0027b7d:	83 c4 10             	add    esp,0x10
c0027b80:	90                   	nop
c0027b81:	83 c4 0c             	add    esp,0xc
c0027b84:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027b86 <PIT::~PIT()>:
c0027b86:	83 ec 0c             	sub    esp,0xc
c0027b89:	83 ec 0c             	sub    esp,0xc
c0027b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b90:	e8 cd ff ff ff       	call   c0027b62 <PIT::~PIT()>
c0027b95:	83 c4 10             	add    esp,0x10
c0027b98:	83 ec 08             	sub    esp,0x8
c0027b9b:	68 5c 01 00 00       	push   0x15c
c0027ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ba4:	e8 00 ab fe ff       	call   c00126a9 <operator delete(void*, unsigned long)>
c0027ba9:	83 c4 10             	add    esp,0x10
c0027bac:	83 c4 0c             	add    esp,0xc
c0027baf:	c3                   	ret    
