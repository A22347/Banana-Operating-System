
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 85 02 00       	call   c00285f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 91 02 c0       	mov    ebx,0xc00291a2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 91 02 c0    	cmp    ebx,0xc00291b0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000049:	3d 18 d9 02 c0       	cmp    eax,0xc002d918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d9 02 c0       	push   0xc002d918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000075:	2d 18 d9 02 c0       	sub    eax,0xc002d918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d9 02 c0       	push   0xc002d918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 91 02 c0       	mov    ebx,0xc00291b8
c00000bb:	81 eb b4 91 02 c0    	sub    ebx,0xc00291b4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 91 02 c0       	mov    esi,0xc00291b4
c00000ca:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c df 02 c0       	mov    ds:0xc002df4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d9 02 c0       	push   0xc002d918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 df 02 c0 01 	mov    BYTE PTR ds:0xc002df48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 df 02 c0       	push   0xc002df50
c000012c:	68 18 d9 02 c0       	push   0xc002d918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 b1 d5 01 00       	call   c001d94c <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 25 29 01 00       	call   c0012cd8 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 8f d5 01 00       	call   c001d94c <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 dd d9 01 00       	call   c001ddb9 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 8b df 01 00       	call   c001e370 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e3 02 c0 	lgdtd  ds:0xc002e390
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 02 46 01 00       	call   c0014bdb <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 c0 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e40],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 c0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e40],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 c0 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e40],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 c0 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e40],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 c0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e40],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df80
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd207c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd207c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfbc
c0000e60:	c7 42 0c b4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfb4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 df 02 c0 02 	test   BYTE PTR ds:0xc002df80,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd207c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd207c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 df 02 c0 	lea    edx,[eax*8-0x3ffd204c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc0
c00011e2:	81 fb b4 df 02 c0    	cmp    ebx,0xc002dfb4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 df 02 c0       	cmp    eax,0xc002dfb4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc df 02 c0       	mov    ds:0xc002dfbc,eax
c000121e:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001223:	a3 b0 df 02 c0       	mov    ds:0xc002dfb0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001231:	c7 40 0c b4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfb4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 df 02 c0 	lea    ebp,[edx*4-0x3ffd2088]
c0001282:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 df 02 c0 	lea    ecx,[edx*4-0x3ffd2080]
c000129d:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 df 02 c0 	lea    eax,[eax*8-0x3ffd204c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,ecx
c0001357:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c000135d:	c7 41 08 b4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfb4
c0001364:	c7 41 0c b4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfb4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac df 02 c0 	lea    edx,[ecx*8-0x3ffd2054]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac df 02 c0 	lea    edx,[eax*4-0x3ffd2054]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edi
c000142a:	89 3d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edi
c0001430:	c7 47 08 b4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfb4
c0001437:	c7 47 0c b4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfb4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 df 02 c0       	mov    edx,0xc002df80
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e2 02 c0    	push   DWORD PTR ds:0xc002e2dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e2 02 c0       	mov    eax,ds:0xc002e2dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd207c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e2 02 c0       	cmp    eax,0xc002e2ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 c4 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d3c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e2 02 c0    	mov    DWORD PTR ds:0xc002e2cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 3c f1 01 00       	jmp    c0020d68 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 6d f1 01 00       	jmp    c0020daf <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 95 f1 01 00       	jmp    c0020df6 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 18 4a 02 00       	call   c002695c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 e0 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c20]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 e0 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c20]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 98 c7 02 c0       	mov    edx,0xc002c798
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 0c 94 02 c0       	mov    edx,0xc002940c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ce0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e3 02 c0    	mov    ax,ds:0xc002e300
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e3 02 c0    	mov    ds:0xc002e300,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 15 38 02 00       	call   c002695c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 12 94 02 c0       	mov    eax,0xc0029412
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 60 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6ca0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 1b 94 02 c0       	mov    eax,0xc002941b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 e0 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c20]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 e0 21 02 00       	call   c002695c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba f0 92 02 c0       	mov    edx,0xc00292f0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ce0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 a7 0b 02 00       	call   c002695c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 8d 0b 02 00       	call   c002695c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 37 93 02 c0       	mov    eax,0xc0029337
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 30 93 02 c0       	mov    eax,0xc0029330
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 20 93 02 c0       	mov    esi,0xc0029320
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 d0 f2 01 00       	call   c002695c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 00 94 02 c0       	mov    edx,0xc0029400
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 00 93 02 c0       	mov    edx,0xc0029300
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 22 94 02 c0       	mov    edx,0xc0029422
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 2e 94 02 c0       	mov    edx,0xc002942e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 42 94 02 c0       	mov    edx,0xc0029442
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 60 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029760
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 60 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029760
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 60 95 02 c0       	mov    eax,0xc0029560
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 a0 94 02 c0       	mov    eax,0xc00294a0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 60 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ba0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 24 fc 01 00       	call   c002842f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 e7 fb 01 00       	call   c0028411 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 bb fb 01 00       	call   c002842f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 6e f2 01 00       	call   c0027b34 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 e8 fc 01 00       	call   c00285c0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 35 fb 01 00       	call   c002842f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 77 fa 01 00       	call   c002842f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 44 fa 01 00       	call   c0028411 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 31 f9 01 00       	call   c002842f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 f9 f8 01 00       	call   c0028411 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 60 98 02 c0       	mov    eax,0xc0029860
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 05 f7 01 00       	call   c002842f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ca f6 01 00       	call   c0028411 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 c0 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6340]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 da f3 01 00       	call   c00281c3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 58 ed 01 00       	call   c0027b60 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 14 f6 01 00       	call   c0028433 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 02 f7 01 00       	call   c0028557 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 ec ec 01 00       	call   c0027b60 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 97 f5 01 00       	call   c002842d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 78 f5 01 00       	call   c0028431 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 06 f7 01 00       	call   c00285e0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 b8 f2 01 00       	call   c00281c3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 36 ec 01 00       	call   c0027b60 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 f2 f4 01 00       	call   c0028433 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 e0 f5 01 00       	call   c0028557 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ca eb 01 00       	call   c0027b60 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 75 f4 01 00       	call   c002842d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 55 f4 01 00       	call   c0028431 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 e2 f5 01 00       	call   c00285e0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 90 f3 01 00       	call   c002842f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 4e f3 01 00       	call   c0028411 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 36 f3 01 00       	call   c002842f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 a8 f0 01 00       	call   c00281c3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 aa e3 01 00       	call   c00274e3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 0d ea 01 00       	call   c0027b60 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 5f f0 01 00       	call   c00281c3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 65 e3 01 00       	call   c00274e3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 34 f0 01 00       	call   c00281c3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 84 f2 01 00       	call   c002842d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 61 e9 01 00       	call   c0027b34 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 db f3 01 00       	call   c00285c0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 0a f2 01 00       	call   c0028411 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 05 e9 01 00       	call   c0027b34 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 83 ef 01 00       	call   c00281c3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 06 e9 01 00       	call   c0027b60 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 58 ef 01 00       	call   c00281c3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 bf eb 01 00       	call   c0027e44 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 3e e2 01 00       	call   c00274e3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 9e db 01 00       	call   c0026e78 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 75 f2 01 00       	call   c0028557 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 5e e8 01 00       	call   c0027b60 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 45 f2 01 00       	call   c0028557 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 b7 e1 01 00       	call   c00274e3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 f0 f0 01 00       	call   c0028433 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 d8 ea 01 00       	call   c0027e44 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 5e e1 01 00       	call   c00274e3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 44 f2 01 00       	call   c00285e0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 1e ee 01 00       	call   c00281c3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 75 e7 01 00       	call   c0027b34 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 54 f0 01 00       	call   c002842f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 ed e0 01 00       	call   c00274e3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 19 e7 01 00       	call   c0027b34 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 b3 f1 01 00       	call   c00285e0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 6c ed 01 00       	call   c00281c3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 e9 e6 01 00       	call   c0027b60 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 3c ed 01 00       	call   c00281c3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 42 e0 01 00       	call   c00274e3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 12 ed 01 00       	call   c00281c3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 64 ef 01 00       	call   c002842f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 3b e6 01 00       	call   c0027b34 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 b5 f0 01 00       	call   c00285c0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 e4 ee 01 00       	call   c0028411 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 de e5 01 00       	call   c0027b34 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 5c ec 01 00       	call   c00281c3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 df e5 01 00       	call   c0027b60 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 31 ec 01 00       	call   c00281c3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 98 e8 01 00       	call   c0027e44 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 17 df 01 00       	call   c00274e3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 67 d8 01 00       	call   c0026e78 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 3e ef 01 00       	call   c0028557 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 27 e5 01 00       	call   c0027b60 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 0e ef 01 00       	call   c0028557 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 80 de 01 00       	call   c00274e3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 b9 ed 01 00       	call   c0028433 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 a0 e7 01 00       	call   c0027e44 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 1f de 01 00       	call   c00274e3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 05 ef 01 00       	call   c00285e0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 df ea 01 00       	call   c00281c3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 36 e4 01 00       	call   c0027b34 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 15 ed 01 00       	call   c002842f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ae dd 01 00       	call   c00274e3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 da e3 01 00       	call   c0027b34 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 4f ea 01 00       	call   c00281c3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 55 dd 01 00       	call   c00274e3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 20 9d 02 c0       	mov    eax,0xc0029d20
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 34 9d 02 c0       	mov    eax,0xc0029d34
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ca e8 01 00       	call   c00281c3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 48 e2 01 00       	call   c0027b60 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 da d4 01 00       	call   c0026e78 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 b1 eb 01 00       	call   c0028557 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 9a e1 01 00       	call   c0027b60 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 7d eb 01 00       	call   c0028557 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ef da 01 00       	call   c00274e3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 4f eb 01 00       	call   c0028557 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 3e e1 01 00       	call   c0027b60 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 a7 da 01 00       	call   c00274e3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 c8 d3 01 00       	call   c0026e78 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 9f ea 01 00       	call   c0028557 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 88 e0 01 00       	call   c0027b60 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 6b ea 01 00       	call   c0028557 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 dd d9 01 00       	call   c00274e3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 3d ea 01 00       	call   c0028557 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 2c e0 01 00       	call   c0027b60 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 95 d9 01 00       	call   c00274e3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 73 d9 01 00       	call   c00274e3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 4f d2 01 00       	call   c0026e78 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 26 e9 01 00       	call   c0028557 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 0f df 01 00       	call   c0027b60 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 f2 e8 01 00       	call   c0028557 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 64 d8 01 00       	call   c00274e3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 c4 e8 01 00       	call   c0028557 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ad de 01 00       	call   c0027b60 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 16 d8 01 00       	call   c00274e3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 76 e8 01 00       	call   c0028557 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 5f de 01 00       	call   c0027b60 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 c8 d7 01 00       	call   c00274e3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 dd d0 01 00       	call   c0026e78 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 b4 e7 01 00       	call   c0028557 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 9d dd 01 00       	call   c0027b60 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 84 e7 01 00       	call   c0028557 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 f6 d6 01 00       	call   c00274e3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 56 e7 01 00       	call   c0028557 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 3f dd 01 00       	call   c0027b60 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 a8 d6 01 00       	call   c00274e3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 08 e7 01 00       	call   c0028557 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 f1 dc 01 00       	call   c0027b60 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 5a d6 01 00       	call   c00274e3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 2e d6 01 00       	call   c00274e3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 8b dc 01 00       	call   c0027b60 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 47 e5 01 00       	call   c0028433 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 d6 d5 01 00       	call   c00274e3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 33 dc 01 00       	call   c0027b60 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ef e4 01 00       	call   c0028433 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 69 ce 01 00       	call   c0026e78 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 40 e5 01 00       	call   c0028557 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 29 db 01 00       	call   c0027b60 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 0c e5 01 00       	call   c0028557 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 7e d4 01 00       	call   c00274e3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 de e4 01 00       	call   c0028557 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 c7 da 01 00       	call   c0027b60 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 30 d4 01 00       	call   c00274e3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 90 e4 01 00       	call   c0028557 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 79 da 01 00       	call   c0027b60 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 e2 d3 01 00       	call   c00274e3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 42 e4 01 00       	call   c0028557 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 2b da 01 00       	call   c0027b60 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 94 d3 01 00       	call   c00274e3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 f4 e3 01 00       	call   c0028557 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 dd d9 01 00       	call   c0027b60 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 46 d3 01 00       	call   c00274e3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 48 cc 01 00       	call   c0026e78 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 1f e3 01 00       	call   c0028557 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 08 d9 01 00       	call   c0027b60 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ef e2 01 00       	call   c0028557 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 61 d2 01 00       	call   c00274e3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 c1 e2 01 00       	call   c0028557 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 aa d8 01 00       	call   c0027b60 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 13 d2 01 00       	call   c00274e3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 73 e2 01 00       	call   c0028557 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 5c d8 01 00       	call   c0027b60 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 c5 d1 01 00       	call   c00274e3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 25 e2 01 00       	call   c0028557 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 0e d8 01 00       	call   c0027b60 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 77 d1 01 00       	call   c00274e3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 d7 e1 01 00       	call   c0028557 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 c0 d7 01 00       	call   c0027b60 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 29 d1 01 00       	call   c00274e3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 fd d0 01 00       	call   c00274e3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 5a d7 01 00       	call   c0027b60 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 16 e0 01 00       	call   c0028433 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 a5 d0 01 00       	call   c00274e3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 02 d7 01 00       	call   c0027b60 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 be df 01 00       	call   c0028433 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 4c d0 01 00       	call   c00274e3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 a9 d6 01 00       	call   c0027b60 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 65 df 01 00       	call   c0028433 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 f3 cf 01 00       	call   c00274e3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 50 d6 01 00       	call   c0027b60 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 0c df 01 00       	call   c0028433 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 6a c8 01 00       	call   c0026e78 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 41 df 01 00       	call   c0028557 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 2a d5 01 00       	call   c0027b60 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 0d df 01 00       	call   c0028557 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 7f ce 01 00       	call   c00274e3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 df de 01 00       	call   c0028557 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 c8 d4 01 00       	call   c0027b60 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 31 ce 01 00       	call   c00274e3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 91 de 01 00       	call   c0028557 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 7a d4 01 00       	call   c0027b60 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 e3 cd 01 00       	call   c00274e3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 43 de 01 00       	call   c0028557 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 2c d4 01 00       	call   c0027b60 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 95 cd 01 00       	call   c00274e3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 f5 dd 01 00       	call   c0028557 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 de d3 01 00       	call   c0027b60 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 47 cd 01 00       	call   c00274e3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 a7 dd 01 00       	call   c0028557 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 90 d3 01 00       	call   c0027b60 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 f6 cc 01 00       	call   c00274e3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 56 dd 01 00       	call   c0028557 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 3f d3 01 00       	call   c0027b60 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 a8 cc 01 00       	call   c00274e3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 a2 c5 01 00       	call   c0026e78 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 79 dc 01 00       	call   c0028557 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 62 d2 01 00       	call   c0027b60 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 42 dc 01 00       	call   c0028557 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 b4 cb 01 00       	call   c00274e3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 14 dc 01 00       	call   c0028557 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 fd d1 01 00       	call   c0027b60 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 66 cb 01 00       	call   c00274e3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 c6 db 01 00       	call   c0028557 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 af d1 01 00       	call   c0027b60 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 18 cb 01 00       	call   c00274e3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 78 db 01 00       	call   c0028557 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 61 d1 01 00       	call   c0027b60 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ca ca 01 00       	call   c00274e3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 2a db 01 00       	call   c0028557 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 13 d1 01 00       	call   c0027b60 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 7c ca 01 00       	call   c00274e3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 dc da 01 00       	call   c0028557 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 c5 d0 01 00       	call   c0027b60 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 2b ca 01 00       	call   c00274e3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 8b da 01 00       	call   c0028557 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 74 d0 01 00       	call   c0027b60 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 e3 c9 01 00       	call   c00274e3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 bc c9 01 00       	call   c00274e3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 1a d0 01 00       	call   c0027b60 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 d6 d8 01 00       	call   c0028433 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 65 c9 01 00       	call   c00274e3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 c3 cf 01 00       	call   c0027b60 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 7f d8 01 00       	call   c0028433 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 0d c9 01 00       	call   c00274e3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 6b cf 01 00       	call   c0027b60 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 27 d8 01 00       	call   c0028433 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 b5 c8 01 00       	call   c00274e3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 13 cf 01 00       	call   c0027b60 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 cf d7 01 00       	call   c0028433 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 5d c8 01 00       	call   c00274e3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 bb ce 01 00       	call   c0027b60 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 77 d7 01 00       	call   c0028433 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 0b c8 01 00       	call   c00274e3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 69 ce 01 00       	call   c0027b60 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 25 d7 01 00       	call   c0028433 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 39 c0 01 00       	call   c0026e78 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 10 d7 01 00       	call   c0028557 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 f9 cc 01 00       	call   c0027b60 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 e0 d6 01 00       	call   c0028557 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 52 c6 01 00       	call   c00274e3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 64 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd629c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 86 d6 01 00       	call   c0028557 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 6f cc 01 00       	call   c0027b60 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 da c5 01 00       	call   c00274e3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 27 d6 01 00       	call   c0028557 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 10 cc 01 00       	call   c0027b60 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 7b c5 01 00       	call   c00274e3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 c8 d5 01 00       	call   c0028557 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 b1 cb 01 00       	call   c0027b60 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 1c c5 01 00       	call   c00274e3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 69 d5 01 00       	call   c0028557 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 52 cb 01 00       	call   c0027b60 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 bd c4 01 00       	call   c00274e3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 0a d5 01 00       	call   c0028557 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 f3 ca 01 00       	call   c0027b60 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 5e c4 01 00       	call   c00274e3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 ab d4 01 00       	call   c0028557 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 94 ca 01 00       	call   c0027b60 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 ff c3 01 00       	call   c00274e3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 4c d4 01 00       	call   c0028557 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 35 ca 01 00       	call   c0027b60 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 a0 c3 01 00       	call   c00274e3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 ed d3 01 00       	call   c0028557 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 d6 c9 01 00       	call   c0027b60 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 41 c3 01 00       	call   c00274e3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 4b bc 01 00       	call   c0026e78 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 22 d3 01 00       	call   c0028557 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 0b c9 01 00       	call   c0027b60 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 f2 d2 01 00       	call   c0028557 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 64 c2 01 00       	call   c00274e3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 80 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6280]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 97 d2 01 00       	call   c0028557 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 80 c8 01 00       	call   c0027b60 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 eb c1 01 00       	call   c00274e3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 37 d2 01 00       	call   c0028557 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 20 c8 01 00       	call   c0027b60 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 8b c1 01 00       	call   c00274e3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 d7 d1 01 00       	call   c0028557 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 c0 c7 01 00       	call   c0027b60 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 2b c1 01 00       	call   c00274e3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 77 d1 01 00       	call   c0028557 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 60 c7 01 00       	call   c0027b60 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 cb c0 01 00       	call   c00274e3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 17 d1 01 00       	call   c0028557 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 00 c7 01 00       	call   c0027b60 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 6b c0 01 00       	call   c00274e3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 b7 d0 01 00       	call   c0028557 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 a0 c6 01 00       	call   c0027b60 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 0b c0 01 00       	call   c00274e3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 57 d0 01 00       	call   c0028557 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 40 c6 01 00       	call   c0027b60 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 ab bf 01 00       	call   c00274e3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 f7 cf 01 00       	call   c0028557 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 e0 c5 01 00       	call   c0027b60 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 4b bf 01 00       	call   c00274e3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 9c 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6264]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 f0 be 01 00       	call   c00274e3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 4d c5 01 00       	call   c0027b60 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 09 ce 01 00       	call   c0028433 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 93 be 01 00       	call   c00274e3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 f0 c4 01 00       	call   c0027b60 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ac cd 01 00       	call   c0028433 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 36 be 01 00       	call   c00274e3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 93 c4 01 00       	call   c0027b60 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 4f cd 01 00       	call   c0028433 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 d9 bd 01 00       	call   c00274e3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 36 c4 01 00       	call   c0027b60 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 f2 cc 01 00       	call   c0028433 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 7c bd 01 00       	call   c00274e3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 d9 c3 01 00       	call   c0027b60 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 95 cc 01 00       	call   c0028433 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 1f bd 01 00       	call   c00274e3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 7c c3 01 00       	call   c0027b60 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 38 cc 01 00       	call   c0028433 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 c2 bc 01 00       	call   c00274e3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 1f c3 01 00       	call   c0027b60 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 db cb 01 00       	call   c0028433 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 65 bc 01 00       	call   c00274e3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 c2 c2 01 00       	call   c0027b60 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 7e cb 01 00       	call   c0028433 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 7a c2 01 00       	call   c0027b60 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ea cc 01 00       	jmp    c00285e0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 5c c9 01 00       	call   c002842f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 1a c9 01 00       	call   c0028411 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 b1 c6 01 00       	call   c00281c3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 b2 b9 01 00       	call   c00274e3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 81 c6 01 00       	call   c00281c3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 e8 c2 01 00       	call   c0027e44 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 87 c8 01 00       	call   c0028411 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 8a c8 01 00       	call   c002842f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 5d c8 01 00       	call   c002842f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 56 c2 01 00       	call   c0027e44 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 d8 c9 01 00       	call   c00285e0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 b3 c9 01 00       	call   c00285e0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 8d c5 01 00       	call   c00281c3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 e4 be 01 00       	call   c0027b34 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 c3 c7 01 00       	call   c002842f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 5c b8 01 00       	call   c00274e3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 80 be 01 00       	call   c0027b34 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 1a c9 01 00       	call   c00285e0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 5a c1 01 00       	call   c0027e44 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 d7 b7 01 00       	call   c00274e3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 03 c4 01 00       	call   c00281c3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 03 b7 01 00       	call   c00274e3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 e3 b6 01 00       	call   c00274e3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 b3 c3 01 00       	call   c00281c3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 03 c6 01 00       	call   c002842d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 e2 bc 01 00       	call   c0027b34 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 5c c7 01 00       	call   c00285c0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 8b c5 01 00       	call   c0028411 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 89 bc 01 00       	call   c0027b34 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 07 c3 01 00       	call   c00281c3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 8a bc 01 00       	call   c0027b60 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 dc c2 01 00       	call   c00281c3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 43 bf 01 00       	call   c0027e44 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 c2 b5 01 00       	call   c00274e3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 8c c2 01 00       	call   c00281c3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 d8 c4 01 00       	call   c002842f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 cd bb 01 00       	call   c0027b60 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 9f bb 01 00       	call   c0027b60 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 d8 c1 01 00       	call   c00281c3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 3c be 01 00       	call   c0027e44 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 04 be 01 00       	call   c0027e44 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 83 b4 01 00       	call   c00274e3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 68 c5 01 00       	call   c00285e0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 42 c1 01 00       	call   c00281c3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 99 ba 01 00       	call   c0027b34 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 78 c3 01 00       	call   c002842f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 10 b4 01 00       	call   c00274e3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 34 ba 01 00       	call   c0027b34 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ce c4 01 00       	call   c00285e0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 97 c2 01 00       	call   c002842f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 55 c2 01 00       	call   c0028411 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 ec bf 01 00       	call   c00281c3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 ed b2 01 00       	call   c00274e3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 bc bf 01 00       	call   c00281c3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 23 bc 01 00       	call   c0027e44 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 c2 c1 01 00       	call   c0028411 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 c5 c1 01 00       	call   c002842f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 98 c1 01 00       	call   c002842f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 91 bb 01 00       	call   c0027e44 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 13 c3 01 00       	call   c00285e0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ee c2 01 00       	call   c00285e0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 c8 be 01 00       	call   c00281c3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 1f b8 01 00       	call   c0027b34 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 fe c0 01 00       	call   c002842f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 97 b1 01 00       	call   c00274e3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 bb b7 01 00       	call   c0027b34 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 55 c2 01 00       	call   c00285e0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 95 ba 01 00       	call   c0027e44 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 12 b1 01 00       	call   c00274e3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 3d bd 01 00       	call   c00281c3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 3d b0 01 00       	call   c00274e3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 1d b0 01 00       	call   c00274e3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 ed bc 01 00       	call   c00281c3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 3d bf 01 00       	call   c002842d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 1b b6 01 00       	call   c0027b34 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 95 c0 01 00       	call   c00285c0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 c4 be 01 00       	call   c0028411 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 c1 b5 01 00       	call   c0027b34 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 3f bc 01 00       	call   c00281c3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 c2 b5 01 00       	call   c0027b60 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 14 bc 01 00       	call   c00281c3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 7b b8 01 00       	call   c0027e44 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 fa ae 01 00       	call   c00274e3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 c4 bb 01 00       	call   c00281c3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 10 be 01 00       	call   c002842f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 05 b5 01 00       	call   c0027b60 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 d7 b4 01 00       	call   c0027b60 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 0e bb 01 00       	call   c00281c3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 72 b7 01 00       	call   c0027e44 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 3f b7 01 00       	call   c0027e44 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 be ad 01 00       	call   c00274e3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 a3 be 01 00       	call   c00285e0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 7d ba 01 00       	call   c00281c3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 d4 b3 01 00       	call   c0027b34 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 b3 bc 01 00       	call   c002842f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 4b ad 01 00       	call   c00274e3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 6f b3 01 00       	call   c0027b34 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 09 be 01 00       	call   c00285e0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 d2 bb 01 00       	call   c002842f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 90 bb 01 00       	call   c0028411 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 27 b9 01 00       	call   c00281c3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 28 ac 01 00       	call   c00274e3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 f7 b8 01 00       	call   c00281c3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 5e b5 01 00       	call   c0027e44 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 fd ba 01 00       	call   c0028411 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 00 bb 01 00       	call   c002842f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 d3 ba 01 00       	call   c002842f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 cc b4 01 00       	call   c0027e44 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 4e bc 01 00       	call   c00285e0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 29 bc 01 00       	call   c00285e0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 03 b8 01 00       	call   c00281c3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 5a b1 01 00       	call   c0027b34 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 39 ba 01 00       	call   c002842f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 d2 aa 01 00       	call   c00274e3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 f6 b0 01 00       	call   c0027b34 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 90 bb 01 00       	call   c00285e0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 d0 b3 01 00       	call   c0027e44 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 4d aa 01 00       	call   c00274e3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 78 b6 01 00       	call   c00281c3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 78 a9 01 00       	call   c00274e3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 58 a9 01 00       	call   c00274e3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 28 b6 01 00       	call   c00281c3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 78 b8 01 00       	call   c002842d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 56 af 01 00       	call   c0027b34 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 d0 b9 01 00       	call   c00285c0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 ff b7 01 00       	call   c0028411 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 fc ae 01 00       	call   c0027b34 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 7a b5 01 00       	call   c00281c3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 fd ae 01 00       	call   c0027b60 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 4f b5 01 00       	call   c00281c3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 b6 b1 01 00       	call   c0027e44 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 35 a8 01 00       	call   c00274e3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 ff b4 01 00       	call   c00281c3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 4b b7 01 00       	call   c002842f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 40 ae 01 00       	call   c0027b60 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 12 ae 01 00       	call   c0027b60 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 49 b4 01 00       	call   c00281c3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ad b0 01 00       	call   c0027e44 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 7a b0 01 00       	call   c0027e44 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 f9 a6 01 00       	call   c00274e3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 de b7 01 00       	call   c00285e0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 b8 b3 01 00       	call   c00281c3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 0f ad 01 00       	call   c0027b34 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ee b5 01 00       	call   c002842f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 86 a6 01 00       	call   c00274e3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 aa ac 01 00       	call   c0027b34 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 44 b7 01 00       	call   c00285e0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 0d b5 01 00       	call   c002842f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 cb b4 01 00       	call   c0028411 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 62 b2 01 00       	call   c00281c3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 63 a5 01 00       	call   c00274e3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 32 b2 01 00       	call   c00281c3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 99 ae 01 00       	call   c0027e44 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 38 b4 01 00       	call   c0028411 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 3b b4 01 00       	call   c002842f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 0e b4 01 00       	call   c002842f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 07 ae 01 00       	call   c0027e44 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 89 b5 01 00       	call   c00285e0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 64 b5 01 00       	call   c00285e0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 3e b1 01 00       	call   c00281c3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 95 aa 01 00       	call   c0027b34 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 74 b3 01 00       	call   c002842f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 0d a4 01 00       	call   c00274e3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 31 aa 01 00       	call   c0027b34 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 cb b4 01 00       	call   c00285e0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 0b ad 01 00       	call   c0027e44 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 88 a3 01 00       	call   c00274e3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 b3 af 01 00       	call   c00281c3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 b3 a2 01 00       	call   c00274e3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 93 a2 01 00       	call   c00274e3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 63 af 01 00       	call   c00281c3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 b3 b1 01 00       	call   c002842d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 91 a8 01 00       	call   c0027b34 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 0b b3 01 00       	call   c00285c0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 3a b1 01 00       	call   c0028411 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 37 a8 01 00       	call   c0027b34 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 b5 ae 01 00       	call   c00281c3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 38 a8 01 00       	call   c0027b60 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 8a ae 01 00       	call   c00281c3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 f1 aa 01 00       	call   c0027e44 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 70 a1 01 00       	call   c00274e3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 3a ae 01 00       	call   c00281c3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 86 b0 01 00       	call   c002842f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 7b a7 01 00       	call   c0027b60 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 4d a7 01 00       	call   c0027b60 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 84 ad 01 00       	call   c00281c3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 e8 a9 01 00       	call   c0027e44 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 b5 a9 01 00       	call   c0027e44 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 34 a0 01 00       	call   c00274e3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 19 b1 01 00       	call   c00285e0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 f3 ac 01 00       	call   c00281c3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 4a a6 01 00       	call   c0027b34 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 29 af 01 00       	call   c002842f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 c1 9f 01 00       	call   c00274e3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 e5 a5 01 00       	call   c0027b34 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 7f b0 01 00       	call   c00285e0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 45 ae 01 00       	call   c002842f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 03 ae 01 00       	call   c0028411 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 9a ab 01 00       	call   c00281c3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 9b 9e 01 00       	call   c00274e3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 6a ab 01 00       	call   c00281c3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 d1 a7 01 00       	call   c0027e44 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 70 ad 01 00       	call   c0028411 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 73 ad 01 00       	call   c002842f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 46 ad 01 00       	call   c002842f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 3f a7 01 00       	call   c0027e44 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 c1 ae 01 00       	call   c00285e0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 98 ae 01 00       	call   c00285e0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 72 aa 01 00       	call   c00281c3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 c9 a3 01 00       	call   c0027b34 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 a8 ac 01 00       	call   c002842f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 41 9d 01 00       	call   c00274e3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 69 a3 01 00       	call   c0027b34 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 03 ae 01 00       	call   c00285e0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 44 a6 01 00       	call   c0027e44 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 c1 9c 01 00       	call   c00274e3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 ed a8 01 00       	call   c00281c3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 ed 9b 01 00       	call   c00274e3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 cd 9b 01 00       	call   c00274e3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 9d a8 01 00       	call   c00281c3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 d1 aa 01 00       	call   c0028411 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 c8 a1 01 00       	call   c0027b34 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 42 ac 01 00       	call   c00285c0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 71 aa 01 00       	call   c0028411 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 6b a1 01 00       	call   c0027b34 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 e9 a7 01 00       	call   c00281c3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 6c a1 01 00       	call   c0027b60 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 be a7 01 00       	call   c00281c3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 25 a4 01 00       	call   c0027e44 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 a4 9a 01 00       	call   c00274e3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 6e a7 01 00       	call   c00281c3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ba a9 01 00       	call   c002842f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 af a0 01 00       	call   c0027b60 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 81 a0 01 00       	call   c0027b60 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 c5 a6 01 00       	call   c00281c3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 2c a3 01 00       	call   c0027e44 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 15 a0 01 00       	call   c0027b60 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 d1 a8 01 00       	call   c0028433 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 c4 a2 01 00       	call   c0027e44 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 43 99 01 00       	call   c00274e3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 28 aa 01 00       	call   c00285e0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 02 a6 01 00       	call   c00281c3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 59 9f 01 00       	call   c0027b34 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 38 a8 01 00       	call   c002842f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 d0 98 01 00       	call   c00274e3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 f8 9e 01 00       	call   c0027b34 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 92 a9 01 00       	call   c00285e0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 c4 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd623c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 b8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6248]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 4d a6 01 00       	call   c002842f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 0b a6 01 00       	call   c0028411 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 f7 a5 01 00       	call   c002842f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 69 a3 01 00       	call   c00281c3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 e7 9c 01 00       	call   c0027b60 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 39 a3 01 00       	call   c00281c3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 3f 96 01 00       	call   c00274e3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 0e a3 01 00       	call   c00281c3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 5e a5 01 00       	call   c002842d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 3f 9c 01 00       	call   c0027b34 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 b9 a6 01 00       	call   c00285c0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 e8 a4 01 00       	call   c0028411 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 e7 9b 01 00       	call   c0027b34 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 65 a2 01 00       	call   c00281c3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 e8 9b 01 00       	call   c0027b60 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 3a a2 01 00       	call   c00281c3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 a1 9e 01 00       	call   c0027e44 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 20 95 01 00       	call   c00274e3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 48 9e 01 00       	call   c0027e44 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ce 94 01 00       	call   c00274e3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 b4 a5 01 00       	call   c00285e0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 8e a1 01 00       	call   c00281c3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 e5 9a 01 00       	call   c0027b34 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 c4 a3 01 00       	call   c002842f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 5d 94 01 00       	call   c00274e3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 89 9a 01 00       	call   c0027b34 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 23 a5 01 00       	call   c00285e0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 d8 a0 01 00       	call   c00281c3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 55 9a 01 00       	call   c0027b60 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 a6 a0 01 00       	call   c00281c3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ac 93 01 00       	call   c00274e3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 7c a0 01 00       	call   c00281c3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 d0 a2 01 00       	call   c0028431 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 a9 99 01 00       	call   c0027b34 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 23 a4 01 00       	call   c00285c0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 52 a2 01 00       	call   c0028411 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 50 99 01 00       	call   c0027b34 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ce 9f 01 00       	call   c00281c3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 51 99 01 00       	call   c0027b60 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 a3 9f 01 00       	call   c00281c3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 0a 9c 01 00       	call   c0027e44 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 89 92 01 00       	call   c00274e3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 a5 9b 01 00       	call   c0027e44 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 24 92 01 00       	call   c00274e3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 0a a3 01 00       	call   c00285e0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 e4 9e 01 00       	call   c00281c3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 3b 98 01 00       	call   c0027b34 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 1a a1 01 00       	call   c002842f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 b3 91 01 00       	call   c00274e3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 df 97 01 00       	call   c0027b34 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 50 9e 01 00       	call   c00281c3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 56 91 01 00       	call   c00274e3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 de 9e 02 c0       	mov    eax,0xc0029ede
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 ef 9e 02 c0       	mov    eax,0xc0029eef
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 26 9f 02 c0       	push   0xc0029f26
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e3 02 c0       	mov    eax,0xc002e388
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 2f 9f 02 c0       	push   0xc0029f2f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 39 9f 02 c0       	push   0xc0029f39
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 90 66 02 c0       	mov    eax,0xc0026690
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 42 9f 02 c0       	push   0xc0029f42
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 5c 6a 02 c0       	mov    eax,0xc0026a5c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 4c 9f 02 c0       	push   0xc0029f4c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 dc 67 02 c0       	mov    eax,0xc00267dc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 55 9f 02 c0       	push   0xc0029f55
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e3 02 c0       	mov    eax,0xc002e38c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 62 9f 02 c0       	push   0xc0029f62
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e3 02 c0       	mov    eax,0xc002e38d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 73 5e 00 00       	call   c0014496 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c000e668:	68 6f 9f 02 c0       	push   0xc0029f6f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 45 f5 00 00       	call   c001dbba <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 2e f8 00 00       	call   c001deb8 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 16 e7 01 c0       	push   0xc001e716
c000e693:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c000e699:	e8 1a f8 00 00       	call   c001deb8 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 18 03 c0       	mov    ds:0xc00318a8,eax
c000e6a6:	c6 05 8d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e38d,0x1
c000e6ad:	e8 e5 03 01 00       	call   c001ea97 <Vm::initialise8086()>
c000e6b2:	e8 c7 4b 00 00       	call   c001327e <Fs::initVFS()>
c000e6b7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 77 de 00 00       	call   c001c54a <Sys::loadSyscalls()>
c000e6d3:	e8 9a bd 00 00       	call   c001a472 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 7c 9f 02 c0       	push   0xc0029f7c
c000e6e2:	68 85 9f 02 c0       	push   0xc0029f85
c000e6e7:	e8 ac ca 00 00       	call   c001b198 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 72 56 00 00       	call   c0013d66 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 65 5d 00 00       	call   c001446a <Device::loadDriversForAll()>
c000e705:	e8 ae b8 00 00       	call   c0019fb8 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 8d 9f 02 c0       	push   0xc0029f8d
c000e719:	e8 c0 ef 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 eb f1 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 e8 fa 00 00       	call   c001e21c <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 a9 9f 02 c0       	push   0xc0029fa9
c000e749:	50                   	push   eax
c000e74a:	e8 c1 5d 00 00       	call   c0014510 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 48 a1 02 c0       	mov    edx,0xc002a148
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 43 7d 01 00       	call   c0026626 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 ac a3 00 00       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 85 a3 00 00       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 63 a3 00 00       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 41 a3 00 00       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 4f a2 00 00       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 2a a2 00 00       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ad 7b 01 00       	call   c00265e0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 6a 7b 01 00       	call   c00265c0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 46 a2 00 00       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 b9 9f 02 c0       	push   0xc0029fb9
c000eaaf:	e8 46 44 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 cc 9f 02 c0       	push   0xc0029fcc
c000ead2:	e8 23 44 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 dd 9f 02 c0       	push   0xc0029fdd
c000eaf5:	e8 00 44 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ee 9f 02 c0       	push   0xc0029fee
c000eb18:	e8 dd 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 ff 9f 02 c0       	push   0xc0029fff
c000eb3b:	e8 ba 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 10 a0 02 c0       	push   0xc002a010
c000eb5e:	e8 97 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 21 a0 02 c0       	push   0xc002a021
c000eb81:	e8 74 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 32 a0 02 c0       	push   0xc002a032
c000eba4:	e8 51 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 43 a0 02 c0       	push   0xc002a043
c000ebc7:	e8 2e 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 54 a0 02 c0       	push   0xc002a054
c000ebea:	e8 0b 43 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 65 a0 02 c0       	push   0xc002a065
c000ec0d:	e8 e8 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 76 a0 02 c0       	push   0xc002a076
c000ec30:	e8 c5 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 87 a0 02 c0       	push   0xc002a087
c000ec53:	e8 a2 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 98 a0 02 c0       	push   0xc002a098
c000ec76:	e8 7f 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 a9 a0 02 c0       	push   0xc002a0a9
c000ec99:	e8 5c 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 ba a0 02 c0       	push   0xc002a0ba
c000ecbc:	e8 39 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 cb a0 02 c0       	push   0xc002a0cb
c000ecdf:	e8 16 42 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 dc a0 02 c0       	push   0xc002a0dc
c000ed02:	e8 f3 41 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 ed a0 02 c0       	push   0xc002a0ed
c000ed21:	e8 d4 41 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 7c ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba7c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 c3 41 00 00       	jmp    c0012efa <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 fe a0 02 c0       	push   0xc002a0fe
c000ee0a:	e8 9c b7 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 04 a1 02 c0       	push   0xc002a104
c000ee42:	e8 64 b7 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 e5 92 00 00       	call   c001819a <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 5c 54 00 00       	call   c0014320 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 8e 9e 00 00       	call   c0018d82 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 1d 54 00 00       	call   c0014320 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 87 59 00 00       	call   c00148a6 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 ed 53 00 00       	call   c0014320 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 63 f0 00 00       	call   c001dfb8 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 0a a1 02 c0       	push   0xc002a10a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 57 3f 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 1b a1 02 c0       	push   0xc002a11b
c000efc0:	e8 e6 b5 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 28 a1 02 c0       	push   0xc002a128
c000efd5:	e8 d1 b5 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 32 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a132
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 ba b5 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 6c a1 02 c0       	push   0xc002a16c
c000f086:	e8 6f 3e 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e3 02 c0       	mov    ds:0xc002e392,eax
c000f0c7:	66 89 15 90 e3 02 c0 	mov    WORD PTR ds:0xc002e390,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 aa eb 00 00       	call   c001dd88 <unlockScheduler()>
c000f1de:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 34 94 01 00       	call   c0028660 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 2b 94 01 00       	call   c0028660 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e398,0x7ff
c000f323:	a3 9a e3 02 c0       	mov    ds:0xc002e39a,eax
c000f328:	0f 01 1d 98 e3 02 c0 	lidtd  ds:0xc002e398
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 25 28 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 56 2e 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 92 1e 00 00       	call   c00114d0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c3 1e 00 00       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d ac d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2ac
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 ac d2 02 c0       	mov    eax,ds:0xc002d2ac
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 88 a1 02 c0       	push   0xc002a188
c000f6f4:	e8 01 38 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 ac d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d2ac,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1b 27 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d ac d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d2ac
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 3d 2c 00 00       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d ac d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2ac
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 b8 a1 02 c0       	push   0xc002a1b8
c000f7ad:	e8 f9 ad 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 bd a1 02 c0       	push   0xc002a1bd
c000f7c3:	e8 e3 ad 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 ad e5 00 00       	call   c001dd86 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 9e e5 00 00       	call   c001dd88 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 3f 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 6c 2c 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 24 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 0f 29 00 00       	call   c0012132 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b2 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 74 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0b 0d 00 00       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c000fb46:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2c0,0x8000
c000fba0:	c6 05 20 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e420,0x1
c000fba7:	c7 05 58 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e458,0xc000fa13
c000fbb1:	c7 05 44 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e444,0xc000f89a
c000fbbb:	c7 05 40 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e440,0xc000f8e5
c000fbc5:	c7 05 4c e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e44c,0xc000fa59
c000fbcf:	c7 05 54 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e454,0xc000f963
c000fbd9:	c7 05 48 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e448,0xc000f9c1
c000fbe3:	c7 05 50 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e450,0xc000f9c2
c000fbed:	c7 05 5c e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e45c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f2 09 00 00       	call   c00105fc <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 c4 a1 02 c0       	push   0xc002a1c4
c000fc4a:	e8 ab 32 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 51 04 00 00       	call   c00100b7 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f3 20 00 00       	call   c0011d5e <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 7d ba 02 c0       	push   0xc002ba7d
c000fc92:	e8 14 a9 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c3 22 00 00       	call   c0011f70 <VAS::VAS()>
c000fcad:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 db a1 02 c0 	mov    DWORD PTR [esp],0xc002a1db
c000fcbf:	e8 36 32 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 14 21 00 00       	call   c0011ddd <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 f8 a1 02 c0       	push   0xc002a1f8
c000fced:	e8 08 32 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 fe 24 00 00       	call   c001220a <VAS::~VAS()>
c000fd0c:	c7 04 24 0b a2 02 c0 	mov    DWORD PTR [esp],0xc002a20b
c000fd13:	e8 93 a8 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba e0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c20],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be e0 e3 02 c0       	mov    esi,0xc002e3e0
c000fd89:	8d 90 e0 e3 02 c0    	lea    edx,[eax-0x3ffd1c20]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 e0 e3 02 c0    	lea    eax,[edx-0x3ffd1c20]
c000fdef:	8d 94 11 e0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c20]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 b0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2b0
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 b0 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2b0
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 b0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2b0
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000fe91:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 d6 0a 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 26 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a226
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 c9 a6 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 3c a2 02 c0       	push   0xc002a23c
c000ff27:	e8 ce 2f 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a9 00 00 00    	jne    c000ffec <Phys::allocatePage()+0x10a>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 4d a2 02 c0       	push   0xc002a24d
c000ff4b:	e8 5b a6 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d c4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c4
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ff71:	59                   	pop    ecx
c000ff72:	40                   	inc    eax
c000ff73:	5b                   	pop    ebx
c000ff74:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000ff79:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	c1 e0 02             	shl    eax,0x2
c000ff82:	99                   	cdq    
c000ff83:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ff89:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ff8f:	75 61                	jne    c000fff2 <Phys::allocatePage()+0x110>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4e                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c000ff96:	80 3d c0 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3c0,0x0
c000ff9d:	75 45                	jne    c000ffe4 <Phys::allocatePage()+0x102>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 1f                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 18                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 0e                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffb9:	52                   	push   edx
c000ffba:	6a 04                	push   0x4
c000ffbc:	6a 08                	push   0x8
c000ffbe:	50                   	push   eax
c000ffbf:	e8 5e 2c 00 00       	call   c0012c22 <VAS::scanForEviction(int, int)>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ffcc:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffcf:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd2:	c1 e0 02             	shl    eax,0x2
c000ffd5:	99                   	cdq    
c000ffd6:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ffdc:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ffe2:	75 2e                	jne    c0010012 <Phys::allocatePage()+0x130>
c000ffe4:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffe9:	c1 e0 0c             	shl    eax,0xc
c000ffec:	83 c4 14             	add    esp,0x14
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	c3                   	ret    
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000fffa:	50                   	push   eax
c000fffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffff:	e8 8c 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000b:	83 f8 32             	cmp    eax,0x32
c001000e:	7e d4                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c0010010:	eb 84                	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c001001a:	50                   	push   eax
c001001b:	e8 70 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	eb bf                	jmp    c000ffe4 <Phys::allocatePage()+0x102>

c0010025 <Phys::allocateContiguousPages(int)>:
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	31 db                	xor    ebx,ebx
c001002a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001002e:	e8 53 dd 00 00       	call   c001dd86 <lockScheduler()>
c0010033:	85 db                	test   ebx,ebx
c0010035:	75 11                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010037:	e8 a6 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001003c:	83 ff 01             	cmp    edi,0x1
c001003f:	89 c6                	mov    esi,eax
c0010041:	74 21                	je     c0010064 <Phys::allocateContiguousPages(int)+0x3f>
c0010043:	bb 01 00 00 00       	mov    ebx,0x1
c0010048:	e8 95 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001004d:	89 da                	mov    edx,ebx
c001004f:	c1 e2 0c             	shl    edx,0xc
c0010052:	01 f2                	add    edx,esi
c0010054:	39 c2                	cmp    edx,eax
c0010056:	74 17                	je     c001006f <Phys::allocateContiguousPages(int)+0x4a>
c0010058:	bb 01 00 00 00       	mov    ebx,0x1
c001005d:	89 c6                	mov    esi,eax
c001005f:	83 ff 01             	cmp    edi,0x1
c0010062:	75 e4                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010064:	e8 1f dd 00 00       	call   c001dd88 <unlockScheduler()>
c0010069:	89 f0                	mov    eax,esi
c001006b:	5b                   	pop    ebx
c001006c:	5e                   	pop    esi
c001006d:	5f                   	pop    edi
c001006e:	c3                   	ret    
c001006f:	43                   	inc    ebx
c0010070:	39 fb                	cmp    ebx,edi
c0010072:	75 bf                	jne    c0010033 <Phys::allocateContiguousPages(int)+0xe>
c0010074:	e8 0f dd 00 00       	call   c001dd88 <unlockScheduler()>
c0010079:	89 f0                	mov    eax,esi
c001007b:	5b                   	pop    ebx
c001007c:	5e                   	pop    esi
c001007d:	5f                   	pop    edi
c001007e:	c3                   	ret    

c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001007f:	56                   	push   esi
c0010080:	53                   	push   ebx
c0010081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010085:	39 1d c8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c8,ebx
c001008b:	73 06                	jae    c0010093 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001008d:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c0010093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010097:	c1 eb 0c             	shr    ebx,0xc
c001009a:	c1 e8 0c             	shr    eax,0xc
c001009d:	39 d8                	cmp    eax,ebx
c001009f:	73 13                	jae    c00100b4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a1:	6a 00                	push   0x0
c00100a3:	8d 70 01             	lea    esi,[eax+0x1]
c00100a6:	50                   	push   eax
c00100a7:	e8 5e fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ac:	5a                   	pop    edx
c00100ad:	89 f0                	mov    eax,esi
c00100af:	59                   	pop    ecx
c00100b0:	39 f3                	cmp    ebx,esi
c00100b2:	75 ed                	jne    c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b4:	5b                   	pop    ebx
c00100b5:	5e                   	pop    esi
c00100b6:	c3                   	ret    

c00100b7 <Phys::physicalMemorySetup(unsigned int)>:
c00100b7:	55                   	push   ebp
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	53                   	push   ebx
c00100bb:	31 db                	xor    ebx,ebx
c00100bd:	83 ec 40             	sub    esp,0x40
c00100c0:	6a 30                	push   0x30
c00100c2:	6a 00                	push   0x0
c00100c4:	68 e0 e3 02 c0       	push   0xc002e3e0
c00100c9:	e8 aa 06 ff ff       	call   c0000778 <memset>
c00100ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d7:	05 00 10 00 00       	add    eax,0x1000
c00100dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 ec 08             	sub    esp,0x8
c00100e6:	6a 01                	push   0x1
c00100e8:	53                   	push   ebx
c00100e9:	43                   	inc    ebx
c00100ea:	e8 1b fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f8:	75 e9                	jne    c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010101:	66 85 c0             	test   ax,ax
c0010104:	0f 84 8e 01 00 00    	je     c0010298 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001010e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001011f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010123:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012b:	eb 15                	jmp    c0010142 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001012d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010131:	83 c3 18             	add    ebx,0x18
c0010134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001013c:	0f 84 66 01 00 00    	je     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010142:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010145:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010148:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010153:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010155:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010158:	01 f0                	add    eax,esi
c001015a:	55                   	push   ebp
c001015b:	11 fa                	adc    edx,edi
c001015d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010161:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010169:	56                   	push   esi
c001016a:	68 88 a2 02 c0       	push   0xc002a288
c001016f:	e8 86 2d 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0010174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	09 f8                	or     eax,edi
c001017d:	0f 85 25 01 00 00    	jne    c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010183:	4d                   	dec    ebp
c0010184:	75 a7                	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010186:	ba 00 00 08 00       	mov    edx,0x80000
c001018b:	89 c1                	mov    ecx,eax
c001018d:	39 f2                	cmp    edx,esi
c001018f:	19 f9                	sbb    ecx,edi
c0010191:	0f 82 a7 00 00 00    	jb     c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010197:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019b:	89 c1                	mov    ecx,eax
c001019d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a1:	0f 83 97 00 00 00    	jae    c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a7:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	19 e8                	sbb    eax,ebp
c00101b8:	0f 82 14 01 00 00    	jb     c00102d2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101c6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101cc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d1:	83 d5 ff             	adc    ebp,0xffffffff
c00101d4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d8:	31 c0                	xor    eax,eax
c00101da:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101de:	39 fa                	cmp    edx,edi
c00101e0:	89 c1                	mov    ecx,eax
c00101e2:	19 e9                	sbb    ecx,ebp
c00101e4:	0f 83 43 ff ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ea:	be 00 00 08 00       	mov    esi,0x80000
c00101ef:	50                   	push   eax
c00101f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	68 ac a2 02 c0       	push   0xc002a2ac
c00101fb:	e8 fa 2c 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0010200:	5a                   	pop    edx
c0010201:	59                   	pop    ecx
c0010202:	57                   	push   edi
c0010203:	56                   	push   esi
c0010204:	e8 76 fe ff ff       	call   c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001020d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010211:	83 c4 0c             	add    esp,0xc
c0010214:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010218:	03 05 d4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3d4
c001021e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010225:	a3 d4 e3 02 c0       	mov    ds:0xc002e3d4,eax
c001022a:	52                   	push   edx
c001022b:	50                   	push   eax
c001022c:	68 69 a2 02 c0       	push   0xc002a269
c0010231:	e8 c4 2c 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	e9 ef fe ff ff       	jmp    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024a:	39 ea                	cmp    edx,ebp
c001024c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010250:	0f 82 d7 fe ff ff    	jb     c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010256:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001025f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010263:	0f 83 c4 fe ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010269:	39 ee                	cmp    esi,ebp
c001026b:	89 f8                	mov    eax,edi
c001026d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010271:	0f 83 78 ff ff ff    	jae    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001027f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010283:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010287:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001028f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010293:	e9 57 ff ff ff       	jmp    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	68 5b a2 02 c0       	push   0xc002a25b
c00102a0:	e8 06 a3 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	bb 40 01 00 00       	mov    ebx,0x140
c00102ad:	83 ec 08             	sub    esp,0x8
c00102b0:	6a 00                	push   0x0
c00102b2:	53                   	push   ebx
c00102b3:	43                   	inc    ebx
c00102b4:	e8 51 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b9:	ff 05 d4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3d4
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c8:	75 e3                	jne    c00102ad <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ca:	83 c4 3c             	add    esp,0x3c
c00102cd:	5b                   	pop    ebx
c00102ce:	5e                   	pop    esi
c00102cf:	5f                   	pop    edi
c00102d0:	5d                   	pop    ebp
c00102d1:	c3                   	ret    
c00102d2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e2:	e9 d7 fe ff ff       	jmp    c00101be <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102e7:	90                   	nop

c00102e8 <Pipe::isAtty()>:
c00102e8:	31 c0                	xor    eax,eax
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	ba 18 a3 02 c0       	mov    edx,0xc002a318
c00102f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f8:	89 10                	mov    DWORD PTR [eax],edx
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	50                   	push   eax
c0010302:	e8 37 16 00 00       	call   c001193e <UnixFile::~UnixFile()>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	90                   	nop
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::~Pipe()>:
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	e8 cd ff ff ff       	call   c00102ec <Pipe::~Pipe()>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	83 ec 08             	sub    esp,0x8
c0010325:	6a 20                	push   0x20
c0010327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032b:	e8 ea 2a 00 00       	call   c0012e1a <operator delete(void*, unsigned long)>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	83 c4 0c             	add    esp,0xc
c0010336:	c3                   	ret    
c0010337:	90                   	nop

c0010338 <Pipe::read(unsigned long long, void*, int*)>:
c0010338:	55                   	push   ebp
c0010339:	57                   	push   edi
c001033a:	56                   	push   esi
c001033b:	53                   	push   ebx
c001033c:	83 ec 1c             	sub    esp,0x1c
c001033f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010343:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010347:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001034e:	89 c8                	mov    eax,ecx
c0010350:	99                   	cdq    
c0010351:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010355:	74 19                	je     c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	39 f9                	cmp    ecx,edi
c0010359:	89 d1                	mov    ecx,edx
c001035b:	19 f1                	sbb    ecx,esi
c001035d:	73 11                	jae    c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035f:	e8 22 da 00 00       	call   c001dd86 <lockScheduler()>
c0010364:	e8 59 dd 00 00       	call   c001e0c2 <schedule()>
c0010369:	e8 1a da 00 00       	call   c001dd88 <unlockScheduler()>
c001036e:	eb db                	jmp    c001034b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010370:	39 f8                	cmp    eax,edi
c0010372:	89 d1                	mov    ecx,edx
c0010374:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010378:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001037c:	19 f1                	sbb    ecx,esi
c001037e:	73 08                	jae    c0010388 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010384:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001038e:	29 c6                	sub    esi,eax
c0010390:	89 f1                	mov    ecx,esi
c0010392:	c1 f9 1f             	sar    ecx,0x1f
c0010395:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010399:	89 ca                	mov    edx,ecx
c001039b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001039f:	19 d1                	sbb    ecx,edx
c00103a1:	73 04                	jae    c00103a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ab:	89 fd                	mov    ebp,edi
c00103ad:	29 f5                	sub    ebp,esi
c00103af:	85 f6                	test   esi,esi
c00103b1:	74 12                	je     c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b3:	52                   	push   edx
c00103b4:	56                   	push   esi
c00103b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b8:	50                   	push   eax
c00103b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103bd:	e8 82 03 ff ff       	call   c0000744 <memcpy>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	85 ed                	test   ebp,ebp
c00103c7:	74 12                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c9:	50                   	push   eax
c00103ca:	55                   	push   ebp
c00103cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d2:	56                   	push   esi
c00103d3:	e8 6c 03 ff ff       	call   c0000744 <memcpy>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e4:	99                   	cdq    
c00103e5:	89 f7                	mov    edi,esi
c00103e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103ef:	c1 ff 1f             	sar    edi,0x1f
c00103f2:	57                   	push   edi
c00103f3:	56                   	push   esi
c00103f4:	52                   	push   edx
c00103f5:	50                   	push   eax
c00103f6:	e8 61 66 01 00       	call   c0026a5c <__umoddi3>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010401:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010406:	75 10                	jne    c0010418 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	68 d5 a2 02 c0       	push   0xc002a2d5
c0010410:	e8 96 a1 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001041c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	31 c0                	xor    eax,eax
c0010427:	5b                   	pop    ebx
c0010428:	5e                   	pop    esi
c0010429:	5f                   	pop    edi
c001042a:	5d                   	pop    ebp
c001042b:	c3                   	ret    

c001042c <Pipe::write(unsigned long long, void*, int*)>:
c001042c:	55                   	push   ebp
c001042d:	57                   	push   edi
c001042e:	56                   	push   esi
c001042f:	53                   	push   ebx
c0010430:	83 ec 1c             	sub    esp,0x1c
c0010433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010437:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001043f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010442:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010445:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010448:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001044c:	89 de                	mov    esi,ebx
c001044e:	89 df                	mov    edi,ebx
c0010450:	c1 ff 1f             	sar    edi,0x1f
c0010453:	01 c6                	add    esi,eax
c0010455:	89 c8                	mov    eax,ecx
c0010457:	11 d7                	adc    edi,edx
c0010459:	99                   	cdq    
c001045a:	39 f1                	cmp    ecx,esi
c001045c:	89 d0                	mov    eax,edx
c001045e:	19 f8                	sbb    eax,edi
c0010460:	b8 01 00 00 00       	mov    eax,0x1
c0010465:	0f 82 80 00 00 00    	jb     c00104eb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001046e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010471:	01 d8                	add    eax,ebx
c0010473:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010477:	99                   	cdq    
c0010478:	f7 f9                	idiv   ecx
c001047a:	29 d1                	sub    ecx,edx
c001047c:	89 d7                	mov    edi,edx
c001047e:	89 c8                	mov    eax,ecx
c0010480:	99                   	cdq    
c0010481:	39 ce                	cmp    esi,ecx
c0010483:	19 d3                	sbb    ebx,edx
c0010485:	bb 00 00 00 00       	mov    ebx,0x0
c001048a:	72 04                	jb     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001048c:	89 f3                	mov    ebx,esi
c001048e:	29 cb                	sub    ebx,ecx
c0010490:	89 f1                	mov    ecx,esi
c0010492:	29 d9                	sub    ecx,ebx
c0010494:	74 1a                	je     c00104b0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010496:	52                   	push   edx
c0010497:	51                   	push   ecx
c0010498:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001049c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a3:	57                   	push   edi
c00104a4:	e8 9b 02 ff ff       	call   c0000744 <memcpy>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b0:	85 db                	test   ebx,ebx
c00104b2:	74 12                	je     c00104c6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b4:	50                   	push   eax
c00104b5:	53                   	push   ebx
c00104b6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104ba:	51                   	push   ecx
c00104bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104be:	e8 81 02 ff ff       	call   c0000744 <memcpy>
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ce:	75 10                	jne    c00104e0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	68 f1 a2 02 c0       	push   0xc002a2f1
c00104d8:	e8 ce a0 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e7:	89 38                	mov    DWORD PTR [eax],edi
c00104e9:	31 c0                	xor    eax,eax
c00104eb:	83 c4 1c             	add    esp,0x1c
c00104ee:	5b                   	pop    ebx
c00104ef:	5e                   	pop    esi
c00104f0:	5f                   	pop    edi
c00104f1:	5d                   	pop    ebp
c00104f2:	c3                   	ret    
c00104f3:	90                   	nop

c00104f4 <Pipe::Pipe(int)>:
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	6a 00                	push   0x0
c0010500:	50                   	push   eax
c0010501:	e8 56 12 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	ba 18 a3 02 c0       	mov    edx,0xc002a318
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	89 10                	mov    DWORD PTR [eax],edx
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	50                   	push   eax
c001053d:	e8 fe f2 ff ff       	call   c000f840 <malloc>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	89 c2                	mov    edx,eax
c0010547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::isAtty()>:
c001055c:	b0 01                	mov    al,0x1
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ba d4 a3 02 c0       	mov    edx,0xc002a3d4
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	89 10                	mov    DWORD PTR [eax],edx
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	50                   	push   eax
c0010576:	e8 c3 13 00 00       	call   c001193e <UnixFile::~UnixFile()>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	90                   	nop
c001057f:	83 c4 0c             	add    esp,0xc
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::~VgaText()>:
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 cd ff ff ff       	call   c0010560 <VgaText::~VgaText()>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 ec 08             	sub    esp,0x8
c0010599:	68 60 12 00 00       	push   0x1260
c001059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a2:	e8 73 28 00 00       	call   c0012e1a <operator delete(void*, unsigned long)>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	83 c4 0c             	add    esp,0xc
c00105ad:	c3                   	ret    

c00105ae <VgaText::read(unsigned long long, void*, int*)>:
c00105ae:	83 ec 10             	sub    esp,0x10
c00105b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bd:	e8 ea 5c 00 00       	call   c00162ac <readKeyboard(VgaText*, char*, unsigned long)>
c00105c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c6:	89 02                	mov    DWORD PTR [edx],eax
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	83 c4 1c             	add    esp,0x1c
c00105cd:	c3                   	ret    

c00105ce <setTerminalScrollLock(bool)>:
c00105ce:	c3                   	ret    

c00105cf <addToTerminalCycle(VgaText*)>:
c00105cf:	8b 15 60 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e460
c00105d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d9:	85 d2                	test   edx,edx
c00105db:	75 0c                	jne    c00105e9 <addToTerminalCycle(VgaText*)+0x1a>
c00105dd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e3:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c00105e8:	c3                   	ret    
c00105e9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105ef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105fb:	c3                   	ret    

c00105fc <installVgaTextImplementation()>:
c00105fc:	83 ec 10             	sub    esp,0x10
c00105ff:	6a 20                	push   0x20
c0010601:	6a 00                	push   0x0
c0010603:	68 40 e4 02 c0       	push   0xc002e440
c0010608:	e8 6b 01 ff ff       	call   c0000778 <memset>
c001060d:	83 c4 1c             	add    esp,0x1c
c0010610:	c3                   	ret    

c0010611 <scrollTerminalScrollLock(int)>:
c0010611:	c3                   	ret    

c0010612 <VgaText::load()>:
c0010612:	53                   	push   ebx
c0010613:	31 c0                	xor    eax,eax
c0010615:	83 ec 58             	sub    esp,0x58
c0010618:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001061c:	89 e2                	mov    edx,esp
c001061e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010622:	40                   	inc    eax
c0010623:	83 f8 50             	cmp    eax,0x50
c0010626:	75 f6                	jne    c001061e <VgaText::load()+0xc>
c0010628:	31 c0                	xor    eax,eax
c001062a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010631:	84 c9                	test   cl,cl
c0010633:	74 06                	je     c001063b <VgaText::load()+0x29>
c0010635:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010638:	40                   	inc    eax
c0010639:	eb ef                	jmp    c001062a <VgaText::load()+0x18>
c001063b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010641:	85 c0                	test   eax,eax
c0010643:	74 09                	je     c001064e <VgaText::load()+0x3c>
c0010645:	51                   	push   ecx
c0010646:	51                   	push   ecx
c0010647:	52                   	push   edx
c0010648:	53                   	push   ebx
c0010649:	ff d0                	call   eax
c001064b:	83 c4 10             	add    esp,0x10
c001064e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x4f>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 58             	add    esp,0x58
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <VgaText::updateCursor()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	39 05 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,eax
c0010670:	75 0c                	jne    c001067e <VgaText::updateCursor()+0x18>
c0010672:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010678:	85 c0                	test   eax,eax
c001067a:	74 02                	je     c001067e <VgaText::updateCursor()+0x18>
c001067c:	ff e0                	jmp    eax
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <VgaText::showCursor(bool)>:
c0010680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010688:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <VgaText::disableBlink(bool)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	51                   	push   ecx
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069b:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c00106a1:	75 18                	jne    c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106a3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a9:	85 c0                	test   eax,eax
c00106ab:	74 0e                	je     c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106ad:	89 f1                	mov    ecx,esi
c00106af:	52                   	push   edx
c00106b0:	52                   	push   edx
c00106b1:	0f b6 d1             	movzx  edx,cl
c00106b4:	52                   	push   edx
c00106b5:	53                   	push   ebx
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	89 f0                	mov    eax,esi
c00106bd:	83 f0 01             	xor    eax,0x1
c00106c0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106c6:	58                   	pop    eax
c00106c7:	5b                   	pop    ebx
c00106c8:	5e                   	pop    esi
c00106c9:	c3                   	ret    

c00106ca <VgaText::doANSI_SGR(int)>:
c00106ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	85 d2                	test   edx,edx
c00106d4:	75 14                	jne    c00106ea <VgaText::doANSI_SGR(int)+0x20>
c00106d6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e8:	eb 65                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c00106ea:	83 fa 07             	cmp    edx,0x7
c00106ed:	75 14                	jne    c0010703 <VgaText::doANSI_SGR(int)+0x39>
c00106ef:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106fb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010701:	eb 4c                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c0010703:	83 fa 1b             	cmp    edx,0x1b
c0010706:	74 ce                	je     c00106d6 <VgaText::doANSI_SGR(int)+0xc>
c0010708:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070b:	83 f9 07             	cmp    ecx,0x7
c001070e:	77 09                	ja     c0010719 <VgaText::doANSI_SGR(int)+0x4f>
c0010710:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c0010717:	eb 20                	jmp    c0010739 <VgaText::doANSI_SGR(int)+0x6f>
c0010719:	8d 4a d8             	lea    ecx,[edx-0x28]
c001071c:	83 f9 07             	cmp    ecx,0x7
c001071f:	77 09                	ja     c001072a <VgaText::doANSI_SGR(int)+0x60>
c0010721:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c0010728:	eb 25                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c001072a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001072d:	83 f9 07             	cmp    ecx,0x7
c0010730:	77 0e                	ja     c0010740 <VgaText::doANSI_SGR(int)+0x76>
c0010732:	8b 14 95 98 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e68]
c0010739:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001073f:	c3                   	ret    
c0010740:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010743:	83 f9 07             	cmp    ecx,0x7
c0010746:	77 0d                	ja     c0010755 <VgaText::doANSI_SGR(int)+0x8b>
c0010748:	8b 14 95 70 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e90]
c001074f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010755:	c3                   	ret    

c0010756 <VgaText::setDefaultBgColour(VgaColour)>:
c0010756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010764:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076a:	c3                   	ret    
c001076b:	90                   	nop

c001076c <VgaText::setDefaultFgColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010780:	c3                   	ret    
c0010781:	90                   	nop

c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010782:	53                   	push   ebx
c0010783:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010787:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001078f:	51                   	push   ecx
c0010790:	e8 c1 ff ff ff       	call   c0010756 <VgaText::setDefaultBgColour(VgaColour)>
c0010795:	58                   	pop    eax
c0010796:	5a                   	pop    edx
c0010797:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001079f:	5b                   	pop    ebx
c00107a0:	eb ca                	jmp    c001076c <VgaText::setDefaultFgColour(VgaColour)>

c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ab:	83 e0 0f             	and    eax,0xf
c00107ae:	c1 e2 04             	shl    edx,0x4
c00107b1:	09 d0                	or     eax,edx
c00107b3:	c3                   	ret    

c00107b4 <VgaText::scrollScreen()>:
c00107b4:	57                   	push   edi
c00107b5:	56                   	push   esi
c00107b6:	be 01 00 00 00       	mov    esi,0x1
c00107bb:	53                   	push   ebx
c00107bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107c6:	31 ff                	xor    edi,edi
c00107c8:	01 d9                	add    ecx,ebx
c00107ca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107cd:	83 fe 17             	cmp    esi,0x17
c00107d0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107d6:	75 28                	jne    c0010800 <VgaText::scrollScreen()+0x4c>
c00107d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107de:	74 1c                	je     c00107fc <VgaText::scrollScreen()+0x48>
c00107e0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107ef:	50                   	push   eax
c00107f0:	e8 ad ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	5a                   	pop    edx
c00107f7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fa:	eb 04                	jmp    c0010800 <VgaText::scrollScreen()+0x4c>
c00107fc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010800:	47                   	inc    edi
c0010801:	41                   	inc    ecx
c0010802:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010808:	75 c0                	jne    c00107ca <VgaText::scrollScreen()+0x16>
c001080a:	46                   	inc    esi
c001080b:	83 fe 18             	cmp    esi,0x18
c001080e:	75 b0                	jne    c00107c0 <VgaText::scrollScreen()+0xc>
c0010810:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c0010816:	75 24                	jne    c001083c <VgaText::scrollScreen()+0x88>
c0010818:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001081f:	74 08                	je     c0010829 <VgaText::scrollScreen()+0x75>
c0010821:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010827:	eb 13                	jmp    c001083c <VgaText::scrollScreen()+0x88>
c0010829:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001082f:	85 c0                	test   eax,eax
c0010831:	74 09                	je     c001083c <VgaText::scrollScreen()+0x88>
c0010833:	83 ec 0c             	sub    esp,0xc
c0010836:	53                   	push   ebx
c0010837:	ff d0                	call   eax
c0010839:	83 c4 10             	add    esp,0x10
c001083c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010840:	5b                   	pop    ebx
c0010841:	5e                   	pop    esi
c0010842:	5f                   	pop    edi
c0010843:	e9 1e fe ff ff       	jmp    c0010666 <VgaText::updateCursor()>

c0010848 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010848:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001084d:	c1 e0 08             	shl    eax,0x8
c0010850:	89 c2                	mov    edx,eax
c0010852:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010857:	09 d0                	or     eax,edx
c0010859:	c3                   	ret    

c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085a:	53                   	push   ebx
c001085b:	83 ec 08             	sub    esp,0x8
c001085e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010862:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010867:	50                   	push   eax
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	e8 2f ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010873:	5a                   	pop    edx
c0010874:	0f b6 c0             	movzx  eax,al
c0010877:	5b                   	pop    ebx
c0010878:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	e8 c4 ff ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010884:	5a                   	pop    edx
c0010885:	5a                   	pop    edx
c0010886:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001088c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010890:	0f b7 d2             	movzx  edx,dx
c0010893:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010898:	39 0d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ecx
c001089e:	75 14                	jne    c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108a6:	85 c0                	test   eax,eax
c00108a8:	74 0a                	je     c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108ae:	83 c4 08             	add    esp,0x8
c00108b1:	5b                   	pop    ebx
c00108b2:	ff e0                	jmp    eax
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <VgaText::getCursorX()>:
c00108ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108be:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <VgaText::getCursorY()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d0:	c3                   	ret    
c00108d1:	90                   	nop

c00108d2 <VgaText::setCursor(int, int)>:
c00108d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108da:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ea:	e9 77 fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursorX(int)>:
c00108f0:	83 ec 10             	sub    esp,0x10
c00108f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010901:	50                   	push   eax
c0010902:	e8 cb ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010907:	83 c4 1c             	add    esp,0x1c
c001090a:	c3                   	ret    
c001090b:	90                   	nop

c001090c <VgaText::setCursorY(int)>:
c001090c:	83 ec 10             	sub    esp,0x10
c001090f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010917:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001091d:	50                   	push   eax
c001091e:	e8 af ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010923:	83 c4 1c             	add    esp,0x1c
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::incrementCursor(bool)>:
c0010928:	56                   	push   esi
c0010929:	53                   	push   ebx
c001092a:	51                   	push   ecx
c001092b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001092f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010933:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010939:	40                   	inc    eax
c001093a:	83 f8 50             	cmp    eax,0x50
c001093d:	74 08                	je     c0010947 <VgaText::incrementCursor(bool)+0x1f>
c001093f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010945:	eb 33                	jmp    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010947:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001094d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010957:	8d 50 01             	lea    edx,[eax+0x1]
c001095a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010960:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010966:	75 12                	jne    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010971:	53                   	push   ebx
c0010972:	e8 3d fe ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 f0                	mov    eax,esi
c001097c:	84 c0                	test   al,al
c001097e:	74 0c                	je     c001098c <VgaText::incrementCursor(bool)+0x64>
c0010980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010984:	5a                   	pop    edx
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	e9 da fc ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c001098c:	58                   	pop    eax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateRAMUsageDisplay(int)>:
c0010990:	56                   	push   esi
c0010991:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c0010997:	53                   	push   ebx
c0010998:	bb 0a 00 00 00       	mov    ebx,0xa
c001099d:	6a 0f                	push   0xf
c001099f:	6a 00                	push   0x0
c00109a1:	e8 fc fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a6:	5a                   	pop    edx
c00109a7:	59                   	pop    ecx
c00109a8:	0f b6 c8             	movzx  ecx,al
c00109ab:	51                   	push   ecx
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	99                   	cdq    
c00109b1:	f7 fb                	idiv   ebx
c00109b3:	89 d3                	mov    ebx,edx
c00109b5:	83 c0 30             	add    eax,0x30
c00109b8:	83 c3 30             	add    ebx,0x30
c00109bb:	0f be c0             	movsx  eax,al
c00109be:	0f b6 db             	movzx  ebx,bl
c00109c1:	50                   	push   eax
c00109c2:	e8 81 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c7:	5a                   	pop    edx
c00109c8:	5a                   	pop    edx
c00109c9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d0:	51                   	push   ecx
c00109d1:	53                   	push   ebx
c00109d2:	e8 71 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5b                   	pop    ebx
c00109d8:	5a                   	pop    edx
c00109d9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e0:	51                   	push   ecx
c00109e1:	6a 25                	push   0x25
c00109e3:	e8 60 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e8:	59                   	pop    ecx
c00109e9:	5b                   	pop    ebx
c00109ea:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f1:	5b                   	pop    ebx
c00109f2:	5e                   	pop    esi
c00109f3:	c3                   	ret    

c00109f4 <VgaText::updateDiskUsage()>:
c00109f4:	55                   	push   ebp
c00109f5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fa:	57                   	push   edi
c00109fb:	8b 3d c0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c0
c0010a01:	56                   	push   esi
c0010a02:	53                   	push   ebx
c0010a03:	6a 0f                	push   0xf
c0010a05:	6a 00                	push   0x0
c0010a07:	e8 96 fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a0c:	5a                   	pop    edx
c0010a0d:	0f b6 d8             	movzx  ebx,al
c0010a10:	59                   	pop    ecx
c0010a11:	8b 35 e8 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326e8
c0010a17:	53                   	push   ebx
c0010a18:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 17 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a3c:	53                   	push   ebx
c0010a3d:	89 f0                	mov    eax,esi
c0010a3f:	99                   	cdq    
c0010a40:	f7 fd                	idiv   ebp
c0010a42:	99                   	cdq    
c0010a43:	f7 f9                	idiv   ecx
c0010a45:	8d 42 30             	lea    eax,[edx+0x30]
c0010a48:	0f b6 c0             	movzx  eax,al
c0010a4b:	50                   	push   eax
c0010a4c:	e8 f7 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a51:	5d                   	pop    ebp
c0010a52:	bd 64 00 00 00       	mov    ebp,0x64
c0010a57:	5a                   	pop    edx
c0010a58:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a5f:	53                   	push   ebx
c0010a60:	89 f0                	mov    eax,esi
c0010a62:	99                   	cdq    
c0010a63:	f7 fd                	idiv   ebp
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 d4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 f9                	idiv   ecx
c0010a83:	89 d6                	mov    esi,edx
c0010a85:	99                   	cdq    
c0010a86:	f7 f9                	idiv   ecx
c0010a88:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8b:	0f b6 c0             	movzx  eax,al
c0010a8e:	50                   	push   eax
c0010a8f:	e8 b4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a94:	5d                   	pop    ebp
c0010a95:	5a                   	pop    edx
c0010a96:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a9d:	53                   	push   ebx
c0010a9e:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa1:	0f b6 f0             	movzx  esi,al
c0010aa4:	56                   	push   esi
c0010aa5:	e8 9e fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaa:	5e                   	pop    esi
c0010aab:	8b 35 e4 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326e4
c0010ab1:	5d                   	pop    ebp
c0010ab2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab9:	bd 10 27 00 00       	mov    ebp,0x2710
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 fd                	idiv   ebp
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aca:	0f b6 c0             	movzx  eax,al
c0010acd:	50                   	push   eax
c0010ace:	e8 75 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad3:	5a                   	pop    edx
c0010ad4:	5d                   	pop    ebp
c0010ad5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010adc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae1:	53                   	push   ebx
c0010ae2:	89 f0                	mov    eax,esi
c0010ae4:	99                   	cdq    
c0010ae5:	f7 fd                	idiv   ebp
c0010ae7:	99                   	cdq    
c0010ae8:	f7 f9                	idiv   ecx
c0010aea:	8d 42 30             	lea    eax,[edx+0x30]
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	50                   	push   eax
c0010af1:	e8 52 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af6:	5a                   	pop    edx
c0010af7:	5d                   	pop    ebp
c0010af8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aff:	bd 64 00 00 00       	mov    ebp,0x64
c0010b04:	53                   	push   ebx
c0010b05:	89 f0                	mov    eax,esi
c0010b07:	99                   	cdq    
c0010b08:	f7 fd                	idiv   ebp
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	83 c2 30             	add    edx,0x30
c0010b10:	0f b6 d2             	movzx  edx,dl
c0010b13:	52                   	push   edx
c0010b14:	e8 2f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	5d                   	pop    ebp
c0010b1b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b22:	53                   	push   ebx
c0010b23:	89 f0                	mov    eax,esi
c0010b25:	99                   	cdq    
c0010b26:	f7 f9                	idiv   ecx
c0010b28:	89 d6                	mov    esi,edx
c0010b2a:	99                   	cdq    
c0010b2b:	f7 f9                	idiv   ecx
c0010b2d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b30:	0f b6 c0             	movzx  eax,al
c0010b33:	50                   	push   eax
c0010b34:	e8 0f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b39:	5a                   	pop    edx
c0010b3a:	59                   	pop    ecx
c0010b3b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b42:	53                   	push   ebx
c0010b43:	8d 46 30             	lea    eax,[esi+0x30]
c0010b46:	0f b6 f0             	movzx  esi,al
c0010b49:	56                   	push   esi
c0010b4a:	e8 f9 fc ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b58:	5b                   	pop    ebx
c0010b59:	5e                   	pop    esi
c0010b5a:	5f                   	pop    edi
c0010b5b:	5d                   	pop    ebp
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <VgaText::updateTitle()>:
c0010b5e:	53                   	push   ebx
c0010b5f:	31 c0                	xor    eax,eax
c0010b61:	83 ec 58             	sub    esp,0x58
c0010b64:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b68:	89 e1                	mov    ecx,esp
c0010b6a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b6e:	40                   	inc    eax
c0010b6f:	83 f8 50             	cmp    eax,0x50
c0010b72:	75 f6                	jne    c0010b6a <VgaText::updateTitle()+0xc>
c0010b74:	31 c0                	xor    eax,eax
c0010b76:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b7d:	84 db                	test   bl,bl
c0010b7f:	74 06                	je     c0010b87 <VgaText::updateTitle()+0x29>
c0010b81:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b84:	40                   	inc    eax
c0010b85:	eb ef                	jmp    c0010b76 <VgaText::updateTitle()+0x18>
c0010b87:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b8d:	85 c0                	test   eax,eax
c0010b8f:	74 09                	je     c0010b9a <VgaText::updateTitle()+0x3c>
c0010b91:	53                   	push   ebx
c0010b92:	53                   	push   ebx
c0010b93:	51                   	push   ecx
c0010b94:	52                   	push   edx
c0010b95:	ff d0                	call   eax
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	e8 55 fe ff ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0010b9f:	83 c4 58             	add    esp,0x58
c0010ba2:	5b                   	pop    ebx
c0010ba3:	c3                   	ret    

c0010ba4 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb2:	eb aa                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bb4 <VgaText::setTitleColour(VgaColour)>:
c0010bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bbc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc2:	eb 9a                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bc4 <VgaText::setTitle(char*)>:
c0010bc4:	53                   	push   ebx
c0010bc5:	83 ec 10             	sub    esp,0x10
c0010bc8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bd6:	50                   	push   eax
c0010bd7:	e8 58 fc fe ff       	call   c0000834 <strcpy>
c0010bdc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be0:	83 c4 18             	add    esp,0x18
c0010be3:	5b                   	pop    ebx
c0010be4:	e9 75 ff ff ff       	jmp    c0010b5e <VgaText::updateTitle()>
c0010be9:	90                   	nop

c0010bea <VgaText::decrementCursor(bool)>:
c0010bea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 07                	je     c0010c03 <VgaText::decrementCursor(bool)+0x19>
c0010bfc:	48                   	dec    eax
c0010bfd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c03:	84 c9                	test   cl,cl
c0010c05:	74 09                	je     c0010c10 <VgaText::decrementCursor(bool)+0x26>
c0010c07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0b:	e9 56 fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010c10:	c3                   	ret    
c0010c11:	90                   	nop

c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c12:	53                   	push   ebx
c0010c13:	83 ec 08             	sub    esp,0x8
c0010c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c26:	3c 07                	cmp    al,0x7
c0010c28:	75 2a                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2a:	a1 10 e5 02 c0       	mov    eax,ds:0xc002e510
c0010c2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c37:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c3f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 a4 30 00 00       	jmp    c0013cf8 <Buzzer::beep(int, int, bool)>
c0010c54:	3c 0d                	cmp    al,0xd
c0010c56:	75 0c                	jne    c0010c64 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c58:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c62:	eb 3b                	jmp    c0010c9f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c64:	3c 0a                	cmp    al,0xa
c0010c66:	75 40                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c68:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c6e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c78:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c81:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c87:	75 12                	jne    c0010c9b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 1c fb ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	e9 be f9 ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010ca8:	3c 08                	cmp    al,0x8
c0010caa:	75 31                	jne    c0010cdd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cac:	50                   	push   eax
c0010cad:	50                   	push   eax
c0010cae:	6a 01                	push   0x1
c0010cb0:	53                   	push   ebx
c0010cb1:	e8 34 ff ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010cb6:	5a                   	pop    edx
c0010cb7:	59                   	pop    ecx
c0010cb8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cbe:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd0:	6a 20                	push   0x20
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 82 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	83 c4 28             	add    esp,0x28
c0010cdb:	5b                   	pop    ebx
c0010cdc:	c3                   	ret    
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	0f be c0             	movsx  eax,al
c0010ce3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cef:	51                   	push   ecx
c0010cf0:	52                   	push   edx
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	e8 62 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cfc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d04:	83 c4 28             	add    esp,0x28
c0010d07:	5b                   	pop    ebx
c0010d08:	e9 1b fc ff ff       	jmp    c0010928 <VgaText::incrementCursor(bool)>
c0010d0d:	90                   	nop

c0010d0e <VgaText::isShowingCursor()>:
c0010d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d12:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d18:	c3                   	ret    
c0010d19:	90                   	nop

c0010d1a <VgaText::isBlinkDisabled()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d24:	83 f0 01             	xor    eax,0x1
c0010d27:	c3                   	ret    

c0010d28 <VgaText::setCursorHeight(int)>:
c0010d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d30:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d36:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d41:	e9 3a f9 ff ff       	jmp    c0010680 <VgaText::showCursor(bool)>

c0010d46 <VgaText::getCursorHeight()>:
c0010d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d50:	c3                   	ret    

c0010d51 <setActiveTerminal(VgaText*)>:
c0010d51:	53                   	push   ebx
c0010d52:	83 ec 08             	sub    esp,0x8
c0010d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d59:	85 db                	test   ebx,ebx
c0010d5b:	75 11                	jne    c0010d6e <setActiveTerminal(VgaText*)+0x1d>
c0010d5d:	c7 44 24 10 2c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a32c
c0010d65:	83 c4 08             	add    esp,0x8
c0010d68:	5b                   	pop    ebx
c0010d69:	e9 3d 98 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	53                   	push   ebx
c0010d71:	68 3a a3 02 c0       	push   0xc002a33a
c0010d76:	e8 7f 21 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0010d7b:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 0c                	je     c0010d93 <setActiveTerminal(VgaText*)+0x42>
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	50                   	push   eax
c0010d8b:	e8 d6 f8 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0010d99:	51                   	push   ecx
c0010d9a:	51                   	push   ecx
c0010d9b:	53                   	push   ebx
c0010d9c:	68 52 a3 02 c0       	push   0xc002a352
c0010da1:	e8 54 21 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0010da6:	83 c4 0c             	add    esp,0xc
c0010da9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010daf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db5:	53                   	push   ebx
c0010db6:	e8 17 fb ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 57 ff ff ff       	call   c0010d1a <VgaText::isBlinkDisabled()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	0f b6 c0             	movzx  eax,al
c0010dc7:	59                   	pop    ecx
c0010dc8:	50                   	push   eax
c0010dc9:	53                   	push   ebx
c0010dca:	e8 c1 f8 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0010dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd2:	e8 6f ff ff ff       	call   c0010d46 <VgaText::getCursorHeight()>
c0010dd7:	5a                   	pop    edx
c0010dd8:	59                   	pop    ecx
c0010dd9:	50                   	push   eax
c0010dda:	53                   	push   ebx
c0010ddb:	e8 48 ff ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dea:	75 0a                	jne    c0010df6 <setActiveTerminal(VgaText*)+0xa5>
c0010dec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010df6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfa:	83 c4 08             	add    esp,0x8
c0010dfd:	5b                   	pop    ebx
c0010dfe:	e9 0f f8 ff ff       	jmp    c0010612 <VgaText::load()>

c0010e03 <doTerminalCycle()>:
c0010e03:	83 ec 18             	sub    esp,0x18
c0010e06:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0010e0b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e11:	50                   	push   eax
c0010e12:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c0010e17:	e8 35 ff ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0010e1c:	83 c4 1c             	add    esp,0x1c
c0010e1f:	c3                   	ret    

c0010e20 <VgaText::doUpdate()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2a:	85 c0                	test   eax,eax
c0010e2c:	74 02                	je     c0010e30 <VgaText::doUpdate()+0x10>
c0010e2e:	ff e0                	jmp    eax
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop

c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e32:	55                   	push   ebp
c0010e33:	57                   	push   edi
c0010e34:	56                   	push   esi
c0010e35:	53                   	push   ebx
c0010e36:	83 ec 1c             	sub    esp,0x1c
c0010e39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e42:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e49:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e4c:	50                   	push   eax
c0010e4d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e52:	50                   	push   eax
c0010e53:	e8 4a f9 ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e58:	59                   	pop    ecx
c0010e59:	0f b6 c0             	movzx  eax,al
c0010e5c:	5b                   	pop    ebx
c0010e5d:	31 c9                	xor    ecx,ecx
c0010e5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e75:	0f b7 db             	movzx  ebx,bx
c0010e78:	01 db                	add    ebx,ebx
c0010e7a:	01 fb                	add    ebx,edi
c0010e7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e7f:	84 c0                	test   al,al
c0010e81:	0f 84 38 01 00 00    	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e87:	3c 0d                	cmp    al,0xd
c0010e89:	75 0f                	jne    c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e95:	e9 1f 01 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9a:	3c 0a                	cmp    al,0xa
c0010e9c:	75 5b                	jne    c0010ef9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e9e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eae:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eb7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ebd:	75 12                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec8:	55                   	push   ebp
c0010ec9:	e8 e6 f8 ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	55                   	push   ebp
c0010ed5:	e8 8c f7 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010eda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eeb:	31 c9                	xor    ecx,ecx
c0010eed:	0f b7 db             	movzx  ebx,bx
c0010ef0:	01 db                	add    ebx,ebx
c0010ef2:	01 fb                	add    ebx,edi
c0010ef4:	e9 c0 00 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef9:	3c 08                	cmp    al,0x8
c0010efb:	75 4e                	jne    c0010f4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010efd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f01:	53                   	push   ebx
c0010f02:	53                   	push   ebx
c0010f03:	6a 01                	push   0x1
c0010f05:	55                   	push   ebp
c0010f06:	e8 df fc ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010f0b:	58                   	pop    eax
c0010f0c:	5a                   	pop    edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f1f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f25:	6a 20                	push   0x20
c0010f27:	55                   	push   ebp
c0010f28:	e8 2d f9 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f2d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f35:	83 c4 20             	add    esp,0x20
c0010f38:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f42:	0f b7 db             	movzx  ebx,bx
c0010f45:	01 db                	add    ebx,ebx
c0010f47:	01 fb                	add    ebx,edi
c0010f49:	eb 6e                	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4b:	51                   	push   ecx
c0010f4c:	51                   	push   ecx
c0010f4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f51:	50                   	push   eax
c0010f52:	e8 f1 f8 ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f5d:	39 2d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebp
c0010f63:	75 2a                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f65:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	74 20                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6f:	52                   	push   edx
c0010f70:	52                   	push   edx
c0010f71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f85:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f88:	51                   	push   ecx
c0010f89:	55                   	push   ebp
c0010f8a:	ff d0                	call   eax
c0010f8c:	83 c4 20             	add    esp,0x20
c0010f8f:	83 c3 02             	add    ebx,0x2
c0010f92:	50                   	push   eax
c0010f93:	50                   	push   eax
c0010f94:	6a 00                	push   0x0
c0010f96:	55                   	push   ebp
c0010f97:	e8 8c f9 ff ff       	call   c0010928 <VgaText::incrementCursor(bool)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fa6:	75 0f                	jne    c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb0:	0f b7 db             	movzx  ebx,bx
c0010fb3:	01 db                	add    ebx,ebx
c0010fb5:	01 fb                	add    ebx,edi
c0010fb7:	b1 01                	mov    cl,0x1
c0010fb9:	46                   	inc    esi
c0010fba:	e9 bd fe ff ff       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 9a f6 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd3:	84 c9                	test   cl,cl
c0010fd5:	74 0c                	je     c0010fe3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	55                   	push   ebp
c0010fdb:	e8 40 fe ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fea:	83 c4 1c             	add    esp,0x1c
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	5d                   	pop    ebp
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::clearScreen()>:
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	31 f6                	xor    esi,esi
c0010ff6:	53                   	push   ebx
c0010ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffb:	52                   	push   edx
c0010ffc:	6a 00                	push   0x0
c0010ffe:	6a 00                	push   0x0
c0011000:	53                   	push   ebx
c0011001:	e8 cc f8 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011006:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011016:	7e 26                	jle    c001103e <VgaText::clearScreen()+0x4c>
c0011018:	31 ff                	xor    edi,edi
c001101a:	50                   	push   eax
c001101b:	50                   	push   eax
c001101c:	56                   	push   esi
c001101d:	57                   	push   edi
c001101e:	47                   	inc    edi
c001101f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011025:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102b:	6a 20                	push   0x20
c001102d:	53                   	push   ebx
c001102e:	e8 27 f8 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011033:	83 c4 20             	add    esp,0x20
c0011036:	83 ff 50             	cmp    edi,0x50
c0011039:	75 df                	jne    c001101a <VgaText::clearScreen()+0x28>
c001103b:	46                   	inc    esi
c001103c:	eb d2                	jmp    c0011010 <VgaText::clearScreen()+0x1e>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	53                   	push   ebx
c0011042:	e8 d9 fd ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0011047:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	5b                   	pop    ebx
c0011052:	5e                   	pop    esi
c0011053:	5f                   	pop    edi
c0011054:	c3                   	ret    
c0011055:	90                   	nop

c0011056 <VgaText::putchar(char)>:
c0011056:	56                   	push   esi
c0011057:	53                   	push   ebx
c0011058:	83 ec 14             	sub    esp,0x14
c001105b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001105f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011063:	3c 5b                	cmp    al,0x5b
c0011065:	75 21                	jne    c0011088 <VgaText::putchar(char)+0x32>
c0011067:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001106e:	74 28                	je     c0011098 <VgaText::putchar(char)+0x42>
c0011070:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011079:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011083:	e9 e2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011088:	3c 1b                	cmp    al,0x1b
c001108a:	75 0c                	jne    c0011098 <VgaText::putchar(char)+0x42>
c001108c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011093:	e9 d2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011098:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001109e:	84 c9                	test   cl,cl
c00110a0:	0f 84 ab 00 00 00    	je     c0011151 <VgaText::putchar(char)+0xfb>
c00110a6:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a9:	80 fa 3e             	cmp    dl,0x3e
c00110ac:	0f 87 82 00 00 00    	ja     c0011134 <VgaText::putchar(char)+0xde>
c00110b2:	3c 6d                	cmp    al,0x6d
c00110b4:	75 4d                	jne    c0011103 <VgaText::putchar(char)+0xad>
c00110b6:	31 f6                	xor    esi,esi
c00110b8:	31 d2                	xor    edx,edx
c00110ba:	31 c0                	xor    eax,eax
c00110bc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c2:	7e 30                	jle    c00110f4 <VgaText::putchar(char)+0x9e>
c00110c4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110cc:	80 fa 3b             	cmp    dl,0x3b
c00110cf:	75 17                	jne    c00110e8 <VgaText::putchar(char)+0x92>
c00110d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d5:	50                   	push   eax
c00110d6:	53                   	push   ebx
c00110d7:	e8 ee f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110dc:	59                   	pop    ecx
c00110dd:	31 d2                	xor    edx,edx
c00110df:	58                   	pop    eax
c00110e0:	31 c0                	xor    eax,eax
c00110e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110e6:	eb 09                	jmp    c00110f1 <VgaText::putchar(char)+0x9b>
c00110e8:	6b c0 0a             	imul   eax,eax,0xa
c00110eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110ef:	88 ca                	mov    dl,cl
c00110f1:	46                   	inc    esi
c00110f2:	eb c8                	jmp    c00110bc <VgaText::putchar(char)+0x66>
c00110f4:	84 d2                	test   dl,dl
c00110f6:	74 31                	je     c0011129 <VgaText::putchar(char)+0xd3>
c00110f8:	50                   	push   eax
c00110f9:	53                   	push   ebx
c00110fa:	e8 cb f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110ff:	58                   	pop    eax
c0011100:	5a                   	pop    edx
c0011101:	eb 26                	jmp    c0011129 <VgaText::putchar(char)+0xd3>
c0011103:	3c 4a                	cmp    al,0x4a
c0011105:	75 22                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011107:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001110e:	75 19                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	53                   	push   ebx
c0011114:	e8 d9 fe ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011119:	83 c4 0c             	add    esp,0xc
c001111c:	6a 00                	push   0x0
c001111e:	6a 00                	push   0x0
c0011120:	53                   	push   ebx
c0011121:	e8 ac f7 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011132:	eb 36                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011134:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113a:	83 fa 0e             	cmp    edx,0xe
c001113d:	7f 2b                	jg     c001116a <VgaText::putchar(char)+0x114>
c001113f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011142:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011148:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001114f:	eb 19                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011151:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011157:	0f be c0             	movsx  eax,al
c001115a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011160:	50                   	push   eax
c0011161:	53                   	push   ebx
c0011162:	e8 ab fa ff ff       	call   c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	83 c4 14             	add    esp,0x14
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	c3                   	ret    

c0011170 <VgaText::puts(char const*)>:
c0011170:	53                   	push   ebx
c0011171:	83 ec 08             	sub    esp,0x8
c0011174:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011178:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117b:	84 c0                	test   al,al
c001117d:	74 12                	je     c0011191 <VgaText::puts(char const*)+0x21>
c001117f:	43                   	inc    ebx
c0011180:	51                   	push   ecx
c0011181:	51                   	push   ecx
c0011182:	50                   	push   eax
c0011183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011187:	e8 ca fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	eb e7                	jmp    c0011178 <VgaText::puts(char const*)+0x8>
c0011191:	83 c4 08             	add    esp,0x8
c0011194:	5b                   	pop    ebx
c0011195:	c3                   	ret    

c0011196 <VgaText::putx(unsigned int)>:
c0011196:	57                   	push   edi
c0011197:	b9 11 00 00 00       	mov    ecx,0x11
c001119c:	56                   	push   esi
c001119d:	be 6e a3 02 c0       	mov    esi,0xc002a36e
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 20             	sub    esp,0x20
c00111a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111ae:	fc                   	cld    
c00111af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b1:	be 08 00 00 00       	mov    esi,0x8
c00111b6:	50                   	push   eax
c00111b7:	50                   	push   eax
c00111b8:	89 d8                	mov    eax,ebx
c00111ba:	c1 e3 04             	shl    ebx,0x4
c00111bd:	c1 e8 1c             	shr    eax,0x1c
c00111c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c5:	50                   	push   eax
c00111c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ca:	e8 87 fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	4e                   	dec    esi
c00111d3:	75 e1                	jne    c00111b6 <VgaText::putx(unsigned int)+0x20>
c00111d5:	83 c4 20             	add    esp,0x20
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	5f                   	pop    edi
c00111db:	c3                   	ret    

c00111dc <VgaText::VgaText(char const*)>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	53                   	push   ebx
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	83 ec 08             	sub    esp,0x8
c00111e6:	6a 00                	push   0x0
c00111e8:	50                   	push   eax
c00111e9:	e8 6e 05 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	ba d4 a3 02 c0       	mov    edx,0xc002a3d4
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	89 10                	mov    DWORD PTR [eax],edx
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011264:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126a:	bb 40 e4 02 c0       	mov    ebx,0xc002e440
c001126f:	b8 08 00 00 00       	mov    eax,0x8
c0011274:	fc                   	cld    
c0011275:	89 d7                	mov    edi,edx
c0011277:	89 de                	mov    esi,ebx
c0011279:	89 c1                	mov    ecx,eax
c001127b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011281:	05 1e 10 00 00       	add    eax,0x101e
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	50                   	push   eax
c001128e:	e8 a1 f5 fe ff       	call   c0000834 <strcpy>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	83 c0 0c             	add    eax,0xc
c00112ab:	83 ec 04             	sub    esp,0x4
c00112ae:	68 00 0f 00 00       	push   0xf00
c00112b3:	6a 00                	push   0x0
c00112b5:	50                   	push   eax
c00112b6:	e8 bd f4 fe ff       	call   c0000778 <memset>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 07                	push   0x7
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 b4 f4 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 02                	push   0x2
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 49 fa ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 04             	sub    esp,0x4
c00112e5:	6a 00                	push   0x0
c00112e7:	6a 00                	push   0x0
c00112e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ed:	e8 e0 f5 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	6a 01                	push   0x1
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 7d f3 ff ff       	call   c0010680 <VgaText::showCursor(bool)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	6a 01                	push   0x1
c001130b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130f:	e8 7c f3 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 cf fc ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	05 9e 10 00 00       	add    eax,0x109e
c001133a:	83 ec 04             	sub    esp,0x4
c001133d:	68 96 00 00 00       	push   0x96
c0011342:	6a 00                	push   0x0
c0011344:	50                   	push   eax
c0011345:	e8 2e f4 fe ff       	call   c0000778 <memset>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011351:	05 34 11 00 00       	add    eax,0x1134
c0011356:	83 ec 04             	sub    esp,0x4
c0011359:	68 2c 01 00 00       	push   0x12c
c001135e:	6a 00                	push   0x0
c0011360:	50                   	push   eax
c0011361:	e8 12 f4 fe ff       	call   c0000778 <memset>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	90                   	nop
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	5f                   	pop    edi
c001136d:	c3                   	ret    

c001136e <VgaText::receiveKey(unsigned char)>:
c001136e:	55                   	push   ebp
c001136f:	57                   	push   edi
c0011370:	56                   	push   esi
c0011371:	53                   	push   ebx
c0011372:	83 ec 1c             	sub    esp,0x1c
c0011375:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001137d:	84 db                	test   bl,bl
c001137f:	0f 84 c9 00 00 00    	je     c001144e <VgaText::receiveKey(unsigned char)+0xe0>
c0011385:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138b:	80 fb 08             	cmp    bl,0x8
c001138e:	75 2c                	jne    c00113bc <VgaText::receiveKey(unsigned char)+0x4e>
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	57                   	push   edi
c0011394:	e8 fb f3 fe ff       	call   c0000794 <strlen>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	85 c0                	test   eax,eax
c001139e:	74 41                	je     c00113e1 <VgaText::receiveKey(unsigned char)+0x73>
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	6a 08                	push   0x8
c00113a4:	56                   	push   esi
c00113a5:	e8 ac fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	e8 e2 f3 fe ff       	call   c0000794 <strlen>
c00113b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113ba:	eb 22                	jmp    c00113de <VgaText::receiveKey(unsigned char)+0x70>
c00113bc:	0f be c3             	movsx  eax,bl
c00113bf:	52                   	push   edx
c00113c0:	52                   	push   edx
c00113c1:	50                   	push   eax
c00113c2:	56                   	push   esi
c00113c3:	e8 8e fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d1:	59                   	pop    ecx
c00113d2:	5d                   	pop    ebp
c00113d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113d7:	50                   	push   eax
c00113d8:	57                   	push   edi
c00113d9:	e8 96 f5 fe ff       	call   c0000974 <strcat>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e8:	75 05                	jne    c00113ef <VgaText::receiveKey(unsigned char)+0x81>
c00113ea:	80 fb 0a             	cmp    bl,0xa
c00113ed:	75 53                	jne    c0011442 <VgaText::receiveKey(unsigned char)+0xd4>
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f8:	53                   	push   ebx
c00113f9:	e8 96 f3 fe ff       	call   c0000794 <strlen>
c00113fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011401:	89 c5                	mov    ebp,eax
c0011403:	e8 8c f3 fe ff       	call   c0000794 <strlen>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001140f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011414:	76 10                	jbe    c0011426 <VgaText::receiveKey(unsigned char)+0xb8>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	68 7f a3 02 c0       	push   0xc002a37f
c001141e:	e8 88 91 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	50                   	push   eax
c0011427:	50                   	push   eax
c0011428:	57                   	push   edi
c0011429:	53                   	push   ebx
c001142a:	e8 45 f5 fe ff       	call   c0000974 <strcat>
c001142f:	83 c4 0c             	add    esp,0xc
c0011432:	68 96 00 00 00       	push   0x96
c0011437:	6a 00                	push   0x0
c0011439:	57                   	push   edi
c001143a:	e8 39 f3 fe ff       	call   c0000778 <memset>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	56                   	push   esi
c0011446:	e8 d5 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 c4 1c             	add    esp,0x1c
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <VgaText::write(unsigned long long, void*, int*)>:
c0011456:	55                   	push   ebp
c0011457:	57                   	push   edi
c0011458:	56                   	push   esi
c0011459:	53                   	push   ebx
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011461:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011469:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011470:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011473:	39 eb                	cmp    ebx,ebp
c0011475:	74 13                	je     c001148a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011477:	43                   	inc    ebx
c0011478:	50                   	push   eax
c0011479:	50                   	push   eax
c001147a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001147e:	50                   	push   eax
c001147f:	56                   	push   esi
c0011480:	e8 d1 fb ff ff       	call   c0011056 <VgaText::putchar(char)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	eb e9                	jmp    c0011473 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011494:	56                   	push   esi
c0011495:	e8 86 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001149a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001149e:	89 38                	mov    DWORD PTR [eax],edi
c00114a0:	83 c4 1c             	add    esp,0x1c
c00114a3:	31 c0                	xor    eax,eax
c00114a5:	5b                   	pop    ebx
c00114a6:	5e                   	pop    esi
c00114a7:	5f                   	pop    edi
c00114a8:	5d                   	pop    ebp
c00114a9:	c3                   	ret    

c00114aa <newTerminal(char*)>:
c00114aa:	83 ec 28             	sub    esp,0x28
c00114ad:	68 60 12 00 00       	push   0x1260
c00114b2:	e8 89 e3 ff ff       	call   c000f840 <malloc>
c00114b7:	5a                   	pop    edx
c00114b8:	59                   	pop    ecx
c00114b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114bd:	50                   	push   eax
c00114be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c2:	e8 15 fd ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c00114c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cb:	83 c4 2c             	add    esp,0x2c
c00114ce:	c3                   	ret    
c00114cf:	90                   	nop

c00114d0 <TSS::TSS()>:
c00114d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114db:	90                   	nop
c00114dc:	c3                   	ret    
c00114dd:	90                   	nop

c00114de <TSS::setESP(unsigned long)>:
c00114de:	55                   	push   ebp
c00114df:	89 e5                	mov    ebp,esp
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ed:	90                   	nop
c00114ee:	5d                   	pop    ebp
c00114ef:	c3                   	ret    

c00114f0 <TSS::flush()>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 10             	sub    esp,0x10
c00114f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	83 c8 03             	or     eax,0x3
c00114fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011502:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011506:	66 89 d0             	mov    ax,dx
c0011509:	0f 00 d8             	ltr    ax
c001150c:	90                   	nop
c001150d:	c9                   	leave  
c001150e:	c3                   	ret    
c001150f:	90                   	nop

c0011510 <TSS::setup(unsigned long, unsigned long)>:
c0011510:	55                   	push   ebp
c0011511:	89 e5                	mov    ebp,esp
c0011513:	83 ec 18             	sub    esp,0x18
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	6a 68                	push   0x68
c001151b:	e8 20 e3 ff ff       	call   c000f840 <malloc>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	89 c2                	mov    edx,eax
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	83 ec 04             	sub    esp,0x4
c0011534:	6a 68                	push   0x68
c0011536:	6a 00                	push   0x0
c0011538:	50                   	push   eax
c0011539:	e8 3a f2 fe ff       	call   c0000778 <memset>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d8:	0f 20 da             	mov    edx,cr3
c00115db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ea:	83 ec 08             	sub    esp,0x8
c00115ed:	50                   	push   eax
c00115ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f1:	50                   	push   eax
c00115f2:	e8 27 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	6a 68                	push   0x68
c00115ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011602:	50                   	push   eax
c0011603:	e8 32 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011608:	83 c4 10             	add    esp,0x10
c001160b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001160f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011612:	83 e0 0f             	and    eax,0xf
c0011615:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011618:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161b:	83 c8 40             	or     eax,0x40
c001161e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011621:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162c:	05 78 01 00 00       	add    eax,0x178
c0011631:	83 ec 04             	sub    esp,0x4
c0011634:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011637:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163a:	50                   	push   eax
c001163b:	e8 2e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 c2                	mov    edx,eax
c0011645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011648:	89 10                	mov    DWORD PTR [eax],edx
c001164a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001164f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011655:	05 78 01 00 00       	add    eax,0x178
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	50                   	push   eax
c001165e:	e8 4f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011669:	8b 00                	mov    eax,DWORD PTR [eax]
c001166b:	83 ec 08             	sub    esp,0x8
c001166e:	50                   	push   eax
c001166f:	68 e8 a3 02 c0       	push   0xc002a3e8
c0011674:	e8 81 18 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011681:	c9                   	leave  
c0011682:	c3                   	ret    
c0011683:	90                   	nop

c0011684 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001168f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011694:	75 08                	jne    c001169e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011696:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001169c:	eb 38                	jmp    c00116d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001169e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a3:	75 17                	jne    c00116bc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116bc:	89 c1                	mov    ecx,eax
c00116be:	83 e1 fd             	and    ecx,0xfffffffd
c00116c1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116c7:	74 cd                	je     c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ce:	83 e0 ef             	and    eax,0xffffffef
c00116d1:	83 f8 08             	cmp    eax,0x8
c00116d4:	76 c0                	jbe    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116d6:	31 c0                	xor    eax,eax
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <ReservedFilename::isAtty()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e1:	31 c0                	xor    eax,eax
c00116e3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e9:	74 09                	je     c00116f4 <ReservedFilename::isAtty()+0x1a>
c00116eb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f1:	0f 94 c0             	sete   al
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011705:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170a:	75 08                	jne    c0011714 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001170c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011712:	eb 3d                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011714:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011719:	75 17                	jne    c0011732 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011723:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011729:	8b 10                	mov    edx,DWORD PTR [eax]
c001172b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001172f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011732:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011737:	75 04                	jne    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011739:	89 0a                	mov    DWORD PTR [edx],ecx
c001173b:	eb 14                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001173d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011742:	74 c8                	je     c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011744:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011749:	83 e0 ef             	and    eax,0xffffffef
c001174c:	83 f8 08             	cmp    eax,0x8
c001174f:	76 bb                	jbe    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011751:	31 c0                	xor    eax,eax
c0011753:	c3                   	ret    

c0011754 <UnixFile::getFileDescriptor()>:
c0011754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175b:	c3                   	ret    

c001175c <UnixFile::UnixFile(int)>:
c001175c:	53                   	push   ebx
c001175d:	83 ec 28             	sub    esp,0x28
c0011760:	ba d4 a4 02 c0       	mov    edx,0xc002a4d4
c0011765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011769:	89 10                	mov    DWORD PTR [eax],edx
c001176b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011773:	0f 8f 8c 01 00 00    	jg     c0011905 <UnixFile::UnixFile(int)+0x1a9>
c0011779:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001177e:	8d 50 01             	lea    edx,[eax+0x1]
c0011781:	89 15 20 d3 02 c0    	mov    DWORD PTR ds:0xc002d320,edx
c0011787:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001178e:	83 ec 08             	sub    esp,0x8
c0011791:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011795:	68 f8 e4 02 c0       	push   0xc002e4f8
c001179a:	e8 31 6f 01 00       	call   c00286d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	a0 f4 e4 02 c0       	mov    al,ds:0xc002e4f4
c00117a7:	83 f0 01             	xor    eax,0x1
c00117aa:	84 c0                	test   al,al
c00117ac:	0f 84 54 01 00 00    	je     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c00117b2:	c6 05 f4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4f4,0x1
c00117b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c8:	e8 73 e0 ff ff       	call   c000f840 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 03 ff ff 0f       	push   0xfffff03
c00117da:	53                   	push   ebx
c00117db:	e8 2c 01 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c00117e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f8:	e8 43 e0 ff ff       	call   c000f840 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 01 ff ff 0f       	push   0xfffff01
c001180a:	53                   	push   ebx
c001180b:	e8 fc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,ebx
c0011819:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011828:	e8 13 e0 ff ff       	call   c000f840 <malloc>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	89 c3                	mov    ebx,eax
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	68 00 ff ff 0f       	push   0xfffff00
c001183a:	53                   	push   ebx
c001183b:	e8 cc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0011849:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011858:	e8 e3 df ff ff       	call   c000f840 <malloc>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	89 c3                	mov    ebx,eax
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	68 02 ff ff 0f       	push   0xfffff02
c001186a:	53                   	push   ebx
c001186b:	e8 9c 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0011879:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011881:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011886:	7f 7e                	jg     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c0011888:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011897:	e8 a4 df ff ff       	call   c000f840 <malloc>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	89 c3                	mov    ebx,eax
c00118a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118aa:	83 ec 08             	sub    esp,0x8
c00118ad:	50                   	push   eax
c00118ae:	53                   	push   ebx
c00118af:	e8 58 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	89 1c 85 c0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b40],ebx
c00118c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d1:	e8 6a df ff ff       	call   c000f840 <malloc>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	89 c3                	mov    ebx,eax
c00118db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	50                   	push   eax
c00118e8:	53                   	push   ebx
c00118e9:	e8 1e 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f5:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c00118fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011900:	e9 7c ff ff ff       	jmp    c0011881 <UnixFile::UnixFile(int)+0x125>
c0011905:	90                   	nop
c0011906:	83 c4 28             	add    esp,0x28
c0011909:	5b                   	pop    ebx
c001190a:	c3                   	ret    
c001190b:	90                   	nop

c001190c <ReservedFilename::ReservedFilename(int)>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011913:	83 ec 08             	sub    esp,0x8
c0011916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191a:	50                   	push   eax
c001191b:	e8 3c fe ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	ba f0 a4 02 c0       	mov    edx,0xc002a4f0
c0011928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192c:	89 10                	mov    DWORD PTR [eax],edx
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011939:	90                   	nop
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	c3                   	ret    

c001193e <UnixFile::~UnixFile()>:
c001193e:	83 ec 1c             	sub    esp,0x1c
c0011941:	ba d4 a4 02 c0       	mov    edx,0xc002a4d4
c0011946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194a:	89 10                	mov    DWORD PTR [eax],edx
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011953:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011958:	7f 73                	jg     c00119cd <UnixFile::~UnixFile()+0x8f>
c001195a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 f8 e4 02 c0       	push   0xc002e4f8
c001196a:	e8 35 6e 01 00       	call   c00287a4 <LinkedList<UnixFile>::getFirstElement()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	68 f8 e4 02 c0       	push   0xc002e4f8
c001197e:	e8 29 6e 01 00       	call   c00287ac <LinkedList<UnixFile>::removeFirst()>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001198e:	74 40                	je     c00119d0 <UnixFile::~UnixFile()+0x92>
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011997:	68 f8 e4 02 c0       	push   0xc002e4f8
c001199c:	e8 2f 6d 01 00       	call   c00286d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a8:	8d 50 01             	lea    edx,[eax+0x1]
c00119ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119af:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b4:	0f 94 c0             	sete   al
c00119b7:	84 c0                	test   al,al
c00119b9:	74 a7                	je     c0011962 <UnixFile::~UnixFile()+0x24>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	68 ac a4 02 c0       	push   0xc002a4ac
c00119c3:	e8 e3 8b 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	eb 95                	jmp    c0011962 <UnixFile::~UnixFile()+0x24>
c00119cd:	90                   	nop
c00119ce:	eb 01                	jmp    c00119d1 <UnixFile::~UnixFile()+0x93>
c00119d0:	90                   	nop
c00119d1:	90                   	nop
c00119d2:	83 c4 1c             	add    esp,0x1c
c00119d5:	c3                   	ret    

c00119d6 <UnixFile::~UnixFile()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e0:	e8 59 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	6a 0c                	push   0xc
c00119ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f1:	e8 24 14 00 00       	call   c0012e1a <operator delete(void*, unsigned long)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	ba f0 a4 02 c0       	mov    edx,0xc002a4f0
c0011a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0a:	89 10                	mov    DWORD PTR [eax],edx
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	50                   	push   eax
c0011a14:	e8 25 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	90                   	nop
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    
c0011a21:	90                   	nop

c0011a22 <ReservedFilename::~ReservedFilename()>:
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a2c:	e8 cd ff ff ff       	call   c00119fe <ReservedFilename::~ReservedFilename()>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	6a 0c                	push   0xc
c0011a39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a3d:	e8 d8 13 00 00       	call   c0012e1a <operator delete(void*, unsigned long)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	c3                   	ret    

c0011a49 <getFromFileDescriptor(int)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a51:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a57:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a5d:	7f 2c                	jg     c0011a8b <getFromFileDescriptor(int)+0x42>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a67:	e8 38 6d 01 00       	call   c00287a4 <LinkedList<UnixFile>::getFirstElement()>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	75 04                	jne    c0011a77 <getFromFileDescriptor(int)+0x2e>
c0011a73:	31 c0                	xor    eax,eax
c0011a75:	eb 6e                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a77:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7a:	74 69                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a7c:	52                   	push   edx
c0011a7d:	52                   	push   edx
c0011a7e:	50                   	push   eax
c0011a7f:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a84:	e8 c5 6d 01 00       	call   c002884e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a89:	eb e1                	jmp    c0011a6c <getFromFileDescriptor(int)+0x23>
c0011a8b:	a1 ec e4 02 c0       	mov    eax,ds:0xc002e4ec
c0011a90:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a96:	74 4d                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a98:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c0011a9d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa3:	74 40                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011aa5:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0011aaa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab0:	74 33                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ab2:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0011ab7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011abd:	74 26                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011abf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac5:	83 f8 08             	cmp    eax,0x8
c0011ac8:	77 09                	ja     c0011ad3 <getFromFileDescriptor(int)+0x8a>
c0011aca:	8b 04 85 c0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b40]
c0011ad1:	eb 12                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ad3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad9:	83 fb 08             	cmp    ebx,0x8
c0011adc:	77 95                	ja     c0011a73 <getFromFileDescriptor(int)+0x2a>
c0011ade:	8b 04 9d 80 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b80]
c0011ae5:	83 c4 08             	add    esp,0x8
c0011ae8:	5b                   	pop    ebx
c0011ae9:	c3                   	ret    

c0011aea <__static_initialization_and_destruction_0(int, int)>:
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af2:	75 34                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011afc:	75 2a                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011b06:	e8 6d 6b 01 00       	call   c0028678 <LinkedList<UnixFile>::LinkedList()>
c0011b0b:	83 c4 10             	add    esp,0x10
c0011b0e:	83 ec 04             	sub    esp,0x4
c0011b11:	68 a8 d2 02 c0       	push   0xc002d2a8
c0011b16:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011b1b:	68 76 86 02 c0       	push   0xc0028676
c0011b20:	e8 6f 12 00 00       	call   c0012d94 <__cxa_atexit>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	90                   	nop
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	c3                   	ret    

c0011b2d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b2d:	83 ec 0c             	sub    esp,0xc
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	68 ff ff 00 00       	push   0xffff
c0011b38:	6a 01                	push   0x1
c0011b3a:	e8 ab ff ff ff       	call   c0011aea <__static_initialization_and_destruction_0(int, int)>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	83 c4 0c             	add    esp,0xc
c0011b45:	c3                   	ret    

c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b46:	53                   	push   ebx
c0011b47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b55:	89 c8                	mov    eax,ecx
c0011b57:	d1 e8                	shr    eax,1
c0011b59:	03 05 28 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d328
c0011b5f:	83 e1 01             	and    ecx,0x1
c0011b62:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b64:	75 09                	jne    c0011b6f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b66:	83 e2 f0             	and    edx,0xfffffff0
c0011b69:	09 da                	or     edx,ebx
c0011b6b:	88 10                	mov    BYTE PTR [eax],dl
c0011b6d:	5b                   	pop    ebx
c0011b6e:	c3                   	ret    
c0011b6f:	c1 e3 04             	shl    ebx,0x4
c0011b72:	83 e2 0f             	and    edx,0xf
c0011b75:	09 da                	or     edx,ebx
c0011b77:	88 10                	mov    BYTE PTR [eax],dl
c0011b79:	5b                   	pop    ebx
c0011b7a:	c3                   	ret    

c0011b7b <Virt::getPageState(unsigned long)>:
c0011b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7f:	8b 0d 28 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d328
c0011b85:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8b:	89 d0                	mov    eax,edx
c0011b8d:	d1 e8                	shr    eax,1
c0011b8f:	83 e2 01             	and    edx,0x1
c0011b92:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b95:	75 04                	jne    c0011b9b <Virt::getPageState(unsigned long)+0x20>
c0011b97:	83 e0 0f             	and    eax,0xf
c0011b9a:	c3                   	ret    
c0011b9b:	c0 e8 04             	shr    al,0x4
c0011b9e:	c3                   	ret    

c0011b9f <Virt::allocateKernelVirtualPages(int)>:
c0011b9f:	55                   	push   ebp
c0011ba0:	31 ed                	xor    ebp,ebp
c0011ba2:	57                   	push   edi
c0011ba3:	56                   	push   esi
c0011ba4:	53                   	push   ebx
c0011ba5:	31 db                	xor    ebx,ebx
c0011ba7:	83 ec 1c             	sub    esp,0x1c
c0011baa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bae:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb9:	57                   	push   edi
c0011bba:	e8 bc ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bbf:	5a                   	pop    edx
c0011bc0:	84 c0                	test   al,al
c0011bc2:	75 3a                	jne    c0011bfe <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc4:	85 db                	test   ebx,ebx
c0011bc6:	75 02                	jne    c0011bca <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc8:	89 fd                	mov    ebp,edi
c0011bca:	43                   	inc    ebx
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	74 5a                	je     c0011c29 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bcf:	47                   	inc    edi
c0011bd0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bd6:	76 31                	jbe    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd8:	c7 05 24 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d324,0xc8000
c0011be2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011be7:	75 28                	jne    c0011c11 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bee:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf3:	57                   	push   edi
c0011bf4:	e8 82 ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bf9:	5a                   	pop    edx
c0011bfa:	84 c0                	test   al,al
c0011bfc:	74 c6                	je     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bfe:	31 db                	xor    ebx,ebx
c0011c00:	47                   	inc    edi
c0011c01:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c07:	77 cf                	ja     c0011bd8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c09:	89 3d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edi
c0011c0f:	eb a8                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 04 a5 02 c0       	push   0xc002a504
c0011c19:	e8 8d 89 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0011c1e:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	eb 90                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c29:	89 2d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,ebp
c0011c2f:	4b                   	dec    ebx
c0011c30:	74 5f                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c32:	85 f6                	test   esi,esi
c0011c34:	74 3d                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c36:	89 e8                	mov    eax,ebp
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c3d:	eb 14                	jmp    c0011c53 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c3f:	6a 01                	push   0x1
c0011c41:	43                   	inc    ebx
c0011c42:	50                   	push   eax
c0011c43:	e8 fe fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	58                   	pop    eax
c0011c49:	39 f3                	cmp    ebx,esi
c0011c4b:	5a                   	pop    edx
c0011c4c:	74 25                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c4e:	a1 24 d3 02 c0       	mov    eax,ds:0xc002d324
c0011c53:	8d 50 01             	lea    edx,[eax+0x1]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	89 15 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edx
c0011c5e:	74 20                	je     c0011c80 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c60:	39 df                	cmp    edi,ebx
c0011c62:	75 db                	jne    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c64:	6a 03                	push   0x3
c0011c66:	43                   	inc    ebx
c0011c67:	50                   	push   eax
c0011c68:	e8 d9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	59                   	pop    ecx
c0011c6e:	39 f3                	cmp    ebx,esi
c0011c70:	58                   	pop    eax
c0011c71:	75 db                	jne    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c73:	83 c4 1c             	add    esp,0x1c
c0011c76:	89 e8                	mov    eax,ebp
c0011c78:	5b                   	pop    ebx
c0011c79:	c1 e0 0c             	shl    eax,0xc
c0011c7c:	5e                   	pop    esi
c0011c7d:	5f                   	pop    edi
c0011c7e:	5d                   	pop    ebp
c0011c7f:	c3                   	ret    
c0011c80:	6a 02                	push   0x2
c0011c82:	bb 01 00 00 00       	mov    ebx,0x1
c0011c87:	50                   	push   eax
c0011c88:	e8 b9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	58                   	pop    eax
c0011c8e:	5a                   	pop    edx
c0011c8f:	eb bd                	jmp    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c91:	6a 04                	push   0x4
c0011c93:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c96:	55                   	push   ebp
c0011c97:	a3 24 d3 02 c0       	mov    ds:0xc002d324,eax
c0011c9c:	e8 a5 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	59                   	pop    ecx
c0011ca2:	89 e8                	mov    eax,ebp
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c1 e0 0c             	shl    eax,0xc
c0011ca8:	83 c4 1c             	add    esp,0x1c
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	5d                   	pop    ebp
c0011caf:	c3                   	ret    

c0011cb0 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb0:	53                   	push   ebx
c0011cb1:	8b 15 04 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e504
c0011cb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbb:	b8 01 00 00 00       	mov    eax,0x1
c0011cc0:	89 cb                	mov    ebx,ecx
c0011cc2:	d3 e0                	shl    eax,cl
c0011cc4:	c1 eb 05             	shr    ebx,0x5
c0011cc7:	f7 d0                	not    eax
c0011cc9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ccc:	5b                   	pop    ebx
c0011ccd:	c3                   	ret    

c0011cce <Virt::swapIDToSector(unsigned long)>:
c0011cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd2:	0f af 05 2c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d32c
c0011cd9:	03 05 34 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d334
c0011cdf:	c3                   	ret    

c0011ce0 <Virt::allocateSwapfilePage()>:
c0011ce0:	55                   	push   ebp
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	57                   	push   edi
c0011ce4:	56                   	push   esi
c0011ce5:	53                   	push   ebx
c0011ce6:	83 ec 0c             	sub    esp,0xc
c0011ce9:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0011cef:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011cf4:	f7 f1                	div    ecx
c0011cf6:	39 0d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ecx
c0011cfc:	72 2d                	jb     c0011d2b <Virt::allocateSwapfilePage()+0x4b>
c0011cfe:	8b 35 04 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e504
c0011d04:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d06:	f6 c2 01             	test   dl,0x1
c0011d09:	74 3c                	je     c0011d47 <Virt::allocateSwapfilePage()+0x67>
c0011d0b:	31 c9                	xor    ecx,ecx
c0011d0d:	bf 01 00 00 00       	mov    edi,0x1
c0011d12:	eb 12                	jmp    c0011d26 <Virt::allocateSwapfilePage()+0x46>
c0011d14:	89 fd                	mov    ebp,edi
c0011d16:	89 ca                	mov    edx,ecx
c0011d18:	d3 e5                	shl    ebp,cl
c0011d1a:	c1 ea 05             	shr    edx,0x5
c0011d1d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d22:	85 ea                	test   edx,ebp
c0011d24:	74 2a                	je     c0011d50 <Virt::allocateSwapfilePage()+0x70>
c0011d26:	41                   	inc    ecx
c0011d27:	39 c8                	cmp    eax,ecx
c0011d29:	77 e9                	ja     c0011d14 <Virt::allocateSwapfilePage()+0x34>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	68 ab a6 02 c0       	push   0xc002a6ab
c0011d33:	e8 73 88 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	31 c9                	xor    ecx,ecx
c0011d3d:	83 c4 0c             	add    esp,0xc
c0011d40:	89 c8                	mov    eax,ecx
c0011d42:	5b                   	pop    ebx
c0011d43:	5e                   	pop    esi
c0011d44:	5f                   	pop    edi
c0011d45:	5d                   	pop    ebp
c0011d46:	c3                   	ret    
c0011d47:	89 f3                	mov    ebx,esi
c0011d49:	bd 01 00 00 00       	mov    ebp,0x1
c0011d4e:	31 c9                	xor    ecx,ecx
c0011d50:	09 ea                	or     edx,ebp
c0011d52:	89 c8                	mov    eax,ecx
c0011d54:	89 13                	mov    DWORD PTR [ebx],edx
c0011d56:	83 c4 0c             	add    esp,0xc
c0011d59:	5b                   	pop    ebx
c0011d5a:	5e                   	pop    esi
c0011d5b:	5f                   	pop    edi
c0011d5c:	5d                   	pop    ebp
c0011d5d:	c3                   	ret    

c0011d5e <Virt::virtualMemorySetup()>:
c0011d5e:	53                   	push   ebx
c0011d5f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d64:	83 ec 08             	sub    esp,0x8
c0011d67:	6a 0f                	push   0xf
c0011d69:	53                   	push   ebx
c0011d6a:	43                   	inc    ebx
c0011d6b:	e8 d6 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d70:	59                   	pop    ecx
c0011d71:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d77:	58                   	pop    eax
c0011d78:	75 ed                	jne    c0011d67 <Virt::virtualMemorySetup()+0x9>
c0011d7a:	83 ec 08             	sub    esp,0x8
c0011d7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d82:	68 00 00 00 c8       	push   0xc8000000
c0011d87:	68 c2 a6 02 c0       	push   0xc002a6c2
c0011d8c:	e8 69 11 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011d91:	58                   	pop    eax
c0011d92:	5a                   	pop    edx
c0011d93:	68 00 f0 ff ef       	push   0xeffff000
c0011d98:	68 d6 a6 02 c0       	push   0xc002a6d6
c0011d9d:	e8 58 11 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	83 ec 08             	sub    esp,0x8
c0011da8:	6a 00                	push   0x0
c0011daa:	53                   	push   ebx
c0011dab:	43                   	inc    ebx
c0011dac:	e8 95 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dba:	75 e9                	jne    c0011da5 <Virt::virtualMemorySetup()+0x47>
c0011dbc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc1:	83 ec 08             	sub    esp,0x8
c0011dc4:	6a 0f                	push   0xf
c0011dc6:	53                   	push   ebx
c0011dc7:	43                   	inc    ebx
c0011dc8:	e8 79 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dd6:	75 e9                	jne    c0011dc1 <Virt::virtualMemorySetup()+0x63>
c0011dd8:	83 c4 08             	add    esp,0x8
c0011ddb:	5b                   	pop    ebx
c0011ddc:	c3                   	ret    

c0011ddd <Virt::swappingSetup()>:
c0011ddd:	83 ec 14             	sub    esp,0x14
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011de7:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011ded:	c1 e8 05             	shr    eax,0x5
c0011df0:	50                   	push   eax
c0011df1:	68 ea a6 02 c0       	push   0xc002a6ea
c0011df6:	e8 ff 10 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011dfb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011e08:	c1 e8 05             	shr    eax,0x5
c0011e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e0e:	e8 2d da ff ff       	call   c000f840 <malloc>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	89 c1                	mov    ecx,eax
c0011e18:	a3 04 e5 02 c0       	mov    ds:0xc002e504,eax
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e24:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011e2a:	c1 e8 05             	shr    eax,0x5
c0011e2d:	50                   	push   eax
c0011e2e:	6a 00                	push   0x0
c0011e30:	51                   	push   ecx
c0011e31:	e8 42 e9 fe ff       	call   c0000778 <memset>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	c3                   	ret    

c0011e3a <Virt::getAKernelVAS()>:
c0011e3a:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0011e3f:	c3                   	ret    

c0011e40 <Virt::setupPageSwapping(int)>:
c0011e40:	57                   	push   edi
c0011e41:	56                   	push   esi
c0011e42:	53                   	push   ebx
c0011e43:	83 ec 1c             	sub    esp,0x1c
c0011e46:	68 14 01 00 00       	push   0x114
c0011e4b:	e8 f0 d9 ff ff       	call   c000f840 <malloc>
c0011e50:	83 c4 0c             	add    esp,0xc
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c0011e5b:	68 05 a7 02 c0       	push   0xc002a705
c0011e60:	50                   	push   eax
c0011e61:	e8 ec 15 00 00       	call   c0013452 <File::File(char const*, Process*)>
c0011e66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e69:	e8 c0 17 00 00       	call   c001362e <File::unlink()>
c0011e6e:	58                   	pop    eax
c0011e6f:	5a                   	pop    edx
c0011e70:	6a 12                	push   0x12
c0011e72:	56                   	push   esi
c0011e73:	e8 3e 16 00 00       	call   c00134b6 <File::open(FileOpenMode)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	0f 85 ca 00 00 00    	jne    c0011f4d <Virt::setupPageSwapping(int)+0x10d>
c0011e83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e8f:	c1 e3 08             	shl    ebx,0x8
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	68 00 00 01 00       	push   0x10000
c0011e9a:	e8 a1 d9 ff ff       	call   c000f840 <malloc>
c0011e9f:	83 c4 0c             	add    esp,0xc
c0011ea2:	89 c7                	mov    edi,eax
c0011ea4:	68 00 00 01 00       	push   0x10000
c0011ea9:	6a 00                	push   0x0
c0011eab:	50                   	push   eax
c0011eac:	e8 c7 e8 fe ff       	call   c0000778 <memset>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	85 db                	test   ebx,ebx
c0011eb6:	79 03                	jns    c0011ebb <Virt::setupPageSwapping(int)+0x7b>
c0011eb8:	83 c3 0f             	add    ebx,0xf
c0011ebb:	c1 fb 04             	sar    ebx,0x4
c0011ebe:	4b                   	dec    ebx
c0011ebf:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec2:	74 4b                	je     c0011f0f <Virt::setupPageSwapping(int)+0xcf>
c0011ec4:	83 ec 0c             	sub    esp,0xc
c0011ec7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ecd:	52                   	push   edx
c0011ece:	57                   	push   edi
c0011ecf:	6a 00                	push   0x0
c0011ed1:	68 00 00 01 00       	push   0x10000
c0011ed6:	56                   	push   esi
c0011ed7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eda:	83 c4 20             	add    esp,0x20
c0011edd:	85 c0                	test   eax,eax
c0011edf:	75 59                	jne    c0011f3a <Virt::setupPageSwapping(int)+0xfa>
c0011ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eea:	74 d2                	je     c0011ebe <Virt::setupPageSwapping(int)+0x7e>
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	4b                   	dec    ebx
c0011ef0:	50                   	push   eax
c0011ef1:	68 58 a7 02 c0       	push   0xc002a758
c0011ef6:	e8 ff 0f 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011efb:	c7 04 24 61 a7 02 c0 	mov    DWORD PTR [esp],0xc002a761
c0011f02:	e8 a4 86 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 fb ff             	cmp    ebx,0xffffffff
c0011f0d:	75 b5                	jne    c0011ec4 <Virt::setupPageSwapping(int)+0x84>
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	56                   	push   esi
c0011f13:	e8 fc 15 00 00       	call   c0013514 <File::close()>
c0011f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1b:	e8 40 d9 ff ff       	call   c000f860 <rfree>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	85 f6                	test   esi,esi
c0011f25:	74 0c                	je     c0011f33 <Virt::setupPageSwapping(int)+0xf3>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2c:	56                   	push   esi
c0011f2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	5b                   	pop    ebx
c0011f37:	5e                   	pop    esi
c0011f38:	5f                   	pop    edi
c0011f39:	c3                   	ret    
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	50                   	push   eax
c0011f3e:	68 40 a7 02 c0       	push   0xc002a740
c0011f43:	e8 b2 0f 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	eb 94                	jmp    c0011ee1 <Virt::setupPageSwapping(int)+0xa1>
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	68 1c a7 02 c0       	push   0xc002a71c
c0011f56:	e8 9f 0f 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0011f5b:	c7 04 24 25 a7 02 c0 	mov    DWORD PTR [esp],0xc002a725
c0011f62:	e8 44 86 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	e9 14 ff ff ff       	jmp    c0011e83 <Virt::setupPageSwapping(int)+0x43>
c0011f6f:	90                   	nop

c0011f70 <VAS::VAS()>:
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7f:	a3 08 e5 02 c0       	mov    ds:0xc002e508,eax
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f90:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f97:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f9e:	90                   	nop
c0011f9f:	c3                   	ret    

c0011fa0 <VAS::VAS(VAS*)>:
c0011fa0:	83 ec 0c             	sub    esp,0xc
c0011fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	68 24 a5 02 c0       	push   0xc002a524
c0011fb6:	e8 f0 85 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	90                   	nop
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	c3                   	ret    
c0011fc3:	90                   	nop

c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc8:	89 c2                	mov    edx,eax
c0011fca:	c1 e8 0a             	shr    eax,0xa
c0011fcd:	c1 ea 16             	shr    edx,0x16
c0011fd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd5:	19 c9                	sbb    ecx,ecx
c0011fd7:	c1 e2 0c             	shl    edx,0xc
c0011fda:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe0:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fec:	01 d0                	add    eax,edx
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <VAS::getPageTableEntry(unsigned long)>:
c0011ff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff4:	89 ca                	mov    edx,ecx
c0011ff6:	c1 e9 0a             	shr    ecx,0xa
c0011ff9:	c1 ea 16             	shr    edx,0x16
c0011ffc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012002:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012008:	c1 e0 0c             	shl    eax,0xc
c001200b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001200e:	c3                   	ret    

c001200f <Virt::freeKernelVirtualPages(unsigned long)>:
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	be 01 00 00 00       	mov    esi,0x1
c0012016:	53                   	push   ebx
c0012017:	83 ec 10             	sub    esp,0x10
c001201a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001201e:	c1 eb 0c             	shr    ebx,0xc
c0012021:	eb 3f                	jmp    c0012062 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012023:	e8 12 fe ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012028:	83 ec 08             	sub    esp,0x8
c001202b:	57                   	push   edi
c001202c:	50                   	push   eax
c001202d:	e8 be ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	8b 00                	mov    eax,DWORD PTR [eax]
c0012037:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203b:	f6 c4 04             	test   ah,0x4
c001203e:	75 5f                	jne    c001209f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012040:	80 fa 04             	cmp    dl,0x4
c0012043:	74 78                	je     c00120bd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012045:	80 fa 02             	cmp    dl,0x2
c0012048:	0f 84 88 00 00 00    	je     c00120d6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001204e:	80 fa 03             	cmp    dl,0x3
c0012051:	0f 84 ad 00 00 00    	je     c0012104 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012057:	fe ca                	dec    dl
c0012059:	0f 84 92 00 00 00    	je     c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001205f:	43                   	inc    ebx
c0012060:	31 f6                	xor    esi,esi
c0012062:	53                   	push   ebx
c0012063:	e8 13 fb ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0012068:	5f                   	pop    edi
c0012069:	89 df                	mov    edi,ebx
c001206b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001206f:	c1 e7 0c             	shl    edi,0xc
c0012072:	84 c0                	test   al,al
c0012074:	75 ad                	jne    c0012023 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	68 67 a7 02 c0       	push   0xc002a767
c001207e:	e8 28 85 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0012083:	e8 b2 fd ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012088:	5a                   	pop    edx
c0012089:	59                   	pop    ecx
c001208a:	57                   	push   edi
c001208b:	50                   	push   eax
c001208c:	e8 5f ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8b 00                	mov    eax,DWORD PTR [eax]
c0012096:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209a:	f6 c4 04             	test   ah,0x4
c001209d:	74 c0                	je     c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001209f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	50                   	push   eax
c00120ac:	e8 a7 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b8:	80 fa 04             	cmp    dl,0x4
c00120bb:	75 88                	jne    c0012045 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120bd:	89 f0                	mov    eax,esi
c00120bf:	84 c0                	test   al,al
c00120c1:	75 47                	jne    c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c3:	c7 44 24 20 48 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a548
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	e9 d5 84 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>
c00120d6:	89 f0                	mov    eax,esi
c00120d8:	84 c0                	test   al,al
c00120da:	75 15                	jne    c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120dc:	83 ec 0c             	sub    esp,0xc
c00120df:	68 83 a7 02 c0       	push   0xc002a783
c00120e4:	e8 c2 84 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	e9 6e ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	6a 00                	push   0x0
c00120f6:	53                   	push   ebx
c00120f7:	e8 4a fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	e9 5b ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012104:	89 f0                	mov    eax,esi
c0012106:	84 c0                	test   al,al
c0012108:	75 15                	jne    c001211f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210a:	83 ec 08             	sub    esp,0x8
c001210d:	6a 00                	push   0x0
c001210f:	53                   	push   ebx
c0012110:	e8 31 fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	5b                   	pop    ebx
c001211c:	5e                   	pop    esi
c001211d:	5f                   	pop    edi
c001211e:	c3                   	ret    
c001211f:	c7 44 24 20 9f a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a79f
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	5b                   	pop    ebx
c001212b:	5e                   	pop    esi
c001212c:	5f                   	pop    edi
c001212d:	e9 79 84 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>

c0012132 <VAS::freeAllocatedPages(unsigned long)>:
c0012132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001213e:	74 09                	je     c0012149 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012140:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012144:	e9 c6 fe ff ff       	jmp    c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012149:	c7 44 24 04 6c a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a56c
c0012151:	e9 a4 0d 00 00       	jmp    c0012efa <Dbg::kprintf(char const*, ...)>

c0012156 <VAS::virtualToPhysical(unsigned long)>:
c0012156:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	e8 8d fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012163:	5a                   	pop    edx
c0012164:	8b 00                	mov    eax,DWORD PTR [eax]
c0012166:	59                   	pop    ecx
c0012167:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216c:	c3                   	ret    
c001216d:	90                   	nop

c001216e <VAS::reflagRange(unsigned long, int, int, int)>:
c001216e:	55                   	push   ebp
c001216f:	57                   	push   edi
c0012170:	56                   	push   esi
c0012171:	53                   	push   ebx
c0012172:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012176:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001217e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012182:	85 db                	test   ebx,ebx
c0012184:	7e 22                	jle    c00121a8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012186:	c1 e3 0c             	shl    ebx,0xc
c0012189:	01 f3                	add    ebx,esi
c001218b:	56                   	push   esi
c001218c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012192:	55                   	push   ebp
c0012193:	e8 58 fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012198:	5a                   	pop    edx
c0012199:	59                   	pop    ecx
c001219a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219c:	21 f9                	and    ecx,edi
c001219e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a2:	39 f3                	cmp    ebx,esi
c00121a4:	89 08                	mov    DWORD PTR [eax],ecx
c00121a6:	75 e3                	jne    c001218b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a8:	5b                   	pop    ebx
c00121a9:	5e                   	pop    esi
c00121aa:	5f                   	pop    edi
c00121ab:	5d                   	pop    ebp
c00121ac:	c3                   	ret    
c00121ad:	90                   	nop

c00121ae <VAS::setToWriteCombining(unsigned long, int)>:
c00121ae:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00121b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c0:	75 01                	jne    c00121c3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c2:	c3                   	ret    
c00121c3:	68 80 00 00 00       	push   0x80
c00121c8:	6a ff                	push   0xffffffff
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	e8 93 ff ff ff       	call   c001216e <VAS::reflagRange(unsigned long, int, int, int)>
c00121db:	83 c4 14             	add    esp,0x14
c00121de:	c3                   	ret    
c00121df:	90                   	nop

c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f3:	19 c0                	sbb    eax,eax
c00121f5:	83 ca 03             	or     edx,0x3
c00121f8:	83 e0 fc             	and    eax,0xfffffffc
c00121fb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012202:	0f 20 d8             	mov    eax,cr3
c0012205:	0f 22 d8             	mov    cr3,eax
c0012208:	c3                   	ret    
c0012209:	90                   	nop

c001220a <VAS::~VAS()>:
c001220a:	83 ec 2c             	sub    esp,0x2c
c001220d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012215:	e8 6c bb 00 00       	call   c001dd86 <lockScheduler()>
c001221a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012224:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222a:	83 ec 04             	sub    esp,0x4
c001222d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012231:	6a 01                	push   0x1
c0012233:	50                   	push   eax
c0012234:	e8 a7 ff ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012244:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001224c:	0f 8f d7 00 00 00    	jg     c0012329 <VAS::~VAS()+0x11f>
c0012252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001225d:	c1 e2 02             	shl    edx,0x2
c0012260:	01 d0                	add    eax,edx
c0012262:	8b 00                	mov    eax,DWORD PTR [eax]
c0012264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226c:	83 e0 01             	and    eax,0x1
c001226f:	0f 84 ab 00 00 00    	je     c0012320 <VAS::~VAS()+0x116>
c0012275:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001227d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012285:	7f 75                	jg     c00122fc <VAS::~VAS()+0xf2>
c0012287:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228b:	c1 e0 0a             	shl    eax,0xa
c001228e:	89 c2                	mov    edx,eax
c0012290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012294:	01 d0                	add    eax,edx
c0012296:	c1 e0 0c             	shl    eax,0xc
c0012299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122ad:	83 ec 04             	sub    esp,0x4
c00122b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b4:	6a 01                	push   0x1
c00122b6:	50                   	push   eax
c00122b7:	e8 08 fd ff ff       	call   c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d1:	25 01 04 00 00       	and    eax,0x401
c00122d6:	3d 01 04 00 00       	cmp    eax,0x401
c00122db:	75 19                	jne    c00122f6 <VAS::~VAS()+0xec>
c00122dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 69 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fa:	eb 81                	jmp    c001227d <VAS::~VAS()+0x73>
c00122fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012300:	25 00 04 00 00       	and    eax,0x400
c0012305:	74 19                	je     c0012320 <VAS::~VAS()+0x116>
c0012307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 3f db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012320:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012324:	e9 1b ff ff ff       	jmp    c0012244 <VAS::~VAS()+0x3a>
c0012329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012330:	83 ec 0c             	sub    esp,0xc
c0012333:	50                   	push   eax
c0012334:	e8 d6 fc ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012340:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	50                   	push   eax
c0012347:	e8 0c db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012357:	c1 e0 02             	shl    eax,0x2
c001235a:	83 ec 08             	sub    esp,0x8
c001235d:	50                   	push   eax
c001235e:	68 90 a5 02 c0       	push   0xc002a590
c0012363:	e8 92 0b 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	e8 18 ba 00 00       	call   c001dd88 <unlockScheduler()>
c0012370:	90                   	nop
c0012371:	83 c4 2c             	add    esp,0x2c
c0012374:	c3                   	ret    
c0012375:	90                   	nop

c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012381:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012385:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238b:	77 08                	ja     c0012395 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001238d:	0f 20 d8             	mov    eax,cr3
c0012390:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012393:	75 47                	jne    c00123dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012399:	09 d8                	or     eax,ebx
c001239b:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a0:	75 57                	jne    c00123f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a2:	89 de                	mov    esi,ebx
c00123a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a7:	c1 ee 16             	shr    esi,0x16
c00123aa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b5:	74 54                	je     c001240b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c5:	c1 e6 0c             	shl    esi,0xc
c00123c8:	c1 eb 0a             	shr    ebx,0xa
c00123cb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d4:	83 c4 1c             	add    esp,0x1c
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	5f                   	pop    edi
c00123da:	5d                   	pop    ebp
c00123db:	c3                   	ret    
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 b0 a5 02 c0       	push   0xc002a5b0
c00123e4:	e8 11 0b 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f0:	09 d8                	or     eax,ebx
c00123f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00123f7:	74 a9                	je     c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 18 a6 02 c0       	push   0xc002a618
c0012401:	e8 a5 81 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	eb 97                	jmp    c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240f:	e8 ce da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012414:	89 c5                	mov    ebp,eax
c0012416:	e8 1f fa ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012422:	6a 01                	push   0x1
c0012424:	e8 76 f7 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0012429:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012430:	6a 01                	push   0x1
c0012432:	50                   	push   eax
c0012433:	55                   	push   ebp
c0012434:	81 cd 07 04 00 00    	or     ebp,0x407
c001243a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243e:	51                   	push   ecx
c001243f:	e8 26 02 00 00       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012444:	83 c4 1c             	add    esp,0x1c
c0012447:	68 00 10 00 00       	push   0x1000
c001244c:	6a 00                	push   0x0
c001244e:	50                   	push   eax
c001244f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012453:	e8 20 e3 fe ff       	call   c0000778 <memset>
c0012458:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245f:	e8 ab fb ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012468:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012471:	e9 41 ff ff ff       	jmp    c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012476 <VAS::allocatePages(int, int)>:
c0012476:	55                   	push   ebp
c0012477:	57                   	push   edi
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	83 ec 1c             	sub    esp,0x1c
c001247d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012481:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012486:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012492:	83 e0 01             	and    eax,0x1
c0012495:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012499:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001249d:	0f 85 cc 00 00 00    	jne    c001256f <VAS::allocatePages(int, int)+0xf9>
c00124a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124aa:	85 c0                	test   eax,eax
c00124ac:	0f 84 a1 00 00 00    	je     c0012553 <VAS::allocatePages(int, int)+0xdd>
c00124b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ba:	c1 e6 0c             	shl    esi,0xc
c00124bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c1:	85 c0                	test   eax,eax
c00124c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124c6:	7e 33                	jle    c00124fb <VAS::allocatePages(int, int)+0x85>
c00124c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00124d6:	e8 07 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124db:	55                   	push   ebp
c00124dc:	53                   	push   ebx
c00124dd:	50                   	push   eax
c00124de:	57                   	push   edi
c00124df:	e8 92 fe ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	74 03                	je     c00124f1 <VAS::allocatePages(int, int)+0x7b>
c00124ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f7:	39 de                	cmp    esi,ebx
c00124f9:	75 db                	jne    c00124d6 <VAS::allocatePages(int, int)+0x60>
c00124fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012500:	75 12                	jne    c0012514 <VAS::allocatePages(int, int)+0x9e>
c0012502:	0f 20 d8             	mov    eax,cr3
c0012505:	0f 22 d8             	mov    cr3,eax
c0012508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250c:	83 c4 1c             	add    esp,0x1c
c001250f:	5b                   	pop    ebx
c0012510:	5e                   	pop    esi
c0012511:	5f                   	pop    edi
c0012512:	5d                   	pop    ebp
c0012513:	c3                   	ret    
c0012514:	c1 ee 0a             	shr    esi,0xa
c0012517:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012521:	c1 eb 0a             	shr    ebx,0xa
c0012524:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012530:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012536:	39 c3                	cmp    ebx,eax
c0012538:	77 ce                	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001253a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012543:	39 d8                	cmp    eax,ebx
c0012545:	73 f3                	jae    c001253a <VAS::allocatePages(int, int)+0xc4>
c0012547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 3c a6 02 c0       	push   0xc002a63c
c001255b:	e8 4b 80 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0012560:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	e9 43 ff ff ff       	jmp    c00124b2 <VAS::allocatePages(int, int)+0x3c>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012576:	e8 24 f6 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001257b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012587:	0f 87 9b 00 00 00    	ja     c0012628 <VAS::allocatePages(int, int)+0x1b2>
c001258d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012591:	85 d2                	test   edx,edx
c0012593:	7e 3c                	jle    c00125d1 <VAS::allocatePages(int, int)+0x15b>
c0012595:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012599:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001259d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a1:	c1 e5 0c             	shl    ebp,0xc
c00125a4:	81 ce 00 04 00 00    	or     esi,0x400
c00125aa:	01 dd                	add    ebp,ebx
c00125ac:	e8 31 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	50                   	push   eax
c00125b4:	57                   	push   edi
c00125b5:	e8 bc fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	74 03                	je     c00125c7 <VAS::allocatePages(int, int)+0x151>
c00125c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125cd:	39 dd                	cmp    ebp,ebx
c00125cf:	75 db                	jne    c00125ac <VAS::allocatePages(int, int)+0x136>
c00125d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d6:	0f 84 26 ff ff ff    	je     c0012502 <VAS::allocatePages(int, int)+0x8c>
c00125dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e4:	89 d3                	mov    ebx,edx
c00125e6:	c1 e0 0c             	shl    eax,0xc
c00125e9:	c1 eb 0a             	shr    ebx,0xa
c00125ec:	01 d0                	add    eax,edx
c00125ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f4:	c1 e8 0a             	shr    eax,0xa
c00125f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012602:	2d 00 00 40 00       	sub    eax,0x400000
c0012607:	39 c3                	cmp    ebx,eax
c0012609:	0f 87 f9 fe ff ff    	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001260f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012612:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012618:	39 d8                	cmp    eax,ebx
c001261a:	73 f3                	jae    c001260f <VAS::allocatePages(int, int)+0x199>
c001261c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012620:	83 c4 1c             	add    esp,0x1c
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	5d                   	pop    ebp
c0012627:	c3                   	ret    
c0012628:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001262d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012633:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263a:	0f 84 4d ff ff ff    	je     c001258d <VAS::allocatePages(int, int)+0x117>
c0012640:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012648:	e9 40 ff ff ff       	jmp    c001258d <VAS::allocatePages(int, int)+0x117>
c001264d:	90                   	nop

c001264e <VAS::setCPUSpecific(unsigned long)>:
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	6a 05                	push   0x5
c0012653:	68 00 00 40 c2       	push   0xc2400000
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	e8 11 fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266a:	55                   	push   ebp
c001266b:	57                   	push   edi
c001266c:	56                   	push   esi
c001266d:	53                   	push   ebx
c001266e:	83 ec 1c             	sub    esp,0x1c
c0012671:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012676:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012680:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012684:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001268e:	83 e0 01             	and    eax,0x1
c0012691:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	85 c0                	test   eax,eax
c001269b:	7e 39                	jle    c00126d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001269d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a1:	89 f3                	mov    ebx,esi
c00126a3:	c1 e0 0c             	shl    eax,0xc
c00126a6:	01 f0                	add    eax,esi
c00126a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ac:	55                   	push   ebp
c00126ad:	53                   	push   ebx
c00126ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b2:	29 f0                	sub    eax,esi
c00126b4:	01 d8                	add    eax,ebx
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	e8 b9 fc ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c5:	74 03                	je     c00126ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d4:	75 d6                	jne    c00126ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126db:	75 10                	jne    c00126ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126dd:	0f 20 d8             	mov    eax,cr3
c00126e0:	0f 22 d8             	mov    cr3,eax
c00126e3:	83 c4 1c             	add    esp,0x1c
c00126e6:	89 f0                	mov    eax,esi
c00126e8:	5b                   	pop    ebx
c00126e9:	5e                   	pop    esi
c00126ea:	5f                   	pop    edi
c00126eb:	5d                   	pop    ebp
c00126ec:	c3                   	ret    
c00126ed:	89 f3                	mov    ebx,esi
c00126ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f3:	c1 eb 0a             	shr    ebx,0xa
c00126f6:	c1 e0 0c             	shl    eax,0xc
c00126f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ff:	01 f0                	add    eax,esi
c0012701:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012707:	c1 e8 0a             	shr    eax,0xa
c001270a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001270f:	2d 00 00 40 00       	sub    eax,0x400000
c0012714:	39 c3                	cmp    ebx,eax
c0012716:	77 cb                	ja     c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012718:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012721:	39 d8                	cmp    eax,ebx
c0012723:	73 f3                	jae    c0012718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	89 f0                	mov    eax,esi
c001272a:	5b                   	pop    ebx
c001272b:	5e                   	pop    esi
c001272c:	5f                   	pop    edi
c001272d:	5d                   	pop    ebp
c001272e:	c3                   	ret    
c001272f:	90                   	nop

c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012730:	55                   	push   ebp
c0012731:	57                   	push   edi
c0012732:	56                   	push   esi
c0012733:	53                   	push   ebx
c0012734:	83 ec 1c             	sub    esp,0x1c
c0012737:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001273f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012747:	a9 ff 0f 00 00       	test   eax,0xfff
c001274c:	75 4a                	jne    c0012798 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001274e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012752:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012755:	c1 eb 16             	shr    ebx,0x16
c0012758:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001275f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012763:	74 4d                	je     c00127b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012765:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012769:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001276d:	c1 e8 0a             	shr    eax,0xa
c0012770:	80 fa 01             	cmp    dl,0x1
c0012773:	19 d2                	sbb    edx,edx
c0012775:	c1 e3 0c             	shl    ebx,0xc
c0012778:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001277c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012782:	25 fc 0f 00 00       	and    eax,0xffc
c0012787:	01 d8                	add    eax,ebx
c0012789:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012790:	83 c4 1c             	add    esp,0x1c
c0012793:	5b                   	pop    ebx
c0012794:	5e                   	pop    esi
c0012795:	5f                   	pop    edi
c0012796:	5d                   	pop    ebp
c0012797:	c3                   	ret    
c0012798:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 68 a6 02 c0       	push   0xc002a668
c00127a4:	e8 02 7e 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b0:	eb 9c                	jmp    c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b6:	e8 27 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bb:	89 c5                	mov    ebp,eax
c00127bd:	e8 78 f6 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c9:	6a 01                	push   0x1
c00127cb:	e8 cf f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00127d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127d7:	6a 01                	push   0x1
c00127d9:	50                   	push   eax
c00127da:	55                   	push   ebp
c00127db:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e5:	51                   	push   ecx
c00127e6:	e8 7f fe ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127eb:	83 c4 1c             	add    esp,0x1c
c00127ee:	68 00 10 00 00       	push   0x1000
c00127f3:	6a 00                	push   0x0
c00127f5:	50                   	push   eax
c00127f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fa:	e8 79 df fe ff       	call   c0000778 <memset>
c00127ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012803:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012806:	e8 04 f8 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001280b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012814:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012818:	e9 48 ff ff ff       	jmp    c0012765 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001281d:	90                   	nop

c001281e <VAS::VAS(bool)>:
c001281e:	53                   	push   ebx
c001281f:	83 ec 28             	sub    esp,0x28
c0012822:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012826:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012840:	e8 9d d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012845:	89 c2                	mov    edx,eax
c0012847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284e:	e8 e7 f5 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012853:	89 c3                	mov    ebx,eax
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	6a 01                	push   0x1
c001285a:	e8 40 f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	89 c2                	mov    edx,eax
c0012864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	6a 03                	push   0x3
c0012870:	6a 01                	push   0x1
c0012872:	52                   	push   edx
c0012873:	50                   	push   eax
c0012874:	53                   	push   ebx
c0012875:	e8 f0 fd ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287a:	83 c4 20             	add    esp,0x20
c001287d:	89 c2                	mov    edx,eax
c001287f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012883:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012886:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012896:	7f 1c                	jg     c00128b4 <VAS::VAS(bool)+0x96>
c0012898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a3:	c1 e2 02             	shl    edx,0x2
c00128a6:	01 d0                	add    eax,edx
c00128a8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b2:	eb da                	jmp    c001288e <VAS::VAS(bool)+0x70>
c00128b4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c4:	7f 7a                	jg     c0012940 <VAS::VAS(bool)+0x122>
c00128c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ca:	2d 00 02 00 00       	sub    eax,0x200
c00128cf:	c1 e0 0c             	shl    eax,0xc
c00128d2:	83 c8 03             	or     eax,0x3
c00128d5:	89 c2                	mov    edx,eax
c00128d7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00128dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e8:	83 e0 10             	and    eax,0x10
c00128eb:	84 c0                	test   al,al
c00128ed:	74 07                	je     c00128f6 <VAS::VAS(bool)+0xd8>
c00128ef:	b8 00 01 00 00       	mov    eax,0x100
c00128f4:	eb 05                	jmp    c00128fb <VAS::VAS(bool)+0xdd>
c00128f6:	b8 00 00 00 00       	mov    eax,0x0
c00128fb:	09 d0                	or     eax,edx
c00128fd:	89 c1                	mov    ecx,eax
c00128ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012903:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012906:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290a:	c1 e2 02             	shl    edx,0x2
c001290d:	01 d0                	add    eax,edx
c001290f:	89 ca                	mov    edx,ecx
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012917:	2d 40 03 00 00       	sub    eax,0x340
c001291c:	83 f8 7f             	cmp    eax,0x7f
c001291f:	77 16                	ja     c0012937 <VAS::VAS(bool)+0x119>
c0012921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012925:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292c:	c1 e2 02             	shl    edx,0x2
c001292f:	01 d0                	add    eax,edx
c0012931:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012937:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293b:	e9 7c ff ff ff       	jmp    c00128bc <VAS::VAS(bool)+0x9e>
c0012940:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012951:	83 e0 10             	and    eax,0x10
c0012954:	84 c0                	test   al,al
c0012956:	74 07                	je     c001295f <VAS::VAS(bool)+0x141>
c0012958:	b8 03 41 00 00       	mov    eax,0x4103
c001295d:	eb 05                	jmp    c0012964 <VAS::VAS(bool)+0x146>
c001295f:	b8 03 40 00 00       	mov    eax,0x4003
c0012964:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012968:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012971:	89 02                	mov    DWORD PTR [edx],eax
c0012973:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012984:	83 ec 08             	sub    esp,0x8
c0012987:	50                   	push   eax
c0012988:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298c:	e8 bd fc ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ac:	83 e0 10             	and    eax,0x10
c00129af:	84 c0                	test   al,al
c00129b1:	74 07                	je     c00129ba <VAS::VAS(bool)+0x19c>
c00129b3:	b8 00 01 00 00       	mov    eax,0x100
c00129b8:	eb 05                	jmp    c00129bf <VAS::VAS(bool)+0x1a1>
c00129ba:	b8 00 00 00 00       	mov    eax,0x0
c00129bf:	09 c2                	or     edx,eax
c00129c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c8:	05 fc 0f 00 00       	add    eax,0xffc
c00129cd:	83 ca 03             	or     edx,0x3
c00129d0:	89 10                	mov    DWORD PTR [eax],edx
c00129d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 26 1c 00 00       	call   c001460c <Device::getName()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	83 ec 08             	sub    esp,0x8
c00129ec:	68 b9 a7 02 c0       	push   0xc002a7b9
c00129f1:	50                   	push   eax
c00129f2:	e8 c9 de fe ff       	call   c00008c0 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	0f 94 c0             	sete   al
c00129ff:	84 c0                	test   al,al
c0012a01:	74 70                	je     c0012a73 <VAS::VAS(bool)+0x255>
c0012a03:	e8 61 b3 00 00       	call   c001dd69 <disableIRQs()>
c0012a08:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a13:	05 7c 09 00 00       	add    eax,0x97c
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	50                   	push   eax
c0012a1c:	e8 9b c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a36:	05 7c 09 00 00       	add    eax,0x97c
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	50                   	push   eax
c0012a3f:	e8 78 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	83 ec 08             	sub    esp,0x8
c0012a4a:	50                   	push   eax
c0012a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a4f:	e8 9c f5 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5e:	6a 11                	push   0x11
c0012a60:	53                   	push   ebx
c0012a61:	50                   	push   eax
c0012a62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a66:	e8 0b f9 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	e8 04 b3 00 00       	call   c001dd77 <enableIRQs()>
c0012a73:	90                   	nop
c0012a74:	83 c4 28             	add    esp,0x28
c0012a77:	5b                   	pop    ebx
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 1c             	sub    esp,0x1c
c0012a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8d:	e8 f4 b2 00 00       	call   c001dd86 <lockScheduler()>
c0012a92:	83 ec 08             	sub    esp,0x8
c0012a95:	55                   	push   ebp
c0012a96:	68 8c a6 02 c0       	push   0xc002a68c
c0012a9b:	e8 5a 04 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012aa0:	e8 3b f2 ff ff       	call   c0011ce0 <Virt::allocateSwapfilePage()>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	89 c7                	mov    edi,eax
c0012aaa:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012aaf:	85 c0                	test   eax,eax
c0012ab1:	7e 3d                	jle    c0012af0 <VAS::evict(unsigned long)+0x76>
c0012ab3:	89 ee                	mov    esi,ebp
c0012ab5:	31 db                	xor    ebx,ebx
c0012ab7:	83 ec 0c             	sub    esp,0xc
c0012aba:	57                   	push   edi
c0012abb:	e8 0e f2 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012ac0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ac3:	01 d8                	add    eax,ebx
c0012ac5:	6a 01                	push   0x1
c0012ac7:	31 d2                	xor    edx,edx
c0012ac9:	43                   	inc    ebx
c0012aca:	52                   	push   edx
c0012acb:	81 c6 00 02 00 00    	add    esi,0x200
c0012ad1:	50                   	push   eax
c0012ad2:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012ad9:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0012ae0:	e8 a1 3c 00 00       	call   c0016786 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ae5:	83 c4 20             	add    esp,0x20
c0012ae8:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c0012aee:	7f c7                	jg     c0012ab7 <VAS::evict(unsigned long)+0x3d>
c0012af0:	83 ec 08             	sub    esp,0x8
c0012af3:	c1 e7 0b             	shl    edi,0xb
c0012af6:	55                   	push   ebp
c0012af7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012afb:	e8 f0 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b00:	89 c3                	mov    ebx,eax
c0012b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b04:	c1 e8 0c             	shr    eax,0xc
c0012b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b0a:	e8 49 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b11:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b17:	09 d7                	or     edi,edx
c0012b19:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b1b:	83 c4 2c             	add    esp,0x2c
c0012b1e:	5b                   	pop    ebx
c0012b1f:	5e                   	pop    esi
c0012b20:	5f                   	pop    edi
c0012b21:	5d                   	pop    ebp
c0012b22:	e9 61 b2 00 00       	jmp    c001dd88 <unlockScheduler()>
c0012b27:	90                   	nop

c0012b28 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b28:	57                   	push   edi
c0012b29:	56                   	push   esi
c0012b2a:	53                   	push   ebx
c0012b2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b2f:	83 ec 08             	sub    esp,0x8
c0012b32:	53                   	push   ebx
c0012b33:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b39:	68 c7 a7 02 c0       	push   0xc002a7c7
c0012b3e:	e8 b7 03 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012b43:	e8 3e b2 00 00       	call   c001dd86 <lockScheduler()>
c0012b48:	5a                   	pop    edx
c0012b49:	59                   	pop    ecx
c0012b4a:	53                   	push   ebx
c0012b4b:	68 db a7 02 c0       	push   0xc002a7db
c0012b50:	e8 a5 03 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012b55:	83 c4 10             	add    esp,0x10
c0012b58:	85 db                	test   ebx,ebx
c0012b5a:	74 29                	je     c0012b85 <VAS::tryLoadBackOffDisk(unsigned long)+0x5d>
c0012b5c:	83 ec 08             	sub    esp,0x8
c0012b5f:	53                   	push   ebx
c0012b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b64:	e8 87 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b69:	83 c4 10             	add    esp,0x10
c0012b6c:	89 c6                	mov    esi,eax
c0012b6e:	85 c0                	test   eax,eax
c0012b70:	74 08                	je     c0012b7a <VAS::tryLoadBackOffDisk(unsigned long)+0x52>
c0012b72:	f7 00 00 04 00 00    	test   DWORD PTR [eax],0x400
c0012b78:	75 11                	jne    c0012b8b <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c0012b7a:	e8 09 b2 00 00       	call   c001dd88 <unlockScheduler()>
c0012b7f:	5b                   	pop    ebx
c0012b80:	31 c0                	xor    eax,eax
c0012b82:	5e                   	pop    esi
c0012b83:	5f                   	pop    edi
c0012b84:	c3                   	ret    
c0012b85:	5b                   	pop    ebx
c0012b86:	31 c0                	xor    eax,eax
c0012b88:	5e                   	pop    esi
c0012b89:	5f                   	pop    edi
c0012b8a:	c3                   	ret    
c0012b8b:	83 ec 08             	sub    esp,0x8
c0012b8e:	53                   	push   ebx
c0012b8f:	68 ef a7 02 c0       	push   0xc002a7ef
c0012b94:	e8 61 03 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012b99:	c6 05 c0 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c0,0x1
c0012ba0:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012ba2:	e8 3b d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012ba7:	c1 ef 0b             	shr    edi,0xb
c0012baa:	c6 05 c0 e3 02 c0 00 	mov    BYTE PTR ds:0xc002e3c0,0x0
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	8b 16                	mov    edx,DWORD PTR [esi]
c0012bb6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bbc:	09 c2                	or     edx,eax
c0012bbe:	81 ca 01 08 00 00    	or     edx,0x801
c0012bc4:	89 16                	mov    DWORD PTR [esi],edx
c0012bc6:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012bcb:	85 c0                	test   eax,eax
c0012bcd:	7e 3b                	jle    c0012c0a <VAS::tryLoadBackOffDisk(unsigned long)+0xe2>
c0012bcf:	31 f6                	xor    esi,esi
c0012bd1:	83 ec 0c             	sub    esp,0xc
c0012bd4:	57                   	push   edi
c0012bd5:	e8 f4 f0 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012bda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012bdd:	01 f0                	add    eax,esi
c0012bdf:	6a 01                	push   0x1
c0012be1:	31 d2                	xor    edx,edx
c0012be3:	46                   	inc    esi
c0012be4:	52                   	push   edx
c0012be5:	81 c3 00 02 00 00    	add    ebx,0x200
c0012beb:	50                   	push   eax
c0012bec:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012bf3:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0012bfa:	e8 1b 3b 00 00       	call   c001671a <LogicalDisk::read(unsigned long long, int, void*)>
c0012bff:	83 c4 20             	add    esp,0x20
c0012c02:	39 35 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,esi
c0012c08:	7f c7                	jg     c0012bd1 <VAS::tryLoadBackOffDisk(unsigned long)+0xa9>
c0012c0a:	83 ec 0c             	sub    esp,0xc
c0012c0d:	57                   	push   edi
c0012c0e:	e8 9d f0 ff ff       	call   c0011cb0 <Virt::freeSwapfilePage(unsigned long)>
c0012c13:	e8 70 b1 00 00       	call   c001dd88 <unlockScheduler()>
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	b0 01                	mov    al,0x1
c0012c1d:	5b                   	pop    ebx
c0012c1e:	5e                   	pop    esi
c0012c1f:	5f                   	pop    edi
c0012c20:	c3                   	ret    
c0012c21:	90                   	nop

c0012c22 <VAS::scanForEviction(int, int)>:
c0012c22:	55                   	push   ebp
c0012c23:	57                   	push   edi
c0012c24:	56                   	push   esi
c0012c25:	53                   	push   ebx
c0012c26:	83 ec 1c             	sub    esp,0x1c
c0012c29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012c2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c31:	85 db                	test   ebx,ebx
c0012c33:	75 08                	jne    c0012c3d <VAS::scanForEviction(int, int)+0x1b>
c0012c35:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c3d:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c52:	31 ff                	xor    edi,edi
c0012c54:	eb 13                	jmp    c0012c69 <VAS::scanForEviction(int, int)+0x47>
c0012c56:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012c5b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c61:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012c67:	74 67                	je     c0012cd0 <VAS::scanForEviction(int, int)+0xae>
c0012c69:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012c6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012c70:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012c74:	74 e0                	je     c0012c56 <VAS::scanForEviction(int, int)+0x34>
c0012c76:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012c7c:	eb 0a                	jmp    c0012c88 <VAS::scanForEviction(int, int)+0x66>
c0012c7e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012c84:	39 eb                	cmp    ebx,ebp
c0012c86:	74 ce                	je     c0012c56 <VAS::scanForEviction(int, int)+0x34>
c0012c88:	55                   	push   ebp
c0012c89:	56                   	push   esi
c0012c8a:	e8 61 f3 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012c8f:	5a                   	pop    edx
c0012c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c92:	59                   	pop    ecx
c0012c93:	89 c2                	mov    edx,eax
c0012c95:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c9b:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ca1:	75 db                	jne    c0012c7e <VAS::scanForEviction(int, int)+0x5c>
c0012ca3:	a8 01                	test   al,0x1
c0012ca5:	74 d7                	je     c0012c7e <VAS::scanForEviction(int, int)+0x5c>
c0012ca7:	89 f8                	mov    eax,edi
c0012ca9:	99                   	cdq    
c0012caa:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012cae:	85 d2                	test   edx,edx
c0012cb0:	74 03                	je     c0012cb5 <VAS::scanForEviction(int, int)+0x93>
c0012cb2:	47                   	inc    edi
c0012cb3:	eb c9                	jmp    c0012c7e <VAS::scanForEviction(int, int)+0x5c>
c0012cb5:	83 ec 08             	sub    esp,0x8
c0012cb8:	55                   	push   ebp
c0012cb9:	56                   	push   esi
c0012cba:	e8 bb fd ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012cbf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012cce:	75 e2                	jne    c0012cb2 <VAS::scanForEviction(int, int)+0x90>
c0012cd0:	83 c4 1c             	add    esp,0x1c
c0012cd3:	5b                   	pop    ebx
c0012cd4:	5e                   	pop    esi
c0012cd5:	5f                   	pop    edi
c0012cd6:	5d                   	pop    ebp
c0012cd7:	c3                   	ret    

c0012cd8 <mapVASFirstTime>:
c0012cd8:	55                   	push   ebp
c0012cd9:	57                   	push   edi
c0012cda:	56                   	push   esi
c0012cdb:	53                   	push   ebx
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ce4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012ce7:	4a                   	dec    edx
c0012ce8:	0f 84 8e 00 00 00    	je     c0012d7c <mapVASFirstTime+0xa4>
c0012cee:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cf1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cf4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cf9:	c1 e5 15             	shl    ebp,0x15
c0012cfc:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d01:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d07:	29 eb                	sub    ebx,ebp
c0012d09:	29 ee                	sub    esi,ebp
c0012d0b:	e8 d2 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d10:	83 ec 0c             	sub    esp,0xc
c0012d13:	68 03 04 00 00       	push   0x403
c0012d18:	6a 01                	push   0x1
c0012d1a:	53                   	push   ebx
c0012d1b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d21:	50                   	push   eax
c0012d22:	57                   	push   edi
c0012d23:	e8 42 f9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d28:	83 c4 20             	add    esp,0x20
c0012d2b:	39 f3                	cmp    ebx,esi
c0012d2d:	75 dc                	jne    c0012d0b <mapVASFirstTime+0x33>
c0012d2f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d34:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d39:	29 ee                	sub    esi,ebp
c0012d3b:	29 e8                	sub    eax,ebp
c0012d3d:	89 c5                	mov    ebp,eax
c0012d3f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d43:	19 db                	sbb    ebx,ebx
c0012d45:	e8 98 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d4a:	83 e3 04             	and    ebx,0x4
c0012d4d:	83 ec 0c             	sub    esp,0xc
c0012d50:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d56:	53                   	push   ebx
c0012d57:	6a 01                	push   0x1
c0012d59:	56                   	push   esi
c0012d5a:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d60:	50                   	push   eax
c0012d61:	57                   	push   edi
c0012d62:	e8 03 f9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d67:	83 c4 20             	add    esp,0x20
c0012d6a:	39 f5                	cmp    ebp,esi
c0012d6c:	75 d1                	jne    c0012d3f <mapVASFirstTime+0x67>
c0012d6e:	0f 20 d8             	mov    eax,cr3
c0012d71:	0f 22 d8             	mov    cr3,eax
c0012d74:	83 c4 0c             	add    esp,0xc
c0012d77:	5b                   	pop    ebx
c0012d78:	5e                   	pop    esi
c0012d79:	5f                   	pop    edi
c0012d7a:	5d                   	pop    ebp
c0012d7b:	c3                   	ret    
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	68 05 a8 02 c0       	push   0xc002a805
c0012d84:	e8 71 01 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012d89:	83 c4 10             	add    esp,0x10
c0012d8c:	83 c4 0c             	add    esp,0xc
c0012d8f:	5b                   	pop    ebx
c0012d90:	5e                   	pop    esi
c0012d91:	5f                   	pop    edi
c0012d92:	5d                   	pop    ebp
c0012d93:	c3                   	ret    

c0012d94 <__cxa_atexit>:
c0012d94:	31 c0                	xor    eax,eax
c0012d96:	c3                   	ret    

c0012d97 <__cxa_finalize>:
c0012d97:	c3                   	ret    

c0012d98 <__stack_chk_fail>:
c0012d98:	55                   	push   ebp
c0012d99:	89 e5                	mov    ebp,esp
c0012d9b:	83 ec 14             	sub    esp,0x14
c0012d9e:	68 1e a8 02 c0       	push   0xc002a81e
c0012da3:	e8 52 01 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012da8:	58                   	pop    eax
c0012da9:	5a                   	pop    edx
c0012daa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012dad:	68 6e a8 02 c0       	push   0xc002a86e
c0012db2:	e8 43 01 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012db7:	59                   	pop    ecx
c0012db8:	58                   	pop    eax
c0012db9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dbc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dbf:	68 6e a8 02 c0       	push   0xc002a86e
c0012dc4:	e8 31 01 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012dc9:	5a                   	pop    edx
c0012dca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dcd:	59                   	pop    ecx
c0012dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dd3:	68 6e a8 02 c0       	push   0xc002a86e
c0012dd8:	e8 1d 01 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012ddd:	5a                   	pop    edx
c0012dde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012de1:	59                   	pop    ecx
c0012de2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012de4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012de6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012de9:	68 6e a8 02 c0       	push   0xc002a86e
c0012dee:	e8 07 01 00 00       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0012df3:	c7 04 24 76 a8 02 c0 	mov    DWORD PTR [esp],0xc002a876
c0012dfa:	e8 ac 77 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0012dff:	83 c4 10             	add    esp,0x10
c0012e02:	c9                   	leave  
c0012e03:	c3                   	ret    

c0012e04 <__cxa_pure_virtual>:
c0012e04:	83 ec 18             	sub    esp,0x18
c0012e07:	68 8e a8 02 c0       	push   0xc002a88e
c0012e0c:	e8 9a 77 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0012e11:	83 c4 1c             	add    esp,0x1c
c0012e14:	c3                   	ret    

c0012e15 <operator new[](unsigned long)>:
c0012e15:	e9 26 ca ff ff       	jmp    c000f840 <malloc>

c0012e1a <operator delete(void*, unsigned long)>:
c0012e1a:	e9 41 ca ff ff       	jmp    c000f860 <rfree>

c0012e1f <operator delete[](void*)>:
c0012e1f:	e9 3c ca ff ff       	jmp    c000f860 <rfree>

c0012e24 <operator delete[](void*, unsigned long)>:
c0012e24:	e9 37 ca ff ff       	jmp    c000f860 <rfree>

c0012e29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e29:	57                   	push   edi
c0012e2a:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e2f:	56                   	push   esi
c0012e30:	be a4 a8 02 c0       	mov    esi,0xc002a8a4
c0012e35:	53                   	push   ebx
c0012e36:	83 ec 40             	sub    esp,0x40
c0012e39:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e3d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e41:	fc                   	cld    
c0012e42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e44:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e48:	83 f9 3e             	cmp    ecx,0x3e
c0012e4b:	7e 05                	jle    c0012e52 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e4d:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e52:	89 df                	mov    edi,ebx
c0012e54:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e58:	eb 02                	jmp    c0012e5c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e5a:	89 c7                	mov    edi,eax
c0012e5c:	31 d2                	xor    edx,edx
c0012e5e:	46                   	inc    esi
c0012e5f:	89 f8                	mov    eax,edi
c0012e61:	f7 f1                	div    ecx
c0012e63:	39 cf                	cmp    edi,ecx
c0012e65:	73 f3                	jae    c0012e5a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e67:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e6a:	eb 02                	jmp    c0012e6e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e6c:	89 c3                	mov    ebx,eax
c0012e6e:	31 d2                	xor    edx,edx
c0012e70:	4e                   	dec    esi
c0012e71:	89 d8                	mov    eax,ebx
c0012e73:	f7 f1                	div    ecx
c0012e75:	39 cb                	cmp    ebx,ecx
c0012e77:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e7b:	88 16                	mov    BYTE PTR [esi],dl
c0012e7d:	73 ed                	jae    c0012e6c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e7f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e83:	83 c4 40             	add    esp,0x40
c0012e86:	5b                   	pop    ebx
c0012e87:	5e                   	pop    esi
c0012e88:	5f                   	pop    edi
c0012e89:	c3                   	ret    

c0012e8a <Dbg::logc(char)>:
c0012e8a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e8e:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e93:	ec                   	in     al,dx
c0012e94:	a8 20                	test   al,0x20
c0012e96:	74 fb                	je     c0012e93 <Dbg::logc(char)+0x9>
c0012e98:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e9d:	88 c8                	mov    al,cl
c0012e9f:	ee                   	out    dx,al
c0012ea0:	c3                   	ret    

c0012ea1 <Dbg::logs(char*)>:
c0012ea1:	53                   	push   ebx
c0012ea2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ea6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ea9:	84 c0                	test   al,al
c0012eab:	74 0f                	je     c0012ebc <Dbg::logs(char*)+0x1b>
c0012ead:	50                   	push   eax
c0012eae:	43                   	inc    ebx
c0012eaf:	e8 d6 ff ff ff       	call   c0012e8a <Dbg::logc(char)>
c0012eb4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012eb7:	5a                   	pop    edx
c0012eb8:	84 c0                	test   al,al
c0012eba:	75 f1                	jne    c0012ead <Dbg::logs(char*)+0xc>
c0012ebc:	5b                   	pop    ebx
c0012ebd:	c3                   	ret    

c0012ebe <Dbg::logWriteInt(unsigned int)>:
c0012ebe:	83 ec 10             	sub    esp,0x10
c0012ec1:	6a 0a                	push   0xa
c0012ec3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ec7:	50                   	push   eax
c0012ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ecc:	e8 58 ff ff ff       	call   c0012e29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ed1:	50                   	push   eax
c0012ed2:	e8 ca ff ff ff       	call   c0012ea1 <Dbg::logs(char*)>
c0012ed7:	83 c4 20             	add    esp,0x20
c0012eda:	c3                   	ret    

c0012edb <Dbg::logWriteIntBase(unsigned int, int)>:
c0012edb:	83 ec 10             	sub    esp,0x10
c0012ede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ee2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ee6:	50                   	push   eax
c0012ee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eeb:	e8 39 ff ff ff       	call   c0012e29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ef0:	50                   	push   eax
c0012ef1:	e8 ab ff ff ff       	call   c0012ea1 <Dbg::logs(char*)>
c0012ef6:	83 c4 20             	add    esp,0x20
c0012ef9:	c3                   	ret    

c0012efa <Dbg::kprintf(char const*, ...)>:
c0012efa:	55                   	push   ebp
c0012efb:	57                   	push   edi
c0012efc:	56                   	push   esi
c0012efd:	53                   	push   ebx
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f05:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f0d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f10:	84 c0                	test   al,al
c0012f12:	74 4a                	je     c0012f5e <Dbg::kprintf(char const*, ...)+0x64>
c0012f14:	31 db                	xor    ebx,ebx
c0012f16:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f19:	3c 25                	cmp    al,0x25
c0012f1b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f1e:	0f 85 e4 00 00 00    	jne    c0013008 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f24:	83 c3 02             	add    ebx,0x2
c0012f27:	8a 07                	mov    al,BYTE PTR [edi]
c0012f29:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f2c:	83 e8 25             	sub    eax,0x25
c0012f2f:	3c 53                	cmp    al,0x53
c0012f31:	0f 87 ba 00 00 00    	ja     c0012ff1 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f37:	0f b6 c0             	movzx  eax,al
c0012f3a:	ff 24 85 e4 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd571c]
c0012f41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f45:	89 c8                	mov    eax,ecx
c0012f47:	83 c1 04             	add    ecx,0x4
c0012f4a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f4e:	ff 30                	push   DWORD PTR [eax]
c0012f50:	e8 4c ff ff ff       	call   c0012ea1 <Dbg::logs(char*)>
c0012f55:	58                   	pop    eax
c0012f56:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f5a:	84 c0                	test   al,al
c0012f5c:	75 b8                	jne    c0012f16 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f5e:	83 c4 0c             	add    esp,0xc
c0012f61:	5b                   	pop    ebx
c0012f62:	5e                   	pop    esi
c0012f63:	5f                   	pop    edi
c0012f64:	5d                   	pop    ebp
c0012f65:	c3                   	ret    
c0012f66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f6a:	89 d0                	mov    eax,edx
c0012f6c:	83 c2 04             	add    edx,0x4
c0012f6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f73:	ff 30                	push   DWORD PTR [eax]
c0012f75:	e8 44 ff ff ff       	call   c0012ebe <Dbg::logWriteInt(unsigned int)>
c0012f7a:	58                   	pop    eax
c0012f7b:	eb d9                	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f81:	89 d0                	mov    eax,edx
c0012f83:	83 c2 04             	add    edx,0x4
c0012f86:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f8d:	50                   	push   eax
c0012f8e:	e8 f7 fe ff ff       	call   c0012e8a <Dbg::logc(char)>
c0012f93:	58                   	pop    eax
c0012f94:	eb c0                	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f96:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f9a:	89 c8                	mov    eax,ecx
c0012f9c:	83 c1 04             	add    ecx,0x4
c0012f9f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fa3:	ff 30                	push   DWORD PTR [eax]
c0012fa5:	e8 14 ff ff ff       	call   c0012ebe <Dbg::logWriteInt(unsigned int)>
c0012faa:	5f                   	pop    edi
c0012fab:	eb a9                	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fb1:	89 c8                	mov    eax,ecx
c0012fb3:	83 c1 04             	add    ecx,0x4
c0012fb6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fba:	6a 10                	push   0x10
c0012fbc:	ff 30                	push   DWORD PTR [eax]
c0012fbe:	e8 18 ff ff ff       	call   c0012edb <Dbg::logWriteIntBase(unsigned int, int)>
c0012fc3:	59                   	pop    ecx
c0012fc4:	5f                   	pop    edi
c0012fc5:	eb 8f                	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fcb:	89 d0                	mov    eax,edx
c0012fcd:	83 c2 08             	add    edx,0x8
c0012fd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fd4:	6a 10                	push   0x10
c0012fd6:	ff 30                	push   DWORD PTR [eax]
c0012fd8:	e8 fe fe ff ff       	call   c0012edb <Dbg::logWriteIntBase(unsigned int, int)>
c0012fdd:	58                   	pop    eax
c0012fde:	5a                   	pop    edx
c0012fdf:	e9 72 ff ff ff       	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe4:	6a 25                	push   0x25
c0012fe6:	e8 9f fe ff ff       	call   c0012e8a <Dbg::logc(char)>
c0012feb:	58                   	pop    eax
c0012fec:	e9 65 ff ff ff       	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff1:	6a 25                	push   0x25
c0012ff3:	e8 92 fe ff ff       	call   c0012e8a <Dbg::logc(char)>
c0012ff8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ffb:	50                   	push   eax
c0012ffc:	e8 89 fe ff ff       	call   c0012e8a <Dbg::logc(char)>
c0013001:	5a                   	pop    edx
c0013002:	59                   	pop    ecx
c0013003:	e9 4e ff ff ff       	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>
c0013008:	50                   	push   eax
c0013009:	89 eb                	mov    ebx,ebp
c001300b:	e8 7a fe ff ff       	call   c0012e8a <Dbg::logc(char)>
c0013010:	89 fd                	mov    ebp,edi
c0013012:	58                   	pop    eax
c0013013:	e9 3e ff ff ff       	jmp    c0012f56 <Dbg::kprintf(char const*, ...)+0x5c>

c0013018 <File::read(unsigned long long, void*, int*)>:
c0013018:	53                   	push   ebx
c0013019:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001301d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013021:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013028:	3c 19                	cmp    al,0x19
c001302a:	77 35                	ja     c0013061 <File::read(unsigned long long, void*, int*)+0x49>
c001302c:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0013033:	85 c0                	test   eax,eax
c0013035:	74 2a                	je     c0013061 <File::read(unsigned long long, void*, int*)+0x49>
c0013037:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001303d:	85 c0                	test   eax,eax
c001303f:	74 20                	je     c0013061 <File::read(unsigned long long, void*, int*)+0x49>
c0013041:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013045:	74 21                	je     c0013068 <File::read(unsigned long long, void*, int*)+0x50>
c0013047:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013049:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001304d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013053:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013057:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001305b:	5b                   	pop    ebx
c001305c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001305f:	ff e0                	jmp    eax
c0013061:	b8 0b 00 00 00       	mov    eax,0xb
c0013066:	eb 05                	jmp    c001306d <File::read(unsigned long long, void*, int*)+0x55>
c0013068:	b8 05 00 00 00       	mov    eax,0x5
c001306d:	5b                   	pop    ebx
c001306e:	c3                   	ret    
c001306f:	90                   	nop

c0013070 <File::write(unsigned long long, void*, int*)>:
c0013070:	53                   	push   ebx
c0013071:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013075:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013079:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013080:	3c 19                	cmp    al,0x19
c0013082:	77 35                	ja     c00130b9 <File::write(unsigned long long, void*, int*)+0x49>
c0013084:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c001308b:	85 c0                	test   eax,eax
c001308d:	74 2a                	je     c00130b9 <File::write(unsigned long long, void*, int*)+0x49>
c001308f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013095:	85 c0                	test   eax,eax
c0013097:	74 20                	je     c00130b9 <File::write(unsigned long long, void*, int*)+0x49>
c0013099:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001309d:	74 21                	je     c00130c0 <File::write(unsigned long long, void*, int*)+0x50>
c001309f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130b3:	5b                   	pop    ebx
c00130b4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130b7:	ff e0                	jmp    eax
c00130b9:	b8 0b 00 00 00       	mov    eax,0xb
c00130be:	eb 05                	jmp    c00130c5 <File::write(unsigned long long, void*, int*)+0x55>
c00130c0:	b8 05 00 00 00       	mov    eax,0x5
c00130c5:	5b                   	pop    ebx
c00130c6:	c3                   	ret    
c00130c7:	90                   	nop

c00130c8 <Directory::read(unsigned long long, void*, int*)>:
c00130c8:	53                   	push   ebx
c00130c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130d1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130d8:	3c 19                	cmp    al,0x19
c00130da:	77 35                	ja     c0013111 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130dc:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c00130e3:	85 c0                	test   eax,eax
c00130e5:	74 2a                	je     c0013111 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130ed:	85 c0                	test   eax,eax
c00130ef:	74 20                	je     c0013111 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130f5:	74 21                	je     c0013118 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130fd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013103:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013107:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001310b:	5b                   	pop    ebx
c001310c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001310f:	ff e0                	jmp    eax
c0013111:	b8 0b 00 00 00       	mov    eax,0xb
c0013116:	eb 05                	jmp    c001311d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013118:	b8 05 00 00 00       	mov    eax,0x5
c001311d:	5b                   	pop    ebx
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <Directory::write(unsigned long long, void*, int*)>:
c0013120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013124:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001312b:	b8 0b 00 00 00       	mov    eax,0xb
c0013130:	80 fa 19             	cmp    dl,0x19
c0013133:	77 18                	ja     c001314d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013135:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c001313c:	85 d2                	test   edx,edx
c001313e:	74 0d                	je     c001314d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013140:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013147:	19 c0                	sbb    eax,eax
c0013149:	83 e0 0a             	and    eax,0xa
c001314c:	40                   	inc    eax
c001314d:	c3                   	ret    

c001314e <File::isAtty()>:
c001314e:	31 c0                	xor    eax,eax
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <Directory::isAtty()>:
c0013152:	31 c0                	xor    eax,eax
c0013154:	c3                   	ret    
c0013155:	90                   	nop

c0013156 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013156:	b8 0a 00 00 00       	mov    eax,0xa
c001315b:	c3                   	ret    

c001315c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001315c:	b8 0a 00 00 00       	mov    eax,0xa
c0013161:	c3                   	ret    

c0013162 <File::~File()>:
c0013162:	83 ec 0c             	sub    esp,0xc
c0013165:	ba a0 aa 02 c0       	mov    edx,0xc002aaa0
c001316a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001316e:	89 10                	mov    DWORD PTR [eax],edx
c0013170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	50                   	push   eax
c0013178:	e8 c1 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c001317d:	83 c4 10             	add    esp,0x10
c0013180:	90                   	nop
c0013181:	83 c4 0c             	add    esp,0xc
c0013184:	c3                   	ret    
c0013185:	90                   	nop

c0013186 <File::~File()>:
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	83 ec 0c             	sub    esp,0xc
c001318c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013190:	e8 cd ff ff ff       	call   c0013162 <File::~File()>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	83 ec 08             	sub    esp,0x8
c001319b:	68 14 01 00 00       	push   0x114
c00131a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a4:	e8 71 fc ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	83 c4 0c             	add    esp,0xc
c00131af:	c3                   	ret    

c00131b0 <Directory::~Directory()>:
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c00131b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131bc:	89 10                	mov    DWORD PTR [eax],edx
c00131be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	50                   	push   eax
c00131c6:	e8 73 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00131cb:	83 c4 10             	add    esp,0x10
c00131ce:	90                   	nop
c00131cf:	83 c4 0c             	add    esp,0xc
c00131d2:	c3                   	ret    
c00131d3:	90                   	nop

c00131d4 <Directory::~Directory()>:
c00131d4:	83 ec 0c             	sub    esp,0xc
c00131d7:	83 ec 0c             	sub    esp,0xc
c00131da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131de:	e8 cd ff ff ff       	call   c00131b0 <Directory::~Directory()>
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	83 ec 08             	sub    esp,0x8
c00131e9:	68 14 01 00 00       	push   0x114
c00131ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f2:	e8 23 fc ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00131f7:	83 c4 10             	add    esp,0x10
c00131fa:	83 c4 0c             	add    esp,0xc
c00131fd:	c3                   	ret    

c00131fe <Filesystem::Filesystem()>:
c00131fe:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c0013203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013207:	89 10                	mov    DWORD PTR [eax],edx
c0013209:	8b 15 0c e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e50c
c001320f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013213:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001321a:	a3 0c e5 02 c0       	mov    ds:0xc002e50c,eax
c001321f:	90                   	nop
c0013220:	c3                   	ret    
c0013221:	90                   	nop

c0013222 <Filesystem::~Filesystem()>:
c0013222:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c0013227:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001322b:	89 10                	mov    DWORD PTR [eax],edx
c001322d:	90                   	nop
c001322e:	c3                   	ret    
c001322f:	90                   	nop

c0013230 <Filesystem::~Filesystem()>:
c0013230:	83 ec 0c             	sub    esp,0xc
c0013233:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013237:	e8 e6 ff ff ff       	call   c0013222 <Filesystem::~Filesystem()>
c001323c:	83 c4 04             	add    esp,0x4
c001323f:	83 ec 08             	sub    esp,0x8
c0013242:	6a 08                	push   0x8
c0013244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013248:	e8 cd fb ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	83 c4 0c             	add    esp,0xc
c0013253:	c3                   	ret    

c0013254 <Fs::getcwd(Process*, char*, int)>:
c0013254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013258:	31 c0                	xor    eax,eax
c001325a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001325d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013261:	7d 15                	jge    c0013278 <Fs::getcwd(Process*, char*, int)+0x24>
c0013263:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013267:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001326e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013271:	84 c9                	test   cl,cl
c0013273:	74 06                	je     c001327b <Fs::getcwd(Process*, char*, int)+0x27>
c0013275:	40                   	inc    eax
c0013276:	eb e2                	jmp    c001325a <Fs::getcwd(Process*, char*, int)+0x6>
c0013278:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001327b:	31 c0                	xor    eax,eax
c001327d:	c3                   	ret    

c001327e <Fs::initVFS()>:
c001327e:	83 ec 18             	sub    esp,0x18
c0013281:	6a 08                	push   0x8
c0013283:	e8 b8 c5 ff ff       	call   c000f840 <malloc>
c0013288:	89 04 24             	mov    DWORD PTR [esp],eax
c001328b:	e8 6a dc 00 00       	call   c0020efa <FAT::FAT()>
c0013290:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013297:	e8 a4 c5 ff ff       	call   c000f840 <malloc>
c001329c:	89 04 24             	mov    DWORD PTR [esp],eax
c001329f:	e8 ae ee 00 00       	call   c0022152 <ISO9660::ISO9660()>
c00132a4:	83 c4 1c             	add    esp,0x1c
c00132a7:	c3                   	ret    

c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132a8:	55                   	push   ebp
c00132a9:	57                   	push   edi
c00132aa:	56                   	push   esi
c00132ab:	53                   	push   ebx
c00132ac:	81 ec 10 04 00 00    	sub    esp,0x410
c00132b2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132b9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132c0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132c7:	68 00 04 00 00       	push   0x400
c00132cc:	6a 00                	push   0x0
c00132ce:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132d2:	56                   	push   esi
c00132d3:	e8 a0 d4 fe ff       	call   c0000778 <memset>
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132df:	75 0b                	jne    c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132e1:	50                   	push   eax
c00132e2:	50                   	push   eax
c00132e3:	57                   	push   edi
c00132e4:	56                   	push   esi
c00132e5:	e8 4a d5 fe ff       	call   c0000834 <strcpy>
c00132ea:	eb 41                	jmp    c001332d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132ec:	8a 07                	mov    al,BYTE PTR [edi]
c00132ee:	3c 5c                	cmp    al,0x5c
c00132f0:	74 04                	je     c00132f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132f2:	3c 2f                	cmp    al,0x2f
c00132f4:	75 18                	jne    c001330e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132f6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132f9:	3c 60                	cmp    al,0x60
c00132fb:	7e 03                	jle    c0013300 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132fd:	83 e8 20             	sub    eax,0x20
c0013300:	88 04 24             	mov    BYTE PTR [esp],al
c0013303:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001330a:	50                   	push   eax
c001330b:	50                   	push   eax
c001330c:	eb 18                	jmp    c0013326 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001330e:	50                   	push   eax
c001330f:	50                   	push   eax
c0013310:	55                   	push   ebp
c0013311:	56                   	push   esi
c0013312:	e8 1d d5 fe ff       	call   c0000834 <strcpy>
c0013317:	5a                   	pop    edx
c0013318:	59                   	pop    ecx
c0013319:	68 6d c1 02 c0       	push   0xc002c16d
c001331e:	56                   	push   esi
c001331f:	e8 50 d6 fe ff       	call   c0000974 <strcat>
c0013324:	5d                   	pop    ebp
c0013325:	58                   	pop    eax
c0013326:	57                   	push   edi
c0013327:	56                   	push   esi
c0013328:	e8 47 d6 fe ff       	call   c0000974 <strcat>
c001332d:	83 c4 10             	add    esp,0x10
c0013330:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013333:	3c 60                	cmp    al,0x60
c0013335:	7e 03                	jle    c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013337:	83 e8 20             	sub    eax,0x20
c001333a:	88 04 24             	mov    BYTE PTR [esp],al
c001333d:	88 03                	mov    BYTE PTR [ebx],al
c001333f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013346:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001334c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013350:	bf 03 00 00 00       	mov    edi,0x3
c0013355:	b8 03 00 00 00       	mov    eax,0x3
c001335a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001335d:	84 d2                	test   dl,dl
c001335f:	0f 84 91 00 00 00    	je     c00133f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013365:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013368:	80 fa 5c             	cmp    dl,0x5c
c001336b:	74 05                	je     c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001336d:	80 fa 2f             	cmp    dl,0x2f
c0013370:	75 12                	jne    c0013384 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013372:	89 c5                	mov    ebp,eax
c0013374:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013379:	74 09                	je     c0013384 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001337b:	40                   	inc    eax
c001337c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013380:	89 cf                	mov    edi,ecx
c0013382:	eb d6                	jmp    c001335a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013384:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013389:	75 5b                	jne    c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001338b:	80 fa 2e             	cmp    dl,0x2e
c001338e:	75 56                	jne    c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013390:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013394:	74 19                	je     c00133af <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013396:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001339b:	74 53                	je     c00133f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001339d:	89 f9                	mov    ecx,edi
c001339f:	41                   	inc    ecx
c00133a0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133a3:	80 fa 2f             	cmp    dl,0x2f
c00133a6:	74 f7                	je     c001339f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133a8:	80 fa 5c             	cmp    dl,0x5c
c00133ab:	74 f2                	je     c001339f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133ad:	eb d1                	jmp    c0013380 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133af:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133b4:	74 3a                	je     c00133f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133b6:	83 f8 03             	cmp    eax,0x3
c00133b9:	74 c5                	je     c0013380 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133bb:	41                   	inc    ecx
c00133bc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133bf:	80 fa 2f             	cmp    dl,0x2f
c00133c2:	74 f7                	je     c00133bb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133c4:	80 fa 5c             	cmp    dl,0x5c
c00133c7:	74 f2                	je     c00133bb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133c9:	48                   	dec    eax
c00133ca:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133ce:	75 06                	jne    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133d4:	eb f3                	jmp    c00133c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133da:	74 07                	je     c00133e3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133e0:	48                   	dec    eax
c00133e1:	eb f3                	jmp    c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133e3:	40                   	inc    eax
c00133e4:	eb 9a                	jmp    c0013380 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e6:	80 fa 2f             	cmp    dl,0x2f
c00133e9:	74 95                	je     c0013380 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133eb:	80 fa 5c             	cmp    dl,0x5c
c00133ee:	74 90                	je     c0013380 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133f0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133f3:	40                   	inc    eax
c00133f4:	eb 8a                	jmp    c0013380 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133f6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	53                   	push   ebx
c00133fe:	e8 91 d3 fe ff       	call   c0000794 <strlen>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001340b:	75 26                	jne    c0013433 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001340d:	83 ec 0c             	sub    esp,0xc
c0013410:	53                   	push   ebx
c0013411:	e8 7e d3 fe ff       	call   c0000794 <strlen>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001341e:	74 26                	je     c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	53                   	push   ebx
c0013424:	e8 6b d3 fe ff       	call   c0000794 <strlen>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013431:	eb c7                	jmp    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013433:	83 ec 0c             	sub    esp,0xc
c0013436:	53                   	push   ebx
c0013437:	e8 58 d3 fe ff       	call   c0000794 <strlen>
c001343c:	83 c4 10             	add    esp,0x10
c001343f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013444:	74 c7                	je     c001340d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013446:	81 c4 0c 04 00 00    	add    esp,0x40c
c001344c:	5b                   	pop    ebx
c001344d:	5e                   	pop    esi
c001344e:	5f                   	pop    edi
c001344f:	5d                   	pop    ebp
c0013450:	c3                   	ret    
c0013451:	90                   	nop

c0013452 <File::File(char const*, Process*)>:
c0013452:	83 ec 0c             	sub    esp,0xc
c0013455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013459:	83 ec 08             	sub    esp,0x8
c001345c:	6a 00                	push   0x0
c001345e:	50                   	push   eax
c001345f:	e8 f8 e2 ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	ba a0 aa 02 c0       	mov    edx,0xc002aaa0
c001346c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013470:	89 10                	mov    DWORD PTR [eax],edx
c0013472:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013476:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001347c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013480:	83 c0 0d             	add    eax,0xd
c0013483:	83 ec 04             	sub    esp,0x4
c0013486:	52                   	push   edx
c0013487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001348b:	50                   	push   eax
c001348c:	e8 17 fe ff ff       	call   c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013498:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001349b:	8d 50 bf             	lea    edx,[eax-0x41]
c001349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134b0:	90                   	nop
c00134b1:	83 c4 0c             	add    esp,0xc
c00134b4:	c3                   	ret    
c00134b5:	90                   	nop

c00134b6 <File::open(FileOpenMode)>:
c00134b6:	53                   	push   ebx
c00134b7:	b8 0b 00 00 00       	mov    eax,0xb
c00134bc:	83 ec 08             	sub    esp,0x8
c00134bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134ca:	80 fa 19             	cmp    dl,0x19
c00134cd:	77 40                	ja     c001350f <File::open(FileOpenMode)+0x59>
c00134cf:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c00134d6:	85 d2                	test   edx,edx
c00134d8:	74 35                	je     c001350f <File::open(FileOpenMode)+0x59>
c00134da:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134e0:	85 d2                	test   edx,edx
c00134e2:	74 2b                	je     c001350f <File::open(FileOpenMode)+0x59>
c00134e4:	b8 06 00 00 00       	mov    eax,0x6
c00134e9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134ed:	75 20                	jne    c001350f <File::open(FileOpenMode)+0x59>
c00134ef:	8b 02                	mov    eax,DWORD PTR [edx]
c00134f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134fb:	51                   	push   ecx
c00134fc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134ff:	51                   	push   ecx
c0013500:	52                   	push   edx
c0013501:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	85 c0                	test   eax,eax
c0013509:	75 04                	jne    c001350f <File::open(FileOpenMode)+0x59>
c001350b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001350f:	83 c4 08             	add    esp,0x8
c0013512:	5b                   	pop    ebx
c0013513:	c3                   	ret    

c0013514 <File::close()>:
c0013514:	53                   	push   ebx
c0013515:	b8 0b 00 00 00       	mov    eax,0xb
c001351a:	83 ec 08             	sub    esp,0x8
c001351d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013521:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013528:	80 fa 19             	cmp    dl,0x19
c001352b:	77 41                	ja     c001356e <File::close()+0x5a>
c001352d:	8b 1c 95 a0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1660]
c0013534:	85 db                	test   ebx,ebx
c0013536:	74 36                	je     c001356e <File::close()+0x5a>
c0013538:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001353f:	74 2d                	je     c001356e <File::close()+0x5a>
c0013541:	b8 05 00 00 00       	mov    eax,0x5
c0013546:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001354a:	74 22                	je     c001356e <File::close()+0x5a>
c001354c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013550:	8b 04 95 a0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1660]
c0013557:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001355d:	53                   	push   ebx
c001355e:	53                   	push   ebx
c001355f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013561:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013567:	50                   	push   eax
c0013568:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001356b:	83 c4 10             	add    esp,0x10
c001356e:	83 c4 08             	add    esp,0x8
c0013571:	5b                   	pop    ebx
c0013572:	c3                   	ret    
c0013573:	90                   	nop

c0013574 <File::seek(unsigned long long)>:
c0013574:	56                   	push   esi
c0013575:	53                   	push   ebx
c0013576:	b8 0b 00 00 00       	mov    eax,0xb
c001357b:	51                   	push   ecx
c001357c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013580:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013584:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001358b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001358f:	80 fa 19             	cmp    dl,0x19
c0013592:	77 31                	ja     c00135c5 <File::seek(unsigned long long)+0x51>
c0013594:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c001359b:	85 d2                	test   edx,edx
c001359d:	74 26                	je     c00135c5 <File::seek(unsigned long long)+0x51>
c001359f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a5:	85 d2                	test   edx,edx
c00135a7:	74 1c                	je     c00135c5 <File::seek(unsigned long long)+0x51>
c00135a9:	b8 05 00 00 00       	mov    eax,0x5
c00135ae:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135b2:	74 11                	je     c00135c5 <File::seek(unsigned long long)+0x51>
c00135b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b6:	53                   	push   ebx
c00135b7:	51                   	push   ecx
c00135b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135be:	52                   	push   edx
c00135bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	5a                   	pop    edx
c00135c6:	5b                   	pop    ebx
c00135c7:	5e                   	pop    esi
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <File::tell(unsigned long long*)>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	b8 0b 00 00 00       	mov    eax,0xb
c00135d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135dd:	80 fa 19             	cmp    dl,0x19
c00135e0:	77 34                	ja     c0013616 <File::tell(unsigned long long*)+0x4c>
c00135e2:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c00135e9:	85 d2                	test   edx,edx
c00135eb:	74 29                	je     c0013616 <File::tell(unsigned long long*)+0x4c>
c00135ed:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135f3:	85 d2                	test   edx,edx
c00135f5:	74 1f                	je     c0013616 <File::tell(unsigned long long*)+0x4c>
c00135f7:	b8 05 00 00 00       	mov    eax,0x5
c00135fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013600:	74 14                	je     c0013616 <File::tell(unsigned long long*)+0x4c>
c0013602:	50                   	push   eax
c0013603:	8b 02                	mov    eax,DWORD PTR [edx]
c0013605:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013609:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001360f:	52                   	push   edx
c0013610:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	83 c4 0c             	add    esp,0xc
c0013619:	c3                   	ret    

c001361a <File::rewind()>:
c001361a:	83 ec 10             	sub    esp,0x10
c001361d:	6a 00                	push   0x0
c001361f:	6a 00                	push   0x0
c0013621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013625:	e8 4a ff ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001362a:	83 c4 1c             	add    esp,0x1c
c001362d:	c3                   	ret    

c001362e <File::unlink()>:
c001362e:	83 ec 0c             	sub    esp,0xc
c0013631:	b8 0b 00 00 00       	mov    eax,0xb
c0013636:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001363a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013641:	80 f9 19             	cmp    cl,0x19
c0013644:	77 2f                	ja     c0013675 <File::unlink()+0x47>
c0013646:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c001364d:	85 c9                	test   ecx,ecx
c001364f:	74 24                	je     c0013675 <File::unlink()+0x47>
c0013651:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013657:	85 c9                	test   ecx,ecx
c0013659:	74 1a                	je     c0013675 <File::unlink()+0x47>
c001365b:	b8 06 00 00 00       	mov    eax,0x6
c0013660:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013664:	75 0f                	jne    c0013675 <File::unlink()+0x47>
c0013666:	83 c2 0d             	add    edx,0xd
c0013669:	50                   	push   eax
c001366a:	50                   	push   eax
c001366b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001366d:	52                   	push   edx
c001366e:	51                   	push   ecx
c001366f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013672:	83 c4 10             	add    esp,0x10
c0013675:	83 c4 0c             	add    esp,0xc
c0013678:	c3                   	ret    
c0013679:	90                   	nop

c001367a <File::rename(char const*)>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	b8 0b 00 00 00       	mov    eax,0xb
c0013682:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013686:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001368d:	80 f9 19             	cmp    cl,0x19
c0013690:	77 32                	ja     c00136c4 <File::rename(char const*)+0x4a>
c0013692:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013699:	85 c9                	test   ecx,ecx
c001369b:	74 27                	je     c00136c4 <File::rename(char const*)+0x4a>
c001369d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a3:	85 c9                	test   ecx,ecx
c00136a5:	74 1d                	je     c00136c4 <File::rename(char const*)+0x4a>
c00136a7:	b8 06 00 00 00       	mov    eax,0x6
c00136ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b0:	75 12                	jne    c00136c4 <File::rename(char const*)+0x4a>
c00136b2:	83 c2 0d             	add    edx,0xd
c00136b5:	50                   	push   eax
c00136b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136bc:	52                   	push   edx
c00136bd:	51                   	push   ecx
c00136be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136c1:	83 c4 10             	add    esp,0x10
c00136c4:	83 c4 0c             	add    esp,0xc
c00136c7:	c3                   	ret    

c00136c8 <File::chfatattr(unsigned char, unsigned char)>:
c00136c8:	57                   	push   edi
c00136c9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ce:	56                   	push   esi
c00136cf:	53                   	push   ebx
c00136d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136e3:	80 f9 19             	cmp    cl,0x19
c00136e6:	77 37                	ja     c001371f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e8:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c00136ef:	85 c9                	test   ecx,ecx
c00136f1:	74 2c                	je     c001371f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f9:	85 c9                	test   ecx,ecx
c00136fb:	74 22                	je     c001371f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136fd:	b8 06 00 00 00       	mov    eax,0x6
c0013702:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013706:	75 17                	jne    c001371f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013708:	8b 39                	mov    edi,DWORD PTR [ecx]
c001370a:	89 f0                	mov    eax,esi
c001370c:	83 c2 0d             	add    edx,0xd
c001370f:	0f b6 f0             	movzx  esi,al
c0013712:	0f b6 db             	movzx  ebx,bl
c0013715:	56                   	push   esi
c0013716:	53                   	push   ebx
c0013717:	52                   	push   edx
c0013718:	51                   	push   ecx
c0013719:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001371c:	83 c4 10             	add    esp,0x10
c001371f:	5b                   	pop    ebx
c0013720:	5e                   	pop    esi
c0013721:	5f                   	pop    edi
c0013722:	c3                   	ret    
c0013723:	90                   	nop

c0013724 <File::exists()>:
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	31 c0                	xor    eax,eax
c0013729:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013734:	80 f9 19             	cmp    cl,0x19
c0013737:	77 24                	ja     c001375d <File::exists()+0x39>
c0013739:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013740:	85 c9                	test   ecx,ecx
c0013742:	74 19                	je     c001375d <File::exists()+0x39>
c0013744:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001374a:	85 c9                	test   ecx,ecx
c001374c:	74 0f                	je     c001375d <File::exists()+0x39>
c001374e:	83 c2 0d             	add    edx,0xd
c0013751:	50                   	push   eax
c0013752:	50                   	push   eax
c0013753:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013755:	52                   	push   edx
c0013756:	51                   	push   ecx
c0013757:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 c4 0c             	add    esp,0xc
c0013760:	c3                   	ret    
c0013761:	90                   	nop

c0013762 <File::stat(unsigned long long*, bool*)>:
c0013762:	56                   	push   esi
c0013763:	53                   	push   ebx
c0013764:	50                   	push   eax
c0013765:	b8 0b 00 00 00       	mov    eax,0xb
c001376a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001376e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013772:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013779:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001377d:	80 f9 19             	cmp    cl,0x19
c0013780:	77 3d                	ja     c00137bf <File::stat(unsigned long long*, bool*)+0x5d>
c0013782:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013789:	85 c9                	test   ecx,ecx
c001378b:	74 32                	je     c00137bf <File::stat(unsigned long long*, bool*)+0x5d>
c001378d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013793:	85 c9                	test   ecx,ecx
c0013795:	74 28                	je     c00137bf <File::stat(unsigned long long*, bool*)+0x5d>
c0013797:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013799:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001379d:	74 13                	je     c00137b2 <File::stat(unsigned long long*, bool*)+0x50>
c001379f:	83 ec 04             	sub    esp,0x4
c00137a2:	56                   	push   esi
c00137a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137a9:	51                   	push   ecx
c00137aa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137b0:	eb 0a                	jmp    c00137bc <File::stat(unsigned long long*, bool*)+0x5a>
c00137b2:	53                   	push   ebx
c00137b3:	83 c2 0d             	add    edx,0xd
c00137b6:	56                   	push   esi
c00137b7:	52                   	push   edx
c00137b8:	51                   	push   ecx
c00137b9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	5a                   	pop    edx
c00137c0:	5b                   	pop    ebx
c00137c1:	5e                   	pop    esi
c00137c2:	c3                   	ret    

c00137c3 <Fs::setcwd(Process*, char*)>:
c00137c3:	55                   	push   ebp
c00137c4:	57                   	push   edi
c00137c5:	56                   	push   esi
c00137c6:	53                   	push   ebx
c00137c7:	81 ec 20 02 00 00    	sub    esp,0x220
c00137cd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137d4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137da:	57                   	push   edi
c00137db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137e2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137e6:	56                   	push   esi
c00137e7:	e8 bc fa ff ff       	call   c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00137ef:	e8 a0 cf fe ff       	call   c0000794 <strlen>
c00137f4:	83 c4 10             	add    esp,0x10
c00137f7:	83 f8 02             	cmp    eax,0x2
c00137fa:	77 17                	ja     c0013813 <Fs::setcwd(Process*, char*)+0x50>
c00137fc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013801:	83 e8 41             	sub    eax,0x41
c0013804:	83 f8 19             	cmp    eax,0x19
c0013807:	76 24                	jbe    c001382d <Fs::setcwd(Process*, char*)+0x6a>
c0013809:	b8 03 00 00 00       	mov    eax,0x3
c001380e:	e9 e0 00 00 00       	jmp    c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c0013813:	83 ec 0c             	sub    esp,0xc
c0013816:	56                   	push   esi
c0013817:	e8 78 cf fe ff       	call   c0000794 <strlen>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	83 f8 03             	cmp    eax,0x3
c0013822:	75 34                	jne    c0013858 <Fs::setcwd(Process*, char*)+0x95>
c0013824:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013829:	75 2d                	jne    c0013858 <Fs::setcwd(Process*, char*)+0x95>
c001382b:	eb cf                	jmp    c00137fc <Fs::setcwd(Process*, char*)+0x39>
c001382d:	8b 14 85 a0 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1660]
c0013834:	b8 05 00 00 00       	mov    eax,0x5
c0013839:	85 d2                	test   edx,edx
c001383b:	0f 84 b2 00 00 00    	je     c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c0013841:	b8 06 00 00 00       	mov    eax,0x6
c0013846:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001384d:	0f 85 92 00 00 00    	jne    c00138e5 <Fs::setcwd(Process*, char*)+0x122>
c0013853:	e9 9b 00 00 00       	jmp    c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c0013858:	83 ec 0c             	sub    esp,0xc
c001385b:	68 14 01 00 00       	push   0x114
c0013860:	e8 db bf ff ff       	call   c000f840 <malloc>
c0013865:	83 c4 0c             	add    esp,0xc
c0013868:	89 c3                	mov    ebx,eax
c001386a:	55                   	push   ebp
c001386b:	56                   	push   esi
c001386c:	50                   	push   eax
c001386d:	e8 e0 fb ff ff       	call   c0013452 <File::File(char const*, Process*)>
c0013872:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013877:	83 c4 0c             	add    esp,0xc
c001387a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001387e:	50                   	push   eax
c001387f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013883:	50                   	push   eax
c0013884:	53                   	push   ebx
c0013885:	e8 d8 fe ff ff       	call   c0013762 <File::stat(unsigned long long*, bool*)>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	83 f8 02             	cmp    eax,0x2
c0013890:	74 04                	je     c0013896 <Fs::setcwd(Process*, char*)+0xd3>
c0013892:	85 c0                	test   eax,eax
c0013894:	74 1c                	je     c00138b2 <Fs::setcwd(Process*, char*)+0xef>
c0013896:	b8 01 00 00 00       	mov    eax,0x1
c001389b:	85 db                	test   ebx,ebx
c001389d:	74 54                	je     c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c001389f:	83 ec 0c             	sub    esp,0xc
c00138a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a4:	53                   	push   ebx
c00138a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	b8 01 00 00 00       	mov    eax,0x1
c00138b0:	eb 41                	jmp    c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c00138b2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138b7:	75 1c                	jne    c00138d5 <Fs::setcwd(Process*, char*)+0x112>
c00138b9:	b8 02 00 00 00       	mov    eax,0x2
c00138be:	85 db                	test   ebx,ebx
c00138c0:	74 31                	je     c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c00138c2:	83 ec 0c             	sub    esp,0xc
c00138c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c7:	53                   	push   ebx
c00138c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138cb:	83 c4 10             	add    esp,0x10
c00138ce:	b8 02 00 00 00       	mov    eax,0x2
c00138d3:	eb 1e                	jmp    c00138f3 <Fs::setcwd(Process*, char*)+0x130>
c00138d5:	85 db                	test   ebx,ebx
c00138d7:	74 0c                	je     c00138e5 <Fs::setcwd(Process*, char*)+0x122>
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138de:	53                   	push   ebx
c00138df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	50                   	push   eax
c00138e6:	50                   	push   eax
c00138e7:	56                   	push   esi
c00138e8:	57                   	push   edi
c00138e9:	e8 46 cf fe ff       	call   c0000834 <strcpy>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	31 c0                	xor    eax,eax
c00138f3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138f9:	5b                   	pop    ebx
c00138fa:	5e                   	pop    esi
c00138fb:	5f                   	pop    edi
c00138fc:	5d                   	pop    ebp
c00138fd:	c3                   	ret    

c00138fe <Directory::Directory(char const*, Process*)>:
c00138fe:	83 ec 0c             	sub    esp,0xc
c0013901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013905:	83 ec 08             	sub    esp,0x8
c0013908:	6a 00                	push   0x0
c001390a:	50                   	push   eax
c001390b:	e8 4c de ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0013910:	83 c4 10             	add    esp,0x10
c0013913:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c0013918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391c:	89 10                	mov    DWORD PTR [eax],edx
c001391e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013922:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392c:	83 c0 0d             	add    eax,0xd
c001392f:	83 ec 04             	sub    esp,0x4
c0013932:	52                   	push   edx
c0013933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013937:	50                   	push   eax
c0013938:	e8 6b f9 ff ff       	call   c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001393d:	83 c4 10             	add    esp,0x10
c0013940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013944:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013947:	8d 50 bf             	lea    edx,[eax-0x41]
c001394a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013958:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001395c:	90                   	nop
c001395d:	83 c4 0c             	add    esp,0xc
c0013960:	c3                   	ret    
c0013961:	90                   	nop

c0013962 <Directory::open()>:
c0013962:	53                   	push   ebx
c0013963:	b8 0b 00 00 00       	mov    eax,0xb
c0013968:	83 ec 08             	sub    esp,0x8
c001396b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001396f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013976:	80 fa 19             	cmp    dl,0x19
c0013979:	77 3d                	ja     c00139b8 <Directory::open()+0x56>
c001397b:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013982:	85 d2                	test   edx,edx
c0013984:	74 32                	je     c00139b8 <Directory::open()+0x56>
c0013986:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001398c:	85 d2                	test   edx,edx
c001398e:	74 28                	je     c00139b8 <Directory::open()+0x56>
c0013990:	b8 06 00 00 00       	mov    eax,0x6
c0013995:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013999:	75 1d                	jne    c00139b8 <Directory::open()+0x56>
c001399b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139a1:	50                   	push   eax
c00139a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00139a4:	51                   	push   ecx
c00139a5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139a8:	51                   	push   ecx
c00139a9:	52                   	push   edx
c00139aa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	85 c0                	test   eax,eax
c00139b2:	75 04                	jne    c00139b8 <Directory::open()+0x56>
c00139b4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139b8:	83 c4 08             	add    esp,0x8
c00139bb:	5b                   	pop    ebx
c00139bc:	c3                   	ret    
c00139bd:	90                   	nop

c00139be <Directory::close()>:
c00139be:	53                   	push   ebx
c00139bf:	b8 0b 00 00 00       	mov    eax,0xb
c00139c4:	83 ec 08             	sub    esp,0x8
c00139c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139cb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139d2:	80 fa 19             	cmp    dl,0x19
c00139d5:	77 41                	ja     c0013a18 <Directory::close()+0x5a>
c00139d7:	8b 1c 95 a0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1660]
c00139de:	85 db                	test   ebx,ebx
c00139e0:	74 36                	je     c0013a18 <Directory::close()+0x5a>
c00139e2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139e9:	74 2d                	je     c0013a18 <Directory::close()+0x5a>
c00139eb:	b8 05 00 00 00       	mov    eax,0x5
c00139f0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139f4:	74 22                	je     c0013a18 <Directory::close()+0x5a>
c00139f6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139fa:	8b 04 95 a0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1660]
c0013a01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a07:	53                   	push   ebx
c0013a08:	53                   	push   ebx
c0013a09:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a0b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a11:	50                   	push   eax
c0013a12:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a15:	83 c4 10             	add    esp,0x10
c0013a18:	83 c4 08             	add    esp,0x8
c0013a1b:	5b                   	pop    ebx
c0013a1c:	c3                   	ret    
c0013a1d:	90                   	nop

c0013a1e <Directory::unlink()>:
c0013a1e:	83 ec 0c             	sub    esp,0xc
c0013a21:	b8 0b 00 00 00       	mov    eax,0xb
c0013a26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a2a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a31:	80 f9 19             	cmp    cl,0x19
c0013a34:	77 2f                	ja     c0013a65 <Directory::unlink()+0x47>
c0013a36:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013a3d:	85 c9                	test   ecx,ecx
c0013a3f:	74 24                	je     c0013a65 <Directory::unlink()+0x47>
c0013a41:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a47:	85 c9                	test   ecx,ecx
c0013a49:	74 1a                	je     c0013a65 <Directory::unlink()+0x47>
c0013a4b:	b8 06 00 00 00       	mov    eax,0x6
c0013a50:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a54:	75 0f                	jne    c0013a65 <Directory::unlink()+0x47>
c0013a56:	83 c2 0d             	add    edx,0xd
c0013a59:	50                   	push   eax
c0013a5a:	50                   	push   eax
c0013a5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a5d:	52                   	push   edx
c0013a5e:	51                   	push   ecx
c0013a5f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a62:	83 c4 10             	add    esp,0x10
c0013a65:	83 c4 0c             	add    esp,0xc
c0013a68:	c3                   	ret    
c0013a69:	90                   	nop

c0013a6a <Directory::rename(char const*)>:
c0013a6a:	83 ec 0c             	sub    esp,0xc
c0013a6d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a7d:	80 f9 19             	cmp    cl,0x19
c0013a80:	77 32                	ja     c0013ab4 <Directory::rename(char const*)+0x4a>
c0013a82:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013a89:	85 c9                	test   ecx,ecx
c0013a8b:	74 27                	je     c0013ab4 <Directory::rename(char const*)+0x4a>
c0013a8d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a93:	85 c9                	test   ecx,ecx
c0013a95:	74 1d                	je     c0013ab4 <Directory::rename(char const*)+0x4a>
c0013a97:	b8 06 00 00 00       	mov    eax,0x6
c0013a9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aa0:	75 12                	jne    c0013ab4 <Directory::rename(char const*)+0x4a>
c0013aa2:	83 c2 0d             	add    edx,0xd
c0013aa5:	50                   	push   eax
c0013aa6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aac:	52                   	push   edx
c0013aad:	51                   	push   ecx
c0013aae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	83 c4 0c             	add    esp,0xc
c0013ab7:	c3                   	ret    

c0013ab8 <Directory::exists()>:
c0013ab8:	83 ec 0c             	sub    esp,0xc
c0013abb:	31 c0                	xor    eax,eax
c0013abd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ac8:	80 f9 19             	cmp    cl,0x19
c0013acb:	77 24                	ja     c0013af1 <Directory::exists()+0x39>
c0013acd:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013ad4:	85 c9                	test   ecx,ecx
c0013ad6:	74 19                	je     c0013af1 <Directory::exists()+0x39>
c0013ad8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ade:	85 c9                	test   ecx,ecx
c0013ae0:	74 0f                	je     c0013af1 <Directory::exists()+0x39>
c0013ae2:	83 c2 0d             	add    edx,0xd
c0013ae5:	50                   	push   eax
c0013ae6:	50                   	push   eax
c0013ae7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ae9:	52                   	push   edx
c0013aea:	51                   	push   ecx
c0013aeb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	83 c4 0c             	add    esp,0xc
c0013af4:	c3                   	ret    
c0013af5:	90                   	nop

c0013af6 <Directory::read(dirent*)>:
c0013af6:	83 ec 1c             	sub    esp,0x1c
c0013af9:	b8 0b 00 00 00       	mov    eax,0xb
c0013afe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b02:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b09:	80 fa 19             	cmp    dl,0x19
c0013b0c:	77 30                	ja     c0013b3e <Directory::read(dirent*)+0x48>
c0013b0e:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013b15:	85 d2                	test   edx,edx
c0013b17:	74 25                	je     c0013b3e <Directory::read(dirent*)+0x48>
c0013b19:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b20:	74 1c                	je     c0013b3e <Directory::read(dirent*)+0x48>
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b27:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b2b:	52                   	push   edx
c0013b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b30:	6a 00                	push   0x0
c0013b32:	68 10 01 00 00       	push   0x110
c0013b37:	51                   	push   ecx
c0013b38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b3b:	83 c4 20             	add    esp,0x20
c0013b3e:	83 c4 1c             	add    esp,0x1c
c0013b41:	c3                   	ret    

c0013b42 <Directory::create()>:
c0013b42:	83 ec 0c             	sub    esp,0xc
c0013b45:	b8 0b 00 00 00       	mov    eax,0xb
c0013b4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b55:	80 f9 19             	cmp    cl,0x19
c0013b58:	77 2f                	ja     c0013b89 <Directory::create()+0x47>
c0013b5a:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013b61:	85 c9                	test   ecx,ecx
c0013b63:	74 24                	je     c0013b89 <Directory::create()+0x47>
c0013b65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b6b:	85 c9                	test   ecx,ecx
c0013b6d:	74 1a                	je     c0013b89 <Directory::create()+0x47>
c0013b6f:	b8 06 00 00 00       	mov    eax,0x6
c0013b74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b78:	75 0f                	jne    c0013b89 <Directory::create()+0x47>
c0013b7a:	83 c2 0d             	add    edx,0xd
c0013b7d:	50                   	push   eax
c0013b7e:	50                   	push   eax
c0013b7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b81:	52                   	push   edx
c0013b82:	51                   	push   ecx
c0013b83:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b86:	83 c4 10             	add    esp,0x10
c0013b89:	83 c4 0c             	add    esp,0xc
c0013b8c:	c3                   	ret    
c0013b8d:	90                   	nop

c0013b8e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b8e:	b8 0a 00 00 00       	mov    eax,0xa
c0013b93:	c3                   	ret    

c0013b94 <Bus::Bus(char const*)>:
c0013b94:	83 ec 0c             	sub    esp,0xc
c0013b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9b:	83 ec 08             	sub    esp,0x8
c0013b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba2:	50                   	push   eax
c0013ba3:	e8 68 09 00 00       	call   c0014510 <Device::Device(char const*)>
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	ba d8 aa 02 c0       	mov    edx,0xc002aad8
c0013bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb4:	89 10                	mov    DWORD PTR [eax],edx
c0013bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bba:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bc4:	90                   	nop
c0013bc5:	83 c4 0c             	add    esp,0xc
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <Bus::~Bus()>:
c0013bca:	83 ec 0c             	sub    esp,0xc
c0013bcd:	ba d8 aa 02 c0       	mov    edx,0xc002aad8
c0013bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd6:	89 10                	mov    DWORD PTR [eax],edx
c0013bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	50                   	push   eax
c0013be0:	e8 0d 06 00 00       	call   c00141f2 <Device::~Device()>
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	90                   	nop
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <Bus::~Bus()>:
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	83 ec 0c             	sub    esp,0xc
c0013bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf8:	e8 cd ff ff ff       	call   c0013bca <Bus::~Bus()>
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	83 ec 08             	sub    esp,0x8
c0013c03:	68 58 01 00 00       	push   0x158
c0013c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0c:	e8 09 f2 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0013c11:	83 c4 10             	add    esp,0x10
c0013c14:	83 c4 0c             	add    esp,0xc
c0013c17:	c3                   	ret    

c0013c18 <Buzzer::Buzzer(char const*)>:
c0013c18:	83 ec 0c             	sub    esp,0xc
c0013c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1f:	83 ec 08             	sub    esp,0x8
c0013c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c26:	50                   	push   eax
c0013c27:	e8 e4 08 00 00       	call   c0014510 <Device::Device(char const*)>
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c0013c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c38:	89 10                	mov    DWORD PTR [eax],edx
c0013c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c56:	90                   	nop
c0013c57:	83 c4 0c             	add    esp,0xc
c0013c5a:	c3                   	ret    
c0013c5b:	90                   	nop

c0013c5c <Buzzer::~Buzzer()>:
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c0013c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c68:	89 10                	mov    DWORD PTR [eax],edx
c0013c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	50                   	push   eax
c0013c72:	e8 7b 05 00 00       	call   c00141f2 <Device::~Device()>
c0013c77:	83 c4 10             	add    esp,0x10
c0013c7a:	90                   	nop
c0013c7b:	83 c4 0c             	add    esp,0xc
c0013c7e:	c3                   	ret    
c0013c7f:	90                   	nop

c0013c80 <Buzzer::~Buzzer()>:
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	83 ec 0c             	sub    esp,0xc
c0013c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c8a:	e8 cd ff ff ff       	call   c0013c5c <Buzzer::~Buzzer()>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	83 ec 08             	sub    esp,0x8
c0013c95:	68 5c 01 00 00       	push   0x15c
c0013c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9e:	e8 77 f1 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	83 c4 0c             	add    esp,0xc
c0013ca9:	c3                   	ret    

c0013caa <Buzzer::stop()>:
c0013caa:	83 ec 14             	sub    esp,0x14
c0013cad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cb3:	6a 00                	push   0x0
c0013cb5:	50                   	push   eax
c0013cb6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cb9:	83 c4 1c             	add    esp,0x1c
c0013cbc:	c3                   	ret    

c0013cbd <beepThread(void*)>:
c0013cbd:	53                   	push   ebx
c0013cbe:	83 ec 08             	sub    esp,0x8
c0013cc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc5:	e8 be a0 00 00       	call   c001dd88 <unlockScheduler()>
c0013cca:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ccf:	52                   	push   edx
c0013cd0:	52                   	push   edx
c0013cd1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cd7:	52                   	push   edx
c0013cd8:	50                   	push   eax
c0013cd9:	e8 f8 a5 00 00       	call   c001e2d6 <nanoSleep(unsigned long long)>
c0013cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce1:	e8 c4 ff ff ff       	call   c0013caa <Buzzer::stop()>
c0013ce6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cee:	83 c4 18             	add    esp,0x18
c0013cf1:	5b                   	pop    ebx
c0013cf2:	e9 25 a5 00 00       	jmp    c001e21c <blockTask(TaskState)>
c0013cf7:	90                   	nop

c0013cf8 <Buzzer::beep(int, int, bool)>:
c0013cf8:	57                   	push   edi
c0013cf9:	56                   	push   esi
c0013cfa:	53                   	push   ebx
c0013cfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d07:	52                   	push   edx
c0013d08:	52                   	push   edx
c0013d09:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d0f:	56                   	push   esi
c0013d10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	89 f8                	mov    eax,edi
c0013d18:	84 c0                	test   al,al
c0013d1a:	74 1f                	je     c0013d3b <Buzzer::beep(int, int, bool)+0x43>
c0013d1c:	50                   	push   eax
c0013d1d:	50                   	push   eax
c0013d1e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d24:	99                   	cdq    
c0013d25:	52                   	push   edx
c0013d26:	50                   	push   eax
c0013d27:	e8 aa a5 00 00       	call   c001e2d6 <nanoSleep(unsigned long long)>
c0013d2c:	83 c4 10             	add    esp,0x10
c0013d2f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d33:	5b                   	pop    ebx
c0013d34:	5e                   	pop    esi
c0013d35:	5f                   	pop    edi
c0013d36:	e9 6f ff ff ff       	jmp    c0013caa <Buzzer::stop()>
c0013d3b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d41:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0013d46:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d4e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d52:	c7 44 24 14 bd 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cbd
c0013d5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d5e:	5b                   	pop    ebx
c0013d5f:	5e                   	pop    esi
c0013d60:	5f                   	pop    edi
c0013d61:	e9 52 a1 00 00       	jmp    c001deb8 <Process::createThread(void (*)(void*), void*, int)>

c0013d66 <User::loadClockSettings(int)>:
c0013d66:	53                   	push   ebx
c0013d67:	83 ec 14             	sub    esp,0x14
c0013d6a:	68 14 01 00 00       	push   0x114
c0013d6f:	e8 cc ba ff ff       	call   c000f840 <malloc>
c0013d74:	83 c4 0c             	add    esp,0xc
c0013d77:	89 c3                	mov    ebx,eax
c0013d79:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c0013d7f:	68 2c ab 02 c0       	push   0xc002ab2c
c0013d84:	50                   	push   eax
c0013d85:	e8 c8 f6 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c0013d8a:	58                   	pop    eax
c0013d8b:	5a                   	pop    edx
c0013d8c:	6a 01                	push   0x1
c0013d8e:	53                   	push   ebx
c0013d8f:	e8 22 f7 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c0013d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d97:	e8 78 f7 ff ff       	call   c0013514 <File::close()>
c0013d9c:	83 c4 10             	add    esp,0x10
c0013d9f:	85 db                	test   ebx,ebx
c0013da1:	74 0f                	je     c0013db2 <User::loadClockSettings(int)+0x4c>
c0013da3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013da9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dac:	83 c4 08             	add    esp,0x8
c0013daf:	5b                   	pop    ebx
c0013db0:	ff e0                	jmp    eax
c0013db2:	83 c4 08             	add    esp,0x8
c0013db5:	5b                   	pop    ebx
c0013db6:	c3                   	ret    
c0013db7:	90                   	nop

c0013db8 <Clock::Clock(char const*)>:
c0013db8:	83 ec 0c             	sub    esp,0xc
c0013dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbf:	83 ec 08             	sub    esp,0x8
c0013dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc6:	50                   	push   eax
c0013dc7:	e8 44 07 00 00       	call   c0014510 <Device::Device(char const*)>
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0013dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd8:	89 10                	mov    DWORD PTR [eax],edx
c0013dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dde:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013de8:	90                   	nop
c0013de9:	83 c4 0c             	add    esp,0xc
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <Clock::~Clock()>:
c0013dee:	83 ec 0c             	sub    esp,0xc
c0013df1:	ba 54 ab 02 c0       	mov    edx,0xc002ab54
c0013df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dfa:	89 10                	mov    DWORD PTR [eax],edx
c0013dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e00:	83 ec 0c             	sub    esp,0xc
c0013e03:	50                   	push   eax
c0013e04:	e8 e9 03 00 00       	call   c00141f2 <Device::~Device()>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	90                   	nop
c0013e0d:	83 c4 0c             	add    esp,0xc
c0013e10:	c3                   	ret    
c0013e11:	90                   	nop

c0013e12 <Clock::~Clock()>:
c0013e12:	83 ec 0c             	sub    esp,0xc
c0013e15:	83 ec 0c             	sub    esp,0xc
c0013e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1c:	e8 cd ff ff ff       	call   c0013dee <Clock::~Clock()>
c0013e21:	83 c4 10             	add    esp,0x10
c0013e24:	83 ec 08             	sub    esp,0x8
c0013e27:	68 58 01 00 00       	push   0x158
c0013e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e30:	e8 e5 ef ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	83 c4 0c             	add    esp,0xc
c0013e3b:	c3                   	ret    

c0013e3c <Clock::timeInSecondsLocal()>:
c0013e3c:	53                   	push   ebx
c0013e3d:	83 ec 14             	sub    esp,0x14
c0013e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e44:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e46:	50                   	push   eax
c0013e47:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e4a:	0f b6 0d 14 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e514
c0013e51:	03 0d 18 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e518
c0013e57:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e5d:	89 cb                	mov    ebx,ecx
c0013e5f:	c1 fb 1f             	sar    ebx,0x1f
c0013e62:	01 c8                	add    eax,ecx
c0013e64:	11 da                	adc    edx,ebx
c0013e66:	83 c4 10             	add    esp,0x10
c0013e69:	31 c9                	xor    ecx,ecx
c0013e6b:	80 3d 15 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e515,0x0
c0013e72:	74 05                	je     c0013e79 <Clock::timeInSecondsLocal()+0x3d>
c0013e74:	b9 08 07 00 00       	mov    ecx,0x708
c0013e79:	31 db                	xor    ebx,ebx
c0013e7b:	01 c8                	add    eax,ecx
c0013e7d:	11 da                	adc    edx,ebx
c0013e7f:	83 c4 08             	add    esp,0x8
c0013e82:	5b                   	pop    ebx
c0013e83:	c3                   	ret    

c0013e84 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e84:	57                   	push   edi
c0013e85:	56                   	push   esi
c0013e86:	53                   	push   ebx
c0013e87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e91:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e95:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e98:	0f b6 05 14 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e514
c0013e9f:	03 05 18 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e518
c0013ea5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013eab:	99                   	cdq    
c0013eac:	29 c6                	sub    esi,eax
c0013eae:	19 d7                	sbb    edi,edx
c0013eb0:	89 f0                	mov    eax,esi
c0013eb2:	89 fa                	mov    edx,edi
c0013eb4:	31 f6                	xor    esi,esi
c0013eb6:	80 3d 15 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e515,0x0
c0013ebd:	74 05                	je     c0013ec4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ebf:	be 08 07 00 00       	mov    esi,0x708
c0013ec4:	31 ff                	xor    edi,edi
c0013ec6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013eca:	29 f0                	sub    eax,esi
c0013ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed0:	19 fa                	sbb    edx,edi
c0013ed2:	89 d8                	mov    eax,ebx
c0013ed4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ed8:	5b                   	pop    ebx
c0013ed9:	5e                   	pop    esi
c0013eda:	5f                   	pop    edi
c0013edb:	ff e0                	jmp    eax

c0013edd <datetimeToSeconds(datetime_t)>:
c0013edd:	55                   	push   ebp
c0013ede:	57                   	push   edi
c0013edf:	56                   	push   esi
c0013ee0:	53                   	push   ebx
c0013ee1:	83 ec 14             	sub    esp,0x14
c0013ee4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ee8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013eec:	89 d3                	mov    ebx,edx
c0013eee:	0f b6 c6             	movzx  eax,dh
c0013ef1:	c1 eb 10             	shr    ebx,0x10
c0013ef4:	48                   	dec    eax
c0013ef5:	66 81 eb 6c 07       	sub    bx,0x76c
c0013efa:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013efe:	0f b6 f5             	movzx  esi,ch
c0013f01:	89 cf                	mov    edi,ecx
c0013f03:	6b f6 3c             	imul   esi,esi,0x3c
c0013f06:	c1 ef 10             	shr    edi,0x10
c0013f09:	0f b6 c9             	movzx  ecx,cl
c0013f0c:	89 f8                	mov    eax,edi
c0013f0e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f14:	0f b6 f8             	movzx  edi,al
c0013f17:	0f b6 d2             	movzx  edx,dl
c0013f1a:	01 fe                	add    esi,edi
c0013f1c:	01 f1                	add    ecx,esi
c0013f1e:	0f b7 f3             	movzx  esi,bx
c0013f21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f25:	c1 f9 1f             	sar    ecx,0x1f
c0013f28:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f2d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f31:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f36:	8b 0c 8d a0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5460]
c0013f3d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f41:	76 29                	jbe    c0013f6c <datetimeToSeconds(datetime_t)+0x8f>
c0013f43:	f6 c3 03             	test   bl,0x3
c0013f46:	75 24                	jne    c0013f6c <datetimeToSeconds(datetime_t)+0x8f>
c0013f48:	31 d2                	xor    edx,edx
c0013f4a:	bf 64 00 00 00       	mov    edi,0x64
c0013f4f:	89 d8                	mov    eax,ebx
c0013f51:	66 f7 f7             	div    di
c0013f54:	66 85 d2             	test   dx,dx
c0013f57:	75 12                	jne    c0013f6b <datetimeToSeconds(datetime_t)+0x8e>
c0013f59:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f5f:	bf 90 01 00 00       	mov    edi,0x190
c0013f64:	99                   	cdq    
c0013f65:	f7 ff                	idiv   edi
c0013f67:	85 d2                	test   edx,edx
c0013f69:	75 01                	jne    c0013f6c <datetimeToSeconds(datetime_t)+0x8f>
c0013f6b:	41                   	inc    ecx
c0013f6c:	66 83 fb 46          	cmp    bx,0x46
c0013f70:	76 45                	jbe    c0013fb7 <datetimeToSeconds(datetime_t)+0xda>
c0013f72:	bb 46 00 00 00       	mov    ebx,0x46
c0013f77:	bf 64 00 00 00       	mov    edi,0x64
c0013f7c:	bd 90 01 00 00       	mov    ebp,0x190
c0013f81:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f86:	f6 c3 03             	test   bl,0x3
c0013f89:	75 23                	jne    c0013fae <datetimeToSeconds(datetime_t)+0xd1>
c0013f8b:	89 d8                	mov    eax,ebx
c0013f8d:	99                   	cdq    
c0013f8e:	f7 ff                	idiv   edi
c0013f90:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f95:	85 d2                	test   edx,edx
c0013f97:	75 15                	jne    c0013fae <datetimeToSeconds(datetime_t)+0xd1>
c0013f99:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f9f:	99                   	cdq    
c0013fa0:	f7 fd                	idiv   ebp
c0013fa2:	83 fa 01             	cmp    edx,0x1
c0013fa5:	19 c0                	sbb    eax,eax
c0013fa7:	f7 d0                	not    eax
c0013fa9:	05 6e 01 00 00       	add    eax,0x16e
c0013fae:	01 c1                	add    ecx,eax
c0013fb0:	43                   	inc    ebx
c0013fb1:	39 f3                	cmp    ebx,esi
c0013fb3:	7c cc                	jl     c0013f81 <datetimeToSeconds(datetime_t)+0xa4>
c0013fb5:	eb 35                	jmp    c0013fec <datetimeToSeconds(datetime_t)+0x10f>
c0013fb7:	74 33                	je     c0013fec <datetimeToSeconds(datetime_t)+0x10f>
c0013fb9:	b8 45 00 00 00       	mov    eax,0x45
c0013fbe:	89 c2                	mov    edx,eax
c0013fc0:	83 e2 03             	and    edx,0x3
c0013fc3:	39 f0                	cmp    eax,esi
c0013fc5:	7e 0f                	jle    c0013fd6 <datetimeToSeconds(datetime_t)+0xf9>
c0013fc7:	83 fa 01             	cmp    edx,0x1
c0013fca:	19 d2                	sbb    edx,edx
c0013fcc:	48                   	dec    eax
c0013fcd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fd4:	eb e8                	jmp    c0013fbe <datetimeToSeconds(datetime_t)+0xe1>
c0013fd6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fdb:	85 d2                	test   edx,edx
c0013fdd:	75 0b                	jne    c0013fea <datetimeToSeconds(datetime_t)+0x10d>
c0013fdf:	66 83 fb 01          	cmp    bx,0x1
c0013fe3:	19 c0                	sbb    eax,eax
c0013fe5:	05 6e 01 00 00       	add    eax,0x16e
c0013fea:	29 c1                	sub    ecx,eax
c0013fec:	b8 80 51 01 00       	mov    eax,0x15180
c0013ff1:	f7 e9                	imul   ecx
c0013ff3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ff7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ffb:	83 c4 14             	add    esp,0x14
c0013ffe:	5b                   	pop    ebx
c0013fff:	5e                   	pop    esi
c0014000:	5f                   	pop    edi
c0014001:	5d                   	pop    ebp
c0014002:	c3                   	ret    
c0014003:	90                   	nop

c0014004 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014004:	57                   	push   edi
c0014005:	56                   	push   esi
c0014006:	53                   	push   ebx
c0014007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001400b:	8b 06                	mov    eax,DWORD PTR [esi]
c001400d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014010:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014014:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014018:	e8 c0 fe ff ff       	call   c0013edd <datetimeToSeconds(datetime_t)>
c001401d:	59                   	pop    ecx
c001401e:	0f b6 0d 14 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e514
c0014025:	5b                   	pop    ebx
c0014026:	03 0d 18 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e518
c001402c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014032:	89 cb                	mov    ebx,ecx
c0014034:	c1 fb 1f             	sar    ebx,0x1f
c0014037:	29 c8                	sub    eax,ecx
c0014039:	19 da                	sbb    edx,ebx
c001403b:	31 c9                	xor    ecx,ecx
c001403d:	80 3d 15 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e515,0x0
c0014044:	74 05                	je     c001404b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014046:	b9 08 07 00 00       	mov    ecx,0x708
c001404b:	31 db                	xor    ebx,ebx
c001404d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014051:	29 c8                	sub    eax,ecx
c0014053:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014057:	19 da                	sbb    edx,ebx
c0014059:	89 f8                	mov    eax,edi
c001405b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001405f:	5b                   	pop    ebx
c0014060:	5e                   	pop    esi
c0014061:	5f                   	pop    edi
c0014062:	ff e0                	jmp    eax

c0014064 <secondsToDatetime(unsigned long long)>:
c0014064:	55                   	push   ebp
c0014065:	57                   	push   edi
c0014066:	56                   	push   esi
c0014067:	53                   	push   ebx
c0014068:	83 ec 1c             	sub    esp,0x1c
c001406b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001406f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014073:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014077:	6a 00                	push   0x0
c0014079:	68 80 51 01 00       	push   0x15180
c001407e:	55                   	push   ebp
c001407f:	57                   	push   edi
c0014080:	e8 d7 28 01 00       	call   c002695c <__udivdi3>
c0014085:	83 c4 10             	add    esp,0x10
c0014088:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001408e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014092:	6a 00                	push   0x0
c0014094:	68 80 51 01 00       	push   0x15180
c0014099:	55                   	push   ebp
c001409a:	57                   	push   edi
c001409b:	bf 10 0e 00 00       	mov    edi,0xe10
c00140a0:	e8 b7 29 01 00       	call   c0026a5c <__umoddi3>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	99                   	cdq    
c00140a9:	f7 ff                	idiv   edi
c00140ab:	bf 3c 00 00 00       	mov    edi,0x3c
c00140b0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140b3:	89 d0                	mov    eax,edx
c00140b5:	99                   	cdq    
c00140b6:	f7 ff                	idiv   edi
c00140b8:	85 db                	test   ebx,ebx
c00140ba:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140bd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140c0:	79 11                	jns    c00140d3 <secondsToDatetime(unsigned long long)+0x6f>
c00140c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140c6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140cc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140d1:	eb 07                	jmp    c00140da <secondsToDatetime(unsigned long long)+0x76>
c00140d3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140d8:	89 d8                	mov    eax,ebx
c00140da:	bf b4 05 00 00       	mov    edi,0x5b4
c00140df:	99                   	cdq    
c00140e0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140e5:	f7 f9                	idiv   ecx
c00140e7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140f0:	31 d2                	xor    edx,edx
c00140f2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140fa:	01 c3                	add    ebx,eax
c00140fc:	89 d8                	mov    eax,ebx
c00140fe:	f7 f1                	div    ecx
c0014100:	31 d2                	xor    edx,edx
c0014102:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014105:	89 d8                	mov    eax,ebx
c0014107:	f7 f7                	div    edi
c0014109:	31 d2                	xor    edx,edx
c001410b:	29 c1                	sub    ecx,eax
c001410d:	89 d8                	mov    eax,ebx
c001410f:	f7 f5                	div    ebp
c0014111:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014116:	29 c1                	sub    ecx,eax
c0014118:	31 d2                	xor    edx,edx
c001411a:	89 c8                	mov    eax,ecx
c001411c:	f7 f5                	div    ebp
c001411e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014123:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014127:	31 d2                	xor    edx,edx
c0014129:	89 c8                	mov    eax,ecx
c001412b:	f7 f5                	div    ebp
c001412d:	31 d2                	xor    edx,edx
c001412f:	01 c3                	add    ebx,eax
c0014131:	89 c8                	mov    eax,ecx
c0014133:	f7 f7                	div    edi
c0014135:	bf 99 00 00 00       	mov    edi,0x99
c001413a:	29 c3                	sub    ebx,eax
c001413c:	31 d2                	xor    edx,edx
c001413e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014146:	29 c3                	sub    ebx,eax
c0014148:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001414b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001414e:	bb 05 00 00 00       	mov    ebx,0x5
c0014153:	83 c1 02             	add    ecx,0x2
c0014156:	89 c8                	mov    eax,ecx
c0014158:	f7 f7                	div    edi
c001415a:	31 d2                	xor    edx,edx
c001415c:	89 c7                	mov    edi,eax
c001415e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014164:	83 c0 02             	add    eax,0x2
c0014167:	f7 f3                	div    ebx
c0014169:	89 eb                	mov    ebx,ebp
c001416b:	29 c3                	sub    ebx,eax
c001416d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014173:	88 1e                	mov    BYTE PTR [esi],bl
c0014175:	19 c0                	sbb    eax,eax
c0014177:	31 d2                	xor    edx,edx
c0014179:	83 e0 0c             	and    eax,0xc
c001417c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014180:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014188:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001418c:	83 f9 01             	cmp    ecx,0x1
c001418f:	0f 96 c2             	setbe  dl
c0014192:	41                   	inc    ecx
c0014193:	01 d0                	add    eax,edx
c0014195:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014198:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001419c:	83 c4 1c             	add    esp,0x1c
c001419f:	89 f0                	mov    eax,esi
c00141a1:	5b                   	pop    ebx
c00141a2:	5e                   	pop    esi
c00141a3:	5f                   	pop    edi
c00141a4:	5d                   	pop    ebp
c00141a5:	c2 04 00             	ret    0x4

c00141a8 <Clock::timeInDatetimeLocal()>:
c00141a8:	53                   	push   ebx
c00141a9:	83 ec 14             	sub    esp,0x14
c00141ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141b4:	e8 83 fc ff ff       	call   c0013e3c <Clock::timeInSecondsLocal()>
c00141b9:	83 c4 0c             	add    esp,0xc
c00141bc:	52                   	push   edx
c00141bd:	50                   	push   eax
c00141be:	53                   	push   ebx
c00141bf:	e8 a0 fe ff ff       	call   c0014064 <secondsToDatetime(unsigned long long)>
c00141c4:	89 d8                	mov    eax,ebx
c00141c6:	83 c4 14             	add    esp,0x14
c00141c9:	5b                   	pop    ebx
c00141ca:	c2 04 00             	ret    0x4
c00141cd:	90                   	nop

c00141ce <Device::hibernate()>:
c00141ce:	c3                   	ret    
c00141cf:	90                   	nop

c00141d0 <Device::wake()>:
c00141d0:	c3                   	ret    
c00141d1:	90                   	nop

c00141d2 <Device::detect()>:
c00141d2:	c3                   	ret    
c00141d3:	90                   	nop

c00141d4 <Device::disableLegacy()>:
c00141d4:	c3                   	ret    
c00141d5:	90                   	nop

c00141d6 <Device::powerSaving(PowerSavingLevel)>:
c00141d6:	c3                   	ret    
c00141d7:	90                   	nop

c00141d8 <DriverlessDevice::close(int, int, void*)>:
c00141d8:	31 c0                	xor    eax,eax
c00141da:	c3                   	ret    
c00141db:	90                   	nop

c00141dc <DriverlessDevice::detect()>:
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <DriverlessDevice::open(int, int, void*)>:
c00141de:	83 ec 18             	sub    esp,0x18
c00141e1:	68 d0 ab 02 c0       	push   0xc002abd0
c00141e6:	e8 c0 63 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00141eb:	83 c8 ff             	or     eax,0xffffffff
c00141ee:	83 c4 1c             	add    esp,0x1c
c00141f1:	c3                   	ret    

c00141f2 <Device::~Device()>:
c00141f2:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c00141f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141fb:	89 10                	mov    DWORD PTR [eax],edx
c00141fd:	90                   	nop
c00141fe:	c3                   	ret    
c00141ff:	90                   	nop

c0014200 <Device::~Device()>:
c0014200:	83 ec 0c             	sub    esp,0xc
c0014203:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014207:	e8 e6 ff ff ff       	call   c00141f2 <Device::~Device()>
c001420c:	83 c4 04             	add    esp,0x4
c001420f:	83 ec 08             	sub    esp,0x8
c0014212:	68 58 01 00 00       	push   0x158
c0014217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001421b:	e8 fa eb ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	83 c4 0c             	add    esp,0xc
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <Device::findAndLoadDriver()>:
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <Device::preOpenPCI(PCIDeviceInfo)>:
c001422a:	57                   	push   edi
c001422b:	b9 09 00 00 00       	mov    ecx,0x9
c0014230:	56                   	push   esi
c0014231:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014235:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014239:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014243:	81 c7 18 01 00 00    	add    edi,0x118
c0014249:	fc                   	cld    
c001424a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001424c:	5e                   	pop    esi
c001424d:	5f                   	pop    edi
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <Device::preOpenACPI(void*, char*, char*)>:
c0014250:	56                   	push   esi
c0014251:	53                   	push   ebx
c0014252:	83 ec 08             	sub    esp,0x8
c0014255:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014259:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001425d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014267:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001426b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014271:	6a 1e                	push   0x1e
c0014273:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014279:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001427d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014283:	50                   	push   eax
c0014284:	e8 bb c4 fe ff       	call   c0000744 <memcpy>
c0014289:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001428d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014291:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014299:	83 c4 14             	add    esp,0x14
c001429c:	5b                   	pop    ebx
c001429d:	5e                   	pop    esi
c001429e:	e9 a1 c4 fe ff       	jmp    c0000744 <memcpy>
c00142a3:	90                   	nop

c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142a8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142ad:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142b4:	75 0b                	jne    c00142c1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00142b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142bf:	eb 1e                	jmp    c00142df <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142c1:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00142c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142cc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142dc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142df:	ff e0                	jmp    eax
c00142e1:	90                   	nop

c00142e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142e6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142eb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142f2:	75 0b                	jne    c00142ff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00142f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142fa:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142fd:	eb 1e                	jmp    c001431d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142ff:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014304:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001430a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014310:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014312:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001431a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001431d:	ff e0                	jmp    eax
c001431f:	90                   	nop

c0014320 <Device::addChild(Device*)>:
c0014320:	53                   	push   ebx
c0014321:	83 ec 08             	sub    esp,0x8
c0014324:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014328:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001432c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014332:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014338:	8b 13                	mov    edx,DWORD PTR [ebx]
c001433a:	85 d2                	test   edx,edx
c001433c:	74 04                	je     c0014342 <Device::addChild(Device*)+0x22>
c001433e:	89 d3                	mov    ebx,edx
c0014340:	eb f6                	jmp    c0014338 <Device::addChild(Device*)+0x18>
c0014342:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014345:	83 ec 0c             	sub    esp,0xc
c0014348:	6a 08                	push   0x8
c001434a:	e8 f1 b4 ff ff       	call   c000f840 <malloc>
c001434f:	89 03                	mov    DWORD PTR [ebx],eax
c0014351:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014357:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001435e:	83 c4 18             	add    esp,0x18
c0014361:	5b                   	pop    ebx
c0014362:	c3                   	ret    
c0014363:	90                   	nop

c0014364 <Device::removeAllChildren()>:
c0014364:	56                   	push   esi
c0014365:	53                   	push   ebx
c0014366:	52                   	push   edx
c0014367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001436b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014371:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014374:	74 17                	je     c001438d <Device::removeAllChildren()+0x29>
c0014376:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014379:	85 c0                	test   eax,eax
c001437b:	74 0c                	je     c0014389 <Device::removeAllChildren()+0x25>
c001437d:	83 ec 0c             	sub    esp,0xc
c0014380:	8b 10                	mov    edx,DWORD PTR [eax]
c0014382:	50                   	push   eax
c0014383:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001438b:	eb e4                	jmp    c0014371 <Device::removeAllChildren()+0xd>
c001438d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014393:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014399:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001439f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143a6:	58                   	pop    eax
c00143a7:	5b                   	pop    ebx
c00143a8:	5e                   	pop    esi
c00143a9:	c3                   	ret    

c00143aa <Device::hibernateAll()>:
c00143aa:	53                   	push   ebx
c00143ab:	83 ec 14             	sub    esp,0x14
c00143ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b4:	53                   	push   ebx
c00143b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c4:	74 0f                	je     c00143d5 <Device::hibernateAll()+0x2b>
c00143c6:	83 ec 0c             	sub    esp,0xc
c00143c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143cc:	e8 d9 ff ff ff       	call   c00143aa <Device::hibernateAll()>
c00143d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d3:	eb e9                	jmp    c00143be <Device::hibernateAll()+0x14>
c00143d5:	83 c4 08             	add    esp,0x8
c00143d8:	5b                   	pop    ebx
c00143d9:	c3                   	ret    

c00143da <Device::wakeAll()>:
c00143da:	53                   	push   ebx
c00143db:	83 ec 14             	sub    esp,0x14
c00143de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e4:	53                   	push   ebx
c00143e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f4:	74 0f                	je     c0014405 <Device::wakeAll()+0x2b>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143fc:	e8 d9 ff ff ff       	call   c00143da <Device::wakeAll()>
c0014401:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014403:	eb e9                	jmp    c00143ee <Device::wakeAll()+0x14>
c0014405:	83 c4 08             	add    esp,0x8
c0014408:	5b                   	pop    ebx
c0014409:	c3                   	ret    

c001440a <Device::detectAll()>:
c001440a:	53                   	push   ebx
c001440b:	83 ec 14             	sub    esp,0x14
c001440e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014414:	53                   	push   ebx
c0014415:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014418:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014424:	74 0f                	je     c0014435 <Device::detectAll()+0x2b>
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001442c:	e8 d9 ff ff ff       	call   c001440a <Device::detectAll()>
c0014431:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014433:	eb e9                	jmp    c001441e <Device::detectAll()+0x14>
c0014435:	83 c4 08             	add    esp,0x8
c0014438:	5b                   	pop    ebx
c0014439:	c3                   	ret    

c001443a <Device::disableLegacyAll()>:
c001443a:	53                   	push   ebx
c001443b:	83 ec 14             	sub    esp,0x14
c001443e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014442:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014444:	53                   	push   ebx
c0014445:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014448:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014454:	74 0f                	je     c0014465 <Device::disableLegacyAll()+0x2b>
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001445c:	e8 d9 ff ff ff       	call   c001443a <Device::disableLegacyAll()>
c0014461:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014463:	eb e9                	jmp    c001444e <Device::disableLegacyAll()+0x14>
c0014465:	83 c4 08             	add    esp,0x8
c0014468:	5b                   	pop    ebx
c0014469:	c3                   	ret    

c001446a <Device::loadDriversForAll()>:
c001446a:	53                   	push   ebx
c001446b:	83 ec 08             	sub    esp,0x8
c001446e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014472:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014478:	8b 18                	mov    ebx,DWORD PTR [eax]
c001447a:	85 db                	test   ebx,ebx
c001447c:	74 12                	je     c0014490 <Device::loadDriversForAll()+0x26>
c001447e:	83 ec 0c             	sub    esp,0xc
c0014481:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014484:	e8 e1 ff ff ff       	call   c001446a <Device::loadDriversForAll()>
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	89 d8                	mov    eax,ebx
c001448e:	eb e8                	jmp    c0014478 <Device::loadDriversForAll()+0xe>
c0014490:	83 c4 08             	add    esp,0x8
c0014493:	5b                   	pop    ebx
c0014494:	c3                   	ret    
c0014495:	90                   	nop

c0014496 <Device::closeAll()>:
c0014496:	53                   	push   ebx
c0014497:	83 ec 08             	sub    esp,0x8
c001449a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001449e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a0:	6a 00                	push   0x0
c00144a2:	6a 00                	push   0x0
c00144a4:	6a 00                	push   0x0
c00144a6:	53                   	push   ebx
c00144a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b6:	74 0f                	je     c00144c7 <Device::closeAll()+0x31>
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144be:	e8 d3 ff ff ff       	call   c0014496 <Device::closeAll()>
c00144c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c5:	eb e9                	jmp    c00144b0 <Device::closeAll()+0x1a>
c00144c7:	83 c4 08             	add    esp,0x8
c00144ca:	5b                   	pop    ebx
c00144cb:	c3                   	ret    

c00144cc <Device::powerSavingAll(PowerSavingLevel)>:
c00144cc:	56                   	push   esi
c00144cd:	53                   	push   ebx
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144db:	56                   	push   esi
c00144dc:	53                   	push   ebx
c00144dd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e6:	83 c4 10             	add    esp,0x10
c00144e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ec:	74 0f                	je     c00144fd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144ee:	52                   	push   edx
c00144ef:	52                   	push   edx
c00144f0:	56                   	push   esi
c00144f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f4:	e8 d3 ff ff ff       	call   c00144cc <Device::powerSavingAll(PowerSavingLevel)>
c00144f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144fb:	eb e9                	jmp    c00144e6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144fd:	58                   	pop    eax
c00144fe:	5b                   	pop    ebx
c00144ff:	5e                   	pop    esi
c0014500:	c3                   	ret    
c0014501:	90                   	nop

c0014502 <Device::setName(char const*)>:
c0014502:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001450a:	e9 25 c3 fe ff       	jmp    c0000834 <strcpy>
c001450f:	90                   	nop

c0014510 <Device::Device(char const*)>:
c0014510:	83 ec 1c             	sub    esp,0x1c
c0014513:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c0014518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451c:	89 10                	mov    DWORD PTR [eax],edx
c001451e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014522:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001452c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014530:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001453a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014556:	83 ec 08             	sub    esp,0x8
c0014559:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001455d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014561:	e8 9c ff ff ff       	call   c0014502 <Device::setName(char const*)>
c0014566:	83 c4 10             	add    esp,0x10
c0014569:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014578:	e8 c3 b2 ff ff       	call   c000f840 <malloc>
c001457d:	83 c4 10             	add    esp,0x10
c0014580:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014586:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001458d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014591:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145bc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ee:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014606:	90                   	nop
c0014607:	83 c4 1c             	add    esp,0x1c
c001460a:	c3                   	ret    
c001460b:	90                   	nop

c001460c <Device::getName()>:
c001460c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014610:	05 d0 00 00 00       	add    eax,0xd0
c0014615:	c3                   	ret    

c0014616 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014616:	83 ec 0c             	sub    esp,0xc
c0014619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461d:	83 ec 08             	sub    esp,0x8
c0014620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014624:	50                   	push   eax
c0014625:	e8 e6 fe ff ff       	call   c0014510 <Device::Device(char const*)>
c001462a:	83 c4 10             	add    esp,0x10
c001462d:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c0014632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014636:	89 10                	mov    DWORD PTR [eax],edx
c0014638:	90                   	nop
c0014639:	83 c4 0c             	add    esp,0xc
c001463c:	c3                   	ret    
c001463d:	90                   	nop

c001463e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001463e:	57                   	push   edi
c001463f:	56                   	push   esi
c0014640:	53                   	push   ebx
c0014641:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014645:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014649:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001464d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014653:	75 0c                	jne    c0014661 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014655:	52                   	push   edx
c0014656:	52                   	push   edx
c0014657:	53                   	push   ebx
c0014658:	56                   	push   esi
c0014659:	e8 3c 42 01 00       	call   c002889a <LinkedList<Device>::addElement(Device*)>
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014667:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001466a:	74 12                	je     c001467e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001466c:	50                   	push   eax
c001466d:	57                   	push   edi
c001466e:	56                   	push   esi
c001466f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014672:	e8 c7 ff ff ff       	call   c001463e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014677:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	eb e9                	jmp    c0014667 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001467e:	5b                   	pop    ebx
c001467f:	5e                   	pop    esi
c0014680:	5f                   	pop    edi
c0014681:	c3                   	ret    

c0014682 <getDevicesOfType(DeviceType)>:
c0014682:	53                   	push   ebx
c0014683:	83 ec 14             	sub    esp,0x14
c0014686:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001468a:	53                   	push   ebx
c001468b:	e8 e6 42 01 00       	call   c0028976 <LinkedList<Device>::LinkedList()>
c0014690:	83 c4 0c             	add    esp,0xc
c0014693:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014697:	53                   	push   ebx
c0014698:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001469e:	e8 9b ff ff ff       	call   c001463e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146a3:	89 d8                	mov    eax,ebx
c00146a5:	83 c4 18             	add    esp,0x18
c00146a8:	5b                   	pop    ebx
c00146a9:	c2 04 00             	ret    0x4

c00146ac <HardDiskController::HardDiskController(char const*)>:
c00146ac:	83 ec 0c             	sub    esp,0xc
c00146af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b3:	83 ec 08             	sub    esp,0x8
c00146b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ba:	50                   	push   eax
c00146bb:	e8 50 fe ff ff       	call   c0014510 <Device::Device(char const*)>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c00146c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cc:	89 10                	mov    DWORD PTR [eax],edx
c00146ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146dc:	90                   	nop
c00146dd:	83 c4 0c             	add    esp,0xc
c00146e0:	c3                   	ret    
c00146e1:	90                   	nop

c00146e2 <HardDiskController::~HardDiskController()>:
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c00146ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ee:	89 10                	mov    DWORD PTR [eax],edx
c00146f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f4:	83 ec 0c             	sub    esp,0xc
c00146f7:	50                   	push   eax
c00146f8:	e8 f5 fa ff ff       	call   c00141f2 <Device::~Device()>
c00146fd:	83 c4 10             	add    esp,0x10
c0014700:	90                   	nop
c0014701:	83 c4 0c             	add    esp,0xc
c0014704:	c3                   	ret    
c0014705:	90                   	nop

c0014706 <HardDiskController::~HardDiskController()>:
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	83 ec 0c             	sub    esp,0xc
c001470c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014710:	e8 cd ff ff ff       	call   c00146e2 <HardDiskController::~HardDiskController()>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	83 ec 08             	sub    esp,0x8
c001471b:	68 58 01 00 00       	push   0x158
c0014720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014724:	e8 f1 e6 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0014729:	83 c4 10             	add    esp,0x10
c001472c:	83 c4 0c             	add    esp,0xc
c001472f:	c3                   	ret    

c0014730 <PhysicalDisk::eject()>:
c0014730:	83 ec 18             	sub    esp,0x18
c0014733:	68 74 ac 02 c0       	push   0xc002ac74
c0014738:	e8 bd e7 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001473d:	83 c8 ff             	or     eax,0xffffffff
c0014740:	83 c4 1c             	add    esp,0x1c
c0014743:	c3                   	ret    

c0014744 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474b:	83 ec 08             	sub    esp,0x8
c001474e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014752:	50                   	push   eax
c0014753:	e8 b8 fd ff ff       	call   c0014510 <Device::Device(char const*)>
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0014760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014764:	89 10                	mov    DWORD PTR [eax],edx
c0014766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014775:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001477c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014780:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001478a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014792:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147a6:	90                   	nop
c00147a7:	83 c4 0c             	add    esp,0xc
c00147aa:	c3                   	ret    
c00147ab:	90                   	nop

c00147ac <PhysicalDisk::startCache()>:
c00147ac:	56                   	push   esi
c00147ad:	53                   	push   ebx
c00147ae:	83 ec 10             	sub    esp,0x10
c00147b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147b5:	6a 44                	push   0x44
c00147b7:	e8 84 b0 ff ff       	call   c000f840 <malloc>
c00147bc:	89 c6                	mov    esi,eax
c00147be:	58                   	pop    eax
c00147bf:	5a                   	pop    edx
c00147c0:	53                   	push   ebx
c00147c1:	56                   	push   esi
c00147c2:	e8 39 27 00 00       	call   c0016f00 <VCache::VCache(PhysicalDisk*)>
c00147c7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147cd:	83 c4 14             	add    esp,0x14
c00147d0:	5b                   	pop    ebx
c00147d1:	5e                   	pop    esi
c00147d2:	c3                   	ret    
c00147d3:	90                   	nop

c00147d4 <PhysicalDisk::~PhysicalDisk()>:
c00147d4:	83 ec 0c             	sub    esp,0xc
c00147d7:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c00147dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e0:	89 10                	mov    DWORD PTR [eax],edx
c00147e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e6:	83 ec 0c             	sub    esp,0xc
c00147e9:	50                   	push   eax
c00147ea:	e8 03 fa ff ff       	call   c00141f2 <Device::~Device()>
c00147ef:	83 c4 10             	add    esp,0x10
c00147f2:	90                   	nop
c00147f3:	83 c4 0c             	add    esp,0xc
c00147f6:	c3                   	ret    
c00147f7:	90                   	nop

c00147f8 <PhysicalDisk::~PhysicalDisk()>:
c00147f8:	83 ec 0c             	sub    esp,0xc
c00147fb:	83 ec 0c             	sub    esp,0xc
c00147fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014802:	e8 cd ff ff ff       	call   c00147d4 <PhysicalDisk::~PhysicalDisk()>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	83 ec 08             	sub    esp,0x8
c001480d:	68 6c 01 00 00       	push   0x16c
c0014812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014816:	e8 ff e5 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001481b:	83 c4 10             	add    esp,0x10
c001481e:	83 c4 0c             	add    esp,0xc
c0014821:	c3                   	ret    

c0014822 <FPU::FPU(char const*)>:
c0014822:	83 ec 0c             	sub    esp,0xc
c0014825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014829:	83 ec 08             	sub    esp,0x8
c001482c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014830:	50                   	push   eax
c0014831:	e8 da fc ff ff       	call   c0014510 <Device::Device(char const*)>
c0014836:	83 c4 10             	add    esp,0x10
c0014839:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c001483e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014842:	89 10                	mov    DWORD PTR [eax],edx
c0014844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014848:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014852:	90                   	nop
c0014853:	83 c4 0c             	add    esp,0xc
c0014856:	c3                   	ret    
c0014857:	90                   	nop

c0014858 <FPU::~FPU()>:
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c0014860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014864:	89 10                	mov    DWORD PTR [eax],edx
c0014866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	50                   	push   eax
c001486e:	e8 7f f9 ff ff       	call   c00141f2 <Device::~Device()>
c0014873:	83 c4 10             	add    esp,0x10
c0014876:	90                   	nop
c0014877:	83 c4 0c             	add    esp,0xc
c001487a:	c3                   	ret    
c001487b:	90                   	nop

c001487c <FPU::~FPU()>:
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	83 ec 0c             	sub    esp,0xc
c0014882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014886:	e8 cd ff ff ff       	call   c0014858 <FPU::~FPU()>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	83 ec 08             	sub    esp,0x8
c0014891:	68 58 01 00 00       	push   0x158
c0014896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489a:	e8 7b e5 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	83 c4 0c             	add    esp,0xc
c00148a5:	c3                   	ret    

c00148a6 <setupFPU()>:
c00148a6:	53                   	push   ebx
c00148a7:	83 ec 08             	sub    esp,0x8
c00148aa:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00148b0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148b7:	74 19                	je     c00148d2 <setupFPU()+0x2c>
c00148b9:	83 ec 0c             	sub    esp,0xc
c00148bc:	68 58 01 00 00       	push   0x158
c00148c1:	e8 7a af ff ff       	call   c000f840 <malloc>
c00148c6:	89 c3                	mov    ebx,eax
c00148c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00148cb:	e8 1c 0c 01 00       	call   c00254ec <AVX::AVX()>
c00148d0:	eb 5b                	jmp    c001492d <setupFPU()+0x87>
c00148d2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148d8:	84 c0                	test   al,al
c00148da:	79 19                	jns    c00148f5 <setupFPU()+0x4f>
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	68 58 01 00 00       	push   0x158
c00148e4:	e8 57 af ff ff       	call   c000f840 <malloc>
c00148e9:	89 c3                	mov    ebx,eax
c00148eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00148ee:	e8 1f 0d 01 00       	call   c0025612 <SSE::SSE()>
c00148f3:	eb 38                	jmp    c001492d <setupFPU()+0x87>
c00148f5:	a8 20                	test   al,0x20
c00148f7:	74 19                	je     c0014912 <setupFPU()+0x6c>
c00148f9:	83 ec 0c             	sub    esp,0xc
c00148fc:	68 58 01 00 00       	push   0x158
c0014901:	e8 3a af ff ff       	call   c000f840 <malloc>
c0014906:	89 c3                	mov    ebx,eax
c0014908:	89 04 24             	mov    DWORD PTR [esp],eax
c001490b:	e8 6c 0c 01 00       	call   c002557c <MMX::MMX()>
c0014910:	eb 1b                	jmp    c001492d <setupFPU()+0x87>
c0014912:	a8 10                	test   al,0x10
c0014914:	74 1c                	je     c0014932 <setupFPU()+0x8c>
c0014916:	83 ec 0c             	sub    esp,0xc
c0014919:	68 58 01 00 00       	push   0x158
c001491e:	e8 1d af ff ff       	call   c000f840 <malloc>
c0014923:	89 c3                	mov    ebx,eax
c0014925:	89 04 24             	mov    DWORD PTR [esp],eax
c0014928:	e8 73 0d 01 00       	call   c00256a0 <x87::x87()>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	eb 24                	jmp    c0014956 <setupFPU()+0xb0>
c0014932:	83 e0 ef             	and    eax,0xffffffef
c0014935:	83 ec 0c             	sub    esp,0xc
c0014938:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001493e:	68 d4 ac 02 c0       	push   0xc002acd4
c0014943:	e8 b2 e5 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014948:	0f 20 c0             	mov    eax,cr0
c001494b:	83 c8 04             	or     eax,0x4
c001494e:	0f 22 c0             	mov    cr0,eax
c0014951:	31 db                	xor    ebx,ebx
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	89 d8                	mov    eax,ebx
c0014958:	83 c4 08             	add    esp,0x8
c001495b:	5b                   	pop    ebx
c001495c:	c3                   	ret    
c001495d:	90                   	nop

c001495e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001495e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014962:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014966:	c1 e0 04             	shl    eax,0x4
c0014969:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001496d:	8d 50 10             	lea    edx,[eax+0x10]
c0014970:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014976:	74 08                	je     c0014980 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014978:	83 c0 04             	add    eax,0x4
c001497b:	39 d0                	cmp    eax,edx
c001497d:	75 f1                	jne    c0014970 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001497f:	c3                   	ret    
c0014980:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001498a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014994:	eb e2                	jmp    c0014978 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014996 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014996:	57                   	push   edi
c0014997:	31 c0                	xor    eax,eax
c0014999:	56                   	push   esi
c001499a:	53                   	push   ebx
c001499b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001499f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149a7:	89 da                	mov    edx,ebx
c00149a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149ad:	c1 e2 04             	shl    edx,0x4
c00149b0:	01 ca                	add    edx,ecx
c00149b2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149ba:	74 16                	je     c00149d2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149bc:	40                   	inc    eax
c00149bd:	83 f8 04             	cmp    eax,0x4
c00149c0:	75 f0                	jne    c00149b2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149c2:	c7 44 24 10 18 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad18
c00149ca:	5b                   	pop    ebx
c00149cb:	5e                   	pop    esi
c00149cc:	5f                   	pop    edi
c00149cd:	e9 d9 5b 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>
c00149d2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149d5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149d8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149de:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149e4:	5b                   	pop    ebx
c00149e5:	5e                   	pop    esi
c00149e6:	5f                   	pop    edi
c00149e7:	c3                   	ret    

c00149e8 <doubleFault(regs*, void*)>:
c00149e8:	55                   	push   ebp
c00149e9:	89 e5                	mov    ebp,esp
c00149eb:	83 ec 08             	sub    esp,0x8
c00149ee:	83 ec 0c             	sub    esp,0xc
c00149f1:	68 53 ad 02 c0       	push   0xc002ad53
c00149f6:	e8 b0 5b 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00149fb:	83 c4 10             	add    esp,0x10
c00149fe:	90                   	nop
c00149ff:	c9                   	leave  
c0014a00:	c3                   	ret    
c0014a01:	90                   	nop

c0014a02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a02:	56                   	push   esi
c0014a03:	53                   	push   ebx
c0014a04:	50                   	push   eax
c0014a05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a09:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a0d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a12:	75 35                	jne    c0014a49 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a14:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a17:	31 d2                	xor    edx,edx
c0014a19:	89 c1                	mov    ecx,eax
c0014a1b:	c1 e1 04             	shl    ecx,0x4
c0014a1e:	01 f1                	add    ecx,esi
c0014a20:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a28:	74 3e                	je     c0014a68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a2a:	42                   	inc    edx
c0014a2b:	83 fa 04             	cmp    edx,0x4
c0014a2e:	75 f0                	jne    c0014a20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a30:	83 ec 0c             	sub    esp,0xc
c0014a33:	68 98 ad 02 c0       	push   0xc002ad98
c0014a38:	e8 6e 5b 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0014a3d:	83 c4 10             	add    esp,0x10
c0014a40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a45:	5a                   	pop    edx
c0014a46:	5b                   	pop    ebx
c0014a47:	5e                   	pop    esi
c0014a48:	c3                   	ret    
c0014a49:	83 ec 0c             	sub    esp,0xc
c0014a4c:	56                   	push   esi
c0014a4d:	e8 ba fb ff ff       	call   c001460c <Device::getName()>
c0014a52:	83 c4 10             	add    esp,0x10
c0014a55:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a58:	75 ba                	jne    c0014a14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a5a:	83 fb 0f             	cmp    ebx,0xf
c0014a5d:	7f 29                	jg     c0014a88 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a5f:	0f b6 9b e0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a20]
c0014a66:	eb ac                	jmp    c0014a14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a68:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a6f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a72:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a7c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a82:	89 d8                	mov    eax,ebx
c0014a84:	5a                   	pop    edx
c0014a85:	5b                   	pop    ebx
c0014a86:	5e                   	pop    esi
c0014a87:	c3                   	ret    
c0014a88:	83 ec 0c             	sub    esp,0xc
c0014a8b:	68 60 ad 02 c0       	push   0xc002ad60
c0014a90:	e8 16 5b 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0014a95:	83 c4 10             	add    esp,0x10
c0014a98:	e9 77 ff ff ff       	jmp    c0014a14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a9d:	90                   	nop

c0014a9e <InterruptController::clearAllHandlers(int, bool)>:
c0014a9e:	56                   	push   esi
c0014a9f:	53                   	push   ebx
c0014aa0:	52                   	push   edx
c0014aa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014aa9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014aae:	75 61                	jne    c0014b11 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ab0:	8d 46 20             	lea    eax,[esi+0x20]
c0014ab3:	c1 e6 04             	shl    esi,0x4
c0014ab6:	c1 e0 04             	shl    eax,0x4
c0014ab9:	01 de                	add    esi,ebx
c0014abb:	01 d8                	add    eax,ebx
c0014abd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014ac7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ad1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014adb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ae5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014aef:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014af9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b03:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b0d:	58                   	pop    eax
c0014b0e:	5b                   	pop    ebx
c0014b0f:	5e                   	pop    esi
c0014b10:	c3                   	ret    
c0014b11:	83 ec 0c             	sub    esp,0xc
c0014b14:	53                   	push   ebx
c0014b15:	e8 f2 fa ff ff       	call   c001460c <Device::getName()>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b20:	75 8e                	jne    c0014ab0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b22:	83 fe 0f             	cmp    esi,0xf
c0014b25:	7f 09                	jg     c0014b30 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b27:	0f b6 b6 e0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a20]
c0014b2e:	eb 80                	jmp    c0014ab0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b30:	83 ec 0c             	sub    esp,0xc
c0014b33:	68 d4 ad 02 c0       	push   0xc002add4
c0014b38:	e8 6e 5a 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	e9 6b ff ff ff       	jmp    c0014ab0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b45:	90                   	nop

c0014b46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b46:	56                   	push   esi
c0014b47:	53                   	push   ebx
c0014b48:	52                   	push   edx
c0014b49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b51:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b56:	75 3a                	jne    c0014b92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b5c:	8d 50 20             	lea    edx,[eax+0x20]
c0014b5f:	c1 e2 04             	shl    edx,0x4
c0014b62:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b65:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b69:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b6f:	74 0b                	je     c0014b7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b71:	83 c0 04             	add    eax,0x4
c0014b74:	39 d0                	cmp    eax,edx
c0014b76:	75 f1                	jne    c0014b69 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b78:	58                   	pop    eax
c0014b79:	5b                   	pop    ebx
c0014b7a:	5e                   	pop    esi
c0014b7b:	c3                   	ret    
c0014b7c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b86:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b90:	eb df                	jmp    c0014b71 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b92:	83 ec 0c             	sub    esp,0xc
c0014b95:	56                   	push   esi
c0014b96:	e8 71 fa ff ff       	call   c001460c <Device::getName()>
c0014b9b:	83 c4 10             	add    esp,0x10
c0014b9e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ba1:	75 b5                	jne    c0014b58 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ba3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014ba8:	7f 11                	jg     c0014bbb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014baa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bae:	0f b6 80 e0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a20]
c0014bb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bb9:	eb 9d                	jmp    c0014b58 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bbb:	83 ec 0c             	sub    esp,0xc
c0014bbe:	68 d4 ad 02 c0       	push   0xc002add4
c0014bc3:	e8 e3 59 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	eb 8b                	jmp    c0014b58 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bcd <nmiHandler(regs*, void*)>:
c0014bcd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014bd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bd6:	e9 b1 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014bdb <int_handler>:
c0014bdb:	55                   	push   ebp
c0014bdc:	57                   	push   edi
c0014bdd:	56                   	push   esi
c0014bde:	53                   	push   ebx
c0014bdf:	83 ec 0c             	sub    esp,0xc
c0014be2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014be6:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c0014bed:	74 0b                	je     c0014bfa <int_handler+0x1f>
c0014bef:	fa                   	cli    
c0014bf0:	f4                   	hlt    
c0014bf1:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c0014bf8:	75 f5                	jne    c0014bef <int_handler+0x14>
c0014bfa:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014bff:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c08:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c0e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c11:	83 f8 17             	cmp    eax,0x17
c0014c14:	77 13                	ja     c0014c29 <int_handler+0x4e>
c0014c16:	83 ec 08             	sub    esp,0x8
c0014c19:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c1b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c1e:	0f b6 c0             	movzx  eax,al
c0014c21:	50                   	push   eax
c0014c22:	57                   	push   edi
c0014c23:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	83 c3 15             	add    ebx,0x15
c0014c2c:	c1 e3 04             	shl    ebx,0x4
c0014c2f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c33:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c3a:	31 db                	xor    ebx,ebx
c0014c3c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c40:	85 c0                	test   eax,eax
c0014c42:	74 13                	je     c0014c57 <int_handler+0x7c>
c0014c44:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c47:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c4b:	74 1c                	je     c0014c69 <int_handler+0x8e>
c0014c4d:	83 ec 08             	sub    esp,0x8
c0014c50:	52                   	push   edx
c0014c51:	56                   	push   esi
c0014c52:	ff d0                	call   eax
c0014c54:	83 c4 10             	add    esp,0x10
c0014c57:	43                   	inc    ebx
c0014c58:	83 fb 04             	cmp    ebx,0x4
c0014c5b:	75 df                	jne    c0014c3c <int_handler+0x61>
c0014c5d:	83 c4 0c             	add    esp,0xc
c0014c60:	31 c0                	xor    eax,eax
c0014c62:	5b                   	pop    ebx
c0014c63:	31 d2                	xor    edx,edx
c0014c65:	5e                   	pop    esi
c0014c66:	5f                   	pop    edi
c0014c67:	5d                   	pop    ebp
c0014c68:	c3                   	ret    
c0014c69:	83 ec 08             	sub    esp,0x8
c0014c6c:	52                   	push   edx
c0014c6d:	56                   	push   esi
c0014c6e:	ff d0                	call   eax
c0014c70:	83 c4 10             	add    esp,0x10
c0014c73:	83 c4 0c             	add    esp,0xc
c0014c76:	5b                   	pop    ebx
c0014c77:	5e                   	pop    esi
c0014c78:	5f                   	pop    edi
c0014c79:	5d                   	pop    ebp
c0014c7a:	c3                   	ret    
c0014c7b:	90                   	nop

c0014c7c <InterruptController::InterruptController(char const*)>:
c0014c7c:	83 ec 1c             	sub    esp,0x1c
c0014c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c83:	83 ec 08             	sub    esp,0x8
c0014c86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c8a:	50                   	push   eax
c0014c8b:	e8 80 f8 ff ff       	call   c0014510 <Device::Device(char const*)>
c0014c90:	83 c4 10             	add    esp,0x10
c0014c93:	ba 7c b0 02 c0       	mov    edx,0xc002b07c
c0014c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9c:	89 10                	mov    DWORD PTR [eax],edx
c0014c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cb4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cbc:	7f 5e                	jg     c0014d1c <InterruptController::InterruptController(char const*)+0xa0>
c0014cbe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cc6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ccb:	7f 49                	jg     c0014d16 <InterruptController::InterruptController(char const*)+0x9a>
c0014ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cd5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ce0:	01 ca                	add    edx,ecx
c0014ce2:	83 c2 54             	add    edx,0x54
c0014ce5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cf5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d00:	01 ca                	add    edx,ecx
c0014d02:	81 c2 54 04 00 00    	add    edx,0x454
c0014d08:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d10:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d14:	eb b0                	jmp    c0014cc6 <InterruptController::InterruptController(char const*)+0x4a>
c0014d16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d1a:	eb 98                	jmp    c0014cb4 <InterruptController::InterruptController(char const*)+0x38>
c0014d1c:	90                   	nop
c0014d1d:	83 c4 1c             	add    esp,0x1c
c0014d20:	c3                   	ret    
c0014d21:	90                   	nop

c0014d22 <InterruptController::~InterruptController()>:
c0014d22:	83 ec 0c             	sub    esp,0xc
c0014d25:	ba 7c b0 02 c0       	mov    edx,0xc002b07c
c0014d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d2e:	89 10                	mov    DWORD PTR [eax],edx
c0014d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d34:	83 ec 0c             	sub    esp,0xc
c0014d37:	50                   	push   eax
c0014d38:	e8 b5 f4 ff ff       	call   c00141f2 <Device::~Device()>
c0014d3d:	83 c4 10             	add    esp,0x10
c0014d40:	90                   	nop
c0014d41:	83 c4 0c             	add    esp,0xc
c0014d44:	c3                   	ret    
c0014d45:	90                   	nop

c0014d46 <InterruptController::~InterruptController()>:
c0014d46:	83 ec 0c             	sub    esp,0xc
c0014d49:	83 ec 0c             	sub    esp,0xc
c0014d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d50:	e8 cd ff ff ff       	call   c0014d22 <InterruptController::~InterruptController()>
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	83 ec 08             	sub    esp,0x8
c0014d5b:	68 58 21 00 00       	push   0x2158
c0014d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d64:	e8 b1 e0 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	83 c4 0c             	add    esp,0xc
c0014d6f:	c3                   	ret    

c0014d70 <displayDebugInfo(regs*)>:
c0014d70:	55                   	push   ebp
c0014d71:	57                   	push   edi
c0014d72:	56                   	push   esi
c0014d73:	53                   	push   ebx
c0014d74:	83 ec 24             	sub    esp,0x24
c0014d77:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d7b:	0f 20 c2             	mov    edx,cr0
c0014d7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d82:	0f 20 d7             	mov    edi,cr2
c0014d85:	0f 20 de             	mov    esi,cr3
c0014d88:	0f 20 e5             	mov    ebp,cr4
c0014d8b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d8e:	68 0e ae 02 c0       	push   0xc002ae0e
c0014d93:	e8 62 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014d98:	59                   	pop    ecx
c0014d99:	58                   	pop    eax
c0014d9a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d9d:	68 19 ae 02 c0       	push   0xc002ae19
c0014da2:	e8 53 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014da7:	58                   	pop    eax
c0014da8:	5a                   	pop    edx
c0014da9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dac:	68 24 ae 02 c0       	push   0xc002ae24
c0014db1:	e8 44 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014db6:	59                   	pop    ecx
c0014db7:	58                   	pop    eax
c0014db8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dbb:	68 2f ae 02 c0       	push   0xc002ae2f
c0014dc0:	e8 35 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014dc5:	58                   	pop    eax
c0014dc6:	5a                   	pop    edx
c0014dc7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dca:	68 3a ae 02 c0       	push   0xc002ae3a
c0014dcf:	e8 26 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014dd4:	59                   	pop    ecx
c0014dd5:	58                   	pop    eax
c0014dd6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014dd9:	68 45 ae 02 c0       	push   0xc002ae45
c0014dde:	e8 17 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014de3:	58                   	pop    eax
c0014de4:	5a                   	pop    edx
c0014de5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014de8:	68 50 ae 02 c0       	push   0xc002ae50
c0014ded:	e8 08 e1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014df2:	59                   	pop    ecx
c0014df3:	58                   	pop    eax
c0014df4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014df7:	68 5b ae 02 c0       	push   0xc002ae5b
c0014dfc:	e8 f9 e0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014e01:	58                   	pop    eax
c0014e02:	5a                   	pop    edx
c0014e03:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e06:	68 66 ae 02 c0       	push   0xc002ae66
c0014e0b:	e8 ea e0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014e10:	59                   	pop    ecx
c0014e11:	58                   	pop    eax
c0014e12:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e15:	68 75 ae 02 c0       	push   0xc002ae75
c0014e1a:	e8 db e0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014e1f:	58                   	pop    eax
c0014e20:	5a                   	pop    edx
c0014e21:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e24:	68 80 ae 02 c0       	push   0xc002ae80
c0014e29:	e8 cc e0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014e2e:	59                   	pop    ecx
c0014e2f:	58                   	pop    eax
c0014e30:	57                   	push   edi
c0014e31:	68 8b ae 02 c0       	push   0xc002ae8b
c0014e36:	e8 bf e0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014e3b:	58                   	pop    eax
c0014e3c:	5a                   	pop    edx
c0014e3d:	56                   	push   esi
c0014e3e:	68 96 ae 02 c0       	push   0xc002ae96
c0014e43:	e8 b2 e0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0014e48:	59                   	pop    ecx
c0014e49:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e54:	e8 f8 be ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0014e59:	58                   	pop    eax
c0014e5a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e5d:	5a                   	pop    edx
c0014e5e:	c1 e0 05             	shl    eax,0x5
c0014e61:	05 40 d3 02 c0       	add    eax,0xc002d340
c0014e66:	50                   	push   eax
c0014e67:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e72:	e8 f9 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014e77:	59                   	pop    ecx
c0014e78:	58                   	pop    eax
c0014e79:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e7e:	68 a1 ae 02 c0       	push   0xc002aea1
c0014e83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e89:	e8 e2 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014e8e:	58                   	pop    eax
c0014e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e94:	5a                   	pop    edx
c0014e95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e98:	83 c0 0c             	add    eax,0xc
c0014e9b:	50                   	push   eax
c0014e9c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ea1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea7:	e8 c4 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014eac:	59                   	pop    ecx
c0014ead:	58                   	pop    eax
c0014eae:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014eb3:	68 aa ae 02 c0       	push   0xc002aeaa
c0014eb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebe:	e8 ad c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ec3:	58                   	pop    eax
c0014ec4:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ec9:	5a                   	pop    edx
c0014eca:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ecd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed3:	e8 be c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014ed8:	59                   	pop    ecx
c0014ed9:	58                   	pop    eax
c0014eda:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014edf:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014ee4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eea:	e8 81 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014eef:	58                   	pop    eax
c0014ef0:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ef5:	5a                   	pop    edx
c0014ef6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ef9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eff:	e8 92 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f04:	59                   	pop    ecx
c0014f05:	58                   	pop    eax
c0014f06:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f0b:	68 ba ae 02 c0       	push   0xc002aeba
c0014f10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f16:	e8 55 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f1b:	58                   	pop    eax
c0014f1c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f21:	5a                   	pop    edx
c0014f22:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2b:	e8 66 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f30:	59                   	pop    ecx
c0014f31:	58                   	pop    eax
c0014f32:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f37:	68 c2 ae 02 c0       	push   0xc002aec2
c0014f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f42:	e8 29 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f47:	58                   	pop    eax
c0014f48:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f4d:	5a                   	pop    edx
c0014f4e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f57:	e8 3a c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f5c:	59                   	pop    ecx
c0014f5d:	58                   	pop    eax
c0014f5e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f63:	68 ca ae 02 c0       	push   0xc002aeca
c0014f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6e:	e8 fd c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f73:	58                   	pop    eax
c0014f74:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f79:	5a                   	pop    edx
c0014f7a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f83:	e8 0e c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f88:	59                   	pop    ecx
c0014f89:	58                   	pop    eax
c0014f8a:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f8f:	68 d2 ae 02 c0       	push   0xc002aed2
c0014f94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9a:	e8 d1 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f9f:	58                   	pop    eax
c0014fa0:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fa5:	5a                   	pop    edx
c0014fa6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faf:	e8 e2 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fb4:	59                   	pop    ecx
c0014fb5:	58                   	pop    eax
c0014fb6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fbb:	68 da ae 02 c0       	push   0xc002aeda
c0014fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc6:	e8 a5 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fcb:	58                   	pop    eax
c0014fcc:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fd1:	5a                   	pop    edx
c0014fd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fd6:	52                   	push   edx
c0014fd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdd:	e8 b4 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fe2:	59                   	pop    ecx
c0014fe3:	58                   	pop    eax
c0014fe4:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fe9:	68 e3 ae 02 c0       	push   0xc002aee3
c0014fee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff4:	e8 77 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014ff9:	58                   	pop    eax
c0014ffa:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fff:	5a                   	pop    edx
c0015000:	57                   	push   edi
c0015001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015007:	e8 8a c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001500c:	59                   	pop    ecx
c001500d:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015012:	5f                   	pop    edi
c0015013:	68 eb ae 02 c0       	push   0xc002aeeb
c0015018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501e:	e8 4d c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015023:	58                   	pop    eax
c0015024:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015029:	5a                   	pop    edx
c001502a:	56                   	push   esi
c001502b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015031:	e8 60 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015036:	59                   	pop    ecx
c0015037:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001503c:	5e                   	pop    esi
c001503d:	68 f3 ae 02 c0       	push   0xc002aef3
c0015042:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015048:	e8 23 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001504d:	5f                   	pop    edi
c001504e:	58                   	pop    eax
c001504f:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015054:	55                   	push   ebp
c0015055:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505b:	e8 36 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015060:	58                   	pop    eax
c0015061:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015066:	5a                   	pop    edx
c0015067:	68 fb ae 02 c0       	push   0xc002aefb
c001506c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015072:	e8 f9 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015077:	0f 21 c0             	mov    eax,db0
c001507a:	59                   	pop    ecx
c001507b:	5e                   	pop    esi
c001507c:	50                   	push   eax
c001507d:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015082:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015088:	e8 09 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001508d:	5f                   	pop    edi
c001508e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015093:	5d                   	pop    ebp
c0015094:	68 04 af 02 c0       	push   0xc002af04
c0015099:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509f:	e8 cc c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150a4:	0f 21 c8             	mov    eax,db1
c00150a7:	5a                   	pop    edx
c00150a8:	59                   	pop    ecx
c00150a9:	50                   	push   eax
c00150aa:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b5:	e8 dc c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150ba:	5e                   	pop    esi
c00150bb:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150c0:	5f                   	pop    edi
c00150c1:	68 0c af 02 c0       	push   0xc002af0c
c00150c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cc:	e8 9f c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150d1:	0f 21 d0             	mov    eax,db2
c00150d4:	5d                   	pop    ebp
c00150d5:	5a                   	pop    edx
c00150d6:	50                   	push   eax
c00150d7:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e2:	e8 af c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150e7:	59                   	pop    ecx
c00150e8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150ed:	5e                   	pop    esi
c00150ee:	68 14 af 02 c0       	push   0xc002af14
c00150f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f9:	e8 72 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150fe:	0f 21 d8             	mov    eax,db3
c0015101:	5f                   	pop    edi
c0015102:	5d                   	pop    ebp
c0015103:	50                   	push   eax
c0015104:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015109:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510f:	e8 82 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015114:	58                   	pop    eax
c0015115:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001511a:	5a                   	pop    edx
c001511b:	68 1c af 02 c0       	push   0xc002af1c
c0015120:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015126:	e8 45 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001512b:	0f 21 f0             	mov    eax,db6
c001512e:	59                   	pop    ecx
c001512f:	5e                   	pop    esi
c0015130:	50                   	push   eax
c0015131:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513c:	e8 55 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015141:	5f                   	pop    edi
c0015142:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015147:	5d                   	pop    ebp
c0015148:	68 24 af 02 c0       	push   0xc002af24
c001514d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015153:	e8 18 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015158:	0f 21 f8             	mov    eax,db7
c001515b:	5a                   	pop    edx
c001515c:	59                   	pop    ecx
c001515d:	50                   	push   eax
c001515e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015163:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015169:	e8 28 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001516e:	5e                   	pop    esi
c001516f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015172:	e8 16 85 00 00       	call   c001d68d <Thr::getDriverNameFromAddress(unsigned long)>
c0015177:	83 c4 10             	add    esp,0x10
c001517a:	85 c0                	test   eax,eax
c001517c:	74 7d                	je     c00151fb <displayDebugInfo(regs*)+0x48b>
c001517e:	89 c6                	mov    esi,eax
c0015180:	50                   	push   eax
c0015181:	50                   	push   eax
c0015182:	56                   	push   esi
c0015183:	68 2c af 02 c0       	push   0xc002af2c
c0015188:	e8 6d dd ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001518d:	5a                   	pop    edx
c001518e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015193:	59                   	pop    ecx
c0015194:	68 3a af 02 c0       	push   0xc002af3a
c0015199:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519f:	e8 cc bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151a4:	5f                   	pop    edi
c00151a5:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00151aa:	5d                   	pop    ebp
c00151ab:	56                   	push   esi
c00151ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b2:	e8 b9 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151b7:	58                   	pop    eax
c00151b8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00151bd:	5a                   	pop    edx
c00151be:	68 46 af 02 c0       	push   0xc002af46
c00151c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c9:	e8 a2 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151ce:	59                   	pop    ecx
c00151cf:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00151d4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151dd:	e8 e2 84 00 00       	call   c001d6c4 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151e2:	5b                   	pop    ebx
c00151e3:	5d                   	pop    ebp
c00151e4:	50                   	push   eax
c00151e5:	57                   	push   edi
c00151e6:	e8 ab bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00151eb:	58                   	pop    eax
c00151ec:	5a                   	pop    edx
c00151ed:	56                   	push   esi
c00151ee:	68 52 af 02 c0       	push   0xc002af52
c00151f3:	e8 02 dd ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	fa                   	cli    
c00151fc:	f4                   	hlt    
c00151fd:	eb fe                	jmp    c00151fd <displayDebugInfo(regs*)+0x48d>

c00151ff <x87EmulHandler(regs*, void*)>:
c00151ff:	53                   	push   ebx
c0015200:	83 ec 14             	sub    esp,0x14
c0015203:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015207:	53                   	push   ebx
c0015208:	e8 0d a8 00 00       	call   c001fa1a <Vm::x87Handler(regs*)>
c001520d:	83 c4 10             	add    esp,0x10
c0015210:	84 c0                	test   al,al
c0015212:	74 05                	je     c0015219 <x87EmulHandler(regs*, void*)+0x1a>
c0015214:	83 c4 08             	add    esp,0x8
c0015217:	5b                   	pop    ebx
c0015218:	c3                   	ret    
c0015219:	83 ec 0c             	sub    esp,0xc
c001521c:	68 62 af 02 c0       	push   0xc002af62
c0015221:	e8 d4 dc ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0015226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015229:	e8 42 fb ff ff       	call   c0014d70 <displayDebugInfo(regs*)>

c001522e <gpFault(regs*, void*)>:
c001522e:	53                   	push   ebx
c001522f:	83 ec 14             	sub    esp,0x14
c0015232:	c7 05 34 e5 02 c0 97 ed 01 c0 	mov    DWORD PTR ds:0xc002e534,0xc001ed97
c001523c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015240:	53                   	push   ebx
c0015241:	e8 51 9b 00 00       	call   c001ed97 <Vm::faultHandler(regs*)>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	84 c0                	test   al,al
c001524b:	74 05                	je     c0015252 <gpFault(regs*, void*)+0x24>
c001524d:	83 c4 08             	add    esp,0x8
c0015250:	5b                   	pop    ebx
c0015251:	c3                   	ret    
c0015252:	83 ec 0c             	sub    esp,0xc
c0015255:	68 78 af 02 c0       	push   0xc002af78
c001525a:	e8 9b dc ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001525f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015262:	e8 09 fb ff ff       	call   c0014d70 <displayDebugInfo(regs*)>

c0015267 <pgFault(regs*, void*)>:
c0015267:	53                   	push   ebx
c0015268:	83 ec 14             	sub    esp,0x14
c001526b:	68 93 af 02 c0       	push   0xc002af93
c0015270:	e8 85 dc ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0015275:	0f 20 d3             	mov    ebx,cr2
c0015278:	58                   	pop    eax
c0015279:	5a                   	pop    edx
c001527a:	53                   	push   ebx
c001527b:	68 a0 af 02 c0       	push   0xc002afa0
c0015280:	e8 75 dc ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0015285:	59                   	pop    ecx
c0015286:	58                   	pop    eax
c0015287:	53                   	push   ebx
c0015288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001528d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015290:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015296:	e8 8d d8 ff ff       	call   c0012b28 <VAS::tryLoadBackOffDisk(unsigned long)>
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	84 c0                	test   al,al
c00152a0:	74 05                	je     c00152a7 <pgFault(regs*, void*)+0x40>
c00152a2:	83 c4 08             	add    esp,0x8
c00152a5:	5b                   	pop    ebx
c00152a6:	c3                   	ret    
c00152a7:	83 ec 0c             	sub    esp,0xc
c00152aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ae:	e8 bd fa ff ff       	call   c0014d70 <displayDebugInfo(regs*)>

c00152b3 <otherISRHandler(regs*, void*)>:
c00152b3:	53                   	push   ebx
c00152b4:	83 ec 0c             	sub    esp,0xc
c00152b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152bb:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152be:	50                   	push   eax
c00152bf:	50                   	push   eax
c00152c0:	68 ac af 02 c0       	push   0xc002afac
c00152c5:	e8 30 dc ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00152ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152cd:	e8 9e fa ff ff       	call   c0014d70 <displayDebugInfo(regs*)>

c00152d2 <opcodeFault(regs*, void*)>:
c00152d2:	55                   	push   ebp
c00152d3:	89 e5                	mov    ebp,esp
c00152d5:	56                   	push   esi
c00152d6:	53                   	push   ebx
c00152d7:	83 ec 40             	sub    esp,0x40
c00152da:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00152df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152e5:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152eb:	84 c0                	test   al,al
c00152ed:	74 24                	je     c0015313 <opcodeFault(regs*, void*)+0x41>
c00152ef:	83 ec 0c             	sub    esp,0xc
c00152f2:	68 cc af 02 c0       	push   0xc002afcc
c00152f7:	e8 fe db ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00152fc:	83 c4 10             	add    esp,0x10
c00152ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015302:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015305:	8d 50 19             	lea    edx,[eax+0x19]
c0015308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001530e:	e9 be 05 00 00       	jmp    c00158d1 <opcodeFault(regs*, void*)+0x5ff>
c0015313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015316:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015319:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001531c:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015320:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015327:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001532d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015330:	8a 00                	mov    al,BYTE PTR [eax]
c0015332:	3c f0                	cmp    al,0xf0
c0015334:	75 17                	jne    c001534d <opcodeFault(regs*, void*)+0x7b>
c0015336:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533f:	8d 50 01             	lea    edx,[eax+0x1]
c0015342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015345:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015348:	e9 da 00 00 00       	jmp    c0015427 <opcodeFault(regs*, void*)+0x155>
c001534d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015350:	8a 00                	mov    al,BYTE PTR [eax]
c0015352:	3c f2                	cmp    al,0xf2
c0015354:	74 09                	je     c001535f <opcodeFault(regs*, void*)+0x8d>
c0015356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015359:	8a 00                	mov    al,BYTE PTR [eax]
c001535b:	3c f3                	cmp    al,0xf3
c001535d:	75 1b                	jne    c001537a <opcodeFault(regs*, void*)+0xa8>
c001535f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015363:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015369:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536c:	8d 50 01             	lea    edx,[eax+0x1]
c001536f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015372:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015375:	e9 ad 00 00 00       	jmp    c0015427 <opcodeFault(regs*, void*)+0x155>
c001537a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537d:	8a 00                	mov    al,BYTE PTR [eax]
c001537f:	3c 66                	cmp    al,0x66
c0015381:	75 1f                	jne    c00153a2 <opcodeFault(regs*, void*)+0xd0>
c0015383:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015387:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001538b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001538e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015391:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015394:	8d 50 01             	lea    edx,[eax+0x1]
c0015397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539d:	e9 85 00 00 00       	jmp    c0015427 <opcodeFault(regs*, void*)+0x155>
c00153a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a5:	8a 00                	mov    al,BYTE PTR [eax]
c00153a7:	3c 67                	cmp    al,0x67
c00153a9:	75 18                	jne    c00153c3 <opcodeFault(regs*, void*)+0xf1>
c00153ab:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153af:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b8:	8d 50 01             	lea    edx,[eax+0x1]
c00153bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c1:	eb 64                	jmp    c0015427 <opcodeFault(regs*, void*)+0x155>
c00153c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c6:	8a 00                	mov    al,BYTE PTR [eax]
c00153c8:	3c 2e                	cmp    al,0x2e
c00153ca:	74 09                	je     c00153d5 <opcodeFault(regs*, void*)+0x103>
c00153cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cf:	8a 00                	mov    al,BYTE PTR [eax]
c00153d1:	3c 3e                	cmp    al,0x3e
c00153d3:	75 18                	jne    c00153ed <opcodeFault(regs*, void*)+0x11b>
c00153d5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e2:	8d 50 01             	lea    edx,[eax+0x1]
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153eb:	eb 3a                	jmp    c0015427 <opcodeFault(regs*, void*)+0x155>
c00153ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f0:	8a 00                	mov    al,BYTE PTR [eax]
c00153f2:	3c 36                	cmp    al,0x36
c00153f4:	74 1b                	je     c0015411 <opcodeFault(regs*, void*)+0x13f>
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8a 00                	mov    al,BYTE PTR [eax]
c00153fb:	3c 26                	cmp    al,0x26
c00153fd:	74 12                	je     c0015411 <opcodeFault(regs*, void*)+0x13f>
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	8a 00                	mov    al,BYTE PTR [eax]
c0015404:	3c 64                	cmp    al,0x64
c0015406:	74 09                	je     c0015411 <opcodeFault(regs*, void*)+0x13f>
c0015408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540b:	8a 00                	mov    al,BYTE PTR [eax]
c001540d:	3c 65                	cmp    al,0x65
c001540f:	75 16                	jne    c0015427 <opcodeFault(regs*, void*)+0x155>
c0015411:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015415:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541e:	8d 50 01             	lea    edx,[eax+0x1]
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015427:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542a:	8a 00                	mov    al,BYTE PTR [eax]
c001542c:	3c 0f                	cmp    al,0xf
c001542e:	0f 85 ad 00 00 00    	jne    c00154e1 <opcodeFault(regs*, void*)+0x20f>
c0015434:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015437:	40                   	inc    eax
c0015438:	8a 00                	mov    al,BYTE PTR [eax]
c001543a:	3c c2                	cmp    al,0xc2
c001543c:	74 0e                	je     c001544c <opcodeFault(regs*, void*)+0x17a>
c001543e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015441:	40                   	inc    eax
c0015442:	8a 00                	mov    al,BYTE PTR [eax]
c0015444:	3c c3                	cmp    al,0xc3
c0015446:	0f 85 95 00 00 00    	jne    c00154e1 <opcodeFault(regs*, void*)+0x20f>
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	68 ef af 02 c0       	push   0xc002afef
c0015454:	e8 a1 da ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015462:	8d 50 01             	lea    edx,[eax+0x1]
c0015465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015468:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001546b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001546e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015471:	8a 00                	mov    al,BYTE PTR [eax]
c0015473:	8d 50 fe             	lea    edx,[eax-0x2]
c0015476:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015479:	88 10                	mov    BYTE PTR [eax],dl
c001547b:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001547e:	50                   	push   eax
c001547f:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015482:	50                   	push   eax
c0015483:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015486:	50                   	push   eax
c0015487:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001548a:	e8 e3 47 00 00       	call   c0019c72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015498:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001549b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001549e:	01 d0                	add    eax,edx
c00154a0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154ac:	48                   	dec    eax
c00154ad:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	83 ec 04             	sub    esp,0x4
c00154bf:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154c2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154c5:	50                   	push   eax
c00154c6:	e8 e9 ac fe ff       	call   c00001b4 <voodooXADD>
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154d1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154d4:	01 c2                	add    edx,eax
c00154d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154dc:	e9 f0 03 00 00       	jmp    c00158d1 <opcodeFault(regs*, void*)+0x5ff>
c00154e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e4:	8a 00                	mov    al,BYTE PTR [eax]
c00154e6:	3c 0f                	cmp    al,0xf
c00154e8:	0f 85 8b 01 00 00    	jne    c0015679 <opcodeFault(regs*, void*)+0x3a7>
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	40                   	inc    eax
c00154f2:	8a 00                	mov    al,BYTE PTR [eax]
c00154f4:	3c c7                	cmp    al,0xc7
c00154f6:	0f 86 7d 01 00 00    	jbe    c0015679 <opcodeFault(regs*, void*)+0x3a7>
c00154fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ff:	40                   	inc    eax
c0015500:	8a 00                	mov    al,BYTE PTR [eax]
c0015502:	3c cf                	cmp    al,0xcf
c0015504:	0f 87 6f 01 00 00    	ja     c0015679 <opcodeFault(regs*, void*)+0x3a7>
c001550a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550d:	40                   	inc    eax
c001550e:	8a 00                	mov    al,BYTE PTR [eax]
c0015510:	83 c0 38             	add    eax,0x38
c0015513:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015516:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001551a:	75 0b                	jne    c0015527 <opcodeFault(regs*, void*)+0x255>
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015522:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015525:	eb 75                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c0015527:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001552b:	75 0b                	jne    c0015538 <opcodeFault(regs*, void*)+0x266>
c001552d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015530:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015533:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015536:	eb 64                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c0015538:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001553c:	75 0b                	jne    c0015549 <opcodeFault(regs*, void*)+0x277>
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015544:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015547:	eb 53                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c0015549:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001554d:	75 0b                	jne    c001555a <opcodeFault(regs*, void*)+0x288>
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015555:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015558:	eb 42                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c001555a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001555e:	75 0b                	jne    c001556b <opcodeFault(regs*, void*)+0x299>
c0015560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015563:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015566:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015569:	eb 31                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c001556b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001556f:	75 0b                	jne    c001557c <opcodeFault(regs*, void*)+0x2aa>
c0015571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015574:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015577:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557a:	eb 20                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c001557c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015580:	75 0b                	jne    c001558d <opcodeFault(regs*, void*)+0x2bb>
c0015582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015585:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015588:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558b:	eb 0f                	jmp    c001559c <opcodeFault(regs*, void*)+0x2ca>
c001558d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015591:	75 09                	jne    c001559c <opcodeFault(regs*, void*)+0x2ca>
c0015593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015599:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559c:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155a0:	74 10                	je     c00155b2 <opcodeFault(regs*, void*)+0x2e0>
c00155a2:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155a9:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155b0:	eb 2d                	jmp    c00155df <opcodeFault(regs*, void*)+0x30d>
c00155b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155b5:	c1 e0 18             	shl    eax,0x18
c00155b8:	89 c2                	mov    edx,eax
c00155ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155bd:	c1 e0 08             	shl    eax,0x8
c00155c0:	25 00 00 ff 00       	and    eax,0xff0000
c00155c5:	09 c2                	or     edx,eax
c00155c7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ca:	c1 e8 08             	shr    eax,0x8
c00155cd:	25 00 ff 00 00       	and    eax,0xff00
c00155d2:	09 c2                	or     edx,eax
c00155d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155d7:	c1 e8 18             	shr    eax,0x18
c00155da:	09 d0                	or     eax,edx
c00155dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155df:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155e3:	75 0b                	jne    c00155f0 <opcodeFault(regs*, void*)+0x31e>
c00155e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155eb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155ee:	eb 75                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c00155f0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155f4:	75 0b                	jne    c0015601 <opcodeFault(regs*, void*)+0x32f>
c00155f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155ff:	eb 64                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c0015601:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015605:	75 0b                	jne    c0015612 <opcodeFault(regs*, void*)+0x340>
c0015607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560d:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015610:	eb 53                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c0015612:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015616:	75 0b                	jne    c0015623 <opcodeFault(regs*, void*)+0x351>
c0015618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015621:	eb 42                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c0015623:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015627:	75 0b                	jne    c0015634 <opcodeFault(regs*, void*)+0x362>
c0015629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001562f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015632:	eb 31                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c0015634:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015638:	75 0b                	jne    c0015645 <opcodeFault(regs*, void*)+0x373>
c001563a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015640:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015643:	eb 20                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c0015645:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015649:	75 0b                	jne    c0015656 <opcodeFault(regs*, void*)+0x384>
c001564b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015651:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015654:	eb 0f                	jmp    c0015665 <opcodeFault(regs*, void*)+0x393>
c0015656:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001565a:	75 09                	jne    c0015665 <opcodeFault(regs*, void*)+0x393>
c001565c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015662:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001566b:	8d 50 02             	lea    edx,[eax+0x2]
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015674:	e9 58 02 00 00       	jmp    c00158d1 <opcodeFault(regs*, void*)+0x5ff>
c0015679:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567c:	8a 00                	mov    al,BYTE PTR [eax]
c001567e:	3c 0f                	cmp    al,0xf
c0015680:	0f 85 76 01 00 00    	jne    c00157fc <opcodeFault(regs*, void*)+0x52a>
c0015686:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015689:	40                   	inc    eax
c001568a:	8a 00                	mov    al,BYTE PTR [eax]
c001568c:	3c c7                	cmp    al,0xc7
c001568e:	0f 85 68 01 00 00    	jne    c00157fc <opcodeFault(regs*, void*)+0x52a>
c0015694:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001569d:	8d 50 01             	lea    edx,[eax+0x1]
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156a6:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156a9:	50                   	push   eax
c00156aa:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156ad:	50                   	push   eax
c00156ae:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156b1:	50                   	push   eax
c00156b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156b5:	e8 b8 45 00 00       	call   c0019c72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156ba:	83 c4 10             	add    esp,0x10
c00156bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156c0:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156c3:	83 f0 01             	xor    eax,0x1
c00156c6:	84 c0                	test   al,al
c00156c8:	0f 84 2e 01 00 00    	je     c00157fc <opcodeFault(regs*, void*)+0x52a>
c00156ce:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156d1:	3c 01                	cmp    al,0x1
c00156d3:	0f 85 23 01 00 00    	jne    c00157fc <opcodeFault(regs*, void*)+0x52a>
c00156d9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156dc:	83 f0 01             	xor    eax,0x1
c00156df:	84 c0                	test   al,al
c00156e1:	0f 84 15 01 00 00    	je     c00157fc <opcodeFault(regs*, void*)+0x52a>
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156ed:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156f0:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156f7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156fd:	89 c2                	mov    edx,eax
c00156ff:	b8 00 00 00 00       	mov    eax,0x0
c0015704:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015707:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001570a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015710:	ba 00 00 00 00       	mov    edx,0x0
c0015715:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015718:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001571b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015721:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015724:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001572b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001572e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015731:	89 c2                	mov    edx,eax
c0015733:	b8 00 00 00 00       	mov    eax,0x0
c0015738:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001573b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001573e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015741:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015744:	ba 00 00 00 00       	mov    edx,0x0
c0015749:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001574c:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001574f:	e8 32 86 00 00       	call   c001dd86 <lockScheduler()>
c0015754:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015757:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001575a:	8b 00                	mov    eax,DWORD PTR [eax]
c001575c:	89 c1                	mov    ecx,eax
c001575e:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015761:	89 cb                	mov    ebx,ecx
c0015763:	89 d0                	mov    eax,edx
c0015765:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015768:	89 c6                	mov    esi,eax
c001576a:	89 f0                	mov    eax,esi
c001576c:	09 d8                	or     eax,ebx
c001576e:	85 c0                	test   eax,eax
c0015770:	75 21                	jne    c0015793 <opcodeFault(regs*, void*)+0x4c1>
c0015772:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015775:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015778:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001577b:	89 01                	mov    DWORD PTR [ecx],eax
c001577d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015783:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015786:	83 c8 40             	or     eax,0x40
c0015789:	89 c2                	mov    edx,eax
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015791:	eb 3e                	jmp    c00157d1 <opcodeFault(regs*, void*)+0x4ff>
c0015793:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015796:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015799:	8b 00                	mov    eax,DWORD PTR [eax]
c001579b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001579e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157a1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157aa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157ad:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157b0:	89 d0                	mov    eax,edx
c00157b2:	31 d2                	xor    edx,edx
c00157b4:	89 c3                	mov    ebx,eax
c00157b6:	89 d6                	mov    esi,edx
c00157b8:	89 da                	mov    edx,ebx
c00157ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bd:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157c6:	83 e0 bf             	and    eax,0xffffffbf
c00157c9:	89 c2                	mov    edx,eax
c00157cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ce:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157d1:	e8 b2 85 00 00       	call   c001dd88 <unlockScheduler()>
c00157d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157dc:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157df:	01 c2                	add    edx,eax
c00157e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157e7:	83 ec 0c             	sub    esp,0xc
c00157ea:	68 fe af 02 c0       	push   0xc002affe
c00157ef:	e8 06 d7 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	e9 d5 00 00 00       	jmp    c00158d1 <opcodeFault(regs*, void*)+0x5ff>
c00157fc:	83 ec 0c             	sub    esp,0xc
c00157ff:	68 11 b0 02 c0       	push   0xc002b011
c0015804:	e8 f1 d6 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0015809:	83 c4 10             	add    esp,0x10
c001580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015815:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015818:	c1 e0 04             	shl    eax,0x4
c001581b:	01 d0                	add    eax,edx
c001581d:	83 c0 03             	add    eax,0x3
c0015820:	8a 00                	mov    al,BYTE PTR [eax]
c0015822:	0f b6 d8             	movzx  ebx,al
c0015825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015828:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001582b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015831:	c1 e0 04             	shl    eax,0x4
c0015834:	01 d0                	add    eax,edx
c0015836:	83 c0 02             	add    eax,0x2
c0015839:	8a 00                	mov    al,BYTE PTR [eax]
c001583b:	0f b6 c8             	movzx  ecx,al
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001584a:	c1 e0 04             	shl    eax,0x4
c001584d:	01 d0                	add    eax,edx
c001584f:	40                   	inc    eax
c0015850:	8a 00                	mov    al,BYTE PTR [eax]
c0015852:	0f b6 d0             	movzx  edx,al
c0015855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015858:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015861:	c1 e0 04             	shl    eax,0x4
c0015864:	01 f0                	add    eax,esi
c0015866:	8a 00                	mov    al,BYTE PTR [eax]
c0015868:	0f b6 c0             	movzx  eax,al
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	53                   	push   ebx
c001586f:	51                   	push   ecx
c0015870:	52                   	push   edx
c0015871:	50                   	push   eax
c0015872:	68 24 b0 02 c0       	push   0xc002b024
c0015877:	e8 7e d6 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001587c:	83 c4 20             	add    esp,0x20
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015885:	83 c0 03             	add    eax,0x3
c0015888:	8a 00                	mov    al,BYTE PTR [eax]
c001588a:	0f b6 d8             	movzx  ebx,al
c001588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015890:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015893:	83 c0 02             	add    eax,0x2
c0015896:	8a 00                	mov    al,BYTE PTR [eax]
c0015898:	0f b6 c8             	movzx  ecx,al
c001589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a1:	40                   	inc    eax
c00158a2:	8a 00                	mov    al,BYTE PTR [eax]
c00158a4:	0f b6 d0             	movzx  edx,al
c00158a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ad:	8a 00                	mov    al,BYTE PTR [eax]
c00158af:	0f b6 c0             	movzx  eax,al
c00158b2:	83 ec 0c             	sub    esp,0xc
c00158b5:	53                   	push   ebx
c00158b6:	51                   	push   ecx
c00158b7:	52                   	push   edx
c00158b8:	50                   	push   eax
c00158b9:	68 4c b0 02 c0       	push   0xc002b04c
c00158be:	e8 37 d6 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00158c3:	83 c4 20             	add    esp,0x20
c00158c6:	83 ec 0c             	sub    esp,0xc
c00158c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158cc:	e8 9f f4 ff ff       	call   c0014d70 <displayDebugInfo(regs*)>
c00158d1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158d4:	5b                   	pop    ebx
c00158d5:	5e                   	pop    esi
c00158d6:	5d                   	pop    ebp
c00158d7:	c3                   	ret    

c00158d8 <displayProgramFault(char const*)>:
c00158d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158e0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158e6:	85 c0                	test   eax,eax
c00158e8:	74 15                	je     c00158ff <displayProgramFault(char const*)+0x27>
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	6a 04                	push   0x4
c00158ef:	6a 0f                	push   0xf
c00158f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158f5:	50                   	push   eax
c00158f6:	e8 37 b5 ff ff       	call   c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158fb:	83 c4 1c             	add    esp,0x1c
c00158fe:	c3                   	ret    
c00158ff:	c3                   	ret    

c0015900 <setupInterruptController()>:
c0015900:	55                   	push   ebp
c0015901:	89 e5                	mov    ebp,esp
c0015903:	53                   	push   ebx
c0015904:	83 ec 24             	sub    esp,0x24
c0015907:	b8 00 00 00 00       	mov    eax,0x0
c001590c:	85 c0                	test   eax,eax
c001590e:	0f 95 c0             	setne  al
c0015911:	84 c0                	test   al,al
c0015913:	74 5b                	je     c0015970 <setupInterruptController()+0x70>
c0015915:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001591c:	83 ec 0c             	sub    esp,0xc
c001591f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015922:	e8 19 9f ff ff       	call   c000f840 <malloc>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	89 c3                	mov    ebx,eax
c001592c:	83 ec 0c             	sub    esp,0xc
c001592f:	53                   	push   ebx
c0015930:	e8 a9 ff 00 00       	call   c00258de <APIC::APIC()>
c0015935:	83 c4 10             	add    esp,0x10
c0015938:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001593b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001593e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015941:	8b 00                	mov    eax,DWORD PTR [eax]
c0015943:	83 c0 08             	add    eax,0x8
c0015946:	8b 00                	mov    eax,DWORD PTR [eax]
c0015948:	6a 00                	push   0x0
c001594a:	6a 00                	push   0x0
c001594c:	6a 00                	push   0x0
c001594e:	52                   	push   edx
c001594f:	ff d0                	call   eax
c0015951:	83 c4 10             	add    esp,0x10
c0015954:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015959:	83 ec 08             	sub    esp,0x8
c001595c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001595f:	50                   	push   eax
c0015960:	e8 bb e9 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0015965:	83 c4 10             	add    esp,0x10
c0015968:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001596b:	e9 52 03 00 00       	jmp    c0015cc2 <setupInterruptController()+0x3c2>
c0015970:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015975:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001597b:	83 e0 01             	and    eax,0x1
c001597e:	84 c0                	test   al,al
c0015980:	0f 95 c0             	setne  al
c0015983:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015986:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015993:	e8 a8 9e ff ff       	call   c000f840 <malloc>
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	89 c3                	mov    ebx,eax
c001599d:	83 ec 0c             	sub    esp,0xc
c00159a0:	53                   	push   ebx
c00159a1:	e8 90 04 01 00       	call   c0025e36 <PIC::PIC()>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b4:	83 c0 08             	add    eax,0x8
c00159b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b9:	6a 00                	push   0x0
c00159bb:	6a 00                	push   0x0
c00159bd:	6a 00                	push   0x0
c00159bf:	52                   	push   edx
c00159c0:	ff d0                	call   eax
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159c9:	74 73                	je     c0015a3e <setupInterruptController()+0x13e>
c00159cb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d3:	83 c0 0c             	add    eax,0xc
c00159d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d8:	6a 00                	push   0x0
c00159da:	6a 00                	push   0x0
c00159dc:	6a 00                	push   0x0
c00159de:	52                   	push   edx
c00159df:	ff d0                	call   eax
c00159e1:	83 c4 10             	add    esp,0x10
c00159e4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159e8:	74 15                	je     c00159ff <setupInterruptController()+0xff>
c00159ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ef:	83 c0 04             	add    eax,0x4
c00159f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159fa:	ff d0                	call   eax
c00159fc:	83 c4 10             	add    esp,0x10
c00159ff:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a0c:	e8 2f 9e ff ff       	call   c000f840 <malloc>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	89 c3                	mov    ebx,eax
c0015a16:	83 ec 0c             	sub    esp,0xc
c0015a19:	53                   	push   ebx
c0015a1a:	e8 bf fe 00 00       	call   c00258de <APIC::APIC()>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a25:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2d:	83 c0 08             	add    eax,0x8
c0015a30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a32:	6a 00                	push   0x0
c0015a34:	6a 00                	push   0x0
c0015a36:	6a 00                	push   0x0
c0015a38:	52                   	push   edx
c0015a39:	ff d0                	call   eax
c0015a3b:	83 c4 10             	add    esp,0x10
c0015a3e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015a43:	83 ec 08             	sub    esp,0x8
c0015a46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a49:	50                   	push   eax
c0015a4a:	e8 d1 e8 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a57:	83 c0 24             	add    eax,0x24
c0015a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5c:	6a 00                	push   0x0
c0015a5e:	68 b3 52 01 c0       	push   0xc00152b3
c0015a63:	6a 00                	push   0x0
c0015a65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a68:	ff d0                	call   eax
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a72:	83 c0 24             	add    eax,0x24
c0015a75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a77:	6a 00                	push   0x0
c0015a79:	68 b3 52 01 c0       	push   0xc00152b3
c0015a7e:	6a 01                	push   0x1
c0015a80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a83:	ff d0                	call   eax
c0015a85:	83 c4 10             	add    esp,0x10
c0015a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8d:	83 c0 24             	add    eax,0x24
c0015a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a92:	6a 00                	push   0x0
c0015a94:	68 cd 4b 01 c0       	push   0xc0014bcd
c0015a99:	6a 02                	push   0x2
c0015a9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a9e:	ff d0                	call   eax
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa8:	83 c0 24             	add    eax,0x24
c0015aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aad:	6a 00                	push   0x0
c0015aaf:	68 b3 52 01 c0       	push   0xc00152b3
c0015ab4:	6a 03                	push   0x3
c0015ab6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab9:	ff d0                	call   eax
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac3:	83 c0 24             	add    eax,0x24
c0015ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac8:	6a 00                	push   0x0
c0015aca:	68 b3 52 01 c0       	push   0xc00152b3
c0015acf:	6a 04                	push   0x4
c0015ad1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad4:	ff d0                	call   eax
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ade:	83 c0 24             	add    eax,0x24
c0015ae1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae3:	6a 00                	push   0x0
c0015ae5:	68 b3 52 01 c0       	push   0xc00152b3
c0015aea:	6a 05                	push   0x5
c0015aec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aef:	ff d0                	call   eax
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af9:	83 c0 24             	add    eax,0x24
c0015afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afe:	6a 00                	push   0x0
c0015b00:	68 d2 52 01 c0       	push   0xc00152d2
c0015b05:	6a 06                	push   0x6
c0015b07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0a:	ff d0                	call   eax
c0015b0c:	83 c4 10             	add    esp,0x10
c0015b0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b14:	83 c0 24             	add    eax,0x24
c0015b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b19:	6a 00                	push   0x0
c0015b1b:	68 ff 51 01 c0       	push   0xc00151ff
c0015b20:	6a 07                	push   0x7
c0015b22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b25:	ff d0                	call   eax
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2f:	83 c0 24             	add    eax,0x24
c0015b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b34:	6a 00                	push   0x0
c0015b36:	68 e8 49 01 c0       	push   0xc00149e8
c0015b3b:	6a 08                	push   0x8
c0015b3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b40:	ff d0                	call   eax
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4a:	83 c0 24             	add    eax,0x24
c0015b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4f:	6a 00                	push   0x0
c0015b51:	68 b3 52 01 c0       	push   0xc00152b3
c0015b56:	6a 09                	push   0x9
c0015b58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5b:	ff d0                	call   eax
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b65:	83 c0 24             	add    eax,0x24
c0015b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6a:	6a 00                	push   0x0
c0015b6c:	68 b3 52 01 c0       	push   0xc00152b3
c0015b71:	6a 0a                	push   0xa
c0015b73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b76:	ff d0                	call   eax
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b80:	83 c0 24             	add    eax,0x24
c0015b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b85:	6a 00                	push   0x0
c0015b87:	68 b3 52 01 c0       	push   0xc00152b3
c0015b8c:	6a 0b                	push   0xb
c0015b8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b91:	ff d0                	call   eax
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9b:	83 c0 24             	add    eax,0x24
c0015b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba0:	6a 00                	push   0x0
c0015ba2:	68 b3 52 01 c0       	push   0xc00152b3
c0015ba7:	6a 0c                	push   0xc
c0015ba9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bac:	ff d0                	call   eax
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb6:	83 c0 24             	add    eax,0x24
c0015bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbb:	6a 00                	push   0x0
c0015bbd:	68 2e 52 01 c0       	push   0xc001522e
c0015bc2:	6a 0d                	push   0xd
c0015bc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc7:	ff d0                	call   eax
c0015bc9:	83 c4 10             	add    esp,0x10
c0015bcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd1:	83 c0 24             	add    eax,0x24
c0015bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd6:	6a 00                	push   0x0
c0015bd8:	68 67 52 01 c0       	push   0xc0015267
c0015bdd:	6a 0e                	push   0xe
c0015bdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be2:	ff d0                	call   eax
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bec:	83 c0 24             	add    eax,0x24
c0015bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf1:	6a 00                	push   0x0
c0015bf3:	68 b3 52 01 c0       	push   0xc00152b3
c0015bf8:	6a 0f                	push   0xf
c0015bfa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfd:	ff d0                	call   eax
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c07:	83 c0 24             	add    eax,0x24
c0015c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0c:	6a 00                	push   0x0
c0015c0e:	68 b3 52 01 c0       	push   0xc00152b3
c0015c13:	6a 10                	push   0x10
c0015c15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c18:	ff d0                	call   eax
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c22:	83 c0 24             	add    eax,0x24
c0015c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c27:	6a 00                	push   0x0
c0015c29:	68 b3 52 01 c0       	push   0xc00152b3
c0015c2e:	6a 11                	push   0x11
c0015c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c33:	ff d0                	call   eax
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3d:	83 c0 24             	add    eax,0x24
c0015c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c42:	6a 00                	push   0x0
c0015c44:	68 b3 52 01 c0       	push   0xc00152b3
c0015c49:	6a 12                	push   0x12
c0015c4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4e:	ff d0                	call   eax
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c58:	83 c0 24             	add    eax,0x24
c0015c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5d:	6a 00                	push   0x0
c0015c5f:	68 b3 52 01 c0       	push   0xc00152b3
c0015c64:	6a 13                	push   0x13
c0015c66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c69:	ff d0                	call   eax
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c73:	83 c0 24             	add    eax,0x24
c0015c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c78:	6a 00                	push   0x0
c0015c7a:	68 b3 52 01 c0       	push   0xc00152b3
c0015c7f:	6a 14                	push   0x14
c0015c81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c84:	ff d0                	call   eax
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8e:	83 c0 24             	add    eax,0x24
c0015c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c93:	6a 00                	push   0x0
c0015c95:	68 b3 52 01 c0       	push   0xc00152b3
c0015c9a:	6a 1e                	push   0x1e
c0015c9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9f:	ff d0                	call   eax
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca9:	83 c0 24             	add    eax,0x24
c0015cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cae:	6a 00                	push   0x0
c0015cb0:	68 35 c7 01 c0       	push   0xc001c735
c0015cb5:	6a 60                	push   0x60
c0015cb7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cba:	ff d0                	call   eax
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cc5:	c9                   	leave  
c0015cc6:	c3                   	ret    
c0015cc7:	90                   	nop

c0015cc8 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cc8:	55                   	push   ebp
c0015cc9:	89 e5                	mov    ebp,esp
c0015ccb:	83 ec 08             	sub    esp,0x8
c0015cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd1:	83 ec 0c             	sub    esp,0xc
c0015cd4:	50                   	push   eax
c0015cd5:	e8 32 e9 ff ff       	call   c001460c <Device::getName()>
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	8a 00                	mov    al,BYTE PTR [eax]
c0015cdf:	3c 41                	cmp    al,0x41
c0015ce1:	0f 94 c0             	sete   al
c0015ce4:	84 c0                	test   al,al
c0015ce6:	74 28                	je     c0015d10 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ce8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cec:	7f 12                	jg     c0015d00 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cf1:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0015cf6:	8a 00                	mov    al,BYTE PTR [eax]
c0015cf8:	0f b6 c0             	movzx  eax,al
c0015cfb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cfe:	eb 10                	jmp    c0015d10 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d00:	83 ec 0c             	sub    esp,0xc
c0015d03:	68 60 ad 02 c0       	push   0xc002ad60
c0015d08:	e8 9e 48 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d13:	c9                   	leave  
c0015d14:	c3                   	ret    
c0015d15:	90                   	nop

c0015d16 <startGUI(void*)>:
c0015d16:	55                   	push   ebp
c0015d17:	89 e5                	mov    ebp,esp
c0015d19:	53                   	push   ebx
c0015d1a:	83 ec 04             	sub    esp,0x4
c0015d1d:	e8 66 80 00 00       	call   c001dd88 <unlockScheduler()>
c0015d22:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d28:	83 ec 08             	sub    esp,0x8
c0015d2b:	6a 01                	push   0x1
c0015d2d:	68 bc b0 02 c0       	push   0xc002b0bc
c0015d32:	e8 a7 79 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	83 ec 08             	sub    esp,0x8
c0015d3d:	53                   	push   ebx
c0015d3e:	50                   	push   eax
c0015d3f:	e8 ce 7b 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d4d:	83 ec 08             	sub    esp,0x8
c0015d50:	6a 01                	push   0x1
c0015d52:	68 d6 b0 02 c0       	push   0xc002b0d6
c0015d57:	e8 82 79 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	83 ec 08             	sub    esp,0x8
c0015d62:	53                   	push   ebx
c0015d63:	50                   	push   eax
c0015d64:	e8 a9 7b 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	90                   	nop
c0015d6d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d70:	c9                   	leave  
c0015d71:	c3                   	ret    

c0015d72 <startGUIVESA(void*)>:
c0015d72:	55                   	push   ebp
c0015d73:	89 e5                	mov    ebp,esp
c0015d75:	53                   	push   ebx
c0015d76:	83 ec 04             	sub    esp,0x4
c0015d79:	e8 0a 80 00 00       	call   c001dd88 <unlockScheduler()>
c0015d7e:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d84:	83 ec 08             	sub    esp,0x8
c0015d87:	6a 01                	push   0x1
c0015d89:	68 f0 b0 02 c0       	push   0xc002b0f0
c0015d8e:	e8 4b 79 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	83 ec 08             	sub    esp,0x8
c0015d99:	53                   	push   ebx
c0015d9a:	50                   	push   eax
c0015d9b:	e8 72 7b 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c0015da0:	83 c4 10             	add    esp,0x10
c0015da3:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015da9:	83 ec 08             	sub    esp,0x8
c0015dac:	6a 01                	push   0x1
c0015dae:	68 d6 b0 02 c0       	push   0xc002b0d6
c0015db3:	e8 26 79 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	83 ec 08             	sub    esp,0x8
c0015dbe:	53                   	push   ebx
c0015dbf:	50                   	push   eax
c0015dc0:	e8 4d 7b 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	90                   	nop
c0015dc9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dcc:	c9                   	leave  
c0015dcd:	c3                   	ret    

c0015dce <sendKeyToTerminal(unsigned char)>:
c0015dce:	55                   	push   ebp
c0015dcf:	89 e5                	mov    ebp,esp
c0015dd1:	83 ec 28             	sub    esp,0x28
c0015dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dda:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0015ddf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015de3:	83 ec 08             	sub    esp,0x8
c0015de6:	52                   	push   edx
c0015de7:	50                   	push   eax
c0015de8:	e8 81 b5 ff ff       	call   c001136e <VgaText::receiveKey(unsigned char)>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015df4:	75 41                	jne    c0015e37 <sendKeyToTerminal(unsigned char)+0x69>
c0015df6:	e8 b2 7f 00 00       	call   c001ddad <lockStuff()>
c0015dfb:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0015e00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e03:	c7 05 40 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e540,0x0
c0015e0d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e11:	74 1f                	je     c0015e32 <sendKeyToTerminal(unsigned char)+0x64>
c0015e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e1f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e22:	83 ec 0c             	sub    esp,0xc
c0015e25:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e28:	e8 71 85 00 00       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c0015e2d:	83 c4 10             	add    esp,0x10
c0015e30:	eb db                	jmp    c0015e0d <sendKeyToTerminal(unsigned char)+0x3f>
c0015e32:	e8 10 83 00 00       	call   c001e147 <unlockStuff()>
c0015e37:	90                   	nop
c0015e38:	c9                   	leave  
c0015e39:	c3                   	ret    

c0015e3a <sendKeyboardToken(KeyboardToken)>:
c0015e3a:	55                   	push   ebp
c0015e3b:	89 e5                	mov    ebp,esp
c0015e3d:	83 ec 18             	sub    esp,0x18
c0015e40:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e46:	0f b7 c0             	movzx  eax,ax
c0015e49:	83 f2 01             	xor    edx,0x1
c0015e4c:	88 90 60 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1aa0],dl
c0015e52:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0015e57:	85 c0                	test   eax,eax
c0015e59:	74 24                	je     c0015e7f <sendKeyboardToken(KeyboardToken)+0x45>
c0015e5b:	8b 0d 48 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e548
c0015e61:	83 ec 04             	sub    esp,0x4
c0015e64:	68 60 e5 02 c0       	push   0xc002e560
c0015e69:	83 ec 08             	sub    esp,0x8
c0015e6c:	89 e2                	mov    edx,esp
c0015e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e71:	89 02                	mov    DWORD PTR [edx],eax
c0015e73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e7a:	ff d1                	call   ecx
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e82:	66 3d 03 02          	cmp    ax,0x203
c0015e86:	75 07                	jne    c0015e8f <sendKeyboardToken(KeyboardToken)+0x55>
c0015e88:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c0015e8d:	84 c0                	test   al,al
c0015e8f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e93:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e96:	a0 68 e9 02 c0       	mov    al,ds:0xc002e968
c0015e9b:	38 c2                	cmp    dl,al
c0015e9d:	74 1c                	je     c0015ebb <sendKeyboardToken(KeyboardToken)+0x81>
c0015e9f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ea2:	a2 68 e9 02 c0       	mov    ds:0xc002e968,al
c0015ea7:	a0 68 e9 02 c0       	mov    al,ds:0xc002e968
c0015eac:	0f b6 c0             	movzx  eax,al
c0015eaf:	83 ec 0c             	sub    esp,0xc
c0015eb2:	50                   	push   eax
c0015eb3:	e8 16 a7 ff ff       	call   c00105ce <setTerminalScrollLock(bool)>
c0015eb8:	83 c4 10             	add    esp,0x10
c0015ebb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ebe:	84 c0                	test   al,al
c0015ec0:	0f 84 ae 00 00 00    	je     c0015f74 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec9:	66 3d 10 03          	cmp    ax,0x310
c0015ecd:	75 06                	jne    c0015ed5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ecf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed8:	66 3d 11 03          	cmp    ax,0x311
c0015edc:	75 06                	jne    c0015ee4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ede:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee7:	66 3d 12 03          	cmp    ax,0x312
c0015eeb:	75 06                	jne    c0015ef3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015eed:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef6:	66 3d 13 03          	cmp    ax,0x313
c0015efa:	75 06                	jne    c0015f02 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015efc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f05:	66 3d 14 03          	cmp    ax,0x314
c0015f09:	75 06                	jne    c0015f11 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f0b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f14:	66 3d 15 03          	cmp    ax,0x315
c0015f18:	75 06                	jne    c0015f20 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f1a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f23:	66 3d 16 03          	cmp    ax,0x316
c0015f27:	75 06                	jne    c0015f2f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f29:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f32:	66 3d 17 03          	cmp    ax,0x317
c0015f36:	75 06                	jne    c0015f3e <sendKeyboardToken(KeyboardToken)+0x104>
c0015f38:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	66 3d 18 03          	cmp    ax,0x318
c0015f45:	75 06                	jne    c0015f4d <sendKeyboardToken(KeyboardToken)+0x113>
c0015f47:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f50:	66 3d 19 03          	cmp    ax,0x319
c0015f54:	75 06                	jne    c0015f5c <sendKeyboardToken(KeyboardToken)+0x122>
c0015f56:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5f:	66 3d 1a 03          	cmp    ax,0x31a
c0015f63:	0f 85 c9 00 00 00    	jne    c0016032 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f69:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f6f:	e9 be 00 00 00       	jmp    c0016032 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f77:	66 3d 10 03          	cmp    ax,0x310
c0015f7b:	75 0a                	jne    c0015f87 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f7d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f83:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8a:	66 3d 11 03          	cmp    ax,0x311
c0015f8e:	75 0a                	jne    c0015f9a <sendKeyboardToken(KeyboardToken)+0x160>
c0015f90:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f96:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9d:	66 3d 12 03          	cmp    ax,0x312
c0015fa1:	75 0a                	jne    c0015fad <sendKeyboardToken(KeyboardToken)+0x173>
c0015fa3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fa9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb0:	66 3d 13 03          	cmp    ax,0x313
c0015fb4:	75 0a                	jne    c0015fc0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015fb6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015fbc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc3:	66 3d 14 03          	cmp    ax,0x314
c0015fc7:	75 0a                	jne    c0015fd3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015fc9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015fcf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd6:	66 3d 15 03          	cmp    ax,0x315
c0015fda:	75 0a                	jne    c0015fe6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015fdc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fe2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe9:	66 3d 16 03          	cmp    ax,0x316
c0015fed:	75 0a                	jne    c0015ff9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fef:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ff5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffc:	66 3d 17 03          	cmp    ax,0x317
c0016000:	75 0a                	jne    c001600c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016002:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016008:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600f:	66 3d 18 03          	cmp    ax,0x318
c0016013:	75 0a                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016015:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001601b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 19 03          	cmp    ax,0x319
c0016026:	75 0a                	jne    c0016032 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016028:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001602e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016035:	66 3d 00 02          	cmp    ax,0x200
c0016039:	75 2c                	jne    c0016067 <sendKeyboardToken(KeyboardToken)+0x22d>
c001603b:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c0016040:	83 f0 01             	xor    eax,0x1
c0016043:	84 c0                	test   al,al
c0016045:	74 20                	je     c0016067 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016047:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001604c:	6a 01                	push   0x1
c001604e:	6a 00                	push   0x0
c0016050:	68 16 5d 01 c0       	push   0xc0015d16
c0016055:	50                   	push   eax
c0016056:	e8 5d 7e 00 00       	call   c001deb8 <Process::createThread(void (*)(void*), void*, int)>
c001605b:	83 c4 10             	add    esp,0x10
c001605e:	c6 05 60 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e960,0x1
c0016065:	eb 33                	jmp    c001609a <sendKeyboardToken(KeyboardToken)+0x260>
c0016067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606a:	66 3d 01 02          	cmp    ax,0x201
c001606e:	75 2a                	jne    c001609a <sendKeyboardToken(KeyboardToken)+0x260>
c0016070:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c0016075:	83 f0 01             	xor    eax,0x1
c0016078:	84 c0                	test   al,al
c001607a:	74 1e                	je     c001609a <sendKeyboardToken(KeyboardToken)+0x260>
c001607c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0016081:	6a 01                	push   0x1
c0016083:	6a 00                	push   0x0
c0016085:	68 72 5d 01 c0       	push   0xc0015d72
c001608a:	50                   	push   eax
c001608b:	e8 28 7e 00 00       	call   c001deb8 <Process::createThread(void (*)(void*), void*, int)>
c0016090:	83 c4 10             	add    esp,0x10
c0016093:	c6 05 60 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e960,0x1
c001609a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609d:	66 3d 1d 03          	cmp    ax,0x31d
c00160a1:	75 06                	jne    c00160a9 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160a3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ac:	66 3d 1c 03          	cmp    ax,0x31c
c00160b0:	75 06                	jne    c00160b8 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160b2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bb:	66 3d 1b 03          	cmp    ax,0x31b
c00160bf:	75 06                	jne    c00160c7 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160c1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ca:	66 3d 1e 03          	cmp    ax,0x31e
c00160ce:	75 06                	jne    c00160d6 <sendKeyboardToken(KeyboardToken)+0x29c>
c00160d0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d9:	66 3d 1f 03          	cmp    ax,0x31f
c00160dd:	75 06                	jne    c00160e5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160df:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e8:	66 3d 1a 03          	cmp    ax,0x31a
c00160ec:	75 06                	jne    c00160f4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160ee:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160f4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160fb:	83 f0 01             	xor    eax,0x1
c00160fe:	84 c0                	test   al,al
c0016100:	74 77                	je     c0016179 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016102:	a0 61 e6 02 c0       	mov    al,ds:0xc002e661
c0016107:	84 c0                	test   al,al
c0016109:	74 41                	je     c001614c <sendKeyboardToken(KeyboardToken)+0x312>
c001610b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001610f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016113:	74 2b                	je     c0016140 <sendKeyboardToken(KeyboardToken)+0x306>
c0016115:	8b 15 64 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e964
c001611b:	89 d0                	mov    eax,edx
c001611d:	c1 e0 02             	shl    eax,0x2
c0016120:	01 d0                	add    eax,edx
c0016122:	01 c0                	add    eax,eax
c0016124:	a3 64 e9 02 c0       	mov    ds:0xc002e964,eax
c0016129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612c:	0f b7 c0             	movzx  eax,ax
c001612f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016132:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016137:	01 d0                	add    eax,edx
c0016139:	a3 64 e9 02 c0       	mov    ds:0xc002e964,eax
c001613e:	eb 6d                	jmp    c00161ad <sendKeyboardToken(KeyboardToken)+0x373>
c0016140:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c001614a:	eb 61                	jmp    c00161ad <sendKeyboardToken(KeyboardToken)+0x373>
c001614c:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016151:	85 c0                	test   eax,eax
c0016153:	74 18                	je     c001616d <sendKeyboardToken(KeyboardToken)+0x333>
c0016155:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c001615a:	0f b6 c0             	movzx  eax,al
c001615d:	83 ec 0c             	sub    esp,0xc
c0016160:	50                   	push   eax
c0016161:	e8 68 fc ff ff       	call   c0015dce <sendKeyToTerminal(unsigned char)>
c0016166:	83 c4 10             	add    esp,0x10
c0016169:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001616d:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c0016177:	eb 34                	jmp    c00161ad <sendKeyboardToken(KeyboardToken)+0x373>
c0016179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617c:	66 3d 01 01          	cmp    ax,0x101
c0016180:	75 2b                	jne    c00161ad <sendKeyboardToken(KeyboardToken)+0x373>
c0016182:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016187:	85 c0                	test   eax,eax
c0016189:	74 18                	je     c00161a3 <sendKeyboardToken(KeyboardToken)+0x369>
c001618b:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016190:	0f b6 c0             	movzx  eax,al
c0016193:	83 ec 0c             	sub    esp,0xc
c0016196:	50                   	push   eax
c0016197:	e8 32 fc ff ff       	call   c0015dce <sendKeyToTerminal(unsigned char)>
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161a3:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c00161ad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161b0:	83 f0 01             	xor    eax,0x1
c00161b3:	84 c0                	test   al,al
c00161b5:	74 4c                	je     c0016203 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161ba:	83 f0 01             	xor    eax,0x1
c00161bd:	84 c0                	test   al,al
c00161bf:	74 42                	je     c0016203 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161c1:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c00161c6:	83 f0 01             	xor    eax,0x1
c00161c9:	84 c0                	test   al,al
c00161cb:	74 36                	je     c0016203 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d0:	66 83 f8 1f          	cmp    ax,0x1f
c00161d4:	76 09                	jbe    c00161df <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d9:	66 83 f8 7e          	cmp    ax,0x7e
c00161dd:	76 12                	jbe    c00161f1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e2:	66 83 f8 0a          	cmp    ax,0xa
c00161e6:	74 09                	je     c00161f1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161eb:	66 83 f8 08          	cmp    ax,0x8
c00161ef:	75 12                	jne    c0016203 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f4:	0f b6 c0             	movzx  eax,al
c00161f7:	83 ec 0c             	sub    esp,0xc
c00161fa:	50                   	push   eax
c00161fb:	e8 ce fb ff ff       	call   c0015dce <sendKeyToTerminal(unsigned char)>
c0016200:	83 c4 10             	add    esp,0x10
c0016203:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016206:	83 f0 01             	xor    eax,0x1
c0016209:	84 c0                	test   al,al
c001620b:	74 4f                	je     c001625c <sendKeyboardToken(KeyboardToken)+0x422>
c001620d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016210:	83 f0 01             	xor    eax,0x1
c0016213:	84 c0                	test   al,al
c0016215:	74 45                	je     c001625c <sendKeyboardToken(KeyboardToken)+0x422>
c0016217:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c001621c:	84 c0                	test   al,al
c001621e:	74 3c                	je     c001625c <sendKeyboardToken(KeyboardToken)+0x422>
c0016220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016223:	66 83 f8 3f          	cmp    ax,0x3f
c0016227:	76 33                	jbe    c001625c <sendKeyboardToken(KeyboardToken)+0x422>
c0016229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622c:	66 83 f8 7f          	cmp    ax,0x7f
c0016230:	77 2a                	ja     c001625c <sendKeyboardToken(KeyboardToken)+0x422>
c0016232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016235:	88 c2                	mov    dl,al
c0016237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623a:	66 83 f8 5f          	cmp    ax,0x5f
c001623e:	76 04                	jbe    c0016244 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016240:	b0 20                	mov    al,0x20
c0016242:	eb 02                	jmp    c0016246 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016244:	b0 00                	mov    al,0x0
c0016246:	29 c2                	sub    edx,eax
c0016248:	88 d0                	mov    al,dl
c001624a:	83 e8 40             	sub    eax,0x40
c001624d:	0f b6 c0             	movzx  eax,al
c0016250:	83 ec 0c             	sub    esp,0xc
c0016253:	50                   	push   eax
c0016254:	e8 75 fb ff ff       	call   c0015dce <sendKeyToTerminal(unsigned char)>
c0016259:	83 c4 10             	add    esp,0x10
c001625c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625f:	66 3d 00 03          	cmp    ax,0x300
c0016263:	75 0f                	jne    c0016274 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016265:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016268:	83 f0 01             	xor    eax,0x1
c001626b:	84 c0                	test   al,al
c001626d:	74 05                	je     c0016274 <sendKeyboardToken(KeyboardToken)+0x43a>
c001626f:	e8 8f ab ff ff       	call   c0010e03 <doTerminalCycle()>
c0016274:	90                   	nop
c0016275:	c9                   	leave  
c0016276:	c3                   	ret    

c0016277 <clearInternalKeybuffer(VgaText*)>:
c0016277:	55                   	push   ebp
c0016278:	89 e5                	mov    ebp,esp
c001627a:	83 ec 08             	sub    esp,0x8
c001627d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016280:	05 34 11 00 00       	add    eax,0x1134
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	50                   	push   eax
c0016289:	e8 06 a5 fe ff       	call   c0000794 <strlen>
c001628e:	83 c4 10             	add    esp,0x10
c0016291:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016294:	81 c2 34 11 00 00    	add    edx,0x1134
c001629a:	83 ec 04             	sub    esp,0x4
c001629d:	50                   	push   eax
c001629e:	6a 00                	push   0x0
c00162a0:	52                   	push   edx
c00162a1:	e8 d2 a4 fe ff       	call   c0000778 <memset>
c00162a6:	83 c4 10             	add    esp,0x10
c00162a9:	90                   	nop
c00162aa:	c9                   	leave  
c00162ab:	c3                   	ret    

c00162ac <readKeyboard(VgaText*, char*, unsigned long)>:
c00162ac:	55                   	push   ebp
c00162ad:	89 e5                	mov    ebp,esp
c00162af:	83 ec 18             	sub    esp,0x18
c00162b2:	fb                   	sti    
c00162b3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162ba:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162be:	0f 84 8a 00 00 00    	je     c001634e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00162c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162cd:	84 c0                	test   al,al
c00162cf:	75 11                	jne    c00162e2 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00162d1:	e8 b0 7a 00 00       	call   c001dd86 <lockScheduler()>
c00162d6:	e8 e7 7d 00 00       	call   c001e0c2 <schedule()>
c00162db:	e8 a8 7a 00 00       	call   c001dd88 <unlockScheduler()>
c00162e0:	eb e2                	jmp    c00162c4 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162e5:	8d 50 01             	lea    edx,[eax+0x1]
c00162e8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162ee:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162f4:	88 10                	mov    BYTE PTR [eax],dl
c00162f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162ff:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016305:	05 34 11 00 00       	add    eax,0x1134
c001630a:	83 ec 0c             	sub    esp,0xc
c001630d:	50                   	push   eax
c001630e:	e8 81 a4 fe ff       	call   c0000794 <strlen>
c0016313:	83 c4 10             	add    esp,0x10
c0016316:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016319:	81 c2 34 11 00 00    	add    edx,0x1134
c001631f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016322:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016325:	81 c2 34 11 00 00    	add    edx,0x1134
c001632b:	83 ec 04             	sub    esp,0x4
c001632e:	50                   	push   eax
c001632f:	51                   	push   ecx
c0016330:	52                   	push   edx
c0016331:	e8 46 a3 fe ff       	call   c000067c <memmove>
c0016336:	83 c4 10             	add    esp,0x10
c0016339:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001633c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001633f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016343:	0f 85 71 ff ff ff    	jne    c00162ba <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016349:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001634c:	eb 03                	jmp    c0016351 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001634e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016351:	c9                   	leave  
c0016352:	c3                   	ret    
c0016353:	90                   	nop

c0016354 <Keyboard::Keyboard(char const*)>:
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635b:	83 ec 08             	sub    esp,0x8
c001635e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016362:	50                   	push   eax
c0016363:	e8 a8 e1 ff ff       	call   c0014510 <Device::Device(char const*)>
c0016368:	83 c4 10             	add    esp,0x10
c001636b:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0016370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016374:	89 10                	mov    DWORD PTR [eax],edx
c0016376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016384:	c6 05 44 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e544,0x1
c001638b:	90                   	nop
c001638c:	83 c4 0c             	add    esp,0xc
c001638f:	c3                   	ret    

c0016390 <Keyboard::~Keyboard()>:
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0016398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639c:	89 10                	mov    DWORD PTR [eax],edx
c001639e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	50                   	push   eax
c00163a6:	e8 47 de ff ff       	call   c00141f2 <Device::~Device()>
c00163ab:	83 c4 10             	add    esp,0x10
c00163ae:	90                   	nop
c00163af:	83 c4 0c             	add    esp,0xc
c00163b2:	c3                   	ret    
c00163b3:	90                   	nop

c00163b4 <Keyboard::~Keyboard()>:
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	83 ec 0c             	sub    esp,0xc
c00163ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163be:	e8 cd ff ff ff       	call   c0016390 <Keyboard::~Keyboard()>
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	83 ec 08             	sub    esp,0x8
c00163c9:	68 5c 01 00 00       	push   0x15c
c00163ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d2:	e8 43 ca ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	83 c4 0c             	add    esp,0xc
c00163dd:	c3                   	ret    

c00163de <LogicalDisk::close(int, int, void*)>:
c00163de:	83 c8 ff             	or     eax,0xffffffff
c00163e1:	c3                   	ret    

c00163e2 <LogicalDisk::~LogicalDisk()>:
c00163e2:	83 ec 0c             	sub    esp,0xc
c00163e5:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c00163ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ee:	89 10                	mov    DWORD PTR [eax],edx
c00163f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	50                   	push   eax
c00163f8:	e8 f5 dd ff ff       	call   c00141f2 <Device::~Device()>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	90                   	nop
c0016401:	83 c4 0c             	add    esp,0xc
c0016404:	c3                   	ret    
c0016405:	90                   	nop

c0016406 <LogicalDisk::~LogicalDisk()>:
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	83 ec 0c             	sub    esp,0xc
c001640c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016410:	e8 cd ff ff ff       	call   c00163e2 <LogicalDisk::~LogicalDisk()>
c0016415:	83 c4 10             	add    esp,0x10
c0016418:	83 ec 08             	sub    esp,0x8
c001641b:	68 74 01 00 00       	push   0x174
c0016420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016424:	e8 f1 c9 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	83 c4 0c             	add    esp,0xc
c001642f:	c3                   	ret    

c0016430 <LogicalDisk::open(int, int, void*)>:
c0016430:	83 ec 18             	sub    esp,0x18
c0016433:	68 40 b1 02 c0       	push   0xc002b140
c0016438:	e8 6e 41 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c001643d:	83 c8 ff             	or     eax,0xffffffff
c0016440:	83 c4 1c             	add    esp,0x1c
c0016443:	c3                   	ret    

c0016444 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016444:	53                   	push   ebx
c0016445:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001644d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016451:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016457:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001645d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016463:	77 10                	ja     c0016475 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016465:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001646b:	89 d3                	mov    ebx,edx
c001646d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016473:	72 05                	jb     c001647a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016475:	83 c8 ff             	or     eax,0xffffffff
c0016478:	89 c2                	mov    edx,eax
c001647a:	5b                   	pop    ebx
c001647b:	c3                   	ret    

c001647c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001647c:	56                   	push   esi
c001647d:	83 c8 ff             	or     eax,0xffffffff
c0016480:	53                   	push   ebx
c0016481:	89 c2                	mov    edx,eax
c0016483:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016487:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001648b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001648f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016495:	77 27                	ja     c00164be <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016497:	89 d8                	mov    eax,ebx
c0016499:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001649f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164aa:	89 c2                	mov    edx,eax
c00164ac:	73 10                	jae    c00164be <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164ae:	89 c8                	mov    eax,ecx
c00164b0:	89 da                	mov    edx,ebx
c00164b2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164b8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164be:	5b                   	pop    ebx
c00164bf:	5e                   	pop    esi
c00164c0:	c3                   	ret    
c00164c1:	90                   	nop

c00164c2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164c2:	83 ec 1c             	sub    esp,0x1c
c00164c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00164dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e8:	83 ec 08             	sub    esp,0x8
c00164eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164ef:	50                   	push   eax
c00164f0:	e8 1b e0 ff ff       	call   c0014510 <Device::Device(char const*)>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c00164fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016501:	89 10                	mov    DWORD PTR [eax],edx
c0016503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016507:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001650e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016512:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016527:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001652b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001652f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016533:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016539:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001653f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016543:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016546:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001654a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016550:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001655e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016568:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016572:	90                   	nop
c0016573:	83 c4 1c             	add    esp,0x1c
c0016576:	c3                   	ret    
c0016577:	90                   	nop

c0016578 <LogicalDisk::assignDriveLetter()>:
c0016578:	55                   	push   ebp
c0016579:	57                   	push   edi
c001657a:	56                   	push   esi
c001657b:	53                   	push   ebx
c001657c:	83 ec 14             	sub    esp,0x14
c001657f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016583:	8b 3d 80 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e980
c0016589:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001658f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016593:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016599:	8b 3d 84 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e984
c001659f:	3c 01                	cmp    al,0x1
c00165a1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165a9:	19 c0                	sbb    eax,eax
c00165ab:	83 e0 02             	and    eax,0x2
c00165ae:	83 c0 41             	add    eax,0x41
c00165b1:	0f be e8             	movsx  ebp,al
c00165b4:	3c 43                	cmp    al,0x43
c00165b6:	75 10                	jne    c00165c8 <LogicalDisk::assignDriveLetter()+0x50>
c00165b8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165bf:	75 5d                	jne    c001661e <LogicalDisk::assignDriveLetter()+0xa6>
c00165c1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00165c6:	75 56                	jne    c001661e <LogicalDisk::assignDriveLetter()+0xa6>
c00165c8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00165cb:	ba 01 00 00 00       	mov    edx,0x1
c00165d0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165d4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165d8:	d3 e2                	shl    edx,cl
c00165da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165de:	89 d7                	mov    edi,edx
c00165e0:	89 d6                	mov    esi,edx
c00165e2:	c1 ff 1f             	sar    edi,0x1f
c00165e5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165e9:	21 f9                	and    ecx,edi
c00165eb:	09 d1                	or     ecx,edx
c00165ed:	75 2f                	jne    c001661e <LogicalDisk::assignDriveLetter()+0xa6>
c00165ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165f7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00165fd:	09 f2                	or     edx,esi
c00165ff:	89 15 80 e9 02 c0    	mov    DWORD PTR ds:0xc002e980,edx
c0016605:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016609:	09 fa                	or     edx,edi
c001660b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001660f:	89 15 84 e9 02 c0    	mov    DWORD PTR ds:0xc002e984,edx
c0016615:	89 1c bd a0 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1660],ebx
c001661c:	eb 08                	jmp    c0016626 <LogicalDisk::assignDriveLetter()+0xae>
c001661e:	45                   	inc    ebp
c001661f:	40                   	inc    eax
c0016620:	3c 5b                	cmp    al,0x5b
c0016622:	75 90                	jne    c00165b4 <LogicalDisk::assignDriveLetter()+0x3c>
c0016624:	31 c0                	xor    eax,eax
c0016626:	83 c4 14             	add    esp,0x14
c0016629:	5b                   	pop    ebx
c001662a:	5e                   	pop    esi
c001662b:	5f                   	pop    edi
c001662c:	5d                   	pop    ebp
c001662d:	c3                   	ret    

c001662e <LogicalDisk::mount()>:
c001662e:	56                   	push   esi
c001662f:	53                   	push   ebx
c0016630:	51                   	push   ecx
c0016631:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016635:	8b 1d 0c e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e50c
c001663b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016645:	85 db                	test   ebx,ebx
c0016647:	74 50                	je     c0016699 <LogicalDisk::mount()+0x6b>
c0016649:	e8 23 77 00 00       	call   c001dd71 <getIRQNestingLevel()>
c001664e:	52                   	push   edx
c001664f:	52                   	push   edx
c0016650:	50                   	push   eax
c0016651:	68 64 b1 02 c0       	push   0xc002b164
c0016656:	e8 9f c8 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001665b:	83 c4 0c             	add    esp,0xc
c001665e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016665:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016667:	83 e8 41             	sub    eax,0x41
c001666a:	50                   	push   eax
c001666b:	56                   	push   esi
c001666c:	53                   	push   ebx
c001666d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016670:	83 c4 10             	add    esp,0x10
c0016673:	84 c0                	test   al,al
c0016675:	74 08                	je     c001667f <LogicalDisk::mount()+0x51>
c0016677:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001667d:	eb 1c                	jmp    c001669b <LogicalDisk::mount()+0x6d>
c001667f:	e8 ed 76 00 00       	call   c001dd71 <getIRQNestingLevel()>
c0016684:	51                   	push   ecx
c0016685:	51                   	push   ecx
c0016686:	50                   	push   eax
c0016687:	68 7f b1 02 c0       	push   0xc002b17f
c001668c:	e8 69 c8 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0016691:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016694:	83 c4 10             	add    esp,0x10
c0016697:	eb ac                	jmp    c0016645 <LogicalDisk::mount()+0x17>
c0016699:	31 c0                	xor    eax,eax
c001669b:	5a                   	pop    edx
c001669c:	5b                   	pop    ebx
c001669d:	5e                   	pop    esi
c001669e:	c3                   	ret    
c001669f:	90                   	nop

c00166a0 <LogicalDisk::unmount()>:
c00166a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166a4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166ae:	c3                   	ret    
c00166af:	90                   	nop

c00166b0 <LogicalDisk::eject()>:
c00166b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00166bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166c0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166c3:	90                   	nop

c00166c4 <LogicalDisk::unassignDriveLetter()>:
c00166c4:	57                   	push   edi
c00166c5:	56                   	push   esi
c00166c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166ca:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00166d1:	84 c9                	test   cl,cl
c00166d3:	75 0f                	jne    c00166e4 <LogicalDisk::unassignDriveLetter()+0x20>
c00166d5:	c7 44 24 0c 9a b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b19a
c00166dd:	5e                   	pop    esi
c00166de:	5f                   	pop    edi
c00166df:	e9 c7 3e 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>
c00166e4:	83 e9 41             	sub    ecx,0x41
c00166e7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166ee:	b8 01 00 00 00       	mov    eax,0x1
c00166f3:	c7 04 8d a0 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1660],0x0
c00166fe:	d3 e0                	shl    eax,cl
c0016700:	89 c7                	mov    edi,eax
c0016702:	f7 d0                	not    eax
c0016704:	c1 ff 1f             	sar    edi,0x1f
c0016707:	21 05 80 e9 02 c0    	and    DWORD PTR ds:0xc002e980,eax
c001670d:	89 fe                	mov    esi,edi
c001670f:	f7 d6                	not    esi
c0016711:	21 35 84 e9 02 c0    	and    DWORD PTR ds:0xc002e984,esi
c0016717:	5e                   	pop    esi
c0016718:	5f                   	pop    edi
c0016719:	c3                   	ret    

c001671a <LogicalDisk::read(unsigned long long, int, void*)>:
c001671a:	57                   	push   edi
c001671b:	56                   	push   esi
c001671c:	53                   	push   ebx
c001671d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016721:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016725:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016729:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001672d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016733:	77 41                	ja     c0016776 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016735:	99                   	cdq    
c0016736:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001673c:	01 c8                	add    eax,ecx
c001673e:	11 da                	adc    edx,ebx
c0016740:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016746:	19 d7                	sbb    edi,edx
c0016748:	72 33                	jb     c001677d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001674a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016750:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016756:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001675a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001675e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016764:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001676a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001676e:	5b                   	pop    ebx
c001676f:	5e                   	pop    esi
c0016770:	5f                   	pop    edi
c0016771:	e9 b0 0a 00 00       	jmp    c0017226 <VCache::read(unsigned long long, int, void*)>
c0016776:	b8 05 00 00 00       	mov    eax,0x5
c001677b:	eb 05                	jmp    c0016782 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001677d:	b8 07 00 00 00       	mov    eax,0x7
c0016782:	5b                   	pop    ebx
c0016783:	5e                   	pop    esi
c0016784:	5f                   	pop    edi
c0016785:	c3                   	ret    

c0016786 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016786:	57                   	push   edi
c0016787:	56                   	push   esi
c0016788:	53                   	push   ebx
c0016789:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001678d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016791:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016795:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016799:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001679f:	77 41                	ja     c00167e2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167a1:	99                   	cdq    
c00167a2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167a8:	01 c8                	add    eax,ecx
c00167aa:	11 da                	adc    edx,ebx
c00167ac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167b2:	19 d7                	sbb    edi,edx
c00167b4:	72 33                	jb     c00167e9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167b6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167bc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167c6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167ca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167da:	5b                   	pop    ebx
c00167db:	5e                   	pop    esi
c00167dc:	5f                   	pop    edi
c00167dd:	e9 4e 09 00 00       	jmp    c0017130 <VCache::write(unsigned long long, int, void*)>
c00167e2:	b8 05 00 00 00       	mov    eax,0x5
c00167e7:	eb 05                	jmp    c00167ee <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167e9:	b8 07 00 00 00       	mov    eax,0x7
c00167ee:	5b                   	pop    ebx
c00167ef:	5e                   	pop    esi
c00167f0:	5f                   	pop    edi
c00167f1:	c3                   	ret    

c00167f2 <Mouse::Mouse(char const*)>:
c00167f2:	83 ec 0c             	sub    esp,0xc
c00167f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f9:	83 ec 08             	sub    esp,0x8
c00167fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016800:	50                   	push   eax
c0016801:	e8 0a dd ff ff       	call   c0014510 <Device::Device(char const*)>
c0016806:	83 c4 10             	add    esp,0x10
c0016809:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c001680e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016812:	89 10                	mov    DWORD PTR [eax],edx
c0016814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016818:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016822:	90                   	nop
c0016823:	83 c4 0c             	add    esp,0xc
c0016826:	c3                   	ret    
c0016827:	90                   	nop

c0016828 <Mouse::~Mouse()>:
c0016828:	83 ec 0c             	sub    esp,0xc
c001682b:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0016830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016834:	89 10                	mov    DWORD PTR [eax],edx
c0016836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683a:	83 ec 0c             	sub    esp,0xc
c001683d:	50                   	push   eax
c001683e:	e8 af d9 ff ff       	call   c00141f2 <Device::~Device()>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	90                   	nop
c0016847:	83 c4 0c             	add    esp,0xc
c001684a:	c3                   	ret    
c001684b:	90                   	nop

c001684c <Mouse::~Mouse()>:
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	83 ec 0c             	sub    esp,0xc
c0016852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016856:	e8 cd ff ff ff       	call   c0016828 <Mouse::~Mouse()>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	83 ec 08             	sub    esp,0x8
c0016861:	68 58 01 00 00       	push   0x158
c0016866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001686a:	e8 ab c5 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	83 c4 0c             	add    esp,0xc
c0016875:	c3                   	ret    

c0016876 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016876:	55                   	push   ebp
c0016877:	57                   	push   edi
c0016878:	56                   	push   esi
c0016879:	53                   	push   ebx
c001687a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016880:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016887:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001688e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016895:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001689c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168a4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168ab:	e8 5c dd ff ff       	call   c001460c <Device::getName()>
c00168b0:	5a                   	pop    edx
c00168b1:	59                   	pop    ecx
c00168b2:	50                   	push   eax
c00168b3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168b7:	55                   	push   ebp
c00168b8:	e8 77 9f fe ff       	call   c0000834 <strcpy>
c00168bd:	5b                   	pop    ebx
c00168be:	58                   	pop    eax
c00168bf:	68 14 b2 02 c0       	push   0xc002b214
c00168c4:	55                   	push   ebp
c00168c5:	e8 aa a0 fe ff       	call   c0000974 <strcat>
c00168ca:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00168d1:	e8 6a 8f ff ff       	call   c000f840 <malloc>
c00168d6:	83 c4 0c             	add    esp,0xc
c00168d9:	89 c3                	mov    ebx,eax
c00168db:	57                   	push   edi
c00168dc:	56                   	push   esi
c00168dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168e5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168ec:	55                   	push   ebp
c00168ed:	50                   	push   eax
c00168ee:	e8 cf fb ff ff       	call   c00164c2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168f3:	83 c4 14             	add    esp,0x14
c00168f6:	53                   	push   ebx
c00168f7:	e8 7c fc ff ff       	call   c0016578 <LogicalDisk::assignDriveLetter()>
c00168fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168ff:	89 c6                	mov    esi,eax
c0016901:	e8 28 fd ff ff       	call   c001662e <LogicalDisk::mount()>
c0016906:	58                   	pop    eax
c0016907:	5a                   	pop    edx
c0016908:	53                   	push   ebx
c0016909:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016910:	e8 0b da ff ff       	call   c0014320 <Device::addChild(Device*)>
c0016915:	59                   	pop    ecx
c0016916:	89 f0                	mov    eax,esi
c0016918:	5b                   	pop    ebx
c0016919:	0f be f0             	movsx  esi,al
c001691c:	56                   	push   esi
c001691d:	68 1f b2 02 c0       	push   0xc002b21f
c0016922:	e8 d3 c5 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0016927:	81 c4 2c 01 00 00    	add    esp,0x12c
c001692d:	5b                   	pop    ebx
c001692e:	5e                   	pop    esi
c001692f:	5f                   	pop    edi
c0016930:	5d                   	pop    ebp
c0016931:	c3                   	ret    

c0016932 <createPartitionsForDisk(PhysicalDisk*)>:
c0016932:	55                   	push   ebp
c0016933:	57                   	push   edi
c0016934:	56                   	push   esi
c0016935:	53                   	push   ebx
c0016936:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001693c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016943:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016949:	3d 00 02 00 00       	cmp    eax,0x200
c001694e:	74 27                	je     c0016977 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016950:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016956:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001695c:	83 ec 10             	sub    esp,0x10
c001695f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016963:	99                   	cdq    
c0016964:	c1 e6 0a             	shl    esi,0xa
c0016967:	52                   	push   edx
c0016968:	89 fd                	mov    ebp,edi
c001696a:	50                   	push   eax
c001696b:	55                   	push   ebp
c001696c:	56                   	push   esi
c001696d:	e8 ea ff 00 00       	call   c002695c <__udivdi3>
c0016972:	e9 b1 00 00 00       	jmp    c0016a28 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016977:	83 ec 0c             	sub    esp,0xc
c001697a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001697c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016980:	56                   	push   esi
c0016981:	6a 01                	push   0x1
c0016983:	6a 00                	push   0x0
c0016985:	6a 00                	push   0x0
c0016987:	53                   	push   ebx
c0016988:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001698b:	83 c4 20             	add    esp,0x20
c001698e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016996:	75 0a                	jne    c00169a2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016998:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169a0:	74 2c                	je     c00169ce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169b4:	83 ec 10             	sub    esp,0x10
c00169b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169bb:	89 f7                	mov    edi,esi
c00169bd:	c1 e0 0a             	shl    eax,0xa
c00169c0:	c1 ff 1f             	sar    edi,0x1f
c00169c3:	57                   	push   edi
c00169c4:	56                   	push   esi
c00169c5:	52                   	push   edx
c00169c6:	50                   	push   eax
c00169c7:	e8 90 ff 00 00       	call   c002695c <__udivdi3>
c00169cc:	eb 5a                	jmp    c0016a28 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169ce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169d5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169dc:	83 e1 7f             	and    ecx,0x7f
c00169df:	83 e0 7f             	and    eax,0x7f
c00169e2:	01 c1                	add    ecx,eax
c00169e4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169eb:	83 e0 7f             	and    eax,0x7f
c00169ee:	01 c1                	add    ecx,eax
c00169f0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169f7:	83 e0 7f             	and    eax,0x7f
c00169fa:	00 c1                	add    cl,al
c00169fc:	74 41                	je     c0016a3f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00169fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a10:	83 ec 10             	sub    esp,0x10
c0016a13:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a17:	89 f7                	mov    edi,esi
c0016a19:	c1 e0 0a             	shl    eax,0xa
c0016a1c:	c1 ff 1f             	sar    edi,0x1f
c0016a1f:	57                   	push   edi
c0016a20:	56                   	push   esi
c0016a21:	52                   	push   edx
c0016a22:	50                   	push   eax
c0016a23:	e8 34 ff 00 00       	call   c002695c <__udivdi3>
c0016a28:	83 c4 14             	add    esp,0x14
c0016a2b:	52                   	push   edx
c0016a2c:	50                   	push   eax
c0016a2d:	6a 00                	push   0x0
c0016a2f:	6a 00                	push   0x0
c0016a31:	53                   	push   ebx
c0016a32:	e8 3f fe ff ff       	call   c0016876 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a37:	83 c4 20             	add    esp,0x20
c0016a3a:	e9 79 01 00 00       	jmp    c0016bb8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a3f:	89 f0                	mov    eax,esi
c0016a41:	31 f6                	xor    esi,esi
c0016a43:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a4a:	75 02                	jne    c0016a4e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a4c:	89 f1                	mov    ecx,esi
c0016a4e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a55:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a5c:	c1 e2 08             	shl    edx,0x8
c0016a5f:	c1 e7 10             	shl    edi,0x10
c0016a62:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a6a:	09 fa                	or     edx,edi
c0016a6c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a74:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a7b:	83 c0 10             	add    eax,0x10
c0016a7e:	09 fa                	or     edx,edi
c0016a80:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a87:	c1 e7 18             	shl    edi,0x18
c0016a8a:	09 fa                	or     edx,edi
c0016a8c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a93:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a97:	c1 e7 10             	shl    edi,0x10
c0016a9a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016aa1:	c1 e2 08             	shl    edx,0x8
c0016aa4:	09 fa                	or     edx,edi
c0016aa6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016aad:	09 fa                	or     edx,edi
c0016aaf:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ab6:	c1 e7 18             	shl    edi,0x18
c0016ab9:	09 fa                	or     edx,edi
c0016abb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016abf:	46                   	inc    esi
c0016ac0:	83 fe 04             	cmp    esi,0x4
c0016ac3:	0f 85 7a ff ff ff    	jne    c0016a43 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016acd:	83 f0 01             	xor    eax,0x1
c0016ad0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016ad4:	75 57                	jne    c0016b2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ad6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ada:	83 f0 01             	xor    eax,0x1
c0016add:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ae1:	75 4a                	jne    c0016b2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ae3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ae7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016aef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016af7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016afd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b03:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b09:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b0d:	89 f7                	mov    edi,esi
c0016b0f:	c1 e0 0a             	shl    eax,0xa
c0016b12:	c1 ff 1f             	sar    edi,0x1f
c0016b15:	57                   	push   edi
c0016b16:	56                   	push   esi
c0016b17:	52                   	push   edx
c0016b18:	50                   	push   eax
c0016b19:	e8 3e fe 00 00       	call   c002695c <__udivdi3>
c0016b1e:	83 c4 10             	add    esp,0x10
c0016b21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b29:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b2d:	84 c9                	test   cl,cl
c0016b2f:	74 53                	je     c0016b84 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b31:	0f b6 c9             	movzx  ecx,cl
c0016b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b40:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b4c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b50:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b64:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b68:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b6c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b70:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b74:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b78:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b7c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b80:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b84:	31 ed                	xor    ebp,ebp
c0016b86:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b8a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b8e:	89 f8                	mov    eax,edi
c0016b90:	09 f0                	or     eax,esi
c0016b92:	74 1e                	je     c0016bb2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b94:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b98:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b9c:	89 d1                	mov    ecx,edx
c0016b9e:	09 c1                	or     ecx,eax
c0016ba0:	74 10                	je     c0016bb2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016ba2:	83 ec 0c             	sub    esp,0xc
c0016ba5:	57                   	push   edi
c0016ba6:	56                   	push   esi
c0016ba7:	52                   	push   edx
c0016ba8:	50                   	push   eax
c0016ba9:	53                   	push   ebx
c0016baa:	e8 c7 fc ff ff       	call   c0016876 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016baf:	83 c4 20             	add    esp,0x20
c0016bb2:	45                   	inc    ebp
c0016bb3:	83 fd 04             	cmp    ebp,0x4
c0016bb6:	75 ce                	jne    c0016b86 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bb8:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016bbe:	5b                   	pop    ebx
c0016bbf:	5e                   	pop    esi
c0016bc0:	5f                   	pop    edi
c0016bc1:	5d                   	pop    ebp
c0016bc2:	c3                   	ret    
c0016bc3:	90                   	nop

c0016bc4 <Serial::Serial(char const*)>:
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bcb:	83 ec 08             	sub    esp,0x8
c0016bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd2:	50                   	push   eax
c0016bd3:	e8 38 d9 ff ff       	call   c0014510 <Device::Device(char const*)>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	ba 4c b2 02 c0       	mov    edx,0xc002b24c
c0016be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be4:	89 10                	mov    DWORD PTR [eax],edx
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bf4:	90                   	nop
c0016bf5:	83 c4 0c             	add    esp,0xc
c0016bf8:	c3                   	ret    
c0016bf9:	90                   	nop

c0016bfa <Serial::~Serial()>:
c0016bfa:	83 ec 0c             	sub    esp,0xc
c0016bfd:	ba 4c b2 02 c0       	mov    edx,0xc002b24c
c0016c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c06:	89 10                	mov    DWORD PTR [eax],edx
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	50                   	push   eax
c0016c10:	e8 dd d5 ff ff       	call   c00141f2 <Device::~Device()>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	90                   	nop
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    
c0016c1d:	90                   	nop

c0016c1e <Serial::~Serial()>:
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	83 ec 0c             	sub    esp,0xc
c0016c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c28:	e8 cd ff ff ff       	call   c0016bfa <Serial::~Serial()>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	83 ec 08             	sub    esp,0x8
c0016c33:	68 58 01 00 00       	push   0x158
c0016c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3c:	e8 d9 c1 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	83 c4 0c             	add    esp,0xc
c0016c47:	c3                   	ret    

c0016c48 <Timer::Timer(char const*)>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4f:	83 ec 08             	sub    esp,0x8
c0016c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c56:	50                   	push   eax
c0016c57:	e8 b4 d8 ff ff       	call   c0014510 <Device::Device(char const*)>
c0016c5c:	83 c4 10             	add    esp,0x10
c0016c5f:	ba 90 b2 02 c0       	mov    edx,0xc002b290
c0016c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c68:	89 10                	mov    DWORD PTR [eax],edx
c0016c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c78:	90                   	nop
c0016c79:	83 c4 0c             	add    esp,0xc
c0016c7c:	c3                   	ret    
c0016c7d:	90                   	nop

c0016c7e <Timer::~Timer()>:
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	ba 90 b2 02 c0       	mov    edx,0xc002b290
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	89 10                	mov    DWORD PTR [eax],edx
c0016c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	50                   	push   eax
c0016c94:	e8 59 d5 ff ff       	call   c00141f2 <Device::~Device()>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	90                   	nop
c0016c9d:	83 c4 0c             	add    esp,0xc
c0016ca0:	c3                   	ret    
c0016ca1:	90                   	nop

c0016ca2 <Timer::~Timer()>:
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cac:	e8 cd ff ff ff       	call   c0016c7e <Timer::~Timer()>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	83 ec 08             	sub    esp,0x8
c0016cb7:	68 5c 01 00 00       	push   0x15c
c0016cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc0:	e8 55 c1 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0016cc5:	83 c4 10             	add    esp,0x10
c0016cc8:	83 c4 0c             	add    esp,0xc
c0016ccb:	c3                   	ret    

c0016ccc <Timer::read()>:
c0016ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cd0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016cd6:	c3                   	ret    

c0016cd7 <timerHandler(unsigned long long)>:
c0016cd7:	55                   	push   ebp
c0016cd8:	57                   	push   edi
c0016cd9:	56                   	push   esi
c0016cda:	53                   	push   ebx
c0016cdb:	83 ec 0c             	sub    esp,0xc
c0016cde:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ce2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016ce6:	01 35 10 ea 02 c0    	add    DWORD PTR ds:0xc002ea10,esi
c0016cec:	11 3d 14 ea 02 c0    	adc    DWORD PTR ds:0xc002ea14,edi
c0016cf2:	80 3d 8d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38d,0x0
c0016cf9:	0f 84 07 01 00 00    	je     c0016e06 <timerHandler(unsigned long long)+0x12f>
c0016cff:	e8 a9 70 00 00       	call   c001ddad <lockStuff()>
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	68 dc 18 03 c0       	push   0xc00318dc
c0016d0c:	e8 bd 1c 01 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d11:	c7 04 24 dc 18 03 c0 	mov    DWORD PTR [esp],0xc00318dc
c0016d18:	89 c3                	mov    ebx,eax
c0016d1a:	e8 b7 1c 01 00       	call   c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	84 c0                	test   al,al
c0016d24:	74 60                	je     c0016d86 <timerHandler(unsigned long long)+0xaf>
c0016d26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d2c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d2f:	85 c0                	test   eax,eax
c0016d31:	0f 85 91 00 00 00    	jne    c0016dc8 <timerHandler(unsigned long long)+0xf1>
c0016d37:	e9 be 00 00 00       	jmp    c0016dfa <timerHandler(unsigned long long)+0x123>
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	55                   	push   ebp
c0016d40:	e8 59 76 00 00       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c0016d45:	83 c4 10             	add    esp,0x10
c0016d48:	39 eb                	cmp    ebx,ebp
c0016d4a:	75 12                	jne    c0016d5e <timerHandler(unsigned long long)+0x87>
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	68 dc 18 03 c0       	push   0xc00318dc
c0016d54:	e8 75 1c 01 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d59:	89 c3                	mov    ebx,eax
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	68 dc 18 03 c0       	push   0xc00318dc
c0016d66:	e8 6b 1c 01 00       	call   c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d6b:	83 c4 10             	add    esp,0x10
c0016d6e:	84 c0                	test   al,al
c0016d70:	75 b4                	jne    c0016d26 <timerHandler(unsigned long long)+0x4f>
c0016d72:	83 ec 0c             	sub    esp,0xc
c0016d75:	68 dc 18 03 c0       	push   0xc00318dc
c0016d7a:	e8 4f 1c 01 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	39 d8                	cmp    eax,ebx
c0016d84:	74 a0                	je     c0016d26 <timerHandler(unsigned long long)+0x4f>
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	68 dc 18 03 c0       	push   0xc00318dc
c0016d8e:	e8 3b 1c 01 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d93:	c7 04 24 dc 18 03 c0 	mov    DWORD PTR [esp],0xc00318dc
c0016d9a:	89 c5                	mov    ebp,eax
c0016d9c:	e8 51 1c 01 00       	call   c00289f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016da1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016daa:	39 15 10 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea10,edx
c0016db0:	a1 14 ea 02 c0       	mov    eax,ds:0xc002ea14
c0016db5:	19 c8                	sbb    eax,ecx
c0016db7:	73 83                	jae    c0016d3c <timerHandler(unsigned long long)+0x65>
c0016db9:	50                   	push   eax
c0016dba:	50                   	push   eax
c0016dbb:	55                   	push   ebp
c0016dbc:	68 dc 18 03 c0       	push   0xc00318dc
c0016dc1:	e8 da 1c 01 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dc6:	eb 93                	jmp    c0016d5b <timerHandler(unsigned long long)+0x84>
c0016dc8:	80 3d 8c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38c,0x0
c0016dcf:	74 29                	je     c0016dfa <timerHandler(unsigned long long)+0x123>
c0016dd1:	39 c6                	cmp    esi,eax
c0016dd3:	bb 00 00 00 00       	mov    ebx,0x0
c0016dd8:	19 df                	sbb    edi,ebx
c0016dda:	72 19                	jb     c0016df5 <timerHandler(unsigned long long)+0x11e>
c0016ddc:	e8 a5 6f 00 00       	call   c001dd86 <lockScheduler()>
c0016de1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016de9:	e8 d4 72 00 00       	call   c001e0c2 <schedule()>
c0016dee:	e8 95 6f 00 00       	call   c001dd88 <unlockScheduler()>
c0016df3:	eb 05                	jmp    c0016dfa <timerHandler(unsigned long long)+0x123>
c0016df5:	29 f0                	sub    eax,esi
c0016df7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016dfa:	83 c4 0c             	add    esp,0xc
c0016dfd:	5b                   	pop    ebx
c0016dfe:	5e                   	pop    esi
c0016dff:	5f                   	pop    edi
c0016e00:	5d                   	pop    ebp
c0016e01:	e9 41 73 00 00       	jmp    c001e147 <unlockStuff()>
c0016e06:	83 c4 0c             	add    esp,0xc
c0016e09:	5b                   	pop    ebx
c0016e0a:	5e                   	pop    esi
c0016e0b:	5f                   	pop    edi
c0016e0c:	5d                   	pop    ebp
c0016e0d:	c3                   	ret    

c0016e0e <setupTimer(int)>:
c0016e0e:	57                   	push   edi
c0016e0f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e14:	56                   	push   esi
c0016e15:	53                   	push   ebx
c0016e16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e20:	83 ec 0c             	sub    esp,0xc
c0016e23:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e29:	e8 de d7 ff ff       	call   c001460c <Device::getName()>
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e34:	0f 85 8d 00 00 00    	jne    c0016ec7 <setupTimer(int)+0xb9>
c0016e3a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e3f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e46:	74 7f                	je     c0016ec7 <setupTimer(int)+0xb9>
c0016e48:	83 ec 0c             	sub    esp,0xc
c0016e4b:	68 5c 01 00 00       	push   0x15c
c0016e50:	e8 eb 89 ff ff       	call   c000f840 <malloc>
c0016e55:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e58:	89 c3                	mov    ebx,eax
c0016e5a:	e8 e1 f6 00 00       	call   c0026540 <PIT::PIT()>
c0016e5f:	59                   	pop    ecx
c0016e60:	5f                   	pop    edi
c0016e61:	53                   	push   ebx
c0016e62:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016e68:	e8 b3 d4 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0016e6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e6f:	6a 00                	push   0x0
c0016e71:	6a 00                	push   0x0
c0016e73:	56                   	push   esi
c0016e74:	53                   	push   ebx
c0016e75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e78:	83 c4 14             	add    esp,0x14
c0016e7b:	68 60 01 00 00       	push   0x160
c0016e80:	e8 bb 89 ff ff       	call   c000f840 <malloc>
c0016e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e88:	89 c7                	mov    edi,eax
c0016e8a:	e8 61 f5 00 00       	call   c00263f0 <APICTimer::APICTimer()>
c0016e8f:	6a 00                	push   0x0
c0016e91:	6a 00                	push   0x0
c0016e93:	56                   	push   esi
c0016e94:	57                   	push   edi
c0016e95:	e8 58 f4 00 00       	call   c00262f2 <APICTimer::open(int, int, void*)>
c0016e9a:	83 c4 20             	add    esp,0x20
c0016e9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e9f:	6a 00                	push   0x0
c0016ea1:	6a 00                	push   0x0
c0016ea3:	6a 00                	push   0x0
c0016ea5:	53                   	push   ebx
c0016ea6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ea9:	58                   	pop    eax
c0016eaa:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016eaf:	5a                   	pop    edx
c0016eb0:	57                   	push   edi
c0016eb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016eb7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ebd:	e8 5e d4 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	eb 33                	jmp    c0016efa <setupTimer(int)+0xec>
c0016ec7:	83 ec 0c             	sub    esp,0xc
c0016eca:	68 5c 01 00 00       	push   0x15c
c0016ecf:	e8 6c 89 ff ff       	call   c000f840 <malloc>
c0016ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed7:	89 c3                	mov    ebx,eax
c0016ed9:	e8 62 f6 00 00       	call   c0026540 <PIT::PIT()>
c0016ede:	58                   	pop    eax
c0016edf:	5a                   	pop    edx
c0016ee0:	53                   	push   ebx
c0016ee1:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016ee7:	e8 34 d4 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0016eec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eee:	6a 00                	push   0x0
c0016ef0:	6a 00                	push   0x0
c0016ef2:	56                   	push   esi
c0016ef3:	53                   	push   ebx
c0016ef4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ef7:	83 c4 20             	add    esp,0x20
c0016efa:	89 d8                	mov    eax,ebx
c0016efc:	5b                   	pop    ebx
c0016efd:	5e                   	pop    esi
c0016efe:	5f                   	pop    edi
c0016eff:	c3                   	ret    

c0016f00 <VCache::VCache(PhysicalDisk*)>:
c0016f00:	53                   	push   ebx
c0016f01:	83 ec 18             	sub    esp,0x18
c0016f04:	ba c0 b2 02 c0       	mov    edx,0xc002b2c0
c0016f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f0d:	89 10                	mov    DWORD PTR [eax],edx
c0016f0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f13:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f29:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f30:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f42:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f58:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f60:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f67:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f72:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f91:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f99:	83 ec 0c             	sub    esp,0xc
c0016f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fa0:	e8 9b 88 ff ff       	call   c000f840 <malloc>
c0016fa5:	83 c4 10             	add    esp,0x10
c0016fa8:	89 c3                	mov    ebx,eax
c0016faa:	83 ec 0c             	sub    esp,0xc
c0016fad:	53                   	push   ebx
c0016fae:	e8 f3 6e 00 00       	call   c001dea6 <Mutex::Mutex()>
c0016fb3:	83 c4 10             	add    esp,0x10
c0016fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fc5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016fd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fd7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fe8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016fee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ff4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ff8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ffb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017002:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017010:	05 00 01 00 00       	add    eax,0x100
c0017015:	c1 e0 04             	shl    eax,0x4
c0017018:	83 ec 0c             	sub    esp,0xc
c001701b:	50                   	push   eax
c001701c:	e8 1f 88 ff ff       	call   c000f840 <malloc>
c0017021:	83 c4 10             	add    esp,0x10
c0017024:	89 c2                	mov    edx,eax
c0017026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017040:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017044:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001704a:	c1 e0 07             	shl    eax,0x7
c001704d:	83 ec 0c             	sub    esp,0xc
c0017050:	50                   	push   eax
c0017051:	e8 ea 87 ff ff       	call   c000f840 <malloc>
c0017056:	83 c4 10             	add    esp,0x10
c0017059:	89 c2                	mov    edx,eax
c001705b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017062:	90                   	nop
c0017063:	83 c4 18             	add    esp,0x18
c0017066:	5b                   	pop    ebx
c0017067:	c3                   	ret    

c0017068 <VCache::invalidateReadBuffer()>:
c0017068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001706c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017072:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017076:	c3                   	ret    
c0017077:	90                   	nop

c0017078 <VCache::writeWriteBuffer()>:
c0017078:	53                   	push   ebx
c0017079:	83 ec 14             	sub    esp,0x14
c001707c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017080:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017083:	8b 10                	mov    edx,DWORD PTR [eax]
c0017085:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017088:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001708b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001708e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017091:	50                   	push   eax
c0017092:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017095:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001709c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170a3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170a7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170ae:	83 c4 28             	add    esp,0x28
c00170b1:	5b                   	pop    ebx
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <VCache::~VCache()>:
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	ba c0 b2 02 c0       	mov    edx,0xc002b2c0
c00170bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c0:	89 10                	mov    DWORD PTR [eax],edx
c00170c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00170c9:	84 c0                	test   al,al
c00170cb:	74 0f                	je     c00170dc <VCache::~VCache()+0x28>
c00170cd:	83 ec 0c             	sub    esp,0xc
c00170d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170d4:	e8 9f ff ff ff       	call   c0017078 <VCache::writeWriteBuffer()>
c00170d9:	83 c4 10             	add    esp,0x10
c00170dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170e0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170e3:	83 ec 0c             	sub    esp,0xc
c00170e6:	50                   	push   eax
c00170e7:	e8 64 87 ff ff       	call   c000f850 <free>
c00170ec:	83 c4 10             	add    esp,0x10
c00170ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170f6:	83 ec 0c             	sub    esp,0xc
c00170f9:	50                   	push   eax
c00170fa:	e8 51 87 ff ff       	call   c000f850 <free>
c00170ff:	83 c4 10             	add    esp,0x10
c0017102:	90                   	nop
c0017103:	83 c4 0c             	add    esp,0xc
c0017106:	c3                   	ret    
c0017107:	90                   	nop

c0017108 <VCache::~VCache()>:
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	83 ec 0c             	sub    esp,0xc
c001710e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017112:	e8 9d ff ff ff       	call   c00170b4 <VCache::~VCache()>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	83 ec 08             	sub    esp,0x8
c001711d:	6a 44                	push   0x44
c001711f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017123:	e8 f2 bc ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0017128:	83 c4 10             	add    esp,0x10
c001712b:	83 c4 0c             	add    esp,0xc
c001712e:	c3                   	ret    
c001712f:	90                   	nop

c0017130 <VCache::write(unsigned long long, int, void*)>:
c0017130:	55                   	push   ebp
c0017131:	57                   	push   edi
c0017132:	56                   	push   esi
c0017133:	53                   	push   ebx
c0017134:	83 ec 28             	sub    esp,0x28
c0017137:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001713b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001713f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017143:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017147:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001714a:	e8 b9 71 00 00       	call   c001e308 <Semaphore::acquire()>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017156:	74 0c                	je     c0017164 <VCache::write(unsigned long long, int, void*)+0x34>
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	53                   	push   ebx
c001715c:	e8 07 ff ff ff       	call   c0017068 <VCache::invalidateReadBuffer()>
c0017161:	83 c4 10             	add    esp,0x10
c0017164:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017168:	74 66                	je     c00171d0 <VCache::write(unsigned long long, int, void*)+0xa0>
c001716a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001716d:	99                   	cdq    
c001716e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017172:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017175:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017178:	89 c1                	mov    ecx,eax
c001717a:	89 d0                	mov    eax,edx
c001717c:	31 f1                	xor    ecx,esi
c001717e:	31 f8                	xor    eax,edi
c0017180:	89 ca                	mov    edx,ecx
c0017182:	09 c2                	or     edx,eax
c0017184:	75 3e                	jne    c00171c4 <VCache::write(unsigned long long, int, void*)+0x94>
c0017186:	83 fd 01             	cmp    ebp,0x1
c0017189:	75 39                	jne    c00171c4 <VCache::write(unsigned long long, int, void*)+0x94>
c001718b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001718e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017194:	51                   	push   ecx
c0017195:	50                   	push   eax
c0017196:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001719a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001719e:	0f af c8             	imul   ecx,eax
c00171a1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171a4:	51                   	push   ecx
c00171a5:	e8 9a 95 fe ff       	call   c0000744 <memcpy>
c00171aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171ad:	83 c4 10             	add    esp,0x10
c00171b0:	40                   	inc    eax
c00171b1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171b4:	83 c0 80             	add    eax,0xffffff80
c00171b7:	75 57                	jne    c0017210 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171b9:	83 ec 0c             	sub    esp,0xc
c00171bc:	53                   	push   ebx
c00171bd:	e8 b6 fe ff ff       	call   c0017078 <VCache::writeWriteBuffer()>
c00171c2:	eb 34                	jmp    c00171f8 <VCache::write(unsigned long long, int, void*)+0xc8>
c00171c4:	83 ec 0c             	sub    esp,0xc
c00171c7:	53                   	push   ebx
c00171c8:	e8 ab fe ff ff       	call   c0017078 <VCache::writeWriteBuffer()>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171d3:	83 fd 7f             	cmp    ebp,0x7f
c00171d6:	7f 25                	jg     c00171fd <VCache::write(unsigned long long, int, void*)+0xcd>
c00171d8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171db:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171de:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171e1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171e5:	52                   	push   edx
c00171e6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171f3:	e8 4c 95 fe ff       	call   c0000744 <memcpy>
c00171f8:	83 c4 10             	add    esp,0x10
c00171fb:	eb 13                	jmp    c0017210 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171fd:	83 ec 0c             	sub    esp,0xc
c0017200:	8b 10                	mov    edx,DWORD PTR [eax]
c0017202:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017206:	55                   	push   ebp
c0017207:	57                   	push   edi
c0017208:	56                   	push   esi
c0017209:	50                   	push   eax
c001720a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001720d:	83 c4 20             	add    esp,0x20
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017216:	e8 9b 76 00 00       	call   c001e8b6 <Semaphore::release()>
c001721b:	83 c4 2c             	add    esp,0x2c
c001721e:	31 c0                	xor    eax,eax
c0017220:	5b                   	pop    ebx
c0017221:	5e                   	pop    esi
c0017222:	5f                   	pop    edi
c0017223:	5d                   	pop    ebp
c0017224:	c3                   	ret    
c0017225:	90                   	nop

c0017226 <VCache::read(unsigned long long, int, void*)>:
c0017226:	55                   	push   ebp
c0017227:	57                   	push   edi
c0017228:	56                   	push   esi
c0017229:	53                   	push   ebx
c001722a:	83 ec 28             	sub    esp,0x28
c001722d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017231:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017235:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001723d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017241:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017245:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017249:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001724c:	e8 b7 70 00 00       	call   c001e308 <Semaphore::acquire()>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017258:	74 0c                	je     c0017266 <VCache::read(unsigned long long, int, void*)+0x40>
c001725a:	83 ec 0c             	sub    esp,0xc
c001725d:	53                   	push   ebx
c001725e:	e8 15 fe ff ff       	call   c0017078 <VCache::writeWriteBuffer()>
c0017263:	83 c4 10             	add    esp,0x10
c0017266:	83 fe 01             	cmp    esi,0x1
c0017269:	0f 85 80 00 00 00    	jne    c00172ef <VCache::read(unsigned long long, int, void*)+0xc9>
c001726f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017272:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017279:	75 74                	jne    c00172ef <VCache::read(unsigned long long, int, void*)+0xc9>
c001727b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001727e:	89 d1                	mov    ecx,edx
c0017280:	f7 d9                	neg    ecx
c0017282:	89 cf                	mov    edi,ecx
c0017284:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017288:	c1 ff 1f             	sar    edi,0x1f
c001728b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001728e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017292:	89 ce                	mov    esi,ecx
c0017294:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017298:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001729c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172a0:	89 cf                	mov    edi,ecx
c00172a2:	74 0a                	je     c00172ae <VCache::read(unsigned long long, int, void*)+0x88>
c00172a4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172a7:	75 05                	jne    c00172ae <VCache::read(unsigned long long, int, void*)+0x88>
c00172a9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172ac:	74 1c                	je     c00172ca <VCache::read(unsigned long long, int, void*)+0xa4>
c00172ae:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172b2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172b5:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172b8:	83 ec 0c             	sub    esp,0xc
c00172bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172bd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172c0:	52                   	push   edx
c00172c1:	57                   	push   edi
c00172c2:	56                   	push   esi
c00172c3:	50                   	push   eax
c00172c4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00172c7:	83 c4 20             	add    esp,0x20
c00172ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172cd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172d3:	50                   	push   eax
c00172d4:	52                   	push   edx
c00172d5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172d8:	48                   	dec    eax
c00172d9:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172dd:	0f af c2             	imul   eax,edx
c00172e0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172e3:	50                   	push   eax
c00172e4:	55                   	push   ebp
c00172e5:	e8 5a 94 fe ff       	call   c0000744 <memcpy>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	eb 21                	jmp    c0017310 <VCache::read(unsigned long long, int, void*)+0xea>
c00172ef:	83 ec 0c             	sub    esp,0xc
c00172f2:	53                   	push   ebx
c00172f3:	e8 70 fd ff ff       	call   c0017068 <VCache::invalidateReadBuffer()>
c00172f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00172fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017300:	56                   	push   esi
c0017301:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017305:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017309:	50                   	push   eax
c001730a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001730d:	83 c4 20             	add    esp,0x20
c0017310:	83 ec 0c             	sub    esp,0xc
c0017313:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017316:	e8 9b 75 00 00       	call   c001e8b6 <Semaphore::release()>
c001731b:	83 c4 2c             	add    esp,0x2c
c001731e:	31 c0                	xor    eax,eax
c0017320:	5b                   	pop    ebx
c0017321:	5e                   	pop    esi
c0017322:	5f                   	pop    edi
c0017323:	5d                   	pop    ebp
c0017324:	c3                   	ret    
c0017325:	90                   	nop

c0017326 <Video::putrect(int, int, int, int, unsigned int)>:
c0017326:	55                   	push   ebp
c0017327:	57                   	push   edi
c0017328:	56                   	push   esi
c0017329:	53                   	push   ebx
c001732a:	83 ec 1c             	sub    esp,0x1c
c001732d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017331:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017335:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017339:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001733d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017341:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017345:	01 df                	add    edi,ebx
c0017347:	39 fb                	cmp    ebx,edi
c0017349:	7d 1f                	jge    c001736a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001734b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001734f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017353:	7d 12                	jge    c0017367 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017355:	8b 16                	mov    edx,DWORD PTR [esi]
c0017357:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001735b:	53                   	push   ebx
c001735c:	55                   	push   ebp
c001735d:	45                   	inc    ebp
c001735e:	56                   	push   esi
c001735f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017362:	83 c4 10             	add    esp,0x10
c0017365:	eb e8                	jmp    c001734f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017367:	43                   	inc    ebx
c0017368:	eb dd                	jmp    c0017347 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001736a:	83 c4 1c             	add    esp,0x1c
c001736d:	5b                   	pop    ebx
c001736e:	5e                   	pop    esi
c001736f:	5f                   	pop    edi
c0017370:	5d                   	pop    ebp
c0017371:	c3                   	ret    

c0017372 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017372:	55                   	push   ebp
c0017373:	57                   	push   edi
c0017374:	31 ff                	xor    edi,edi
c0017376:	56                   	push   esi
c0017377:	53                   	push   ebx
c0017378:	83 ec 1c             	sub    esp,0x1c
c001737b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001737f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017383:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001738a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001738f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017393:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017397:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001739b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001739e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173a2:	01 f9                	add    ecx,edi
c00173a4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173a8:	7d 2f                	jge    c00173d9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173aa:	31 f6                	xor    esi,esi
c00173ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173b0:	01 f2                	add    edx,esi
c00173b2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173b6:	7d 1a                	jge    c00173d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173bb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173be:	46                   	inc    esi
c00173bf:	51                   	push   ecx
c00173c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00173c4:	52                   	push   edx
c00173c5:	55                   	push   ebp
c00173c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173c9:	83 c4 10             	add    esp,0x10
c00173cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173d0:	eb da                	jmp    c00173ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173d2:	47                   	inc    edi
c00173d3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173d7:	eb c5                	jmp    c001739e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173d9:	83 c4 1c             	add    esp,0x1c
c00173dc:	5b                   	pop    ebx
c00173dd:	5e                   	pop    esi
c00173de:	5f                   	pop    edi
c00173df:	5d                   	pop    ebp
c00173e0:	c3                   	ret    
c00173e1:	90                   	nop

c00173e2 <Video::blit(unsigned int*, int, int, int, int)>:
c00173e2:	55                   	push   ebp
c00173e3:	57                   	push   edi
c00173e4:	56                   	push   esi
c00173e5:	53                   	push   ebx
c00173e6:	83 ec 1c             	sub    esp,0x1c
c00173e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173f1:	85 c0                	test   eax,eax
c00173f3:	79 02                	jns    c00173f7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173f5:	31 c0                	xor    eax,eax
c00173f7:	c1 e0 02             	shl    eax,0x2
c00173fa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017402:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017406:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001740a:	39 d8                	cmp    eax,ebx
c001740c:	7e 49                	jle    c0017457 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001740e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017414:	7c 41                	jl     c0017457 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017416:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001741a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001741e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017422:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017426:	39 f9                	cmp    ecx,edi
c0017428:	7e 22                	jle    c001744c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001742a:	83 c5 04             	add    ebp,0x4
c001742d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017433:	7c 14                	jl     c0017449 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017435:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017437:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001743a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001743e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017442:	56                   	push   esi
c0017443:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	47                   	inc    edi
c001744a:	eb d2                	jmp    c001741e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001744c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017450:	43                   	inc    ebx
c0017451:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017455:	eb ab                	jmp    c0017402 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017457:	83 c4 1c             	add    esp,0x1c
c001745a:	5b                   	pop    ebx
c001745b:	5e                   	pop    esi
c001745c:	5f                   	pop    edi
c001745d:	5d                   	pop    ebp
c001745e:	c3                   	ret    
c001745f:	90                   	nop

c0017460 <Video::clearScreen(unsigned int)>:
c0017460:	57                   	push   edi
c0017461:	56                   	push   esi
c0017462:	53                   	push   ebx
c0017463:	31 db                	xor    ebx,ebx
c0017465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017469:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001746f:	7e 1f                	jle    c0017490 <Video::clearScreen(unsigned int)+0x30>
c0017471:	31 ff                	xor    edi,edi
c0017473:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017479:	7e 12                	jle    c001748d <Video::clearScreen(unsigned int)+0x2d>
c001747b:	8b 06                	mov    eax,DWORD PTR [esi]
c001747d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017481:	53                   	push   ebx
c0017482:	57                   	push   edi
c0017483:	47                   	inc    edi
c0017484:	56                   	push   esi
c0017485:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017488:	83 c4 10             	add    esp,0x10
c001748b:	eb e6                	jmp    c0017473 <Video::clearScreen(unsigned int)+0x13>
c001748d:	43                   	inc    ebx
c001748e:	eb d9                	jmp    c0017469 <Video::clearScreen(unsigned int)+0x9>
c0017490:	5b                   	pop    ebx
c0017491:	5e                   	pop    esi
c0017492:	5f                   	pop    edi
c0017493:	c3                   	ret    

c0017494 <Video::putpixel(int, int, unsigned int)>:
c0017494:	c7 44 24 04 c8 b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2c8
c001749c:	e9 0a 31 00 00       	jmp    c001a5ab <Krnl::panic(char const*)>
c00174a1:	90                   	nop

c00174a2 <Video::Video(char const*)>:
c00174a2:	83 ec 0c             	sub    esp,0xc
c00174a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a9:	83 ec 08             	sub    esp,0x8
c00174ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174b0:	50                   	push   eax
c00174b1:	e8 5a d0 ff ff       	call   c0014510 <Device::Device(char const*)>
c00174b6:	83 c4 10             	add    esp,0x10
c00174b9:	ba 4c b3 02 c0       	mov    edx,0xc002b34c
c00174be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174c2:	89 10                	mov    DWORD PTR [eax],edx
c00174c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174c8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174d2:	90                   	nop
c00174d3:	83 c4 0c             	add    esp,0xc
c00174d6:	c3                   	ret    
c00174d7:	90                   	nop

c00174d8 <Video::~Video()>:
c00174d8:	83 ec 0c             	sub    esp,0xc
c00174db:	ba 4c b3 02 c0       	mov    edx,0xc002b34c
c00174e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e4:	89 10                	mov    DWORD PTR [eax],edx
c00174e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ea:	83 ec 0c             	sub    esp,0xc
c00174ed:	50                   	push   eax
c00174ee:	e8 ff cc ff ff       	call   c00141f2 <Device::~Device()>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	90                   	nop
c00174f7:	83 c4 0c             	add    esp,0xc
c00174fa:	c3                   	ret    
c00174fb:	90                   	nop

c00174fc <Video::~Video()>:
c00174fc:	83 ec 0c             	sub    esp,0xc
c00174ff:	83 ec 0c             	sub    esp,0xc
c0017502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017506:	e8 cd ff ff ff       	call   c00174d8 <Video::~Video()>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	83 ec 08             	sub    esp,0x8
c0017511:	68 64 01 00 00       	push   0x164
c0017516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001751a:	e8 fb b8 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001751f:	83 c4 10             	add    esp,0x10
c0017522:	83 c4 0c             	add    esp,0xc
c0017525:	c3                   	ret    

c0017526 <Video::isMonochrome()>:
c0017526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001752a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017530:	c3                   	ret    
c0017531:	90                   	nop

c0017532 <Video::getWidth()>:
c0017532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017536:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001753c:	c3                   	ret    
c001753d:	90                   	nop

c001753e <Video::getHeight()>:
c001753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017542:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017548:	c3                   	ret    
c0017549:	90                   	nop

c001754a <Video::drawCursor(int, int, unsigned char*, int)>:
c001754a:	55                   	push   ebp
c001754b:	57                   	push   edi
c001754c:	56                   	push   esi
c001754d:	53                   	push   ebx
c001754e:	83 ec 2c             	sub    esp,0x2c
c0017551:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017555:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017559:	83 f8 01             	cmp    eax,0x1
c001755c:	19 c9                	sbb    ecx,ecx
c001755e:	31 db                	xor    ebx,ebx
c0017560:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017564:	89 cd                	mov    ebp,ecx
c0017566:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001756e:	f7 d5                	not    ebp
c0017570:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001757a:	01 d8                	add    eax,ebx
c001757c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017580:	56                   	push   esi
c0017581:	e8 b8 ff ff ff       	call   c001753e <Video::getHeight()>
c0017586:	59                   	pop    ecx
c0017587:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001758b:	7e 70                	jle    c00175fd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001758d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017591:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017595:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017598:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001759c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175a0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175ab:	89 f8                	mov    eax,edi
c00175ad:	83 c0 20             	add    eax,0x20
c00175b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175b4:	56                   	push   esi
c00175b5:	e8 78 ff ff ff       	call   c0017532 <Video::getWidth()>
c00175ba:	5a                   	pop    edx
c00175bb:	39 c7                	cmp    edi,eax
c00175bd:	7d 34                	jge    c00175f3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175bf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00175c4:	74 05                	je     c00175cb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00175c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00175c8:	55                   	push   ebp
c00175c9:	eb 0d                	jmp    c00175d8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00175cb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00175d0:	74 12                	je     c00175e4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00175d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175dc:	57                   	push   edi
c00175dd:	56                   	push   esi
c00175de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175e1:	83 c4 10             	add    esp,0x10
c00175e4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175e8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175ec:	47                   	inc    edi
c00175ed:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175f1:	75 c1                	jne    c00175b4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175f3:	43                   	inc    ebx
c00175f4:	83 fb 20             	cmp    ebx,0x20
c00175f7:	0f 85 79 ff ff ff    	jne    c0017576 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175fd:	83 c4 2c             	add    esp,0x2c
c0017600:	5b                   	pop    ebx
c0017601:	5e                   	pop    esi
c0017602:	5f                   	pop    edi
c0017603:	5d                   	pop    ebp
c0017604:	c3                   	ret    
c0017605:	90                   	nop

c0017606 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017606:	55                   	push   ebp
c0017607:	57                   	push   edi
c0017608:	56                   	push   esi
c0017609:	53                   	push   ebx
c001760a:	83 ec 28             	sub    esp,0x28
c001760d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017611:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017615:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017619:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001761d:	c1 e7 08             	shl    edi,0x8
c0017620:	01 c7                	add    edi,eax
c0017622:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017626:	c1 e0 08             	shl    eax,0x8
c0017629:	01 d0                	add    eax,edx
c001762b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001762f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017633:	0f af c7             	imul   eax,edi
c0017636:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001763d:	50                   	push   eax
c001763e:	e8 fd 81 ff ff       	call   c000f840 <malloc>
c0017643:	83 c4 10             	add    esp,0x10
c0017646:	89 c5                	mov    ebp,eax
c0017648:	85 c0                	test   eax,eax
c001764a:	75 15                	jne    c0017661 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	68 e9 b2 02 c0       	push   0xc002b2e9
c0017654:	e8 a1 b8 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	e9 1c 01 00 00       	jmp    c001777d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017661:	be 12 00 00 00       	mov    esi,0x12
c0017666:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001766a:	74 11                	je     c001767d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001766c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017670:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017674:	c1 fe 03             	sar    esi,0x3
c0017677:	0f af f0             	imul   esi,eax
c001767a:	83 c6 12             	add    esi,0x12
c001767d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017681:	74 04                	je     c0017687 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017683:	85 ff                	test   edi,edi
c0017685:	75 12                	jne    c0017699 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	68 00 b3 02 c0       	push   0xc002b300
c001768f:	e8 66 b8 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0017694:	e9 ce 00 00 00       	jmp    c0017767 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017699:	52                   	push   edx
c001769a:	52                   	push   edx
c001769b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001769f:	50                   	push   eax
c00176a0:	68 15 b3 02 c0       	push   0xc002b315
c00176a5:	e8 50 b8 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00176aa:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	80 fa 02             	cmp    dl,0x2
c00176b4:	0f 85 98 00 00 00    	jne    c0017752 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176ba:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176bf:	75 10                	jne    c00176d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176c1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176c5:	75 0a                	jne    c00176d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176c7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00176ca:	83 e8 18             	sub    eax,0x18
c00176cd:	a8 f7                	test   al,0xf7
c00176cf:	74 0a                	je     c00176db <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00176d1:	83 ec 0c             	sub    esp,0xc
c00176d4:	68 22 b3 02 c0       	push   0xc002b322
c00176d9:	eb 7f                	jmp    c001775a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176f7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176fb:	75 0c                	jne    c0017709 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176fd:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017702:	c1 e0 18             	shl    eax,0x18
c0017705:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017709:	41                   	inc    ecx
c001770a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001770f:	c1 e2 10             	shl    edx,0x10
c0017712:	89 d0                	mov    eax,edx
c0017714:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017719:	c1 e2 08             	shl    edx,0x8
c001771c:	09 c2                	or     edx,eax
c001771e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017722:	09 c2                	or     edx,eax
c0017724:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017728:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001772c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017730:	c1 f8 03             	sar    eax,0x3
c0017733:	01 c6                	add    esi,eax
c0017735:	89 c8                	mov    eax,ecx
c0017737:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001773b:	39 c7                	cmp    edi,eax
c001773d:	7f b0                	jg     c00176ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001773f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017743:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017747:	39 14 24             	cmp    DWORD PTR [esp],edx
c001774a:	7e 22                	jle    c001776e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001774c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017750:	eb 99                	jmp    c00176eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017752:	50                   	push   eax
c0017753:	50                   	push   eax
c0017754:	52                   	push   edx
c0017755:	68 30 b3 02 c0       	push   0xc002b330
c001775a:	e8 9b b7 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001775f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017762:	e8 e9 80 ff ff       	call   c000f850 <free>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	31 ed                	xor    ebp,ebp
c001776c:	eb 0f                	jmp    c001777d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001776e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017772:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017775:	89 38                	mov    DWORD PTR [eax],edi
c0017777:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001777b:	89 08                	mov    DWORD PTR [eax],ecx
c001777d:	83 c4 1c             	add    esp,0x1c
c0017780:	89 e8                	mov    eax,ebp
c0017782:	5b                   	pop    ebx
c0017783:	5e                   	pop    esi
c0017784:	5f                   	pop    edi
c0017785:	5d                   	pop    ebp
c0017786:	c3                   	ret    
c0017787:	90                   	nop

c0017788 <Video::putTGA(int, int, unsigned char*, int)>:
c0017788:	55                   	push   ebp
c0017789:	57                   	push   edi
c001778a:	56                   	push   esi
c001778b:	53                   	push   ebx
c001778c:	83 ec 28             	sub    esp,0x28
c001778f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017793:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017797:	50                   	push   eax
c0017798:	8d 44 24 18          	lea    eax,[esp+0x18]
c001779c:	50                   	push   eax
c001779d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177a5:	56                   	push   esi
c00177a6:	e8 5b fe ff ff       	call   c0017606 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177ab:	83 c4 20             	add    esp,0x20
c00177ae:	85 c0                	test   eax,eax
c00177b0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177b4:	74 35                	je     c00177eb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177b6:	89 c7                	mov    edi,eax
c00177b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177bc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177c0:	39 d8                	cmp    eax,ebx
c00177c2:	7e 27                	jle    c00177eb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00177c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00177d0:	39 e8                	cmp    eax,ebp
c00177d2:	7e 14                	jle    c00177e8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00177d6:	83 c7 04             	add    edi,0x4
c00177d9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177dc:	53                   	push   ebx
c00177dd:	55                   	push   ebp
c00177de:	45                   	inc    ebp
c00177df:	56                   	push   esi
c00177e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177e3:	83 c4 10             	add    esp,0x10
c00177e6:	eb e0                	jmp    c00177c8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177e8:	43                   	inc    ebx
c00177e9:	eb cd                	jmp    c00177b8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177eb:	83 c4 1c             	add    esp,0x1c
c00177ee:	5b                   	pop    ebx
c00177ef:	5e                   	pop    esi
c00177f0:	5f                   	pop    edi
c00177f1:	5d                   	pop    ebp
c00177f2:	c3                   	ret    
c00177f3:	90                   	nop

c00177f4 <ACPI::close(int, int, void*)>:
c00177f4:	83 ec 1c             	sub    esp,0x1c
c00177f7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177ff:	74 0a                	je     c001780b <ACPI::close(int, int, void*)+0x17>
c0017801:	b8 00 00 00 00       	mov    eax,0x0
c0017806:	e9 9a 00 00 00       	jmp    c00178a5 <ACPI::close(int, int, void*)+0xb1>
c001780b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017810:	75 37                	jne    c0017849 <ACPI::close(int, int, void*)+0x55>
c0017812:	83 ec 0c             	sub    esp,0xc
c0017815:	68 8c b3 02 c0       	push   0xc002b38c
c001781a:	e8 db b6 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	a1 48 0a 03 c0       	mov    eax,ds:0xc0030a48
c0017827:	85 c0                	test   eax,eax
c0017829:	74 07                	je     c0017832 <ACPI::close(int, int, void*)+0x3e>
c001782b:	a1 48 0a 03 c0       	mov    eax,ds:0xc0030a48
c0017830:	ff d0                	call   eax
c0017832:	83 ec 0c             	sub    esp,0xc
c0017835:	68 b0 b4 02 c0       	push   0xc002b4b0
c001783a:	e8 6c 2d 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017847:	eb 5c                	jmp    c00178a5 <ACPI::close(int, int, void*)+0xb1>
c0017849:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001784e:	75 50                	jne    c00178a0 <ACPI::close(int, int, void*)+0xac>
c0017850:	a1 44 0a 03 c0       	mov    eax,ds:0xc0030a44
c0017855:	85 c0                	test   eax,eax
c0017857:	74 07                	je     c0017860 <ACPI::close(int, int, void*)+0x6c>
c0017859:	a1 44 0a 03 c0       	mov    eax,ds:0xc0030a44
c001785e:	ff d0                	call   eax
c0017860:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017865:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001786a:	83 e0 02             	and    eax,0x2
c001786d:	74 1c                	je     c001788b <ACPI::close(int, int, void*)+0x97>
c001786f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001787a:	89 c2                	mov    edx,eax
c001787c:	ec                   	in     al,dx
c001787d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017881:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017885:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017889:	eb da                	jmp    c0017865 <ACPI::close(int, int, void*)+0x71>
c001788b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017892:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017897:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001789b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001789f:	ee                   	out    dx,al
c00178a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178a5:	83 c4 1c             	add    esp,0x1c
c00178a8:	c3                   	ret    

c00178a9 <findRSDP()>:
c00178a9:	83 ec 1c             	sub    esp,0x1c
c00178ac:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178b7:	83 e0 04             	and    eax,0x4
c00178ba:	84 c0                	test   al,al
c00178bc:	75 07                	jne    c00178c5 <findRSDP()+0x1c>
c00178be:	b8 00 00 00 00       	mov    eax,0x0
c00178c3:	eb 6a                	jmp    c001792f <findRSDP()+0x86>
c00178c5:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c00178ca:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178cf:	7f 1b                	jg     c00178ec <findRSDP()+0x43>
c00178d1:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178dc:	83 e2 fb             	and    edx,0xfffffffb
c00178df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178e5:	b8 00 00 00 00       	mov    eax,0x0
c00178ea:	eb 43                	jmp    c001792f <findRSDP()+0x86>
c00178ec:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178f4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178fc:	77 2c                	ja     c001792a <findRSDP()+0x81>
c00178fe:	83 ec 04             	sub    esp,0x4
c0017901:	6a 08                	push   0x8
c0017903:	68 99 b3 02 c0       	push   0xc002b399
c0017908:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001790c:	e8 2f 8d fe ff       	call   c0000640 <memcmp>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	85 c0                	test   eax,eax
c0017916:	0f 94 c0             	sete   al
c0017919:	84 c0                	test   al,al
c001791b:	74 06                	je     c0017923 <findRSDP()+0x7a>
c001791d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017921:	eb 0c                	jmp    c001792f <findRSDP()+0x86>
c0017923:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017928:	eb ca                	jmp    c00178f4 <findRSDP()+0x4b>
c001792a:	b8 00 00 00 00       	mov    eax,0x0
c001792f:	83 c4 1c             	add    esp,0x1c
c0017932:	c3                   	ret    

c0017933 <loadACPITables(unsigned char*)>:
c0017933:	56                   	push   esi
c0017934:	53                   	push   ebx
c0017935:	83 ec 44             	sub    esp,0x44
c0017938:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001793d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017943:	83 e0 04             	and    eax,0x4
c0017946:	84 c0                	test   al,al
c0017948:	0f 84 05 02 00 00    	je     c0017b53 <loadACPITables(unsigned char*)+0x220>
c001794e:	a0 60 0c 03 c0       	mov    al,ds:0xc0030c60
c0017953:	84 c0                	test   al,al
c0017955:	74 75                	je     c00179cc <loadACPITables(unsigned char*)+0x99>
c0017957:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001795b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001795f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017963:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017966:	83 e8 24             	sub    eax,0x24
c0017969:	c1 e8 03             	shr    eax,0x3
c001796c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017970:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017978:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001797c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017980:	0f 8d b2 00 00 00    	jge    c0017a38 <loadACPITables(unsigned char*)+0x105>
c0017986:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001798a:	83 c0 24             	add    eax,0x24
c001798d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017991:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017995:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017999:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001799d:	c1 e0 03             	shl    eax,0x3
c00179a0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00179ad:	89 c1                	mov    ecx,eax
c00179af:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c00179b4:	8d 50 01             	lea    edx,[eax+0x1]
c00179b7:	89 15 4c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a4c,edx
c00179bd:	89 ca                	mov    edx,ecx
c00179bf:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c00179c6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179ca:	eb ac                	jmp    c0017978 <loadACPITables(unsigned char*)+0x45>
c00179cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179db:	83 e8 24             	sub    eax,0x24
c00179de:	c1 e8 02             	shr    eax,0x2
c00179e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179e5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179f1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179f5:	7d 41                	jge    c0017a38 <loadACPITables(unsigned char*)+0x105>
c00179f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179fb:	83 c0 24             	add    eax,0x24
c00179fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a0e:	c1 e0 02             	shl    eax,0x2
c0017a11:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a19:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a1b:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017a20:	8d 50 01             	lea    edx,[eax+0x1]
c0017a23:	89 15 4c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a4c,edx
c0017a29:	89 ca                	mov    edx,ecx
c0017a2b:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017a32:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a36:	eb b5                	jmp    c00179ed <loadACPITables(unsigned char*)+0xba>
c0017a38:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a40:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017a45:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a49:	0f 8d 05 01 00 00    	jge    c0017b54 <loadACPITables(unsigned char*)+0x221>
c0017a4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a53:	8b 04 c5 64 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf59c]
c0017a5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6a:	25 ff 0f 00 00       	and    eax,0xfff
c0017a6f:	89 c6                	mov    esi,eax
c0017a71:	e8 c4 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017a76:	89 c3                	mov    ebx,eax
c0017a78:	83 ec 0c             	sub    esp,0xc
c0017a7b:	6a 01                	push   0x1
c0017a7d:	e8 1d a1 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a89:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a8f:	83 ec 0c             	sub    esp,0xc
c0017a92:	6a 01                	push   0x1
c0017a94:	6a 01                	push   0x1
c0017a96:	50                   	push   eax
c0017a97:	52                   	push   edx
c0017a98:	53                   	push   ebx
c0017a99:	e8 cc ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a9e:	83 c4 20             	add    esp,0x20
c0017aa1:	09 f0                	or     eax,esi
c0017aa3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aab:	c1 e0 03             	shl    eax,0x3
c0017aae:	05 60 0a 03 c0       	add    eax,0xc0030a60
c0017ab3:	83 ec 04             	sub    esp,0x4
c0017ab6:	6a 04                	push   0x4
c0017ab8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017abc:	50                   	push   eax
c0017abd:	e8 82 8c fe ff       	call   c0000744 <memcpy>
c0017ac2:	83 c4 10             	add    esp,0x10
c0017ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ad4:	05 00 10 00 00       	add    eax,0x1000
c0017ad9:	c1 e8 0c             	shr    eax,0xc
c0017adc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aeb:	25 ff 0f 00 00       	and    eax,0xfff
c0017af0:	89 c6                	mov    esi,eax
c0017af2:	e8 43 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017af7:	89 c3                	mov    ebx,eax
c0017af9:	83 ec 0c             	sub    esp,0xc
c0017afc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b00:	e8 9a a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b0c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b12:	83 ec 0c             	sub    esp,0xc
c0017b15:	6a 01                	push   0x1
c0017b17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b1b:	50                   	push   eax
c0017b1c:	52                   	push   edx
c0017b1d:	53                   	push   ebx
c0017b1e:	e8 47 ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b23:	83 c4 20             	add    esp,0x20
c0017b26:	09 f0                	or     eax,esi
c0017b28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b2f:	83 ec 0c             	sub    esp,0xc
c0017b32:	50                   	push   eax
c0017b33:	e8 d7 a4 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0017b38:	83 c4 10             	add    esp,0x10
c0017b3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b43:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017b4a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b4e:	e9 ed fe ff ff       	jmp    c0017a40 <loadACPITables(unsigned char*)+0x10d>
c0017b53:	90                   	nop
c0017b54:	83 c4 44             	add    esp,0x44
c0017b57:	5b                   	pop    ebx
c0017b58:	5e                   	pop    esi
c0017b59:	c3                   	ret    

c0017b5a <findRSDT(unsigned char*)>:
c0017b5a:	56                   	push   esi
c0017b5b:	53                   	push   ebx
c0017b5c:	83 ec 44             	sub    esp,0x44
c0017b5f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017b64:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b6a:	83 e0 04             	and    eax,0x4
c0017b6d:	84 c0                	test   al,al
c0017b6f:	75 0a                	jne    c0017b7b <findRSDT(unsigned char*)+0x21>
c0017b71:	b8 00 00 00 00       	mov    eax,0x0
c0017b76:	e9 f7 00 00 00       	jmp    c0017c72 <findRSDT(unsigned char*)+0x118>
c0017b7b:	83 ec 04             	sub    esp,0x4
c0017b7e:	6a 24                	push   0x24
c0017b80:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b88:	50                   	push   eax
c0017b89:	e8 b6 8b fe ff       	call   c0000744 <memcpy>
c0017b8e:	83 c4 10             	add    esp,0x10
c0017b91:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b95:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b99:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017ba1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ba5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ba9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bb9:	25 ff 0f 00 00       	and    eax,0xfff
c0017bbe:	89 c6                	mov    esi,eax
c0017bc0:	e8 75 a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017bc5:	89 c3                	mov    ebx,eax
c0017bc7:	83 ec 0c             	sub    esp,0xc
c0017bca:	6a 02                	push   0x2
c0017bcc:	e8 ce 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017bd8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bde:	83 ec 0c             	sub    esp,0xc
c0017be1:	6a 01                	push   0x1
c0017be3:	6a 02                	push   0x2
c0017be5:	50                   	push   eax
c0017be6:	52                   	push   edx
c0017be7:	53                   	push   ebx
c0017be8:	e8 7d aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bed:	83 c4 20             	add    esp,0x20
c0017bf0:	09 f0                	or     eax,esi
c0017bf2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bfa:	25 ff 0f 00 00       	and    eax,0xfff
c0017bff:	89 c6                	mov    esi,eax
c0017c01:	e8 34 a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017c06:	89 c3                	mov    ebx,eax
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	6a 02                	push   0x2
c0017c0d:	e8 8d 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c19:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	6a 01                	push   0x1
c0017c24:	6a 02                	push   0x2
c0017c26:	50                   	push   eax
c0017c27:	52                   	push   edx
c0017c28:	53                   	push   ebx
c0017c29:	e8 3c aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c2e:	83 c4 20             	add    esp,0x20
c0017c31:	09 f0                	or     eax,esi
c0017c33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c37:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c3c:	75 11                	jne    c0017c4f <findRSDT(unsigned char*)+0xf5>
c0017c3e:	c6 05 60 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c60,0x0
c0017c45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c49:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c4d:	eb 1f                	jmp    c0017c6e <findRSDT(unsigned char*)+0x114>
c0017c4f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c54:	75 11                	jne    c0017c67 <findRSDT(unsigned char*)+0x10d>
c0017c56:	c6 05 60 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c60,0x1
c0017c5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c61:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c65:	eb 07                	jmp    c0017c6e <findRSDT(unsigned char*)+0x114>
c0017c67:	b8 00 00 00 00       	mov    eax,0x0
c0017c6c:	eb 04                	jmp    c0017c72 <findRSDT(unsigned char*)+0x118>
c0017c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c72:	83 c4 44             	add    esp,0x44
c0017c75:	5b                   	pop    ebx
c0017c76:	5e                   	pop    esi
c0017c77:	c3                   	ret    

c0017c78 <findDataTable(unsigned char*, char*)>:
c0017c78:	83 ec 1c             	sub    esp,0x1c
c0017c7b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017c80:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c86:	83 e0 04             	and    eax,0x4
c0017c89:	84 c0                	test   al,al
c0017c8b:	75 07                	jne    c0017c94 <findDataTable(unsigned char*, char*)+0x1c>
c0017c8d:	b8 00 00 00 00       	mov    eax,0x0
c0017c92:	eb 7c                	jmp    c0017d10 <findDataTable(unsigned char*, char*)+0x98>
c0017c94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c9c:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017ca1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ca5:	7d 3a                	jge    c0017ce1 <findDataTable(unsigned char*, char*)+0x69>
c0017ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cab:	c1 e0 03             	shl    eax,0x3
c0017cae:	05 60 0a 03 c0       	add    eax,0xc0030a60
c0017cb3:	83 ec 04             	sub    esp,0x4
c0017cb6:	6a 04                	push   0x4
c0017cb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cbc:	50                   	push   eax
c0017cbd:	e8 7e 89 fe ff       	call   c0000640 <memcmp>
c0017cc2:	83 c4 10             	add    esp,0x10
c0017cc5:	85 c0                	test   eax,eax
c0017cc7:	0f 94 c0             	sete   al
c0017cca:	84 c0                	test   al,al
c0017ccc:	74 0d                	je     c0017cdb <findDataTable(unsigned char*, char*)+0x63>
c0017cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cd2:	8b 04 c5 64 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf59c]
c0017cd9:	eb 35                	jmp    c0017d10 <findDataTable(unsigned char*, char*)+0x98>
c0017cdb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017cdf:	eb bb                	jmp    c0017c9c <findDataTable(unsigned char*, char*)+0x24>
c0017ce1:	a0 60 0c 03 c0       	mov    al,ds:0xc0030c60
c0017ce6:	84 c0                	test   al,al
c0017ce8:	74 07                	je     c0017cf1 <findDataTable(unsigned char*, char*)+0x79>
c0017cea:	b8 58 00 00 00       	mov    eax,0x58
c0017cef:	eb 05                	jmp    c0017cf6 <findDataTable(unsigned char*, char*)+0x7e>
c0017cf1:	b8 52 00 00 00       	mov    eax,0x52
c0017cf6:	83 ec 04             	sub    esp,0x4
c0017cf9:	50                   	push   eax
c0017cfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cfe:	68 d4 b4 02 c0       	push   0xc002b4d4
c0017d03:	e8 f2 b1 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0017d08:	83 c4 10             	add    esp,0x10
c0017d0b:	b8 00 00 00 00       	mov    eax,0x0
c0017d10:	83 c4 1c             	add    esp,0x1c
c0017d13:	c3                   	ret    

c0017d14 <scanMADT()>:
c0017d14:	53                   	push   ebx
c0017d15:	83 ec 38             	sub    esp,0x38
c0017d18:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d23:	83 e0 04             	and    eax,0x4
c0017d26:	84 c0                	test   al,al
c0017d28:	0f 84 63 04 00 00    	je     c0018191 <scanMADT()+0x47d>
c0017d2e:	e8 76 fb ff ff       	call   c00178a9 <findRSDP()>
c0017d33:	a3 6c 0c 03 c0       	mov    ds:0xc0030c6c,eax
c0017d38:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017d3d:	85 c0                	test   eax,eax
c0017d3f:	75 19                	jne    c0017d5a <scanMADT()+0x46>
c0017d41:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d46:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d4c:	83 e2 fb             	and    edx,0xfffffffb
c0017d4f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d55:	e9 3b 04 00 00       	jmp    c0018195 <scanMADT()+0x481>
c0017d5a:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	50                   	push   eax
c0017d63:	e8 f2 fd ff ff       	call   c0017b5a <findRSDT(unsigned char*)>
c0017d68:	83 c4 10             	add    esp,0x10
c0017d6b:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0017d70:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d75:	85 c0                	test   eax,eax
c0017d77:	75 19                	jne    c0017d92 <scanMADT()+0x7e>
c0017d79:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d7e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d84:	83 e2 fb             	and    edx,0xfffffffb
c0017d87:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d8d:	e9 03 04 00 00       	jmp    c0018195 <scanMADT()+0x481>
c0017d92:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d97:	83 ec 0c             	sub    esp,0xc
c0017d9a:	50                   	push   eax
c0017d9b:	e8 93 fb ff ff       	call   c0017933 <loadACPITables(unsigned char*)>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017da8:	83 ec 08             	sub    esp,0x8
c0017dab:	68 a2 b3 02 c0       	push   0xc002b3a2
c0017db0:	50                   	push   eax
c0017db1:	e8 c2 fe ff ff       	call   c0017c78 <findDataTable(unsigned char*, char*)>
c0017db6:	83 c4 10             	add    esp,0x10
c0017db9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017dbd:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017dc2:	75 19                	jne    c0017ddd <scanMADT()+0xc9>
c0017dc4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017dc9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dcf:	83 e2 fe             	and    edx,0xfffffffe
c0017dd2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dd8:	e9 b8 03 00 00       	jmp    c0018195 <scanMADT()+0x481>
c0017ddd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017de5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017de9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017dec:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017df0:	0f 87 9f 03 00 00    	ja     c0018195 <scanMADT()+0x481>
c0017df6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017dfe:	0f 87 91 03 00 00    	ja     c0018195 <scanMADT()+0x481>
c0017e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e10:	8d 50 01             	lea    edx,[eax+0x1]
c0017e13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e1b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e1f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e27:	8d 50 01             	lea    edx,[eax+0x1]
c0017e2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e32:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e36:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e3a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e3f:	0f 86 4f 03 00 00    	jbe    c0018194 <scanMADT()+0x480>
c0017e45:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e4a:	75 57                	jne    c0017ea3 <scanMADT()+0x18f>
c0017e4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e50:	8d 50 01             	lea    edx,[eax+0x1]
c0017e53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e57:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017e5d:	0f b6 d2             	movzx  edx,dl
c0017e60:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e64:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e68:	88 82 a0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf160],al
c0017e6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e72:	8d 50 01             	lea    edx,[eax+0x1]
c0017e75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e79:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017e7f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e82:	88 0d 60 0e 03 c0    	mov    BYTE PTR ds:0xc0030e60,cl
c0017e88:	0f b6 d2             	movzx  edx,dl
c0017e8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e8f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e93:	88 82 80 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf180],al
c0017e99:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e9e:	e9 da 02 00 00       	jmp    c001817d <scanMADT()+0x469>
c0017ea3:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ea8:	0f 85 14 01 00 00    	jne    c0017fc2 <scanMADT()+0x2ae>
c0017eae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb2:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb9:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017ebf:	0f b6 d2             	movzx  edx,dl
c0017ec2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ec6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eca:	88 82 40 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2c0],al
c0017ed0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ed4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017edc:	01 d0                	add    eax,edx
c0017ede:	83 c0 2c             	add    eax,0x2c
c0017ee1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ee3:	0f b6 d0             	movzx  edx,al
c0017ee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eea:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ef5:	0f b6 c0             	movzx  eax,al
c0017ef8:	c1 e0 08             	shl    eax,0x8
c0017efb:	89 d1                	mov    ecx,edx
c0017efd:	09 c1                	or     ecx,eax
c0017eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f03:	8d 50 02             	lea    edx,[eax+0x2]
c0017f06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f0e:	0f b6 c0             	movzx  eax,al
c0017f11:	c1 e0 10             	shl    eax,0x10
c0017f14:	09 c1                	or     ecx,eax
c0017f16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f1a:	8d 50 03             	lea    edx,[eax+0x3]
c0017f1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f21:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f25:	0f b6 c0             	movzx  eax,al
c0017f28:	c1 e0 18             	shl    eax,0x18
c0017f2b:	09 c1                	or     ecx,eax
c0017f2d:	89 ca                	mov    edx,ecx
c0017f2f:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017f34:	0f b6 c0             	movzx  eax,al
c0017f37:	89 14 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],edx
c0017f3e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4b:	01 d0                	add    eax,edx
c0017f4d:	83 c0 2c             	add    eax,0x2c
c0017f50:	8a 00                	mov    al,BYTE PTR [eax]
c0017f52:	0f b6 d0             	movzx  edx,al
c0017f55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f59:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f60:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f64:	0f b6 c0             	movzx  eax,al
c0017f67:	c1 e0 08             	shl    eax,0x8
c0017f6a:	89 d1                	mov    ecx,edx
c0017f6c:	09 c1                	or     ecx,eax
c0017f6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f72:	8d 50 02             	lea    edx,[eax+0x2]
c0017f75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f7d:	0f b6 c0             	movzx  eax,al
c0017f80:	c1 e0 10             	shl    eax,0x10
c0017f83:	09 c1                	or     ecx,eax
c0017f85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f89:	8d 50 03             	lea    edx,[eax+0x3]
c0017f8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f90:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f94:	0f b6 c0             	movzx  eax,al
c0017f97:	c1 e0 18             	shl    eax,0x18
c0017f9a:	09 c1                	or     ecx,eax
c0017f9c:	89 ca                	mov    edx,ecx
c0017f9e:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017fa3:	0f b6 c0             	movzx  eax,al
c0017fa6:	89 14 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],edx
c0017fad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fb2:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017fb7:	40                   	inc    eax
c0017fb8:	a2 20 0d 03 c0       	mov    ds:0xc0030d20,al
c0017fbd:	e9 bb 01 00 00       	jmp    c001817d <scanMADT()+0x469>
c0017fc2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017fc7:	0f 85 e9 00 00 00    	jne    c00180b6 <scanMADT()+0x3a2>
c0017fcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd1:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fdc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fe0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fe4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe8:	8d 50 01             	lea    edx,[eax+0x1]
c0017feb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ff3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ff7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ffb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018003:	01 d0                	add    eax,edx
c0018005:	83 c0 2c             	add    eax,0x2c
c0018008:	8a 00                	mov    al,BYTE PTR [eax]
c001800a:	0f b6 d0             	movzx  edx,al
c001800d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018011:	8d 48 01             	lea    ecx,[eax+0x1]
c0018014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018018:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001801c:	0f b6 c0             	movzx  eax,al
c001801f:	c1 e0 08             	shl    eax,0x8
c0018022:	89 d1                	mov    ecx,edx
c0018024:	09 c1                	or     ecx,eax
c0018026:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802a:	8d 50 02             	lea    edx,[eax+0x2]
c001802d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018031:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018035:	0f b6 c0             	movzx  eax,al
c0018038:	c1 e0 10             	shl    eax,0x10
c001803b:	09 c1                	or     ecx,eax
c001803d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018041:	8d 50 03             	lea    edx,[eax+0x3]
c0018044:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018048:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001804c:	0f b6 c0             	movzx  eax,al
c001804f:	c1 e0 18             	shl    eax,0x18
c0018052:	09 c8                	or     eax,ecx
c0018054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018058:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001805d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018061:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018065:	01 d0                	add    eax,edx
c0018067:	83 c0 2c             	add    eax,0x2c
c001806a:	8a 00                	mov    al,BYTE PTR [eax]
c001806c:	0f b6 c0             	movzx  eax,al
c001806f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018073:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018076:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001807a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001807e:	0f b6 d2             	movzx  edx,dl
c0018081:	c1 e2 08             	shl    edx,0x8
c0018084:	09 d0                	or     eax,edx
c0018086:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001808b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018090:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018095:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018099:	88 90 e0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a20],dl
c001809f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180a4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180a9:	66 89 84 12 00 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf300],ax
c00180b1:	e9 c7 00 00 00       	jmp    c001817d <scanMADT()+0x469>
c00180b6:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180bb:	0f 85 b0 00 00 00    	jne    c0018171 <scanMADT()+0x45d>
c00180c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c5:	8d 50 01             	lea    edx,[eax+0x1]
c00180c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180d4:	0f b6 c0             	movzx  eax,al
c00180d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e3:	01 d0                	add    eax,edx
c00180e5:	83 c0 2c             	add    eax,0x2c
c00180e8:	8a 00                	mov    al,BYTE PTR [eax]
c00180ea:	0f b6 d0             	movzx  edx,al
c00180ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00180f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180fc:	0f b6 c0             	movzx  eax,al
c00180ff:	c1 e0 08             	shl    eax,0x8
c0018102:	09 d0                	or     eax,edx
c0018104:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018108:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001810d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018111:	8d 50 01             	lea    edx,[eax+0x1]
c0018114:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018118:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018120:	0f b6 c0             	movzx  eax,al
c0018123:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812b:	c1 e0 08             	shl    eax,0x8
c001812e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018132:	89 c1                	mov    ecx,eax
c0018134:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018138:	c1 e0 18             	shl    eax,0x18
c001813b:	89 c3                	mov    ebx,eax
c001813d:	a1 70 0c 03 c0       	mov    eax,ds:0xc0030c70
c0018142:	8d 50 01             	lea    edx,[eax+0x1]
c0018145:	89 15 70 0c 03 c0    	mov    DWORD PTR ds:0xc0030c70,edx
c001814b:	09 d9                	or     ecx,ebx
c001814d:	89 ca                	mov    edx,ecx
c001814f:	89 14 85 80 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf380],edx
c0018156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001815a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001815e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018162:	68 04 b5 02 c0       	push   0xc002b504
c0018167:	e8 8e ad ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001816c:	83 c4 10             	add    esp,0x10
c001816f:	eb 0c                	jmp    c001817d <scanMADT()+0x469>
c0018171:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018176:	75 05                	jne    c001817d <scanMADT()+0x469>
c0018178:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001817d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018182:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018186:	01 d0                	add    eax,edx
c0018188:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001818c:	e9 54 fc ff ff       	jmp    c0017de5 <scanMADT()+0xd1>
c0018191:	90                   	nop
c0018192:	eb 01                	jmp    c0018195 <scanMADT()+0x481>
c0018194:	90                   	nop
c0018195:	83 c4 38             	add    esp,0x38
c0018198:	5b                   	pop    ebx
c0018199:	c3                   	ret    

c001819a <ACPI::ACPI()>:
c001819a:	83 ec 0c             	sub    esp,0xc
c001819d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a1:	83 ec 08             	sub    esp,0x8
c00181a4:	68 a7 b3 02 c0       	push   0xc002b3a7
c00181a9:	50                   	push   eax
c00181aa:	e8 61 c3 ff ff       	call   c0014510 <Device::Device(char const*)>
c00181af:	83 c4 10             	add    esp,0x10
c00181b2:	ba 78 b5 02 c0       	mov    edx,0xc002b578
c00181b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bb:	89 10                	mov    DWORD PTR [eax],edx
c00181bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181da:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e8:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f3:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181fa:	e8 15 fb ff ff       	call   c0017d14 <scanMADT()>
c00181ff:	90                   	nop
c0018200:	83 c4 0c             	add    esp,0xc
c0018203:	c3                   	ret    

c0018204 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018204:	83 ec 2c             	sub    esp,0x2c
c0018207:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001820b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001820f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018213:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018217:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001821c:	88 d0                	mov    al,dl
c001821e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018222:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018227:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001822f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018233:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018239:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001823d:	0f 8d 97 00 00 00    	jge    c00182da <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018243:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018247:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001824b:	83 c2 2a             	add    edx,0x2a
c001824e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018252:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018257:	75 78                	jne    c00182d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001825d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018261:	83 c2 2a             	add    edx,0x2a
c0018264:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018268:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001826c:	75 63                	jne    c00182d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001826e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018273:	74 3a                	je     c00182af <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018275:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018279:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001827d:	83 c2 2a             	add    edx,0x2a
c0018280:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001828b:	39 c2                	cmp    edx,eax
c001828d:	74 10                	je     c001829f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	68 40 b5 02 c0       	push   0xc002b540
c0018297:	e8 0f 23 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	83 ec 0c             	sub    esp,0xc
c00182a2:	68 ac b3 02 c0       	push   0xc002b3ac
c00182a7:	e8 ff 22 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00182ac:	83 c4 10             	add    esp,0x10
c00182af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182bb:	83 c2 2a             	add    edx,0x2a
c00182be:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00182c4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182c7:	89 01                	mov    DWORD PTR [ecx],eax
c00182c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182cc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182d1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182d5:	e9 55 ff ff ff       	jmp    c001822f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182da:	90                   	nop
c00182db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182df:	83 c4 2c             	add    esp,0x2c
c00182e2:	c2 04 00             	ret    0x4
c00182e5:	90                   	nop

c00182e6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182e6:	83 ec 1c             	sub    esp,0x1c
c00182e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182ed:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182fa:	88 c8                	mov    al,cl
c00182fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018300:	88 d0                	mov    al,dl
c0018302:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001830a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018310:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018314:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018317:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001831b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001831f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018323:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018329:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001832d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018334:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018343:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018347:	8d 48 01             	lea    ecx,[eax+0x1]
c001834a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834e:	83 c2 2a             	add    edx,0x2a
c0018351:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018359:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001835f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018363:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018366:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001836a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001836e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018372:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018378:	8d 50 01             	lea    edx,[eax+0x1]
c001837b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001837f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018389:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001838f:	3d 00 02 00 00       	cmp    eax,0x200
c0018394:	75 10                	jne    c00183a6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018396:	83 ec 0c             	sub    esp,0xc
c0018399:	68 bb b3 02 c0       	push   0xc002b3bb
c001839e:	e8 08 22 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	90                   	nop
c00183a7:	83 c4 1c             	add    esp,0x1c
c00183aa:	c3                   	ret    
c00183ab:	90                   	nop

c00183ac <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183ac:	b8 00 00 00 00       	mov    eax,0x0
c00183b1:	c3                   	ret    

c00183b2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183b2:	83 ec 1c             	sub    esp,0x1c
c00183b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183b9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183bc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183c0:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00183c5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183ca:	83 ec 08             	sub    esp,0x8
c00183cd:	52                   	push   edx
c00183ce:	50                   	push   eax
c00183cf:	e8 84 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183db:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00183e0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183e5:	83 ec 04             	sub    esp,0x4
c00183e8:	6a 01                	push   0x1
c00183ea:	52                   	push   edx
c00183eb:	50                   	push   eax
c00183ec:	e8 7d 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183f1:	83 c4 10             	add    esp,0x10
c00183f4:	90                   	nop
c00183f5:	83 c4 1c             	add    esp,0x1c
c00183f8:	c3                   	ret    
c00183f9:	90                   	nop

c00183fa <ACPI::open(int, int, void*)>:
c00183fa:	53                   	push   ebx
c00183fb:	83 ec 28             	sub    esp,0x28
c00183fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018402:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018414:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018419:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001841f:	83 e0 04             	and    eax,0x4
c0018422:	84 c0                	test   al,al
c0018424:	74 47                	je     c001846d <ACPI::open(int, int, void*)+0x73>
c0018426:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001842b:	83 ec 08             	sub    esp,0x8
c001842e:	68 d8 b3 02 c0       	push   0xc002b3d8
c0018433:	50                   	push   eax
c0018434:	e8 3f f8 ff ff       	call   c0017c78 <findDataTable(unsigned char*, char*)>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018440:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018445:	74 26                	je     c001846d <ACPI::open(int, int, void*)+0x73>
c0018447:	83 ec 0c             	sub    esp,0xc
c001844a:	68 dd b3 02 c0       	push   0xc002b3dd
c001844f:	e8 a6 aa ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018462:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018466:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001846d:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018475:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018479:	8a 00                	mov    al,BYTE PTR [eax]
c001847b:	3c 01                	cmp    al,0x1
c001847d:	75 28                	jne    c00184a7 <ACPI::open(int, int, void*)+0xad>
c001847f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018483:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001848a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001848e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018495:	83 ec 0c             	sub    esp,0xc
c0018498:	68 ee b3 02 c0       	push   0xc002b3ee
c001849d:	e8 58 aa ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00184a2:	83 c4 10             	add    esp,0x10
c00184a5:	eb 25                	jmp    c00184cc <ACPI::open(int, int, void*)+0xd2>
c00184a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184ab:	8a 00                	mov    al,BYTE PTR [eax]
c00184ad:	3c 02                	cmp    al,0x2
c00184af:	75 1b                	jne    c00184cc <ACPI::open(int, int, void*)+0xd2>
c00184b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184bc:	83 ec 0c             	sub    esp,0xc
c00184bf:	68 f6 b3 02 c0       	push   0xc002b3f6
c00184c4:	e8 31 aa ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184d6:	83 f0 01             	xor    eax,0x1
c00184d9:	84 c0                	test   al,al
c00184db:	74 6a                	je     c0018547 <ACPI::open(int, int, void*)+0x14d>
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	68 fe b3 02 c0       	push   0xc002b3fe
c00184e5:	e8 10 aa ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	e8 5e 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184f6:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184fb:	75 28                	jne    c0018525 <ACPI::open(int, int, void*)+0x12b>
c00184fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018501:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001850c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018513:	83 ec 0c             	sub    esp,0xc
c0018516:	68 0c b4 02 c0       	push   0xc002b40c
c001851b:	e8 da a9 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018520:	83 c4 10             	add    esp,0x10
c0018523:	eb 22                	jmp    c0018547 <ACPI::open(int, int, void*)+0x14d>
c0018525:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001852a:	75 1b                	jne    c0018547 <ACPI::open(int, int, void*)+0x14d>
c001852c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018530:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018537:	83 ec 0c             	sub    esp,0xc
c001853a:	68 16 b4 02 c0       	push   0xc002b416
c001853f:	e8 b6 a9 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018544:	83 c4 10             	add    esp,0x10
c0018547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001854b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018551:	84 c0                	test   al,al
c0018553:	74 13                	je     c0018568 <ACPI::open(int, int, void*)+0x16e>
c0018555:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018559:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001855f:	83 f0 01             	xor    eax,0x1
c0018562:	0f b6 c0             	movzx  eax,al
c0018565:	40                   	inc    eax
c0018566:	eb 05                	jmp    c001856d <ACPI::open(int, int, void*)+0x173>
c0018568:	b8 00 00 00 00       	mov    eax,0x0
c001856d:	83 ec 08             	sub    esp,0x8
c0018570:	50                   	push   eax
c0018571:	68 20 b4 02 c0       	push   0xc002b420
c0018576:	e8 7f a9 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001857b:	83 c4 10             	add    esp,0x10
c001857e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018582:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018588:	84 c0                	test   al,al
c001858a:	74 67                	je     c00185f3 <ACPI::open(int, int, void*)+0x1f9>
c001858c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001859b:	e8 a0 72 ff ff       	call   c000f840 <malloc>
c00185a0:	83 c4 10             	add    esp,0x10
c00185a3:	89 c3                	mov    ebx,eax
c00185a5:	83 ec 0c             	sub    esp,0xc
c00185a8:	53                   	push   ebx
c00185a9:	e8 dc a2 00 00       	call   c002288a <PCI::PCI()>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185b9:	83 ec 08             	sub    esp,0x8
c00185bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185c0:	50                   	push   eax
c00185c1:	e8 5a bd ff ff       	call   c0014320 <Device::addChild(Device*)>
c00185c6:	83 c4 10             	add    esp,0x10
c00185c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00185cf:	83 c0 08             	add    eax,0x8
c00185d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00185d4:	6a 00                	push   0x0
c00185d6:	6a 00                	push   0x0
c00185d8:	6a 00                	push   0x0
c00185da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185de:	ff d0                	call   eax
c00185e0:	83 c4 10             	add    esp,0x10
c00185e3:	83 ec 0c             	sub    esp,0xc
c00185e6:	68 29 b4 02 c0       	push   0xc002b429
c00185eb:	e8 0a a9 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	83 ec 0c             	sub    esp,0xc
c00185f6:	68 34 b4 02 c0       	push   0xc002b434
c00185fb:	e8 81 46 00 00       	call   c001cc81 <Thr::loadKernelSymbolTable(char const*)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0018609:	83 ec 08             	sub    esp,0x8
c001860c:	6a 01                	push   0x1
c001860e:	68 52 b4 02 c0       	push   0xc002b452
c0018613:	e8 c6 50 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	83 ec 08             	sub    esp,0x8
c001861e:	53                   	push   ebx
c001861f:	50                   	push   eax
c0018620:	e8 ed 52 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c0018625:	83 c4 10             	add    esp,0x10
c0018628:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c001862e:	83 ec 08             	sub    esp,0x8
c0018631:	6a 01                	push   0x1
c0018633:	68 6f b4 02 c0       	push   0xc002b46f
c0018638:	e8 a1 50 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c001863d:	83 c4 10             	add    esp,0x10
c0018640:	83 ec 08             	sub    esp,0x8
c0018643:	53                   	push   ebx
c0018644:	50                   	push   eax
c0018645:	e8 c8 52 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c001864a:	83 c4 10             	add    esp,0x10
c001864d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018652:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018658:	83 e0 04             	and    eax,0x4
c001865b:	84 c0                	test   al,al
c001865d:	0f 84 d2 00 00 00    	je     c0018735 <ACPI::open(int, int, void*)+0x33b>
c0018663:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001866a:	83 ec 0c             	sub    esp,0xc
c001866d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018671:	e8 ca 71 ff ff       	call   c000f840 <malloc>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	89 c3                	mov    ebx,eax
c001867b:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0018680:	83 ec 04             	sub    esp,0x4
c0018683:	50                   	push   eax
c0018684:	68 8c b4 02 c0       	push   0xc002b48c
c0018689:	53                   	push   ebx
c001868a:	e8 c3 ad ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001868f:	83 c4 10             	add    esp,0x10
c0018692:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018696:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001869b:	74 17                	je     c00186b4 <ACPI::open(int, int, void*)+0x2ba>
c001869d:	83 ec 0c             	sub    esp,0xc
c00186a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186a4:	e8 7b b0 ff ff       	call   c0013724 <File::exists()>
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	84 c0                	test   al,al
c00186ae:	74 04                	je     c00186b4 <ACPI::open(int, int, void*)+0x2ba>
c00186b0:	b0 01                	mov    al,0x1
c00186b2:	eb 02                	jmp    c00186b6 <ACPI::open(int, int, void*)+0x2bc>
c00186b4:	b0 00                	mov    al,0x0
c00186b6:	84 c0                	test   al,al
c00186b8:	74 22                	je     c00186dc <ACPI::open(int, int, void*)+0x2e2>
c00186ba:	83 ec 08             	sub    esp,0x8
c00186bd:	6a 01                	push   0x1
c00186bf:	68 8c b4 02 c0       	push   0xc002b48c
c00186c4:	e8 15 50 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c00186c9:	83 c4 10             	add    esp,0x10
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186d3:	50                   	push   eax
c00186d4:	e8 39 52 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186e1:	74 1e                	je     c0018701 <ACPI::open(int, int, void*)+0x307>
c00186e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186e8:	74 17                	je     c0018701 <ACPI::open(int, int, void*)+0x307>
c00186ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f0:	83 c0 08             	add    eax,0x8
c00186f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f5:	83 ec 0c             	sub    esp,0xc
c00186f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186fc:	ff d0                	call   eax
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0018706:	83 ec 08             	sub    esp,0x8
c0018709:	68 a9 b4 02 c0       	push   0xc002b4a9
c001870e:	50                   	push   eax
c001870f:	e8 64 f5 ff ff       	call   c0017c78 <findDataTable(unsigned char*, char*)>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001871b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018720:	74 13                	je     c0018735 <ACPI::open(int, int, void*)+0x33b>
c0018722:	83 ec 08             	sub    esp,0x8
c0018725:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018729:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001872d:	e8 80 fc ff ff       	call   c00183b2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018732:	83 c4 10             	add    esp,0x10
c0018735:	b8 00 00 00 00       	mov    eax,0x0
c001873a:	83 c4 28             	add    esp,0x28
c001873d:	5b                   	pop    ebx
c001873e:	c3                   	ret    
c001873f:	90                   	nop

c0018740 <ACPI::sleep()>:
c0018740:	83 ec 0c             	sub    esp,0xc
c0018743:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c0018748:	85 c0                	test   eax,eax
c001874a:	74 07                	je     c0018753 <ACPI::sleep()+0x13>
c001874c:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c0018751:	ff d0                	call   eax
c0018753:	90                   	nop
c0018754:	83 c4 0c             	add    esp,0xc
c0018757:	c3                   	ret    

c0018758 <CPU::close(int, int, void*)>:
c0018758:	31 c0                	xor    eax,eax
c001875a:	c3                   	ret    
c001875b:	90                   	nop

c001875c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001875c:	55                   	push   ebp
c001875d:	57                   	push   edi
c001875e:	56                   	push   esi
c001875f:	53                   	push   ebx
c0018760:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018764:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018768:	89 ce                	mov    esi,ecx
c001876a:	89 d5                	mov    ebp,edx
c001876c:	80 f9 04             	cmp    cl,0x4
c001876f:	75 28                	jne    c0018799 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018771:	8d 42 f9             	lea    eax,[edx-0x7]
c0018774:	3c 03                	cmp    al,0x3
c0018776:	0f 86 63 01 00 00    	jbe    c00188df <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001877c:	80 fa 03             	cmp    dl,0x3
c001877f:	0f 84 5a 01 00 00    	je     c00188df <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018785:	8d 7a f2             	lea    edi,[edx-0xe]
c0018788:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c001878d:	89 fb                	mov    ebx,edi
c001878f:	80 fb 01             	cmp    bl,0x1
c0018792:	77 4e                	ja     c00187e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018794:	e9 52 01 00 00       	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018799:	80 f9 05             	cmp    cl,0x5
c001879c:	75 4d                	jne    c00187eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001879e:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00187a3:	80 fa 03             	cmp    dl,0x3
c00187a6:	0f 86 3f 01 00 00    	jbe    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ac:	8d 7a fa             	lea    edi,[edx-0x6]
c00187af:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00187b4:	89 fb                	mov    ebx,edi
c00187b6:	80 fb 01             	cmp    bl,0x1
c00187b9:	0f 86 2c 01 00 00    	jbe    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187bf:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00187c4:	80 fa 08             	cmp    dl,0x8
c00187c7:	0f 84 1e 01 00 00    	je     c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cd:	89 d7                	mov    edi,edx
c00187cf:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00187d4:	83 e7 fb             	and    edi,0xfffffffb
c00187d7:	89 fb                	mov    ebx,edi
c00187d9:	80 fb 09             	cmp    bl,0x9
c00187dc:	0f 84 09 01 00 00    	je     c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e2:	31 c0                	xor    eax,eax
c00187e4:	89 eb                	mov    ebx,ebp
c00187e6:	0f b6 fb             	movzx  edi,bl
c00187e9:	eb 30                	jmp    c001881b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187eb:	31 c0                	xor    eax,eax
c00187ed:	80 f9 06             	cmp    cl,0x6
c00187f0:	75 f2                	jne    c00187e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187f2:	80 fa 0a             	cmp    dl,0xa
c00187f5:	77 ed                	ja     c00187e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187f7:	bf de 05 00 00       	mov    edi,0x5de
c00187fc:	0f a3 d7             	bt     edi,edx
c00187ff:	73 e3                	jae    c00187e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018801:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018806:	e9 e0 00 00 00       	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880b:	39 c7                	cmp    edi,eax
c001880d:	0f 84 d3 00 00 00    	je     c00188e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018813:	40                   	inc    eax
c0018814:	3d d0 00 00 00       	cmp    eax,0xd0
c0018819:	74 09                	je     c0018824 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001881b:	89 f3                	mov    ebx,esi
c001881d:	80 fb 0f             	cmp    bl,0xf
c0018820:	75 f1                	jne    c0018813 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018822:	eb e7                	jmp    c001880b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018824:	80 f9 10             	cmp    cl,0x10
c0018827:	75 14                	jne    c001883d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018829:	8d 42 fc             	lea    eax,[edx-0x4]
c001882c:	83 e0 fb             	and    eax,0xfffffffb
c001882f:	3c 02                	cmp    al,0x2
c0018831:	76 34                	jbe    c0018867 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018833:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018838:	80 fa 02             	cmp    dl,0x2
c001883b:	eb 24                	jmp    c0018861 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001883d:	80 f9 11             	cmp    cl,0x11
c0018840:	75 13                	jne    c0018855 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018842:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018847:	80 fa 03             	cmp    dl,0x3
c001884a:	0f 85 9b 00 00 00    	jne    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018850:	e9 91 00 00 00       	jmp    c00188e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018855:	80 f9 12             	cmp    cl,0x12
c0018858:	75 14                	jne    c001886e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001885a:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c001885f:	fe ca                	dec    dl
c0018861:	0f 85 84 00 00 00    	jne    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018867:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001886c:	eb 7d                	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886e:	80 f9 14             	cmp    cl,0x14
c0018871:	75 12                	jne    c0018885 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018873:	4a                   	dec    edx
c0018874:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018879:	80 fa 01             	cmp    dl,0x1
c001887c:	77 6d                	ja     c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887e:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018883:	eb 66                	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018885:	80 f9 15             	cmp    cl,0x15
c0018888:	75 31                	jne    c00188bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001888a:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001888f:	80 fa 01             	cmp    dl,0x1
c0018892:	74 57                	je     c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018894:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018899:	80 fa 13             	cmp    dl,0x13
c001889c:	76 0c                	jbe    c00188aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001889e:	80 fa 30             	cmp    dl,0x30
c00188a1:	75 48                	jne    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a3:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00188a8:	eb 41                	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188aa:	b9 04 00 09 00       	mov    ecx,0x90004
c00188af:	0f a3 d1             	bt     ecx,edx
c00188b2:	73 37                	jae    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b4:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00188b9:	eb 30                	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bb:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c00188c0:	80 f9 16             	cmp    cl,0x16
c00188c3:	75 26                	jne    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c5:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00188ca:	84 d2                	test   dl,dl
c00188cc:	74 1d                	je     c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ce:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c00188d3:	80 fa 30             	cmp    dl,0x30
c00188d6:	75 13                	jne    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d8:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00188dd:	eb 0c                	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188df:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00188e4:	eb 05                	jmp    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e6:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c00188eb:	5b                   	pop    ebx
c00188ec:	5e                   	pop    esi
c00188ed:	5f                   	pop    edi
c00188ee:	5d                   	pop    ebp
c00188ef:	c3                   	ret    

c00188f0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188f8:	80 f9 04             	cmp    cl,0x4
c00188fb:	75 6b                	jne    c0018968 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188fd:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018902:	80 fa 01             	cmp    dl,0x1
c0018905:	0f 86 92 02 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890b:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018910:	80 fa 02             	cmp    dl,0x2
c0018913:	0f 84 84 02 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018919:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c001891e:	80 fa 03             	cmp    dl,0x3
c0018921:	0f 84 76 02 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018927:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c001892c:	80 fa 04             	cmp    dl,0x4
c001892f:	0f 84 68 02 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018935:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c001893a:	80 fa 05             	cmp    dl,0x5
c001893d:	0f 84 5a 02 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018943:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018948:	80 fa 07             	cmp    dl,0x7
c001894b:	0f 84 4c 02 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018951:	83 ea 08             	sub    edx,0x8
c0018954:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018959:	80 fa 01             	cmp    dl,0x1
c001895c:	0f 87 3b 02 00 00    	ja     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018962:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018967:	c3                   	ret    
c0018968:	80 f9 05             	cmp    cl,0x5
c001896b:	75 45                	jne    c00189b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001896d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018970:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018975:	80 f9 02             	cmp    cl,0x2
c0018978:	0f 86 1f 02 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897e:	80 fa 04             	cmp    dl,0x4
c0018981:	0f 84 f3 01 00 00    	je     c0018b7a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018987:	80 fa 07             	cmp    dl,0x7
c001898a:	0f 84 0d 02 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018990:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018995:	80 fa 08             	cmp    dl,0x8
c0018998:	0f 84 ff 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899e:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c00189a3:	80 fa 09             	cmp    dl,0x9
c00189a6:	0f 85 f1 01 00 00    	jne    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ac:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00189b1:	c3                   	ret    
c00189b2:	80 f9 06             	cmp    cl,0x6
c00189b5:	0f 85 85 01 00 00    	jne    c0018b40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189bb:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00189c0:	80 fa 01             	cmp    dl,0x1
c00189c3:	0f 84 d4 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c9:	8d 42 fb             	lea    eax,[edx-0x5]
c00189cc:	3c 01                	cmp    al,0x1
c00189ce:	0f 86 ac 01 00 00    	jbe    c0018b80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189d4:	80 fa 03             	cmp    dl,0x3
c00189d7:	0f 84 a3 01 00 00    	je     c0018b80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189dd:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189e0:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00189e5:	80 f9 01             	cmp    cl,0x1
c00189e8:	0f 86 af 01 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ee:	80 fa 09             	cmp    dl,0x9
c00189f1:	0f 84 8f 01 00 00    	je     c0018b86 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189f7:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189fa:	80 f9 01             	cmp    cl,0x1
c00189fd:	0f 86 9a 01 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a03:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a08:	80 fa 0d             	cmp    dl,0xd
c0018a0b:	0f 84 8c 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a11:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018a16:	80 fa 0e             	cmp    dl,0xe
c0018a19:	0f 84 7e 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1f:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a24:	80 fa 0f             	cmp    dl,0xf
c0018a27:	0f 84 70 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2d:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a32:	80 fa 15             	cmp    dl,0x15
c0018a35:	0f 84 62 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a3e:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a43:	80 f9 01             	cmp    cl,0x1
c0018a46:	0f 86 51 01 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4c:	80 fa 1a             	cmp    dl,0x1a
c0018a4f:	0f 84 37 01 00 00    	je     c0018b8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a55:	80 fa 1c             	cmp    dl,0x1c
c0018a58:	0f 84 34 01 00 00    	je     c0018b92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a5e:	80 fa 1d             	cmp    dl,0x1d
c0018a61:	0f 84 36 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a67:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a6c:	80 fa 25             	cmp    dl,0x25
c0018a6f:	0f 84 28 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a75:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a78:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a7d:	80 f9 01             	cmp    cl,0x1
c0018a80:	0f 86 17 01 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a86:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a8b:	80 fa 2a             	cmp    dl,0x2a
c0018a8e:	0f 84 09 01 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a94:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a99:	80 fa 2c             	cmp    dl,0x2c
c0018a9c:	0f 84 fb 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa2:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018aa7:	80 fa 2d             	cmp    dl,0x2d
c0018aaa:	0f 84 ed 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab0:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018ab5:	80 fa 2e             	cmp    dl,0x2e
c0018ab8:	0f 84 df 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abe:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018ac3:	80 fa 2f             	cmp    dl,0x2f
c0018ac6:	0f 84 d1 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acc:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018acf:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018ad4:	80 f9 01             	cmp    cl,0x1
c0018ad7:	0f 86 c0 00 00 00    	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018add:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018ae2:	80 fa 37             	cmp    dl,0x37
c0018ae5:	0f 84 b2 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aeb:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018af0:	80 fa 3a             	cmp    dl,0x3a
c0018af3:	0f 84 a4 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af9:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018afe:	80 fa 3c             	cmp    dl,0x3c
c0018b01:	0f 84 96 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b07:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018b0c:	80 fa 3d             	cmp    dl,0x3d
c0018b0f:	0f 84 88 00 00 00    	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b15:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018b1a:	80 fa 3e             	cmp    dl,0x3e
c0018b1d:	74 7e                	je     c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b22:	3c 01                	cmp    al,0x1
c0018b24:	76 72                	jbe    c0018b98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b26:	80 fa 3f             	cmp    dl,0x3f
c0018b29:	74 6d                	je     c0018b98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b2b:	80 fa 4a             	cmp    dl,0x4a
c0018b2e:	74 0a                	je     c0018b3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b30:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018b35:	80 fa 4d             	cmp    dl,0x4d
c0018b38:	75 63                	jne    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3a:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b3f:	c3                   	ret    
c0018b40:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018b45:	80 f9 0b             	cmp    cl,0xb
c0018b48:	75 0a                	jne    c0018b54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b4a:	fe ca                	dec    dl
c0018b4c:	75 4f                	jne    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4e:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b53:	c3                   	ret    
c0018b54:	80 f9 0f             	cmp    cl,0xf
c0018b57:	75 44                	jne    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b5e:	80 fa 02             	cmp    dl,0x2
c0018b61:	76 3a                	jbe    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b63:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b66:	3c 01                	cmp    al,0x1
c0018b68:	76 0a                	jbe    c0018b74 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b6a:	b8 8e b8 02 c0       	mov    eax,0xc002b88e
c0018b6f:	80 fa 06             	cmp    dl,0x6
c0018b72:	75 29                	jne    c0018b9d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b74:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b79:	c3                   	ret    
c0018b7a:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018b7f:	c3                   	ret    
c0018b80:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018b85:	c3                   	ret    
c0018b86:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018b8b:	c3                   	ret    
c0018b8c:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018b91:	c3                   	ret    
c0018b92:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018b97:	c3                   	ret    
c0018b98:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b9d:	c3                   	ret    

c0018b9e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b9e:	60                   	pusha  
c0018b9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bab:	9c                   	pushf  
c0018bac:	fa                   	cli    
c0018bad:	0f 09                	wbinvd 
c0018baf:	0f 30                	wrmsr  
c0018bb1:	9d                   	popf   
c0018bb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bb6:	89 02                	mov    DWORD PTR [edx],eax
c0018bb8:	61                   	popa   
c0018bb9:	c3                   	ret    

c0018bba <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bba:	60                   	pusha  
c0018bbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bbf:	9c                   	pushf  
c0018bc0:	fa                   	cli    
c0018bc1:	0f 09                	wbinvd 
c0018bc3:	31 c0                	xor    eax,eax
c0018bc5:	31 d2                	xor    edx,edx
c0018bc7:	0f 32                	rdmsr  
c0018bc9:	9d                   	popf   
c0018bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bce:	89 02                	mov    DWORD PTR [edx],eax
c0018bd0:	61                   	popa   
c0018bd1:	c3                   	ret    

c0018bd2 <CPU::AMD_K6_writeback(int, int, int)>:
c0018bd2:	56                   	push   esi
c0018bd3:	53                   	push   ebx
c0018bd4:	83 ec 10             	sub    esp,0x10
c0018bd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bdb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018be0:	75 5d                	jne    c0018c3f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018be2:	83 f8 08             	cmp    eax,0x8
c0018be5:	75 09                	jne    c0018bf0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018be7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bec:	7e 13                	jle    c0018c01 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bee:	eb 30                	jmp    c0018c20 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bf0:	83 f8 06             	cmp    eax,0x6
c0018bf3:	7c 4a                	jl     c0018c3f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bf5:	83 f8 07             	cmp    eax,0x7
c0018bf8:	7e 07                	jle    c0018c01 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bfa:	83 f8 09             	cmp    eax,0x9
c0018bfd:	74 21                	je     c0018c20 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bff:	eb 3e                	jmp    c0018c3f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c01:	89 e6                	mov    esi,esp
c0018c03:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018c09:	56                   	push   esi
c0018c0a:	c1 eb 15             	shr    ebx,0x15
c0018c0d:	68 82 00 00 c0       	push   0xc0000082
c0018c12:	83 e3 7e             	and    ebx,0x7e
c0018c15:	e8 a0 ff ff ff       	call   c0018bba <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c1a:	56                   	push   esi
c0018c1b:	6a 00                	push   0x0
c0018c1d:	53                   	push   ebx
c0018c1e:	eb 12                	jmp    c0018c32 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c20:	89 e3                	mov    ebx,esp
c0018c22:	53                   	push   ebx
c0018c23:	68 82 00 00 c0       	push   0xc0000082
c0018c28:	e8 8d ff ff ff       	call   c0018bba <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c2d:	53                   	push   ebx
c0018c2e:	6a 00                	push   0x0
c0018c30:	6a 00                	push   0x0
c0018c32:	68 82 00 00 c0       	push   0xc0000082
c0018c37:	e8 62 ff ff ff       	call   c0018b9e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c3c:	83 c4 18             	add    esp,0x18
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	5b                   	pop    ebx
c0018c43:	5e                   	pop    esi
c0018c44:	c3                   	ret    
c0018c45:	90                   	nop

c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c46:	55                   	push   ebp
c0018c47:	57                   	push   edi
c0018c48:	56                   	push   esi
c0018c49:	53                   	push   ebx
c0018c4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c4e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c52:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c56:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c5a:	39 05 a0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a0,eax
c0018c60:	75 23                	jne    c0018c85 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c62:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0018c67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c6b:	89 06                	mov    DWORD PTR [esi],eax
c0018c6d:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0018c72:	89 07                	mov    DWORD PTR [edi],eax
c0018c74:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c0018c79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c7c:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c0018c81:	89 02                	mov    DWORD PTR [edx],eax
c0018c83:	eb 3f                	jmp    c0018cc4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c85:	31 c9                	xor    ecx,ecx
c0018c87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c8b:	0f a2                	cpuid  
c0018c8d:	89 06                	mov    DWORD PTR [esi],eax
c0018c8f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c95:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c98:	89 10                	mov    DWORD PTR [eax],edx
c0018c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c9e:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018ca3:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ca5:	a3 cc 0e 03 c0       	mov    ds:0xc0030ecc,eax
c0018caa:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cac:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0018cb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cb4:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c0018cb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cbf:	a3 c0 0e 03 c0       	mov    ds:0xc0030ec0,eax
c0018cc4:	5b                   	pop    ebx
c0018cc5:	5e                   	pop    esi
c0018cc6:	5f                   	pop    edi
c0018cc7:	5d                   	pop    ebp
c0018cc8:	c3                   	ret    
c0018cc9:	90                   	nop

c0018cca <CPU::cpuidCheckEDX(unsigned int)>:
c0018cca:	83 ec 10             	sub    esp,0x10
c0018ccd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd1:	50                   	push   eax
c0018cd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd6:	50                   	push   eax
c0018cd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cdb:	50                   	push   eax
c0018cdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce0:	50                   	push   eax
c0018ce1:	6a 01                	push   0x1
c0018ce3:	e8 5e ff ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ce8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cec:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cf0:	0f 95 c0             	setne  al
c0018cf3:	83 c4 24             	add    esp,0x24
c0018cf6:	c3                   	ret    
c0018cf7:	90                   	nop

c0018cf8 <CPU::cpuidCheckECX(unsigned int)>:
c0018cf8:	83 ec 10             	sub    esp,0x10
c0018cfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cff:	50                   	push   eax
c0018d00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d04:	50                   	push   eax
c0018d05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d09:	50                   	push   eax
c0018d0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0e:	50                   	push   eax
c0018d0f:	6a 01                	push   0x1
c0018d11:	e8 30 ff ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d1a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d1e:	0f 95 c0             	setne  al
c0018d21:	83 c4 24             	add    esp,0x24
c0018d24:	c3                   	ret    
c0018d25:	90                   	nop

c0018d26 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d26:	83 ec 10             	sub    esp,0x10
c0018d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2d:	50                   	push   eax
c0018d2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d32:	50                   	push   eax
c0018d33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d37:	50                   	push   eax
c0018d38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3c:	50                   	push   eax
c0018d3d:	6a 07                	push   0x7
c0018d3f:	e8 02 ff ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d48:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d4c:	0f 95 c0             	setne  al
c0018d4f:	83 c4 24             	add    esp,0x24
c0018d52:	c3                   	ret    
c0018d53:	90                   	nop

c0018d54 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d54:	83 ec 10             	sub    esp,0x10
c0018d57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5b:	50                   	push   eax
c0018d5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d60:	50                   	push   eax
c0018d61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d65:	50                   	push   eax
c0018d66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6a:	50                   	push   eax
c0018d6b:	6a 07                	push   0x7
c0018d6d:	e8 d4 fe ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d76:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d7a:	0f 95 c0             	setne  al
c0018d7d:	83 c4 24             	add    esp,0x24
c0018d80:	c3                   	ret    
c0018d81:	90                   	nop

c0018d82 <CPU::CPU()>:
c0018d82:	83 ec 0c             	sub    esp,0xc
c0018d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d89:	83 ec 08             	sub    esp,0x8
c0018d8c:	68 8e b8 02 c0       	push   0xc002b88e
c0018d91:	50                   	push   eax
c0018d92:	e8 79 b7 ff ff       	call   c0014510 <Device::Device(char const*)>
c0018d97:	83 c4 10             	add    esp,0x10
c0018d9a:	ba 68 b9 02 c0       	mov    edx,0xc002b968
c0018d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da3:	89 10                	mov    DWORD PTR [eax],edx
c0018da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db7:	05 78 01 00 00       	add    eax,0x178
c0018dbc:	83 ec 0c             	sub    esp,0xc
c0018dbf:	50                   	push   eax
c0018dc0:	e8 93 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018dc5:	83 c4 10             	add    esp,0x10
c0018dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dcc:	05 7c 09 00 00       	add    eax,0x97c
c0018dd1:	83 ec 0c             	sub    esp,0xc
c0018dd4:	50                   	push   eax
c0018dd5:	e8 e0 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018dda:	83 c4 10             	add    esp,0x10
c0018ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de1:	05 7c 11 00 00       	add    eax,0x117c
c0018de6:	83 ec 0c             	sub    esp,0xc
c0018de9:	50                   	push   eax
c0018dea:	e8 e1 86 ff ff       	call   c00114d0 <TSS::TSS()>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e01:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e0b:	90                   	nop
c0018e0c:	83 c4 0c             	add    esp,0xc
c0018e0f:	c3                   	ret    

c0018e10 <CPU::displayFeatures()>:
c0018e10:	53                   	push   ebx
c0018e11:	83 ec 10             	sub    esp,0x10
c0018e14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e18:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e1e:	68 9c b5 02 c0       	push   0xc002b59c
c0018e23:	e8 d2 a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018e28:	59                   	pop    ecx
c0018e29:	58                   	pop    eax
c0018e2a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e30:	50                   	push   eax
c0018e31:	68 ad b5 02 c0       	push   0xc002b5ad
c0018e36:	e8 bf a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018e3b:	58                   	pop    eax
c0018e3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e42:	5a                   	pop    edx
c0018e43:	c1 e8 0e             	shr    eax,0xe
c0018e46:	0f b6 c0             	movzx  eax,al
c0018e49:	50                   	push   eax
c0018e4a:	68 be b5 02 c0       	push   0xc002b5be
c0018e4f:	e8 a6 a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018e54:	59                   	pop    ecx
c0018e55:	58                   	pop    eax
c0018e56:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e5c:	66 c1 e8 06          	shr    ax,0x6
c0018e60:	0f b6 c0             	movzx  eax,al
c0018e63:	50                   	push   eax
c0018e64:	68 cf b5 02 c0       	push   0xc002b5cf
c0018e69:	e8 8c a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018e6e:	c7 04 24 7c ba 02 c0 	mov    DWORD PTR [esp],0xc002ba7c
c0018e75:	e8 80 a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018e7a:	83 c4 10             	add    esp,0x10
c0018e7d:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018e82:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e89:	74 05                	je     c0018e90 <CPU::displayFeatures()+0x80>
c0018e8b:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018e90:	52                   	push   edx
c0018e91:	52                   	push   edx
c0018e92:	50                   	push   eax
c0018e93:	68 e0 b5 02 c0       	push   0xc002b5e0
c0018e98:	e8 5d a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018e9d:	83 c4 10             	add    esp,0x10
c0018ea0:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018ea5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018eac:	78 05                	js     c0018eb3 <CPU::displayFeatures()+0xa3>
c0018eae:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018eb3:	51                   	push   ecx
c0018eb4:	51                   	push   ecx
c0018eb5:	50                   	push   eax
c0018eb6:	68 f7 b5 02 c0       	push   0xc002b5f7
c0018ebb:	e8 3a a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018ec8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ecf:	75 05                	jne    c0018ed6 <CPU::displayFeatures()+0xc6>
c0018ed1:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018ed6:	52                   	push   edx
c0018ed7:	52                   	push   edx
c0018ed8:	50                   	push   eax
c0018ed9:	68 0e b6 02 c0       	push   0xc002b60e
c0018ede:	e8 17 a0 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018eeb:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018ef2:	75 05                	jne    c0018ef9 <CPU::displayFeatures()+0xe9>
c0018ef4:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018ef9:	51                   	push   ecx
c0018efa:	51                   	push   ecx
c0018efb:	50                   	push   eax
c0018efc:	68 25 b6 02 c0       	push   0xc002b625
c0018f01:	e8 f4 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018f06:	83 c4 10             	add    esp,0x10
c0018f09:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018f0e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f15:	75 05                	jne    c0018f1c <CPU::displayFeatures()+0x10c>
c0018f17:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018f1c:	52                   	push   edx
c0018f1d:	52                   	push   edx
c0018f1e:	50                   	push   eax
c0018f1f:	68 3c b6 02 c0       	push   0xc002b63c
c0018f24:	e8 d1 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018f31:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f38:	75 05                	jne    c0018f3f <CPU::displayFeatures()+0x12f>
c0018f3a:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018f3f:	51                   	push   ecx
c0018f40:	51                   	push   ecx
c0018f41:	50                   	push   eax
c0018f42:	68 53 b6 02 c0       	push   0xc002b653
c0018f47:	e8 ae 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018f54:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f5b:	75 05                	jne    c0018f62 <CPU::displayFeatures()+0x152>
c0018f5d:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018f62:	52                   	push   edx
c0018f63:	52                   	push   edx
c0018f64:	50                   	push   eax
c0018f65:	68 6a b6 02 c0       	push   0xc002b66a
c0018f6a:	e8 8b 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018f6f:	83 c4 10             	add    esp,0x10
c0018f72:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018f77:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f7e:	75 05                	jne    c0018f85 <CPU::displayFeatures()+0x175>
c0018f80:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018f85:	51                   	push   ecx
c0018f86:	51                   	push   ecx
c0018f87:	50                   	push   eax
c0018f88:	68 81 b6 02 c0       	push   0xc002b681
c0018f8d:	e8 68 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018f92:	83 c4 10             	add    esp,0x10
c0018f95:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018f9a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fa1:	75 05                	jne    c0018fa8 <CPU::displayFeatures()+0x198>
c0018fa3:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018fa8:	52                   	push   edx
c0018fa9:	52                   	push   edx
c0018faa:	50                   	push   eax
c0018fab:	68 98 b6 02 c0       	push   0xc002b698
c0018fb0:	e8 45 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018fb5:	83 c4 10             	add    esp,0x10
c0018fb8:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018fbd:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fc4:	75 05                	jne    c0018fcb <CPU::displayFeatures()+0x1bb>
c0018fc6:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018fcb:	51                   	push   ecx
c0018fcc:	51                   	push   ecx
c0018fcd:	50                   	push   eax
c0018fce:	68 af b6 02 c0       	push   0xc002b6af
c0018fd3:	e8 22 9f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018fd8:	83 c4 10             	add    esp,0x10
c0018fdb:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0018fe0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fe7:	75 05                	jne    c0018fee <CPU::displayFeatures()+0x1de>
c0018fe9:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0018fee:	52                   	push   edx
c0018fef:	52                   	push   edx
c0018ff0:	50                   	push   eax
c0018ff1:	68 c6 b6 02 c0       	push   0xc002b6c6
c0018ff6:	e8 ff 9e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0019003:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001900a:	75 05                	jne    c0019011 <CPU::displayFeatures()+0x201>
c001900c:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0019011:	51                   	push   ecx
c0019012:	51                   	push   ecx
c0019013:	50                   	push   eax
c0019014:	68 dd b6 02 c0       	push   0xc002b6dd
c0019019:	e8 dc 9e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0019026:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001902d:	75 05                	jne    c0019034 <CPU::displayFeatures()+0x224>
c001902f:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0019034:	52                   	push   edx
c0019035:	52                   	push   edx
c0019036:	50                   	push   eax
c0019037:	68 f4 b6 02 c0       	push   0xc002b6f4
c001903c:	e8 b9 9e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0019041:	83 c4 10             	add    esp,0x10
c0019044:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c0019049:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019050:	78 05                	js     c0019057 <CPU::displayFeatures()+0x247>
c0019052:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c0019057:	51                   	push   ecx
c0019058:	51                   	push   ecx
c0019059:	50                   	push   eax
c001905a:	68 0b b7 02 c0       	push   0xc002b70b
c001905f:	e8 96 9e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	b8 b2 9f 02 c0       	mov    eax,0xc0029fb2
c001906c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019073:	75 05                	jne    c001907a <CPU::displayFeatures()+0x26a>
c0019075:	b8 b6 9f 02 c0       	mov    eax,0xc0029fb6
c001907a:	52                   	push   edx
c001907b:	52                   	push   edx
c001907c:	50                   	push   eax
c001907d:	68 22 b7 02 c0       	push   0xc002b722
c0019082:	e8 73 9e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0019087:	83 c4 18             	add    esp,0x18
c001908a:	5b                   	pop    ebx
c001908b:	c3                   	ret    

c001908c <CPU::detectFeatures()>:
c001908c:	55                   	push   ebp
c001908d:	57                   	push   edi
c001908e:	56                   	push   esi
c001908f:	53                   	push   ebx
c0019090:	83 ec 50             	sub    esp,0x50
c0019093:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019097:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190a1:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190a8:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190ae:	6a 0d                	push   0xd
c00190b0:	6a 00                	push   0x0
c00190b2:	57                   	push   edi
c00190b3:	e8 c0 76 fe ff       	call   c0000778 <memset>
c00190b8:	83 c4 10             	add    esp,0x10
c00190bb:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00190c0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190c7:	0f 84 20 09 00 00    	je     c00199ed <CPU::detectFeatures()+0x961>
c00190cd:	83 ec 0c             	sub    esp,0xc
c00190d0:	6a 10                	push   0x10
c00190d2:	e8 f3 fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c00190d7:	83 e0 01             	and    eax,0x1
c00190da:	8d 14 00             	lea    edx,[eax+eax*1]
c00190dd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190e3:	83 e0 fd             	and    eax,0xfffffffd
c00190e6:	09 d0                	or     eax,edx
c00190e8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190ee:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190f5:	e8 d0 fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c00190fa:	83 e0 01             	and    eax,0x1
c00190fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019104:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001910a:	83 e0 fb             	and    eax,0xfffffffb
c001910d:	09 d0                	or     eax,edx
c001910f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019115:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001911c:	e8 a9 fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c0019121:	83 e0 01             	and    eax,0x1
c0019124:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001912b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019131:	83 e0 f7             	and    eax,0xfffffff7
c0019134:	09 d0                	or     eax,edx
c0019136:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001913c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019143:	e8 82 fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c0019148:	83 e0 01             	and    eax,0x1
c001914b:	c1 e0 04             	shl    eax,0x4
c001914e:	88 c2                	mov    dl,al
c0019150:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019156:	83 e0 ef             	and    eax,0xffffffef
c0019159:	09 d0                	or     eax,edx
c001915b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019161:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019168:	e8 5d fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c001916d:	83 e0 01             	and    eax,0x1
c0019170:	c1 e0 05             	shl    eax,0x5
c0019173:	88 c2                	mov    dl,al
c0019175:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001917b:	83 e0 df             	and    eax,0xffffffdf
c001917e:	09 d0                	or     eax,edx
c0019180:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019186:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001918d:	e8 38 fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c0019192:	83 e0 01             	and    eax,0x1
c0019195:	8d 14 00             	lea    edx,[eax+eax*1]
c0019198:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001919e:	83 e0 fd             	and    eax,0xfffffffd
c00191a1:	09 d0                	or     eax,edx
c00191a3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191a9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191b0:	e8 15 fb ff ff       	call   c0018cca <CPU::cpuidCheckEDX(unsigned int)>
c00191b5:	83 e0 01             	and    eax,0x1
c00191b8:	c1 e0 06             	shl    eax,0x6
c00191bb:	88 c2                	mov    dl,al
c00191bd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191c3:	83 e0 bf             	and    eax,0xffffffbf
c00191c6:	09 d0                	or     eax,edx
c00191c8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191ce:	58                   	pop    eax
c00191cf:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191d3:	56                   	push   esi
c00191d4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191d8:	55                   	push   ebp
c00191d9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191dd:	50                   	push   eax
c00191de:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191e2:	52                   	push   edx
c00191e3:	6a 00                	push   0x0
c00191e5:	e8 5c fa ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191ea:	83 c4 1c             	add    esp,0x1c
c00191ed:	6a 04                	push   0x4
c00191ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191f3:	50                   	push   eax
c00191f4:	57                   	push   edi
c00191f5:	e8 4a 75 fe ff       	call   c0000744 <memcpy>
c00191fa:	83 c4 0c             	add    esp,0xc
c00191fd:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019203:	6a 04                	push   0x4
c0019205:	56                   	push   esi
c0019206:	50                   	push   eax
c0019207:	e8 38 75 fe ff       	call   c0000744 <memcpy>
c001920c:	83 c4 0c             	add    esp,0xc
c001920f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019215:	6a 04                	push   0x4
c0019217:	55                   	push   ebp
c0019218:	50                   	push   eax
c0019219:	e8 26 75 fe ff       	call   c0000744 <memcpy>
c001921e:	58                   	pop    eax
c001921f:	5a                   	pop    edx
c0019220:	68 39 b7 02 c0       	push   0xc002b739
c0019225:	57                   	push   edi
c0019226:	e8 95 76 fe ff       	call   c00008c0 <strcmp>
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	85 c0                	test   eax,eax
c0019230:	75 0f                	jne    c0019241 <CPU::detectFeatures()+0x1b5>
c0019232:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001923c:	e9 22 02 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c0019241:	50                   	push   eax
c0019242:	50                   	push   eax
c0019243:	68 46 b7 02 c0       	push   0xc002b746
c0019248:	57                   	push   edi
c0019249:	e8 72 76 fe ff       	call   c00008c0 <strcmp>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	85 c0                	test   eax,eax
c0019253:	74 dd                	je     c0019232 <CPU::detectFeatures()+0x1a6>
c0019255:	51                   	push   ecx
c0019256:	51                   	push   ecx
c0019257:	68 53 b7 02 c0       	push   0xc002b753
c001925c:	57                   	push   edi
c001925d:	e8 5e 76 fe ff       	call   c00008c0 <strcmp>
c0019262:	83 c4 10             	add    esp,0x10
c0019265:	85 c0                	test   eax,eax
c0019267:	74 2a                	je     c0019293 <CPU::detectFeatures()+0x207>
c0019269:	52                   	push   edx
c001926a:	52                   	push   edx
c001926b:	68 60 b7 02 c0       	push   0xc002b760
c0019270:	57                   	push   edi
c0019271:	e8 4a 76 fe ff       	call   c00008c0 <strcmp>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	85 c0                	test   eax,eax
c001927b:	74 16                	je     c0019293 <CPU::detectFeatures()+0x207>
c001927d:	50                   	push   eax
c001927e:	50                   	push   eax
c001927f:	68 6d b7 02 c0       	push   0xc002b76d
c0019284:	57                   	push   edi
c0019285:	e8 36 76 fe ff       	call   c00008c0 <strcmp>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	85 c0                	test   eax,eax
c001928f:	74 48                	je     c00192d9 <CPU::detectFeatures()+0x24d>
c0019291:	eb 0f                	jmp    c00192a2 <CPU::detectFeatures()+0x216>
c0019293:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001929d:	e9 c1 01 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c00192a2:	50                   	push   eax
c00192a3:	50                   	push   eax
c00192a4:	68 7a b7 02 c0       	push   0xc002b77a
c00192a9:	57                   	push   edi
c00192aa:	e8 11 76 fe ff       	call   c00008c0 <strcmp>
c00192af:	83 c4 10             	add    esp,0x10
c00192b2:	85 c0                	test   eax,eax
c00192b4:	74 23                	je     c00192d9 <CPU::detectFeatures()+0x24d>
c00192b6:	50                   	push   eax
c00192b7:	50                   	push   eax
c00192b8:	68 87 b7 02 c0       	push   0xc002b787
c00192bd:	57                   	push   edi
c00192be:	e8 fd 75 fe ff       	call   c00008c0 <strcmp>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	85 c0                	test   eax,eax
c00192c8:	75 1e                	jne    c00192e8 <CPU::detectFeatures()+0x25c>
c00192ca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192d4:	e9 8a 01 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c00192d9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192e3:	e9 7b 01 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c00192e8:	50                   	push   eax
c00192e9:	50                   	push   eax
c00192ea:	68 94 b7 02 c0       	push   0xc002b794
c00192ef:	57                   	push   edi
c00192f0:	e8 cb 75 fe ff       	call   c00008c0 <strcmp>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	85 c0                	test   eax,eax
c00192fa:	75 0f                	jne    c001930b <CPU::detectFeatures()+0x27f>
c00192fc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019306:	e9 58 01 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c001930b:	50                   	push   eax
c001930c:	50                   	push   eax
c001930d:	68 53 b7 02 c0       	push   0xc002b753
c0019312:	57                   	push   edi
c0019313:	e8 a8 75 fe ff       	call   c00008c0 <strcmp>
c0019318:	83 c4 10             	add    esp,0x10
c001931b:	85 c0                	test   eax,eax
c001931d:	75 0f                	jne    c001932e <CPU::detectFeatures()+0x2a2>
c001931f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019329:	e9 35 01 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c001932e:	50                   	push   eax
c001932f:	50                   	push   eax
c0019330:	68 a1 b7 02 c0       	push   0xc002b7a1
c0019335:	57                   	push   edi
c0019336:	e8 85 75 fe ff       	call   c00008c0 <strcmp>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	85 c0                	test   eax,eax
c0019340:	75 0f                	jne    c0019351 <CPU::detectFeatures()+0x2c5>
c0019342:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001934c:	e9 12 01 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c0019351:	51                   	push   ecx
c0019352:	51                   	push   ecx
c0019353:	68 ae b7 02 c0       	push   0xc002b7ae
c0019358:	57                   	push   edi
c0019359:	e8 62 75 fe ff       	call   c00008c0 <strcmp>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	85 c0                	test   eax,eax
c0019363:	75 0f                	jne    c0019374 <CPU::detectFeatures()+0x2e8>
c0019365:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001936f:	e9 ef 00 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c0019374:	52                   	push   edx
c0019375:	52                   	push   edx
c0019376:	68 bb b7 02 c0       	push   0xc002b7bb
c001937b:	57                   	push   edi
c001937c:	e8 3f 75 fe ff       	call   c00008c0 <strcmp>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	85 c0                	test   eax,eax
c0019386:	75 0f                	jne    c0019397 <CPU::detectFeatures()+0x30b>
c0019388:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019392:	e9 cc 00 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c0019397:	50                   	push   eax
c0019398:	50                   	push   eax
c0019399:	68 c8 b7 02 c0       	push   0xc002b7c8
c001939e:	57                   	push   edi
c001939f:	e8 1c 75 fe ff       	call   c00008c0 <strcmp>
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	85 c0                	test   eax,eax
c00193a9:	75 0f                	jne    c00193ba <CPU::detectFeatures()+0x32e>
c00193ab:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193b5:	e9 a9 00 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c00193ba:	50                   	push   eax
c00193bb:	50                   	push   eax
c00193bc:	68 d5 b7 02 c0       	push   0xc002b7d5
c00193c1:	57                   	push   edi
c00193c2:	e8 f9 74 fe ff       	call   c00008c0 <strcmp>
c00193c7:	83 c4 10             	add    esp,0x10
c00193ca:	85 c0                	test   eax,eax
c00193cc:	75 0f                	jne    c00193dd <CPU::detectFeatures()+0x351>
c00193ce:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193d8:	e9 86 00 00 00       	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c00193dd:	50                   	push   eax
c00193de:	50                   	push   eax
c00193df:	68 e2 b7 02 c0       	push   0xc002b7e2
c00193e4:	57                   	push   edi
c00193e5:	e8 d6 74 fe ff       	call   c00008c0 <strcmp>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	85 c0                	test   eax,eax
c00193ef:	75 0c                	jne    c00193fd <CPU::detectFeatures()+0x371>
c00193f1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193fb:	eb 66                	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c00193fd:	50                   	push   eax
c00193fe:	50                   	push   eax
c00193ff:	68 ef b7 02 c0       	push   0xc002b7ef
c0019404:	57                   	push   edi
c0019405:	e8 b6 74 fe ff       	call   c00008c0 <strcmp>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	85 c0                	test   eax,eax
c001940f:	75 0c                	jne    c001941d <CPU::detectFeatures()+0x391>
c0019411:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001941b:	eb 46                	jmp    c0019463 <CPU::detectFeatures()+0x3d7>
c001941d:	50                   	push   eax
c001941e:	50                   	push   eax
c001941f:	68 fc b7 02 c0       	push   0xc002b7fc
c0019424:	57                   	push   edi
c0019425:	e8 96 74 fe ff       	call   c00008c0 <strcmp>
c001942a:	83 c4 10             	add    esp,0x10
c001942d:	85 c0                	test   eax,eax
c001942f:	74 e0                	je     c0019411 <CPU::detectFeatures()+0x385>
c0019431:	50                   	push   eax
c0019432:	50                   	push   eax
c0019433:	68 09 b8 02 c0       	push   0xc002b809
c0019438:	57                   	push   edi
c0019439:	e8 82 74 fe ff       	call   c00008c0 <strcmp>
c001943e:	83 c4 10             	add    esp,0x10
c0019441:	85 c0                	test   eax,eax
c0019443:	74 cc                	je     c0019411 <CPU::detectFeatures()+0x385>
c0019445:	51                   	push   ecx
c0019446:	51                   	push   ecx
c0019447:	68 16 b8 02 c0       	push   0xc002b816
c001944c:	57                   	push   edi
c001944d:	e8 6e 74 fe ff       	call   c00008c0 <strcmp>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	85 c0                	test   eax,eax
c0019457:	74 b8                	je     c0019411 <CPU::detectFeatures()+0x385>
c0019459:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019463:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019468:	0f 86 be 00 00 00    	jbe    c001952c <CPU::detectFeatures()+0x4a0>
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	68 80 00 00 00       	push   0x80
c0019476:	e8 ab f8 ff ff       	call   c0018d26 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001947b:	83 e0 01             	and    eax,0x1
c001947e:	c1 e0 06             	shl    eax,0x6
c0019481:	88 c2                	mov    dl,al
c0019483:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019489:	83 e0 bf             	and    eax,0xffffffbf
c001948c:	09 d0                	or     eax,edx
c001948e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019494:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001949b:	e8 86 f8 ff ff       	call   c0018d26 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194a0:	83 e0 01             	and    eax,0x1
c00194a3:	c1 e0 04             	shl    eax,0x4
c00194a6:	88 c2                	mov    dl,al
c00194a8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194ae:	83 e0 ef             	and    eax,0xffffffef
c00194b1:	09 d0                	or     eax,edx
c00194b3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194b9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194c0:	e8 61 f8 ff ff       	call   c0018d26 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194c5:	c1 e0 07             	shl    eax,0x7
c00194c8:	88 c2                	mov    dl,al
c00194ca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194d0:	83 e0 7f             	and    eax,0x7f
c00194d3:	09 d0                	or     eax,edx
c00194d5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194e2:	e8 6d f8 ff ff       	call   c0018d54 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194e7:	83 e0 01             	and    eax,0x1
c00194ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194f1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194f7:	83 e0 f7             	and    eax,0xfffffff7
c00194fa:	09 d0                	or     eax,edx
c00194fc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019502:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019509:	e8 46 f8 ff ff       	call   c0018d54 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	83 e0 01             	and    eax,0x1
c0019514:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001951b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019521:	83 e0 fb             	and    eax,0xfffffffb
c0019524:	09 d0                	or     eax,edx
c0019526:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001952c:	83 ec 0c             	sub    esp,0xc
c001952f:	56                   	push   esi
c0019530:	55                   	push   ebp
c0019531:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019535:	57                   	push   edi
c0019536:	8d 44 24 28          	lea    eax,[esp+0x28]
c001953a:	50                   	push   eax
c001953b:	6a 01                	push   0x1
c001953d:	e8 04 f7 ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019542:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019546:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001954c:	88 ca                	mov    dl,cl
c001954e:	83 e0 f0             	and    eax,0xfffffff0
c0019551:	83 e2 0f             	and    edx,0xf
c0019554:	09 d0                	or     eax,edx
c0019556:	88 ca                	mov    dl,cl
c0019558:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001955e:	c0 ea 04             	shr    dl,0x4
c0019561:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019565:	0f b6 c2             	movzx  eax,dl
c0019568:	83 c4 20             	add    esp,0x20
c001956b:	c1 e0 06             	shl    eax,0x6
c001956e:	89 c5                	mov    ebp,eax
c0019570:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019576:	66 25 3f c0          	and    ax,0xc03f
c001957a:	09 e8                	or     eax,ebp
c001957c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019583:	89 c8                	mov    eax,ecx
c0019585:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001958b:	c1 e8 08             	shr    eax,0x8
c001958e:	83 e2 3f             	and    edx,0x3f
c0019591:	83 e0 0f             	and    eax,0xf
c0019594:	89 c5                	mov    ebp,eax
c0019596:	c1 e5 06             	shl    ebp,0x6
c0019599:	09 d5                	or     ebp,edx
c001959b:	89 ea                	mov    edx,ebp
c001959d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195a3:	88 c2                	mov    dl,al
c00195a5:	c0 ea 02             	shr    dl,0x2
c00195a8:	89 d5                	mov    ebp,edx
c00195aa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195b0:	83 e2 c0             	and    edx,0xffffffc0
c00195b3:	09 d5                	or     ebp,edx
c00195b5:	89 ea                	mov    edx,ebp
c00195b7:	89 cd                	mov    ebp,ecx
c00195b9:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195bf:	c1 ed 0c             	shr    ebp,0xc
c00195c2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195c8:	83 e5 03             	and    ebp,0x3
c00195cb:	83 e2 cf             	and    edx,0xffffffcf
c00195ce:	c1 e5 04             	shl    ebp,0x4
c00195d1:	09 d5                	or     ebp,edx
c00195d3:	3c 06                	cmp    al,0x6
c00195d5:	89 ea                	mov    edx,ebp
c00195d7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195dd:	74 04                	je     c00195e3 <CPU::detectFeatures()+0x557>
c00195df:	3c 0f                	cmp    al,0xf
c00195e1:	75 5c                	jne    c001963f <CPU::detectFeatures()+0x5b3>
c00195e3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195e7:	89 cd                	mov    ebp,ecx
c00195e9:	c1 ed 10             	shr    ebp,0x10
c00195ec:	c1 e5 04             	shl    ebp,0x4
c00195ef:	09 ea                	or     edx,ebp
c00195f1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195f7:	0f b6 d2             	movzx  edx,dl
c00195fa:	66 81 e5 3f c0       	and    bp,0xc03f
c00195ff:	c1 e2 06             	shl    edx,0x6
c0019602:	09 ea                	or     edx,ebp
c0019604:	3c 0f                	cmp    al,0xf
c0019606:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001960d:	75 30                	jne    c001963f <CPU::detectFeatures()+0x5b3>
c001960f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019615:	c1 e9 14             	shr    ecx,0x14
c0019618:	83 e0 3f             	and    eax,0x3f
c001961b:	83 c1 0f             	add    ecx,0xf
c001961e:	88 ca                	mov    dl,cl
c0019620:	c0 e9 02             	shr    cl,0x2
c0019623:	c1 e2 06             	shl    edx,0x6
c0019626:	09 d0                	or     eax,edx
c0019628:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001962e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019634:	83 e0 c0             	and    eax,0xffffffc0
c0019637:	09 c1                	or     ecx,eax
c0019639:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001963f:	83 ec 0c             	sub    esp,0xc
c0019642:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019649:	56                   	push   esi
c001964a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001964e:	50                   	push   eax
c001964f:	57                   	push   edi
c0019650:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019654:	55                   	push   ebp
c0019655:	68 00 00 00 80       	push   0x80000000
c001965a:	e8 e7 f5 ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001965f:	83 c4 20             	add    esp,0x20
c0019662:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001966a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001966e:	76 1e                	jbe    c001968e <CPU::detectFeatures()+0x602>
c0019670:	83 ec 0c             	sub    esp,0xc
c0019673:	56                   	push   esi
c0019674:	50                   	push   eax
c0019675:	57                   	push   edi
c0019676:	55                   	push   ebp
c0019677:	68 01 00 00 80       	push   0x80000001
c001967c:	e8 c5 f5 ff ff       	call   c0018c46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019681:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001968b:	83 c4 20             	add    esp,0x20
c001968e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019694:	83 f8 01             	cmp    eax,0x1
c0019697:	75 6f                	jne    c0019708 <CPU::detectFeatures()+0x67c>
c0019699:	51                   	push   ecx
c001969a:	51                   	push   ecx
c001969b:	68 22 b8 02 c0       	push   0xc002b822
c00196a0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196a4:	56                   	push   esi
c00196a5:	e8 8a 71 fe ff       	call   c0000834 <strcpy>
c00196aa:	5f                   	pop    edi
c00196ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196b1:	5d                   	pop    ebp
c00196b2:	66 c1 e8 06          	shr    ax,0x6
c00196b6:	0f b6 c0             	movzx  eax,al
c00196b9:	50                   	push   eax
c00196ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196c0:	c1 e8 0e             	shr    eax,0xe
c00196c3:	0f b6 c0             	movzx  eax,al
c00196c6:	50                   	push   eax
c00196c7:	e8 24 f2 ff ff       	call   c00188f0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196cc:	5a                   	pop    edx
c00196cd:	59                   	pop    ecx
c00196ce:	50                   	push   eax
c00196cf:	56                   	push   esi
c00196d0:	e8 9f 72 fe ff       	call   c0000974 <strcat>
c00196d5:	5f                   	pop    edi
c00196d6:	5d                   	pop    ebp
c00196d7:	56                   	push   esi
c00196d8:	53                   	push   ebx
c00196d9:	e8 24 ae ff ff       	call   c0014502 <Device::setName(char const*)>
c00196de:	58                   	pop    eax
c00196df:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196e5:	5a                   	pop    edx
c00196e6:	68 29 b8 02 c0       	push   0xc002b829
c00196eb:	50                   	push   eax
c00196ec:	e8 cf 71 fe ff       	call   c00008c0 <strcmp>
c00196f1:	83 c4 10             	add    esp,0x10
c00196f4:	85 c0                	test   eax,eax
c00196f6:	0f 85 71 03 00 00    	jne    c0019a6d <CPU::detectFeatures()+0x9e1>
c00196fc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019703:	e9 65 03 00 00       	jmp    c0019a6d <CPU::detectFeatures()+0x9e1>
c0019708:	83 f8 02             	cmp    eax,0x2
c001970b:	0f 85 b5 00 00 00    	jne    c00197c6 <CPU::detectFeatures()+0x73a>
c0019711:	57                   	push   edi
c0019712:	57                   	push   edi
c0019713:	68 3b b8 02 c0       	push   0xc002b83b
c0019718:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001971c:	56                   	push   esi
c001971d:	e8 12 71 fe ff       	call   c0000834 <strcpy>
c0019722:	5d                   	pop    ebp
c0019723:	58                   	pop    eax
c0019724:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001972a:	66 c1 e8 06          	shr    ax,0x6
c001972e:	0f b6 c0             	movzx  eax,al
c0019731:	50                   	push   eax
c0019732:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019738:	c1 e8 0e             	shr    eax,0xe
c001973b:	0f b6 c0             	movzx  eax,al
c001973e:	50                   	push   eax
c001973f:	e8 18 f0 ff ff       	call   c001875c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019744:	5a                   	pop    edx
c0019745:	59                   	pop    ecx
c0019746:	50                   	push   eax
c0019747:	56                   	push   esi
c0019748:	e8 27 72 fe ff       	call   c0000974 <strcat>
c001974d:	5f                   	pop    edi
c001974e:	5d                   	pop    ebp
c001974f:	56                   	push   esi
c0019750:	53                   	push   ebx
c0019751:	e8 ac ad ff ff       	call   c0014502 <Device::setName(char const*)>
c0019756:	58                   	pop    eax
c0019757:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001975d:	5a                   	pop    edx
c001975e:	68 40 b8 02 c0       	push   0xc002b840
c0019763:	50                   	push   eax
c0019764:	e8 57 71 fe ff       	call   c00008c0 <strcmp>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	85 c0                	test   eax,eax
c001976e:	75 20                	jne    c0019790 <CPU::detectFeatures()+0x704>
c0019770:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0019776:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001977c:	a8 01                	test   al,0x1
c001977e:	74 10                	je     c0019790 <CPU::detectFeatures()+0x704>
c0019780:	83 e0 fe             	and    eax,0xfffffffe
c0019783:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019789:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019790:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019796:	c1 e8 0e             	shr    eax,0xe
c0019799:	3c 05                	cmp    al,0x5
c001979b:	0f 85 cc 02 00 00    	jne    c0019a6d <CPU::detectFeatures()+0x9e1>
c00197a1:	56                   	push   esi
c00197a2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197a8:	83 e0 0f             	and    eax,0xf
c00197ab:	50                   	push   eax
c00197ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b2:	66 c1 e8 06          	shr    ax,0x6
c00197b6:	0f b6 c0             	movzx  eax,al
c00197b9:	50                   	push   eax
c00197ba:	6a 05                	push   0x5
c00197bc:	e8 11 f4 ff ff       	call   c0018bd2 <CPU::AMD_K6_writeback(int, int, int)>
c00197c1:	e9 1f 02 00 00       	jmp    c00199e5 <CPU::detectFeatures()+0x959>
c00197c6:	8d 50 fd             	lea    edx,[eax-0x3]
c00197c9:	83 fa 01             	cmp    edx,0x1
c00197cc:	76 09                	jbe    c00197d7 <CPU::detectFeatures()+0x74b>
c00197ce:	83 f8 06             	cmp    eax,0x6
c00197d1:	0f 85 91 01 00 00    	jne    c0019968 <CPU::detectFeatures()+0x8dc>
c00197d7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197dd:	c1 ea 0e             	shr    edx,0xe
c00197e0:	80 fa 05             	cmp    dl,0x5
c00197e3:	75 7b                	jne    c0019860 <CPU::detectFeatures()+0x7d4>
c00197e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197eb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197f0:	66 81 fa 00 01       	cmp    dx,0x100
c00197f5:	75 0c                	jne    c0019803 <CPU::detectFeatures()+0x777>
c00197f7:	51                   	push   ecx
c00197f8:	51                   	push   ecx
c00197f9:	68 47 b8 02 c0       	push   0xc002b847
c00197fe:	e9 dc 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019803:	66 81 fa 00 02       	cmp    dx,0x200
c0019808:	75 0c                	jne    c0019816 <CPU::detectFeatures()+0x78a>
c001980a:	52                   	push   edx
c001980b:	52                   	push   edx
c001980c:	68 5a b8 02 c0       	push   0xc002b85a
c0019811:	e9 c9 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019816:	66 81 fa 40 02       	cmp    dx,0x240
c001981b:	75 0c                	jne    c0019829 <CPU::detectFeatures()+0x79d>
c001981d:	50                   	push   eax
c001981e:	50                   	push   eax
c001981f:	68 6c b8 02 c0       	push   0xc002b86c
c0019824:	e9 b6 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019829:	83 f8 06             	cmp    eax,0x6
c001982c:	75 0c                	jne    c001983a <CPU::detectFeatures()+0x7ae>
c001982e:	50                   	push   eax
c001982f:	50                   	push   eax
c0019830:	68 7e b8 02 c0       	push   0xc002b87e
c0019835:	e9 a5 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c001983a:	83 f8 04             	cmp    eax,0x4
c001983d:	75 0c                	jne    c001984b <CPU::detectFeatures()+0x7bf>
c001983f:	50                   	push   eax
c0019840:	50                   	push   eax
c0019841:	68 8a b8 02 c0       	push   0xc002b88a
c0019846:	e9 94 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c001984b:	83 f8 03             	cmp    eax,0x3
c001984e:	0f 85 19 02 00 00    	jne    c0019a6d <CPU::detectFeatures()+0x9e1>
c0019854:	50                   	push   eax
c0019855:	50                   	push   eax
c0019856:	68 92 b8 02 c0       	push   0xc002b892
c001985b:	e9 7f 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019860:	80 fa 06             	cmp    dl,0x6
c0019863:	0f 85 db 00 00 00    	jne    c0019944 <CPU::detectFeatures()+0x8b8>
c0019869:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001986f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019874:	66 81 fa 80 01       	cmp    dx,0x180
c0019879:	75 0c                	jne    c0019887 <CPU::detectFeatures()+0x7fb>
c001987b:	50                   	push   eax
c001987c:	50                   	push   eax
c001987d:	68 9d b8 02 c0       	push   0xc002b89d
c0019882:	e9 58 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019887:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001988d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019892:	75 0c                	jne    c00198a0 <CPU::detectFeatures()+0x814>
c0019894:	50                   	push   eax
c0019895:	50                   	push   eax
c0019896:	68 ad b8 02 c0       	push   0xc002b8ad
c001989b:	e9 3f 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c00198a0:	66 81 fa 40 02       	cmp    dx,0x240
c00198a5:	75 0c                	jne    c00198b3 <CPU::detectFeatures()+0x827>
c00198a7:	55                   	push   ebp
c00198a8:	55                   	push   ebp
c00198a9:	68 b4 b8 02 c0       	push   0xc002b8b4
c00198ae:	e9 2c 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c00198b3:	66 81 fa 80 02       	cmp    dx,0x280
c00198b8:	75 0c                	jne    c00198c6 <CPU::detectFeatures()+0x83a>
c00198ba:	57                   	push   edi
c00198bb:	57                   	push   edi
c00198bc:	68 bd b8 02 c0       	push   0xc002b8bd
c00198c1:	e9 19 01 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c00198c6:	66 81 fa 40 03       	cmp    dx,0x340
c00198cb:	74 ed                	je     c00198ba <CPU::detectFeatures()+0x82e>
c00198cd:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198d2:	75 0c                	jne    c00198e0 <CPU::detectFeatures()+0x854>
c00198d4:	56                   	push   esi
c00198d5:	56                   	push   esi
c00198d6:	68 c4 b8 02 c0       	push   0xc002b8c4
c00198db:	e9 ff 00 00 00       	jmp    c00199df <CPU::detectFeatures()+0x953>
c00198e0:	83 f8 06             	cmp    eax,0x6
c00198e3:	0f 84 45 ff ff ff    	je     c001982e <CPU::detectFeatures()+0x7a2>
c00198e9:	83 f8 04             	cmp    eax,0x4
c00198ec:	0f 84 4d ff ff ff    	je     c001983f <CPU::detectFeatures()+0x7b3>
c00198f2:	83 f8 03             	cmp    eax,0x3
c00198f5:	0f 85 72 01 00 00    	jne    c0019a6d <CPU::detectFeatures()+0x9e1>
c00198fb:	51                   	push   ecx
c00198fc:	51                   	push   ecx
c00198fd:	68 cd b8 02 c0       	push   0xc002b8cd
c0019902:	53                   	push   ebx
c0019903:	e8 fa ab ff ff       	call   c0014502 <Device::setName(char const*)>
c0019908:	b1 c1                	mov    cl,0xc1
c001990a:	88 c8                	mov    al,cl
c001990c:	e6 22                	out    0x22,al
c001990e:	e4 23                	in     al,0x23
c0019910:	88 c2                	mov    dl,al
c0019912:	88 c8                	mov    al,cl
c0019914:	e6 22                	out    0x22,al
c0019916:	88 d0                	mov    al,dl
c0019918:	83 c8 10             	or     eax,0x10
c001991b:	e6 23                	out    0x23,al
c001991d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019924:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019927:	89 d0                	mov    eax,edx
c0019929:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001992f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019933:	40                   	inc    eax
c0019934:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001993a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001993f:	e9 a1 00 00 00       	jmp    c00199e5 <CPU::detectFeatures()+0x959>
c0019944:	83 f8 06             	cmp    eax,0x6
c0019947:	0f 84 e1 fe ff ff    	je     c001982e <CPU::detectFeatures()+0x7a2>
c001994d:	83 f8 04             	cmp    eax,0x4
c0019950:	0f 84 e9 fe ff ff    	je     c001983f <CPU::detectFeatures()+0x7b3>
c0019956:	83 f8 03             	cmp    eax,0x3
c0019959:	0f 85 0e 01 00 00    	jne    c0019a6d <CPU::detectFeatures()+0x9e1>
c001995f:	52                   	push   edx
c0019960:	52                   	push   edx
c0019961:	68 d8 b8 02 c0       	push   0xc002b8d8
c0019966:	eb 77                	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019968:	83 f8 07             	cmp    eax,0x7
c001996b:	75 09                	jne    c0019976 <CPU::detectFeatures()+0x8ea>
c001996d:	50                   	push   eax
c001996e:	50                   	push   eax
c001996f:	68 e2 b8 02 c0       	push   0xc002b8e2
c0019974:	eb 69                	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019976:	83 f8 0a             	cmp    eax,0xa
c0019979:	75 09                	jne    c0019984 <CPU::detectFeatures()+0x8f8>
c001997b:	50                   	push   eax
c001997c:	50                   	push   eax
c001997d:	68 ed b8 02 c0       	push   0xc002b8ed
c0019982:	eb 5b                	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019984:	83 f8 0b             	cmp    eax,0xb
c0019987:	75 09                	jne    c0019992 <CPU::detectFeatures()+0x906>
c0019989:	50                   	push   eax
c001998a:	50                   	push   eax
c001998b:	68 f5 b8 02 c0       	push   0xc002b8f5
c0019990:	eb 4d                	jmp    c00199df <CPU::detectFeatures()+0x953>
c0019992:	83 f8 08             	cmp    eax,0x8
c0019995:	75 09                	jne    c00199a0 <CPU::detectFeatures()+0x914>
c0019997:	50                   	push   eax
c0019998:	50                   	push   eax
c0019999:	68 fe b8 02 c0       	push   0xc002b8fe
c001999e:	eb 3f                	jmp    c00199df <CPU::detectFeatures()+0x953>
c00199a0:	83 f8 09             	cmp    eax,0x9
c00199a3:	75 09                	jne    c00199ae <CPU::detectFeatures()+0x922>
c00199a5:	50                   	push   eax
c00199a6:	50                   	push   eax
c00199a7:	68 06 b9 02 c0       	push   0xc002b906
c00199ac:	eb 31                	jmp    c00199df <CPU::detectFeatures()+0x953>
c00199ae:	83 f8 05             	cmp    eax,0x5
c00199b1:	75 09                	jne    c00199bc <CPU::detectFeatures()+0x930>
c00199b3:	50                   	push   eax
c00199b4:	50                   	push   eax
c00199b5:	68 0e b9 02 c0       	push   0xc002b90e
c00199ba:	eb 23                	jmp    c00199df <CPU::detectFeatures()+0x953>
c00199bc:	83 f8 0c             	cmp    eax,0xc
c00199bf:	75 09                	jne    c00199ca <CPU::detectFeatures()+0x93e>
c00199c1:	55                   	push   ebp
c00199c2:	55                   	push   ebp
c00199c3:	68 1c b9 02 c0       	push   0xc002b91c
c00199c8:	eb 15                	jmp    c00199df <CPU::detectFeatures()+0x953>
c00199ca:	83 f8 0d             	cmp    eax,0xd
c00199cd:	75 09                	jne    c00199d8 <CPU::detectFeatures()+0x94c>
c00199cf:	57                   	push   edi
c00199d0:	57                   	push   edi
c00199d1:	68 27 b9 02 c0       	push   0xc002b927
c00199d6:	eb 07                	jmp    c00199df <CPU::detectFeatures()+0x953>
c00199d8:	56                   	push   esi
c00199d9:	56                   	push   esi
c00199da:	68 3b b9 02 c0       	push   0xc002b93b
c00199df:	53                   	push   ebx
c00199e0:	e8 1d ab ff ff       	call   c0014502 <Device::setName(char const*)>
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	e9 80 00 00 00       	jmp    c0019a6d <CPU::detectFeatures()+0x9e1>
c00199ed:	51                   	push   ecx
c00199ee:	51                   	push   ecx
c00199ef:	68 87 b7 02 c0       	push   0xc002b787
c00199f4:	57                   	push   edi
c00199f5:	e8 3a 6e fe ff       	call   c0000834 <strcpy>
c00199fa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a04:	e8 a5 68 fe ff       	call   c00002ae <is486>
c0019a09:	83 c4 10             	add    esp,0x10
c0019a0c:	85 c0                	test   eax,eax
c0019a0e:	74 2b                	je     c0019a3b <CPU::detectFeatures()+0x9af>
c0019a10:	52                   	push   edx
c0019a11:	52                   	push   edx
c0019a12:	68 47 b9 02 c0       	push   0xc002b947
c0019a17:	53                   	push   ebx
c0019a18:	e8 e5 aa ff ff       	call   c0014502 <Device::setName(char const*)>
c0019a1d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a24:	0f 20 c0             	mov    eax,cr0
c0019a27:	83 e0 14             	and    eax,0x14
c0019a2a:	83 c4 10             	add    esp,0x10
c0019a2d:	83 f8 04             	cmp    eax,0x4
c0019a30:	75 1f                	jne    c0019a51 <CPU::detectFeatures()+0x9c5>
c0019a32:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a39:	eb 32                	jmp    c0019a6d <CPU::detectFeatures()+0x9e1>
c0019a3b:	50                   	push   eax
c0019a3c:	50                   	push   eax
c0019a3d:	68 52 b9 02 c0       	push   0xc002b952
c0019a42:	53                   	push   ebx
c0019a43:	e8 ba aa ff ff       	call   c0014502 <Device::setName(char const*)>
c0019a48:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a4f:	eb d3                	jmp    c0019a24 <CPU::detectFeatures()+0x998>
c0019a51:	e8 33 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a56:	83 e0 01             	and    eax,0x1
c0019a59:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a5c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a62:	83 e0 fd             	and    eax,0xfffffffd
c0019a65:	09 d0                	or     eax,edx
c0019a67:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a6d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a74:	83 c4 4c             	add    esp,0x4c
c0019a77:	5b                   	pop    ebx
c0019a78:	5e                   	pop    esi
c0019a79:	5f                   	pop    edi
c0019a7a:	5d                   	pop    ebp
c0019a7b:	c3                   	ret    

c0019a7c <CPU::setupSMEP()>:
c0019a7c:	0f 20 e0             	mov    eax,cr4
c0019a7f:	0d 00 00 10 00       	or     eax,0x100000
c0019a84:	0f 22 e0             	mov    cr4,eax
c0019a87:	c3                   	ret    

c0019a88 <CPU::setupUMIP()>:
c0019a88:	0f 20 e0             	mov    eax,cr4
c0019a8b:	80 cc 08             	or     ah,0x8
c0019a8e:	0f 22 e0             	mov    cr4,eax
c0019a91:	c3                   	ret    

c0019a92 <CPU::setupTSC()>:
c0019a92:	0f 20 e0             	mov    eax,cr4
c0019a95:	83 c8 04             	or     eax,0x4
c0019a98:	0f 22 e0             	mov    cr4,eax
c0019a9b:	c3                   	ret    

c0019a9c <CPU::setupLargePages()>:
c0019a9c:	0f 20 e0             	mov    eax,cr4
c0019a9f:	83 c8 10             	or     eax,0x10
c0019aa2:	0f 22 e0             	mov    cr4,eax
c0019aa5:	c3                   	ret    

c0019aa6 <CPU::setupPAT()>:
c0019aa6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019aab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ab2:	74 2c                	je     c0019ae0 <CPU::setupPAT()+0x3a>
c0019ab4:	53                   	push   ebx
c0019ab5:	83 ec 10             	sub    esp,0x10
c0019ab8:	68 77 02 00 00       	push   0x277
c0019abd:	50                   	push   eax
c0019abe:	e8 25 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ac3:	83 e2 f8             	and    edx,0xfffffff8
c0019ac6:	83 ca 01             	or     edx,0x1
c0019ac9:	52                   	push   edx
c0019aca:	50                   	push   eax
c0019acb:	68 77 02 00 00       	push   0x277
c0019ad0:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019ad6:	e8 39 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019adb:	83 c4 28             	add    esp,0x28
c0019ade:	5b                   	pop    ebx
c0019adf:	c3                   	ret    
c0019ae0:	c3                   	ret    
c0019ae1:	90                   	nop

c0019ae2 <CPU::setupMTRR()>:
c0019ae2:	c3                   	ret    
c0019ae3:	90                   	nop

c0019ae4 <CPU::setupGlobalPages()>:
c0019ae4:	0f 20 e0             	mov    eax,cr4
c0019ae7:	0c 80                	or     al,0x80
c0019ae9:	0f 22 e0             	mov    cr4,eax
c0019aec:	c3                   	ret    
c0019aed:	90                   	nop

c0019aee <CPU::allowUsermodeDataAccess()>:
c0019aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019af9:	74 03                	je     c0019afe <CPU::allowUsermodeDataAccess()+0x10>
c0019afb:	0f 01 cb             	stac   
c0019afe:	c3                   	ret    
c0019aff:	90                   	nop

c0019b00 <CPU::prohibitUsermodeDataAccess()>:
c0019b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b04:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b0b:	74 03                	je     c0019b10 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b0d:	0f 01 ca             	clac   
c0019b10:	c3                   	ret    
c0019b11:	90                   	nop

c0019b12 <CPU::setupSMAP()>:
c0019b12:	0f 20 e0             	mov    eax,cr4
c0019b15:	0d 00 00 20 00       	or     eax,0x200000
c0019b1a:	0f 22 e0             	mov    cr4,eax
c0019b1d:	eb e1                	jmp    c0019b00 <CPU::prohibitUsermodeDataAccess()>
c0019b1f:	90                   	nop

c0019b20 <CPU::setupFeatures()>:
c0019b20:	83 ec 0c             	sub    esp,0xc
c0019b23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b27:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b2e:	74 07                	je     c0019b37 <CPU::setupFeatures()+0x17>
c0019b30:	52                   	push   edx
c0019b31:	e8 46 ff ff ff       	call   c0019a7c <CPU::setupSMEP()>
c0019b36:	58                   	pop    eax
c0019b37:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b3e:	74 07                	je     c0019b47 <CPU::setupFeatures()+0x27>
c0019b40:	52                   	push   edx
c0019b41:	e8 cc ff ff ff       	call   c0019b12 <CPU::setupSMAP()>
c0019b46:	58                   	pop    eax
c0019b47:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b4e:	74 07                	je     c0019b57 <CPU::setupFeatures()+0x37>
c0019b50:	52                   	push   edx
c0019b51:	e8 32 ff ff ff       	call   c0019a88 <CPU::setupUMIP()>
c0019b56:	58                   	pop    eax
c0019b57:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b5e:	74 07                	je     c0019b67 <CPU::setupFeatures()+0x47>
c0019b60:	52                   	push   edx
c0019b61:	e8 2c ff ff ff       	call   c0019a92 <CPU::setupTSC()>
c0019b66:	58                   	pop    eax
c0019b67:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b6e:	74 07                	je     c0019b77 <CPU::setupFeatures()+0x57>
c0019b70:	52                   	push   edx
c0019b71:	e8 26 ff ff ff       	call   c0019a9c <CPU::setupLargePages()>
c0019b76:	59                   	pop    ecx
c0019b77:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b7e:	74 07                	je     c0019b87 <CPU::setupFeatures()+0x67>
c0019b80:	52                   	push   edx
c0019b81:	e8 5e ff ff ff       	call   c0019ae4 <CPU::setupGlobalPages()>
c0019b86:	58                   	pop    eax
c0019b87:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b8e:	74 0c                	je     c0019b9c <CPU::setupFeatures()+0x7c>
c0019b90:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b94:	83 c4 0c             	add    esp,0xc
c0019b97:	e9 0a ff ff ff       	jmp    c0019aa6 <CPU::setupPAT()>
c0019b9c:	83 c4 0c             	add    esp,0xc
c0019b9f:	c3                   	ret    

c0019ba0 <CPU::open(int, int, void*)>:
c0019ba0:	57                   	push   edi
c0019ba1:	56                   	push   esi
c0019ba2:	53                   	push   ebx
c0019ba3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ba7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bab:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019bba:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019bc0:	50                   	push   eax
c0019bc1:	e8 0e 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019bc6:	83 c4 0c             	add    esp,0xc
c0019bc9:	6a 00                	push   0x0
c0019bcb:	68 ef be ad de       	push   0xdeadbeef
c0019bd0:	57                   	push   edi
c0019bd1:	e8 3a 79 ff ff       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c0019bd6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019bd9:	e8 12 79 ff ff       	call   c00114f0 <TSS::flush()>
c0019bde:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019be4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019be7:	e8 44 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bec:	b8 00 04 00 00       	mov    eax,0x400
c0019bf1:	0f 23 f8             	mov    db7,eax
c0019bf4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019bfe:	e8 df 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c03:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c09:	89 30                	mov    DWORD PTR [eax],esi
c0019c0b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c11:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c14:	58                   	pop    eax
c0019c15:	5a                   	pop    edx
c0019c16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c20:	e8 29 8a ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0019c25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c28:	e8 5f f4 ff ff       	call   c001908c <CPU::detectFeatures()>
c0019c2d:	e8 ce bc ff ff       	call   c0015900 <setupInterruptController()>
c0019c32:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c38:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0019c3d:	83 e0 10             	and    eax,0x10
c0019c40:	83 f8 01             	cmp    eax,0x1
c0019c43:	19 c0                	sbb    eax,eax
c0019c45:	83 e0 46             	and    eax,0x46
c0019c48:	83 c0 1e             	add    eax,0x1e
c0019c4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c4e:	e8 bb d1 ff ff       	call   c0016e0e <setupTimer(int)>
c0019c53:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c5c:	e8 bf fe ff ff       	call   c0019b20 <CPU::setupFeatures()>
c0019c61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c64:	e8 a7 f1 ff ff       	call   c0018e10 <CPU::displayFeatures()>
c0019c69:	83 c4 10             	add    esp,0x10
c0019c6c:	31 c0                	xor    eax,eax
c0019c6e:	5b                   	pop    ebx
c0019c6f:	5e                   	pop    esi
c0019c70:	5f                   	pop    edi
c0019c71:	c3                   	ret    

c0019c72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c72:	57                   	push   edi
c0019c73:	56                   	push   esi
c0019c74:	53                   	push   ebx
c0019c75:	51                   	push   ecx
c0019c76:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c7a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c7d:	0f 02 c0             	lar    eax,ax
c0019c80:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c87:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c8a:	88 ca                	mov    dl,cl
c0019c8c:	c0 ea 06             	shr    dl,0x6
c0019c8f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c93:	89 ca                	mov    edx,ecx
c0019c95:	66 c1 ea 03          	shr    dx,0x3
c0019c99:	83 e2 07             	and    edx,0x7
c0019c9c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ca1:	88 17                	mov    BYTE PTR [edi],dl
c0019ca3:	0f 84 a6 01 00 00    	je     c0019e4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ca9:	83 e1 07             	and    ecx,0x7
c0019cac:	80 f9 04             	cmp    cl,0x4
c0019caf:	0f 84 98 00 00 00    	je     c0019d4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cb5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cba:	0f 95 c0             	setne  al
c0019cbd:	80 f9 05             	cmp    cl,0x5
c0019cc0:	0f 95 c2             	setne  dl
c0019cc3:	08 c2                	or     dl,al
c0019cc5:	74 79                	je     c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019cc7:	84 c9                	test   cl,cl
c0019cc9:	75 05                	jne    c0019cd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ccb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cce:	eb 3c                	jmp    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cd0:	80 f9 01             	cmp    cl,0x1
c0019cd3:	75 05                	jne    c0019cda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019cd5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cd8:	eb 32                	jmp    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cda:	80 f9 02             	cmp    cl,0x2
c0019cdd:	75 05                	jne    c0019ce4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019cdf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ce2:	eb 28                	jmp    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ce4:	31 c0                	xor    eax,eax
c0019ce6:	80 f9 03             	cmp    cl,0x3
c0019ce9:	75 05                	jne    c0019cf0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ceb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cee:	eb 1c                	jmp    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cf0:	80 f9 05             	cmp    cl,0x5
c0019cf3:	75 05                	jne    c0019cfa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cf5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cf8:	eb 12                	jmp    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cfa:	80 f9 06             	cmp    cl,0x6
c0019cfd:	75 05                	jne    c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019cff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d02:	eb 08                	jmp    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d04:	80 f9 07             	cmp    cl,0x7
c0019d07:	75 03                	jne    c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d09:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d0c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d11:	75 10                	jne    c0019d23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d13:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d17:	b9 03 00 00 00       	mov    ecx,0x3
c0019d1c:	01 d0                	add    eax,edx
c0019d1e:	e9 37 01 00 00       	jmp    c0019e5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d23:	b9 02 00 00 00       	mov    ecx,0x2
c0019d28:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d2d:	0f 85 27 01 00 00    	jne    c0019e5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d33:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d36:	b9 06 00 00 00       	mov    ecx,0x6
c0019d3b:	e9 1a 01 00 00       	jmp    c0019e5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d40:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d43:	b9 06 00 00 00       	mov    ecx,0x6
c0019d48:	e9 0f 01 00 00       	jmp    c0019e5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d4d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d50:	88 ca                	mov    dl,cl
c0019d52:	c0 ea 06             	shr    dl,0x6
c0019d55:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d59:	89 ca                	mov    edx,ecx
c0019d5b:	66 c1 ea 03          	shr    dx,0x3
c0019d5f:	83 e2 07             	and    edx,0x7
c0019d62:	80 e1 07             	and    cl,0x7
c0019d65:	75 05                	jne    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d67:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d6a:	eb 4c                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d6c:	80 f9 01             	cmp    cl,0x1
c0019d6f:	75 05                	jne    c0019d76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d71:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d74:	eb 42                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d76:	80 f9 02             	cmp    cl,0x2
c0019d79:	75 05                	jne    c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d7b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d7e:	eb 38                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d80:	80 f9 03             	cmp    cl,0x3
c0019d83:	75 05                	jne    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d85:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d88:	eb 2e                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d8a:	80 f9 04             	cmp    cl,0x4
c0019d8d:	75 12                	jne    c0019da1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d8f:	f6 c4 60             	test   ah,0x60
c0019d92:	75 08                	jne    c0019d9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d94:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d97:	8d 78 14             	lea    edi,[eax+0x14]
c0019d9a:	eb 1c                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d9c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d9f:	eb 17                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da1:	80 f9 05             	cmp    cl,0x5
c0019da4:	75 05                	jne    c0019dab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019da6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019da9:	eb 0d                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dab:	80 f9 06             	cmp    cl,0x6
c0019dae:	75 05                	jne    c0019db5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019db0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019db3:	eb 03                	jmp    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019db8:	84 d2                	test   dl,dl
c0019dba:	75 05                	jne    c0019dc1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019dbc:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dbf:	eb 3c                	jmp    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dc1:	80 fa 01             	cmp    dl,0x1
c0019dc4:	75 05                	jne    c0019dcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019dc6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dc9:	eb 32                	jmp    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dcb:	80 fa 02             	cmp    dl,0x2
c0019dce:	75 05                	jne    c0019dd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019dd0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dd3:	eb 28                	jmp    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dd5:	80 fa 03             	cmp    dl,0x3
c0019dd8:	75 05                	jne    c0019ddf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019dda:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ddd:	eb 1e                	jmp    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ddf:	31 c0                	xor    eax,eax
c0019de1:	80 fa 04             	cmp    dl,0x4
c0019de4:	74 17                	je     c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019de6:	80 fa 05             	cmp    dl,0x5
c0019de9:	75 05                	jne    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019deb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dee:	eb 0d                	jmp    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df0:	80 fa 06             	cmp    dl,0x6
c0019df3:	75 05                	jne    c0019dfa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019df5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019df8:	eb 03                	jmp    c0019dfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dfa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dfd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e02:	0f 94 c2             	sete   dl
c0019e05:	80 f9 05             	cmp    cl,0x5
c0019e08:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e0c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e11:	d3 e0                	shl    eax,cl
c0019e13:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e17:	74 0a                	je     c0019e23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e19:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e1c:	b9 07 00 00 00       	mov    ecx,0x7
c0019e21:	eb 37                	jmp    c0019e5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e23:	01 f8                	add    eax,edi
c0019e25:	b9 03 00 00 00       	mov    ecx,0x3
c0019e2a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e2f:	74 2b                	je     c0019e5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e31:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e36:	75 0d                	jne    c0019e45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e38:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e3c:	01 c8                	add    eax,ecx
c0019e3e:	b9 04 00 00 00       	mov    ecx,0x4
c0019e43:	eb 17                	jmp    c0019e5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e45:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e48:	b9 07 00 00 00       	mov    ecx,0x7
c0019e4d:	eb 0d                	jmp    c0019e5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e4f:	b9 02 00 00 00       	mov    ecx,0x2
c0019e54:	b2 01                	mov    dl,0x1
c0019e56:	31 c0                	xor    eax,eax
c0019e58:	eb 02                	jmp    c0019e5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e5a:	31 d2                	xor    edx,edx
c0019e5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e60:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e62:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e66:	88 11                	mov    BYTE PTR [ecx],dl
c0019e68:	5a                   	pop    edx
c0019e69:	5b                   	pop    ebx
c0019e6a:	5e                   	pop    esi
c0019e6b:	5f                   	pop    edi
c0019e6c:	c3                   	ret    

c0019e6d <Krnl::smpEntry()>:
c0019e6d:	eb fe                	jmp    c0019e6d <Krnl::smpEntry()>

c0019e6f <Krnl::startCPU(int)>:
c0019e6f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019e74:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e7b:	0f 84 36 01 00 00    	je     c0019fb7 <Krnl::startCPU(int)+0x148>
c0019e81:	53                   	push   ebx
c0019e82:	83 ec 08             	sub    esp,0x8
c0019e85:	e8 fc 3e 00 00       	call   c001dd86 <lockScheduler()>
c0019e8a:	52                   	push   edx
c0019e8b:	52                   	push   edx
c0019e8c:	6a 1b                	push   0x1b
c0019e8e:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019e94:	e8 4f 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e99:	59                   	pop    ecx
c0019e9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e9f:	89 c3                	mov    ebx,eax
c0019ea1:	58                   	pop    eax
c0019ea2:	53                   	push   ebx
c0019ea3:	68 8c b9 02 c0       	push   0xc002b98c
c0019ea8:	e8 4d 90 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0019ead:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ebb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ec5:	c1 e0 18             	shl    eax,0x18
c0019ec8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ece:	83 c4 10             	add    esp,0x10
c0019ed1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ed7:	09 c2                	or     edx,eax
c0019ed9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019edf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ee5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019eeb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ef1:	80 cd c5             	or     ch,0xc5
c0019ef4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019efa:	f3 90                	pause  
c0019efc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019efe:	0f ba e1 0c          	bt     ecx,0xc
c0019f02:	72 f6                	jb     c0019efa <Krnl::startCPU(int)+0x8b>
c0019f04:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f0a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f10:	09 c1                	or     ecx,eax
c0019f12:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f18:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f1e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f24:	80 cd 85             	or     ch,0x85
c0019f27:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f2d:	f3 90                	pause  
c0019f2f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f31:	0f ba e1 0c          	bt     ecx,0xc
c0019f35:	72 f6                	jb     c0019f2d <Krnl::startCPU(int)+0xbe>
c0019f37:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f41:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f47:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f4d:	09 c1                	or     ecx,eax
c0019f4f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f55:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f5b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f61:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f67:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f6d:	f3 90                	pause  
c0019f6f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f71:	0f ba e1 0c          	bt     ecx,0xc
c0019f75:	72 f6                	jb     c0019f6d <Krnl::startCPU(int)+0xfe>
c0019f77:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f81:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f87:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f8d:	09 c8                	or     eax,ecx
c0019f8f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f95:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f9b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fa0:	0d 02 06 00 00       	or     eax,0x602
c0019fa5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fab:	f3 90                	pause  
c0019fad:	8b 02                	mov    eax,DWORD PTR [edx]
c0019faf:	0f ba e0 0c          	bt     eax,0xc
c0019fb3:	72 f6                	jb     c0019fab <Krnl::startCPU(int)+0x13c>
c0019fb5:	eb fe                	jmp    c0019fb5 <Krnl::startCPU(int)+0x146>
c0019fb7:	c3                   	ret    

c0019fb8 <Krnl::startCPUs()>:
c0019fb8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019fbd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fc3:	88 c2                	mov    dl,al
c0019fc5:	83 e2 0a             	and    edx,0xa
c0019fc8:	80 fa 0a             	cmp    dl,0xa
c0019fcb:	75 09                	jne    c0019fd6 <Krnl::startCPUs()+0x1e>
c0019fcd:	a8 01                	test   al,0x1
c0019fcf:	74 05                	je     c0019fd6 <Krnl::startCPUs()+0x1e>
c0019fd1:	e9 c5 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fd6:	c3                   	ret    
c0019fd7:	90                   	nop

c0019fd8 <EnvVarContainer::getEnv(char const*)>:
c0019fd8:	57                   	push   edi
c0019fd9:	56                   	push   esi
c0019fda:	53                   	push   ebx
c0019fdb:	31 db                	xor    ebx,ebx
c0019fdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fe1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fe3:	7e 2b                	jle    c001a010 <EnvVarContainer::getEnv(char const*)+0x38>
c0019fe5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fec:	50                   	push   eax
c0019fed:	50                   	push   eax
c0019fee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ff1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ff4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ff8:	e8 c3 68 fe ff       	call   c00008c0 <strcmp>
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	85 c0                	test   eax,eax
c001a002:	75 09                	jne    c001a00d <EnvVarContainer::getEnv(char const*)+0x35>
c001a004:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a007:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a00b:	eb 05                	jmp    c001a012 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a00d:	43                   	inc    ebx
c001a00e:	eb d1                	jmp    c0019fe1 <EnvVarContainer::getEnv(char const*)+0x9>
c001a010:	31 c0                	xor    eax,eax
c001a012:	5b                   	pop    ebx
c001a013:	5e                   	pop    esi
c001a014:	5f                   	pop    edi
c001a015:	c3                   	ret    

c001a016 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a016:	57                   	push   edi
c001a017:	56                   	push   esi
c001a018:	53                   	push   ebx
c001a019:	83 ec 1c             	sub    esp,0x1c
c001a01c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a020:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a024:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a028:	57                   	push   edi
c001a029:	e8 66 67 fe ff       	call   c0000794 <strlen>
c001a02e:	40                   	inc    eax
c001a02f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a032:	e8 09 58 ff ff       	call   c000f840 <malloc>
c001a037:	89 34 24             	mov    DWORD PTR [esp],esi
c001a03a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a03e:	e8 51 67 fe ff       	call   c0000794 <strlen>
c001a043:	40                   	inc    eax
c001a044:	89 04 24             	mov    DWORD PTR [esp],eax
c001a047:	e8 f4 57 ff ff       	call   c000f840 <malloc>
c001a04c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a04f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a053:	e8 3c 67 fe ff       	call   c0000794 <strlen>
c001a058:	83 c4 0c             	add    esp,0xc
c001a05b:	40                   	inc    eax
c001a05c:	50                   	push   eax
c001a05d:	6a 00                	push   0x0
c001a05f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a063:	e8 10 67 fe ff       	call   c0000778 <memset>
c001a068:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a06b:	e8 24 67 fe ff       	call   c0000794 <strlen>
c001a070:	83 c4 0c             	add    esp,0xc
c001a073:	40                   	inc    eax
c001a074:	50                   	push   eax
c001a075:	57                   	push   edi
c001a076:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a07a:	e8 c5 66 fe ff       	call   c0000744 <memcpy>
c001a07f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a082:	e8 0d 67 fe ff       	call   c0000794 <strlen>
c001a087:	83 c4 0c             	add    esp,0xc
c001a08a:	40                   	inc    eax
c001a08b:	50                   	push   eax
c001a08c:	6a 00                	push   0x0
c001a08e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a092:	e8 e1 66 fe ff       	call   c0000778 <memset>
c001a097:	89 34 24             	mov    DWORD PTR [esp],esi
c001a09a:	e8 f5 66 fe ff       	call   c0000794 <strlen>
c001a09f:	83 c4 0c             	add    esp,0xc
c001a0a2:	40                   	inc    eax
c001a0a3:	50                   	push   eax
c001a0a4:	56                   	push   esi
c001a0a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0a9:	e8 96 66 fe ff       	call   c0000744 <memcpy>
c001a0ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b0:	40                   	inc    eax
c001a0b1:	89 03                	mov    DWORD PTR [ebx],eax
c001a0b3:	c1 e0 03             	shl    eax,0x3
c001a0b6:	5a                   	pop    edx
c001a0b7:	59                   	pop    ecx
c001a0b8:	50                   	push   eax
c001a0b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0bc:	e8 6b 57 ff ff       	call   c000f82c <realloc>
c001a0c1:	83 c4 0c             	add    esp,0xc
c001a0c4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0c7:	6a 08                	push   0x8
c001a0c9:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0cd:	52                   	push   edx
c001a0ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0d0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0d4:	50                   	push   eax
c001a0d5:	e8 6a 66 fe ff       	call   c0000744 <memcpy>
c001a0da:	83 c4 20             	add    esp,0x20
c001a0dd:	5b                   	pop    ebx
c001a0de:	5e                   	pop    esi
c001a0df:	5f                   	pop    edi
c001a0e0:	c3                   	ret    
c001a0e1:	90                   	nop

c001a0e2 <EnvVarContainer::deleteEnv(char const*)>:
c001a0e2:	c3                   	ret    
c001a0e3:	90                   	nop

c001a0e4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0e4:	55                   	push   ebp
c001a0e5:	57                   	push   edi
c001a0e6:	56                   	push   esi
c001a0e7:	53                   	push   ebx
c001a0e8:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0ee:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0f5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0fc:	68 14 01 00 00       	push   0x114
c001a101:	e8 3a 57 ff ff       	call   c000f840 <malloc>
c001a106:	83 c4 0c             	add    esp,0xc
c001a109:	89 c7                	mov    edi,eax
c001a10b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a10e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a115:	50                   	push   eax
c001a116:	e8 37 93 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001a11b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a11e:	e8 01 96 ff ff       	call   c0013724 <File::exists()>
c001a123:	83 c4 10             	add    esp,0x10
c001a126:	84 c0                	test   al,al
c001a128:	75 31                	jne    c001a15b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a12a:	51                   	push   ecx
c001a12b:	51                   	push   ecx
c001a12c:	6a 12                	push   0x12
c001a12e:	57                   	push   edi
c001a12f:	e8 82 93 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001a134:	8b 07                	mov    eax,DWORD PTR [edi]
c001a136:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a139:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a13c:	e8 53 66 fe ff       	call   c0000794 <strlen>
c001a141:	5a                   	pop    edx
c001a142:	31 d2                	xor    edx,edx
c001a144:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a148:	51                   	push   ecx
c001a149:	55                   	push   ebp
c001a14a:	52                   	push   edx
c001a14b:	50                   	push   eax
c001a14c:	57                   	push   edi
c001a14d:	ff d3                	call   ebx
c001a14f:	83 c4 14             	add    esp,0x14
c001a152:	57                   	push   edi
c001a153:	e8 bc 93 ff ff       	call   c0013514 <File::close()>
c001a158:	83 c4 10             	add    esp,0x10
c001a15b:	31 db                	xor    ebx,ebx
c001a15d:	50                   	push   eax
c001a15e:	31 ed                	xor    ebp,ebp
c001a160:	68 00 01 00 00       	push   0x100
c001a165:	6a 00                	push   0x0
c001a167:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a16b:	50                   	push   eax
c001a16c:	e8 07 66 fe ff       	call   c0000778 <memset>
c001a171:	58                   	pop    eax
c001a172:	5a                   	pop    edx
c001a173:	6a 01                	push   0x1
c001a175:	57                   	push   edi
c001a176:	e8 3b 93 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001a17b:	83 c4 10             	add    esp,0x10
c001a17e:	83 ec 0c             	sub    esp,0xc
c001a181:	8b 07                	mov    eax,DWORD PTR [edi]
c001a183:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a187:	51                   	push   ecx
c001a188:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a18c:	52                   	push   edx
c001a18d:	6a 00                	push   0x0
c001a18f:	6a 01                	push   0x1
c001a191:	57                   	push   edi
c001a192:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a195:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a199:	83 c4 20             	add    esp,0x20
c001a19c:	3c 0d                	cmp    al,0xd
c001a19e:	0f 84 12 01 00 00    	je     c001a2b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1a4:	85 db                	test   ebx,ebx
c001a1a6:	0f 84 fd 00 00 00    	je     c001a2a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1ac:	3c 0a                	cmp    al,0xa
c001a1ae:	74 13                	je     c001a1c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1b5:	74 0c                	je     c001a1c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1b7:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1bd:	0f 8e e6 00 00 00    	jle    c001a2a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1c3:	83 ec 0c             	sub    esp,0xc
c001a1c6:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1c9:	29 dd                	sub    ebp,ebx
c001a1cb:	52                   	push   edx
c001a1cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1d0:	e8 6b 56 ff ff       	call   c000f840 <malloc>
c001a1d5:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1dc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1e3:	e8 58 56 ff ff       	call   c000f840 <malloc>
c001a1e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1ec:	83 c4 0c             	add    esp,0xc
c001a1ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1f3:	52                   	push   edx
c001a1f4:	6a 00                	push   0x0
c001a1f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1fa:	e8 79 65 fe ff       	call   c0000778 <memset>
c001a1ff:	83 c4 0c             	add    esp,0xc
c001a202:	53                   	push   ebx
c001a203:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a207:	55                   	push   ebp
c001a208:	01 eb                	add    ebx,ebp
c001a20a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a20e:	e8 31 65 fe ff       	call   c0000744 <memcpy>
c001a213:	83 c4 0c             	add    esp,0xc
c001a216:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a21a:	51                   	push   ecx
c001a21b:	6a 00                	push   0x0
c001a21d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a221:	e8 52 65 fe ff       	call   c0000778 <memset>
c001a226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a229:	e8 66 65 fe ff       	call   c0000794 <strlen>
c001a22e:	83 c4 0c             	add    esp,0xc
c001a231:	50                   	push   eax
c001a232:	53                   	push   ebx
c001a233:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a237:	e8 08 65 fe ff       	call   c0000744 <memcpy>
c001a23c:	5b                   	pop    ebx
c001a23d:	58                   	pop    eax
c001a23e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a242:	68 9d b9 02 c0       	push   0xc002b99d
c001a247:	e8 ae 8c ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a24c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a24e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a251:	40                   	inc    eax
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	89 06                	mov    DWORD PTR [esi],eax
c001a257:	85 d2                	test   edx,edx
c001a259:	75 0c                	jne    c001a267 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a25b:	83 ec 0c             	sub    esp,0xc
c001a25e:	6a 08                	push   0x8
c001a260:	e8 db 55 ff ff       	call   c000f840 <malloc>
c001a265:	eb 0c                	jmp    c001a273 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a267:	c1 e0 03             	shl    eax,0x3
c001a26a:	51                   	push   ecx
c001a26b:	51                   	push   ecx
c001a26c:	50                   	push   eax
c001a26d:	52                   	push   edx
c001a26e:	e8 b9 55 ff ff       	call   c000f82c <realloc>
c001a273:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	31 db                	xor    ebx,ebx
c001a27b:	52                   	push   edx
c001a27c:	6a 08                	push   0x8
c001a27e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a282:	50                   	push   eax
c001a283:	8b 16                	mov    edx,DWORD PTR [esi]
c001a285:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a288:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a28c:	50                   	push   eax
c001a28d:	e8 b2 64 fe ff       	call   c0000744 <memcpy>
c001a292:	83 c4 0c             	add    esp,0xc
c001a295:	68 00 01 00 00       	push   0x100
c001a29a:	6a 00                	push   0x0
c001a29c:	55                   	push   ebp
c001a29d:	31 ed                	xor    ebp,ebp
c001a29f:	e8 d4 64 fe ff       	call   c0000778 <memset>
c001a2a4:	83 c4 10             	add    esp,0x10
c001a2a7:	eb 0d                	jmp    c001a2b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2a9:	3c 3d                	cmp    al,0x3d
c001a2ab:	74 07                	je     c001a2b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2ad:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2b1:	45                   	inc    ebp
c001a2b2:	eb 02                	jmp    c001a2b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2b4:	89 eb                	mov    ebx,ebp
c001a2b6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2bb:	0f 85 bd fe ff ff    	jne    c001a17e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2c1:	50                   	push   eax
c001a2c2:	50                   	push   eax
c001a2c3:	ff 36                	push   DWORD PTR [esi]
c001a2c5:	68 ab b9 02 c0       	push   0xc002b9ab
c001a2ca:	e8 2b 8c ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a2cf:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2d5:	5b                   	pop    ebx
c001a2d6:	5e                   	pop    esi
c001a2d7:	5f                   	pop    edi
c001a2d8:	5d                   	pop    ebp
c001a2d9:	c3                   	ret    

c001a2da <EnvVarContainer::__loadSystem()>:
c001a2da:	83 ec 10             	sub    esp,0x10
c001a2dd:	68 c0 d8 02 c0       	push   0xc002d8c0
c001a2e2:	68 d6 b9 02 c0       	push   0xc002b9d6
c001a2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2eb:	e8 f4 fd ff ff       	call   c001a0e4 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2f0:	83 c4 1c             	add    esp,0x1c
c001a2f3:	c3                   	ret    

c001a2f4 <EnvVarContainer::__loadUser()>:
c001a2f4:	c3                   	ret    
c001a2f5:	90                   	nop

c001a2f6 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a308:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a30b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a30f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a316:	90                   	nop
c001a317:	c3                   	ret    

c001a318 <EnvVarContainer::~EnvVarContainer()>:
c001a318:	83 ec 0c             	sub    esp,0xc
c001a31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a31f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a322:	85 c0                	test   eax,eax
c001a324:	74 1d                	je     c001a343 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a32a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a32c:	85 c0                	test   eax,eax
c001a32e:	74 13                	je     c001a343 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a337:	83 ec 0c             	sub    esp,0xc
c001a33a:	50                   	push   eax
c001a33b:	e8 10 55 ff ff       	call   c000f850 <free>
c001a340:	83 c4 10             	add    esp,0x10
c001a343:	90                   	nop
c001a344:	83 c4 0c             	add    esp,0xc
c001a347:	c3                   	ret    

c001a348 <Krnl::getEnv(Process*, char const*)>:
c001a348:	53                   	push   ebx
c001a349:	83 ec 08             	sub    esp,0x8
c001a34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a350:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a354:	39 05 f4 18 03 c0    	cmp    DWORD PTR ds:0xc00318f4,eax
c001a35a:	74 04                	je     c001a360 <Krnl::getEnv(Process*, char const*)+0x18>
c001a35c:	85 c0                	test   eax,eax
c001a35e:	75 0b                	jne    c001a36b <Krnl::getEnv(Process*, char const*)+0x23>
c001a360:	a1 d4 0e 03 c0       	mov    eax,ds:0xc0030ed4
c001a365:	85 c0                	test   eax,eax
c001a367:	75 19                	jne    c001a382 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a369:	eb 27                	jmp    c001a392 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a36b:	52                   	push   edx
c001a36c:	52                   	push   edx
c001a36d:	53                   	push   ebx
c001a36e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a374:	e8 5f fc ff ff       	call   c0019fd8 <EnvVarContainer::getEnv(char const*)>
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	85 c0                	test   eax,eax
c001a37e:	75 28                	jne    c001a3a8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a380:	eb de                	jmp    c001a360 <Krnl::getEnv(Process*, char const*)+0x18>
c001a382:	52                   	push   edx
c001a383:	52                   	push   edx
c001a384:	53                   	push   ebx
c001a385:	50                   	push   eax
c001a386:	e8 4d fc ff ff       	call   c0019fd8 <EnvVarContainer::getEnv(char const*)>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	85 c0                	test   eax,eax
c001a390:	75 16                	jne    c001a3a8 <Krnl::getEnv(Process*, char const*)+0x60>
c001a392:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a396:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a39b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a39f:	83 c4 08             	add    esp,0x8
c001a3a2:	5b                   	pop    ebx
c001a3a3:	e9 30 fc ff ff       	jmp    c0019fd8 <EnvVarContainer::getEnv(char const*)>
c001a3a8:	83 c4 08             	add    esp,0x8
c001a3ab:	5b                   	pop    ebx
c001a3ac:	c3                   	ret    

c001a3ad <Krnl::setEnvSystem(char const*, char const*)>:
c001a3ad:	83 ec 10             	sub    esp,0x10
c001a3b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3b8:	ff 35 d8 0e 03 c0    	push   DWORD PTR ds:0xc0030ed8
c001a3be:	e8 53 fc ff ff       	call   c001a016 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3c3:	83 c4 1c             	add    esp,0x1c
c001a3c6:	c3                   	ret    

c001a3c7 <Krnl::setEnvUser(char const*, char const*)>:
c001a3c7:	a1 d4 0e 03 c0       	mov    eax,ds:0xc0030ed4
c001a3cc:	85 c0                	test   eax,eax
c001a3ce:	74 15                	je     c001a3e5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3d0:	83 ec 10             	sub    esp,0x10
c001a3d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3db:	50                   	push   eax
c001a3dc:	e8 35 fc ff ff       	call   c001a016 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3e1:	83 c4 1c             	add    esp,0x1c
c001a3e4:	c3                   	ret    
c001a3e5:	c3                   	ret    

c001a3e6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ea:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a3f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3f4:	e9 1d fc ff ff       	jmp    c001a016 <EnvVarContainer::setEnv(char const*, char const*)>

c001a3f9 <Krnl::deleteEnvSystem(char const*)>:
c001a3f9:	c3                   	ret    

c001a3fa <Krnl::deleteEnvUser(char const*)>:
c001a3fa:	c3                   	ret    

c001a3fb <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3fb:	c3                   	ret    

c001a3fc <Krnl::newProcessEnv(Process*)>:
c001a3fc:	83 ec 28             	sub    esp,0x28
c001a3ff:	6a 0c                	push   0xc
c001a401:	e8 3a 54 ff ff       	call   c000f840 <malloc>
c001a406:	5a                   	pop    edx
c001a407:	59                   	pop    ecx
c001a408:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a40c:	50                   	push   eax
c001a40d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a411:	e8 e0 fe ff ff       	call   c001a2f6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a41a:	83 c4 2c             	add    esp,0x2c
c001a41d:	c3                   	ret    

c001a41e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a41e:	56                   	push   esi
c001a41f:	53                   	push   ebx
c001a420:	83 ec 10             	sub    esp,0x10
c001a423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a427:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a42d:	6a 0c                	push   0xc
c001a42f:	e8 0c 54 ff ff       	call   c000f840 <malloc>
c001a434:	89 c3                	mov    ebx,eax
c001a436:	58                   	pop    eax
c001a437:	5a                   	pop    edx
c001a438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a43c:	53                   	push   ebx
c001a43d:	e8 b4 fe ff ff       	call   c001a2f6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a442:	8b 06                	mov    eax,DWORD PTR [esi]
c001a444:	89 03                	mov    DWORD PTR [ebx],eax
c001a446:	c1 e0 03             	shl    eax,0x3
c001a449:	89 04 24             	mov    DWORD PTR [esp],eax
c001a44c:	e8 ef 53 ff ff       	call   c000f840 <malloc>
c001a451:	83 c4 0c             	add    esp,0xc
c001a454:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a457:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a459:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a460:	52                   	push   edx
c001a461:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a464:	50                   	push   eax
c001a465:	e8 da 62 fe ff       	call   c0000744 <memcpy>
c001a46a:	89 d8                	mov    eax,ebx
c001a46c:	83 c4 14             	add    esp,0x14
c001a46f:	5b                   	pop    ebx
c001a470:	5e                   	pop    esi
c001a471:	c3                   	ret    

c001a472 <Krnl::loadSystemEnv()>:
c001a472:	53                   	push   ebx
c001a473:	83 ec 14             	sub    esp,0x14
c001a476:	6a 0c                	push   0xc
c001a478:	e8 c3 53 ff ff       	call   c000f840 <malloc>
c001a47d:	89 c3                	mov    ebx,eax
c001a47f:	58                   	pop    eax
c001a480:	5a                   	pop    edx
c001a481:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001a487:	53                   	push   ebx
c001a488:	e8 69 fe ff ff       	call   c001a2f6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a48d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a490:	89 1d d8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed8,ebx
c001a496:	e8 3f fe ff ff       	call   c001a2da <EnvVarContainer::__loadSystem()>
c001a49b:	83 c4 18             	add    esp,0x18
c001a49e:	5b                   	pop    ebx
c001a49f:	c3                   	ret    

c001a4a0 <Krnl::loadUserEnv()>:
c001a4a0:	53                   	push   ebx
c001a4a1:	83 ec 14             	sub    esp,0x14
c001a4a4:	6a 0c                	push   0xc
c001a4a6:	e8 95 53 ff ff       	call   c000f840 <malloc>
c001a4ab:	89 c3                	mov    ebx,eax
c001a4ad:	58                   	pop    eax
c001a4ae:	5a                   	pop    edx
c001a4af:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001a4b5:	53                   	push   ebx
c001a4b6:	e8 3b fe ff ff       	call   c001a2f6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4bb:	89 1d d4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed4,ebx
c001a4c1:	83 c4 18             	add    esp,0x18
c001a4c4:	5b                   	pop    ebx
c001a4c5:	c3                   	ret    

c001a4c6 <Krnl::flushEnv()>:
c001a4c6:	c3                   	ret    

c001a4c7 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4cb:	8b 15 d4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ed4
c001a4d1:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4d7:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4de:	03 01                	add    eax,DWORD PTR [ecx]
c001a4e0:	85 d2                	test   edx,edx
c001a4e2:	74 02                	je     c001a4e6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4e4:	03 02                	add    eax,DWORD PTR [edx]
c001a4e6:	c3                   	ret    

c001a4e7 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4e7:	57                   	push   edi
c001a4e8:	8b 0d d4 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ed4
c001a4ee:	56                   	push   esi
c001a4ef:	85 c9                	test   ecx,ecx
c001a4f1:	53                   	push   ebx
c001a4f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4fa:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a500:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a504:	8b 02                	mov    eax,DWORD PTR [edx]
c001a506:	75 47                	jne    c001a54f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a508:	39 c3                	cmp    ebx,eax
c001a50a:	7c 47                	jl     c001a553 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a50c:	8b 15 d8 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ed8
c001a512:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a514:	01 c1                	add    ecx,eax
c001a516:	39 d9                	cmp    ecx,ebx
c001a518:	7e 6c                	jle    c001a586 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a51a:	51                   	push   ecx
c001a51b:	89 d9                	mov    ecx,ebx
c001a51d:	29 c1                	sub    ecx,eax
c001a51f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a522:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a526:	53                   	push   ebx
c001a527:	68 f8 b9 02 c0       	push   0xc002b9f8
c001a52c:	e8 c9 89 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a531:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a537:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a539:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a53e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a541:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a545:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a548:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a54b:	89 06                	mov    DWORD PTR [esi],eax
c001a54d:	eb 51                	jmp    c001a5a0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a54f:	39 c3                	cmp    ebx,eax
c001a551:	7d 05                	jge    c001a558 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a553:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a556:	eb 20                	jmp    c001a578 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a558:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a55a:	8d 14 07             	lea    edx,[edi+eax*1]
c001a55d:	39 da                	cmp    edx,ebx
c001a55f:	7e 04                	jle    c001a565 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a561:	29 c3                	sub    ebx,eax
c001a563:	eb 10                	jmp    c001a575 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a565:	8b 0d d8 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ed8
c001a56b:	03 11                	add    edx,DWORD PTR [ecx]
c001a56d:	39 da                	cmp    edx,ebx
c001a56f:	7e 15                	jle    c001a586 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a571:	29 c3                	sub    ebx,eax
c001a573:	29 fb                	sub    ebx,edi
c001a575:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a578:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a57c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a57f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a582:	89 06                	mov    DWORD PTR [esi],eax
c001a584:	eb 1d                	jmp    c001a5a3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	68 0c ba 02 c0       	push   0xc002ba0c
c001a58e:	e8 18 00 00 00       	call   c001a5ab <Krnl::panic(char const*)>
c001a593:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a599:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5a0:	83 c4 10             	add    esp,0x10
c001a5a3:	89 f0                	mov    eax,esi
c001a5a5:	5b                   	pop    ebx
c001a5a6:	5e                   	pop    esi
c001a5a7:	5f                   	pop    edi
c001a5a8:	c2 04 00             	ret    0x4

c001a5ab <Krnl::panic(char const*)>:
c001a5ab:	55                   	push   ebp
c001a5ac:	89 e5                	mov    ebp,esp
c001a5ae:	53                   	push   ebx
c001a5af:	83 ec 0c             	sub    esp,0xc
c001a5b2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5b5:	fa                   	cli    
c001a5b6:	c6 05 e4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee4,0x1
c001a5bd:	53                   	push   ebx
c001a5be:	c6 05 c4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c4,0x0
c001a5c5:	68 26 ba 02 c0       	push   0xc002ba26
c001a5ca:	e8 2b 89 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a5cf:	58                   	pop    eax
c001a5d0:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5db:	e8 71 67 ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001a5e0:	83 c4 0c             	add    esp,0xc
c001a5e3:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5e8:	6a 01                	push   0x1
c001a5ea:	6a 0f                	push   0xf
c001a5ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f2:	e8 8b 61 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5f7:	58                   	pop    eax
c001a5f8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a603:	e8 ea 69 ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c001a608:	58                   	pop    eax
c001a609:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a60e:	5a                   	pop    edx
c001a60f:	68 3f ba 02 c0       	push   0xc002ba3f
c001a614:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a61a:	e8 51 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a61f:	59                   	pop    ecx
c001a620:	58                   	pop    eax
c001a621:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a626:	68 e4 ba 02 c0       	push   0xc002bae4
c001a62b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a631:	e8 3a 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a636:	58                   	pop    eax
c001a637:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a63c:	5a                   	pop    edx
c001a63d:	68 5b ba 02 c0       	push   0xc002ba5b
c001a642:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a648:	e8 23 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a64d:	59                   	pop    ecx
c001a64e:	58                   	pop    eax
c001a64f:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a654:	53                   	push   ebx
c001a655:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65b:	e8 10 6b ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a660:	58                   	pop    eax
c001a661:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a666:	5a                   	pop    edx
c001a667:	68 7b ba 02 c0       	push   0xc002ba7b
c001a66c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a672:	e8 f9 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a677:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001a67c:	83 c4 10             	add    esp,0x10
c001a67f:	85 c0                	test   eax,eax
c001a681:	74 02                	je     c001a685 <Krnl::panic(char const*)+0xda>
c001a683:	ff d0                	call   eax
c001a685:	83 ec 0c             	sub    esp,0xc
c001a688:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a68b:	e8 fd 2f 00 00       	call   c001d68d <Thr::getDriverNameFromAddress(unsigned long)>
c001a690:	83 c4 10             	add    esp,0x10
c001a693:	89 c3                	mov    ebx,eax
c001a695:	85 c0                	test   eax,eax
c001a697:	0f 84 50 02 00 00    	je     c001a8ed <Krnl::panic(char const*)+0x342>
c001a69d:	83 ec 08             	sub    esp,0x8
c001a6a0:	8b 15 f4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318f4
c001a6a6:	68 20 bb 02 c0       	push   0xc002bb20
c001a6ab:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6b1:	e8 ba 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6b6:	58                   	pop    eax
c001a6b7:	5a                   	pop    edx
c001a6b8:	8b 15 f4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318f4
c001a6be:	68 5b ba 02 c0       	push   0xc002ba5b
c001a6c3:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6c9:	e8 a2 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6ce:	59                   	pop    ecx
c001a6cf:	58                   	pop    eax
c001a6d0:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6d5:	53                   	push   ebx
c001a6d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6dc:	e8 8f 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	83 ec 08             	sub    esp,0x8
c001a6e7:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6ec:	68 7a ba 02 c0       	push   0xc002ba7a
c001a6f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f7:	e8 74 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6fc:	58                   	pop    eax
c001a6fd:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a702:	5a                   	pop    edx
c001a703:	68 78 bb 02 c0       	push   0xc002bb78
c001a708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70e:	e8 5d 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a713:	59                   	pop    ecx
c001a714:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a719:	5b                   	pop    ebx
c001a71a:	68 b8 bb 02 c0       	push   0xc002bbb8
c001a71f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a725:	e8 46 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a72a:	58                   	pop    eax
c001a72b:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a730:	5a                   	pop    edx
c001a731:	68 66 ba 02 c0       	push   0xc002ba66
c001a736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73c:	e8 2f 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a741:	59                   	pop    ecx
c001a742:	5b                   	pop    ebx
c001a743:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a746:	68 7e ba 02 c0       	push   0xc002ba7e
c001a74b:	e8 aa 87 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a750:	58                   	pop    eax
c001a751:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a754:	5a                   	pop    edx
c001a755:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a758:	68 87 ba 02 c0       	push   0xc002ba87
c001a75d:	e8 98 87 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a762:	59                   	pop    ecx
c001a763:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a766:	5b                   	pop    ebx
c001a767:	8b 00                	mov    eax,DWORD PTR [eax]
c001a769:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a76c:	68 90 ba 02 c0       	push   0xc002ba90
c001a771:	e8 84 87 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001a776:	58                   	pop    eax
c001a777:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a77c:	5a                   	pop    edx
c001a77d:	68 fc bb 02 c0       	push   0xc002bbfc
c001a782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a788:	e8 e3 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a78d:	59                   	pop    ecx
c001a78e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a793:	5b                   	pop    ebx
c001a794:	68 99 ba 02 c0       	push   0xc002ba99
c001a799:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a79f:	e8 cc 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7a4:	0f 20 c0             	mov    eax,cr0
c001a7a7:	5a                   	pop    edx
c001a7a8:	59                   	pop    ecx
c001a7a9:	50                   	push   eax
c001a7aa:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b5:	e8 dc 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a7ba:	5b                   	pop    ebx
c001a7bb:	58                   	pop    eax
c001a7bc:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7c1:	68 a3 ba 02 c0       	push   0xc002baa3
c001a7c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7cc:	e8 9f 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7d1:	0f 20 d0             	mov    eax,cr2
c001a7d4:	5a                   	pop    edx
c001a7d5:	59                   	pop    ecx
c001a7d6:	50                   	push   eax
c001a7d7:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e2:	e8 af 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a7e7:	5b                   	pop    ebx
c001a7e8:	58                   	pop    eax
c001a7e9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7ee:	68 ad ba 02 c0       	push   0xc002baad
c001a7f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f9:	e8 72 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7fe:	0f 20 d8             	mov    eax,cr3
c001a801:	5a                   	pop    edx
c001a802:	59                   	pop    ecx
c001a803:	50                   	push   eax
c001a804:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a809:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a80f:	e8 82 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a814:	5b                   	pop    ebx
c001a815:	58                   	pop    eax
c001a816:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a81b:	68 c0 ba 02 c0       	push   0xc002bac0
c001a820:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a826:	e8 45 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a82b:	0f 20 e0             	mov    eax,cr4
c001a82e:	5a                   	pop    edx
c001a82f:	59                   	pop    ecx
c001a830:	50                   	push   eax
c001a831:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a836:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83c:	e8 55 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a841:	5b                   	pop    ebx
c001a842:	58                   	pop    eax
c001a843:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a848:	68 ca ba 02 c0       	push   0xc002baca
c001a84d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a853:	e8 18 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a858:	5a                   	pop    edx
c001a859:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a85e:	59                   	pop    ecx
c001a85f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a865:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a868:	50                   	push   eax
c001a869:	e8 28 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a86e:	5b                   	pop    ebx
c001a86f:	58                   	pop    eax
c001a870:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a875:	68 e1 ba 02 c0       	push   0xc002bae1
c001a87a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a880:	e8 eb 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a885:	5a                   	pop    edx
c001a886:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a88b:	59                   	pop    ecx
c001a88c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a892:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a895:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a898:	50                   	push   eax
c001a899:	e8 f8 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a89e:	5b                   	pop    ebx
c001a89f:	58                   	pop    eax
c001a8a0:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8a5:	68 e1 ba 02 c0       	push   0xc002bae1
c001a8aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b0:	e8 bb 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8b5:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8bd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8c3:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8c5:	59                   	pop    ecx
c001a8c6:	5b                   	pop    ebx
c001a8c7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8ca:	50                   	push   eax
c001a8cb:	e8 c6 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	b2 fe                	mov    dl,0xfe
c001a8d5:	e4 60                	in     al,0x60
c001a8d7:	3c 1c                	cmp    al,0x1c
c001a8d9:	74 04                	je     c001a8df <Krnl::panic(char const*)+0x334>
c001a8db:	3c 5a                	cmp    al,0x5a
c001a8dd:	75 f6                	jne    c001a8d5 <Krnl::panic(char const*)+0x32a>
c001a8df:	e4 64                	in     al,0x64
c001a8e1:	a8 02                	test   al,0x2
c001a8e3:	75 fa                	jne    c001a8df <Krnl::panic(char const*)+0x334>
c001a8e5:	88 d0                	mov    al,dl
c001a8e7:	e6 64                	out    0x64,al
c001a8e9:	fa                   	cli    
c001a8ea:	f4                   	hlt    
c001a8eb:	eb e8                	jmp    c001a8d5 <Krnl::panic(char const*)+0x32a>
c001a8ed:	50                   	push   eax
c001a8ee:	50                   	push   eax
c001a8ef:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8f4:	68 4c bb 02 c0       	push   0xc002bb4c
c001a8f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ff:	e8 6c 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a904:	58                   	pop    eax
c001a905:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a90a:	5a                   	pop    edx
c001a90b:	68 5b ba 02 c0       	push   0xc002ba5b
c001a910:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a916:	e8 55 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a91b:	59                   	pop    ecx
c001a91c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a921:	5b                   	pop    ebx
c001a922:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a925:	83 c0 0c             	add    eax,0xc
c001a928:	50                   	push   eax
c001a929:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a92e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a934:	e8 37 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a939:	83 c4 10             	add    esp,0x10
c001a93c:	e9 a3 fd ff ff       	jmp    c001a6e4 <Krnl::panic(char const*)+0x139>

c001a941 <Net::switchEndian16(unsigned short)>:
c001a941:	83 ec 04             	sub    esp,0x4
c001a944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a948:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a94c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a950:	c1 f8 08             	sar    eax,0x8
c001a953:	89 c2                	mov    edx,eax
c001a955:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a959:	c1 e0 08             	shl    eax,0x8
c001a95c:	09 d0                	or     eax,edx
c001a95e:	83 c4 04             	add    esp,0x4
c001a961:	c3                   	ret    

c001a962 <Net::switchEndian32(unsigned int)>:
c001a962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a966:	c1 e8 18             	shr    eax,0x18
c001a969:	89 c2                	mov    edx,eax
c001a96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a96f:	c1 e0 08             	shl    eax,0x8
c001a972:	25 00 00 ff 00       	and    eax,0xff0000
c001a977:	09 c2                	or     edx,eax
c001a979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a97d:	c1 e8 08             	shr    eax,0x8
c001a980:	25 00 ff 00 00       	and    eax,0xff00
c001a985:	09 c2                	or     edx,eax
c001a987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a98b:	c1 e0 18             	shl    eax,0x18
c001a98e:	09 d0                	or     eax,edx
c001a990:	c3                   	ret    

c001a991 <Net::crc32Calc(unsigned char*, int)>:
c001a991:	83 ec 10             	sub    esp,0x10
c001a994:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a999:	75 07                	jne    c001a9a2 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a99b:	b8 00 00 00 00       	mov    eax,0x0
c001a9a0:	eb 7c                	jmp    c001aa1e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9a2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9a7:	7f 07                	jg     c001a9b0 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9a9:	b8 00 00 00 00       	mov    eax,0x0
c001a9ae:	eb 6e                	jmp    c001aa1e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9b0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9c8:	7d 4e                	jge    c001aa18 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9d2:	01 d0                	add    eax,edx
c001a9d4:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d6:	0f b6 c0             	movzx  eax,al
c001a9d9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9e5:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9ea:	7f 26                	jg     c001aa12 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f0:	83 e0 01             	and    eax,0x1
c001a9f3:	74 0d                	je     c001aa02 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f9:	d1 e8                	shr    eax,1
c001a9fb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa00:	eb 06                	jmp    c001aa08 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa06:	d1 e8                	shr    eax,1
c001aa08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa0c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa10:	eb d3                	jmp    c001a9e5 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa12:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa16:	eb a8                	jmp    c001a9c0 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1c:	f7 d0                	not    eax
c001aa1e:	83 c4 10             	add    esp,0x10
c001aa21:	c3                   	ret    

c001aa22 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa22:	83 ec 1c             	sub    esp,0x1c
c001aa25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa35:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa3a:	7f 14                	jg     c001aa50 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa40:	8d 50 01             	lea    edx,[eax+0x1]
c001aa43:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa47:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa4a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa4e:	eb e5                	jmp    c001aa35 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa54:	8d 50 01             	lea    edx,[eax+0x1]
c001aa57:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa5b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa5e:	83 ec 04             	sub    esp,0x4
c001aa61:	6a 06                	push   0x6
c001aa63:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa67:	50                   	push   eax
c001aa68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa6c:	e8 d3 5c fe ff       	call   c0000744 <memcpy>
c001aa71:	83 c4 10             	add    esp,0x10
c001aa74:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa79:	83 ec 04             	sub    esp,0x4
c001aa7c:	6a 06                	push   0x6
c001aa7e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa82:	50                   	push   eax
c001aa83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa87:	e8 b8 5c fe ff       	call   c0000744 <memcpy>
c001aa8c:	83 c4 10             	add    esp,0x10
c001aa8f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa98:	0f b7 c0             	movzx  eax,ax
c001aa9b:	c1 f8 08             	sar    eax,0x8
c001aa9e:	89 c1                	mov    ecx,eax
c001aaa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaab:	88 ca                	mov    dl,cl
c001aaad:	88 10                	mov    BYTE PTR [eax],dl
c001aaaf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aab3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab7:	8d 48 01             	lea    ecx,[eax+0x1]
c001aaba:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aabe:	88 10                	mov    BYTE PTR [eax],dl
c001aac0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aac4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aac8:	83 ec 04             	sub    esp,0x4
c001aacb:	52                   	push   edx
c001aacc:	50                   	push   eax
c001aacd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aad1:	e8 6e 5c fe ff       	call   c0000744 <memcpy>
c001aad6:	83 c4 10             	add    esp,0x10
c001aad9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aadd:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aae1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aae9:	83 ec 08             	sub    esp,0x8
c001aaec:	50                   	push   eax
c001aaed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aaf1:	e8 9b fe ff ff       	call   c001a991 <Net::crc32Calc(unsigned char*, int)>
c001aaf6:	83 c4 10             	add    esp,0x10
c001aaf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aafd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab01:	c1 e8 18             	shr    eax,0x18
c001ab04:	89 c1                	mov    ecx,eax
c001ab06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab11:	88 ca                	mov    dl,cl
c001ab13:	88 10                	mov    BYTE PTR [eax],dl
c001ab15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab19:	c1 e8 10             	shr    eax,0x10
c001ab1c:	89 c1                	mov    ecx,eax
c001ab1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab22:	8d 50 01             	lea    edx,[eax+0x1]
c001ab25:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab29:	88 ca                	mov    dl,cl
c001ab2b:	88 10                	mov    BYTE PTR [eax],dl
c001ab2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab31:	c1 e8 08             	shr    eax,0x8
c001ab34:	89 c1                	mov    ecx,eax
c001ab36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab3a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab3d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab41:	88 ca                	mov    dl,cl
c001ab43:	88 10                	mov    BYTE PTR [eax],dl
c001ab45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab49:	8d 50 01             	lea    edx,[eax+0x1]
c001ab4c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab54:	88 10                	mov    BYTE PTR [eax],dl
c001ab56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab5a:	83 c4 1c             	add    esp,0x1c
c001ab5d:	c3                   	ret    

c001ab5e <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab5e:	83 ec 2c             	sub    esp,0x2c
c001ab61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab69:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab6e:	83 ec 04             	sub    esp,0x4
c001ab71:	6a 06                	push   0x6
c001ab73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab7b:	83 c0 0e             	add    eax,0xe
c001ab7e:	50                   	push   eax
c001ab7f:	e8 c0 5b fe ff       	call   c0000744 <memcpy>
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab8c:	83 ec 04             	sub    esp,0x4
c001ab8f:	6a 06                	push   0x6
c001ab91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab99:	83 c0 08             	add    eax,0x8
c001ab9c:	50                   	push   eax
c001ab9d:	e8 a2 5b fe ff       	call   c0000744 <memcpy>
c001aba2:	83 c4 10             	add    esp,0x10
c001aba5:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abae:	8d 50 01             	lea    edx,[eax+0x1]
c001abb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abb5:	8a 00                	mov    al,BYTE PTR [eax]
c001abb7:	0f b6 c0             	movzx  eax,al
c001abba:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc3:	8d 50 01             	lea    edx,[eax+0x1]
c001abc6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abca:	8a 00                	mov    al,BYTE PTR [eax]
c001abcc:	0f b6 c0             	movzx  eax,al
c001abcf:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abd4:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abd9:	c1 e0 08             	shl    eax,0x8
c001abdc:	89 c2                	mov    edx,eax
c001abde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abe2:	09 d0                	or     eax,edx
c001abe4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abe8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abec:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abf1:	75 3a                	jne    c001ac2d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abf7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abfa:	66 3d dc 05          	cmp    ax,0x5dc
c001abfe:	77 10                	ja     c001ac10 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac07:	0f b7 c0             	movzx  eax,ax
c001ac0a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac0e:	eb 1d                	jmp    c001ac2d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	68 24 bc 02 c0       	push   0xc002bc24
c001ac18:	e8 dd 82 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac24:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac28:	e9 c0 00 00 00       	jmp    c001aced <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac37:	83 ec 04             	sub    esp,0x4
c001ac3a:	52                   	push   edx
c001ac3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac3f:	50                   	push   eax
c001ac40:	e8 ff 5a fe ff       	call   c0000744 <memcpy>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac4c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac54:	8d 50 01             	lea    edx,[eax+0x1]
c001ac57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac5b:	8a 00                	mov    al,BYTE PTR [eax]
c001ac5d:	0f b6 c0             	movzx  eax,al
c001ac60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac68:	8d 50 01             	lea    edx,[eax+0x1]
c001ac6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac6f:	8a 00                	mov    al,BYTE PTR [eax]
c001ac71:	0f b6 c0             	movzx  eax,al
c001ac74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac7c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac7f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac83:	8a 00                	mov    al,BYTE PTR [eax]
c001ac85:	0f b6 c0             	movzx  eax,al
c001ac88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac90:	8d 50 01             	lea    edx,[eax+0x1]
c001ac93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac97:	8a 00                	mov    al,BYTE PTR [eax]
c001ac99:	0f b6 c0             	movzx  eax,al
c001ac9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aca0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aca4:	c1 e0 18             	shl    eax,0x18
c001aca7:	89 c2                	mov    edx,eax
c001aca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acad:	c1 e0 10             	shl    eax,0x10
c001acb0:	09 c2                	or     edx,eax
c001acb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acb6:	c1 e0 08             	shl    eax,0x8
c001acb9:	09 d0                	or     eax,edx
c001acbb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001acbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acc7:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001accb:	83 e8 04             	sub    eax,0x4
c001acce:	83 ec 08             	sub    esp,0x8
c001acd1:	50                   	push   eax
c001acd2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001acd6:	e8 b6 fc ff ff       	call   c001a991 <Net::crc32Calc(unsigned char*, int)>
c001acdb:	83 c4 10             	add    esp,0x10
c001acde:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ace2:	0f 94 c2             	sete   dl
c001ace5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace9:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acec:	90                   	nop
c001aced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf1:	83 c4 2c             	add    esp,0x2c
c001acf4:	c2 04 00             	ret    0x4

c001acf7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acf7:	55                   	push   ebp
c001acf8:	57                   	push   edi
c001acf9:	56                   	push   esi
c001acfa:	53                   	push   ebx
c001acfb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad01:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad08:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad0a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad0d:	80 fb 40             	cmp    bl,0x40
c001ad10:	75 1b                	jne    c001ad2d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad12:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad14:	84 d2                	test   dl,dl
c001ad16:	0f 84 f1 00 00 00    	je     c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1c:	8d 46 01             	lea    eax,[esi+0x1]
c001ad1f:	80 fa 3a             	cmp    dl,0x3a
c001ad22:	74 04                	je     c001ad28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad24:	89 c6                	mov    esi,eax
c001ad26:	eb ea                	jmp    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad28:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad2b:	89 c6                	mov    esi,eax
c001ad2d:	50                   	push   eax
c001ad2e:	6a 40                	push   0x40
c001ad30:	6a 00                	push   0x0
c001ad32:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad36:	50                   	push   eax
c001ad37:	e8 3c 5a fe ff       	call   c0000778 <memset>
c001ad3c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad43:	31 c0                	xor    eax,eax
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad4a:	84 c9                	test   cl,cl
c001ad4c:	0f 84 bb 00 00 00    	je     c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad52:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad57:	0f 8f b0 00 00 00    	jg     c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad5d:	80 f9 0a             	cmp    cl,0xa
c001ad60:	0f 85 98 00 00 00    	jne    c001adfe <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad66:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad6b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad6f:	a8 df                	test   al,0xdf
c001ad71:	0f 94 c1             	sete   cl
c001ad74:	3c 23                	cmp    al,0x23
c001ad76:	0f 94 c2             	sete   dl
c001ad79:	08 d1                	or     cl,dl
c001ad7b:	75 4a                	jne    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad7d:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad80:	80 fa 01             	cmp    dl,0x1
c001ad83:	76 42                	jbe    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad85:	3c 5b                	cmp    al,0x5b
c001ad87:	75 42                	jne    c001adcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad89:	80 fb 40             	cmp    bl,0x40
c001ad8c:	75 39                	jne    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad8e:	83 ec 0c             	sub    esp,0xc
c001ad91:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad95:	52                   	push   edx
c001ad96:	e8 f9 59 fe ff       	call   c0000794 <strlen>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	83 f8 3f             	cmp    eax,0x3f
c001ada1:	77 6a                	ja     c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada3:	50                   	push   eax
c001ada4:	50                   	push   eax
c001ada5:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ada9:	52                   	push   edx
c001adaa:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adae:	52                   	push   edx
c001adaf:	e8 80 5a fe ff       	call   c0000834 <strcpy>
c001adb4:	58                   	pop    eax
c001adb5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adb9:	52                   	push   edx
c001adba:	e8 d5 59 fe ff       	call   c0000794 <strlen>
c001adbf:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001adc4:	83 c4 10             	add    esp,0x10
c001adc7:	31 d2                	xor    edx,edx
c001adc9:	eb 3a                	jmp    c001ae05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001adcb:	80 fb 40             	cmp    bl,0x40
c001adce:	74 06                	je     c001add6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001add0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001add4:	eb 20                	jmp    c001adf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001add6:	50                   	push   eax
c001add7:	50                   	push   eax
c001add8:	55                   	push   ebp
c001add9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001addd:	50                   	push   eax
c001adde:	e8 dd 5a fe ff       	call   c00008c0 <strcmp>
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	85 c0                	test   eax,eax
c001ade8:	75 dd                	jne    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adea:	eb e4                	jmp    c001add0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adec:	8d 50 01             	lea    edx,[eax+0x1]
c001adef:	80 f9 3d             	cmp    cl,0x3d
c001adf2:	74 1d                	je     c001ae11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adf4:	89 d0                	mov    eax,edx
c001adf6:	8a 08                	mov    cl,BYTE PTR [eax]
c001adf8:	84 c9                	test   cl,cl
c001adfa:	75 f0                	jne    c001adec <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adfc:	eb 0f                	jmp    c001ae0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ae01:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae05:	47                   	inc    edi
c001ae06:	89 d0                	mov    eax,edx
c001ae08:	e9 3b ff ff ff       	jmp    c001ad48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae0d:	31 c0                	xor    eax,eax
c001ae0f:	eb 33                	jmp    c001ae44 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae18:	50                   	push   eax
c001ae19:	50                   	push   eax
c001ae1a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae1e:	50                   	push   eax
c001ae1f:	56                   	push   esi
c001ae20:	e8 9b 5a fe ff       	call   c00008c0 <strcmp>
c001ae25:	83 c4 10             	add    esp,0x10
c001ae28:	85 c0                	test   eax,eax
c001ae2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae2e:	75 97                	jne    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae30:	51                   	push   ecx
c001ae31:	51                   	push   ecx
c001ae32:	52                   	push   edx
c001ae33:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae3a:	e8 f5 59 fe ff       	call   c0000834 <strcpy>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	b0 01                	mov    al,0x1
c001ae44:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae4a:	5b                   	pop    ebx
c001ae4b:	5e                   	pop    esi
c001ae4c:	5f                   	pop    edi
c001ae4d:	5d                   	pop    ebp
c001ae4e:	c3                   	ret    

c001ae4f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae4f:	57                   	push   edi
c001ae50:	56                   	push   esi
c001ae51:	53                   	push   ebx
c001ae52:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae58:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae5f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae66:	53                   	push   ebx
c001ae67:	e8 28 59 fe ff       	call   c0000794 <strlen>
c001ae6c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae6f:	89 c7                	mov    edi,eax
c001ae71:	e8 1e 59 fe ff       	call   c0000794 <strlen>
c001ae76:	83 c4 10             	add    esp,0x10
c001ae79:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae7d:	3d ff 00 00 00       	cmp    eax,0xff
c001ae82:	0f 87 d3 00 00 00    	ja     c001af5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae88:	57                   	push   edi
c001ae89:	57                   	push   edi
c001ae8a:	56                   	push   esi
c001ae8b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae8f:	56                   	push   esi
c001ae90:	e8 9f 59 fe ff       	call   c0000834 <strcpy>
c001ae95:	58                   	pop    eax
c001ae96:	5a                   	pop    edx
c001ae97:	68 6d c1 02 c0       	push   0xc002c16d
c001ae9c:	56                   	push   esi
c001ae9d:	e8 d2 5a fe ff       	call   c0000974 <strcat>
c001aea2:	59                   	pop    ecx
c001aea3:	5f                   	pop    edi
c001aea4:	53                   	push   ebx
c001aea5:	56                   	push   esi
c001aea6:	e8 c9 5a fe ff       	call   c0000974 <strcat>
c001aeab:	58                   	pop    eax
c001aeac:	5a                   	pop    edx
c001aead:	68 70 bc 02 c0       	push   0xc002bc70
c001aeb2:	56                   	push   esi
c001aeb3:	e8 bc 5a fe ff       	call   c0000974 <strcat>
c001aeb8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aebf:	e8 7c 49 ff ff       	call   c000f840 <malloc>
c001aec4:	83 c4 0c             	add    esp,0xc
c001aec7:	89 c3                	mov    ebx,eax
c001aec9:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001aecf:	56                   	push   esi
c001aed0:	50                   	push   eax
c001aed1:	e8 7c 85 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	85 db                	test   ebx,ebx
c001aedb:	74 7e                	je     c001af5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aedd:	51                   	push   ecx
c001aede:	51                   	push   ecx
c001aedf:	6a 01                	push   0x1
c001aee1:	53                   	push   ebx
c001aee2:	e8 cf 85 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	85 c0                	test   eax,eax
c001aeec:	74 08                	je     c001aef6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aef3:	53                   	push   ebx
c001aef4:	eb 5f                	jmp    c001af55 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aef6:	52                   	push   edx
c001aef7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aefb:	50                   	push   eax
c001aefc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af00:	50                   	push   eax
c001af01:	53                   	push   ebx
c001af02:	e8 5b 88 ff ff       	call   c0013762 <File::stat(unsigned long long*, bool*)>
c001af07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	89 c1                	mov    ecx,eax
c001af10:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af14:	74 31                	je     c001af47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af16:	83 ec 0c             	sub    esp,0xc
c001af19:	50                   	push   eax
c001af1a:	e8 21 49 ff ff       	call   c000f840 <malloc>
c001af1f:	89 c6                	mov    esi,eax
c001af21:	58                   	pop    eax
c001af22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af24:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af28:	52                   	push   edx
c001af29:	56                   	push   esi
c001af2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af32:	53                   	push   ebx
c001af33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af36:	83 c4 20             	add    esp,0x20
c001af39:	85 c0                	test   eax,eax
c001af3b:	75 0a                	jne    c001af47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af41:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af45:	74 18                	je     c001af5f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af47:	83 ec 0c             	sub    esp,0xc
c001af4a:	53                   	push   ebx
c001af4b:	e8 c4 85 ff ff       	call   c0013514 <File::close()>
c001af50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af58:	83 c4 10             	add    esp,0x10
c001af5b:	31 c0                	xor    eax,eax
c001af5d:	eb 3b                	jmp    c001af9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af5f:	83 ec 0c             	sub    esp,0xc
c001af62:	53                   	push   ebx
c001af63:	e8 ac 85 ff ff       	call   c0013514 <File::close()>
c001af68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af70:	83 c4 0c             	add    esp,0xc
c001af73:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af7a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af81:	56                   	push   esi
c001af82:	e8 70 fd ff ff       	call   c001acf7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af87:	89 34 24             	mov    DWORD PTR [esp],esi
c001af8a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af8e:	e8 bd 48 ff ff       	call   c000f850 <free>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af9a:	81 c4 20 01 00 00    	add    esp,0x120
c001afa0:	5b                   	pop    ebx
c001afa1:	5e                   	pop    esi
c001afa2:	5f                   	pop    edi
c001afa3:	c3                   	ret    

c001afa4 <Reg::getLine(char*, char*, char*)>:
c001afa4:	57                   	push   edi
c001afa5:	56                   	push   esi
c001afa6:	53                   	push   ebx
c001afa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afaf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afb3:	57                   	push   edi
c001afb4:	56                   	push   esi
c001afb5:	53                   	push   ebx
c001afb6:	68 75 bc 02 c0       	push   0xc002bc75
c001afbb:	e8 8f fe ff ff       	call   c001ae4f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	84 c0                	test   al,al
c001afc5:	75 10                	jne    c001afd7 <Reg::getLine(char*, char*, char*)+0x33>
c001afc7:	57                   	push   edi
c001afc8:	56                   	push   esi
c001afc9:	53                   	push   ebx
c001afca:	68 9a bc 02 c0       	push   0xc002bc9a
c001afcf:	e8 7b fe ff ff       	call   c001ae4f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afd4:	83 c4 10             	add    esp,0x10
c001afd7:	5b                   	pop    ebx
c001afd8:	5e                   	pop    esi
c001afd9:	5f                   	pop    edi
c001afda:	c3                   	ret    

c001afdb <Reg::readInt(char*, char*, int*)>:
c001afdb:	55                   	push   ebp
c001afdc:	57                   	push   edi
c001afdd:	56                   	push   esi
c001afde:	53                   	push   ebx
c001afdf:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afe5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afe9:	57                   	push   edi
c001afea:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aff1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aff8:	e8 a7 ff ff ff       	call   c001afa4 <Reg::getLine(char*, char*, char*)>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	84 c0                	test   al,al
c001b002:	0f 84 b3 00 00 00    	je     c001b0bb <Reg::readInt(char*, char*, int*)+0xe0>
c001b008:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b00c:	80 fa 2b             	cmp    dl,0x2b
c001b00f:	74 0c                	je     c001b01d <Reg::readInt(char*, char*, int*)+0x42>
c001b011:	80 fa 2d             	cmp    dl,0x2d
c001b014:	75 0e                	jne    c001b024 <Reg::readInt(char*, char*, int*)+0x49>
c001b016:	ba 01 00 00 00       	mov    edx,0x1
c001b01b:	eb 0b                	jmp    c001b028 <Reg::readInt(char*, char*, int*)+0x4d>
c001b01d:	ba 01 00 00 00       	mov    edx,0x1
c001b022:	eb 02                	jmp    c001b026 <Reg::readInt(char*, char*, int*)+0x4b>
c001b024:	31 d2                	xor    edx,edx
c001b026:	31 c0                	xor    eax,eax
c001b028:	be 0a 00 00 00       	mov    esi,0xa
c001b02d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b032:	75 20                	jne    c001b054 <Reg::readInt(char*, char*, int*)+0x79>
c001b034:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b038:	80 f9 78             	cmp    cl,0x78
c001b03b:	75 0a                	jne    c001b047 <Reg::readInt(char*, char*, int*)+0x6c>
c001b03d:	83 c2 02             	add    edx,0x2
c001b040:	be 10 00 00 00       	mov    esi,0x10
c001b045:	eb 0d                	jmp    c001b054 <Reg::readInt(char*, char*, int*)+0x79>
c001b047:	80 f9 62             	cmp    cl,0x62
c001b04a:	75 08                	jne    c001b054 <Reg::readInt(char*, char*, int*)+0x79>
c001b04c:	83 c2 02             	add    edx,0x2
c001b04f:	be 02 00 00 00       	mov    esi,0x2
c001b054:	01 d7                	add    edi,edx
c001b056:	31 d2                	xor    edx,edx
c001b058:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b05a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b05e:	80 fb 0d             	cmp    bl,0xd
c001b061:	0f 94 c3             	sete   bl
c001b064:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b069:	0f 94 c1             	sete   cl
c001b06c:	08 cb                	or     bl,cl
c001b06e:	75 3a                	jne    c001b0aa <Reg::readInt(char*, char*, int*)+0xcf>
c001b070:	0f af d6             	imul   edx,esi
c001b073:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b078:	83 fe 10             	cmp    esi,0x10
c001b07b:	75 26                	jne    c001b0a3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b07d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b081:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b084:	89 e9                	mov    ecx,ebp
c001b086:	80 f9 05             	cmp    cl,0x5
c001b089:	77 06                	ja     c001b091 <Reg::readInt(char*, char*, int*)+0xb6>
c001b08b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b08f:	eb 16                	jmp    c001b0a7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b091:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b095:	83 e9 61             	sub    ecx,0x61
c001b098:	80 f9 05             	cmp    cl,0x5
c001b09b:	77 06                	ja     c001b0a3 <Reg::readInt(char*, char*, int*)+0xc8>
c001b09d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0a1:	eb 04                	jmp    c001b0a7 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0a3:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0a7:	47                   	inc    edi
c001b0a8:	eb ae                	jmp    c001b058 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0aa:	84 c0                	test   al,al
c001b0ac:	74 02                	je     c001b0b0 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0ae:	f7 da                	neg    edx
c001b0b0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0b7:	89 10                	mov    DWORD PTR [eax],edx
c001b0b9:	88 d8                	mov    al,bl
c001b0bb:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0c1:	5b                   	pop    ebx
c001b0c2:	5e                   	pop    esi
c001b0c3:	5f                   	pop    edi
c001b0c4:	5d                   	pop    ebp
c001b0c5:	c3                   	ret    

c001b0c6 <Reg::readString(char*, char*, char*, int)>:
c001b0c6:	57                   	push   edi
c001b0c7:	56                   	push   esi
c001b0c8:	53                   	push   ebx
c001b0c9:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0cf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0d6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0da:	57                   	push   edi
c001b0db:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0e2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0e9:	e8 b6 fe ff ff       	call   c001afa4 <Reg::getLine(char*, char*, char*)>
c001b0ee:	83 c4 10             	add    esp,0x10
c001b0f1:	89 c6                	mov    esi,eax
c001b0f3:	84 c0                	test   al,al
c001b0f5:	74 44                	je     c001b13b <Reg::readString(char*, char*, char*, int)+0x75>
c001b0f7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0fe:	31 c0                	xor    eax,eax
c001b100:	4a                   	dec    edx
c001b101:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b104:	84 c9                	test   cl,cl
c001b106:	74 0f                	je     c001b117 <Reg::readString(char*, char*, char*, int)+0x51>
c001b108:	39 c2                	cmp    edx,eax
c001b10a:	7e 0b                	jle    c001b117 <Reg::readString(char*, char*, char*, int)+0x51>
c001b10c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b10f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b114:	40                   	inc    eax
c001b115:	eb ea                	jmp    c001b101 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b117:	83 ec 0c             	sub    esp,0xc
c001b11a:	53                   	push   ebx
c001b11b:	e8 74 56 fe ff       	call   c0000794 <strlen>
c001b120:	83 c4 10             	add    esp,0x10
c001b123:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b128:	75 11                	jne    c001b13b <Reg::readString(char*, char*, char*, int)+0x75>
c001b12a:	83 ec 0c             	sub    esp,0xc
c001b12d:	53                   	push   ebx
c001b12e:	e8 61 56 fe ff       	call   c0000794 <strlen>
c001b133:	83 c4 10             	add    esp,0x10
c001b136:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b13b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b141:	89 f0                	mov    eax,esi
c001b143:	5b                   	pop    ebx
c001b144:	5e                   	pop    esi
c001b145:	5f                   	pop    edi
c001b146:	c3                   	ret    

c001b147 <Reg::readBool(char*, char*, bool*)>:
c001b147:	83 ec 20             	sub    esp,0x20
c001b14a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b14e:	50                   	push   eax
c001b14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b157:	e8 7f fe ff ff       	call   c001afdb <Reg::readInt(char*, char*, int*)>
c001b15c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b161:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b165:	0f 95 02             	setne  BYTE PTR [edx]
c001b168:	83 c4 2c             	add    esp,0x2c
c001b16b:	c3                   	ret    

c001b16c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b16c:	53                   	push   ebx
c001b16d:	83 ec 1c             	sub    esp,0x1c
c001b170:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b174:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b178:	50                   	push   eax
c001b179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b181:	e8 c1 ff ff ff       	call   c001b147 <Reg::readBool(char*, char*, bool*)>
c001b186:	83 c4 10             	add    esp,0x10
c001b189:	84 c0                	test   al,al
c001b18b:	74 04                	je     c001b191 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b18d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b191:	88 d8                	mov    al,bl
c001b193:	83 c4 18             	add    esp,0x18
c001b196:	5b                   	pop    ebx
c001b197:	c3                   	ret    

c001b198 <Reg::readIntWithDefault(char*, char*, int)>:
c001b198:	53                   	push   ebx
c001b199:	83 ec 1c             	sub    esp,0x1c
c001b19c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1a4:	50                   	push   eax
c001b1a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ad:	e8 29 fe ff ff       	call   c001afdb <Reg::readInt(char*, char*, int*)>
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	84 c0                	test   al,al
c001b1b7:	74 04                	je     c001b1bd <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1bd:	89 d8                	mov    eax,ebx
c001b1bf:	83 c4 18             	add    esp,0x18
c001b1c2:	5b                   	pop    ebx
c001b1c3:	c3                   	ret    

c001b1c4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1c4:	57                   	push   edi
c001b1c5:	56                   	push   esi
c001b1c6:	53                   	push   ebx
c001b1c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1d3:	56                   	push   esi
c001b1d4:	53                   	push   ebx
c001b1d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1dd:	e8 e4 fe ff ff       	call   c001b0c6 <Reg::readString(char*, char*, char*, int)>
c001b1e2:	83 c4 10             	add    esp,0x10
c001b1e5:	84 c0                	test   al,al
c001b1e7:	75 1b                	jne    c001b204 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1e9:	50                   	push   eax
c001b1ea:	56                   	push   esi
c001b1eb:	4e                   	dec    esi
c001b1ec:	6a 00                	push   0x0
c001b1ee:	53                   	push   ebx
c001b1ef:	e8 84 55 fe ff       	call   c0000778 <memset>
c001b1f4:	83 c4 0c             	add    esp,0xc
c001b1f7:	56                   	push   esi
c001b1f8:	57                   	push   edi
c001b1f9:	53                   	push   ebx
c001b1fa:	89 fb                	mov    ebx,edi
c001b1fc:	e8 43 55 fe ff       	call   c0000744 <memcpy>
c001b201:	83 c4 10             	add    esp,0x10
c001b204:	89 d8                	mov    eax,ebx
c001b206:	5b                   	pop    ebx
c001b207:	5e                   	pop    esi
c001b208:	5f                   	pop    edi
c001b209:	c3                   	ret    

c001b20a <Sys::eject(regs*)>:
c001b20a:	83 ec 0c             	sub    esp,0xc
c001b20d:	83 ca ff             	or     edx,0xffffffff
c001b210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b214:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b217:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b21c:	83 e9 41             	sub    ecx,0x41
c001b21f:	83 f9 19             	cmp    ecx,0x19
c001b222:	77 18                	ja     c001b23c <Sys::eject(regs*)+0x32>
c001b224:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c001b22b:	85 c9                	test   ecx,ecx
c001b22d:	74 0d                	je     c001b23c <Sys::eject(regs*)+0x32>
c001b22f:	83 ec 0c             	sub    esp,0xc
c001b232:	51                   	push   ecx
c001b233:	e8 78 b4 ff ff       	call   c00166b0 <LogicalDisk::eject()>
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	99                   	cdq    
c001b23c:	83 c4 0c             	add    esp,0xc
c001b23f:	c3                   	ret    

c001b240 <Sys::exit(regs*)>:
c001b240:	83 ec 18             	sub    esp,0x18
c001b243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b247:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b24a:	e8 7a 35 00 00       	call   c001e7c9 <terminateTask(int)>
c001b24f:	83 c8 ff             	or     eax,0xffffffff
c001b252:	83 c4 1c             	add    esp,0x1c
c001b255:	89 c2                	mov    edx,eax
c001b257:	c3                   	ret    

c001b258 <Sys::getCwd(regs*)>:
c001b258:	83 ec 10             	sub    esp,0x10
c001b25b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b25f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b262:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b26a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b26d:	e8 e2 7f ff ff       	call   c0013254 <Fs::getcwd(Process*, char*, int)>
c001b272:	83 c4 1c             	add    esp,0x1c
c001b275:	99                   	cdq    
c001b276:	c3                   	ret    

c001b277 <Sys::getPID(regs*)>:
c001b277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b27c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b27f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b281:	99                   	cdq    
c001b282:	c3                   	ret    

c001b283 <Sys::getRAMData(regs*)>:
c001b283:	8b 0d d4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3d4
c001b289:	6b 05 d0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3d0,0x64
c001b290:	99                   	cdq    
c001b291:	f7 f9                	idiv   ecx
c001b293:	c1 e0 18             	shl    eax,0x18
c001b296:	09 c8                	or     eax,ecx
c001b298:	99                   	cdq    
c001b299:	c3                   	ret    

c001b29a <Sys::loadDLL(regs*)>:
c001b29a:	56                   	push   esi
c001b29b:	53                   	push   ebx
c001b29c:	31 d2                	xor    edx,edx
c001b29e:	51                   	push   ecx
c001b29f:	b8 01 00 00 00       	mov    eax,0x1
c001b2a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2a8:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2ac:	0f 84 8c 00 00 00    	je     c001b33e <Sys::loadDLL(regs*)+0xa4>
c001b2b2:	83 ec 0c             	sub    esp,0xc
c001b2b5:	68 14 01 00 00       	push   0x114
c001b2ba:	e8 81 45 ff ff       	call   c000f840 <malloc>
c001b2bf:	83 c4 0c             	add    esp,0xc
c001b2c2:	89 c3                	mov    ebx,eax
c001b2c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2c9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2cc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2cf:	53                   	push   ebx
c001b2d0:	e8 7d 81 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001b2d5:	83 c4 10             	add    esp,0x10
c001b2d8:	31 d2                	xor    edx,edx
c001b2da:	b8 02 00 00 00       	mov    eax,0x2
c001b2df:	85 db                	test   ebx,ebx
c001b2e1:	74 5b                	je     c001b33e <Sys::loadDLL(regs*)+0xa4>
c001b2e3:	83 ec 0c             	sub    esp,0xc
c001b2e6:	53                   	push   ebx
c001b2e7:	e8 38 84 ff ff       	call   c0013724 <File::exists()>
c001b2ec:	83 c4 10             	add    esp,0x10
c001b2ef:	84 c0                	test   al,al
c001b2f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2f3:	75 11                	jne    c001b306 <Sys::loadDLL(regs*)+0x6c>
c001b2f5:	83 ec 0c             	sub    esp,0xc
c001b2f8:	53                   	push   ebx
c001b2f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	b8 03 00 00 00       	mov    eax,0x3
c001b304:	eb 36                	jmp    c001b33c <Sys::loadDLL(regs*)+0xa2>
c001b306:	83 ec 0c             	sub    esp,0xc
c001b309:	53                   	push   ebx
c001b30a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b30d:	58                   	pop    eax
c001b30e:	5a                   	pop    edx
c001b30f:	6a 00                	push   0x0
c001b311:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b314:	e8 c5 23 00 00       	call   c001d6de <Thr::loadDLL(char const*, bool)>
c001b319:	83 c4 10             	add    esp,0x10
c001b31c:	89 c1                	mov    ecx,eax
c001b31e:	31 d2                	xor    edx,edx
c001b320:	b8 04 00 00 00       	mov    eax,0x4
c001b325:	85 c9                	test   ecx,ecx
c001b327:	74 15                	je     c001b33e <Sys::loadDLL(regs*)+0xa4>
c001b329:	53                   	push   ebx
c001b32a:	53                   	push   ebx
c001b32b:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001b331:	51                   	push   ecx
c001b332:	e8 db 25 00 00       	call   c001d912 <Thr::executeDLL(unsigned long, void*)>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	31 c0                	xor    eax,eax
c001b33c:	31 d2                	xor    edx,edx
c001b33e:	59                   	pop    ecx
c001b33f:	5b                   	pop    ebx
c001b340:	5e                   	pop    esi
c001b341:	c3                   	ret    

c001b342 <Sys::read(regs*)>:
c001b342:	57                   	push   edi
c001b343:	56                   	push   esi
c001b344:	53                   	push   ebx
c001b345:	83 ec 10             	sub    esp,0x10
c001b348:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b34c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b34f:	83 f8 02             	cmp    eax,0x2
c001b352:	77 10                	ja     c001b364 <Sys::read(regs*)+0x22>
c001b354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b359:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b35c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b362:	eb 0e                	jmp    c001b372 <Sys::read(regs*)+0x30>
c001b364:	83 ec 0c             	sub    esp,0xc
c001b367:	50                   	push   eax
c001b368:	e8 dc 66 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b36d:	83 c4 10             	add    esp,0x10
c001b370:	89 c1                	mov    ecx,eax
c001b372:	83 c8 ff             	or     eax,0xffffffff
c001b375:	85 c9                	test   ecx,ecx
c001b377:	89 c2                	mov    edx,eax
c001b379:	74 28                	je     c001b3a3 <Sys::read(regs*)+0x61>
c001b37b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b383:	31 ff                	xor    edi,edi
c001b385:	83 ec 0c             	sub    esp,0xc
c001b388:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b38a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b38e:	52                   	push   edx
c001b38f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b392:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b395:	57                   	push   edi
c001b396:	56                   	push   esi
c001b397:	51                   	push   ecx
c001b398:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b39b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b39f:	83 c4 20             	add    esp,0x20
c001b3a2:	99                   	cdq    
c001b3a3:	83 c4 10             	add    esp,0x10
c001b3a6:	5b                   	pop    ebx
c001b3a7:	5e                   	pop    esi
c001b3a8:	5f                   	pop    edi
c001b3a9:	c3                   	ret    

c001b3aa <Sys::sbrk(regs*)>:
c001b3aa:	56                   	push   esi
c001b3ab:	53                   	push   ebx
c001b3ac:	50                   	push   eax
c001b3ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3b9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b3bc:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b3c2:	85 db                	test   ebx,ebx
c001b3c4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b3c7:	74 02                	je     c001b3cb <Sys::sbrk(regs*)+0x21>
c001b3c9:	79 06                	jns    c001b3d1 <Sys::sbrk(regs*)+0x27>
c001b3cb:	89 f0                	mov    eax,esi
c001b3cd:	31 d2                	xor    edx,edx
c001b3cf:	eb 2a                	jmp    c001b3fb <Sys::sbrk(regs*)+0x51>
c001b3d1:	83 c8 ff             	or     eax,0xffffffff
c001b3d4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b3da:	89 c2                	mov    edx,eax
c001b3dc:	77 1d                	ja     c001b3fb <Sys::sbrk(regs*)+0x51>
c001b3de:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3e4:	50                   	push   eax
c001b3e5:	c1 ea 0c             	shr    edx,0xc
c001b3e8:	68 07 04 00 00       	push   0x407
c001b3ed:	52                   	push   edx
c001b3ee:	51                   	push   ecx
c001b3ef:	e8 82 70 ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001b3f4:	89 f0                	mov    eax,esi
c001b3f6:	31 d2                	xor    edx,edx
c001b3f8:	83 c4 10             	add    esp,0x10
c001b3fb:	59                   	pop    ecx
c001b3fc:	5b                   	pop    ebx
c001b3fd:	5e                   	pop    esi
c001b3fe:	c3                   	ret    

c001b3ff <Sys::setCwd(regs*)>:
c001b3ff:	83 ec 14             	sub    esp,0x14
c001b402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b406:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b40e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b411:	e8 ad 83 ff ff       	call   c00137c3 <Fs::setcwd(Process*, char*)>
c001b416:	83 c4 1c             	add    esp,0x1c
c001b419:	99                   	cdq    
c001b41a:	c3                   	ret    

c001b41b <Sys::setTime(regs*)>:
c001b41b:	55                   	push   ebp
c001b41c:	31 d2                	xor    edx,edx
c001b41e:	57                   	push   edi
c001b41f:	bf 18 00 00 00       	mov    edi,0x18
c001b424:	56                   	push   esi
c001b425:	53                   	push   ebx
c001b426:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b42b:	83 ec 30             	sub    esp,0x30
c001b42e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b432:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b435:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b438:	f7 f3                	div    ebx
c001b43a:	89 d6                	mov    esi,edx
c001b43c:	31 d2                	xor    edx,edx
c001b43e:	f7 f3                	div    ebx
c001b440:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b443:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b447:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	f7 f3                	div    ebx
c001b450:	31 d2                	xor    edx,edx
c001b452:	bb 0c 00 00 00       	mov    ebx,0xc
c001b457:	f7 f7                	div    edi
c001b459:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b45c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b460:	0f b7 cd             	movzx  ecx,bp
c001b463:	56                   	push   esi
c001b464:	89 c7                	mov    edi,eax
c001b466:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b46a:	c1 e6 10             	shl    esi,0x10
c001b46d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b471:	83 e7 1f             	and    edi,0x1f
c001b474:	51                   	push   ecx
c001b475:	47                   	inc    edi
c001b476:	c1 e8 05             	shr    eax,0x5
c001b479:	31 d2                	xor    edx,edx
c001b47b:	f7 f3                	div    ebx
c001b47d:	31 db                	xor    ebx,ebx
c001b47f:	52                   	push   edx
c001b480:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b484:	57                   	push   edi
c001b485:	68 b5 bc 02 c0       	push   0xc002bcb5
c001b48a:	e8 6b 7a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b48f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b493:	89 f8                	mov    eax,edi
c001b495:	31 c9                	xor    ecx,ecx
c001b497:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b49b:	88 c1                	mov    cl,al
c001b49d:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4a3:	88 d5                	mov    ch,dl
c001b4a5:	c1 e0 10             	shl    eax,0x10
c001b4a8:	0f b7 d1             	movzx  edx,cx
c001b4ab:	09 c2                	or     edx,eax
c001b4ad:	89 d8                	mov    eax,ebx
c001b4af:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b4b4:	09 f0                	or     eax,esi
c001b4b6:	89 c3                	mov    ebx,eax
c001b4b8:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b4bc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b4c0:	83 c4 18             	add    esp,0x18
c001b4c3:	53                   	push   ebx
c001b4c4:	52                   	push   edx
c001b4c5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b4c9:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b4cd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4d1:	e8 07 8a ff ff       	call   c0013edd <datetimeToSeconds(datetime_t)>
c001b4d6:	83 c4 0c             	add    esp,0xc
c001b4d9:	52                   	push   edx
c001b4da:	50                   	push   eax
c001b4db:	56                   	push   esi
c001b4dc:	e8 83 8b ff ff       	call   c0014064 <secondsToDatetime(unsigned long long)>
c001b4e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4e9:	51                   	push   ecx
c001b4ea:	89 d6                	mov    esi,edx
c001b4ec:	51                   	push   ecx
c001b4ed:	c1 ee 10             	shr    esi,0x10
c001b4f0:	89 f3                	mov    ebx,esi
c001b4f2:	0f b6 f3             	movzx  esi,bl
c001b4f5:	56                   	push   esi
c001b4f6:	0f b6 f6             	movzx  esi,dh
c001b4f9:	0f b6 d2             	movzx  edx,dl
c001b4fc:	56                   	push   esi
c001b4fd:	52                   	push   edx
c001b4fe:	89 c2                	mov    edx,eax
c001b500:	c1 ea 10             	shr    edx,0x10
c001b503:	52                   	push   edx
c001b504:	0f b6 d4             	movzx  edx,ah
c001b507:	0f b6 c0             	movzx  eax,al
c001b50a:	52                   	push   edx
c001b50b:	50                   	push   eax
c001b50c:	68 d1 bc 02 c0       	push   0xc002bcd1
c001b511:	e8 e4 79 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b516:	83 c4 2c             	add    esp,0x2c
c001b519:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b51e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b522:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b526:	53                   	push   ebx
c001b527:	51                   	push   ecx
c001b528:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b52e:	e8 d1 8a ff ff       	call   c0014004 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b533:	83 f0 01             	xor    eax,0x1
c001b536:	31 d2                	xor    edx,edx
c001b538:	0f b6 c0             	movzx  eax,al
c001b53b:	83 c4 3c             	add    esp,0x3c
c001b53e:	5b                   	pop    ebx
c001b53f:	5e                   	pop    esi
c001b540:	5f                   	pop    edi
c001b541:	5d                   	pop    ebp
c001b542:	c3                   	ret    

c001b543 <Sys::timezone(regs*)>:
c001b543:	53                   	push   ebx
c001b544:	83 ec 08             	sub    esp,0x8
c001b547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b54b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b54f:	75 17                	jne    c001b568 <Sys::timezone(regs*)+0x25>
c001b551:	83 ec 0c             	sub    esp,0xc
c001b554:	68 ed bc 02 c0       	push   0xc002bced
c001b559:	e8 9c 79 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b55e:	83 c8 ff             	or     eax,0xffffffff
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	89 c2                	mov    edx,eax
c001b566:	eb 20                	jmp    c001b588 <Sys::timezone(regs*)+0x45>
c001b568:	83 ec 0c             	sub    esp,0xc
c001b56b:	68 25 bd 02 c0       	push   0xc002bd25
c001b570:	e8 85 79 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b575:	58                   	pop    eax
c001b576:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b579:	e8 e8 87 ff ff       	call   c0013d66 <User::loadClockSettings(int)>
c001b57e:	83 c4 10             	add    esp,0x10
c001b581:	b8 01 00 00 00       	mov    eax,0x1
c001b586:	31 d2                	xor    edx,edx
c001b588:	83 c4 08             	add    esp,0x8
c001b58b:	5b                   	pop    ebx
c001b58c:	c3                   	ret    

c001b58d <Sys::write(regs*)>:
c001b58d:	57                   	push   edi
c001b58e:	56                   	push   esi
c001b58f:	53                   	push   ebx
c001b590:	83 ec 10             	sub    esp,0x10
c001b593:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b597:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b59a:	83 f8 02             	cmp    eax,0x2
c001b59d:	77 10                	ja     c001b5af <Sys::write(regs*)+0x22>
c001b59f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5a7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5ad:	eb 0e                	jmp    c001b5bd <Sys::write(regs*)+0x30>
c001b5af:	83 ec 0c             	sub    esp,0xc
c001b5b2:	50                   	push   eax
c001b5b3:	e8 91 64 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	89 c1                	mov    ecx,eax
c001b5bd:	83 c8 ff             	or     eax,0xffffffff
c001b5c0:	85 c9                	test   ecx,ecx
c001b5c2:	89 c2                	mov    edx,eax
c001b5c4:	74 28                	je     c001b5ee <Sys::write(regs*)+0x61>
c001b5c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5ce:	31 ff                	xor    edi,edi
c001b5d0:	83 ec 0c             	sub    esp,0xc
c001b5d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b5d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5d9:	52                   	push   edx
c001b5da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5e0:	57                   	push   edi
c001b5e1:	56                   	push   esi
c001b5e2:	51                   	push   ecx
c001b5e3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5ea:	83 c4 20             	add    esp,0x20
c001b5ed:	99                   	cdq    
c001b5ee:	83 c4 10             	add    esp,0x10
c001b5f1:	5b                   	pop    ebx
c001b5f2:	5e                   	pop    esi
c001b5f3:	5f                   	pop    edi
c001b5f4:	c3                   	ret    

c001b5f5 <Sys::wsbe(regs*)>:
c001b5f5:	57                   	push   edi
c001b5f6:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5fb:	56                   	push   esi
c001b5fc:	be 64 bd 02 c0       	mov    esi,0xc002bd64
c001b601:	53                   	push   ebx
c001b602:	83 ec 30             	sub    esp,0x30
c001b605:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b609:	fc                   	cld    
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b60f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b61b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b621:	8b 06                	mov    eax,DWORD PTR [esi]
c001b623:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b626:	57                   	push   edi
c001b627:	e8 68 51 fe ff       	call   c0000794 <strlen>
c001b62c:	5a                   	pop    edx
c001b62d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b631:	52                   	push   edx
c001b632:	31 d2                	xor    edx,edx
c001b634:	57                   	push   edi
c001b635:	52                   	push   edx
c001b636:	50                   	push   eax
c001b637:	56                   	push   esi
c001b638:	ff d3                	call   ebx
c001b63a:	83 c4 14             	add    esp,0x14
c001b63d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b641:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b644:	e8 80 31 00 00       	call   c001e7c9 <terminateTask(int)>
c001b649:	83 c4 40             	add    esp,0x40
c001b64c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b651:	5b                   	pop    ebx
c001b652:	31 d2                	xor    edx,edx
c001b654:	5e                   	pop    esi
c001b655:	5f                   	pop    edi
c001b656:	c3                   	ret    

c001b657 <Sys::yield(regs*)>:
c001b657:	57                   	push   edi
c001b658:	56                   	push   esi
c001b659:	53                   	push   ebx
c001b65a:	e8 27 27 00 00       	call   c001dd86 <lockScheduler()>
c001b65f:	e8 5e 2a 00 00       	call   c001e0c2 <schedule()>
c001b664:	e8 1f 27 00 00       	call   c001dd88 <unlockScheduler()>
c001b669:	8b 35 10 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea10
c001b66f:	8b 3d 14 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea14
c001b675:	89 f0                	mov    eax,esi
c001b677:	89 fb                	mov    ebx,edi
c001b679:	89 f1                	mov    ecx,esi
c001b67b:	c1 e0 07             	shl    eax,0x7
c001b67e:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b682:	25 80 30 0f 00       	and    eax,0xf3080
c001b687:	c1 eb 17             	shr    ebx,0x17
c001b68a:	31 c8                	xor    eax,ecx
c001b68c:	89 da                	mov    edx,ebx
c001b68e:	5b                   	pop    ebx
c001b68f:	5e                   	pop    esi
c001b690:	5f                   	pop    edi
c001b691:	c3                   	ret    

c001b692 <sysCallSeekDir(regs*)>:
c001b692:	31 c0                	xor    eax,eax
c001b694:	31 d2                	xor    edx,edx
c001b696:	c3                   	ret    

c001b697 <sysCallTellDir(regs*)>:
c001b697:	31 c0                	xor    eax,eax
c001b699:	31 d2                	xor    edx,edx
c001b69b:	c3                   	ret    

c001b69c <sysCallVerify(regs*)>:
c001b69c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6a0:	31 d2                	xor    edx,edx
c001b6a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6a5:	c3                   	ret    

c001b6a6 <sysFormatDisk(regs*)>:
c001b6a6:	56                   	push   esi
c001b6a7:	53                   	push   ebx
c001b6a8:	53                   	push   ebx
c001b6a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6ad:	8b 1d 0c e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e50c
c001b6b3:	eb 25                	jmp    c001b6da <sysFormatDisk(regs*)+0x34>
c001b6b5:	83 ec 0c             	sub    esp,0xc
c001b6b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6bd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b6c0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6c3:	50                   	push   eax
c001b6c4:	ff 34 85 a0 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1660]
c001b6cb:	53                   	push   ebx
c001b6cc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6cf:	83 c4 20             	add    esp,0x20
c001b6d2:	83 f8 08             	cmp    eax,0x8
c001b6d5:	75 12                	jne    c001b6e9 <sysFormatDisk(regs*)+0x43>
c001b6d7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6da:	85 db                	test   ebx,ebx
c001b6dc:	75 d7                	jne    c001b6b5 <sysFormatDisk(regs*)+0xf>
c001b6de:	59                   	pop    ecx
c001b6df:	b8 03 00 00 00       	mov    eax,0x3
c001b6e4:	31 d2                	xor    edx,edx
c001b6e6:	5b                   	pop    ebx
c001b6e7:	5e                   	pop    esi
c001b6e8:	c3                   	ret    
c001b6e9:	85 c0                	test   eax,eax
c001b6eb:	74 1b                	je     c001b708 <sysFormatDisk(regs*)+0x62>
c001b6ed:	83 f8 09             	cmp    eax,0x9
c001b6f0:	74 0b                	je     c001b6fd <sysFormatDisk(regs*)+0x57>
c001b6f2:	59                   	pop    ecx
c001b6f3:	b8 02 00 00 00       	mov    eax,0x2
c001b6f8:	31 d2                	xor    edx,edx
c001b6fa:	5b                   	pop    ebx
c001b6fb:	5e                   	pop    esi
c001b6fc:	c3                   	ret    
c001b6fd:	59                   	pop    ecx
c001b6fe:	b8 01 00 00 00       	mov    eax,0x1
c001b703:	31 d2                	xor    edx,edx
c001b705:	5b                   	pop    ebx
c001b706:	5e                   	pop    esi
c001b707:	c3                   	ret    
c001b708:	59                   	pop    ecx
c001b709:	31 c0                	xor    eax,eax
c001b70b:	31 d2                	xor    edx,edx
c001b70d:	5b                   	pop    ebx
c001b70e:	5e                   	pop    esi
c001b70f:	c3                   	ret    

c001b710 <sysSetDiskVolumeLabel(regs*)>:
c001b710:	56                   	push   esi
c001b711:	53                   	push   ebx
c001b712:	53                   	push   ebx
c001b713:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b717:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b71a:	83 f8 19             	cmp    eax,0x19
c001b71d:	77 29                	ja     c001b748 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b71f:	8b 0c 85 a0 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1660]
c001b726:	85 c9                	test   ecx,ecx
c001b728:	74 1e                	je     c001b748 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b72a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b72d:	85 d2                	test   edx,edx
c001b72f:	74 17                	je     c001b748 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b731:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b737:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b739:	52                   	push   edx
c001b73a:	50                   	push   eax
c001b73b:	51                   	push   ecx
c001b73c:	53                   	push   ebx
c001b73d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b740:	83 c4 10             	add    esp,0x10
c001b743:	99                   	cdq    
c001b744:	59                   	pop    ecx
c001b745:	5b                   	pop    ebx
c001b746:	5e                   	pop    esi
c001b747:	c3                   	ret    
c001b748:	59                   	pop    ecx
c001b749:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b74e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b753:	5b                   	pop    ebx
c001b754:	5e                   	pop    esi
c001b755:	c3                   	ret    

c001b756 <sysGetDiskVolumeLabel(regs*)>:
c001b756:	57                   	push   edi
c001b757:	56                   	push   esi
c001b758:	53                   	push   ebx
c001b759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b760:	83 fa 19             	cmp    edx,0x19
c001b763:	77 34                	ja     c001b799 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b765:	8b 0c 95 a0 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1660]
c001b76c:	85 c9                	test   ecx,ecx
c001b76e:	74 29                	je     c001b799 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b770:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b773:	85 db                	test   ebx,ebx
c001b775:	74 22                	je     c001b799 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b777:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b77a:	85 c0                	test   eax,eax
c001b77c:	74 1b                	je     c001b799 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b77e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b784:	83 ec 0c             	sub    esp,0xc
c001b787:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b789:	50                   	push   eax
c001b78a:	53                   	push   ebx
c001b78b:	52                   	push   edx
c001b78c:	51                   	push   ecx
c001b78d:	56                   	push   esi
c001b78e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b791:	83 c4 20             	add    esp,0x20
c001b794:	99                   	cdq    
c001b795:	5b                   	pop    ebx
c001b796:	5e                   	pop    esi
c001b797:	5f                   	pop    edi
c001b798:	c3                   	ret    
c001b799:	5b                   	pop    ebx
c001b79a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b79f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a4:	5e                   	pop    esi
c001b7a5:	5f                   	pop    edi
c001b7a6:	c3                   	ret    

c001b7a7 <sysShutdown(regs*)>:
c001b7a7:	83 ec 0c             	sub    esp,0xc
c001b7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7b1:	85 c0                	test   eax,eax
c001b7b3:	74 18                	je     c001b7cd <sysShutdown(regs*)+0x26>
c001b7b5:	83 f8 01             	cmp    eax,0x1
c001b7b8:	74 38                	je     c001b7f2 <sysShutdown(regs*)+0x4b>
c001b7ba:	83 f8 02             	cmp    eax,0x2
c001b7bd:	74 24                	je     c001b7e3 <sysShutdown(regs*)+0x3c>
c001b7bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c9:	83 c4 0c             	add    esp,0xc
c001b7cc:	c3                   	ret    
c001b7cd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b7d2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7d4:	6a 00                	push   0x0
c001b7d6:	6a 00                	push   0x0
c001b7d8:	6a 00                	push   0x0
c001b7da:	50                   	push   eax
c001b7db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	eb dc                	jmp    c001b7bf <sysShutdown(regs*)+0x18>
c001b7e3:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b7e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7ea:	6a 00                	push   0x0
c001b7ec:	6a 00                	push   0x0
c001b7ee:	6a 01                	push   0x1
c001b7f0:	eb e8                	jmp    c001b7da <sysShutdown(regs*)+0x33>
c001b7f2:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c001b7f7:	85 c0                	test   eax,eax
c001b7f9:	74 02                	je     c001b7fd <sysShutdown(regs*)+0x56>
c001b7fb:	ff d0                	call   eax
c001b7fd:	31 c0                	xor    eax,eax
c001b7ff:	31 d2                	xor    edx,edx
c001b801:	83 c4 0c             	add    esp,0xc
c001b804:	c3                   	ret    

c001b805 <sysCallRealpath(regs*)>:
c001b805:	83 ec 0c             	sub    esp,0xc
c001b808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b80f:	85 d2                	test   edx,edx
c001b811:	74 07                	je     c001b81a <sysCallRealpath(regs*)+0x15>
c001b813:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b816:	85 c0                	test   eax,eax
c001b818:	75 0b                	jne    c001b825 <sysCallRealpath(regs*)+0x20>
c001b81a:	b8 01 00 00 00       	mov    eax,0x1
c001b81f:	31 d2                	xor    edx,edx
c001b821:	83 c4 0c             	add    esp,0xc
c001b824:	c3                   	ret    
c001b825:	51                   	push   ecx
c001b826:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b82c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b82f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b835:	51                   	push   ecx
c001b836:	52                   	push   edx
c001b837:	50                   	push   eax
c001b838:	e8 6b 7a ff ff       	call   c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	31 c0                	xor    eax,eax
c001b842:	31 d2                	xor    edx,edx
c001b844:	83 c4 0c             	add    esp,0xc
c001b847:	c3                   	ret    

c001b848 <sysCallGetArgc(regs*)>:
c001b848:	83 ec 14             	sub    esp,0x14
c001b84b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b850:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b853:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b859:	68 90 bd 02 c0       	push   0xc002bd90
c001b85e:	e8 97 76 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b863:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b868:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b86b:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b871:	83 c4 1c             	add    esp,0x1c
c001b874:	99                   	cdq    
c001b875:	c3                   	ret    

c001b876 <sysCallReadDir(regs*)>:
c001b876:	53                   	push   ebx
c001b877:	83 ec 18             	sub    esp,0x18
c001b87a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b87e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b881:	83 f8 02             	cmp    eax,0x2
c001b884:	76 53                	jbe    c001b8d9 <sysCallReadDir(regs*)+0x63>
c001b886:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b889:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b88f:	77 4f                	ja     c001b8e0 <sysCallReadDir(regs*)+0x6a>
c001b891:	83 ec 0c             	sub    esp,0xc
c001b894:	50                   	push   eax
c001b895:	e8 af 61 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b89a:	83 c4 10             	add    esp,0x10
c001b89d:	85 c0                	test   eax,eax
c001b89f:	74 50                	je     c001b8f1 <sysCallReadDir(regs*)+0x7b>
c001b8a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8a9:	83 ec 0c             	sub    esp,0xc
c001b8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8ae:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b8b2:	51                   	push   ecx
c001b8b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8b6:	6a 00                	push   0x0
c001b8b8:	68 10 01 00 00       	push   0x110
c001b8bd:	50                   	push   eax
c001b8be:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8c1:	83 c4 20             	add    esp,0x20
c001b8c4:	85 c0                	test   eax,eax
c001b8c6:	74 38                	je     c001b900 <sysCallReadDir(regs*)+0x8a>
c001b8c8:	83 f8 07             	cmp    eax,0x7
c001b8cb:	74 0c                	je     c001b8d9 <sysCallReadDir(regs*)+0x63>
c001b8cd:	b8 02 00 00 00       	mov    eax,0x2
c001b8d2:	31 d2                	xor    edx,edx
c001b8d4:	83 c4 18             	add    esp,0x18
c001b8d7:	5b                   	pop    ebx
c001b8d8:	c3                   	ret    
c001b8d9:	b8 01 00 00 00       	mov    eax,0x1
c001b8de:	eb f2                	jmp    c001b8d2 <sysCallReadDir(regs*)+0x5c>
c001b8e0:	83 ec 08             	sub    esp,0x8
c001b8e3:	52                   	push   edx
c001b8e4:	68 a8 be 02 c0       	push   0xc002bea8
c001b8e9:	e8 0c 76 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8fb:	83 c4 18             	add    esp,0x18
c001b8fe:	5b                   	pop    ebx
c001b8ff:	c3                   	ret    
c001b900:	31 c0                	xor    eax,eax
c001b902:	eb ce                	jmp    c001b8d2 <sysCallReadDir(regs*)+0x5c>

c001b904 <sysCallIsATTY(regs*)>:
c001b904:	83 ec 0c             	sub    esp,0xc
c001b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b90e:	83 f8 02             	cmp    eax,0x2
c001b911:	76 07                	jbe    c001b91a <sysCallIsATTY(regs*)+0x16>
c001b913:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b918:	75 26                	jne    c001b940 <sysCallIsATTY(regs*)+0x3c>
c001b91a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b922:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b928:	85 c0                	test   eax,eax
c001b92a:	74 24                	je     c001b950 <sysCallIsATTY(regs*)+0x4c>
c001b92c:	83 ec 0c             	sub    esp,0xc
c001b92f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b931:	50                   	push   eax
c001b932:	ff 12                	call   DWORD PTR [edx]
c001b934:	31 d2                	xor    edx,edx
c001b936:	0f b6 c0             	movzx  eax,al
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	83 c4 0c             	add    esp,0xc
c001b93f:	c3                   	ret    
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	50                   	push   eax
c001b944:	e8 00 61 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b949:	83 c4 10             	add    esp,0x10
c001b94c:	85 c0                	test   eax,eax
c001b94e:	75 dc                	jne    c001b92c <sysCallIsATTY(regs*)+0x28>
c001b950:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b955:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b95a:	83 c4 0c             	add    esp,0xc
c001b95d:	c3                   	ret    

c001b95e <sysCallSeek(regs*)>:
c001b95e:	53                   	push   ebx
c001b95f:	83 ec 08             	sub    esp,0x8
c001b962:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b966:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b969:	83 f8 02             	cmp    eax,0x2
c001b96c:	76 4a                	jbe    c001b9b8 <sysCallSeek(regs*)+0x5a>
c001b96e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b973:	77 32                	ja     c001b9a7 <sysCallSeek(regs*)+0x49>
c001b975:	83 ec 0c             	sub    esp,0xc
c001b978:	50                   	push   eax
c001b979:	e8 cb 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b97e:	83 c4 0c             	add    esp,0xc
c001b981:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b984:	31 db                	xor    ebx,ebx
c001b986:	53                   	push   ebx
c001b987:	51                   	push   ecx
c001b988:	50                   	push   eax
c001b989:	e8 e6 7b ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	85 c0                	test   eax,eax
c001b993:	0f 95 c0             	setne  al
c001b996:	31 d2                	xor    edx,edx
c001b998:	0f b6 c0             	movzx  eax,al
c001b99b:	f7 d8                	neg    eax
c001b99d:	83 d2 00             	adc    edx,0x0
c001b9a0:	83 c4 08             	add    esp,0x8
c001b9a3:	f7 da                	neg    edx
c001b9a5:	5b                   	pop    ebx
c001b9a6:	c3                   	ret    
c001b9a7:	83 ec 08             	sub    esp,0x8
c001b9aa:	50                   	push   eax
c001b9ab:	68 9b bd 02 c0       	push   0xc002bd9b
c001b9b0:	e8 45 75 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001b9b5:	83 c4 10             	add    esp,0x10
c001b9b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9c2:	83 c4 08             	add    esp,0x8
c001b9c5:	5b                   	pop    ebx
c001b9c6:	c3                   	ret    

c001b9c7 <sysCallTell(regs*)>:
c001b9c7:	53                   	push   ebx
c001b9c8:	83 ec 08             	sub    esp,0x8
c001b9cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9d2:	83 f8 02             	cmp    eax,0x2
c001b9d5:	76 5e                	jbe    c001ba35 <sysCallTell(regs*)+0x6e>
c001b9d7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9dc:	77 2d                	ja     c001ba0b <sysCallTell(regs*)+0x44>
c001b9de:	83 ec 0c             	sub    esp,0xc
c001b9e1:	50                   	push   eax
c001b9e2:	e8 62 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b9e7:	5a                   	pop    edx
c001b9e8:	59                   	pop    ecx
c001b9e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9ec:	50                   	push   eax
c001b9ed:	e8 d8 7b ff ff       	call   c00135ca <File::tell(unsigned long long*)>
c001b9f2:	83 c4 10             	add    esp,0x10
c001b9f5:	85 c0                	test   eax,eax
c001b9f7:	0f 95 c0             	setne  al
c001b9fa:	31 d2                	xor    edx,edx
c001b9fc:	0f b6 c0             	movzx  eax,al
c001b9ff:	f7 d8                	neg    eax
c001ba01:	83 d2 00             	adc    edx,0x0
c001ba04:	83 c4 08             	add    esp,0x8
c001ba07:	f7 da                	neg    edx
c001ba09:	5b                   	pop    ebx
c001ba0a:	c3                   	ret    
c001ba0b:	83 ec 08             	sub    esp,0x8
c001ba0e:	50                   	push   eax
c001ba0f:	68 b5 bd 02 c0       	push   0xc002bdb5
c001ba14:	e8 e1 74 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ba19:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba2c:	31 d2                	xor    edx,edx
c001ba2e:	31 c0                	xor    eax,eax
c001ba30:	83 c4 08             	add    esp,0x8
c001ba33:	5b                   	pop    ebx
c001ba34:	c3                   	ret    
c001ba35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba3f:	83 c4 08             	add    esp,0x8
c001ba42:	5b                   	pop    ebx
c001ba43:	c3                   	ret    

c001ba44 <sysCallSize(regs*)>:
c001ba44:	53                   	push   ebx
c001ba45:	83 ec 18             	sub    esp,0x18
c001ba48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba4c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba4f:	83 f8 02             	cmp    eax,0x2
c001ba52:	76 64                	jbe    c001bab8 <sysCallSize(regs*)+0x74>
c001ba54:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba59:	77 33                	ja     c001ba8e <sysCallSize(regs*)+0x4a>
c001ba5b:	83 ec 0c             	sub    esp,0xc
c001ba5e:	50                   	push   eax
c001ba5f:	e8 e5 5f ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001ba64:	83 c4 0c             	add    esp,0xc
c001ba67:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba6b:	52                   	push   edx
c001ba6c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba6f:	50                   	push   eax
c001ba70:	e8 ed 7c ff ff       	call   c0013762 <File::stat(unsigned long long*, bool*)>
c001ba75:	83 c4 10             	add    esp,0x10
c001ba78:	85 c0                	test   eax,eax
c001ba7a:	0f 95 c0             	setne  al
c001ba7d:	31 d2                	xor    edx,edx
c001ba7f:	0f b6 c0             	movzx  eax,al
c001ba82:	f7 d8                	neg    eax
c001ba84:	83 d2 00             	adc    edx,0x0
c001ba87:	83 c4 18             	add    esp,0x18
c001ba8a:	f7 da                	neg    edx
c001ba8c:	5b                   	pop    ebx
c001ba8d:	c3                   	ret    
c001ba8e:	83 ec 08             	sub    esp,0x8
c001ba91:	50                   	push   eax
c001ba92:	68 cf bd 02 c0       	push   0xc002bdcf
c001ba97:	e8 5e 74 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ba9c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baa8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baaf:	31 d2                	xor    edx,edx
c001bab1:	31 c0                	xor    eax,eax
c001bab3:	83 c4 18             	add    esp,0x18
c001bab6:	5b                   	pop    ebx
c001bab7:	c3                   	ret    
c001bab8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001babd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bac2:	83 c4 18             	add    esp,0x18
c001bac5:	5b                   	pop    ebx
c001bac6:	c3                   	ret    

c001bac7 <sysCallSizeFromFilename(regs*)>:
c001bac7:	57                   	push   edi
c001bac8:	56                   	push   esi
c001bac9:	53                   	push   ebx
c001baca:	83 ec 20             	sub    esp,0x20
c001bacd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bad1:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bad4:	83 fb 02             	cmp    ebx,0x2
c001bad7:	0f 86 99 00 00 00    	jbe    c001bb76 <sysCallSizeFromFilename(regs*)+0xaf>
c001badd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bae3:	77 65                	ja     c001bb4a <sysCallSizeFromFilename(regs*)+0x83>
c001bae5:	83 ec 0c             	sub    esp,0xc
c001bae8:	68 14 01 00 00       	push   0x114
c001baed:	e8 4e 3d ff ff       	call   c000f840 <malloc>
c001baf2:	83 c4 0c             	add    esp,0xc
c001baf5:	89 c6                	mov    esi,eax
c001baf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bafc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baff:	53                   	push   ebx
c001bb00:	56                   	push   esi
c001bb01:	e8 4c 79 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001bb06:	83 c4 0c             	add    esp,0xc
c001bb09:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb0d:	50                   	push   eax
c001bb0e:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb11:	56                   	push   esi
c001bb12:	e8 4b 7c ff ff       	call   c0013762 <File::stat(unsigned long long*, bool*)>
c001bb17:	83 c4 10             	add    esp,0x10
c001bb1a:	85 f6                	test   esi,esi
c001bb1c:	74 14                	je     c001bb32 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb22:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb24:	83 ec 0c             	sub    esp,0xc
c001bb27:	56                   	push   esi
c001bb28:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb32:	85 c0                	test   eax,eax
c001bb34:	0f 95 c0             	setne  al
c001bb37:	31 d2                	xor    edx,edx
c001bb39:	0f b6 c0             	movzx  eax,al
c001bb3c:	f7 d8                	neg    eax
c001bb3e:	83 d2 00             	adc    edx,0x0
c001bb41:	83 c4 20             	add    esp,0x20
c001bb44:	f7 da                	neg    edx
c001bb46:	5b                   	pop    ebx
c001bb47:	5e                   	pop    esi
c001bb48:	5f                   	pop    edi
c001bb49:	c3                   	ret    
c001bb4a:	83 ec 08             	sub    esp,0x8
c001bb4d:	53                   	push   ebx
c001bb4e:	68 cf bd 02 c0       	push   0xc002bdcf
c001bb53:	e8 a2 73 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001bb58:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb5b:	83 c4 10             	add    esp,0x10
c001bb5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb6b:	31 d2                	xor    edx,edx
c001bb6d:	83 c4 20             	add    esp,0x20
c001bb70:	31 c0                	xor    eax,eax
c001bb72:	5b                   	pop    ebx
c001bb73:	5e                   	pop    esi
c001bb74:	5f                   	pop    edi
c001bb75:	c3                   	ret    
c001bb76:	83 c4 20             	add    esp,0x20
c001bb79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb7e:	5b                   	pop    ebx
c001bb7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb84:	5e                   	pop    esi
c001bb85:	5f                   	pop    edi
c001bb86:	c3                   	ret    

c001bb87 <sysCallClose(regs*)>:
c001bb87:	53                   	push   ebx
c001bb88:	83 ec 08             	sub    esp,0x8
c001bb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb92:	83 f8 02             	cmp    eax,0x2
c001bb95:	76 50                	jbe    c001bbe7 <sysCallClose(regs*)+0x60>
c001bb97:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb9c:	74 58                	je     c001bbf6 <sysCallClose(regs*)+0x6f>
c001bb9e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bba3:	74 60                	je     c001bc05 <sysCallClose(regs*)+0x7e>
c001bba5:	77 2f                	ja     c001bbd6 <sysCallClose(regs*)+0x4f>
c001bba7:	83 ec 0c             	sub    esp,0xc
c001bbaa:	50                   	push   eax
c001bbab:	e8 99 5e ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bbb0:	89 c3                	mov    ebx,eax
c001bbb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbb5:	e8 5a 79 ff ff       	call   c0013514 <File::close()>
c001bbba:	83 c4 10             	add    esp,0x10
c001bbbd:	85 db                	test   ebx,ebx
c001bbbf:	74 0c                	je     c001bbcd <sysCallClose(regs*)+0x46>
c001bbc1:	83 ec 0c             	sub    esp,0xc
c001bbc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbc6:	53                   	push   ebx
c001bbc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbca:	83 c4 10             	add    esp,0x10
c001bbcd:	31 c0                	xor    eax,eax
c001bbcf:	31 d2                	xor    edx,edx
c001bbd1:	83 c4 08             	add    esp,0x8
c001bbd4:	5b                   	pop    ebx
c001bbd5:	c3                   	ret    
c001bbd6:	83 ec 08             	sub    esp,0x8
c001bbd9:	50                   	push   eax
c001bbda:	68 cc be 02 c0       	push   0xc002becc
c001bbdf:	e8 16 73 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbf1:	83 c4 08             	add    esp,0x8
c001bbf4:	5b                   	pop    ebx
c001bbf5:	c3                   	ret    
c001bbf6:	83 ec 0c             	sub    esp,0xc
c001bbf9:	68 ea bd 02 c0       	push   0xc002bdea
c001bbfe:	e8 f7 72 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001bc03:	eb c5                	jmp    c001bbca <sysCallClose(regs*)+0x43>
c001bc05:	83 ec 0c             	sub    esp,0xc
c001bc08:	68 f8 bd 02 c0       	push   0xc002bdf8
c001bc0d:	eb ef                	jmp    c001bbfe <sysCallClose(regs*)+0x77>

c001bc0f <sysCallOpenDir(regs*)>:
c001bc0f:	56                   	push   esi
c001bc10:	53                   	push   ebx
c001bc11:	53                   	push   ebx
c001bc12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc16:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc19:	85 f6                	test   esi,esi
c001bc1b:	74 59                	je     c001bc76 <sysCallOpenDir(regs*)+0x67>
c001bc1d:	83 ec 0c             	sub    esp,0xc
c001bc20:	68 14 01 00 00       	push   0x114
c001bc25:	e8 16 3c ff ff       	call   c000f840 <malloc>
c001bc2a:	83 c4 0c             	add    esp,0xc
c001bc2d:	89 c6                	mov    esi,eax
c001bc2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc34:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc37:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc3a:	56                   	push   esi
c001bc3b:	e8 be 7c ff ff       	call   c00138fe <Directory::Directory(char const*, Process*)>
c001bc40:	83 c4 10             	add    esp,0x10
c001bc43:	85 f6                	test   esi,esi
c001bc45:	74 2f                	je     c001bc76 <sysCallOpenDir(regs*)+0x67>
c001bc47:	83 ec 0c             	sub    esp,0xc
c001bc4a:	56                   	push   esi
c001bc4b:	e8 12 7d ff ff       	call   c0013962 <Directory::open()>
c001bc50:	83 c4 10             	add    esp,0x10
c001bc53:	85 c0                	test   eax,eax
c001bc55:	75 1f                	jne    c001bc76 <sysCallOpenDir(regs*)+0x67>
c001bc57:	83 ec 0c             	sub    esp,0xc
c001bc5a:	56                   	push   esi
c001bc5b:	e8 f4 5a ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001bc60:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	89 02                	mov    DWORD PTR [edx],eax
c001bc68:	c1 f8 1f             	sar    eax,0x1f
c001bc6b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	59                   	pop    ecx
c001bc71:	31 d2                	xor    edx,edx
c001bc73:	5b                   	pop    ebx
c001bc74:	5e                   	pop    esi
c001bc75:	c3                   	ret    
c001bc76:	59                   	pop    ecx
c001bc77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc7c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc81:	5b                   	pop    ebx
c001bc82:	5e                   	pop    esi
c001bc83:	c3                   	ret    

c001bc84 <sysCallCloseDir(regs*)>:
c001bc84:	53                   	push   ebx
c001bc85:	83 ec 08             	sub    esp,0x8
c001bc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc8f:	83 f8 02             	cmp    eax,0x2
c001bc92:	76 47                	jbe    c001bcdb <sysCallCloseDir(regs*)+0x57>
c001bc94:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc99:	77 2f                	ja     c001bcca <sysCallCloseDir(regs*)+0x46>
c001bc9b:	83 ec 0c             	sub    esp,0xc
c001bc9e:	50                   	push   eax
c001bc9f:	e8 a5 5d ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bca4:	89 c3                	mov    ebx,eax
c001bca6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bca9:	e8 10 7d ff ff       	call   c00139be <Directory::close()>
c001bcae:	83 c4 10             	add    esp,0x10
c001bcb1:	85 db                	test   ebx,ebx
c001bcb3:	74 0c                	je     c001bcc1 <sysCallCloseDir(regs*)+0x3d>
c001bcb5:	83 ec 0c             	sub    esp,0xc
c001bcb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcba:	53                   	push   ebx
c001bcbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	31 c0                	xor    eax,eax
c001bcc3:	31 d2                	xor    edx,edx
c001bcc5:	83 c4 08             	add    esp,0x8
c001bcc8:	5b                   	pop    ebx
c001bcc9:	c3                   	ret    
c001bcca:	83 ec 08             	sub    esp,0x8
c001bccd:	50                   	push   eax
c001bcce:	68 f4 be 02 c0       	push   0xc002bef4
c001bcd3:	e8 22 72 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001bcd8:	83 c4 10             	add    esp,0x10
c001bcdb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bce0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce5:	83 c4 08             	add    esp,0x8
c001bce8:	5b                   	pop    ebx
c001bce9:	c3                   	ret    

c001bcea <sysCallMakeDir(regs*)>:
c001bcea:	56                   	push   esi
c001bceb:	53                   	push   ebx
c001bcec:	83 ec 10             	sub    esp,0x10
c001bcef:	68 14 01 00 00       	push   0x114
c001bcf4:	e8 47 3b ff ff       	call   c000f840 <malloc>
c001bcf9:	83 c4 0c             	add    esp,0xc
c001bcfc:	89 c3                	mov    ebx,eax
c001bcfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd03:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd0a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd0d:	53                   	push   ebx
c001bd0e:	e8 eb 7b ff ff       	call   c00138fe <Directory::Directory(char const*, Process*)>
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	85 db                	test   ebx,ebx
c001bd18:	74 32                	je     c001bd4c <sysCallMakeDir(regs*)+0x62>
c001bd1a:	83 ec 0c             	sub    esp,0xc
c001bd1d:	53                   	push   ebx
c001bd1e:	e8 1f 7e ff ff       	call   c0013b42 <Directory::create()>
c001bd23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd26:	89 c6                	mov    esi,eax
c001bd28:	e8 91 7c ff ff       	call   c00139be <Directory::close()>
c001bd2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd35:	83 c4 10             	add    esp,0x10
c001bd38:	31 c0                	xor    eax,eax
c001bd3a:	59                   	pop    ecx
c001bd3b:	85 f6                	test   esi,esi
c001bd3d:	5b                   	pop    ebx
c001bd3e:	0f 95 c0             	setne  al
c001bd41:	5e                   	pop    esi
c001bd42:	31 d2                	xor    edx,edx
c001bd44:	f7 d8                	neg    eax
c001bd46:	83 d2 00             	adc    edx,0x0
c001bd49:	f7 da                	neg    edx
c001bd4b:	c3                   	ret    
c001bd4c:	59                   	pop    ecx
c001bd4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd52:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd57:	5b                   	pop    ebx
c001bd58:	5e                   	pop    esi
c001bd59:	c3                   	ret    

c001bd5a <sysCallWait(regs*)>:
c001bd5a:	83 ec 10             	sub    esp,0x10
c001bd5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd61:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd64:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd67:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd6a:	e8 ce 24 00 00       	call   c001e23d <waitTask(int, int*, int)>
c001bd6f:	83 c4 1c             	add    esp,0x1c
c001bd72:	99                   	cdq    
c001bd73:	c3                   	ret    

c001bd74 <sysCallNotImpl(regs*)>:
c001bd74:	83 ec 18             	sub    esp,0x18
c001bd77:	68 06 be 02 c0       	push   0xc002be06
c001bd7c:	e8 2a e8 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001bd81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd8b:	83 c4 1c             	add    esp,0x1c
c001bd8e:	c3                   	ret    

c001bd8f <sysPanic(regs*)>:
c001bd8f:	83 ec 18             	sub    esp,0x18
c001bd92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd96:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd99:	e8 0d e8 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001bd9e:	c7 04 24 20 be 02 c0 	mov    DWORD PTR [esp],0xc002be20
c001bda5:	e8 01 e8 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001bdaa:	b8 01 00 00 00       	mov    eax,0x1
c001bdaf:	31 d2                	xor    edx,edx
c001bdb1:	83 c4 1c             	add    esp,0x1c
c001bdb4:	c3                   	ret    

c001bdb5 <sysCallRmdir(regs*)>:
c001bdb5:	56                   	push   esi
c001bdb6:	53                   	push   ebx
c001bdb7:	83 ec 20             	sub    esp,0x20
c001bdba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdbe:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdc1:	68 14 01 00 00       	push   0x114
c001bdc6:	e8 75 3a ff ff       	call   c000f840 <malloc>
c001bdcb:	83 c4 0c             	add    esp,0xc
c001bdce:	89 c3                	mov    ebx,eax
c001bdd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdd5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdd8:	56                   	push   esi
c001bdd9:	53                   	push   ebx
c001bdda:	e8 73 76 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001bddf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde2:	e8 47 78 ff ff       	call   c001362e <File::unlink()>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	85 db                	test   ebx,ebx
c001bdec:	74 14                	je     c001be02 <sysCallRmdir(regs*)+0x4d>
c001bdee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdf2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	53                   	push   ebx
c001bdf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be02:	85 c0                	test   eax,eax
c001be04:	0f 95 c0             	setne  al
c001be07:	31 d2                	xor    edx,edx
c001be09:	0f b6 c0             	movzx  eax,al
c001be0c:	f7 d8                	neg    eax
c001be0e:	83 d2 00             	adc    edx,0x0
c001be11:	83 c4 14             	add    esp,0x14
c001be14:	f7 da                	neg    edx
c001be16:	5b                   	pop    ebx
c001be17:	5e                   	pop    esi
c001be18:	c3                   	ret    

c001be19 <sysCallUnlink(regs*)>:
c001be19:	56                   	push   esi
c001be1a:	53                   	push   ebx
c001be1b:	83 ec 20             	sub    esp,0x20
c001be1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be22:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be25:	68 14 01 00 00       	push   0x114
c001be2a:	e8 11 3a ff ff       	call   c000f840 <malloc>
c001be2f:	83 c4 0c             	add    esp,0xc
c001be32:	89 c3                	mov    ebx,eax
c001be34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be39:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be3c:	56                   	push   esi
c001be3d:	53                   	push   ebx
c001be3e:	e8 0f 76 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001be43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be46:	e8 e3 77 ff ff       	call   c001362e <File::unlink()>
c001be4b:	83 c4 10             	add    esp,0x10
c001be4e:	85 db                	test   ebx,ebx
c001be50:	74 14                	je     c001be66 <sysCallUnlink(regs*)+0x4d>
c001be52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be56:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be58:	83 ec 0c             	sub    esp,0xc
c001be5b:	53                   	push   ebx
c001be5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be66:	85 c0                	test   eax,eax
c001be68:	0f 95 c0             	setne  al
c001be6b:	31 d2                	xor    edx,edx
c001be6d:	0f b6 c0             	movzx  eax,al
c001be70:	f7 d8                	neg    eax
c001be72:	83 d2 00             	adc    edx,0x0
c001be75:	83 c4 14             	add    esp,0x14
c001be78:	f7 da                	neg    edx
c001be7a:	5b                   	pop    ebx
c001be7b:	5e                   	pop    esi
c001be7c:	c3                   	ret    

c001be7d <sysCallGetArgv(regs*)>:
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be84:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be87:	85 c0                	test   eax,eax
c001be89:	78 2b                	js     c001beb6 <sysCallGetArgv(regs*)+0x39>
c001be8b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be91:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be94:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be9a:	7d 1a                	jge    c001beb6 <sysCallGetArgv(regs*)+0x39>
c001be9c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bea3:	85 c0                	test   eax,eax
c001bea5:	74 17                	je     c001bebe <sysCallGetArgv(regs*)+0x41>
c001bea7:	83 ec 08             	sub    esp,0x8
c001beaa:	50                   	push   eax
c001beab:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001beae:	e8 81 49 fe ff       	call   c0000834 <strcpy>
c001beb3:	83 c4 10             	add    esp,0x10
c001beb6:	31 c0                	xor    eax,eax
c001beb8:	31 d2                	xor    edx,edx
c001beba:	83 c4 0c             	add    esp,0xc
c001bebd:	c3                   	ret    
c001bebe:	b8 01 00 00 00       	mov    eax,0x1
c001bec3:	31 d2                	xor    edx,edx
c001bec5:	83 c4 0c             	add    esp,0xc
c001bec8:	c3                   	ret    

c001bec9 <sysCallTTYName(regs*)>:
c001bec9:	56                   	push   esi
c001beca:	53                   	push   ebx
c001becb:	53                   	push   ebx
c001becc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bed0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bed3:	85 c0                	test   eax,eax
c001bed5:	74 5f                	je     c001bf36 <sysCallTTYName(regs*)+0x6d>
c001bed7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001beda:	83 f8 02             	cmp    eax,0x2
c001bedd:	77 3e                	ja     c001bf1d <sysCallTTYName(regs*)+0x54>
c001bedf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bee7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001beed:	85 db                	test   ebx,ebx
c001beef:	74 45                	je     c001bf36 <sysCallTTYName(regs*)+0x6d>
c001bef1:	83 ec 0c             	sub    esp,0xc
c001bef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bef6:	53                   	push   ebx
c001bef7:	ff 10                	call   DWORD PTR [eax]
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	84 c0                	test   al,al
c001befe:	74 41                	je     c001bf41 <sysCallTTYName(regs*)+0x78>
c001bf00:	83 ec 08             	sub    esp,0x8
c001bf03:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf09:	53                   	push   ebx
c001bf0a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf0d:	e8 22 49 fe ff       	call   c0000834 <strcpy>
c001bf12:	83 c4 10             	add    esp,0x10
c001bf15:	31 c0                	xor    eax,eax
c001bf17:	59                   	pop    ecx
c001bf18:	31 d2                	xor    edx,edx
c001bf1a:	5b                   	pop    ebx
c001bf1b:	5e                   	pop    esi
c001bf1c:	c3                   	ret    
c001bf1d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf22:	74 bb                	je     c001bedf <sysCallTTYName(regs*)+0x16>
c001bf24:	83 ec 0c             	sub    esp,0xc
c001bf27:	50                   	push   eax
c001bf28:	e8 1c 5b ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bf2d:	83 c4 10             	add    esp,0x10
c001bf30:	89 c3                	mov    ebx,eax
c001bf32:	85 db                	test   ebx,ebx
c001bf34:	75 bb                	jne    c001bef1 <sysCallTTYName(regs*)+0x28>
c001bf36:	59                   	pop    ecx
c001bf37:	b8 01 00 00 00       	mov    eax,0x1
c001bf3c:	31 d2                	xor    edx,edx
c001bf3e:	5b                   	pop    ebx
c001bf3f:	5e                   	pop    esi
c001bf40:	c3                   	ret    
c001bf41:	59                   	pop    ecx
c001bf42:	b8 02 00 00 00       	mov    eax,0x2
c001bf47:	31 d2                	xor    edx,edx
c001bf49:	5b                   	pop    ebx
c001bf4a:	5e                   	pop    esi
c001bf4b:	c3                   	ret    

c001bf4c <sysCallUSleep(regs*)>:
c001bf4c:	83 ec 14             	sub    esp,0x14
c001bf4f:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf58:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf5f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf62:	01 ca                	add    edx,ecx
c001bf64:	52                   	push   edx
c001bf65:	50                   	push   eax
c001bf66:	e8 6b 23 00 00       	call   c001e2d6 <nanoSleep(unsigned long long)>
c001bf6b:	31 c0                	xor    eax,eax
c001bf6d:	31 d2                	xor    edx,edx
c001bf6f:	83 c4 1c             	add    esp,0x1c
c001bf72:	c3                   	ret    

c001bf73 <sysCallSpawn(regs*)>:
c001bf73:	56                   	push   esi
c001bf74:	53                   	push   ebx
c001bf75:	53                   	push   ebx
c001bf76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf7a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf7d:	85 f6                	test   esi,esi
c001bf7f:	75 08                	jne    c001bf89 <sysCallSpawn(regs*)+0x16>
c001bf81:	59                   	pop    ecx
c001bf82:	31 c0                	xor    eax,eax
c001bf84:	31 d2                	xor    edx,edx
c001bf86:	5b                   	pop    ebx
c001bf87:	5e                   	pop    esi
c001bf88:	c3                   	ret    
c001bf89:	83 ec 0c             	sub    esp,0xc
c001bf8c:	68 3f 07 00 00       	push   0x73f
c001bf91:	e8 aa 38 ff ff       	call   c000f840 <malloc>
c001bf96:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf99:	89 c6                	mov    esi,eax
c001bf9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfa0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfa3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfa6:	56                   	push   esi
c001bfa7:	e8 2a 1a 00 00       	call   c001d9d6 <Process::Process(char const*, Process*, char**)>
c001bfac:	83 c4 20             	add    esp,0x20
c001bfaf:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bfb6:	75 c9                	jne    c001bf81 <sysCallSpawn(regs*)+0xe>
c001bfb8:	83 ec 0c             	sub    esp,0xc
c001bfbb:	56                   	push   esi
c001bfbc:	e8 db 1f 00 00       	call   c001df9c <Process::createUserThread()>
c001bfc1:	8b 06                	mov    eax,DWORD PTR [esi]
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	99                   	cdq    
c001bfc7:	59                   	pop    ecx
c001bfc8:	5b                   	pop    ebx
c001bfc9:	5e                   	pop    esi
c001bfca:	c3                   	ret    

c001bfcb <sysCallGetEnv(regs*)>:
c001bfcb:	55                   	push   ebp
c001bfcc:	57                   	push   edi
c001bfcd:	56                   	push   esi
c001bfce:	53                   	push   ebx
c001bfcf:	83 ec 28             	sub    esp,0x28
c001bfd2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfd6:	68 2f be 02 c0       	push   0xc002be2f
c001bfdb:	e8 1a 6f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001bfe0:	5f                   	pop    edi
c001bfe1:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfe4:	5d                   	pop    ebp
c001bfe5:	53                   	push   ebx
c001bfe6:	68 5e c1 02 c0       	push   0xc002c15e
c001bfeb:	e8 0a 6f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001bff0:	58                   	pop    eax
c001bff1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bff4:	5a                   	pop    edx
c001bff5:	57                   	push   edi
c001bff6:	68 38 be 02 c0       	push   0xc002be38
c001bffb:	e8 fa 6e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c000:	59                   	pop    ecx
c001c001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c006:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c009:	e8 b9 e4 ff ff       	call   c001a4c7 <Krnl::getProcessTotalEnvCount(Process*)>
c001c00e:	5a                   	pop    edx
c001c00f:	89 c5                	mov    ebp,eax
c001c011:	59                   	pop    ecx
c001c012:	50                   	push   eax
c001c013:	68 42 be 02 c0       	push   0xc002be42
c001c018:	e8 dd 6e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c01d:	83 c4 10             	add    esp,0x10
c001c020:	39 ef                	cmp    edi,ebp
c001c022:	7c 15                	jl     c001c039 <sysCallGetEnv(regs*)+0x6e>
c001c024:	85 db                	test   ebx,ebx
c001c026:	75 0c                	jne    c001c034 <sysCallGetEnv(regs*)+0x69>
c001c028:	83 c4 1c             	add    esp,0x1c
c001c02b:	31 c0                	xor    eax,eax
c001c02d:	5b                   	pop    ebx
c001c02e:	31 d2                	xor    edx,edx
c001c030:	5e                   	pop    esi
c001c031:	5f                   	pop    edi
c001c032:	5d                   	pop    ebp
c001c033:	c3                   	ret    
c001c034:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c037:	eb ef                	jmp    c001c028 <sysCallGetEnv(regs*)+0x5d>
c001c039:	83 ec 0c             	sub    esp,0xc
c001c03c:	68 4e be 02 c0       	push   0xc002be4e
c001c041:	e8 b4 6e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c046:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c04a:	83 c4 0c             	add    esp,0xc
c001c04d:	57                   	push   edi
c001c04e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c054:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c057:	50                   	push   eax
c001c058:	e8 8a e4 ff ff       	call   c001a4e7 <Krnl::getProcessEnvPair(Process*, int)>
c001c05d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c061:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c065:	68 dd c1 02 c0       	push   0xc002c1dd
c001c06a:	e8 8b 6e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c06f:	83 c4 10             	add    esp,0x10
c001c072:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c075:	85 f6                	test   esi,esi
c001c077:	75 47                	jne    c001c0c0 <sysCallGetEnv(regs*)+0xf5>
c001c079:	83 ec 0c             	sub    esp,0xc
c001c07c:	55                   	push   ebp
c001c07d:	e8 12 47 fe ff       	call   c0000794 <strlen>
c001c082:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c085:	89 c3                	mov    ebx,eax
c001c087:	e8 08 47 fe ff       	call   c0000794 <strlen>
c001c08c:	5a                   	pop    edx
c001c08d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c091:	59                   	pop    ecx
c001c092:	50                   	push   eax
c001c093:	68 51 be 02 c0       	push   0xc002be51
c001c098:	e8 5d 6e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c09d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0a0:	e8 ef 46 fe ff       	call   c0000794 <strlen>
c001c0a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0a8:	89 c3                	mov    ebx,eax
c001c0aa:	e8 e5 46 fe ff       	call   c0000794 <strlen>
c001c0af:	83 c4 10             	add    esp,0x10
c001c0b2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0b6:	83 c4 1c             	add    esp,0x1c
c001c0b9:	31 d2                	xor    edx,edx
c001c0bb:	5b                   	pop    ebx
c001c0bc:	5e                   	pop    esi
c001c0bd:	5f                   	pop    edi
c001c0be:	5d                   	pop    ebp
c001c0bf:	c3                   	ret    
c001c0c0:	83 ec 0c             	sub    esp,0xc
c001c0c3:	68 f7 c1 02 c0       	push   0xc002c1f7
c001c0c8:	e8 2d 6e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c0cd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0d0:	58                   	pop    eax
c001c0d1:	5a                   	pop    edx
c001c0d2:	55                   	push   ebp
c001c0d3:	53                   	push   ebx
c001c0d4:	e8 5b 47 fe ff       	call   c0000834 <strcpy>
c001c0d9:	59                   	pop    ecx
c001c0da:	5e                   	pop    esi
c001c0db:	68 5b be 02 c0       	push   0xc002be5b
c001c0e0:	53                   	push   ebx
c001c0e1:	e8 8e 48 fe ff       	call   c0000974 <strcat>
c001c0e6:	5d                   	pop    ebp
c001c0e7:	58                   	pop    eax
c001c0e8:	57                   	push   edi
c001c0e9:	53                   	push   ebx
c001c0ea:	e8 85 48 fe ff       	call   c0000974 <strcat>
c001c0ef:	c7 04 24 11 c2 02 c0 	mov    DWORD PTR [esp],0xc002c211
c001c0f6:	e8 ff 6d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c0fb:	83 c4 10             	add    esp,0x10
c001c0fe:	e9 25 ff ff ff       	jmp    c001c028 <sysCallGetEnv(regs*)+0x5d>

c001c103 <sysAppSettings(regs*)>:
c001c103:	53                   	push   ebx
c001c104:	83 ec 08             	sub    esp,0x8
c001c107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c10e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c114:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c119:	66 3d c0 09          	cmp    ax,0x9c0
c001c11d:	75 2f                	jne    c001c14e <sysAppSettings(regs*)+0x4b>
c001c11f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c125:	83 e0 1f             	and    eax,0x1f
c001c128:	3c 01                	cmp    al,0x1
c001c12a:	74 2e                	je     c001c15a <sysAppSettings(regs*)+0x57>
c001c12c:	3c 07                	cmp    al,0x7
c001c12e:	0f 84 bd 00 00 00    	je     c001c1f1 <sysAppSettings(regs*)+0xee>
c001c134:	84 c0                	test   al,al
c001c136:	0f 84 dc 00 00 00    	je     c001c218 <sysAppSettings(regs*)+0x115>
c001c13c:	3c 08                	cmp    al,0x8
c001c13e:	74 6d                	je     c001c1ad <sysAppSettings(regs*)+0xaa>
c001c140:	0f b6 c0             	movzx  eax,al
c001c143:	83 c4 08             	add    esp,0x8
c001c146:	05 e8 03 00 00       	add    eax,0x3e8
c001c14b:	5b                   	pop    ebx
c001c14c:	99                   	cdq    
c001c14d:	c3                   	ret    
c001c14e:	b8 01 00 00 00       	mov    eax,0x1
c001c153:	31 d2                	xor    edx,edx
c001c155:	83 c4 08             	add    esp,0x8
c001c158:	5b                   	pop    ebx
c001c159:	c3                   	ret    
c001c15a:	51                   	push   ecx
c001c15b:	68 00 01 00 00       	push   0x100
c001c160:	6a 00                	push   0x0
c001c162:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c167:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c16a:	83 c0 0c             	add    eax,0xc
c001c16d:	50                   	push   eax
c001c16e:	e8 05 46 fe ff       	call   c0000778 <memset>
c001c173:	83 c4 0c             	add    esp,0xc
c001c176:	68 ff 00 00 00       	push   0xff
c001c17b:	53                   	push   ebx
c001c17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c181:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c184:	83 c0 0c             	add    eax,0xc
c001c187:	50                   	push   eax
c001c188:	e8 b7 45 fe ff       	call   c0000744 <memcpy>
c001c18d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c192:	5b                   	pop    ebx
c001c193:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c196:	5a                   	pop    edx
c001c197:	8d 50 0c             	lea    edx,[eax+0xc]
c001c19a:	52                   	push   edx
c001c19b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1a1:	e8 1e 4a ff ff       	call   c0010bc4 <VgaText::setTitle(char*)>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	31 c0                	xor    eax,eax
c001c1ab:	eb a6                	jmp    c001c153 <sysAppSettings(regs*)+0x50>
c001c1ad:	83 ec 08             	sub    esp,0x8
c001c1b0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1b6:	83 e0 0f             	and    eax,0xf
c001c1b9:	50                   	push   eax
c001c1ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1c8:	e8 e7 49 ff ff       	call   c0010bb4 <VgaText::setTitleColour(VgaColour)>
c001c1cd:	58                   	pop    eax
c001c1ce:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1d4:	5a                   	pop    edx
c001c1d5:	c1 e8 04             	shr    eax,0x4
c001c1d8:	83 e0 0f             	and    eax,0xf
c001c1db:	50                   	push   eax
c001c1dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1ea:	e8 b5 49 ff ff       	call   c0010ba4 <VgaText::setTitleTextColour(VgaColour)>
c001c1ef:	eb b5                	jmp    c001c1a6 <sysAppSettings(regs*)+0xa3>
c001c1f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1ff:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c205:	c0 e8 06             	shr    al,0x6
c001c208:	83 e0 01             	and    eax,0x1
c001c20b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c211:	31 c0                	xor    eax,eax
c001c213:	e9 3b ff ff ff       	jmp    c001c153 <sysAppSettings(regs*)+0x50>
c001c218:	b8 02 00 00 00       	mov    eax,0x2
c001c21d:	e9 31 ff ff ff       	jmp    c001c153 <sysAppSettings(regs*)+0x50>

c001c222 <sysSetFatAttrib(regs*)>:
c001c222:	57                   	push   edi
c001c223:	56                   	push   esi
c001c224:	53                   	push   ebx
c001c225:	83 ec 1c             	sub    esp,0x1c
c001c228:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c22c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c22f:	68 14 01 00 00       	push   0x114
c001c234:	e8 07 36 ff ff       	call   c000f840 <malloc>
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	89 c3                	mov    ebx,eax
c001c23e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c243:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c246:	57                   	push   edi
c001c247:	53                   	push   ebx
c001c248:	e8 05 72 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001c24d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c250:	83 c4 0c             	add    esp,0xc
c001c253:	0f b6 d4             	movzx  edx,ah
c001c256:	0f b6 c0             	movzx  eax,al
c001c259:	52                   	push   edx
c001c25a:	50                   	push   eax
c001c25b:	53                   	push   ebx
c001c25c:	e8 67 74 ff ff       	call   c00136c8 <File::chfatattr(unsigned char, unsigned char)>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	85 db                	test   ebx,ebx
c001c266:	74 14                	je     c001c27c <sysSetFatAttrib(regs*)+0x5a>
c001c268:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c26c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c26e:	83 ec 0c             	sub    esp,0xc
c001c271:	53                   	push   ebx
c001c272:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c275:	83 c4 10             	add    esp,0x10
c001c278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c27c:	85 c0                	test   eax,eax
c001c27e:	0f 95 c0             	setne  al
c001c281:	31 d2                	xor    edx,edx
c001c283:	0f b6 c0             	movzx  eax,al
c001c286:	f7 d8                	neg    eax
c001c288:	83 d2 00             	adc    edx,0x0
c001c28b:	83 c4 10             	add    esp,0x10
c001c28e:	f7 da                	neg    edx
c001c290:	5b                   	pop    ebx
c001c291:	5e                   	pop    esi
c001c292:	5f                   	pop    edi
c001c293:	c3                   	ret    

c001c294 <sysPipe(regs*)>:
c001c294:	57                   	push   edi
c001c295:	56                   	push   esi
c001c296:	53                   	push   ebx
c001c297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29b:	83 ec 0c             	sub    esp,0xc
c001c29e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2a1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2a4:	6a 20                	push   0x20
c001c2a6:	e8 95 35 ff ff       	call   c000f840 <malloc>
c001c2ab:	89 c3                	mov    ebx,eax
c001c2ad:	58                   	pop    eax
c001c2ae:	5a                   	pop    edx
c001c2af:	68 00 50 00 00       	push   0x5000
c001c2b4:	53                   	push   ebx
c001c2b5:	e8 3a 42 ff ff       	call   c00104f4 <Pipe::Pipe(int)>
c001c2ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2bd:	e8 92 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c2c2:	89 07                	mov    DWORD PTR [edi],eax
c001c2c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2c7:	e8 88 54 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c2cc:	83 c4 10             	add    esp,0x10
c001c2cf:	89 06                	mov    DWORD PTR [esi],eax
c001c2d1:	31 d2                	xor    edx,edx
c001c2d3:	5b                   	pop    ebx
c001c2d4:	31 c0                	xor    eax,eax
c001c2d6:	5e                   	pop    esi
c001c2d7:	5f                   	pop    edi
c001c2d8:	c3                   	ret    

c001c2d9 <sysGetUnixTime(regs*)>:
c001c2d9:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001c2de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2e8:	e9 4f 7b ff ff       	jmp    c0013e3c <Clock::timeInSecondsLocal()>

c001c2ed <string_ends_with(char const*, char const*)>:
c001c2ed:	57                   	push   edi
c001c2ee:	56                   	push   esi
c001c2ef:	53                   	push   ebx
c001c2f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2f4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2f8:	83 ec 0c             	sub    esp,0xc
c001c2fb:	53                   	push   ebx
c001c2fc:	e8 93 44 fe ff       	call   c0000794 <strlen>
c001c301:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c304:	89 c6                	mov    esi,eax
c001c306:	e8 89 44 fe ff       	call   c0000794 <strlen>
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	39 c6                	cmp    esi,eax
c001c310:	7d 06                	jge    c001c318 <string_ends_with(char const*, char const*)+0x2b>
c001c312:	5b                   	pop    ebx
c001c313:	31 c0                	xor    eax,eax
c001c315:	5e                   	pop    esi
c001c316:	5f                   	pop    edi
c001c317:	c3                   	ret    
c001c318:	83 ec 08             	sub    esp,0x8
c001c31b:	29 c6                	sub    esi,eax
c001c31d:	57                   	push   edi
c001c31e:	01 f3                	add    ebx,esi
c001c320:	53                   	push   ebx
c001c321:	e8 9a 45 fe ff       	call   c00008c0 <strcmp>
c001c326:	83 c4 10             	add    esp,0x10
c001c329:	85 c0                	test   eax,eax
c001c32b:	5b                   	pop    ebx
c001c32c:	0f 94 c0             	sete   al
c001c32f:	5e                   	pop    esi
c001c330:	0f b6 c0             	movzx  eax,al
c001c333:	5f                   	pop    edi
c001c334:	c3                   	ret    

c001c335 <sysCallOpen(regs*)>:
c001c335:	56                   	push   esi
c001c336:	53                   	push   ebx
c001c337:	81 ec 04 01 00 00    	sub    esp,0x104
c001c33d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c344:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c347:	85 c9                	test   ecx,ecx
c001c349:	0f 84 b3 00 00 00    	je     c001c402 <sysCallOpen(regs*)+0xcd>
c001c34f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c352:	85 c0                	test   eax,eax
c001c354:	0f 84 a8 00 00 00    	je     c001c402 <sysCallOpen(regs*)+0xcd>
c001c35a:	52                   	push   edx
c001c35b:	68 5d be 02 c0       	push   0xc002be5d
c001c360:	50                   	push   eax
c001c361:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c365:	56                   	push   esi
c001c366:	e8 3d 6f ff ff       	call   c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c36b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c36e:	e8 21 44 fe ff       	call   c0000794 <strlen>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	48                   	dec    eax
c001c377:	74 1d                	je     c001c396 <sysCallOpen(regs*)+0x61>
c001c379:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c37c:	eb 0f                	jmp    c001c38d <sysCallOpen(regs*)+0x58>
c001c37e:	80 fa 3a             	cmp    dl,0x3a
c001c381:	74 0f                	je     c001c392 <sysCallOpen(regs*)+0x5d>
c001c383:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c387:	48                   	dec    eax
c001c388:	74 0c                	je     c001c396 <sysCallOpen(regs*)+0x61>
c001c38a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c38d:	80 fa 2e             	cmp    dl,0x2e
c001c390:	75 ec                	jne    c001c37e <sysCallOpen(regs*)+0x49>
c001c392:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c396:	83 ec 08             	sub    esp,0x8
c001c399:	68 61 be 02 c0       	push   0xc002be61
c001c39e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3a1:	e8 47 ff ff ff       	call   c001c2ed <string_ends_with(char const*, char const*)>
c001c3a6:	83 c4 10             	add    esp,0x10
c001c3a9:	85 c0                	test   eax,eax
c001c3ab:	75 17                	jne    c001c3c4 <sysCallOpen(regs*)+0x8f>
c001c3ad:	83 ec 08             	sub    esp,0x8
c001c3b0:	68 82 be 02 c0       	push   0xc002be82
c001c3b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3b8:	e8 30 ff ff ff       	call   c001c2ed <string_ends_with(char const*, char const*)>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	85 c0                	test   eax,eax
c001c3c2:	74 51                	je     c001c415 <sysCallOpen(regs*)+0xe0>
c001c3c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3c7:	83 ec 08             	sub    esp,0x8
c001c3ca:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c3d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3da:	ff 30                	push   DWORD PTR [eax]
c001c3dc:	68 66 be 02 c0       	push   0xc002be66
c001c3e1:	e8 14 6b ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c3e6:	c7 04 24 75 be 02 c0 	mov    DWORD PTR [esp],0xc002be75
c001c3ed:	e8 08 6b ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c3f2:	83 c4 10             	add    esp,0x10
c001c3f5:	81 c4 04 01 00 00    	add    esp,0x104
c001c3fb:	31 c0                	xor    eax,eax
c001c3fd:	31 d2                	xor    edx,edx
c001c3ff:	5b                   	pop    ebx
c001c400:	5e                   	pop    esi
c001c401:	c3                   	ret    
c001c402:	81 c4 04 01 00 00    	add    esp,0x104
c001c408:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c40d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c412:	5b                   	pop    ebx
c001c413:	5e                   	pop    esi
c001c414:	c3                   	ret    
c001c415:	83 ec 08             	sub    esp,0x8
c001c418:	68 62 be 02 c0       	push   0xc002be62
c001c41d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c420:	e8 9b 44 fe ff       	call   c00008c0 <strcmp>
c001c425:	83 c4 10             	add    esp,0x10
c001c428:	85 c0                	test   eax,eax
c001c42a:	74 98                	je     c001c3c4 <sysCallOpen(regs*)+0x8f>
c001c42c:	83 ec 08             	sub    esp,0x8
c001c42f:	68 61 be 02 c0       	push   0xc002be61
c001c434:	56                   	push   esi
c001c435:	e8 b3 fe ff ff       	call   c001c2ed <string_ends_with(char const*, char const*)>
c001c43a:	83 c4 10             	add    esp,0x10
c001c43d:	85 c0                	test   eax,eax
c001c43f:	75 83                	jne    c001c3c4 <sysCallOpen(regs*)+0x8f>
c001c441:	83 ec 08             	sub    esp,0x8
c001c444:	68 87 be 02 c0       	push   0xc002be87
c001c449:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c44c:	e8 9c fe ff ff       	call   c001c2ed <string_ends_with(char const*, char const*)>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	85 c0                	test   eax,eax
c001c456:	0f 85 d9 00 00 00    	jne    c001c535 <sysCallOpen(regs*)+0x200>
c001c45c:	83 ec 08             	sub    esp,0x8
c001c45f:	68 8c be 02 c0       	push   0xc002be8c
c001c464:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c467:	e8 81 fe ff ff       	call   c001c2ed <string_ends_with(char const*, char const*)>
c001c46c:	83 c4 10             	add    esp,0x10
c001c46f:	85 c0                	test   eax,eax
c001c471:	0f 85 be 00 00 00    	jne    c001c535 <sysCallOpen(regs*)+0x200>
c001c477:	83 ec 08             	sub    esp,0x8
c001c47a:	68 88 be 02 c0       	push   0xc002be88
c001c47f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c482:	e8 39 44 fe ff       	call   c00008c0 <strcmp>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	85 c0                	test   eax,eax
c001c48c:	0f 84 a3 00 00 00    	je     c001c535 <sysCallOpen(regs*)+0x200>
c001c492:	83 ec 08             	sub    esp,0x8
c001c495:	68 87 be 02 c0       	push   0xc002be87
c001c49a:	56                   	push   esi
c001c49b:	e8 4d fe ff ff       	call   c001c2ed <string_ends_with(char const*, char const*)>
c001c4a0:	83 c4 10             	add    esp,0x10
c001c4a3:	85 c0                	test   eax,eax
c001c4a5:	0f 85 8a 00 00 00    	jne    c001c535 <sysCallOpen(regs*)+0x200>
c001c4ab:	83 ec 0c             	sub    esp,0xc
c001c4ae:	68 14 01 00 00       	push   0x114
c001c4b3:	e8 88 33 ff ff       	call   c000f840 <malloc>
c001c4b8:	83 c4 0c             	add    esp,0xc
c001c4bb:	89 c6                	mov    esi,eax
c001c4bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c4c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c8:	56                   	push   esi
c001c4c9:	e8 84 6f ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	85 f6                	test   esi,esi
c001c4d3:	0f 84 29 ff ff ff    	je     c001c402 <sysCallOpen(regs*)+0xcd>
c001c4d9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4dc:	0f b6 c2             	movzx  eax,dl
c001c4df:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4e2:	89 d0                	mov    eax,edx
c001c4e4:	83 e0 01             	and    eax,0x1
c001c4e7:	f6 c2 02             	test   dl,0x2
c001c4ea:	74 03                	je     c001c4ef <sysCallOpen(regs*)+0x1ba>
c001c4ec:	83 c8 02             	or     eax,0x2
c001c4ef:	f6 c2 04             	test   dl,0x4
c001c4f2:	74 03                	je     c001c4f7 <sysCallOpen(regs*)+0x1c2>
c001c4f4:	83 c8 04             	or     eax,0x4
c001c4f7:	f6 c2 08             	test   dl,0x8
c001c4fa:	74 03                	je     c001c4ff <sysCallOpen(regs*)+0x1ca>
c001c4fc:	83 c8 0a             	or     eax,0xa
c001c4ff:	83 e2 10             	and    edx,0x10
c001c502:	74 03                	je     c001c507 <sysCallOpen(regs*)+0x1d2>
c001c504:	83 c8 12             	or     eax,0x12
c001c507:	83 ec 08             	sub    esp,0x8
c001c50a:	50                   	push   eax
c001c50b:	56                   	push   esi
c001c50c:	e8 a5 6f ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001c511:	83 c4 10             	add    esp,0x10
c001c514:	85 c0                	test   eax,eax
c001c516:	0f 85 e6 fe ff ff    	jne    c001c402 <sysCallOpen(regs*)+0xcd>
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	56                   	push   esi
c001c520:	e8 2f 52 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c525:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c528:	89 02                	mov    DWORD PTR [edx],eax
c001c52a:	c1 f8 1f             	sar    eax,0x1f
c001c52d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c530:	e9 bd fe ff ff       	jmp    c001c3f2 <sysCallOpen(regs*)+0xbd>
c001c535:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c538:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c53e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c545:	e9 ab fe ff ff       	jmp    c001c3f5 <sysCallOpen(regs*)+0xc0>

c001c54a <Sys::loadSyscalls()>:
c001c54a:	c7 05 00 0f 03 c0 57 b6 01 c0 	mov    DWORD PTR ds:0xc0030f00,0xc001b657
c001c554:	c7 05 04 0f 03 c0 40 b2 01 c0 	mov    DWORD PTR ds:0xc0030f04,0xc001b240
c001c55e:	c7 05 08 0f 03 c0 aa b3 01 c0 	mov    DWORD PTR ds:0xc0030f08,0xc001b3aa
c001c568:	c7 05 0c 0f 03 c0 8d b5 01 c0 	mov    DWORD PTR ds:0xc0030f0c,0xc001b58d
c001c572:	c7 05 10 0f 03 c0 42 b3 01 c0 	mov    DWORD PTR ds:0xc0030f10,0xc001b342
c001c57c:	c7 05 14 0f 03 c0 77 b2 01 c0 	mov    DWORD PTR ds:0xc0030f14,0xc001b277
c001c586:	c7 05 18 0f 03 c0 58 b2 01 c0 	mov    DWORD PTR ds:0xc0030f18,0xc001b258
c001c590:	c7 05 1c 0f 03 c0 ff b3 01 c0 	mov    DWORD PTR ds:0xc0030f1c,0xc001b3ff
c001c59a:	c7 05 24 0f 03 c0 87 bb 01 c0 	mov    DWORD PTR ds:0xc0030f24,0xc001bb87
c001c5a4:	c7 05 20 0f 03 c0 35 c3 01 c0 	mov    DWORD PTR ds:0xc0030f20,0xc001c335
c001c5ae:	c7 05 28 0f 03 c0 0f bc 01 c0 	mov    DWORD PTR ds:0xc0030f28,0xc001bc0f
c001c5b8:	c7 05 2c 0f 03 c0 76 b8 01 c0 	mov    DWORD PTR ds:0xc0030f2c,0xc001b876
c001c5c2:	c7 05 30 0f 03 c0 92 b6 01 c0 	mov    DWORD PTR ds:0xc0030f30,0xc001b692
c001c5cc:	c7 05 34 0f 03 c0 97 b6 01 c0 	mov    DWORD PTR ds:0xc0030f34,0xc001b697
c001c5d6:	c7 05 38 0f 03 c0 ea bc 01 c0 	mov    DWORD PTR ds:0xc0030f38,0xc001bcea
c001c5e0:	c7 05 3c 0f 03 c0 84 bc 01 c0 	mov    DWORD PTR ds:0xc0030f3c,0xc001bc84
c001c5ea:	c7 05 40 0f 03 c0 5e b9 01 c0 	mov    DWORD PTR ds:0xc0030f40,0xc001b95e
c001c5f4:	c7 05 44 0f 03 c0 c7 b9 01 c0 	mov    DWORD PTR ds:0xc0030f44,0xc001b9c7
c001c5fe:	c7 05 48 0f 03 c0 44 ba 01 c0 	mov    DWORD PTR ds:0xc0030f48,0xc001ba44
c001c608:	c7 05 4c 0f 03 c0 9c b6 01 c0 	mov    DWORD PTR ds:0xc0030f4c,0xc001b69c
c001c612:	c7 05 50 0f 03 c0 5a bd 01 c0 	mov    DWORD PTR ds:0xc0030f50,0xc001bd5a
c001c61c:	c7 05 54 0f 03 c0 74 bd 01 c0 	mov    DWORD PTR ds:0xc0030f54,0xc001bd74
c001c626:	c7 05 58 0f 03 c0 74 bd 01 c0 	mov    DWORD PTR ds:0xc0030f58,0xc001bd74
c001c630:	c7 05 5c 0f 03 c0 b5 bd 01 c0 	mov    DWORD PTR ds:0xc0030f5c,0xc001bdb5
c001c63a:	c7 05 60 0f 03 c0 19 be 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001be19
c001c644:	c7 05 64 0f 03 c0 48 b8 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001b848
c001c64e:	c7 05 68 0f 03 c0 7d be 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001be7d
c001c658:	c7 05 6c 0f 03 c0 05 b8 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b805
c001c662:	c7 05 70 0f 03 c0 c9 be 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001bec9
c001c66c:	c7 05 74 0f 03 c0 04 b9 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b904
c001c676:	c7 05 78 0f 03 c0 4c bf 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001bf4c
c001c680:	c7 05 7c 0f 03 c0 c7 ba 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001bac7
c001c68a:	c7 05 80 0f 03 c0 73 bf 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001bf73
c001c694:	c7 05 84 0f 03 c0 cb bf 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001bfcb
c001c69e:	c7 05 88 0f 03 c0 03 c1 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001c103
c001c6a8:	c7 05 8c 0f 03 c0 a6 b6 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b6a6
c001c6b2:	c7 05 90 0f 03 c0 10 b7 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b710
c001c6bc:	c7 05 94 0f 03 c0 56 b7 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b756
c001c6c6:	c7 05 98 0f 03 c0 22 c2 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001c222
c001c6d0:	c7 05 9c 0f 03 c0 8f bd 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bd8f
c001c6da:	c7 05 a0 0f 03 c0 a7 b7 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001b7a7
c001c6e4:	c7 05 a4 0f 03 c0 94 c2 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001c294
c001c6ee:	c7 05 a8 0f 03 c0 d9 c2 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001c2d9
c001c6f8:	c7 05 ac 0f 03 c0 9a b2 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b29a
c001c702:	c7 05 b0 0f 03 c0 1b b4 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001b41b
c001c70c:	c7 05 b4 0f 03 c0 43 b5 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b543
c001c716:	c7 05 b8 0f 03 c0 0a b2 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001b20a
c001c720:	c7 05 bc 0f 03 c0 f5 b5 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001b5f5
c001c72a:	c7 05 c0 0f 03 c0 83 b2 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b283
c001c734:	c3                   	ret    

c001c735 <Sys::systemCall(regs*, void*)>:
c001c735:	53                   	push   ebx
c001c736:	83 ec 08             	sub    esp,0x8
c001c739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c73d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c740:	83 f8 7f             	cmp    eax,0x7f
c001c743:	77 16                	ja     c001c75b <Sys::systemCall(regs*, void*)+0x26>
c001c745:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c001c74c:	85 d2                	test   edx,edx
c001c74e:	74 0b                	je     c001c75b <Sys::systemCall(regs*, void*)+0x26>
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	53                   	push   ebx
c001c754:	ff d2                	call   edx
c001c756:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c759:	eb 0d                	jmp    c001c768 <Sys::systemCall(regs*, void*)+0x33>
c001c75b:	52                   	push   edx
c001c75c:	52                   	push   edx
c001c75d:	50                   	push   eax
c001c75e:	68 91 be 02 c0       	push   0xc002be91
c001c763:	e8 92 67 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c768:	83 c4 10             	add    esp,0x10
c001c76b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c770:	31 d2                	xor    edx,edx
c001c772:	83 c4 08             	add    esp,0x8
c001c775:	5b                   	pop    ebx
c001c776:	c3                   	ret    

c001c777 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c777:	55                   	push   ebp
c001c778:	57                   	push   edi
c001c779:	56                   	push   esi
c001c77a:	53                   	push   ebx
c001c77b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c781:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c788:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c78f:	85 c0                	test   eax,eax
c001c791:	0f 95 c1             	setne  cl
c001c794:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c79c:	0f 94 c2             	sete   dl
c001c79f:	84 d1                	test   cl,dl
c001c7a1:	74 23                	je     c001c7c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7a3:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c7a9:	74 1b                	je     c001c7c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c7ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7b1:	89 da                	mov    edx,ebx
c001c7b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c7b9:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c7bf:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c7c6:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c7cd:	05 ff 0f 00 00       	add    eax,0xfff
c001c7d2:	83 ec 0c             	sub    esp,0xc
c001c7d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7d9:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c7df:	c1 e8 0c             	shr    eax,0xc
c001c7e2:	89 ef                	mov    edi,ebp
c001c7e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7e8:	c1 ef 0c             	shr    edi,0xc
c001c7eb:	6a 01                	push   0x1
c001c7ed:	e8 ad 53 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001c7f2:	89 c6                	mov    esi,eax
c001c7f4:	58                   	pop    eax
c001c7f5:	5a                   	pop    edx
c001c7f6:	57                   	push   edi
c001c7f7:	68 17 bf 02 c0       	push   0xc002bf17
c001c7fc:	e8 f9 66 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c801:	59                   	pop    ecx
c001c802:	58                   	pop    eax
c001c803:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c807:	68 29 bf 02 c0       	push   0xc002bf29
c001c80c:	e8 e9 66 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c811:	83 c4 10             	add    esp,0x10
c001c814:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c81a:	0f 86 24 01 00 00    	jbe    c001c944 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c820:	c1 e7 0c             	shl    edi,0xc
c001c823:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c826:	89 df                	mov    edi,ebx
c001c828:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c82c:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c833:	01 dd                	add    ebp,ebx
c001c835:	29 fd                	sub    ebp,edi
c001c837:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c83b:	0f 84 01 01 00 00    	je     c001c942 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c841:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c847:	76 05                	jbe    c001c84e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c849:	bd 00 10 00 00       	mov    ebp,0x1000
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	31 d2                	xor    edx,edx
c001c853:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c85a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c85c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c860:	50                   	push   eax
c001c861:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c865:	50                   	push   eax
c001c866:	52                   	push   edx
c001c867:	55                   	push   ebp
c001c868:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c86f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c872:	83 c4 20             	add    esp,0x20
c001c875:	85 c0                	test   eax,eax
c001c877:	74 0a                	je     c001c883 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c879:	53                   	push   ebx
c001c87a:	53                   	push   ebx
c001c87b:	50                   	push   eax
c001c87c:	68 3b bf 02 c0       	push   0xc002bf3b
c001c881:	eb 0f                	jmp    c001c892 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c883:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c887:	74 20                	je     c001c8a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c889:	51                   	push   ecx
c001c88a:	51                   	push   ecx
c001c88b:	6a 00                	push   0x0
c001c88d:	68 66 bf 02 c0       	push   0xc002bf66
c001c892:	e8 63 66 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001c897:	89 34 24             	mov    DWORD PTR [esp],esi
c001c89a:	e8 70 57 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001c89f:	83 c4 10             	add    esp,0x10
c001c8a2:	31 c0                	xor    eax,eax
c001c8a4:	e9 55 01 00 00       	jmp    c001c9fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c8a9:	e8 d8 14 00 00       	call   c001dd86 <lockScheduler()>
c001c8ae:	e8 2f 36 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c8b3:	6a 07                	push   0x7
c001c8b5:	89 c5                	mov    ebp,eax
c001c8b7:	56                   	push   esi
c001c8b8:	50                   	push   eax
c001c8b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8c1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8c7:	e8 aa 5a ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8cc:	83 c4 0c             	add    esp,0xc
c001c8cf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8dc:	6a 00                	push   0x0
c001c8de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ec:	e8 ef 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8f1:	58                   	pop    eax
c001c8f2:	5a                   	pop    edx
c001c8f3:	68 07 0c 00 00       	push   0xc07
c001c8f8:	57                   	push   edi
c001c8f9:	81 c7 00 10 00 00    	add    edi,0x1000
c001c8ff:	55                   	push   ebp
c001c900:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c907:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c90d:	6a 00                	push   0x0
c001c90f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c914:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c917:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c91d:	e8 0e 5e ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c922:	83 c4 1c             	add    esp,0x1c
c001c925:	68 00 10 00 00       	push   0x1000
c001c92a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c92e:	50                   	push   eax
c001c92f:	56                   	push   esi
c001c930:	e8 0f 3e fe ff       	call   c0000744 <memcpy>
c001c935:	e8 4e 14 00 00       	call   c001dd88 <unlockScheduler()>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	e9 ea fe ff ff       	jmp    c001c82c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c942:	89 fb                	mov    ebx,edi
c001c944:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c94c:	0f 86 9e 00 00 00    	jbe    c001c9f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c952:	e8 2f 14 00 00       	call   c001dd86 <lockScheduler()>
c001c957:	51                   	push   ecx
c001c958:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c95f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c965:	6a 00                	push   0x0
c001c967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c96c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c96f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c975:	e8 66 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c97a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c97e:	c1 e7 0c             	shl    edi,0xc
c001c981:	01 df                	add    edi,ebx
c001c983:	83 c4 10             	add    esp,0x10
c001c986:	39 fb                	cmp    ebx,edi
c001c988:	74 61                	je     c001c9eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c98a:	e8 53 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c98f:	6a 07                	push   0x7
c001c991:	89 c5                	mov    ebp,eax
c001c993:	56                   	push   esi
c001c994:	50                   	push   eax
c001c995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c99a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c99d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a3:	e8 ce 59 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9a8:	58                   	pop    eax
c001c9a9:	5a                   	pop    edx
c001c9aa:	68 07 0c 00 00       	push   0xc07
c001c9af:	53                   	push   ebx
c001c9b0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9b6:	55                   	push   ebp
c001c9b7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9be:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c4:	6a 00                	push   0x0
c001c9c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d4:	e8 57 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9d9:	83 c4 1c             	add    esp,0x1c
c001c9dc:	68 00 10 00 00       	push   0x1000
c001c9e1:	6a 00                	push   0x0
c001c9e3:	56                   	push   esi
c001c9e4:	e8 8f 3d fe ff       	call   c0000778 <memset>
c001c9e9:	eb 98                	jmp    c001c983 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c9eb:	e8 98 13 00 00       	call   c001dd88 <unlockScheduler()>
c001c9f0:	83 ec 0c             	sub    esp,0xc
c001c9f3:	56                   	push   esi
c001c9f4:	e8 16 56 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	b0 01                	mov    al,0x1
c001c9fe:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca04:	5b                   	pop    ebx
c001ca05:	5e                   	pop    esi
c001ca06:	5f                   	pop    edi
c001ca07:	5d                   	pop    ebp
c001ca08:	c3                   	ret    

c001ca09 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca09:	55                   	push   ebp
c001ca0a:	57                   	push   edi
c001ca0b:	56                   	push   esi
c001ca0c:	53                   	push   ebx
c001ca0d:	83 ec 48             	sub    esp,0x48
c001ca10:	68 14 01 00 00       	push   0x114
c001ca15:	e8 26 2e ff ff       	call   c000f840 <malloc>
c001ca1a:	83 c4 0c             	add    esp,0xc
c001ca1d:	89 c6                	mov    esi,eax
c001ca1f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca23:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca27:	50                   	push   eax
c001ca28:	e8 25 6a ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001ca2d:	58                   	pop    eax
c001ca2e:	5a                   	pop    edx
c001ca2f:	6a 01                	push   0x1
c001ca31:	56                   	push   esi
c001ca32:	e8 7f 6a ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001ca37:	83 c4 10             	add    esp,0x10
c001ca3a:	85 c0                	test   eax,eax
c001ca3c:	0f 85 47 01 00 00    	jne    c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca42:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca4a:	83 ec 0c             	sub    esp,0xc
c001ca4d:	6a 34                	push   0x34
c001ca4f:	e8 ec 2d ff ff       	call   c000f840 <malloc>
c001ca54:	89 c3                	mov    ebx,eax
c001ca56:	58                   	pop    eax
c001ca57:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca59:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca5d:	57                   	push   edi
c001ca5e:	53                   	push   ebx
c001ca5f:	6a 00                	push   0x0
c001ca61:	6a 34                	push   0x34
c001ca63:	56                   	push   esi
c001ca64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca67:	83 c4 20             	add    esp,0x20
c001ca6a:	85 c0                	test   eax,eax
c001ca6c:	0f 85 17 01 00 00    	jne    c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca72:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca78:	0f 85 0b 01 00 00    	jne    c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca81:	85 c0                	test   eax,eax
c001ca83:	0f 84 00 01 00 00    	je     c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca89:	31 d2                	xor    edx,edx
c001ca8b:	55                   	push   ebp
c001ca8c:	52                   	push   edx
c001ca8d:	50                   	push   eax
c001ca8e:	56                   	push   esi
c001ca8f:	e8 e0 6a ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	85 c0                	test   eax,eax
c001ca99:	0f 85 ea 00 00 00    	jne    c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca9f:	83 ec 0c             	sub    esp,0xc
c001caa2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caa5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caa9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001caad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cab1:	0f af c2             	imul   eax,edx
c001cab4:	50                   	push   eax
c001cab5:	e8 86 2d ff ff       	call   c000f840 <malloc>
c001caba:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cabc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cac0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cac3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cac7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cacb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cacf:	0f af c2             	imul   eax,edx
c001cad2:	99                   	cdq    
c001cad3:	52                   	push   edx
c001cad4:	50                   	push   eax
c001cad5:	56                   	push   esi
c001cad6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cad9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cadc:	83 c4 20             	add    esp,0x20
c001cadf:	85 c0                	test   eax,eax
c001cae1:	0f 84 a2 00 00 00    	je     c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae7:	31 d2                	xor    edx,edx
c001cae9:	51                   	push   ecx
c001caea:	52                   	push   edx
c001caeb:	50                   	push   eax
c001caec:	56                   	push   esi
c001caed:	e8 82 6a ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001caf2:	83 c4 10             	add    esp,0x10
c001caf5:	85 c0                	test   eax,eax
c001caf7:	0f 85 8c 00 00 00    	jne    c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafd:	83 ec 0c             	sub    esp,0xc
c001cb00:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb04:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb08:	31 ed                	xor    ebp,ebp
c001cb0a:	0f af c2             	imul   eax,edx
c001cb0d:	50                   	push   eax
c001cb0e:	e8 2d 2d ff ff       	call   c000f840 <malloc>
c001cb13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb19:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb20:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb24:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb28:	0f af c2             	imul   eax,edx
c001cb2b:	99                   	cdq    
c001cb2c:	52                   	push   edx
c001cb2d:	50                   	push   eax
c001cb2e:	56                   	push   esi
c001cb2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb32:	83 c4 20             	add    esp,0x20
c001cb35:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb3d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb41:	0f 86 80 00 00 00    	jbe    c001cbc7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb47:	0f b7 fd             	movzx  edi,bp
c001cb4a:	c1 e7 05             	shl    edi,0x5
c001cb4d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb51:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb54:	75 6b                	jne    c001cbc1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb56:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb64:	52                   	push   edx
c001cb65:	31 d2                	xor    edx,edx
c001cb67:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb6a:	52                   	push   edx
c001cb6b:	50                   	push   eax
c001cb6c:	56                   	push   esi
c001cb6d:	e8 02 6a ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001cb72:	83 c4 10             	add    esp,0x10
c001cb75:	85 c0                	test   eax,eax
c001cb77:	74 17                	je     c001cb90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb79:	83 ec 0c             	sub    esp,0xc
c001cb7c:	68 92 bf 02 c0       	push   0xc002bf92
c001cb81:	e8 74 63 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001cb86:	83 c4 10             	add    esp,0x10
c001cb89:	31 c0                	xor    eax,eax
c001cb8b:	e9 87 00 00 00       	jmp    c001cc17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb96:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb99:	50                   	push   eax
c001cb9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cba2:	56                   	push   esi
c001cba3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cba7:	e8 cb fb ff ff       	call   c001c777 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbb0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cbb4:	83 c4 20             	add    esp,0x20
c001cbb7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cbbb:	73 04                	jae    c001cbc1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbc1:	45                   	inc    ebp
c001cbc2:	e9 76 ff ff ff       	jmp    c001cb3d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cbc7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cbcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbd3:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbd9:	83 ec 0c             	sub    esp,0xc
c001cbdc:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbe2:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbe7:	05 00 10 00 00       	add    eax,0x1000
c001cbec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf3:	e8 58 2c ff ff       	call   c000f850 <free>
c001cbf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbfb:	e8 50 2c ff ff       	call   c000f850 <free>
c001cc00:	58                   	pop    eax
c001cc01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc05:	e8 46 2c ff ff       	call   c000f850 <free>
c001cc0a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc0d:	e8 02 69 ff ff       	call   c0013514 <File::close()>
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	b0 01                	mov    al,0x1
c001cc17:	83 c4 3c             	add    esp,0x3c
c001cc1a:	5b                   	pop    ebx
c001cc1b:	5e                   	pop    esi
c001cc1c:	5f                   	pop    edi
c001cc1d:	5d                   	pop    ebp
c001cc1e:	c3                   	ret    

c001cc1f <Thr::runtimeReferenceHelper()>:
c001cc1f:	83 ec 18             	sub    esp,0x18
c001cc22:	68 9a bf 02 c0       	push   0xc002bf9a
c001cc27:	e8 ce 62 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001cc2c:	fa                   	cli    
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	eb fe                	jmp    c001cc30 <Thr::runtimeReferenceHelper()+0x11>

c001cc32 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc32:	57                   	push   edi
c001cc33:	56                   	push   esi
c001cc34:	53                   	push   ebx
c001cc35:	31 db                	xor    ebx,ebx
c001cc37:	39 1d a0 18 03 c0    	cmp    DWORD PTR ds:0xc00318a0,ebx
c001cc3d:	7e 3c                	jle    c001cc7b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc3f:	8b 34 9d 20 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce7e0]
c001cc46:	31 ff                	xor    edi,edi
c001cc48:	39 3c 9d 20 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce8e0],edi
c001cc4f:	7e 27                	jle    c001cc78 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc51:	50                   	push   eax
c001cc52:	50                   	push   eax
c001cc53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc57:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc59:	03 04 9d a0 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce860]
c001cc60:	50                   	push   eax
c001cc61:	e8 5a 3c fe ff       	call   c00008c0 <strcmp>
c001cc66:	83 c4 10             	add    esp,0x10
c001cc69:	85 c0                	test   eax,eax
c001cc6b:	75 05                	jne    c001cc72 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc6d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc70:	eb 0b                	jmp    c001cc7d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc72:	83 c6 10             	add    esi,0x10
c001cc75:	47                   	inc    edi
c001cc76:	eb d0                	jmp    c001cc48 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc78:	43                   	inc    ebx
c001cc79:	eb bc                	jmp    c001cc37 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc7b:	31 c0                	xor    eax,eax
c001cc7d:	5b                   	pop    ebx
c001cc7e:	5e                   	pop    esi
c001cc7f:	5f                   	pop    edi
c001cc80:	c3                   	ret    

c001cc81 <Thr::loadKernelSymbolTable(char const*)>:
c001cc81:	55                   	push   ebp
c001cc82:	57                   	push   edi
c001cc83:	56                   	push   esi
c001cc84:	53                   	push   ebx
c001cc85:	83 ec 68             	sub    esp,0x68
c001cc88:	8b 35 f4 18 03 c0    	mov    esi,DWORD PTR ds:0xc00318f4
c001cc8e:	68 14 01 00 00       	push   0x114
c001cc93:	e8 a8 2b ff ff       	call   c000f840 <malloc>
c001cc98:	83 c4 0c             	add    esp,0xc
c001cc9b:	89 c3                	mov    ebx,eax
c001cc9d:	56                   	push   esi
c001cc9e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cca2:	50                   	push   eax
c001cca3:	e8 aa 67 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001cca8:	5e                   	pop    esi
c001cca9:	5f                   	pop    edi
c001ccaa:	6a 01                	push   0x1
c001ccac:	53                   	push   ebx
c001ccad:	e8 04 68 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001ccb2:	83 c4 10             	add    esp,0x10
c001ccb5:	85 c0                	test   eax,eax
c001ccb7:	74 0a                	je     c001ccc3 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ccb9:	83 ec 0c             	sub    esp,0xc
c001ccbc:	68 bc bf 02 c0       	push   0xc002bfbc
c001ccc1:	eb 34                	jmp    c001ccf7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ccc3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cccb:	83 ec 0c             	sub    esp,0xc
c001ccce:	6a 34                	push   0x34
c001ccd0:	e8 6b 2b ff ff       	call   c000f840 <malloc>
c001ccd5:	59                   	pop    ecx
c001ccd6:	89 c7                	mov    edi,eax
c001ccd8:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccde:	56                   	push   esi
c001ccdf:	57                   	push   edi
c001cce0:	6a 00                	push   0x0
c001cce2:	6a 34                	push   0x34
c001cce4:	53                   	push   ebx
c001cce5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cce8:	83 c4 20             	add    esp,0x20
c001cceb:	85 c0                	test   eax,eax
c001cced:	74 17                	je     c001cd06 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccef:	83 ec 0c             	sub    esp,0xc
c001ccf2:	68 d3 bf 02 c0       	push   0xc002bfd3
c001ccf7:	e8 af d8 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001ccfc:	83 c4 10             	add    esp,0x10
c001ccff:	31 c0                	xor    eax,eax
c001cd01:	e9 31 02 00 00       	jmp    c001cf37 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd06:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd0c:	75 e1                	jne    c001ccef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd0e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd11:	85 c0                	test   eax,eax
c001cd13:	74 da                	je     c001ccef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd15:	52                   	push   edx
c001cd16:	31 d2                	xor    edx,edx
c001cd18:	52                   	push   edx
c001cd19:	50                   	push   eax
c001cd1a:	53                   	push   ebx
c001cd1b:	e8 54 68 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	85 c0                	test   eax,eax
c001cd25:	75 c8                	jne    c001ccef <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd27:	83 ec 0c             	sub    esp,0xc
c001cd2a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd2e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd32:	31 ed                	xor    ebp,ebp
c001cd34:	0f af c2             	imul   eax,edx
c001cd37:	50                   	push   eax
c001cd38:	e8 03 2b ff ff       	call   c000f840 <malloc>
c001cd3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd43:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd4a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd4e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd52:	0f af c2             	imul   eax,edx
c001cd55:	99                   	cdq    
c001cd56:	52                   	push   edx
c001cd57:	50                   	push   eax
c001cd58:	53                   	push   ebx
c001cd59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd5c:	83 c4 20             	add    esp,0x20
c001cd5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd7f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd83:	0f 86 aa 00 00 00    	jbe    c001ce33 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd89:	0f b7 f5             	movzx  esi,bp
c001cd8c:	6b f6 28             	imul   esi,esi,0x28
c001cd8f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd93:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd9a:	50                   	push   eax
c001cd9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd9f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cda3:	8b 16                	mov    edx,DWORD PTR [esi]
c001cda5:	6b c0 28             	imul   eax,eax,0x28
c001cda8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cdac:	89 d0                	mov    eax,edx
c001cdae:	31 d2                	xor    edx,edx
c001cdb0:	52                   	push   edx
c001cdb1:	50                   	push   eax
c001cdb2:	53                   	push   ebx
c001cdb3:	e8 bc 67 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001cdb8:	83 c4 0c             	add    esp,0xc
c001cdbb:	6a 20                	push   0x20
c001cdbd:	6a 00                	push   0x0
c001cdbf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdc3:	52                   	push   edx
c001cdc4:	e8 af 39 fe ff       	call   c0000778 <memset>
c001cdc9:	58                   	pop    eax
c001cdca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdcc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdd0:	51                   	push   ecx
c001cdd1:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdd5:	52                   	push   edx
c001cdd6:	6a 00                	push   0x0
c001cdd8:	6a 1f                	push   0x1f
c001cdda:	53                   	push   ebx
c001cddb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdde:	83 c4 18             	add    esp,0x18
c001cde1:	68 ea bf 02 c0       	push   0xc002bfea
c001cde6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdea:	52                   	push   edx
c001cdeb:	e8 d0 3a fe ff       	call   c00008c0 <strcmp>
c001cdf0:	83 c4 10             	add    esp,0x10
c001cdf3:	85 c0                	test   eax,eax
c001cdf5:	75 0f                	jne    c001ce06 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdf7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce06:	50                   	push   eax
c001ce07:	50                   	push   eax
c001ce08:	68 f2 bf 02 c0       	push   0xc002bff2
c001ce0d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce11:	50                   	push   eax
c001ce12:	e8 a9 3a fe ff       	call   c00008c0 <strcmp>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	85 c0                	test   eax,eax
c001ce1c:	75 0f                	jne    c001ce2d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce1e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce2d:	45                   	inc    ebp
c001ce2e:	e9 4c ff ff ff       	jmp    c001cd7f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce38:	75 10                	jne    c001ce4a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce3a:	83 ec 0c             	sub    esp,0xc
c001ce3d:	68 fa bf 02 c0       	push   0xc002bffa
c001ce42:	e8 64 d7 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce4f:	75 10                	jne    c001ce61 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce51:	83 ec 0c             	sub    esp,0xc
c001ce54:	68 fa bf 02 c0       	push   0xc002bffa
c001ce59:	e8 4d d7 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001ce5e:	83 c4 10             	add    esp,0x10
c001ce61:	31 d2                	xor    edx,edx
c001ce63:	50                   	push   eax
c001ce64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce68:	52                   	push   edx
c001ce69:	50                   	push   eax
c001ce6a:	53                   	push   ebx
c001ce6b:	e8 04 67 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001ce70:	5a                   	pop    edx
c001ce71:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce75:	e8 c6 29 ff ff       	call   c000f840 <malloc>
c001ce7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce82:	31 c9                	xor    ecx,ecx
c001ce84:	5e                   	pop    esi
c001ce85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce87:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce8b:	55                   	push   ebp
c001ce8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce90:	51                   	push   ecx
c001ce91:	52                   	push   edx
c001ce92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce96:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce9a:	53                   	push   ebx
c001ce9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce9e:	83 c4 14             	add    esp,0x14
c001cea1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cea5:	e8 96 29 ff ff       	call   c000f840 <malloc>
c001ceaa:	89 c6                	mov    esi,eax
c001ceac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceb1:	56                   	push   esi
c001ceb2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ceb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ceba:	51                   	push   ecx
c001cebb:	52                   	push   edx
c001cebc:	53                   	push   ebx
c001cebd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cec0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cec4:	8b 15 a0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318a0
c001ceca:	83 c4 1c             	add    esp,0x1c
c001cecd:	c1 e8 04             	shr    eax,0x4
c001ced0:	89 04 95 20 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce8e0],eax
c001ced7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cedb:	31 d2                	xor    edx,edx
c001cedd:	52                   	push   edx
c001cede:	50                   	push   eax
c001cedf:	53                   	push   ebx
c001cee0:	e8 8f 66 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001cee5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cee7:	31 d2                	xor    edx,edx
c001cee9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceec:	56                   	push   esi
c001ceed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cef1:	52                   	push   edx
c001cef2:	50                   	push   eax
c001cef3:	53                   	push   ebx
c001cef4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cef7:	83 c4 14             	add    esp,0x14
c001cefa:	53                   	push   ebx
c001cefb:	e8 14 66 ff ff       	call   c0013514 <File::close()>
c001cf00:	5d                   	pop    ebp
c001cf01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf05:	e8 46 29 ff ff       	call   c000f850 <free>
c001cf0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf0d:	e8 3e 29 ff ff       	call   c000f850 <free>
c001cf12:	a1 a0 18 03 c0       	mov    eax,ds:0xc00318a0
c001cf17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf1b:	8d 50 01             	lea    edx,[eax+0x1]
c001cf1e:	89 0c 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],ecx
c001cf25:	89 34 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],esi
c001cf2c:	89 15 a0 18 03 c0    	mov    DWORD PTR ds:0xc00318a0,edx
c001cf32:	83 c4 10             	add    esp,0x10
c001cf35:	b0 01                	mov    al,0x1
c001cf37:	83 c4 5c             	add    esp,0x5c
c001cf3a:	5b                   	pop    ebx
c001cf3b:	5e                   	pop    esi
c001cf3c:	5f                   	pop    edi
c001cf3d:	5d                   	pop    ebp
c001cf3e:	c3                   	ret    

c001cf3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf3f:	55                   	push   ebp
c001cf40:	57                   	push   edi
c001cf41:	56                   	push   esi
c001cf42:	53                   	push   ebx
c001cf43:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf49:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf50:	8b 1d f4 18 03 c0    	mov    ebx,DWORD PTR ds:0xc00318f4
c001cf56:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf5a:	68 14 01 00 00       	push   0x114
c001cf5f:	e8 dc 28 ff ff       	call   c000f840 <malloc>
c001cf64:	83 c4 0c             	add    esp,0xc
c001cf67:	89 c5                	mov    ebp,eax
c001cf69:	53                   	push   ebx
c001cf6a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf71:	50                   	push   eax
c001cf72:	e8 db 64 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001cf77:	5e                   	pop    esi
c001cf78:	5f                   	pop    edi
c001cf79:	6a 01                	push   0x1
c001cf7b:	55                   	push   ebp
c001cf7c:	e8 35 65 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001cf81:	83 c4 10             	add    esp,0x10
c001cf84:	85 c0                	test   eax,eax
c001cf86:	0f 85 8d 06 00 00    	jne    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf8c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf94:	83 ec 0c             	sub    esp,0xc
c001cf97:	6a 34                	push   0x34
c001cf99:	e8 a2 28 ff ff       	call   c000f840 <malloc>
c001cf9e:	5b                   	pop    ebx
c001cf9f:	89 c7                	mov    edi,eax
c001cfa1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfa5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfa8:	53                   	push   ebx
c001cfa9:	57                   	push   edi
c001cfaa:	6a 00                	push   0x0
c001cfac:	6a 34                	push   0x34
c001cfae:	55                   	push   ebp
c001cfaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfb2:	83 c4 20             	add    esp,0x20
c001cfb5:	85 c0                	test   eax,eax
c001cfb7:	0f 85 5c 06 00 00    	jne    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfbd:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfc3:	0f 85 50 06 00 00    	jne    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfc9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfcc:	85 c0                	test   eax,eax
c001cfce:	0f 84 45 06 00 00    	je     c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfd4:	31 d2                	xor    edx,edx
c001cfd6:	51                   	push   ecx
c001cfd7:	52                   	push   edx
c001cfd8:	50                   	push   eax
c001cfd9:	55                   	push   ebp
c001cfda:	e8 95 65 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001cfdf:	83 c4 10             	add    esp,0x10
c001cfe2:	85 c0                	test   eax,eax
c001cfe4:	0f 85 2f 06 00 00    	jne    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfea:	83 ec 0c             	sub    esp,0xc
c001cfed:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cff0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cff4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cff8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cffc:	0f af c2             	imul   eax,edx
c001cfff:	50                   	push   eax
c001d000:	e8 3b 28 ff ff       	call   c000f840 <malloc>
c001d005:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d008:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d00f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d013:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d017:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d01b:	0f af c2             	imul   eax,edx
c001d01e:	99                   	cdq    
c001d01f:	52                   	push   edx
c001d020:	50                   	push   eax
c001d021:	55                   	push   ebp
c001d022:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d025:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d028:	83 c4 20             	add    esp,0x20
c001d02b:	85 c0                	test   eax,eax
c001d02d:	0f 84 e6 05 00 00    	je     c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d033:	52                   	push   edx
c001d034:	31 d2                	xor    edx,edx
c001d036:	52                   	push   edx
c001d037:	50                   	push   eax
c001d038:	55                   	push   ebp
c001d039:	e8 36 65 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001d03e:	83 c4 10             	add    esp,0x10
c001d041:	85 c0                	test   eax,eax
c001d043:	0f 85 d0 05 00 00    	jne    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d049:	83 ec 0c             	sub    esp,0xc
c001d04c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d050:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d054:	31 f6                	xor    esi,esi
c001d056:	0f af c2             	imul   eax,edx
c001d059:	50                   	push   eax
c001d05a:	e8 e1 27 ff ff       	call   c000f840 <malloc>
c001d05f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d062:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d066:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d069:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d06d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d071:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d075:	0f af c2             	imul   eax,edx
c001d078:	99                   	cdq    
c001d079:	52                   	push   edx
c001d07a:	50                   	push   eax
c001d07b:	55                   	push   ebp
c001d07c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d07f:	83 c4 20             	add    esp,0x20
c001d082:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d086:	0f 86 8a 00 00 00    	jbe    c001d116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d08c:	0f b7 de             	movzx  ebx,si
c001d08f:	c1 e3 05             	shl    ebx,0x5
c001d092:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d096:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d099:	75 75                	jne    c001d110 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d09b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d09e:	31 d2                	xor    edx,edx
c001d0a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0ab:	50                   	push   eax
c001d0ac:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0af:	52                   	push   edx
c001d0b0:	50                   	push   eax
c001d0b1:	55                   	push   ebp
c001d0b2:	e8 bd 64 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	85 c0                	test   eax,eax
c001d0bc:	0f 85 57 05 00 00    	jne    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0cc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0d0:	31 d2                	xor    edx,edx
c001d0d2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0e4:	50                   	push   eax
c001d0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ed:	52                   	push   edx
c001d0ee:	50                   	push   eax
c001d0ef:	55                   	push   ebp
c001d0f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0f3:	83 c4 1c             	add    esp,0x1c
c001d0f6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0f9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0fc:	50                   	push   eax
c001d0fd:	6a 00                	push   0x0
c001d0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d103:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d107:	50                   	push   eax
c001d108:	e8 6b 36 fe ff       	call   c0000778 <memset>
c001d10d:	83 c4 10             	add    esp,0x10
c001d110:	46                   	inc    esi
c001d111:	e9 6c ff ff ff       	jmp    c001d082 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d116:	53                   	push   ebx
c001d117:	31 db                	xor    ebx,ebx
c001d119:	68 00 01 00 00       	push   0x100
c001d11e:	6a 00                	push   0x0
c001d120:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d124:	50                   	push   eax
c001d125:	e8 4e 36 fe ff       	call   c0000778 <memset>
c001d12a:	83 c4 0c             	add    esp,0xc
c001d12d:	68 00 01 00 00       	push   0x100
c001d132:	6a 00                	push   0x0
c001d134:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d13b:	50                   	push   eax
c001d13c:	e8 37 36 fe ff       	call   c0000778 <memset>
c001d141:	83 c4 10             	add    esp,0x10
c001d144:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d14c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d154:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d15c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d164:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d16c:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d170:	0f 86 30 01 00 00    	jbe    c001d2a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d176:	0f b7 f3             	movzx  esi,bx
c001d179:	6b f6 28             	imul   esi,esi,0x28
c001d17c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d180:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d187:	52                   	push   edx
c001d188:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d18c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d190:	8b 06                	mov    eax,DWORD PTR [esi]
c001d192:	6b d2 28             	imul   edx,edx,0x28
c001d195:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d199:	31 d2                	xor    edx,edx
c001d19b:	52                   	push   edx
c001d19c:	50                   	push   eax
c001d19d:	55                   	push   ebp
c001d19e:	e8 d1 63 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001d1a3:	83 c4 0c             	add    esp,0xc
c001d1a6:	6a 20                	push   0x20
c001d1a8:	6a 00                	push   0x0
c001d1aa:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1b1:	51                   	push   ecx
c001d1b2:	e8 c1 35 fe ff       	call   c0000778 <memset>
c001d1b7:	59                   	pop    ecx
c001d1b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1bb:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1bf:	52                   	push   edx
c001d1c0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1c7:	51                   	push   ecx
c001d1c8:	6a 00                	push   0x0
c001d1ca:	6a 1f                	push   0x1f
c001d1cc:	55                   	push   ebp
c001d1cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1d0:	83 c4 1c             	add    esp,0x1c
c001d1d3:	6a 09                	push   0x9
c001d1d5:	68 14 c0 02 c0       	push   0xc002c014
c001d1da:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1e1:	51                   	push   ecx
c001d1e2:	e8 59 34 fe ff       	call   c0000640 <memcmp>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	85 c0                	test   eax,eax
c001d1ec:	75 21                	jne    c001d20f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1f6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d201:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d208:	89 d0                	mov    eax,edx
c001d20a:	40                   	inc    eax
c001d20b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d20f:	50                   	push   eax
c001d210:	6a 09                	push   0x9
c001d212:	68 1e c0 02 c0       	push   0xc002c01e
c001d217:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d21e:	50                   	push   eax
c001d21f:	e8 1c 34 fe ff       	call   c0000640 <memcmp>
c001d224:	83 c4 10             	add    esp,0x10
c001d227:	85 c0                	test   eax,eax
c001d229:	75 21                	jne    c001d24c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d22b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d22f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d233:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d237:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d23b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d23e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d245:	89 d0                	mov    eax,edx
c001d247:	40                   	inc    eax
c001d248:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d24c:	50                   	push   eax
c001d24d:	50                   	push   eax
c001d24e:	68 ea bf 02 c0       	push   0xc002bfea
c001d253:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d25a:	50                   	push   eax
c001d25b:	e8 60 36 fe ff       	call   c00008c0 <strcmp>
c001d260:	83 c4 10             	add    esp,0x10
c001d263:	85 c0                	test   eax,eax
c001d265:	75 0f                	jne    c001d276 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d267:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d26a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d26e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d272:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d276:	50                   	push   eax
c001d277:	50                   	push   eax
c001d278:	68 f2 bf 02 c0       	push   0xc002bff2
c001d27d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d284:	50                   	push   eax
c001d285:	e8 36 36 fe ff       	call   c00008c0 <strcmp>
c001d28a:	83 c4 10             	add    esp,0x10
c001d28d:	85 c0                	test   eax,eax
c001d28f:	75 0f                	jne    c001d2a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d291:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d294:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d29c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2a0:	43                   	inc    ebx
c001d2a1:	e9 c6 fe ff ff       	jmp    c001d16c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2a6:	31 d2                	xor    edx,edx
c001d2a8:	50                   	push   eax
c001d2a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2ad:	52                   	push   edx
c001d2ae:	50                   	push   eax
c001d2af:	55                   	push   ebp
c001d2b0:	e8 bf 62 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001d2b5:	58                   	pop    eax
c001d2b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2ba:	e8 81 25 ff ff       	call   c000f840 <malloc>
c001d2bf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2c6:	31 d2                	xor    edx,edx
c001d2c8:	58                   	pop    eax
c001d2c9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2cd:	53                   	push   ebx
c001d2ce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	55                   	push   ebp
c001d2d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2dc:	83 c4 14             	add    esp,0x14
c001d2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2e3:	e8 58 25 ff ff       	call   c000f840 <malloc>
c001d2e8:	31 d2                	xor    edx,edx
c001d2ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2ee:	83 c4 0c             	add    esp,0xc
c001d2f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2f5:	52                   	push   edx
c001d2f6:	50                   	push   eax
c001d2f7:	55                   	push   ebp
c001d2f8:	e8 77 62 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001d2fd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d300:	31 d2                	xor    edx,edx
c001d302:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d309:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d30d:	52                   	push   edx
c001d30e:	50                   	push   eax
c001d30f:	55                   	push   ebp
c001d310:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d313:	83 c4 20             	add    esp,0x20
c001d316:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d31e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d322:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d326:	0f 84 f1 02 00 00    	je     c001d61d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d32c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d333:	31 d2                	xor    edx,edx
c001d335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d339:	c1 e8 03             	shr    eax,0x3
c001d33c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d340:	51                   	push   ecx
c001d341:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d345:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d349:	52                   	push   edx
c001d34a:	50                   	push   eax
c001d34b:	55                   	push   ebp
c001d34c:	e8 23 62 ff ff       	call   c0013574 <File::seek(unsigned long long)>
c001d351:	5b                   	pop    ebx
c001d352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d356:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d35d:	e8 de 24 ff ff       	call   c000f840 <malloc>
c001d362:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d365:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d369:	31 d2                	xor    edx,edx
c001d36b:	5e                   	pop    esi
c001d36c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d370:	50                   	push   eax
c001d371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d379:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d380:	52                   	push   edx
c001d381:	50                   	push   eax
c001d382:	55                   	push   ebp
c001d383:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d386:	83 c4 20             	add    esp,0x20
c001d389:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d391:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d395:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d399:	0f 8d 62 02 00 00    	jge    c001d601 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d39f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3a7:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3ac:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3b7:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d3bb:	89 d8                	mov    eax,ebx
c001d3bd:	c1 e8 08             	shr    eax,0x8
c001d3c0:	89 c6                	mov    esi,eax
c001d3c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3c6:	c1 e6 04             	shl    esi,0x4
c001d3c9:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3cd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3d0:	85 d2                	test   edx,edx
c001d3d2:	0f 85 bf 00 00 00    	jne    c001d497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3d8:	83 ec 0c             	sub    esp,0xc
c001d3db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3df:	03 06                	add    eax,DWORD PTR [esi]
c001d3e1:	50                   	push   eax
c001d3e2:	e8 4b f8 ff ff       	call   c001cc32 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3e7:	83 c4 10             	add    esp,0x10
c001d3ea:	89 c2                	mov    edx,eax
c001d3ec:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3f1:	85 c0                	test   eax,eax
c001d3f3:	0f 85 9e 00 00 00    	jne    c001d497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d400:	03 06                	add    eax,DWORD PTR [esi]
c001d402:	50                   	push   eax
c001d403:	e8 ed 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	89 c2                	mov    edx,eax
c001d40d:	85 c0                	test   eax,eax
c001d40f:	0f 85 82 00 00 00    	jne    c001d497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d419:	50                   	push   eax
c001d41a:	50                   	push   eax
c001d41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41f:	03 06                	add    eax,DWORD PTR [esi]
c001d421:	50                   	push   eax
c001d422:	68 28 c0 02 c0       	push   0xc002c028
c001d427:	e8 ce 5a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001d42c:	58                   	pop    eax
c001d42d:	5a                   	pop    edx
c001d42e:	68 42 c0 02 c0       	push   0xc002c042
c001d433:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d43a:	50                   	push   eax
c001d43b:	e8 f4 33 fe ff       	call   c0000834 <strcpy>
c001d440:	59                   	pop    ecx
c001d441:	58                   	pop    eax
c001d442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d446:	03 06                	add    eax,DWORD PTR [esi]
c001d448:	50                   	push   eax
c001d449:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d450:	50                   	push   eax
c001d451:	e8 1e 35 fe ff       	call   c0000974 <strcat>
c001d456:	58                   	pop    eax
c001d457:	5a                   	pop    edx
c001d458:	68 d8 c0 02 c0       	push   0xc002c0d8
c001d45d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d464:	50                   	push   eax
c001d465:	e8 0a 35 fe ff       	call   c0000974 <strcat>
c001d46a:	83 c4 10             	add    esp,0x10
c001d46d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d472:	0f 84 43 01 00 00    	je     c001d5bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d482:	50                   	push   eax
c001d483:	e8 23 d1 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d48f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d493:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d497:	80 fb 01             	cmp    bl,0x1
c001d49a:	75 7d                	jne    c001d519 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d49c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4a7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4ab:	01 ce                	add    esi,ecx
c001d4ad:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4b3:	0f 94 c0             	sete   al
c001d4b6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4bc:	0f 94 c3             	sete   bl
c001d4bf:	09 c3                	or     ebx,eax
c001d4c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4c3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4c8:	74 36                	je     c001d500 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d4ca:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4cd:	84 db                	test   bl,bl
c001d4cf:	75 0a                	jne    c001d4db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d4d1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4d5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4d9:	76 37                	jbe    c001d512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4db:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4df:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4e4:	0f 84 d1 00 00 00    	je     c001d5bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	68 59 c0 02 c0       	push   0xc002c059
c001d4f2:	e8 b4 d0 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4fe:	eb 12                	jmp    c001d512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d500:	01 c1                	add    ecx,eax
c001d502:	84 db                	test   bl,bl
c001d504:	75 0c                	jne    c001d512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d506:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d50a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d50e:	77 02                	ja     c001d512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d510:	01 d1                	add    ecx,edx
c001d512:	89 0e                	mov    DWORD PTR [esi],ecx
c001d514:	e9 df 00 00 00       	jmp    c001d5f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d519:	80 fb 02             	cmp    bl,0x2
c001d51c:	75 71                	jne    c001d58f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d51e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d525:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d529:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d52d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d533:	74 15                	je     c001d54a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d535:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d53b:	74 0d                	je     c001d54a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d53d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d541:	83 e8 04             	sub    eax,0x4
c001d544:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d548:	76 1f                	jbe    c001d569 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d54a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d54e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d553:	74 66                	je     c001d5bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d555:	83 ec 0c             	sub    esp,0xc
c001d558:	68 75 c0 02 c0       	push   0xc002c075
c001d55d:	e8 49 d0 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d562:	83 c4 10             	add    esp,0x10
c001d565:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d569:	8b 06                	mov    eax,DWORD PTR [esi]
c001d56b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d570:	74 13                	je     c001d585 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d572:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d576:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d57d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d581:	01 c8                	add    eax,ecx
c001d583:	eb 04                	jmp    c001d589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d585:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d589:	01 c2                	add    edx,eax
c001d58b:	89 16                	mov    DWORD PTR [esi],edx
c001d58d:	eb 69                	jmp    c001d5f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d58f:	0f b6 db             	movzx  ebx,bl
c001d592:	50                   	push   eax
c001d593:	50                   	push   eax
c001d594:	53                   	push   ebx
c001d595:	68 91 c0 02 c0       	push   0xc002c091
c001d59a:	e8 5b 59 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001d59f:	83 c4 10             	add    esp,0x10
c001d5a2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a7:	74 12                	je     c001d5bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5a9:	83 ec 0c             	sub    esp,0xc
c001d5ac:	68 9c c0 02 c0       	push   0xc002c09c
c001d5b1:	e8 f5 cf ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	eb 3d                	jmp    c001d5f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5bb:	83 ec 0c             	sub    esp,0xc
c001d5be:	55                   	push   ebp
c001d5bf:	e8 50 5f ff ff       	call   c0013514 <File::close()>
c001d5c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5cd:	59                   	pop    ecx
c001d5ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5d2:	e8 79 22 ff ff       	call   c000f850 <free>
c001d5d7:	5b                   	pop    ebx
c001d5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5dc:	e8 6f 22 ff ff       	call   c000f850 <free>
c001d5e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5e4:	e8 67 22 ff ff       	call   c000f850 <free>
c001d5e9:	5e                   	pop    esi
c001d5ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5ee:	e8 5d 22 ff ff       	call   c000f850 <free>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	eb 21                	jmp    c001d619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d5f8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5fc:	e9 90 fd ff ff       	jmp    c001d391 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d601:	83 ec 0c             	sub    esp,0xc
c001d604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d608:	e8 43 22 ff ff       	call   c000f850 <free>
c001d60d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d611:	83 c4 10             	add    esp,0x10
c001d614:	e9 05 fd ff ff       	jmp    c001d31e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d619:	31 c0                	xor    eax,eax
c001d61b:	eb 33                	jmp    c001d650 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d61d:	83 ec 0c             	sub    esp,0xc
c001d620:	55                   	push   ebp
c001d621:	e8 ee 5e ff ff       	call   c0013514 <File::close()>
c001d626:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d629:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d62c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d62f:	58                   	pop    eax
c001d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d634:	e8 17 22 ff ff       	call   c000f850 <free>
c001d639:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d63c:	e8 0f 22 ff ff       	call   c000f850 <free>
c001d641:	5a                   	pop    edx
c001d642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d646:	e8 05 22 ff ff       	call   c000f850 <free>
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	b0 01                	mov    al,0x1
c001d650:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d656:	5b                   	pop    ebx
c001d657:	5e                   	pop    esi
c001d658:	5f                   	pop    edi
c001d659:	5d                   	pop    ebp
c001d65a:	c3                   	ret    

c001d65b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d65b:	56                   	push   esi
c001d65c:	31 d2                	xor    edx,edx
c001d65e:	53                   	push   ebx
c001d65f:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001d665:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d669:	39 d3                	cmp    ebx,edx
c001d66b:	7e 1b                	jle    c001d688 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d66d:	8b 04 95 20 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcece0]
c001d674:	39 c8                	cmp    eax,ecx
c001d676:	77 0d                	ja     c001d685 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d678:	8b 34 95 20 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceee0]
c001d67f:	01 c6                	add    esi,eax
c001d681:	39 ce                	cmp    esi,ecx
c001d683:	77 05                	ja     c001d68a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d685:	42                   	inc    edx
c001d686:	eb e1                	jmp    c001d669 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d688:	31 c0                	xor    eax,eax
c001d68a:	5b                   	pop    ebx
c001d68b:	5e                   	pop    esi
c001d68c:	c3                   	ret    

c001d68d <Thr::getDriverNameFromAddress(unsigned long)>:
c001d68d:	53                   	push   ebx
c001d68e:	31 c0                	xor    eax,eax
c001d690:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d694:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001d69a:	39 c3                	cmp    ebx,eax
c001d69c:	7e 22                	jle    c001d6c0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d69e:	8b 14 85 20 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcece0]
c001d6a5:	39 ca                	cmp    edx,ecx
c001d6a7:	77 14                	ja     c001d6bd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6a9:	03 14 85 20 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceee0]
c001d6b0:	39 ca                	cmp    edx,ecx
c001d6b2:	76 09                	jbe    c001d6bd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6b4:	8b 04 85 20 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceae0]
c001d6bb:	eb 05                	jmp    c001d6c2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6bd:	40                   	inc    eax
c001d6be:	eb da                	jmp    c001d69a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6c0:	31 c0                	xor    eax,eax
c001d6c2:	5b                   	pop    ebx
c001d6c3:	c3                   	ret    

c001d6c4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6c4:	53                   	push   ebx
c001d6c5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6c9:	53                   	push   ebx
c001d6ca:	e8 8c ff ff ff       	call   c001d65b <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6cf:	5a                   	pop    edx
c001d6d0:	31 d2                	xor    edx,edx
c001d6d2:	85 c0                	test   eax,eax
c001d6d4:	74 04                	je     c001d6da <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6d6:	89 da                	mov    edx,ebx
c001d6d8:	29 c2                	sub    edx,eax
c001d6da:	89 d0                	mov    eax,edx
c001d6dc:	5b                   	pop    ebx
c001d6dd:	c3                   	ret    

c001d6de <Thr::loadDLL(char const*, bool)>:
c001d6de:	55                   	push   ebp
c001d6df:	57                   	push   edi
c001d6e0:	56                   	push   esi
c001d6e1:	53                   	push   ebx
c001d6e2:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6e8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6ef:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d6f6:	56                   	push   esi
c001d6f7:	68 b4 c0 02 c0       	push   0xc002c0b4
c001d6fc:	e8 f9 57 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001d701:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d708:	e8 33 21 ff ff       	call   c000f840 <malloc>
c001d70d:	83 c4 0c             	add    esp,0xc
c001d710:	89 c3                	mov    ebx,eax
c001d712:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001d718:	56                   	push   esi
c001d719:	50                   	push   eax
c001d71a:	e8 33 5d ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	85 db                	test   ebx,ebx
c001d724:	75 3c                	jne    c001d762 <Thr::loadDLL(char const*, bool)+0x84>
c001d726:	89 e8                	mov    eax,ebp
c001d728:	84 c0                	test   al,al
c001d72a:	0f 84 d5 01 00 00    	je     c001d905 <Thr::loadDLL(char const*, bool)+0x227>
c001d730:	57                   	push   edi
c001d731:	57                   	push   edi
c001d732:	68 c5 c0 02 c0       	push   0xc002c0c5
c001d737:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d73b:	57                   	push   edi
c001d73c:	e8 f3 30 fe ff       	call   c0000834 <strcpy>
c001d741:	58                   	pop    eax
c001d742:	5a                   	pop    edx
c001d743:	56                   	push   esi
c001d744:	57                   	push   edi
c001d745:	e8 2a 32 fe ff       	call   c0000974 <strcat>
c001d74a:	59                   	pop    ecx
c001d74b:	58                   	pop    eax
c001d74c:	68 d8 c0 02 c0       	push   0xc002c0d8
c001d751:	57                   	push   edi
c001d752:	e8 1d 32 fe ff       	call   c0000974 <strcat>
c001d757:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d75a:	e8 4c ce ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d75f:	83 c4 10             	add    esp,0x10
c001d762:	51                   	push   ecx
c001d763:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d767:	50                   	push   eax
c001d768:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d76c:	50                   	push   eax
c001d76d:	53                   	push   ebx
c001d76e:	e8 ef 5f ff ff       	call   c0013762 <File::stat(unsigned long long*, bool*)>
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	85 db                	test   ebx,ebx
c001d778:	74 0c                	je     c001d786 <Thr::loadDLL(char const*, bool)+0xa8>
c001d77a:	83 ec 0c             	sub    esp,0xc
c001d77d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d77f:	53                   	push   ebx
c001d780:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d783:	83 c4 10             	add    esp,0x10
c001d786:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d78b:	75 0a                	jne    c001d797 <Thr::loadDLL(char const*, bool)+0xb9>
c001d78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d791:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d795:	75 3c                	jne    c001d7d3 <Thr::loadDLL(char const*, bool)+0xf5>
c001d797:	89 e8                	mov    eax,ebp
c001d799:	84 c0                	test   al,al
c001d79b:	0f 84 4c 01 00 00    	je     c001d8ed <Thr::loadDLL(char const*, bool)+0x20f>
c001d7a1:	51                   	push   ecx
c001d7a2:	51                   	push   ecx
c001d7a3:	68 c5 c0 02 c0       	push   0xc002c0c5
c001d7a8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7ac:	53                   	push   ebx
c001d7ad:	e8 82 30 fe ff       	call   c0000834 <strcpy>
c001d7b2:	5f                   	pop    edi
c001d7b3:	58                   	pop    eax
c001d7b4:	56                   	push   esi
c001d7b5:	53                   	push   ebx
c001d7b6:	e8 b9 31 fe ff       	call   c0000974 <strcat>
c001d7bb:	58                   	pop    eax
c001d7bc:	5a                   	pop    edx
c001d7bd:	68 d8 c0 02 c0       	push   0xc002c0d8
c001d7c2:	53                   	push   ebx
c001d7c3:	e8 ac 31 fe ff       	call   c0000974 <strcat>
c001d7c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7cb:	e8 db cd ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	e8 62 46 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d7d8:	51                   	push   ecx
c001d7d9:	6a 03                	push   0x3
c001d7db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d7df:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7e3:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d7e9:	83 d3 00             	adc    ebx,0x0
c001d7ec:	89 ca                	mov    edx,ecx
c001d7ee:	89 d1                	mov    ecx,edx
c001d7f0:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d7f4:	51                   	push   ecx
c001d7f5:	50                   	push   eax
c001d7f6:	e8 7b 4c ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001d7fb:	5f                   	pop    edi
c001d7fc:	89 c3                	mov    ebx,eax
c001d7fe:	58                   	pop    eax
c001d7ff:	53                   	push   ebx
c001d800:	68 da c0 02 c0       	push   0xc002c0da
c001d805:	e8 f0 56 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001d80a:	89 34 24             	mov    DWORD PTR [esp],esi
c001d80d:	e8 82 2f fe ff       	call   c0000794 <strlen>
c001d812:	8b 3d 00 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031100
c001d818:	40                   	inc    eax
c001d819:	89 04 24             	mov    DWORD PTR [esp],eax
c001d81c:	e8 1f 20 ff ff       	call   c000f840 <malloc>
c001d821:	89 04 bd 20 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffceae0],eax
c001d828:	58                   	pop    eax
c001d829:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001d82e:	5a                   	pop    edx
c001d82f:	56                   	push   esi
c001d830:	ff 34 85 20 15 03 c0 	push   DWORD PTR [eax*4-0x3ffceae0]
c001d837:	e8 f8 2f fe ff       	call   c0000834 <strcpy>
c001d83c:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001d841:	8d 50 01             	lea    edx,[eax+0x1]
c001d844:	89 1c 85 20 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcece0],ebx
c001d84b:	89 15 00 11 03 c0    	mov    DWORD PTR ds:0xc0031100,edx
c001d851:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d855:	83 c4 0c             	add    esp,0xc
c001d858:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001d85f:	6a 01                	push   0x1
c001d861:	53                   	push   ebx
c001d862:	56                   	push   esi
c001d863:	e8 d7 f6 ff ff       	call   c001cf3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d868:	83 c4 10             	add    esp,0x10
c001d86b:	89 c7                	mov    edi,eax
c001d86d:	84 c0                	test   al,al
c001d86f:	0f 85 8c 00 00 00    	jne    c001d901 <Thr::loadDLL(char const*, bool)+0x223>
c001d875:	89 e8                	mov    eax,ebp
c001d877:	84 c0                	test   al,al
c001d879:	74 76                	je     c001d8f1 <Thr::loadDLL(char const*, bool)+0x213>
c001d87b:	83 ec 0c             	sub    esp,0xc
c001d87e:	68 e7 c0 02 c0       	push   0xc002c0e7
c001d883:	e8 23 cd ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d888:	83 c4 10             	add    esp,0x10
c001d88b:	eb 64                	jmp    c001d8f1 <Thr::loadDLL(char const*, bool)+0x213>
c001d88d:	e8 a8 45 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d892:	89 f5                	mov    ebp,esi
c001d894:	c1 e5 0c             	shl    ebp,0xc
c001d897:	52                   	push   edx
c001d898:	01 dd                	add    ebp,ebx
c001d89a:	52                   	push   edx
c001d89b:	55                   	push   ebp
c001d89c:	50                   	push   eax
c001d89d:	e8 4e 47 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c001d8a2:	83 c4 10             	add    esp,0x10
c001d8a5:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8a8:	75 0c                	jne    c001d8b6 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8aa:	83 ec 0c             	sub    esp,0xc
c001d8ad:	55                   	push   ebp
c001d8ae:	e8 a5 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d8b3:	83 c4 10             	add    esp,0x10
c001d8b6:	46                   	inc    esi
c001d8b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8bf:	05 ff 0f 00 00       	add    eax,0xfff
c001d8c4:	83 d2 00             	adc    edx,0x0
c001d8c7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8cb:	c1 ea 0c             	shr    edx,0xc
c001d8ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8d6:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d8da:	ba 00 00 00 00       	mov    edx,0x0
c001d8df:	89 d0                	mov    eax,edx
c001d8e1:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d8e5:	72 a6                	jb     c001d88d <Thr::loadDLL(char const*, bool)+0x1af>
c001d8e7:	89 f8                	mov    eax,edi
c001d8e9:	84 c0                	test   al,al
c001d8eb:	75 18                	jne    c001d905 <Thr::loadDLL(char const*, bool)+0x227>
c001d8ed:	31 db                	xor    ebx,ebx
c001d8ef:	eb 14                	jmp    c001d905 <Thr::loadDLL(char const*, bool)+0x227>
c001d8f1:	83 ec 0c             	sub    esp,0xc
c001d8f4:	68 06 c1 02 c0       	push   0xc002c106
c001d8f9:	e8 ad cc ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	31 f6                	xor    esi,esi
c001d903:	eb b2                	jmp    c001d8b7 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d905:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d90b:	89 d8                	mov    eax,ebx
c001d90d:	5b                   	pop    ebx
c001d90e:	5e                   	pop    esi
c001d90f:	5f                   	pop    edi
c001d910:	5d                   	pop    ebp
c001d911:	c3                   	ret    

c001d912 <Thr::executeDLL(unsigned long, void*)>:
c001d912:	56                   	push   esi
c001d913:	53                   	push   ebx
c001d914:	52                   	push   edx
c001d915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d919:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d91d:	85 db                	test   ebx,ebx
c001d91f:	75 10                	jne    c001d931 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d921:	83 ec 0c             	sub    esp,0xc
c001d924:	68 22 c1 02 c0       	push   0xc002c122
c001d929:	e8 7d cc ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	50                   	push   eax
c001d932:	50                   	push   eax
c001d933:	53                   	push   ebx
c001d934:	68 4c c1 02 c0       	push   0xc002c14c
c001d939:	e8 bc 55 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001d93e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d942:	89 d8                	mov    eax,ebx
c001d944:	83 c4 14             	add    esp,0x14
c001d947:	5b                   	pop    ebx
c001d948:	5e                   	pop    esi
c001d949:	ff e0                	jmp    eax
c001d94b:	90                   	nop

c001d94c <changeTSS>:
c001d94c:	83 ec 14             	sub    esp,0x14
c001d94f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d954:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d957:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d95c:	c1 e2 15             	shl    edx,0x15
c001d95f:	29 d0                	sub    eax,edx
c001d961:	50                   	push   eax
c001d962:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d967:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d96d:	05 7c 11 00 00       	add    eax,0x117c
c001d972:	50                   	push   eax
c001d973:	e8 66 3b ff ff       	call   c00114de <TSS::setESP(unsigned long)>
c001d978:	83 c4 1c             	add    esp,0x1c
c001d97b:	c3                   	ret    

c001d97c <Process::addArgs(char**)>:
c001d97c:	57                   	push   edi
c001d97d:	56                   	push   esi
c001d97e:	53                   	push   ebx
c001d97f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d983:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d987:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d991:	85 ff                	test   edi,edi
c001d993:	74 3d                	je     c001d9d2 <Process::addArgs(char**)+0x56>
c001d995:	8b 07                	mov    eax,DWORD PTR [edi]
c001d997:	85 c0                	test   eax,eax
c001d999:	74 37                	je     c001d9d2 <Process::addArgs(char**)+0x56>
c001d99b:	31 db                	xor    ebx,ebx
c001d99d:	83 ec 0c             	sub    esp,0xc
c001d9a0:	50                   	push   eax
c001d9a1:	e8 ee 2d fe ff       	call   c0000794 <strlen>
c001d9a6:	40                   	inc    eax
c001d9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9aa:	e8 91 1e ff ff       	call   c000f840 <malloc>
c001d9af:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d9b6:	5a                   	pop    edx
c001d9b7:	59                   	pop    ecx
c001d9b8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d9bb:	43                   	inc    ebx
c001d9bc:	50                   	push   eax
c001d9bd:	e8 72 2e fe ff       	call   c0000834 <strcpy>
c001d9c2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d9c8:	83 c4 10             	add    esp,0x10
c001d9cb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9ce:	85 c0                	test   eax,eax
c001d9d0:	75 cb                	jne    c001d99d <Process::addArgs(char**)+0x21>
c001d9d2:	5b                   	pop    ebx
c001d9d3:	5e                   	pop    esi
c001d9d4:	5f                   	pop    edi
c001d9d5:	c3                   	ret    

c001d9d6 <Process::Process(char const*, Process*, char**)>:
c001d9d6:	56                   	push   esi
c001d9d7:	53                   	push   ebx
c001d9d8:	83 ec 14             	sub    esp,0x14
c001d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9df:	05 0c 02 00 00       	add    eax,0x20c
c001d9e4:	bb 07 00 00 00       	mov    ebx,0x7
c001d9e9:	89 c6                	mov    esi,eax
c001d9eb:	85 db                	test   ebx,ebx
c001d9ed:	78 12                	js     c001da01 <Process::Process(char const*, Process*, char**)+0x2b>
c001d9ef:	83 ec 0c             	sub    esp,0xc
c001d9f2:	56                   	push   esi
c001d9f3:	e8 1a b2 00 00       	call   c0028c12 <ThreadControlBlock::ThreadControlBlock()>
c001d9f8:	83 c4 10             	add    esp,0x10
c001d9fb:	83 c6 63             	add    esi,0x63
c001d9fe:	4b                   	dec    ebx
c001d9ff:	eb ea                	jmp    c001d9eb <Process::Process(char const*, Process*, char**)+0x15>
c001da01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da05:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da13:	e8 e4 c9 ff ff       	call   c001a3fc <Krnl::newProcessEnv(Process*)>
c001da18:	83 c4 10             	add    esp,0x10
c001da1b:	89 c2                	mov    edx,eax
c001da1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da21:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da2b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da34:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001da39:	8d 50 01             	lea    edx,[eax+0x1]
c001da3c:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001da42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da46:	89 02                	mov    DWORD PTR [edx],eax
c001da48:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001da50:	83 ec 0c             	sub    esp,0xc
c001da53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da57:	e8 e4 1d ff ff       	call   c000f840 <malloc>
c001da5c:	83 c4 10             	add    esp,0x10
c001da5f:	89 c3                	mov    ebx,eax
c001da61:	83 ec 08             	sub    esp,0x8
c001da64:	6a 00                	push   0x0
c001da66:	53                   	push   ebx
c001da67:	e8 b2 4d ff ff       	call   c001281e <VAS::VAS(bool)>
c001da6c:	83 c4 10             	add    esp,0x10
c001da6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da73:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da8f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da99:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da9f:	85 c0                	test   eax,eax
c001daa1:	74 42                	je     c001dae5 <Process::Process(char const*, Process*, char**)+0x10f>
c001daa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daad:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dabd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dac7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dacd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad1:	05 0c 01 00 00       	add    eax,0x10c
c001dad6:	83 ec 08             	sub    esp,0x8
c001dad9:	52                   	push   edx
c001dada:	50                   	push   eax
c001dadb:	e8 54 2d fe ff       	call   c0000834 <strcpy>
c001dae0:	83 c4 10             	add    esp,0x10
c001dae3:	eb 63                	jmp    c001db48 <Process::Process(char const*, Process*, char**)+0x172>
c001dae5:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001daf4:	e8 47 1d ff ff       	call   c000f840 <malloc>
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	89 c3                	mov    ebx,eax
c001dafe:	83 ec 08             	sub    esp,0x8
c001db01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db05:	53                   	push   ebx
c001db06:	e8 d1 36 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001db0b:	83 c4 10             	add    esp,0x10
c001db0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db12:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db22:	83 ec 0c             	sub    esp,0xc
c001db25:	50                   	push   eax
c001db26:	e8 a4 2a ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001db2b:	83 c4 10             	add    esp,0x10
c001db2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db32:	05 0c 01 00 00       	add    eax,0x10c
c001db37:	83 ec 08             	sub    esp,0x8
c001db3a:	68 6b c1 02 c0       	push   0xc002c16b
c001db3f:	50                   	push   eax
c001db40:	e8 ef 2c fe ff       	call   c0000834 <strcpy>
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4c:	83 c0 0c             	add    eax,0xc
c001db4f:	83 ec 08             	sub    esp,0x8
c001db52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db56:	50                   	push   eax
c001db57:	e8 d8 2c fe ff       	call   c0000834 <strcpy>
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	83 ec 08             	sub    esp,0x8
c001db62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db6a:	e8 0d fe ff ff       	call   c001d97c <Process::addArgs(char**)>
c001db6f:	83 c4 10             	add    esp,0x10
c001db72:	83 ec 08             	sub    esp,0x8
c001db75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db7d:	e8 87 ee ff ff       	call   c001ca09 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db82:	83 c4 10             	add    esp,0x10
c001db85:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db89:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db8d:	83 f0 01             	xor    eax,0x1
c001db90:	88 c2                	mov    dl,al
c001db92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db96:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001db9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dba1:	83 ec 08             	sub    esp,0x8
c001dba4:	50                   	push   eax
c001dba5:	68 68 c2 02 c0       	push   0xc002c268
c001dbaa:	e8 4b 53 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	90                   	nop
c001dbb3:	83 c4 14             	add    esp,0x14
c001dbb6:	5b                   	pop    ebx
c001dbb7:	5e                   	pop    esi
c001dbb8:	c3                   	ret    
c001dbb9:	90                   	nop

c001dbba <Process::Process(bool, char const*, Process*, char**)>:
c001dbba:	56                   	push   esi
c001dbbb:	53                   	push   ebx
c001dbbc:	83 ec 24             	sub    esp,0x24
c001dbbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dbc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dbc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbcb:	05 0c 02 00 00       	add    eax,0x20c
c001dbd0:	bb 07 00 00 00       	mov    ebx,0x7
c001dbd5:	89 c6                	mov    esi,eax
c001dbd7:	85 db                	test   ebx,ebx
c001dbd9:	78 12                	js     c001dbed <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dbdb:	83 ec 0c             	sub    esp,0xc
c001dbde:	56                   	push   esi
c001dbdf:	e8 2e b0 00 00       	call   c0028c12 <ThreadControlBlock::ThreadControlBlock()>
c001dbe4:	83 c4 10             	add    esp,0x10
c001dbe7:	83 c6 63             	add    esi,0x63
c001dbea:	4b                   	dec    ebx
c001dbeb:	eb ea                	jmp    c001dbd7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dbed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dbf8:	83 ec 0c             	sub    esp,0xc
c001dbfb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbff:	e8 f8 c7 ff ff       	call   c001a3fc <Krnl::newProcessEnv(Process*)>
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	89 c2                	mov    edx,eax
c001dc09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc0d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc17:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc20:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001dc25:	8d 50 01             	lea    edx,[eax+0x1]
c001dc28:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001dc2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc32:	89 02                	mov    DWORD PTR [edx],eax
c001dc34:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dc3c:	83 ec 0c             	sub    esp,0xc
c001dc3f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc43:	e8 f8 1b ff ff       	call   c000f840 <malloc>
c001dc48:	83 c4 10             	add    esp,0x10
c001dc4b:	89 c3                	mov    ebx,eax
c001dc4d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc52:	83 ec 08             	sub    esp,0x8
c001dc55:	50                   	push   eax
c001dc56:	53                   	push   ebx
c001dc57:	e8 c2 4b ff ff       	call   c001281e <VAS::VAS(bool)>
c001dc5c:	83 c4 10             	add    esp,0x10
c001dc5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc63:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dc69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc6d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dc77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc7b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc7f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc89:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc8f:	85 c0                	test   eax,eax
c001dc91:	74 42                	je     c001dcd5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dc93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc97:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc9d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dcad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcb7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dcbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc1:	05 0c 01 00 00       	add    eax,0x10c
c001dcc6:	83 ec 08             	sub    esp,0x8
c001dcc9:	52                   	push   edx
c001dcca:	50                   	push   eax
c001dccb:	e8 64 2b fe ff       	call   c0000834 <strcpy>
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	eb 63                	jmp    c001dd38 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dcd5:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dcdd:	83 ec 0c             	sub    esp,0xc
c001dce0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dce4:	e8 57 1b ff ff       	call   c000f840 <malloc>
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	89 c3                	mov    ebx,eax
c001dcee:	83 ec 08             	sub    esp,0x8
c001dcf1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dcf5:	53                   	push   ebx
c001dcf6:	e8 e1 34 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001dcfb:	83 c4 10             	add    esp,0x10
c001dcfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd02:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd12:	83 ec 0c             	sub    esp,0xc
c001dd15:	50                   	push   eax
c001dd16:	e8 b4 28 ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001dd1b:	83 c4 10             	add    esp,0x10
c001dd1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd22:	05 0c 01 00 00       	add    eax,0x10c
c001dd27:	83 ec 08             	sub    esp,0x8
c001dd2a:	68 6b c1 02 c0       	push   0xc002c16b
c001dd2f:	50                   	push   eax
c001dd30:	e8 ff 2a fe ff       	call   c0000834 <strcpy>
c001dd35:	83 c4 10             	add    esp,0x10
c001dd38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3c:	83 c0 0c             	add    eax,0xc
c001dd3f:	83 ec 08             	sub    esp,0x8
c001dd42:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd46:	50                   	push   eax
c001dd47:	e8 e8 2a fe ff       	call   c0000834 <strcpy>
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	83 ec 08             	sub    esp,0x8
c001dd52:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd5a:	e8 1d fc ff ff       	call   c001d97c <Process::addArgs(char**)>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	90                   	nop
c001dd63:	83 c4 24             	add    esp,0x24
c001dd66:	5b                   	pop    ebx
c001dd67:	5e                   	pop    esi
c001dd68:	c3                   	ret    

c001dd69 <disableIRQs()>:
c001dd69:	fa                   	cli    
c001dd6a:	ff 05 cc 18 03 c0    	inc    DWORD PTR ds:0xc00318cc
c001dd70:	c3                   	ret    

c001dd71 <getIRQNestingLevel()>:
c001dd71:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001dd76:	c3                   	ret    

c001dd77 <enableIRQs()>:
c001dd77:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001dd7c:	48                   	dec    eax
c001dd7d:	a3 cc 18 03 c0       	mov    ds:0xc00318cc,eax
c001dd82:	75 01                	jne    c001dd85 <enableIRQs()+0xe>
c001dd84:	fb                   	sti    
c001dd85:	c3                   	ret    

c001dd86 <lockScheduler()>:
c001dd86:	eb e1                	jmp    c001dd69 <disableIRQs()>

c001dd88 <unlockScheduler()>:
c001dd88:	eb ed                	jmp    c001dd77 <enableIRQs()>

c001dd8a <userModeEntryPoint(void*)>:
c001dd8a:	83 ec 0c             	sub    esp,0xc
c001dd8d:	e8 f6 ff ff ff       	call   c001dd88 <unlockScheduler()>
c001dd92:	fb                   	sti    
c001dd93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd9b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dda1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dda5:	83 c4 0c             	add    esp,0xc
c001dda8:	e9 7d 25 fe ff       	jmp    c000032a <goToUsermode>

c001ddad <lockStuff()>:
c001ddad:	e8 b7 ff ff ff       	call   c001dd69 <disableIRQs()>
c001ddb2:	ff 05 c8 18 03 c0    	inc    DWORD PTR ds:0xc00318c8
c001ddb8:	c3                   	ret    

c001ddb9 <taskStartupFunction>:
c001ddb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddbe:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ddc1:	c3                   	ret    

c001ddc2 <updateTimeUsed()>:
c001ddc2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001ddc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddcd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddd4:	74 50                	je     c001de26 <updateTimeUsed()+0x64>
c001ddd6:	57                   	push   edi
c001ddd7:	56                   	push   esi
c001ddd8:	53                   	push   ebx
c001ddd9:	0f 31                	rdtsc  
c001dddb:	89 c1                	mov    ecx,eax
c001dddd:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c001dde2:	2b 0d f8 18 03 c0    	sub    ecx,DWORD PTR ds:0xc00318f8
c001dde8:	89 d3                	mov    ebx,edx
c001ddea:	89 0d 00 19 03 c0    	mov    DWORD PTR ds:0xc0031900,ecx
c001ddf0:	1b 1d fc 18 03 c0    	sbb    ebx,DWORD PTR ds:0xc00318fc
c001ddf6:	a3 f8 18 03 c0       	mov    ds:0xc00318f8,eax
c001ddfb:	89 1d 04 19 03 c0    	mov    DWORD PTR ds:0xc0031904,ebx
c001de01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de06:	89 15 0c 19 03 c0    	mov    DWORD PTR ds:0xc003190c,edx
c001de0c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de0f:	89 15 fc 18 03 c0    	mov    DWORD PTR ds:0xc00318fc,edx
c001de15:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de18:	01 f1                	add    ecx,esi
c001de1a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de1d:	11 fb                	adc    ebx,edi
c001de1f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de22:	5b                   	pop    ebx
c001de23:	5e                   	pop    esi
c001de24:	5f                   	pop    edi
c001de25:	c3                   	ret    
c001de26:	c3                   	ret    

c001de27 <switchToThread(ThreadControlBlock*)>:
c001de27:	53                   	push   ebx
c001de28:	83 ec 08             	sub    esp,0x8
c001de2b:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001de30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de34:	85 c0                	test   eax,eax
c001de36:	75 30                	jne    c001de68 <switchToThread(ThreadControlBlock*)+0x41>
c001de38:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de3b:	3c ff                	cmp    al,0xff
c001de3d:	74 25                	je     c001de64 <switchToThread(ThreadControlBlock*)+0x3d>
c001de3f:	0f b6 d0             	movzx  edx,al
c001de42:	b8 84 03 00 00       	mov    eax,0x384
c001de47:	29 d0                	sub    eax,edx
c001de49:	c1 e0 10             	shl    eax,0x10
c001de4c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de4f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de52:	e8 6b ff ff ff       	call   c001ddc2 <updateTimeUsed()>
c001de57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de5b:	83 c4 08             	add    esp,0x8
c001de5e:	5b                   	pop    ebx
c001de5f:	e9 fe 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de64:	31 c0                	xor    eax,eax
c001de66:	eb e7                	jmp    c001de4f <switchToThread(ThreadControlBlock*)+0x28>
c001de68:	c7 05 c4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x1
c001de72:	83 c4 08             	add    esp,0x8
c001de75:	5b                   	pop    ebx
c001de76:	c3                   	ret    
c001de77:	90                   	nop

c001de78 <Semaphore::Semaphore(int)>:
c001de78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de80:	89 10                	mov    DWORD PTR [eax],edx
c001de82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de86:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dea3:	90                   	nop
c001dea4:	c3                   	ret    
c001dea5:	90                   	nop

c001dea6 <Mutex::Mutex()>:
c001dea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deaa:	6a 01                	push   0x1
c001deac:	50                   	push   eax
c001dead:	e8 c6 ff ff ff       	call   c001de78 <Semaphore::Semaphore(int)>
c001deb2:	83 c4 08             	add    esp,0x8
c001deb5:	90                   	nop
c001deb6:	c3                   	ret    
c001deb7:	90                   	nop

c001deb8 <Process::createThread(void (*)(void*), void*, int)>:
c001deb8:	55                   	push   ebp
c001deb9:	31 c9                	xor    ecx,ecx
c001debb:	57                   	push   edi
c001debc:	56                   	push   esi
c001debd:	53                   	push   ebx
c001debe:	83 ec 1c             	sub    esp,0x1c
c001dec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dec5:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001decc:	89 f2                	mov    edx,esi
c001dece:	0f b7 c2             	movzx  eax,dx
c001ded1:	83 e2 01             	and    edx,0x1
c001ded4:	74 14                	je     c001deea <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ded6:	d1 f8                	sar    eax,1
c001ded8:	41                   	inc    ecx
c001ded9:	89 c2                	mov    edx,eax
c001dedb:	83 f9 10             	cmp    ecx,0x10
c001dede:	75 ee                	jne    c001dece <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dee0:	83 c4 1c             	add    esp,0x1c
c001dee3:	31 c0                	xor    eax,eax
c001dee5:	5b                   	pop    ebx
c001dee6:	5e                   	pop    esi
c001dee7:	5f                   	pop    edi
c001dee8:	5d                   	pop    ebp
c001dee9:	c3                   	ret    
c001deea:	83 ec 08             	sub    esp,0x8
c001deed:	b8 01 00 00 00       	mov    eax,0x1
c001def2:	d3 e0                	shl    eax,cl
c001def4:	09 c6                	or     esi,eax
c001def6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001defc:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df03:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df06:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df09:	01 ce                	add    esi,ecx
c001df0b:	89 f0                	mov    eax,esi
c001df0d:	c1 e0 05             	shl    eax,0x5
c001df10:	01 c6                	add    esi,eax
c001df12:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df15:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df1b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df21:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df25:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df2b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df31:	89 ca                	mov    edx,ecx
c001df33:	f7 da                	neg    edx
c001df35:	c1 e2 15             	shl    edx,0x15
c001df38:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df3e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df44:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df48:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df52:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df58:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df5c:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df62:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df6c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df76:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df7d:	50                   	push   eax
c001df7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df82:	68 e8 18 03 c0       	push   0xc00318e8
c001df87:	e8 14 ab 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df8c:	83 c4 10             	add    esp,0x10
c001df8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df93:	83 c4 1c             	add    esp,0x1c
c001df96:	5b                   	pop    ebx
c001df97:	5e                   	pop    esi
c001df98:	5f                   	pop    edi
c001df99:	5d                   	pop    ebp
c001df9a:	c3                   	ret    
c001df9b:	90                   	nop

c001df9c <Process::createUserThread()>:
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	68 80 00 00 00       	push   0x80
c001dfa4:	6a 00                	push   0x0
c001dfa6:	68 8a dd 01 c0       	push   0xc001dd8a
c001dfab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfaf:	e8 04 ff ff ff       	call   c001deb8 <Process::createThread(void (*)(void*), void*, int)>
c001dfb4:	83 c4 1c             	add    esp,0x1c
c001dfb7:	c3                   	ret    

c001dfb8 <setupMultitasking(void (*)())>:
c001dfb8:	56                   	push   esi
c001dfb9:	53                   	push   ebx
c001dfba:	53                   	push   ebx
c001dfbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfbf:	eb 10                	jmp    c001dfd1 <setupMultitasking(void (*)())+0x19>
c001dfc1:	83 ec 0c             	sub    esp,0xc
c001dfc4:	68 e8 18 03 c0       	push   0xc00318e8
c001dfc9:	e8 24 aa 00 00       	call   c00289f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfce:	83 c4 10             	add    esp,0x10
c001dfd1:	83 ec 0c             	sub    esp,0xc
c001dfd4:	68 e8 18 03 c0       	push   0xc00318e8
c001dfd9:	e8 f8 a9 00 00       	call   c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	84 c0                	test   al,al
c001dfe3:	74 dc                	je     c001dfc1 <setupMultitasking(void (*)())+0x9>
c001dfe5:	83 ec 0c             	sub    esp,0xc
c001dfe8:	68 3f 07 00 00       	push   0x73f
c001dfed:	e8 4e 18 ff ff       	call   c000f840 <malloc>
c001dff2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dff9:	89 c3                	mov    ebx,eax
c001dffb:	6a 00                	push   0x0
c001dffd:	68 6f c1 02 c0       	push   0xc002c16f
c001e002:	6a 01                	push   0x1
c001e004:	50                   	push   eax
c001e005:	e8 b0 fb ff ff       	call   c001dbba <Process::Process(bool, char const*, Process*, char**)>
c001e00a:	83 c4 18             	add    esp,0x18
c001e00d:	89 1d f4 18 03 c0    	mov    DWORD PTR ds:0xc00318f4,ebx
c001e013:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e019:	68 90 c2 02 c0       	push   0xc002c290
c001e01e:	e8 d7 4e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e023:	58                   	pop    eax
c001e024:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e02a:	e8 22 2d ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001e02f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e037:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e03d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e040:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e04a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e050:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e056:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e060:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e06a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e074:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e07a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e080:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e08a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e090:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e09a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0a0:	5a                   	pop    edx
c001e0a1:	59                   	pop    ecx
c001e0a2:	68 6b c1 02 c0       	push   0xc002c16b
c001e0a7:	50                   	push   eax
c001e0a8:	e8 87 27 fe ff       	call   c0000834 <strcpy>
c001e0ad:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0b4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0b8:	83 c4 14             	add    esp,0x14
c001e0bb:	5b                   	pop    ebx
c001e0bc:	5e                   	pop    esi
c001e0bd:	e9 92 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0c2 <schedule()>:
c001e0c2:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e0c7:	85 c0                	test   eax,eax
c001e0c9:	74 0b                	je     c001e0d6 <schedule()+0x14>
c001e0cb:	c7 05 c4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x1
c001e0d5:	c3                   	ret    
c001e0d6:	53                   	push   ebx
c001e0d7:	83 ec 14             	sub    esp,0x14
c001e0da:	68 e8 18 03 c0       	push   0xc00318e8
c001e0df:	e8 f2 a8 00 00       	call   c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0e4:	83 c4 10             	add    esp,0x10
c001e0e7:	84 c0                	test   al,al
c001e0e9:	75 38                	jne    c001e123 <schedule()+0x61>
c001e0eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0f3:	4a                   	dec    edx
c001e0f4:	74 32                	je     c001e128 <schedule()+0x66>
c001e0f6:	83 ec 0c             	sub    esp,0xc
c001e0f9:	68 e8 18 03 c0       	push   0xc00318e8
c001e0fe:	e8 cb a8 00 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e103:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e10a:	89 c3                	mov    ebx,eax
c001e10c:	e8 e1 a8 00 00       	call   c00289f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e111:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e118:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e11b:	e8 07 fd ff ff       	call   c001de27 <switchToThread(ThreadControlBlock*)>
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	83 c4 08             	add    esp,0x8
c001e126:	5b                   	pop    ebx
c001e127:	c3                   	ret    
c001e128:	83 ec 08             	sub    esp,0x8
c001e12b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e132:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e138:	68 e8 18 03 c0       	push   0xc00318e8
c001e13d:	e8 5e a9 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e142:	83 c4 10             	add    esp,0x10
c001e145:	eb af                	jmp    c001e0f6 <schedule()+0x34>

c001e147 <unlockStuff()>:
c001e147:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e14c:	48                   	dec    eax
c001e14d:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c001e152:	75 09                	jne    c001e15d <unlockStuff()+0x16>
c001e154:	a1 c4 18 03 c0       	mov    eax,ds:0xc00318c4
c001e159:	85 c0                	test   eax,eax
c001e15b:	75 05                	jne    c001e162 <unlockStuff()+0x1b>
c001e15d:	e9 15 fc ff ff       	jmp    c001dd77 <enableIRQs()>
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	c7 05 c4 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x0
c001e16f:	e8 4e ff ff ff       	call   c001e0c2 <schedule()>
c001e174:	83 c4 0c             	add    esp,0xc
c001e177:	e9 fb fb ff ff       	jmp    c001dd77 <enableIRQs()>

c001e17c <Semaphore::tryAcquire()>:
c001e17c:	83 ec 0c             	sub    esp,0xc
c001e17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e183:	e8 25 fc ff ff       	call   c001ddad <lockStuff()>
c001e188:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e18b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e18d:	7c 0b                	jl     c001e19a <Semaphore::tryAcquire()+0x1e>
c001e18f:	e8 b3 ff ff ff       	call   c001e147 <unlockStuff()>
c001e194:	31 c0                	xor    eax,eax
c001e196:	83 c4 0c             	add    esp,0xc
c001e199:	c3                   	ret    
c001e19a:	42                   	inc    edx
c001e19b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e19e:	e8 a4 ff ff ff       	call   c001e147 <unlockStuff()>
c001e1a3:	b0 01                	mov    al,0x1
c001e1a5:	83 c4 0c             	add    esp,0xc
c001e1a8:	c3                   	ret    
c001e1a9:	90                   	nop

c001e1aa <Semaphore::assertLocked(char const*)>:
c001e1aa:	83 ec 0c             	sub    esp,0xc
c001e1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1b5:	e8 f3 fb ff ff       	call   c001ddad <lockStuff()>
c001e1ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1bc:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e1bf:	7c 05                	jl     c001e1c6 <Semaphore::assertLocked(char const*)+0x1c>
c001e1c1:	83 c4 0c             	add    esp,0xc
c001e1c4:	eb 81                	jmp    c001e147 <unlockStuff()>
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	52                   	push   edx
c001e1ca:	e8 dc c3 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001e1cf:	83 c4 10             	add    esp,0x10
c001e1d2:	83 c4 0c             	add    esp,0xc
c001e1d5:	e9 6d ff ff ff       	jmp    c001e147 <unlockStuff()>

c001e1da <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e1da:	83 ec 0c             	sub    esp,0xc
c001e1dd:	e8 8f fb ff ff       	call   c001dd71 <getIRQNestingLevel()>
c001e1e2:	83 ec 08             	sub    esp,0x8
c001e1e5:	50                   	push   eax
c001e1e6:	68 c4 c2 02 c0       	push   0xc002c2c4
c001e1eb:	e8 0a 4d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e1f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1f9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1fc:	e8 c1 fe ff ff       	call   c001e0c2 <schedule()>
c001e201:	e8 82 fb ff ff       	call   c001dd88 <unlockScheduler()>
c001e206:	e8 66 fb ff ff       	call   c001dd71 <getIRQNestingLevel()>
c001e20b:	5a                   	pop    edx
c001e20c:	59                   	pop    ecx
c001e20d:	50                   	push   eax
c001e20e:	68 f8 c2 02 c0       	push   0xc002c2f8
c001e213:	e8 e2 4c ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e218:	83 c4 1c             	add    esp,0x1c
c001e21b:	c3                   	ret    

c001e21c <blockTask(TaskState)>:
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e223:	e8 5e fb ff ff       	call   c001dd86 <lockScheduler()>
c001e228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e22d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e230:	e8 8d fe ff ff       	call   c001e0c2 <schedule()>
c001e235:	83 c4 0c             	add    esp,0xc
c001e238:	e9 4b fb ff ff       	jmp    c001dd88 <unlockScheduler()>

c001e23d <waitTask(int, int*, int)>:
c001e23d:	83 ec 18             	sub    esp,0x18
c001e240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e245:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e249:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e24c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e255:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e258:	6a 07                	push   0x7
c001e25a:	e8 bd ff ff ff       	call   c001e21c <blockTask(TaskState)>
c001e25f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e264:	83 c4 10             	add    esp,0x10
c001e267:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e26a:	85 d2                	test   edx,edx
c001e26c:	74 0a                	je     c001e278 <waitTask(int, int*, int)+0x3b>
c001e26e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e271:	89 02                	mov    DWORD PTR [edx],eax
c001e273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e278:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e27b:	83 c4 0c             	add    esp,0xc
c001e27e:	c3                   	ret    

c001e27f <nanoSleepUntil(unsigned long long)>:
c001e27f:	83 ec 0c             	sub    esp,0xc
c001e282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e286:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e28a:	3b 05 10 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea10
c001e290:	89 d1                	mov    ecx,edx
c001e292:	1b 0d 14 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea14
c001e298:	73 04                	jae    c001e29e <nanoSleepUntil(unsigned long long)+0x1f>
c001e29a:	83 c4 0c             	add    esp,0xc
c001e29d:	c3                   	ret    
c001e29e:	e8 0a fb ff ff       	call   c001ddad <lockStuff()>
c001e2a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2a9:	83 ec 08             	sub    esp,0x8
c001e2ac:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e2af:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e2b2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2b8:	68 dc 18 03 c0       	push   0xc00318dc
c001e2bd:	e8 de a7 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e2c9:	e8 4e ff ff ff       	call   c001e21c <blockTask(TaskState)>
c001e2ce:	83 c4 1c             	add    esp,0x1c
c001e2d1:	e9 71 fe ff ff       	jmp    c001e147 <unlockStuff()>

c001e2d6 <nanoSleep(unsigned long long)>:
c001e2d6:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c001e2db:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c001e2e1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e2e5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e2e9:	eb 94                	jmp    c001e27f <nanoSleepUntil(unsigned long long)>

c001e2eb <sleep(unsigned long long)>:
c001e2eb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e2f3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e2f8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e2fc:	01 ca                	add    edx,ecx
c001e2fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e302:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e306:	eb ce                	jmp    c001e2d6 <nanoSleep(unsigned long long)>

c001e308 <Semaphore::acquire()>:
c001e308:	83 ec 0c             	sub    esp,0xc
c001e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30f:	e8 99 fa ff ff       	call   c001ddad <lockStuff()>
c001e314:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e317:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e319:	7d 0c                	jge    c001e327 <Semaphore::acquire()+0x1f>
c001e31b:	42                   	inc    edx
c001e31c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e31f:	83 c4 0c             	add    esp,0xc
c001e322:	e9 20 fe ff ff       	jmp    c001e147 <unlockStuff()>
c001e327:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e32d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e334:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e337:	85 d2                	test   edx,edx
c001e339:	74 2a                	je     c001e365 <Semaphore::acquire()+0x5d>
c001e33b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e33e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e344:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e347:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e34d:	83 ec 0c             	sub    esp,0xc
c001e350:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e353:	6a 05                	push   0x5
c001e355:	e8 c2 fe ff ff       	call   c001e21c <blockTask(TaskState)>
c001e35a:	83 c4 10             	add    esp,0x10
c001e35d:	83 c4 0c             	add    esp,0xc
c001e360:	e9 e2 fd ff ff       	jmp    c001e147 <unlockStuff()>
c001e365:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e36b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e36e:	eb d7                	jmp    c001e347 <Semaphore::acquire()+0x3f>

c001e370 <taskReturned>:
c001e370:	83 ec 18             	sub    esp,0x18
c001e373:	68 2c c3 02 c0       	push   0xc002c32c
c001e378:	e8 2e c2 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001e37d:	83 c4 10             	add    esp,0x10
c001e380:	83 ec 0c             	sub    esp,0xc
c001e383:	6a 02                	push   0x2
c001e385:	e8 92 fe ff ff       	call   c001e21c <blockTask(TaskState)>
c001e38a:	e8 f7 f9 ff ff       	call   c001dd86 <lockScheduler()>
c001e38f:	e8 2e fd ff ff       	call   c001e0c2 <schedule()>
c001e394:	e8 ef f9 ff ff       	call   c001dd88 <unlockScheduler()>
c001e399:	83 c4 10             	add    esp,0x10
c001e39c:	eb e2                	jmp    c001e380 <taskReturned+0x10>

c001e39e <unblockTask(ThreadControlBlock*)>:
c001e39e:	53                   	push   ebx
c001e39f:	83 ec 08             	sub    esp,0x8
c001e3a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3a6:	e8 db f9 ff ff       	call   c001dd86 <lockScheduler()>
c001e3ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3ae:	85 c0                	test   eax,eax
c001e3b0:	74 5c                	je     c001e40e <unblockTask(ThreadControlBlock*)+0x70>
c001e3b2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3b5:	48                   	dec    eax
c001e3b6:	74 31                	je     c001e3e9 <unblockTask(ThreadControlBlock*)+0x4b>
c001e3b8:	83 ec 0c             	sub    esp,0xc
c001e3bb:	68 e8 18 03 c0       	push   0xc00318e8
c001e3c0:	e8 09 a6 00 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	85 c0                	test   eax,eax
c001e3ca:	75 17                	jne    c001e3e3 <unblockTask(ThreadControlBlock*)+0x45>
c001e3cc:	eb 65                	jmp    c001e433 <unblockTask(ThreadControlBlock*)+0x95>
c001e3ce:	83 ec 08             	sub    esp,0x8
c001e3d1:	50                   	push   eax
c001e3d2:	68 e8 18 03 c0       	push   0xc00318e8
c001e3d7:	e8 cc a8 00 00       	call   c0028ca8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	85 c0                	test   eax,eax
c001e3e1:	74 50                	je     c001e433 <unblockTask(ThreadControlBlock*)+0x95>
c001e3e3:	39 c3                	cmp    ebx,eax
c001e3e5:	75 e7                	jne    c001e3ce <unblockTask(ThreadControlBlock*)+0x30>
c001e3e7:	eb 1c                	jmp    c001e405 <unblockTask(ThreadControlBlock*)+0x67>
c001e3e9:	83 ec 0c             	sub    esp,0xc
c001e3ec:	68 1c c4 02 c0       	push   0xc002c41c
c001e3f1:	e8 04 4b ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e3f6:	c7 04 24 a8 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3a8
c001e3fd:	e8 f8 4a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e402:	83 c4 10             	add    esp,0x10
c001e405:	83 c4 08             	add    esp,0x8
c001e408:	5b                   	pop    ebx
c001e409:	e9 7a f9 ff ff       	jmp    c001dd88 <unlockScheduler()>
c001e40e:	83 ec 0c             	sub    esp,0xc
c001e411:	68 60 c3 02 c0       	push   0xc002c360
c001e416:	e8 df 4a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e41b:	c7 04 24 a8 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3a8
c001e422:	e8 d3 4a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e427:	83 c4 10             	add    esp,0x10
c001e42a:	83 c4 08             	add    esp,0x8
c001e42d:	5b                   	pop    ebx
c001e42e:	e9 55 f9 ff ff       	jmp    c001dd88 <unlockScheduler()>
c001e433:	83 ec 08             	sub    esp,0x8
c001e436:	53                   	push   ebx
c001e437:	68 e8 18 03 c0       	push   0xc00318e8
c001e43c:	e8 5f a6 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e441:	83 c4 10             	add    esp,0x10
c001e444:	83 c4 08             	add    esp,0x8
c001e447:	5b                   	pop    ebx
c001e448:	e9 3b f9 ff ff       	jmp    c001dd88 <unlockScheduler()>

c001e44d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e44d:	55                   	push   ebp
c001e44e:	57                   	push   edi
c001e44f:	56                   	push   esi
c001e450:	53                   	push   ebx
c001e451:	83 ec 1c             	sub    esp,0x1c
c001e454:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e458:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e45b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e461:	85 ff                	test   edi,edi
c001e463:	7e 20                	jle    c001e485 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e465:	31 f6                	xor    esi,esi
c001e467:	83 ec 0c             	sub    esp,0xc
c001e46a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e471:	46                   	inc    esi
c001e472:	e8 d9 13 ff ff       	call   c000f850 <free>
c001e477:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e483:	7f e2                	jg     c001e467 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e485:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e48f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e494:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e497:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e49a:	d3 c0                	rol    eax,cl
c001e49c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4a3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4a6:	89 f7                	mov    edi,esi
c001e4a8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4b0:	0f 85 74 01 00 00    	jne    c001e62a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e4b6:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e4bc:	85 ed                	test   ebp,ebp
c001e4be:	74 1b                	je     c001e4db <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4c0:	83 ec 0c             	sub    esp,0xc
c001e4c3:	55                   	push   ebp
c001e4c4:	e8 4f be ff ff       	call   c001a318 <EnvVarContainer::~EnvVarContainer()>
c001e4c9:	59                   	pop    ecx
c001e4ca:	5e                   	pop    esi
c001e4cb:	6a 0c                	push   0xc
c001e4cd:	55                   	push   ebp
c001e4ce:	e8 47 49 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001e4d3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	89 f7                	mov    edi,esi
c001e4db:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4e1:	85 c0                	test   eax,eax
c001e4e3:	0f 84 aa 00 00 00    	je     c001e593 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4e9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4ec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4f0:	31 c9                	xor    ecx,ecx
c001e4f2:	eb 10                	jmp    c001e504 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4f4:	41                   	inc    ecx
c001e4f5:	83 f9 10             	cmp    ecx,0x10
c001e4f8:	0f 84 95 00 00 00    	je     c001e593 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4fe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e504:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e50b:	d3 fa                	sar    edx,cl
c001e50d:	83 e2 01             	and    edx,0x1
c001e510:	74 e2                	je     c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e512:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e515:	01 ca                	add    edx,ecx
c001e517:	89 d5                	mov    ebp,edx
c001e519:	c1 e5 05             	shl    ebp,0x5
c001e51c:	01 ea                	add    edx,ebp
c001e51e:	01 d0                	add    eax,edx
c001e520:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e526:	83 fd 07             	cmp    ebp,0x7
c001e529:	75 c9                	jne    c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e52b:	05 40 02 00 00       	add    eax,0x240
c001e530:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e533:	83 fd ff             	cmp    ebp,0xffffffff
c001e536:	0f 8c 08 01 00 00    	jl     c001e644 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e53c:	0f 84 b9 01 00 00    	je     c001e6fb <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e542:	85 ed                	test   ebp,ebp
c001e544:	0f 84 a0 01 00 00    	je     c001e6ea <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e54a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e54c:	75 a6                	jne    c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e54e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e554:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e558:	01 d0                	add    eax,edx
c001e55a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e55e:	83 ec 0c             	sub    esp,0xc
c001e561:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e567:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e56a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e570:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e577:	50                   	push   eax
c001e578:	e8 21 fe ff ff       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c001e57d:	83 c4 10             	add    esp,0x10
c001e580:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e583:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e587:	89 f7                	mov    edi,esi
c001e589:	41                   	inc    ecx
c001e58a:	83 f9 10             	cmp    ecx,0x10
c001e58d:	0f 85 6b ff ff ff    	jne    c001e4fe <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e593:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e599:	85 c0                	test   eax,eax
c001e59b:	74 5d                	je     c001e5fa <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e59d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5a3:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5a9:	74 4f                	je     c001e5fa <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5ab:	83 ec 0c             	sub    esp,0xc
c001e5ae:	68 e8 18 03 c0       	push   0xc00318e8
c001e5b3:	e8 16 a4 00 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5b8:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e5bf:	89 c7                	mov    edi,eax
c001e5c1:	e8 10 a4 00 00       	call   c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5c6:	83 c4 10             	add    esp,0x10
c001e5c9:	84 c0                	test   al,al
c001e5cb:	0f 84 e4 00 00 00    	je     c001e6b5 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e5d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5d4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e5da:	85 d2                	test   edx,edx
c001e5dc:	74 0f                	je     c001e5ed <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e5de:	83 ec 0c             	sub    esp,0xc
c001e5e1:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5e3:	52                   	push   edx
c001e5e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ea:	83 c4 10             	add    esp,0x10
c001e5ed:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e5f7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5fa:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e600:	85 db                	test   ebx,ebx
c001e602:	74 16                	je     c001e61a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e604:	83 ec 0c             	sub    esp,0xc
c001e607:	53                   	push   ebx
c001e608:	e8 fd 3b ff ff       	call   c001220a <VAS::~VAS()>
c001e60d:	58                   	pop    eax
c001e60e:	5a                   	pop    edx
c001e60f:	6a 10                	push   0x10
c001e611:	53                   	push   ebx
c001e612:	e8 03 48 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c001e617:	83 c4 10             	add    esp,0x10
c001e61a:	83 ec 0c             	sub    esp,0xc
c001e61d:	68 76 c1 02 c0       	push   0xc002c176
c001e622:	e8 d3 48 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e627:	83 c4 10             	add    esp,0x10
c001e62a:	83 ec 08             	sub    esp,0x8
c001e62d:	68 3f 07 00 00       	push   0x73f
c001e632:	68 84 c1 02 c0       	push   0xc002c184
c001e637:	e8 be 48 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e63c:	83 c4 2c             	add    esp,0x2c
c001e63f:	5b                   	pop    ebx
c001e640:	5e                   	pop    esi
c001e641:	5f                   	pop    edi
c001e642:	5d                   	pop    ebp
c001e643:	c3                   	ret    
c001e644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e648:	83 ec 0c             	sub    esp,0xc
c001e64b:	68 60 c4 02 c0       	push   0xc002c460
c001e650:	e8 56 bf ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001e655:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	89 f7                	mov    edi,esi
c001e65d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e661:	e9 8e fe ff ff       	jmp    c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e666:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e66c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e672:	75 1c                	jne    c001e690 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	68 c8 c4 02 c0       	push   0xc002c4c8
c001e67c:	e8 79 48 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e681:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e688:	e8 8f fb ff ff       	call   c001e21c <blockTask(TaskState)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	83 ec 08             	sub    esp,0x8
c001e693:	56                   	push   esi
c001e694:	68 e8 18 03 c0       	push   0xc00318e8
c001e699:	e8 02 a4 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e69e:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e6a5:	e8 24 a3 00 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6aa:	83 c4 10             	add    esp,0x10
c001e6ad:	39 f8                	cmp    eax,edi
c001e6af:	0f 84 1c ff ff ff    	je     c001e5d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e6b5:	83 ec 0c             	sub    esp,0xc
c001e6b8:	68 e8 18 03 c0       	push   0xc00318e8
c001e6bd:	e8 0c a3 00 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6c2:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e6c9:	89 c6                	mov    esi,eax
c001e6cb:	e8 22 a3 00 00       	call   c00289f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6d0:	83 c4 10             	add    esp,0x10
c001e6d3:	39 f3                	cmp    ebx,esi
c001e6d5:	74 b9                	je     c001e690 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6d7:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6dd:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e6e3:	75 ab                	jne    c001e690 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6e5:	e9 7c ff ff ff       	jmp    c001e666 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e6ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	68 94 c4 02 c0       	push   0xc002c494
c001e6f6:	e9 55 ff ff ff       	jmp    c001e650 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e6fb:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e701:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e704:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e707:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e70d:	01 d7                	add    edi,edx
c001e70f:	89 f8                	mov    eax,edi
c001e711:	e9 44 fe ff ff       	jmp    c001e55a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e716 <cleanerTaskFunction(void*)>:
c001e716:	53                   	push   ebx
c001e717:	83 ec 08             	sub    esp,0x8
c001e71a:	e8 69 f6 ff ff       	call   c001dd88 <unlockScheduler()>
c001e71f:	e8 62 f6 ff ff       	call   c001dd86 <lockScheduler()>
c001e724:	80 3d ac 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ac,0x0
c001e72b:	0f 85 8e 00 00 00    	jne    c001e7bf <cleanerTaskFunction(void*)+0xa9>
c001e731:	83 ec 0c             	sub    esp,0xc
c001e734:	6a 02                	push   0x2
c001e736:	e8 9f fa ff ff       	call   c001e1da <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e73b:	83 c4 10             	add    esp,0x10
c001e73e:	c6 05 ac 18 03 c0 00 	mov    BYTE PTR ds:0xc00318ac,0x0
c001e745:	e8 63 f6 ff ff       	call   c001ddad <lockStuff()>
c001e74a:	e8 37 f6 ff ff       	call   c001dd86 <lockScheduler()>
c001e74f:	83 ec 0c             	sub    esp,0xc
c001e752:	68 d0 18 03 c0       	push   0xc00318d0
c001e757:	e8 7a a2 00 00       	call   c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e75c:	83 c4 10             	add    esp,0x10
c001e75f:	84 c0                	test   al,al
c001e761:	75 40                	jne    c001e7a3 <cleanerTaskFunction(void*)+0x8d>
c001e763:	83 ec 0c             	sub    esp,0xc
c001e766:	68 d0 18 03 c0       	push   0xc00318d0
c001e76b:	e8 5e a2 00 00       	call   c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e770:	c7 04 24 d0 18 03 c0 	mov    DWORD PTR [esp],0xc00318d0
c001e777:	89 c3                	mov    ebx,eax
c001e779:	e8 74 a2 00 00       	call   c00289f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e77e:	c7 04 24 9a c1 02 c0 	mov    DWORD PTR [esp],0xc002c19a
c001e785:	e8 70 47 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e78a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e78d:	e8 bb fc ff ff       	call   c001e44d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e792:	c7 04 24 b3 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b3
c001e799:	e8 5c 47 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e79e:	83 c4 10             	add    esp,0x10
c001e7a1:	eb ac                	jmp    c001e74f <cleanerTaskFunction(void*)+0x39>
c001e7a3:	e8 e0 f5 ff ff       	call   c001dd88 <unlockScheduler()>
c001e7a8:	e8 9a f9 ff ff       	call   c001e147 <unlockStuff()>
c001e7ad:	e8 d4 f5 ff ff       	call   c001dd86 <lockScheduler()>
c001e7b2:	80 3d ac 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ac,0x0
c001e7b9:	0f 84 72 ff ff ff    	je     c001e731 <cleanerTaskFunction(void*)+0x1b>
c001e7bf:	e8 c4 f5 ff ff       	call   c001dd88 <unlockScheduler()>
c001e7c4:	e9 75 ff ff ff       	jmp    c001e73e <cleanerTaskFunction(void*)+0x28>

c001e7c9 <terminateTask(int)>:
c001e7c9:	83 ec 14             	sub    esp,0x14
c001e7cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e7d4:	83 c0 0c             	add    eax,0xc
c001e7d7:	50                   	push   eax
c001e7d8:	68 f0 c4 02 c0       	push   0xc002c4f0
c001e7dd:	e8 18 47 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e7e2:	e8 c6 f5 ff ff       	call   c001ddad <lockStuff()>
c001e7e7:	e8 9a f5 ff ff       	call   c001dd86 <lockScheduler()>
c001e7ec:	c7 04 24 c6 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1c6
c001e7f3:	e8 02 47 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e7f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e801:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e804:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e809:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e80c:	5a                   	pop    edx
c001e80d:	59                   	pop    ecx
c001e80e:	50                   	push   eax
c001e80f:	68 d0 18 03 c0       	push   0xc00318d0
c001e814:	e8 87 a2 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e81e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e825:	c7 04 24 e0 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1e0
c001e82c:	e8 c9 46 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e831:	83 c4 10             	add    esp,0x10
c001e834:	a1 a8 18 03 c0       	mov    eax,ds:0xc00318a8
c001e839:	85 c0                	test   eax,eax
c001e83b:	74 5a                	je     c001e897 <terminateTask(int)+0xce>
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	68 fa c1 02 c0       	push   0xc002c1fa
c001e845:	e8 b0 46 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e84a:	58                   	pop    eax
c001e84b:	c6 05 ac 18 03 c0 01 	mov    BYTE PTR ds:0xc00318ac,0x1
c001e852:	ff 35 a8 18 03 c0    	push   DWORD PTR ds:0xc00318a8
c001e858:	e8 41 fb ff ff       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c001e85d:	c7 04 24 14 c2 02 c0 	mov    DWORD PTR [esp],0xc002c214
c001e864:	e8 91 46 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e869:	83 c4 10             	add    esp,0x10
c001e86c:	e8 17 f5 ff ff       	call   c001dd88 <unlockScheduler()>
c001e871:	e8 d1 f8 ff ff       	call   c001e147 <unlockStuff()>
c001e876:	83 ec 0c             	sub    esp,0xc
c001e879:	68 4c c2 02 c0       	push   0xc002c24c
c001e87e:	e8 77 46 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	e8 fb f4 ff ff       	call   c001dd86 <lockScheduler()>
c001e88b:	e8 32 f8 ff ff       	call   c001e0c2 <schedule()>
c001e890:	e8 f3 f4 ff ff       	call   c001dd88 <unlockScheduler()>
c001e895:	eb ef                	jmp    c001e886 <terminateTask(int)+0xbd>
c001e897:	83 ec 0c             	sub    esp,0xc
c001e89a:	68 2e c2 02 c0       	push   0xc002c22e
c001e89f:	e8 56 46 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e8a4:	83 c4 10             	add    esp,0x10
c001e8a7:	eb c3                	jmp    c001e86c <terminateTask(int)+0xa3>

c001e8a9 <Thr::terminateFromIRQ(int)>:
c001e8a9:	83 ec 18             	sub    esp,0x18
c001e8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b0:	e8 14 ff ff ff       	call   c001e7c9 <terminateTask(int)>
c001e8b5:	90                   	nop

c001e8b6 <Semaphore::release()>:
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bd:	e8 eb f4 ff ff       	call   c001ddad <lockStuff()>
c001e8c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e8c5:	85 d2                	test   edx,edx
c001e8c7:	74 1a                	je     c001e8e3 <Semaphore::release()+0x2d>
c001e8c9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e8d2:	52                   	push   edx
c001e8d3:	e8 c6 fa ff ff       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c001e8d8:	83 c4 10             	add    esp,0x10
c001e8db:	83 c4 0c             	add    esp,0xc
c001e8de:	e9 64 f8 ff ff       	jmp    c001e147 <unlockStuff()>
c001e8e3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e8e6:	83 c4 0c             	add    esp,0xc
c001e8e9:	e9 59 f8 ff ff       	jmp    c001e147 <unlockStuff()>

c001e8ee <__static_initialization_and_destruction_0(int, int)>:
c001e8ee:	83 ec 0c             	sub    esp,0xc
c001e8f1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8f6:	0f 85 88 00 00 00    	jne    c001e984 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8fc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e904:	75 7e                	jne    c001e984 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	68 e8 18 03 c0       	push   0xc00318e8
c001e90e:	e8 3d a3 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e913:	83 c4 10             	add    esp,0x10
c001e916:	83 ec 04             	sub    esp,0x4
c001e919:	68 a8 d2 02 c0       	push   0xc002d2a8
c001e91e:	68 e8 18 03 c0       	push   0xc00318e8
c001e923:	68 10 8c 02 c0       	push   0xc0028c10
c001e928:	e8 67 44 ff ff       	call   c0012d94 <__cxa_atexit>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	83 ec 0c             	sub    esp,0xc
c001e933:	68 dc 18 03 c0       	push   0xc00318dc
c001e938:	e8 13 a3 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e93d:	83 c4 10             	add    esp,0x10
c001e940:	83 ec 04             	sub    esp,0x4
c001e943:	68 a8 d2 02 c0       	push   0xc002d2a8
c001e948:	68 dc 18 03 c0       	push   0xc00318dc
c001e94d:	68 10 8c 02 c0       	push   0xc0028c10
c001e952:	e8 3d 44 ff ff       	call   c0012d94 <__cxa_atexit>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	83 ec 0c             	sub    esp,0xc
c001e95d:	68 d0 18 03 c0       	push   0xc00318d0
c001e962:	e8 e9 a2 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e967:	83 c4 10             	add    esp,0x10
c001e96a:	83 ec 04             	sub    esp,0x4
c001e96d:	68 a8 d2 02 c0       	push   0xc002d2a8
c001e972:	68 d0 18 03 c0       	push   0xc00318d0
c001e977:	68 10 8c 02 c0       	push   0xc0028c10
c001e97c:	e8 13 44 ff ff       	call   c0012d94 <__cxa_atexit>
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	90                   	nop
c001e985:	83 c4 0c             	add    esp,0xc
c001e988:	c3                   	ret    

c001e989 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	83 ec 08             	sub    esp,0x8
c001e98f:	68 ff ff 00 00       	push   0xffff
c001e994:	6a 01                	push   0x1
c001e996:	e8 53 ff ff ff       	call   c001e8ee <__static_initialization_and_destruction_0(int, int)>
c001e99b:	83 c4 10             	add    esp,0x10
c001e99e:	83 c4 0c             	add    esp,0xc
c001e9a1:	c3                   	ret    

c001e9a2 <Vm::inbv(unsigned short)>:
c001e9a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9a6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9ab:	75 06                	jne    c001e9b3 <Vm::inbv(unsigned short)+0x11>
c001e9ad:	a0 2c 19 03 c0       	mov    al,ds:0xc003192c
c001e9b2:	c3                   	ret    
c001e9b3:	ec                   	in     al,dx
c001e9b4:	c3                   	ret    

c001e9b5 <Vm::outbv(unsigned short, unsigned char)>:
c001e9b5:	53                   	push   ebx
c001e9b6:	83 ec 08             	sub    esp,0x8
c001e9b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e9c1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9c6:	75 38                	jne    c001ea00 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e9c8:	0f b6 c3             	movzx  eax,bl
c001e9cb:	51                   	push   ecx
c001e9cc:	51                   	push   ecx
c001e9cd:	50                   	push   eax
c001e9ce:	68 0f c5 02 c0       	push   0xc002c50f
c001e9d3:	e8 22 45 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001e9d8:	8b 15 2c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003192c
c001e9de:	83 c4 10             	add    esp,0x10
c001e9e1:	8d 42 01             	lea    eax,[edx+0x1]
c001e9e4:	88 9a 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],bl
c001e9ea:	a3 2c 19 03 c0       	mov    ds:0xc003192c,eax
c001e9ef:	83 f8 20             	cmp    eax,0x20
c001e9f2:	75 0f                	jne    c001ea03 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9f4:	c7 05 2c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x1f
c001e9fe:	eb 03                	jmp    c001ea03 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea00:	88 d8                	mov    al,bl
c001ea02:	ee                   	out    dx,al
c001ea03:	83 c4 08             	add    esp,0x8
c001ea06:	5b                   	pop    ebx
c001ea07:	c3                   	ret    

c001ea08 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea12:	c1 e0 04             	shl    eax,0x4
c001ea15:	01 d0                	add    eax,edx
c001ea17:	c3                   	ret    

c001ea18 <Vm::getSegment(unsigned int)>:
c001ea18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea1c:	c1 e8 10             	shr    eax,0x10
c001ea1f:	c3                   	ret    

c001ea20 <Vm::getOffset(unsigned int)>:
c001ea20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea24:	c3                   	ret    

c001ea25 <Vm::mainloop2()>:
c001ea25:	83 ec 0c             	sub    esp,0xc
c001ea28:	e8 59 f3 ff ff       	call   c001dd86 <lockScheduler()>
c001ea2d:	83 ec 0c             	sub    esp,0xc
c001ea30:	c6 05 25 19 03 c0 01 	mov    BYTE PTR ds:0xc0031925,0x1
c001ea37:	6a 02                	push   0x2
c001ea39:	e8 9c f7 ff ff       	call   c001e1da <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea43:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea47:	52                   	push   edx
c001ea48:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea4c:	52                   	push   edx
c001ea4d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea51:	52                   	push   edx
c001ea52:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea56:	50                   	push   eax
c001ea57:	e8 9e 18 fe ff       	call   c00002fa <goToVM86>
c001ea5c:	83 c4 2c             	add    esp,0x2c
c001ea5f:	c3                   	ret    

c001ea60 <Vm::mainVm8086Loop(void*)>:
c001ea60:	83 ec 0c             	sub    esp,0xc
c001ea63:	e8 20 f3 ff ff       	call   c001dd88 <unlockScheduler()>
c001ea68:	83 c4 0c             	add    esp,0xc
c001ea6b:	eb b8                	jmp    c001ea25 <Vm::mainloop2()>

c001ea6d <Vm::mainloop3(unsigned long)>:
c001ea6d:	53                   	push   ebx
c001ea6e:	83 ec 08             	sub    esp,0x8
c001ea71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea75:	e8 0c f3 ff ff       	call   c001dd86 <lockScheduler()>
c001ea7a:	83 ec 0c             	sub    esp,0xc
c001ea7d:	89 1d 20 19 03 c0    	mov    DWORD PTR ds:0xc0031920,ebx
c001ea83:	6a 02                	push   0x2
c001ea85:	c6 05 24 19 03 c0 01 	mov    BYTE PTR ds:0xc0031924,0x1
c001ea8c:	e8 49 f7 ff ff       	call   c001e1da <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea91:	83 c4 18             	add    esp,0x18
c001ea94:	5b                   	pop    ebx
c001ea95:	eb 8e                	jmp    c001ea25 <Vm::mainloop2()>

c001ea97 <Vm::initialise8086()>:
c001ea97:	83 ec 0c             	sub    esp,0xc
c001ea9a:	68 80 00 00 00       	push   0x80
c001ea9f:	6a 00                	push   0x0
c001eaa1:	68 60 ea 01 c0       	push   0xc001ea60
c001eaa6:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001eaac:	e8 07 f4 ff ff       	call   c001deb8 <Process::createThread(void (*)(void*), void*, int)>
c001eab1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eab8:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c001eabd:	68 00 01 00 00       	push   0x100
c001eac2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001eac7:	6a 00                	push   0x0
c001eac9:	6a 00                	push   0x0
c001eacb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ead1:	e8 94 3b ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ead6:	83 c4 2c             	add    esp,0x2c
c001ead9:	c3                   	ret    

c001eada <Vm::finish8086()>:
c001eada:	53                   	push   ebx
c001eadb:	83 ec 08             	sub    esp,0x8
c001eade:	e8 a3 f2 ff ff       	call   c001dd86 <lockScheduler()>
c001eae3:	80 3d 24 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031924,0x0
c001eaea:	75 0c                	jne    c001eaf8 <Vm::finish8086()+0x1e>
c001eaec:	e8 d1 f5 ff ff       	call   c001e0c2 <schedule()>
c001eaf1:	e8 92 f2 ff ff       	call   c001dd88 <unlockScheduler()>
c001eaf6:	eb e6                	jmp    c001eade <Vm::finish8086()+0x4>
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	8b 1d 20 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031920
c001eb01:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001eb07:	c6 05 24 19 03 c0 00 	mov    BYTE PTR ds:0xc0031924,0x0
c001eb0e:	e8 8b f8 ff ff       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c001eb13:	e8 70 f2 ff ff       	call   c001dd88 <unlockScheduler()>
c001eb18:	89 d8                	mov    eax,ebx
c001eb1a:	83 c4 18             	add    esp,0x18
c001eb1d:	5b                   	pop    ebx
c001eb1e:	c3                   	ret    

c001eb1f <Vm::getOutput8086(unsigned char*)>:
c001eb1f:	83 ec 10             	sub    esp,0x10
c001eb22:	ff 35 2c 19 03 c0    	push   DWORD PTR ds:0xc003192c
c001eb28:	68 40 19 03 c0       	push   0xc0031940
c001eb2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb31:	e8 0e 1c fe ff       	call   c0000744 <memcpy>
c001eb36:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001eb3b:	c7 05 2c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x0
c001eb45:	83 c4 1c             	add    esp,0x1c
c001eb48:	c3                   	ret    

c001eb49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb49:	55                   	push   ebp
c001eb4a:	57                   	push   edi
c001eb4b:	56                   	push   esi
c001eb4c:	53                   	push   ebx
c001eb4d:	83 ec 2c             	sub    esp,0x2c
c001eb50:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb54:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb58:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb5c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb60:	e8 21 f2 ff ff       	call   c001dd86 <lockScheduler()>
c001eb65:	a0 25 19 03 c0       	mov    al,ds:0xc0031925
c001eb6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb6e:	84 c0                	test   al,al
c001eb70:	75 0c                	jne    c001eb7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb72:	e8 4b f5 ff ff       	call   c001e0c2 <schedule()>
c001eb77:	e8 0c f2 ff ff       	call   c001dd88 <unlockScheduler()>
c001eb7c:	eb e2                	jmp    c001eb60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb7e:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001eb83:	c7 05 2c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x0
c001eb8d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb91:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb95:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb99:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb9d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eba1:	50                   	push   eax
c001eba2:	6a 20                	push   0x20
c001eba4:	6a 00                	push   0x0
c001eba6:	68 40 19 03 c0       	push   0xc0031940
c001ebab:	e8 c8 1b fe ff       	call   c0000778 <memset>
c001ebb0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebb7:	e8 84 0c ff ff       	call   c000f840 <malloc>
c001ebbc:	83 c4 0c             	add    esp,0xc
c001ebbf:	89 c7                	mov    edi,eax
c001ebc1:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001ebc7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebcb:	50                   	push   eax
c001ebcc:	e8 81 48 ff ff       	call   c0013452 <File::File(char const*, Process*)>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	85 ff                	test   edi,edi
c001ebd6:	75 0a                	jne    c001ebe2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	68 2b c5 02 c0       	push   0xc002c52b
c001ebe0:	eb 27                	jmp    c001ec09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ebe2:	50                   	push   eax
c001ebe3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebe7:	50                   	push   eax
c001ebe8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebec:	50                   	push   eax
c001ebed:	57                   	push   edi
c001ebee:	e8 6f 4b ff ff       	call   c0013762 <File::stat(unsigned long long*, bool*)>
c001ebf3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	89 e8                	mov    eax,ebp
c001ebfd:	84 c0                	test   al,al
c001ebff:	74 19                	je     c001ec1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec01:	83 ec 0c             	sub    esp,0xc
c001ec04:	68 3f c5 02 c0       	push   0xc002c53f
c001ec09:	e8 9d b9 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001ec0e:	31 ed                	xor    ebp,ebp
c001ec10:	e8 73 f1 ff ff       	call   c001dd88 <unlockScheduler()>
c001ec15:	83 c4 10             	add    esp,0x10
c001ec18:	eb 75                	jmp    c001ec8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec1a:	50                   	push   eax
c001ec1b:	50                   	push   eax
c001ec1c:	6a 01                	push   0x1
c001ec1e:	57                   	push   edi
c001ec1f:	e8 92 48 ff ff       	call   c00134b6 <File::open(FileOpenMode)>
c001ec24:	83 c4 10             	add    esp,0x10
c001ec27:	85 c0                	test   eax,eax
c001ec29:	74 17                	je     c001ec42 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec2b:	83 ec 0c             	sub    esp,0xc
c001ec2e:	68 58 c5 02 c0       	push   0xc002c558
c001ec33:	e8 73 b9 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001ec38:	e8 4b f1 ff ff       	call   c001dd88 <unlockScheduler()>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	eb 4d                	jmp    c001ec8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec42:	0f b7 f6             	movzx  esi,si
c001ec45:	50                   	push   eax
c001ec46:	0f b7 db             	movzx  ebx,bx
c001ec49:	50                   	push   eax
c001ec4a:	56                   	push   esi
c001ec4b:	53                   	push   ebx
c001ec4c:	e8 b7 fd ff ff       	call   c001ea08 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec51:	5a                   	pop    edx
c001ec52:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec54:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec58:	51                   	push   ecx
c001ec59:	50                   	push   eax
c001ec5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec62:	57                   	push   edi
c001ec63:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec66:	83 c4 14             	add    esp,0x14
c001ec69:	57                   	push   edi
c001ec6a:	e8 a5 48 ff ff       	call   c0013514 <File::close()>
c001ec6f:	c6 05 25 19 03 c0 00 	mov    BYTE PTR ds:0xc0031925,0x0
c001ec76:	e8 0d f1 ff ff       	call   c001dd88 <unlockScheduler()>
c001ec7b:	59                   	pop    ecx
c001ec7c:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001ec82:	e8 17 f7 ff ff       	call   c001e39e <unblockTask(ThreadControlBlock*)>
c001ec87:	83 c4 10             	add    esp,0x10
c001ec8a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec8f:	83 c4 2c             	add    esp,0x2c
c001ec92:	89 e8                	mov    eax,ebp
c001ec94:	5b                   	pop    ebx
c001ec95:	5e                   	pop    esi
c001ec96:	5f                   	pop    edi
c001ec97:	5d                   	pop    ebp
c001ec98:	c3                   	ret    

c001ec99 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec99:	57                   	push   edi
c001ec9a:	56                   	push   esi
c001ec9b:	53                   	push   ebx
c001ec9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eca4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eca8:	83 e8 06             	sub    eax,0x6
c001ecab:	0f b7 c0             	movzx  eax,ax
c001ecae:	50                   	push   eax
c001ecaf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecb4:	50                   	push   eax
c001ecb5:	e8 4e fd ff ff       	call   c001ea08 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecba:	5a                   	pop    edx
c001ecbb:	5e                   	pop    esi
c001ecbc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecbf:	8d 56 fa             	lea    edx,[esi-0x6]
c001ecc2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ecc8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eccb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecce:	83 c2 02             	add    edx,0x2
c001ecd1:	66 89 10             	mov    WORD PTR [eax],dx
c001ecd4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecd7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecdb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecde:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ece2:	89 d6                	mov    esi,edx
c001ece4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ecea:	66 81 e6 ff fd       	and    si,0xfdff
c001ecef:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ecf3:	74 07                	je     c001ecfc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ecf5:	89 d6                	mov    esi,edx
c001ecf7:	66 81 ce 00 02       	or     si,0x200
c001ecfc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed05:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed09:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed11:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed14:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed1c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed1f:	5b                   	pop    ebx
c001ed20:	5e                   	pop    esi
c001ed21:	5f                   	pop    edi
c001ed22:	c3                   	ret    

c001ed23 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed2d:	c1 e0 04             	shl    eax,0x4
c001ed30:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed33:	c3                   	ret    

c001ed34 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed34:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed39:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed3e:	c1 e0 04             	shl    eax,0x4
c001ed41:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed45:	c3                   	ret    

c001ed46 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed50:	c1 e0 04             	shl    eax,0x4
c001ed53:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed56:	c3                   	ret    

c001ed57 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed5c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed61:	c1 e0 04             	shl    eax,0x4
c001ed64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed68:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed6b:	c3                   	ret    

c001ed6c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed6c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed71:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed76:	c1 e0 04             	shl    eax,0x4
c001ed79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed7d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed81:	c3                   	ret    

c001ed82 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8c:	c1 e0 04             	shl    eax,0x4
c001ed8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed93:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed96:	c3                   	ret    

c001ed97 <Vm::faultHandler(regs*)>:
c001ed97:	55                   	push   ebp
c001ed98:	57                   	push   edi
c001ed99:	56                   	push   esi
c001ed9a:	53                   	push   ebx
c001ed9b:	83 ec 1c             	sub    esp,0x1c
c001ed9e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eda2:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eda5:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eda8:	0f b7 c1             	movzx  eax,cx
c001edab:	50                   	push   eax
c001edac:	0f b7 c3             	movzx  eax,bx
c001edaf:	c1 e3 04             	shl    ebx,0x4
c001edb2:	50                   	push   eax
c001edb3:	e8 50 fc ff ff       	call   c001ea08 <Vm::realToLinear(unsigned short, unsigned short)>
c001edb8:	5a                   	pop    edx
c001edb9:	89 c5                	mov    ebp,eax
c001edbb:	5e                   	pop    esi
c001edbc:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001edc0:	50                   	push   eax
c001edc1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001edc5:	50                   	push   eax
c001edc6:	e8 3d fc ff ff       	call   c001ea08 <Vm::realToLinear(unsigned short, unsigned short)>
c001edcb:	01 cb                	add    ebx,ecx
c001edcd:	89 c6                	mov    esi,eax
c001edcf:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001edd3:	50                   	push   eax
c001edd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edd8:	50                   	push   eax
c001edd9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eddd:	50                   	push   eax
c001edde:	55                   	push   ebp
c001eddf:	53                   	push   ebx
c001ede0:	b3 06                	mov    bl,0x6
c001ede2:	68 71 c5 02 c0       	push   0xc002c571
c001ede7:	e8 0e 41 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001edec:	83 c4 20             	add    esp,0x20
c001edef:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001edf4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001edf9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001edfd:	3c 9d                	cmp    al,0x9d
c001edff:	0f 84 d7 02 00 00    	je     c001f0dc <Vm::faultHandler(regs*)+0x345>
c001ee05:	0f 87 a3 00 00 00    	ja     c001eeae <Vm::faultHandler(regs*)+0x117>
c001ee0b:	3c 66                	cmp    al,0x66
c001ee0d:	0f 84 15 02 00 00    	je     c001f028 <Vm::faultHandler(regs*)+0x291>
c001ee13:	77 5f                	ja     c001ee74 <Vm::faultHandler(regs*)+0xdd>
c001ee15:	3c 36                	cmp    al,0x36
c001ee17:	0f 84 f1 01 00 00    	je     c001f00e <Vm::faultHandler(regs*)+0x277>
c001ee1d:	77 28                	ja     c001ee47 <Vm::faultHandler(regs*)+0xb0>
c001ee1f:	3c 26                	cmp    al,0x26
c001ee21:	0f 84 99 01 00 00    	je     c001efc0 <Vm::faultHandler(regs*)+0x229>
c001ee27:	3c 2e                	cmp    al,0x2e
c001ee29:	0f 85 3b 07 00 00    	jne    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001ee2f:	83 ec 0c             	sub    esp,0xc
c001ee32:	31 db                	xor    ebx,ebx
c001ee34:	68 86 c5 02 c0       	push   0xc002c586
c001ee39:	e8 bc 40 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ee3e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee41:	83 c4 10             	add    esp,0x10
c001ee44:	45                   	inc    ebp
c001ee45:	eb b2                	jmp    c001edf9 <Vm::faultHandler(regs*)+0x62>
c001ee47:	3c 64                	cmp    al,0x64
c001ee49:	0f 84 8b 01 00 00    	je     c001efda <Vm::faultHandler(regs*)+0x243>
c001ee4f:	0f 87 9f 01 00 00    	ja     c001eff4 <Vm::faultHandler(regs*)+0x25d>
c001ee55:	3c 3e                	cmp    al,0x3e
c001ee57:	0f 85 0d 07 00 00    	jne    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001ee5d:	83 ec 0c             	sub    esp,0xc
c001ee60:	b3 01                	mov    bl,0x1
c001ee62:	68 8a c5 02 c0       	push   0xc002c58a
c001ee67:	e8 8e 40 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ee6c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee6f:	83 c4 10             	add    esp,0x10
c001ee72:	eb d0                	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001ee74:	3c 6d                	cmp    al,0x6d
c001ee76:	0f 84 af 03 00 00    	je     c001f22b <Vm::faultHandler(regs*)+0x494>
c001ee7c:	77 15                	ja     c001ee93 <Vm::faultHandler(regs*)+0xfc>
c001ee7e:	3c 67                	cmp    al,0x67
c001ee80:	0f 84 bf 01 00 00    	je     c001f045 <Vm::faultHandler(regs*)+0x2ae>
c001ee86:	3c 6c                	cmp    al,0x6c
c001ee88:	0f 84 3f 03 00 00    	je     c001f1cd <Vm::faultHandler(regs*)+0x436>
c001ee8e:	e9 d7 06 00 00       	jmp    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001ee93:	3c 6f                	cmp    al,0x6f
c001ee95:	0f 84 a4 04 00 00    	je     c001f33f <Vm::faultHandler(regs*)+0x5a8>
c001ee9b:	0f 82 11 04 00 00    	jb     c001f2b2 <Vm::faultHandler(regs*)+0x51b>
c001eea1:	3c 9c                	cmp    al,0x9c
c001eea3:	0f 84 ba 01 00 00    	je     c001f063 <Vm::faultHandler(regs*)+0x2cc>
c001eea9:	e9 bc 06 00 00       	jmp    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001eeae:	3c ec                	cmp    al,0xec
c001eeb0:	0f 84 24 06 00 00    	je     c001f4da <Vm::faultHandler(regs*)+0x743>
c001eeb6:	0f 87 93 00 00 00    	ja     c001ef4f <Vm::faultHandler(regs*)+0x1b8>
c001eebc:	3c e4                	cmp    al,0xe4
c001eebe:	0f 84 5c 05 00 00    	je     c001f420 <Vm::faultHandler(regs*)+0x689>
c001eec4:	77 6a                	ja     c001ef30 <Vm::faultHandler(regs*)+0x199>
c001eec6:	3c cd                	cmp    al,0xcd
c001eec8:	0f 84 7e 02 00 00    	je     c001f14c <Vm::faultHandler(regs*)+0x3b5>
c001eece:	3c cf                	cmp    al,0xcf
c001eed0:	0f 85 94 06 00 00    	jne    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	68 ce c5 02 c0       	push   0xc002c5ce
c001eede:	e8 17 40 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001eee3:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eee6:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eee9:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eeed:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eef0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eef4:	0d 00 02 02 00       	or     eax,0x20200
c001eef9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eefc:	56                   	push   esi
c001eefd:	53                   	push   ebx
c001eefe:	52                   	push   edx
c001eeff:	68 d4 c5 02 c0       	push   0xc002c5d4
c001ef04:	e8 f1 3f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ef09:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef13:	66 c1 e8 09          	shr    ax,0x9
c001ef17:	83 e0 01             	and    eax,0x1
c001ef1a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef1d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef20:	83 c0 06             	add    eax,0x6
c001ef23:	25 ff ff 00 00       	and    eax,0xffff
c001ef28:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef2b:	e9 95 02 00 00       	jmp    c001f1c5 <Vm::faultHandler(regs*)+0x42e>
c001ef30:	3c e6                	cmp    al,0xe6
c001ef32:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef36:	0f 84 4e 05 00 00    	je     c001f48a <Vm::faultHandler(regs*)+0x6f3>
c001ef3c:	0f 82 0a 05 00 00    	jb     c001f44c <Vm::faultHandler(regs*)+0x6b5>
c001ef42:	3c e7                	cmp    al,0xe7
c001ef44:	0f 84 69 05 00 00    	je     c001f4b3 <Vm::faultHandler(regs*)+0x71c>
c001ef4a:	e9 1b 06 00 00       	jmp    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001ef4f:	3c ef                	cmp    al,0xef
c001ef51:	0f 84 e6 05 00 00    	je     c001f53d <Vm::faultHandler(regs*)+0x7a6>
c001ef57:	77 37                	ja     c001ef90 <Vm::faultHandler(regs*)+0x1f9>
c001ef59:	3c ed                	cmp    al,0xed
c001ef5b:	0f 84 a3 05 00 00    	je     c001f504 <Vm::faultHandler(regs*)+0x76d>
c001ef61:	3c ee                	cmp    al,0xee
c001ef63:	0f 85 01 06 00 00    	jne    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001ef69:	52                   	push   edx
c001ef6a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef6d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef70:	68 6f c6 02 c0       	push   0xc002c66f
c001ef75:	e8 80 3f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001ef7a:	59                   	pop    ecx
c001ef7b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef7f:	5b                   	pop    ebx
c001ef80:	50                   	push   eax
c001ef81:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef85:	50                   	push   eax
c001ef86:	e8 2a fa ff ff       	call   c001e9b5 <Vm::outbv(unsigned short, unsigned char)>
c001ef8b:	e9 a5 05 00 00       	jmp    c001f535 <Vm::faultHandler(regs*)+0x79e>
c001ef90:	3c fa                	cmp    al,0xfa
c001ef92:	0f 84 f7 01 00 00    	je     c001f18f <Vm::faultHandler(regs*)+0x3f8>
c001ef98:	3c fb                	cmp    al,0xfb
c001ef9a:	0f 84 0a 02 00 00    	je     c001f1aa <Vm::faultHandler(regs*)+0x413>
c001efa0:	3c f3                	cmp    al,0xf3
c001efa2:	0f 85 c2 05 00 00    	jne    c001f56a <Vm::faultHandler(regs*)+0x7d3>
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	68 a7 c5 02 c0       	push   0xc002c5a7
c001efb0:	e8 45 3f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001efb5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efb8:	83 c4 10             	add    esp,0x10
c001efbb:	e9 84 fe ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001efc0:	83 ec 0c             	sub    esp,0xc
c001efc3:	b3 02                	mov    bl,0x2
c001efc5:	68 82 c5 02 c0       	push   0xc002c582
c001efca:	e8 2b 3f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001efcf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efd2:	83 c4 10             	add    esp,0x10
c001efd5:	e9 6a fe ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001efda:	83 ec 0c             	sub    esp,0xc
c001efdd:	b3 03                	mov    bl,0x3
c001efdf:	68 8e c5 02 c0       	push   0xc002c58e
c001efe4:	e8 11 3f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001efe9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efec:	83 c4 10             	add    esp,0x10
c001efef:	e9 50 fe ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001eff4:	83 ec 0c             	sub    esp,0xc
c001eff7:	b3 04                	mov    bl,0x4
c001eff9:	68 92 c5 02 c0       	push   0xc002c592
c001effe:	e8 f7 3e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f003:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f006:	83 c4 10             	add    esp,0x10
c001f009:	e9 36 fe ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001f00e:	83 ec 0c             	sub    esp,0xc
c001f011:	b3 05                	mov    bl,0x5
c001f013:	68 96 c5 02 c0       	push   0xc002c596
c001f018:	e8 dd 3e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f01d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f020:	83 c4 10             	add    esp,0x10
c001f023:	e9 1c fe ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	68 9a c5 02 c0       	push   0xc002c59a
c001f030:	e8 c5 3e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f035:	83 c4 10             	add    esp,0x10
c001f038:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f03b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f040:	e9 ff fd ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001f045:	50                   	push   eax
c001f046:	50                   	push   eax
c001f047:	6a 01                	push   0x1
c001f049:	68 9f c5 02 c0       	push   0xc002c59f
c001f04e:	e8 a7 3e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f059:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f05e:	e9 e1 fd ff ff       	jmp    c001ee44 <Vm::faultHandler(regs*)+0xad>
c001f063:	83 ec 0c             	sub    esp,0xc
c001f066:	68 ad c5 02 c0       	push   0xc002c5ad
c001f06b:	e8 8a 3e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f070:	83 c4 10             	add    esp,0x10
c001f073:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f076:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f07b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f07e:	74 2f                	je     c001f0af <Vm::faultHandler(regs*)+0x318>
c001f080:	83 ea 04             	sub    edx,0x4
c001f083:	25 ff 0d 00 00       	and    eax,0xdff
c001f088:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f08e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f091:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f094:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f09a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f09e:	0f 84 bf 04 00 00    	je     c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f0a4:	80 cc 02             	or     ah,0x2
c001f0a7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f0aa:	e9 b4 04 00 00       	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f0af:	83 ea 02             	sub    edx,0x2
c001f0b2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0b8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0bb:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0bf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0c5:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0c9:	74 05                	je     c001f0d0 <Vm::faultHandler(regs*)+0x339>
c001f0cb:	80 cc 02             	or     ah,0x2
c001f0ce:	eb 03                	jmp    c001f0d3 <Vm::faultHandler(regs*)+0x33c>
c001f0d0:	80 e4 fd             	and    ah,0xfd
c001f0d3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0d7:	e9 87 04 00 00       	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f0dc:	83 ec 0c             	sub    esp,0xc
c001f0df:	68 b4 c5 02 c0       	push   0xc002c5b4
c001f0e4:	e8 11 3e ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0f1:	74 28                	je     c001f11b <Vm::faultHandler(regs*)+0x384>
c001f0f3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0f5:	25 ff 0d 00 00       	and    eax,0xdff
c001f0fa:	0d 00 02 02 00       	or     eax,0x20200
c001f0ff:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f102:	8b 06                	mov    eax,DWORD PTR [esi]
c001f104:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f10a:	c1 e8 09             	shr    eax,0x9
c001f10d:	83 e0 01             	and    eax,0x1
c001f110:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f113:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f116:	83 c0 04             	add    eax,0x4
c001f119:	eb 24                	jmp    c001f13f <Vm::faultHandler(regs*)+0x3a8>
c001f11b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f11e:	0d 00 02 02 00       	or     eax,0x20200
c001f123:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f126:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f129:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f12f:	66 c1 e8 09          	shr    ax,0x9
c001f133:	83 e0 01             	and    eax,0x1
c001f136:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f139:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f13c:	83 c0 02             	add    eax,0x2
c001f13f:	25 ff ff 00 00       	and    eax,0xffff
c001f144:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f147:	e9 17 04 00 00       	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f14c:	53                   	push   ebx
c001f14d:	53                   	push   ebx
c001f14e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f152:	50                   	push   eax
c001f153:	68 ba c5 02 c0       	push   0xc002c5ba
c001f158:	e8 9d 3d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f15d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f161:	83 c4 10             	add    esp,0x10
c001f164:	3c ee                	cmp    al,0xee
c001f166:	75 10                	jne    c001f178 <Vm::faultHandler(regs*)+0x3e1>
c001f168:	83 ec 0c             	sub    esp,0xc
c001f16b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f16e:	e8 fa f8 ff ff       	call   c001ea6d <Vm::mainloop3(unsigned long)>
c001f173:	e9 c0 03 00 00       	jmp    c001f538 <Vm::faultHandler(regs*)+0x7a1>
c001f178:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	53                   	push   ebx
c001f180:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f184:	53                   	push   ebx
c001f185:	55                   	push   ebp
c001f186:	50                   	push   eax
c001f187:	57                   	push   edi
c001f188:	e8 0c fb ff ff       	call   c001ec99 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f18d:	eb 36                	jmp    c001f1c5 <Vm::faultHandler(regs*)+0x42e>
c001f18f:	83 ec 0c             	sub    esp,0xc
c001f192:	68 c4 c5 02 c0       	push   0xc002c5c4
c001f197:	e8 5e 3d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f19c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1a1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f1a5:	e9 8b 03 00 00       	jmp    c001f535 <Vm::faultHandler(regs*)+0x79e>
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	68 c9 c5 02 c0       	push   0xc002c5c9
c001f1b2:	e8 43 3d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f1b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1bc:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f1c0:	e9 70 03 00 00       	jmp    c001f535 <Vm::faultHandler(regs*)+0x79e>
c001f1c5:	83 c4 20             	add    esp,0x20
c001f1c8:	e9 99 03 00 00       	jmp    c001f566 <Vm::faultHandler(regs*)+0x7cf>
c001f1cd:	83 ec 0c             	sub    esp,0xc
c001f1d0:	68 07 c6 02 c0       	push   0xc002c607
c001f1d5:	e8 20 3d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f1da:	83 c4 10             	add    esp,0x10
c001f1dd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1e5:	74 0d                	je     c001f1f4 <Vm::faultHandler(regs*)+0x45d>
c001f1e7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1ee:	0f 87 9e 01 00 00    	ja     c001f392 <Vm::faultHandler(regs*)+0x5fb>
c001f1f4:	83 ec 0c             	sub    esp,0xc
c001f1f7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1fb:	0f b7 db             	movzx  ebx,bx
c001f1fe:	50                   	push   eax
c001f1ff:	e8 9e f7 ff ff       	call   c001e9a2 <Vm::inbv(unsigned short)>
c001f204:	83 c4 0c             	add    esp,0xc
c001f207:	0f b6 c0             	movzx  eax,al
c001f20a:	50                   	push   eax
c001f20b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f20f:	50                   	push   eax
c001f210:	53                   	push   ebx
c001f211:	e8 41 fb ff ff       	call   c001ed57 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f21c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f220:	74 03                	je     c001f225 <Vm::faultHandler(regs*)+0x48e>
c001f222:	48                   	dec    eax
c001f223:	eb 01                	jmp    c001f226 <Vm::faultHandler(regs*)+0x48f>
c001f225:	40                   	inc    eax
c001f226:	0f b7 c0             	movzx  eax,ax
c001f229:	eb 7f                	jmp    c001f2aa <Vm::faultHandler(regs*)+0x513>
c001f22b:	83 ec 0c             	sub    esp,0xc
c001f22e:	68 39 c6 02 c0       	push   0xc002c639
c001f233:	e8 c2 3c ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f238:	83 c4 10             	add    esp,0x10
c001f23b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f23e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f243:	74 0d                	je     c001f252 <Vm::faultHandler(regs*)+0x4bb>
c001f245:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f24c:	0f 87 40 01 00 00    	ja     c001f392 <Vm::faultHandler(regs*)+0x5fb>
c001f252:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f255:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f259:	0f b7 db             	movzx  ebx,bx
c001f25c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f261:	74 20                	je     c001f283 <Vm::faultHandler(regs*)+0x4ec>
c001f263:	ed                   	in     eax,dx
c001f264:	51                   	push   ecx
c001f265:	50                   	push   eax
c001f266:	56                   	push   esi
c001f267:	53                   	push   ebx
c001f268:	e8 15 fb ff ff       	call   c001ed82 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f26d:	83 c4 10             	add    esp,0x10
c001f270:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f273:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f277:	74 05                	je     c001f27e <Vm::faultHandler(regs*)+0x4e7>
c001f279:	83 e8 04             	sub    eax,0x4
c001f27c:	eb 27                	jmp    c001f2a5 <Vm::faultHandler(regs*)+0x50e>
c001f27e:	83 c0 04             	add    eax,0x4
c001f281:	eb 22                	jmp    c001f2a5 <Vm::faultHandler(regs*)+0x50e>
c001f283:	66 ed                	in     ax,dx
c001f285:	0f b7 c0             	movzx  eax,ax
c001f288:	52                   	push   edx
c001f289:	50                   	push   eax
c001f28a:	56                   	push   esi
c001f28b:	53                   	push   ebx
c001f28c:	e8 db fa ff ff       	call   c001ed6c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f291:	83 c4 10             	add    esp,0x10
c001f294:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f297:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f29b:	74 05                	je     c001f2a2 <Vm::faultHandler(regs*)+0x50b>
c001f29d:	83 e8 02             	sub    eax,0x2
c001f2a0:	eb 03                	jmp    c001f2a5 <Vm::faultHandler(regs*)+0x50e>
c001f2a2:	83 c0 02             	add    eax,0x2
c001f2a5:	25 ff ff 00 00       	and    eax,0xffff
c001f2aa:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2ad:	e9 b1 02 00 00       	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f2b2:	83 ec 0c             	sub    esp,0xc
c001f2b5:	4b                   	dec    ebx
c001f2b6:	68 3f c6 02 c0       	push   0xc002c63f
c001f2bb:	e8 3a 3c ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f2c0:	83 c4 10             	add    esp,0x10
c001f2c3:	80 fb 05             	cmp    bl,0x5
c001f2c6:	77 0a                	ja     c001f2d2 <Vm::faultHandler(regs*)+0x53b>
c001f2c8:	0f b6 db             	movzx  ebx,bl
c001f2cb:	ff 24 9d b0 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3950]
c001f2d2:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2d6:	eb 1b                	jmp    c001f2f3 <Vm::faultHandler(regs*)+0x55c>
c001f2d8:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2dc:	eb 15                	jmp    c001f2f3 <Vm::faultHandler(regs*)+0x55c>
c001f2de:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2e2:	eb 0f                	jmp    c001f2f3 <Vm::faultHandler(regs*)+0x55c>
c001f2e4:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2e8:	eb 09                	jmp    c001f2f3 <Vm::faultHandler(regs*)+0x55c>
c001f2ea:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2ed:	eb 04                	jmp    c001f2f3 <Vm::faultHandler(regs*)+0x55c>
c001f2ef:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2f3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f8:	74 0d                	je     c001f307 <Vm::faultHandler(regs*)+0x570>
c001f2fa:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f301:	0f 87 8b 00 00 00    	ja     c001f392 <Vm::faultHandler(regs*)+0x5fb>
c001f307:	53                   	push   ebx
c001f308:	53                   	push   ebx
c001f309:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f30d:	52                   	push   edx
c001f30e:	50                   	push   eax
c001f30f:	e8 0f fa ff ff       	call   c001ed23 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f314:	5e                   	pop    esi
c001f315:	0f b6 c0             	movzx  eax,al
c001f318:	5d                   	pop    ebp
c001f319:	50                   	push   eax
c001f31a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f31e:	50                   	push   eax
c001f31f:	e8 91 f6 ff ff       	call   c001e9b5 <Vm::outbv(unsigned short, unsigned char)>
c001f324:	83 c4 10             	add    esp,0x10
c001f327:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f32a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f32e:	74 03                	je     c001f333 <Vm::faultHandler(regs*)+0x59c>
c001f330:	48                   	dec    eax
c001f331:	eb 01                	jmp    c001f334 <Vm::faultHandler(regs*)+0x59d>
c001f333:	40                   	inc    eax
c001f334:	0f b7 c0             	movzx  eax,ax
c001f337:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f33a:	e9 24 02 00 00       	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f33f:	83 ec 0c             	sub    esp,0xc
c001f342:	4b                   	dec    ebx
c001f343:	68 3f c6 02 c0       	push   0xc002c63f
c001f348:	e8 ad 3b ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f34d:	83 c4 10             	add    esp,0x10
c001f350:	80 fb 05             	cmp    bl,0x5
c001f353:	77 0a                	ja     c001f35f <Vm::faultHandler(regs*)+0x5c8>
c001f355:	0f b6 db             	movzx  ebx,bl
c001f358:	ff 24 9d c8 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3938]
c001f35f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f363:	eb 1b                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e9>
c001f365:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f369:	eb 15                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e9>
c001f36b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f36f:	eb 0f                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e9>
c001f371:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f375:	eb 09                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e9>
c001f377:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f37a:	eb 04                	jmp    c001f380 <Vm::faultHandler(regs*)+0x5e9>
c001f37c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f380:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f383:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f388:	74 39                	je     c001f3c3 <Vm::faultHandler(regs*)+0x62c>
c001f38a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f390:	76 31                	jbe    c001f3c3 <Vm::faultHandler(regs*)+0x62c>
c001f392:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f396:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f39a:	51                   	push   ecx
c001f39b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f39f:	51                   	push   ecx
c001f3a0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f3a4:	51                   	push   ecx
c001f3a5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f3a9:	51                   	push   ecx
c001f3aa:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3ae:	52                   	push   edx
c001f3af:	50                   	push   eax
c001f3b0:	50                   	push   eax
c001f3b1:	68 0c c6 02 c0       	push   0xc002c60c
c001f3b6:	e8 3f 3b ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f3bb:	83 c4 20             	add    esp,0x20
c001f3be:	e9 fb 01 00 00       	jmp    c001f5be <Vm::faultHandler(regs*)+0x827>
c001f3c3:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f3c6:	0f b7 d3             	movzx  edx,bx
c001f3c9:	81 e6 00 04 00 00    	and    esi,0x400
c001f3cf:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f3d2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3d7:	74 1d                	je     c001f3f6 <Vm::faultHandler(regs*)+0x65f>
c001f3d9:	51                   	push   ecx
c001f3da:	51                   	push   ecx
c001f3db:	52                   	push   edx
c001f3dc:	50                   	push   eax
c001f3dd:	e8 64 f9 ff ff       	call   c001ed46 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f3e2:	83 c4 10             	add    esp,0x10
c001f3e5:	89 ea                	mov    edx,ebp
c001f3e7:	ef                   	out    dx,eax
c001f3e8:	85 f6                	test   esi,esi
c001f3ea:	74 05                	je     c001f3f1 <Vm::faultHandler(regs*)+0x65a>
c001f3ec:	83 eb 04             	sub    ebx,0x4
c001f3ef:	eb 21                	jmp    c001f412 <Vm::faultHandler(regs*)+0x67b>
c001f3f1:	83 c3 04             	add    ebx,0x4
c001f3f4:	eb 1c                	jmp    c001f412 <Vm::faultHandler(regs*)+0x67b>
c001f3f6:	51                   	push   ecx
c001f3f7:	51                   	push   ecx
c001f3f8:	52                   	push   edx
c001f3f9:	50                   	push   eax
c001f3fa:	e8 35 f9 ff ff       	call   c001ed34 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f3ff:	83 c4 10             	add    esp,0x10
c001f402:	89 ea                	mov    edx,ebp
c001f404:	66 ef                	out    dx,ax
c001f406:	85 f6                	test   esi,esi
c001f408:	74 05                	je     c001f40f <Vm::faultHandler(regs*)+0x678>
c001f40a:	83 eb 02             	sub    ebx,0x2
c001f40d:	eb 03                	jmp    c001f412 <Vm::faultHandler(regs*)+0x67b>
c001f40f:	83 c3 02             	add    ebx,0x2
c001f412:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f418:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f41b:	e9 43 01 00 00       	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f420:	53                   	push   ebx
c001f421:	53                   	push   ebx
c001f422:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f426:	50                   	push   eax
c001f427:	68 45 c6 02 c0       	push   0xc002c645
c001f42c:	e8 c9 3a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f431:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f438:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f43c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f43f:	e8 5e f5 ff ff       	call   c001e9a2 <Vm::inbv(unsigned short)>
c001f444:	0f b6 c0             	movzx  eax,al
c001f447:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f44a:	eb 5e                	jmp    c001f4aa <Vm::faultHandler(regs*)+0x713>
c001f44c:	51                   	push   ecx
c001f44d:	51                   	push   ecx
c001f44e:	53                   	push   ebx
c001f44f:	68 4b c6 02 c0       	push   0xc002c64b
c001f454:	e8 a1 3a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f459:	83 c4 10             	add    esp,0x10
c001f45c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f461:	74 07                	je     c001f46a <Vm::faultHandler(regs*)+0x6d3>
c001f463:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f467:	ed                   	in     eax,dx
c001f468:	eb 14                	jmp    c001f47e <Vm::faultHandler(regs*)+0x6e7>
c001f46a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f46d:	66 31 db             	xor    bx,bx
c001f470:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f473:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f477:	66 ed                	in     ax,dx
c001f479:	0f b7 c0             	movzx  eax,ax
c001f47c:	09 d8                	or     eax,ebx
c001f47e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f481:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f485:	e9 dc 00 00 00       	jmp    c001f566 <Vm::faultHandler(regs*)+0x7cf>
c001f48a:	50                   	push   eax
c001f48b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f48e:	53                   	push   ebx
c001f48f:	68 51 c6 02 c0       	push   0xc002c651
c001f494:	e8 61 3a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f499:	58                   	pop    eax
c001f49a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f49e:	5a                   	pop    edx
c001f49f:	50                   	push   eax
c001f4a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4a4:	50                   	push   eax
c001f4a5:	e8 0b f5 ff ff       	call   c001e9b5 <Vm::outbv(unsigned short, unsigned char)>
c001f4aa:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4ae:	e9 85 00 00 00       	jmp    c001f538 <Vm::faultHandler(regs*)+0x7a1>
c001f4b3:	50                   	push   eax
c001f4b4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4b7:	53                   	push   ebx
c001f4b8:	68 5a c6 02 c0       	push   0xc002c65a
c001f4bd:	e8 38 3a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f4c2:	83 c4 10             	add    esp,0x10
c001f4c5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4c9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ce:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4d1:	74 03                	je     c001f4d6 <Vm::faultHandler(regs*)+0x73f>
c001f4d3:	ef                   	out    dx,eax
c001f4d4:	eb ab                	jmp    c001f481 <Vm::faultHandler(regs*)+0x6ea>
c001f4d6:	66 ef                	out    dx,ax
c001f4d8:	eb a7                	jmp    c001f481 <Vm::faultHandler(regs*)+0x6ea>
c001f4da:	55                   	push   ebp
c001f4db:	55                   	push   ebp
c001f4dc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4df:	68 63 c6 02 c0       	push   0xc002c663
c001f4e4:	e8 11 3a ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f4e9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4f0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f4f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4f7:	e8 a6 f4 ff ff       	call   c001e9a2 <Vm::inbv(unsigned short)>
c001f4fc:	0f b6 c0             	movzx  eax,al
c001f4ff:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f502:	eb 31                	jmp    c001f535 <Vm::faultHandler(regs*)+0x79e>
c001f504:	56                   	push   esi
c001f505:	56                   	push   esi
c001f506:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f509:	68 69 c6 02 c0       	push   0xc002c669
c001f50e:	e8 e7 39 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f513:	83 c4 10             	add    esp,0x10
c001f516:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f519:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f51e:	74 03                	je     c001f523 <Vm::faultHandler(regs*)+0x78c>
c001f520:	ed                   	in     eax,dx
c001f521:	eb 0d                	jmp    c001f530 <Vm::faultHandler(regs*)+0x799>
c001f523:	66 ed                	in     ax,dx
c001f525:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f528:	0f b7 c0             	movzx  eax,ax
c001f52b:	66 31 d2             	xor    dx,dx
c001f52e:	09 d0                	or     eax,edx
c001f530:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f533:	eb 2e                	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f535:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f538:	83 c4 10             	add    esp,0x10
c001f53b:	eb 29                	jmp    c001f566 <Vm::faultHandler(regs*)+0x7cf>
c001f53d:	50                   	push   eax
c001f53e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f541:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f544:	68 78 c6 02 c0       	push   0xc002c678
c001f549:	e8 ac 39 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f54e:	83 c4 10             	add    esp,0x10
c001f551:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f554:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f559:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f55c:	74 03                	je     c001f561 <Vm::faultHandler(regs*)+0x7ca>
c001f55e:	ef                   	out    dx,eax
c001f55f:	eb 02                	jmp    c001f563 <Vm::faultHandler(regs*)+0x7cc>
c001f561:	66 ef                	out    dx,ax
c001f563:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f566:	b0 01                	mov    al,0x1
c001f568:	eb 56                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x829>
c001f56a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f56e:	51                   	push   ecx
c001f56f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f573:	51                   	push   ecx
c001f574:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f578:	51                   	push   ecx
c001f579:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f57d:	51                   	push   ecx
c001f57e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f582:	52                   	push   edx
c001f583:	50                   	push   eax
c001f584:	50                   	push   eax
c001f585:	68 81 c6 02 c0       	push   0xc002c681
c001f58a:	e8 6b 39 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c001f58f:	83 c4 20             	add    esp,0x20
c001f592:	83 ec 0c             	sub    esp,0xc
c001f595:	6a 60                	push   0x60
c001f597:	e8 06 f4 ff ff       	call   c001e9a2 <Vm::inbv(unsigned short)>
c001f59c:	83 c4 10             	add    esp,0x10
c001f59f:	3c 1c                	cmp    al,0x1c
c001f5a1:	74 04                	je     c001f5a7 <Vm::faultHandler(regs*)+0x810>
c001f5a3:	3c 5a                	cmp    al,0x5a
c001f5a5:	75 eb                	jne    c001f592 <Vm::faultHandler(regs*)+0x7fb>
c001f5a7:	3c 1c                	cmp    al,0x1c
c001f5a9:	74 04                	je     c001f5af <Vm::faultHandler(regs*)+0x818>
c001f5ab:	3c 5a                	cmp    al,0x5a
c001f5ad:	75 0f                	jne    c001f5be <Vm::faultHandler(regs*)+0x827>
c001f5af:	83 ec 0c             	sub    esp,0xc
c001f5b2:	6a 60                	push   0x60
c001f5b4:	e8 e9 f3 ff ff       	call   c001e9a2 <Vm::inbv(unsigned short)>
c001f5b9:	83 c4 10             	add    esp,0x10
c001f5bc:	eb e9                	jmp    c001f5a7 <Vm::faultHandler(regs*)+0x810>
c001f5be:	31 c0                	xor    eax,eax
c001f5c0:	83 c4 1c             	add    esp,0x1c
c001f5c3:	5b                   	pop    ebx
c001f5c4:	5e                   	pop    esi
c001f5c5:	5f                   	pop    edi
c001f5c6:	5d                   	pop    ebp
c001f5c7:	c3                   	ret    

c001f5c8 <Vm::fpuInternalTo32(unsigned long long)>:
c001f5c8:	57                   	push   edi
c001f5c9:	56                   	push   esi
c001f5ca:	53                   	push   ebx
c001f5cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d3:	89 d6                	mov    esi,edx
c001f5d5:	89 d7                	mov    edi,edx
c001f5d7:	89 c1                	mov    ecx,eax
c001f5d9:	c1 ef 14             	shr    edi,0x14
c001f5dc:	89 d3                	mov    ebx,edx
c001f5de:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f5e4:	31 d2                	xor    edx,edx
c001f5e6:	89 f8                	mov    eax,edi
c001f5e8:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f5ee:	bf ff 00 00 00       	mov    edi,0xff
c001f5f3:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f5f8:	83 d2 ff             	adc    edx,0xffffffff
c001f5fb:	39 c7                	cmp    edi,eax
c001f5fd:	bf 00 00 00 00       	mov    edi,0x0
c001f602:	19 d7                	sbb    edi,edx
c001f604:	72 15                	jb     c001f61b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f606:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f60a:	c1 e0 17             	shl    eax,0x17
c001f60d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f613:	09 f1                	or     ecx,esi
c001f615:	09 c1                	or     ecx,eax
c001f617:	89 cf                	mov    edi,ecx
c001f619:	eb 02                	jmp    c001f61d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f61b:	31 ff                	xor    edi,edi
c001f61d:	89 f8                	mov    eax,edi
c001f61f:	5b                   	pop    ebx
c001f620:	5e                   	pop    esi
c001f621:	5f                   	pop    edi
c001f622:	c3                   	ret    

c001f623 <Vm::fpuInternalTo64(unsigned long long)>:
c001f623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f627:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f62b:	c3                   	ret    

c001f62c <Vm::fpu32ToInternal(unsigned int)>:
c001f62c:	57                   	push   edi
c001f62d:	31 ff                	xor    edi,edi
c001f62f:	56                   	push   esi
c001f630:	53                   	push   ebx
c001f631:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f635:	89 cb                	mov    ebx,ecx
c001f637:	89 ce                	mov    esi,ecx
c001f639:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f63f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f645:	c1 e9 17             	shr    ecx,0x17
c001f648:	89 f0                	mov    eax,esi
c001f64a:	0f b6 d1             	movzx  edx,cl
c001f64d:	81 c2 80 03 00 00    	add    edx,0x380
c001f653:	89 d1                	mov    ecx,edx
c001f655:	89 fa                	mov    edx,edi
c001f657:	c1 e1 14             	shl    ecx,0x14
c001f65a:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f65e:	c1 e0 1d             	shl    eax,0x1d
c001f661:	89 d7                	mov    edi,edx
c001f663:	89 c6                	mov    esi,eax
c001f665:	89 ca                	mov    edx,ecx
c001f667:	89 f0                	mov    eax,esi
c001f669:	09 fa                	or     edx,edi
c001f66b:	09 da                	or     edx,ebx
c001f66d:	5b                   	pop    ebx
c001f66e:	5e                   	pop    esi
c001f66f:	5f                   	pop    edi
c001f670:	c3                   	ret    

c001f671 <Vm::fpu64ToInternal(unsigned long long)>:
c001f671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f675:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f679:	c3                   	ret    

c001f67a <Vm::fpuFloatToLong(unsigned long long)>:
c001f67a:	57                   	push   edi
c001f67b:	31 c0                	xor    eax,eax
c001f67d:	56                   	push   esi
c001f67e:	31 d2                	xor    edx,edx
c001f680:	53                   	push   ebx
c001f681:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f689:	89 d9                	mov    ecx,ebx
c001f68b:	c1 e9 14             	shr    ecx,0x14
c001f68e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f694:	89 cf                	mov    edi,ecx
c001f696:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f69c:	78 33                	js     c001f6d1 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f69e:	89 d9                	mov    ecx,ebx
c001f6a0:	89 f0                	mov    eax,esi
c001f6a2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6a8:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6ae:	89 ca                	mov    edx,ecx
c001f6b0:	b9 34 00 00 00       	mov    ecx,0x34
c001f6b5:	29 f9                	sub    ecx,edi
c001f6b7:	0f ad d0             	shrd   eax,edx,cl
c001f6ba:	d3 fa                	sar    edx,cl
c001f6bc:	f6 c1 20             	test   cl,0x20
c001f6bf:	74 05                	je     c001f6c6 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f6c1:	89 d0                	mov    eax,edx
c001f6c3:	c1 fa 1f             	sar    edx,0x1f
c001f6c6:	85 db                	test   ebx,ebx
c001f6c8:	79 07                	jns    c001f6d1 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6ca:	f7 d8                	neg    eax
c001f6cc:	83 d2 00             	adc    edx,0x0
c001f6cf:	f7 da                	neg    edx
c001f6d1:	5b                   	pop    ebx
c001f6d2:	5e                   	pop    esi
c001f6d3:	5f                   	pop    edi
c001f6d4:	c3                   	ret    

c001f6d5 <Vm::fpuULongToFloat(unsigned long long)>:
c001f6d5:	57                   	push   edi
c001f6d6:	31 c9                	xor    ecx,ecx
c001f6d8:	56                   	push   esi
c001f6d9:	53                   	push   ebx
c001f6da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f6e2:	0f ba e7 14          	bt     edi,0x14
c001f6e6:	72 07                	jb     c001f6ef <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f6e8:	01 f6                	add    esi,esi
c001f6ea:	11 ff                	adc    edi,edi
c001f6ec:	41                   	inc    ecx
c001f6ed:	eb f3                	jmp    c001f6e2 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f6ef:	89 fa                	mov    edx,edi
c001f6f1:	89 f0                	mov    eax,esi
c001f6f3:	bb 33 04 00 00       	mov    ebx,0x433
c001f6f8:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f6fe:	29 cb                	sub    ebx,ecx
c001f700:	89 d9                	mov    ecx,ebx
c001f702:	5b                   	pop    ebx
c001f703:	c1 e1 14             	shl    ecx,0x14
c001f706:	5e                   	pop    esi
c001f707:	09 ca                	or     edx,ecx
c001f709:	5f                   	pop    edi
c001f70a:	c3                   	ret    

c001f70b <Vm::fpuLongToFloat(long long)>:
c001f70b:	56                   	push   esi
c001f70c:	31 c0                	xor    eax,eax
c001f70e:	53                   	push   ebx
c001f70f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f717:	39 c8                	cmp    eax,ecx
c001f719:	19 d8                	sbb    eax,ebx
c001f71b:	7d 04                	jge    c001f721 <Vm::fpuLongToFloat(long long)+0x16>
c001f71d:	31 f6                	xor    esi,esi
c001f71f:	eb 0c                	jmp    c001f72d <Vm::fpuLongToFloat(long long)+0x22>
c001f721:	f7 d9                	neg    ecx
c001f723:	be 01 00 00 00       	mov    esi,0x1
c001f728:	83 d3 00             	adc    ebx,0x0
c001f72b:	f7 db                	neg    ebx
c001f72d:	31 c0                	xor    eax,eax
c001f72f:	0f ba e3 14          	bt     ebx,0x14
c001f733:	72 07                	jb     c001f73c <Vm::fpuLongToFloat(long long)+0x31>
c001f735:	01 c9                	add    ecx,ecx
c001f737:	11 db                	adc    ebx,ebx
c001f739:	40                   	inc    eax
c001f73a:	eb f3                	jmp    c001f72f <Vm::fpuLongToFloat(long long)+0x24>
c001f73c:	ba 33 04 00 00       	mov    edx,0x433
c001f741:	29 c2                	sub    edx,eax
c001f743:	89 c8                	mov    eax,ecx
c001f745:	c1 e2 14             	shl    edx,0x14
c001f748:	89 d9                	mov    ecx,ebx
c001f74a:	89 f3                	mov    ebx,esi
c001f74c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f752:	09 ca                	or     edx,ecx
c001f754:	84 db                	test   bl,bl
c001f756:	74 06                	je     c001f75e <Vm::fpuLongToFloat(long long)+0x53>
c001f758:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f75e:	5b                   	pop    ebx
c001f75f:	5e                   	pop    esi
c001f760:	c3                   	ret    

c001f761 <Vm::fpuGet0()>:
c001f761:	31 c0                	xor    eax,eax
c001f763:	31 d2                	xor    edx,edx
c001f765:	c3                   	ret    

c001f766 <Vm::fpuGet1()>:
c001f766:	b8 01 00 00 00       	mov    eax,0x1
c001f76b:	31 d2                	xor    edx,edx
c001f76d:	c3                   	ret    

c001f76e <Vm::fpuGetPi()>:
c001f76e:	b8 03 00 00 00       	mov    eax,0x3
c001f773:	31 d2                	xor    edx,edx
c001f775:	c3                   	ret    

c001f776 <Vm::fpuGetLog2E()>:
c001f776:	83 ec 18             	sub    esp,0x18
c001f779:	68 e0 c6 02 c0       	push   0xc002c6e0
c001f77e:	e8 28 ae ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001f783:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f788:	31 d2                	xor    edx,edx
c001f78a:	83 c4 1c             	add    esp,0x1c
c001f78d:	c3                   	ret    

c001f78e <Vm::fpuGetLogE2()>:
c001f78e:	83 ec 18             	sub    esp,0x18
c001f791:	68 ec c6 02 c0       	push   0xc002c6ec
c001f796:	e8 10 ae ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001f79b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7a0:	31 d2                	xor    edx,edx
c001f7a2:	83 c4 1c             	add    esp,0x1c
c001f7a5:	c3                   	ret    

c001f7a6 <Vm::fpuGetLog210()>:
c001f7a6:	83 ec 18             	sub    esp,0x18
c001f7a9:	68 f8 c6 02 c0       	push   0xc002c6f8
c001f7ae:	e8 f8 ad ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001f7b3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7b8:	31 d2                	xor    edx,edx
c001f7ba:	83 c4 1c             	add    esp,0x1c
c001f7bd:	c3                   	ret    

c001f7be <Vm::fpuGetLog102()>:
c001f7be:	83 ec 18             	sub    esp,0x18
c001f7c1:	68 05 c7 02 c0       	push   0xc002c705
c001f7c6:	e8 e0 ad ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001f7cb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7d0:	31 d2                	xor    edx,edx
c001f7d2:	83 c4 1c             	add    esp,0x1c
c001f7d5:	c3                   	ret    

c001f7d6 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f7d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7da:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f7de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7e2:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f7e6:	0f 92 c0             	setb   al
c001f7e9:	c3                   	ret    

c001f7ea <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f7ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f2:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f7f6:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f7fa:	09 c2                	or     edx,eax
c001f7fc:	0f 94 c0             	sete   al
c001f7ff:	c3                   	ret    

c001f800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f800:	57                   	push   edi
c001f801:	56                   	push   esi
c001f802:	53                   	push   ebx
c001f803:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f807:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f80b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f80f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f813:	57                   	push   edi
c001f814:	56                   	push   esi
c001f815:	53                   	push   ebx
c001f816:	51                   	push   ecx
c001f817:	e8 ce ff ff ff       	call   c001f7ea <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f81c:	83 c4 10             	add    esp,0x10
c001f81f:	88 c2                	mov    dl,al
c001f821:	31 c0                	xor    eax,eax
c001f823:	84 d2                	test   dl,dl
c001f825:	75 0c                	jne    c001f833 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f827:	57                   	push   edi
c001f828:	56                   	push   esi
c001f829:	53                   	push   ebx
c001f82a:	51                   	push   ecx
c001f82b:	e8 a6 ff ff ff       	call   c001f7d6 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f830:	83 c4 10             	add    esp,0x10
c001f833:	83 e0 01             	and    eax,0x1
c001f836:	5b                   	pop    ebx
c001f837:	88 c1                	mov    cl,al
c001f839:	83 e2 01             	and    edx,0x1
c001f83c:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f841:	c1 e2 06             	shl    edx,0x6
c001f844:	83 e0 ba             	and    eax,0xffffffba
c001f847:	5e                   	pop    esi
c001f848:	09 c8                	or     eax,ecx
c001f84a:	5f                   	pop    edi
c001f84b:	09 d0                	or     eax,edx
c001f84d:	a2 61 19 03 c0       	mov    ds:0xc0031961,al
c001f852:	c3                   	ret    

c001f853 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f857:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f85b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f85f:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f863:	c3                   	ret    

c001f864 <Vm::fpuAbs(unsigned long long)>:
c001f864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f868:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f86c:	c3                   	ret    

c001f86d <Vm::fpuChs(unsigned long long)>:
c001f86d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f871:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f875:	f7 d8                	neg    eax
c001f877:	83 d2 00             	adc    edx,0x0
c001f87a:	f7 da                	neg    edx
c001f87c:	c3                   	ret    

c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f87d:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f881:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f886:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f88a:	eb c7                	jmp    c001f853 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f88c <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f88c:	53                   	push   ebx
c001f88d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f891:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f895:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f899:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f89d:	0f af ca             	imul   ecx,edx
c001f8a0:	0f af d8             	imul   ebx,eax
c001f8a3:	f7 e2                	mul    edx
c001f8a5:	01 d9                	add    ecx,ebx
c001f8a7:	5b                   	pop    ebx
c001f8a8:	01 ca                	add    edx,ecx
c001f8aa:	c3                   	ret    

c001f8ab <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8ab:	83 ec 0c             	sub    esp,0xc
c001f8ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8be:	e8 99 70 00 00       	call   c002695c <__udivdi3>
c001f8c3:	83 c4 1c             	add    esp,0x1c
c001f8c6:	c3                   	ret    

c001f8c7 <Vm::fpuSquare(unsigned long long)>:
c001f8c7:	50                   	push   eax
c001f8c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8d0:	52                   	push   edx
c001f8d1:	50                   	push   eax
c001f8d2:	52                   	push   edx
c001f8d3:	50                   	push   eax
c001f8d4:	e8 b3 ff ff ff       	call   c001f88c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8d9:	83 c4 14             	add    esp,0x14
c001f8dc:	c3                   	ret    

c001f8dd <Vm::fpuGetReg(int)>:
c001f8dd:	83 ec 0c             	sub    esp,0xc
c001f8e0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8e5:	76 10                	jbe    c001f8f7 <Vm::fpuGetReg(int)+0x1a>
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	68 12 c7 02 c0       	push   0xc002c712
c001f8ef:	e8 b7 ac ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001f8f4:	83 c4 10             	add    esp,0x10
c001f8f7:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f8fc:	b9 08 00 00 00       	mov    ecx,0x8
c001f901:	c0 e8 03             	shr    al,0x3
c001f904:	83 e0 07             	and    eax,0x7
c001f907:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f90b:	99                   	cdq    
c001f90c:	f7 f9                	idiv   ecx
c001f90e:	8b 04 d5 64 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce69c]
c001f915:	8b 14 d5 68 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce698]
c001f91c:	83 c4 0c             	add    esp,0xc
c001f91f:	c3                   	ret    

c001f920 <Vm::fpuSetReg(int, unsigned long long)>:
c001f920:	57                   	push   edi
c001f921:	56                   	push   esi
c001f922:	52                   	push   edx
c001f923:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f92b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f930:	76 10                	jbe    c001f942 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f932:	83 ec 0c             	sub    esp,0xc
c001f935:	68 25 c7 02 c0       	push   0xc002c725
c001f93a:	e8 6c ac ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c001f93f:	83 c4 10             	add    esp,0x10
c001f942:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f947:	b9 08 00 00 00       	mov    ecx,0x8
c001f94c:	c0 e8 03             	shr    al,0x3
c001f94f:	83 e0 07             	and    eax,0x7
c001f952:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f956:	99                   	cdq    
c001f957:	f7 f9                	idiv   ecx
c001f959:	89 34 d5 64 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce69c],esi
c001f960:	89 3c d5 68 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce698],edi
c001f967:	58                   	pop    eax
c001f968:	5e                   	pop    esi
c001f969:	5f                   	pop    edi
c001f96a:	c3                   	ret    

c001f96b <Vm::fpuPush(unsigned long long)>:
c001f96b:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f970:	c0 e8 03             	shr    al,0x3
c001f973:	83 e0 07             	and    eax,0x7
c001f976:	83 c0 07             	add    eax,0x7
c001f979:	88 c2                	mov    dl,al
c001f97b:	83 e0 07             	and    eax,0x7
c001f97e:	83 e2 07             	and    edx,0x7
c001f981:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f988:	8a 15 61 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031961
c001f98e:	83 e2 c7             	and    edx,0xffffffc7
c001f991:	09 ca                	or     edx,ecx
c001f993:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f997:	88 15 61 19 03 c0    	mov    BYTE PTR ds:0xc0031961,dl
c001f99d:	89 0c c5 68 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce698],ecx
c001f9a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9a8:	89 14 c5 64 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce69c],edx
c001f9af:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c001f9b4:	83 f8 08             	cmp    eax,0x8
c001f9b7:	75 08                	jne    c001f9c1 <Vm::fpuPush(unsigned long long)+0x56>
c001f9b9:	80 0d 60 19 03 c0 40 	or     BYTE PTR ds:0xc0031960,0x40
c001f9c0:	c3                   	ret    
c001f9c1:	40                   	inc    eax
c001f9c2:	a3 a4 19 03 c0       	mov    ds:0xc00319a4,eax
c001f9c7:	c3                   	ret    

c001f9c8 <Vm::fpuPop()>:
c001f9c8:	8a 0d 61 19 03 c0    	mov    cl,BYTE PTR ds:0xc0031961
c001f9ce:	53                   	push   ebx
c001f9cf:	c0 e9 03             	shr    cl,0x3
c001f9d2:	8a 1d 61 19 03 c0    	mov    bl,BYTE PTR ds:0xc0031961
c001f9d8:	83 e1 07             	and    ecx,0x7
c001f9db:	83 e3 c7             	and    ebx,0xffffffc7
c001f9de:	8b 04 cd 64 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce69c]
c001f9e5:	8b 14 cd 68 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce698]
c001f9ec:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f9f3:	83 e1 38             	and    ecx,0x38
c001f9f6:	09 d9                	or     ecx,ebx
c001f9f8:	88 0d 61 19 03 c0    	mov    BYTE PTR ds:0xc0031961,cl
c001f9fe:	8b 0d a4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319a4
c001fa04:	85 c9                	test   ecx,ecx
c001fa06:	74 09                	je     c001fa11 <Vm::fpuPop()+0x49>
c001fa08:	49                   	dec    ecx
c001fa09:	89 0d a4 19 03 c0    	mov    DWORD PTR ds:0xc00319a4,ecx
c001fa0f:	eb 07                	jmp    c001fa18 <Vm::fpuPop()+0x50>
c001fa11:	80 0d 60 19 03 c0 40 	or     BYTE PTR ds:0xc0031960,0x40
c001fa18:	5b                   	pop    ebx
c001fa19:	c3                   	ret    

c001fa1a <Vm::x87Handler(regs*)>:
c001fa1a:	55                   	push   ebp
c001fa1b:	57                   	push   edi
c001fa1c:	56                   	push   esi
c001fa1d:	53                   	push   ebx
c001fa1e:	83 ec 1c             	sub    esp,0x1c
c001fa21:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa25:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa2a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa2d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa35:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa39:	50                   	push   eax
c001fa3a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa3e:	50                   	push   eax
c001fa3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa43:	50                   	push   eax
c001fa44:	53                   	push   ebx
c001fa45:	e8 28 a2 ff ff       	call   c0019c72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa4a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	89 c6                	mov    esi,eax
c001fa52:	80 fa d9             	cmp    dl,0xd9
c001fa55:	0f 85 52 01 00 00    	jne    c001fbad <Vm::x87Handler(regs*)+0x193>
c001fa5b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa5f:	8d 50 20             	lea    edx,[eax+0x20]
c001fa62:	80 fa 0e             	cmp    dl,0xe
c001fa65:	0f 87 86 00 00 00    	ja     c001faf1 <Vm::x87Handler(regs*)+0xd7>
c001fa6b:	0f b6 d2             	movzx  edx,dl
c001fa6e:	ff 24 95 38 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38c8]
c001fa75:	e8 e7 fc ff ff       	call   c001f761 <Vm::fpuGet0()>
c001fa7a:	eb 05                	jmp    c001fa81 <Vm::x87Handler(regs*)+0x67>
c001fa7c:	e8 e5 fc ff ff       	call   c001f766 <Vm::fpuGet1()>
c001fa81:	57                   	push   edi
c001fa82:	57                   	push   edi
c001fa83:	52                   	push   edx
c001fa84:	50                   	push   eax
c001fa85:	e8 e1 fe ff ff       	call   c001f96b <Vm::fpuPush(unsigned long long)>
c001fa8a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa8e:	83 c4 10             	add    esp,0x10
c001fa91:	b0 01                	mov    al,0x1
c001fa93:	e9 e3 09 00 00       	jmp    c002047b <Vm::x87Handler(regs*)+0xa61>
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	6a 00                	push   0x0
c001fa9d:	e8 3b fe ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001faa2:	59                   	pop    ecx
c001faa3:	5e                   	pop    esi
c001faa4:	52                   	push   edx
c001faa5:	50                   	push   eax
c001faa6:	e8 c2 fd ff ff       	call   c001f86d <Vm::fpuChs(unsigned long long)>
c001faab:	eb 13                	jmp    c001fac0 <Vm::x87Handler(regs*)+0xa6>
c001faad:	83 ec 0c             	sub    esp,0xc
c001fab0:	6a 00                	push   0x0
c001fab2:	e8 26 fe ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fab7:	5f                   	pop    edi
c001fab8:	5d                   	pop    ebp
c001fab9:	52                   	push   edx
c001faba:	50                   	push   eax
c001fabb:	e8 a4 fd ff ff       	call   c001f864 <Vm::fpuAbs(unsigned long long)>
c001fac0:	83 c4 0c             	add    esp,0xc
c001fac3:	52                   	push   edx
c001fac4:	50                   	push   eax
c001fac5:	6a 00                	push   0x0
c001fac7:	e8 54 fe ff ff       	call   c001f920 <Vm::fpuSetReg(int, unsigned long long)>
c001facc:	eb bc                	jmp    c001fa8a <Vm::x87Handler(regs*)+0x70>
c001face:	e8 d3 fc ff ff       	call   c001f7a6 <Vm::fpuGetLog210()>
c001fad3:	eb ac                	jmp    c001fa81 <Vm::x87Handler(regs*)+0x67>
c001fad5:	e8 9c fc ff ff       	call   c001f776 <Vm::fpuGetLog2E()>
c001fada:	eb a5                	jmp    c001fa81 <Vm::x87Handler(regs*)+0x67>
c001fadc:	e8 8d fc ff ff       	call   c001f76e <Vm::fpuGetPi()>
c001fae1:	eb 9e                	jmp    c001fa81 <Vm::x87Handler(regs*)+0x67>
c001fae3:	e8 d6 fc ff ff       	call   c001f7be <Vm::fpuGetLog102()>
c001fae8:	eb 97                	jmp    c001fa81 <Vm::x87Handler(regs*)+0x67>
c001faea:	e8 9f fc ff ff       	call   c001f78e <Vm::fpuGetLogE2()>
c001faef:	eb 90                	jmp    c001fa81 <Vm::x87Handler(regs*)+0x67>
c001faf1:	8d 50 40             	lea    edx,[eax+0x40]
c001faf4:	80 fa 07             	cmp    dl,0x7
c001faf7:	77 15                	ja     c001fb0e <Vm::x87Handler(regs*)+0xf4>
c001faf9:	83 ec 0c             	sub    esp,0xc
c001fafc:	2d c0 00 00 00       	sub    eax,0xc0
c001fb01:	50                   	push   eax
c001fb02:	e8 d6 fd ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fb07:	59                   	pop    ecx
c001fb08:	5e                   	pop    esi
c001fb09:	e9 75 ff ff ff       	jmp    c001fa83 <Vm::x87Handler(regs*)+0x69>
c001fb0e:	8d 50 38             	lea    edx,[eax+0x38]
c001fb11:	80 fa 07             	cmp    dl,0x7
c001fb14:	77 3c                	ja     c001fb52 <Vm::x87Handler(regs*)+0x138>
c001fb16:	83 ec 0c             	sub    esp,0xc
c001fb19:	2d c8 00 00 00       	sub    eax,0xc8
c001fb1e:	50                   	push   eax
c001fb1f:	e8 b9 fd ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fb24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb2b:	89 c6                	mov    esi,eax
c001fb2d:	89 d7                	mov    edi,edx
c001fb2f:	e8 a9 fd ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fb34:	83 c4 0c             	add    esp,0xc
c001fb37:	52                   	push   edx
c001fb38:	50                   	push   eax
c001fb39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb3d:	2d c8 00 00 00       	sub    eax,0xc8
c001fb42:	50                   	push   eax
c001fb43:	e8 d8 fd ff ff       	call   c001f920 <Vm::fpuSetReg(int, unsigned long long)>
c001fb48:	83 c4 0c             	add    esp,0xc
c001fb4b:	57                   	push   edi
c001fb4c:	56                   	push   esi
c001fb4d:	e9 73 ff ff ff       	jmp    c001fac5 <Vm::x87Handler(regs*)+0xab>
c001fb52:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb56:	84 d2                	test   dl,dl
c001fb58:	75 0f                	jne    c001fb69 <Vm::x87Handler(regs*)+0x14f>
c001fb5a:	83 ec 0c             	sub    esp,0xc
c001fb5d:	ff 36                	push   DWORD PTR [esi]
c001fb5f:	e8 c8 fa ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c001fb64:	e9 bf 00 00 00       	jmp    c001fc28 <Vm::x87Handler(regs*)+0x20e>
c001fb69:	80 fa 03             	cmp    dl,0x3
c001fb6c:	75 13                	jne    c001fb81 <Vm::x87Handler(regs*)+0x167>
c001fb6e:	e8 55 fe ff ff       	call   c001f9c8 <Vm::fpuPop()>
c001fb73:	55                   	push   ebp
c001fb74:	55                   	push   ebp
c001fb75:	52                   	push   edx
c001fb76:	50                   	push   eax
c001fb77:	e8 4c fa ff ff       	call   c001f5c8 <Vm::fpuInternalTo32(unsigned long long)>
c001fb7c:	e9 88 00 00 00       	jmp    c001fc09 <Vm::x87Handler(regs*)+0x1ef>
c001fb81:	80 fa 05             	cmp    dl,0x5
c001fb84:	75 0e                	jne    c001fb94 <Vm::x87Handler(regs*)+0x17a>
c001fb86:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb89:	66 a3 62 19 03 c0    	mov    ds:0xc0031962,ax
c001fb8f:	e9 df 00 00 00       	jmp    c001fc73 <Vm::x87Handler(regs*)+0x259>
c001fb94:	31 c0                	xor    eax,eax
c001fb96:	80 fa 07             	cmp    dl,0x7
c001fb99:	0f 85 dc 08 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c001fb9f:	66 a1 62 19 03 c0    	mov    ax,ds:0xc0031962
c001fba5:	66 89 06             	mov    WORD PTR [esi],ax
c001fba8:	e9 c6 00 00 00       	jmp    c001fc73 <Vm::x87Handler(regs*)+0x259>
c001fbad:	80 fa d8             	cmp    dl,0xd8
c001fbb0:	0f 84 c9 00 00 00    	je     c001fc7f <Vm::x87Handler(regs*)+0x265>
c001fbb6:	80 fa dc             	cmp    dl,0xdc
c001fbb9:	0f 84 0d 02 00 00    	je     c001fdcc <Vm::x87Handler(regs*)+0x3b2>
c001fbbf:	80 fa de             	cmp    dl,0xde
c001fbc2:	0f 84 cd 02 00 00    	je     c001fe95 <Vm::x87Handler(regs*)+0x47b>
c001fbc8:	80 fa dd             	cmp    dl,0xdd
c001fbcb:	0f 84 5f 04 00 00    	je     c0020030 <Vm::x87Handler(regs*)+0x616>
c001fbd1:	80 fa da             	cmp    dl,0xda
c001fbd4:	0f 84 24 05 00 00    	je     c00200fe <Vm::x87Handler(regs*)+0x6e4>
c001fbda:	80 fa df             	cmp    dl,0xdf
c001fbdd:	0f 84 68 05 00 00    	je     c002014b <Vm::x87Handler(regs*)+0x731>
c001fbe3:	31 c0                	xor    eax,eax
c001fbe5:	80 fa db             	cmp    dl,0xdb
c001fbe8:	0f 85 8d 08 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c001fbee:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbf2:	80 fa 03             	cmp    dl,0x3
c001fbf5:	0f 85 70 06 00 00    	jne    c002026b <Vm::x87Handler(regs*)+0x851>
c001fbfb:	e8 c8 fd ff ff       	call   c001f9c8 <Vm::fpuPop()>
c001fc00:	55                   	push   ebp
c001fc01:	55                   	push   ebp
c001fc02:	52                   	push   edx
c001fc03:	50                   	push   eax
c001fc04:	e8 71 fa ff ff       	call   c001f67a <Vm::fpuFloatToLong(unsigned long long)>
c001fc09:	83 c4 10             	add    esp,0x10
c001fc0c:	89 06                	mov    DWORD PTR [esi],eax
c001fc0e:	eb 63                	jmp    c001fc73 <Vm::x87Handler(regs*)+0x259>
c001fc10:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc14:	84 d2                	test   dl,dl
c001fc16:	0f 85 e6 05 00 00    	jne    c0020202 <Vm::x87Handler(regs*)+0x7e8>
c001fc1c:	57                   	push   edi
c001fc1d:	57                   	push   edi
c001fc1e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc21:	ff 36                	push   DWORD PTR [esi]
c001fc23:	e8 49 fa ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c001fc28:	5e                   	pop    esi
c001fc29:	5f                   	pop    edi
c001fc2a:	52                   	push   edx
c001fc2b:	50                   	push   eax
c001fc2c:	e8 3a fd ff ff       	call   c001f96b <Vm::fpuPush(unsigned long long)>
c001fc31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc35:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc38:	e9 51 fe ff ff       	jmp    c001fa8e <Vm::x87Handler(regs*)+0x74>
c001fc3d:	80 fa 03             	cmp    dl,0x3
c001fc40:	0f 85 d7 06 00 00    	jne    c002031d <Vm::x87Handler(regs*)+0x903>
c001fc46:	57                   	push   edi
c001fc47:	57                   	push   edi
c001fc48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc4b:	ff 36                	push   DWORD PTR [esi]
c001fc4d:	e8 1f fa ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c001fc52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc59:	89 c6                	mov    esi,eax
c001fc5b:	89 d7                	mov    edi,edx
c001fc5d:	e8 7b fc ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fc62:	57                   	push   edi
c001fc63:	56                   	push   esi
c001fc64:	52                   	push   edx
c001fc65:	50                   	push   eax
c001fc66:	e8 95 fb ff ff       	call   c001f800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc6b:	83 c4 20             	add    esp,0x20
c001fc6e:	e8 55 fd ff ff       	call   c001f9c8 <Vm::fpuPop()>
c001fc73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc77:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc7a:	e9 12 fe ff ff       	jmp    c001fa91 <Vm::x87Handler(regs*)+0x77>
c001fc7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc83:	8d 50 40             	lea    edx,[eax+0x40]
c001fc86:	80 fa 07             	cmp    dl,0x7
c001fc89:	77 29                	ja     c001fcb4 <Vm::x87Handler(regs*)+0x29a>
c001fc8b:	83 ec 0c             	sub    esp,0xc
c001fc8e:	2d c0 00 00 00       	sub    eax,0xc0
c001fc93:	50                   	push   eax
c001fc94:	e8 44 fc ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fc99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca0:	89 c6                	mov    esi,eax
c001fca2:	89 d7                	mov    edi,edx
c001fca4:	e8 34 fc ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fca9:	57                   	push   edi
c001fcaa:	56                   	push   esi
c001fcab:	52                   	push   edx
c001fcac:	50                   	push   eax
c001fcad:	e8 a1 fb ff ff       	call   c001f853 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcb2:	eb 2f                	jmp    c001fce3 <Vm::x87Handler(regs*)+0x2c9>
c001fcb4:	8d 50 38             	lea    edx,[eax+0x38]
c001fcb7:	80 fa 07             	cmp    dl,0x7
c001fcba:	77 2f                	ja     c001fceb <Vm::x87Handler(regs*)+0x2d1>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	2d c8 00 00 00       	sub    eax,0xc8
c001fcc4:	50                   	push   eax
c001fcc5:	e8 13 fc ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fcca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd1:	89 c6                	mov    esi,eax
c001fcd3:	89 d7                	mov    edi,edx
c001fcd5:	e8 03 fc ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fcda:	57                   	push   edi
c001fcdb:	56                   	push   esi
c001fcdc:	52                   	push   edx
c001fcdd:	50                   	push   eax
c001fcde:	e8 a9 fb ff ff       	call   c001f88c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fce3:	83 c4 1c             	add    esp,0x1c
c001fce6:	e9 d8 fd ff ff       	jmp    c001fac3 <Vm::x87Handler(regs*)+0xa9>
c001fceb:	8d 50 30             	lea    edx,[eax+0x30]
c001fcee:	80 fa 07             	cmp    dl,0x7
c001fcf1:	77 0d                	ja     c001fd00 <Vm::x87Handler(regs*)+0x2e6>
c001fcf3:	83 ec 0c             	sub    esp,0xc
c001fcf6:	2d d0 00 00 00       	sub    eax,0xd0
c001fcfb:	e9 99 03 00 00       	jmp    c0020099 <Vm::x87Handler(regs*)+0x67f>
c001fd00:	8d 50 28             	lea    edx,[eax+0x28]
c001fd03:	80 fa 07             	cmp    dl,0x7
c001fd06:	77 0d                	ja     c001fd15 <Vm::x87Handler(regs*)+0x2fb>
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	2d d8 00 00 00       	sub    eax,0xd8
c001fd10:	e9 c0 03 00 00       	jmp    c00200d5 <Vm::x87Handler(regs*)+0x6bb>
c001fd15:	8d 50 20             	lea    edx,[eax+0x20]
c001fd18:	80 fa 07             	cmp    dl,0x7
c001fd1b:	77 1b                	ja     c001fd38 <Vm::x87Handler(regs*)+0x31e>
c001fd1d:	83 ec 0c             	sub    esp,0xc
c001fd20:	2d e0 00 00 00       	sub    eax,0xe0
c001fd25:	50                   	push   eax
c001fd26:	e8 b2 fb ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fd2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd32:	89 c6                	mov    esi,eax
c001fd34:	89 d7                	mov    edi,edx
c001fd36:	eb 22                	jmp    c001fd5a <Vm::x87Handler(regs*)+0x340>
c001fd38:	8d 50 18             	lea    edx,[eax+0x18]
c001fd3b:	80 fa 07             	cmp    dl,0x7
c001fd3e:	77 2d                	ja     c001fd6d <Vm::x87Handler(regs*)+0x353>
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	6a 00                	push   0x0
c001fd45:	e8 93 fb ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fd4a:	89 c6                	mov    esi,eax
c001fd4c:	89 d7                	mov    edi,edx
c001fd4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd52:	2d e8 00 00 00       	sub    eax,0xe8
c001fd57:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd5a:	e8 7e fb ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fd5f:	57                   	push   edi
c001fd60:	56                   	push   esi
c001fd61:	52                   	push   edx
c001fd62:	50                   	push   eax
c001fd63:	e8 15 fb ff ff       	call   c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd68:	e9 76 ff ff ff       	jmp    c001fce3 <Vm::x87Handler(regs*)+0x2c9>
c001fd6d:	8d 50 10             	lea    edx,[eax+0x10]
c001fd70:	80 fa 07             	cmp    dl,0x7
c001fd73:	77 1b                	ja     c001fd90 <Vm::x87Handler(regs*)+0x376>
c001fd75:	83 ec 0c             	sub    esp,0xc
c001fd78:	2d f0 00 00 00       	sub    eax,0xf0
c001fd7d:	50                   	push   eax
c001fd7e:	e8 5a fb ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fd83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd8a:	89 c6                	mov    esi,eax
c001fd8c:	89 d7                	mov    edi,edx
c001fd8e:	eb 22                	jmp    c001fdb2 <Vm::x87Handler(regs*)+0x398>
c001fd90:	3c f7                	cmp    al,0xf7
c001fd92:	0f 86 d1 03 00 00    	jbe    c0020169 <Vm::x87Handler(regs*)+0x74f>
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	6a 00                	push   0x0
c001fd9d:	e8 3b fb ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fda2:	89 c6                	mov    esi,eax
c001fda4:	89 d7                	mov    edi,edx
c001fda6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdaa:	2d f8 00 00 00       	sub    eax,0xf8
c001fdaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdb2:	e8 26 fb ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fdb7:	57                   	push   edi
c001fdb8:	56                   	push   esi
c001fdb9:	52                   	push   edx
c001fdba:	50                   	push   eax
c001fdbb:	e8 eb fa ff ff       	call   c001f8ab <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdc0:	83 c4 1c             	add    esp,0x1c
c001fdc3:	52                   	push   edx
c001fdc4:	50                   	push   eax
c001fdc5:	6a 00                	push   0x0
c001fdc7:	e9 51 02 00 00       	jmp    c002001d <Vm::x87Handler(regs*)+0x603>
c001fdcc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdd0:	8d 50 40             	lea    edx,[eax+0x40]
c001fdd3:	80 fa 07             	cmp    dl,0x7
c001fdd6:	77 37                	ja     c001fe0f <Vm::x87Handler(regs*)+0x3f5>
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	2d c0 00 00 00       	sub    eax,0xc0
c001fde0:	50                   	push   eax
c001fde1:	e8 f7 fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fde6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fded:	89 c6                	mov    esi,eax
c001fdef:	89 d7                	mov    edi,edx
c001fdf1:	e8 e7 fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fdf6:	57                   	push   edi
c001fdf7:	56                   	push   esi
c001fdf8:	52                   	push   edx
c001fdf9:	50                   	push   eax
c001fdfa:	e8 54 fa ff ff       	call   c001f853 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdff:	83 c4 1c             	add    esp,0x1c
c001fe02:	52                   	push   edx
c001fe03:	50                   	push   eax
c001fe04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe08:	2d c0 00 00 00       	sub    eax,0xc0
c001fe0d:	eb 3d                	jmp    c001fe4c <Vm::x87Handler(regs*)+0x432>
c001fe0f:	8d 50 38             	lea    edx,[eax+0x38]
c001fe12:	80 fa 07             	cmp    dl,0x7
c001fe15:	77 3b                	ja     c001fe52 <Vm::x87Handler(regs*)+0x438>
c001fe17:	83 ec 0c             	sub    esp,0xc
c001fe1a:	2d c8 00 00 00       	sub    eax,0xc8
c001fe1f:	50                   	push   eax
c001fe20:	e8 b8 fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fe25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe2c:	89 c6                	mov    esi,eax
c001fe2e:	89 d7                	mov    edi,edx
c001fe30:	e8 a8 fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fe35:	57                   	push   edi
c001fe36:	56                   	push   esi
c001fe37:	52                   	push   edx
c001fe38:	50                   	push   eax
c001fe39:	e8 4e fa ff ff       	call   c001f88c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe3e:	83 c4 1c             	add    esp,0x1c
c001fe41:	52                   	push   edx
c001fe42:	50                   	push   eax
c001fe43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe47:	2d c8 00 00 00       	sub    eax,0xc8
c001fe4c:	50                   	push   eax
c001fe4d:	e9 75 fc ff ff       	jmp    c001fac7 <Vm::x87Handler(regs*)+0xad>
c001fe52:	83 c0 18             	add    eax,0x18
c001fe55:	3c 07                	cmp    al,0x7
c001fe57:	0f 87 3b 04 00 00    	ja     c0020298 <Vm::x87Handler(regs*)+0x87e>
c001fe5d:	83 ec 0c             	sub    esp,0xc
c001fe60:	6a 00                	push   0x0
c001fe62:	e8 76 fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fe67:	89 c6                	mov    esi,eax
c001fe69:	89 d7                	mov    edi,edx
c001fe6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6f:	2d e8 00 00 00       	sub    eax,0xe8
c001fe74:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe77:	e8 61 fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fe7c:	57                   	push   edi
c001fe7d:	56                   	push   esi
c001fe7e:	52                   	push   edx
c001fe7f:	50                   	push   eax
c001fe80:	e8 f8 f9 ff ff       	call   c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe85:	83 c4 1c             	add    esp,0x1c
c001fe88:	52                   	push   edx
c001fe89:	50                   	push   eax
c001fe8a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8e:	2d e8 00 00 00       	sub    eax,0xe8
c001fe93:	eb b7                	jmp    c001fe4c <Vm::x87Handler(regs*)+0x432>
c001fe95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe99:	8d 50 40             	lea    edx,[eax+0x40]
c001fe9c:	80 fa 07             	cmp    dl,0x7
c001fe9f:	77 3a                	ja     c001fedb <Vm::x87Handler(regs*)+0x4c1>
c001fea1:	83 ec 0c             	sub    esp,0xc
c001fea4:	2d c0 00 00 00       	sub    eax,0xc0
c001fea9:	50                   	push   eax
c001feaa:	e8 2e fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001feaf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feb6:	89 c6                	mov    esi,eax
c001feb8:	89 d7                	mov    edi,edx
c001feba:	e8 1e fa ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001febf:	57                   	push   edi
c001fec0:	56                   	push   esi
c001fec1:	52                   	push   edx
c001fec2:	50                   	push   eax
c001fec3:	e8 8b f9 ff ff       	call   c001f853 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fec8:	83 c4 1c             	add    esp,0x1c
c001fecb:	52                   	push   edx
c001fecc:	50                   	push   eax
c001fecd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed1:	2d c0 00 00 00       	sub    eax,0xc0
c001fed6:	e9 9e 01 00 00       	jmp    c0020079 <Vm::x87Handler(regs*)+0x65f>
c001fedb:	8d 50 20             	lea    edx,[eax+0x20]
c001fede:	80 fa 07             	cmp    dl,0x7
c001fee1:	77 3a                	ja     c001ff1d <Vm::x87Handler(regs*)+0x503>
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	2d e0 00 00 00       	sub    eax,0xe0
c001feeb:	50                   	push   eax
c001feec:	e8 ec f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fef1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fef8:	89 c6                	mov    esi,eax
c001fefa:	89 d7                	mov    edi,edx
c001fefc:	e8 dc f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ff01:	57                   	push   edi
c001ff02:	56                   	push   esi
c001ff03:	52                   	push   edx
c001ff04:	50                   	push   eax
c001ff05:	e8 73 f9 ff ff       	call   c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff0a:	83 c4 1c             	add    esp,0x1c
c001ff0d:	52                   	push   edx
c001ff0e:	50                   	push   eax
c001ff0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff13:	2d e0 00 00 00       	sub    eax,0xe0
c001ff18:	e9 5c 01 00 00       	jmp    c0020079 <Vm::x87Handler(regs*)+0x65f>
c001ff1d:	8d 50 18             	lea    edx,[eax+0x18]
c001ff20:	80 fa 07             	cmp    dl,0x7
c001ff23:	77 3b                	ja     c001ff60 <Vm::x87Handler(regs*)+0x546>
c001ff25:	83 ec 0c             	sub    esp,0xc
c001ff28:	6a 00                	push   0x0
c001ff2a:	e8 ae f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ff2f:	89 c6                	mov    esi,eax
c001ff31:	89 d7                	mov    edi,edx
c001ff33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff37:	2d e8 00 00 00       	sub    eax,0xe8
c001ff3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff3f:	e8 99 f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ff44:	57                   	push   edi
c001ff45:	56                   	push   esi
c001ff46:	52                   	push   edx
c001ff47:	50                   	push   eax
c001ff48:	e8 30 f9 ff ff       	call   c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff4d:	83 c4 1c             	add    esp,0x1c
c001ff50:	52                   	push   edx
c001ff51:	50                   	push   eax
c001ff52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff56:	2d e8 00 00 00       	sub    eax,0xe8
c001ff5b:	e9 19 01 00 00       	jmp    c0020079 <Vm::x87Handler(regs*)+0x65f>
c001ff60:	8d 50 38             	lea    edx,[eax+0x38]
c001ff63:	80 fa 07             	cmp    dl,0x7
c001ff66:	77 37                	ja     c001ff9f <Vm::x87Handler(regs*)+0x585>
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	2d c8 00 00 00       	sub    eax,0xc8
c001ff70:	50                   	push   eax
c001ff71:	e8 67 f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ff76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff7d:	89 c6                	mov    esi,eax
c001ff7f:	89 d7                	mov    edi,edx
c001ff81:	e8 57 f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ff86:	57                   	push   edi
c001ff87:	56                   	push   esi
c001ff88:	52                   	push   edx
c001ff89:	50                   	push   eax
c001ff8a:	e8 fd f8 ff ff       	call   c001f88c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff8f:	83 c4 1c             	add    esp,0x1c
c001ff92:	52                   	push   edx
c001ff93:	50                   	push   eax
c001ff94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff98:	2d c8 00 00 00       	sub    eax,0xc8
c001ff9d:	eb 7d                	jmp    c002001c <Vm::x87Handler(regs*)+0x602>
c001ff9f:	3c f7                	cmp    al,0xf7
c001ffa1:	76 38                	jbe    c001ffdb <Vm::x87Handler(regs*)+0x5c1>
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	6a 00                	push   0x0
c001ffa8:	e8 30 f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ffad:	89 c6                	mov    esi,eax
c001ffaf:	89 d7                	mov    edi,edx
c001ffb1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb5:	2d f8 00 00 00       	sub    eax,0xf8
c001ffba:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffbd:	e8 1b f9 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001ffc2:	57                   	push   edi
c001ffc3:	56                   	push   esi
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	e8 e0 f8 ff ff       	call   c001f8ab <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffcb:	83 c4 1c             	add    esp,0x1c
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd4:	2d f8 00 00 00       	sub    eax,0xf8
c001ffd9:	eb 41                	jmp    c002001c <Vm::x87Handler(regs*)+0x602>
c001ffdb:	8d 50 10             	lea    edx,[eax+0x10]
c001ffde:	80 fa 07             	cmp    dl,0x7
c001ffe1:	0f 87 5a 01 00 00    	ja     c0020141 <Vm::x87Handler(regs*)+0x727>
c001ffe7:	83 ec 0c             	sub    esp,0xc
c001ffea:	2d f0 00 00 00       	sub    eax,0xf0
c001ffef:	50                   	push   eax
c001fff0:	e8 e8 f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c001fff5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fffc:	89 c6                	mov    esi,eax
c001fffe:	89 d7                	mov    edi,edx
c0020000:	e8 d8 f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020005:	57                   	push   edi
c0020006:	56                   	push   esi
c0020007:	52                   	push   edx
c0020008:	50                   	push   eax
c0020009:	e8 9d f8 ff ff       	call   c001f8ab <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002000e:	83 c4 1c             	add    esp,0x1c
c0020011:	52                   	push   edx
c0020012:	50                   	push   eax
c0020013:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020017:	2d f0 00 00 00       	sub    eax,0xf0
c002001c:	50                   	push   eax
c002001d:	e8 fe f8 ff ff       	call   c001f920 <Vm::fpuSetReg(int, unsigned long long)>
c0020022:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020026:	e8 9d f9 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c002002b:	e9 5e fa ff ff       	jmp    c001fa8e <Vm::x87Handler(regs*)+0x74>
c0020030:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020034:	8d 50 30             	lea    edx,[eax+0x30]
c0020037:	80 fa 07             	cmp    dl,0x7
c002003a:	77 1d                	ja     c0020059 <Vm::x87Handler(regs*)+0x63f>
c002003c:	83 ec 0c             	sub    esp,0xc
c002003f:	6a 00                	push   0x0
c0020041:	e8 97 f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020046:	83 c4 0c             	add    esp,0xc
c0020049:	52                   	push   edx
c002004a:	50                   	push   eax
c002004b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002004f:	2d d0 00 00 00       	sub    eax,0xd0
c0020054:	e9 f3 fd ff ff       	jmp    c001fe4c <Vm::x87Handler(regs*)+0x432>
c0020059:	8d 50 28             	lea    edx,[eax+0x28]
c002005c:	80 fa 07             	cmp    dl,0x7
c002005f:	77 28                	ja     c0020089 <Vm::x87Handler(regs*)+0x66f>
c0020061:	83 ec 0c             	sub    esp,0xc
c0020064:	6a 00                	push   0x0
c0020066:	e8 72 f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c002006b:	83 c4 0c             	add    esp,0xc
c002006e:	52                   	push   edx
c002006f:	50                   	push   eax
c0020070:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020074:	2d d8 00 00 00       	sub    eax,0xd8
c0020079:	50                   	push   eax
c002007a:	e8 a1 f8 ff ff       	call   c001f920 <Vm::fpuSetReg(int, unsigned long long)>
c002007f:	e8 44 f9 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c0020084:	e9 01 fa ff ff       	jmp    c001fa8a <Vm::x87Handler(regs*)+0x70>
c0020089:	8d 50 20             	lea    edx,[eax+0x20]
c002008c:	80 fa 07             	cmp    dl,0x7
c002008f:	77 30                	ja     c00200c1 <Vm::x87Handler(regs*)+0x6a7>
c0020091:	83 ec 0c             	sub    esp,0xc
c0020094:	2d e0 00 00 00       	sub    eax,0xe0
c0020099:	50                   	push   eax
c002009a:	e8 3e f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c002009f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200a6:	89 c6                	mov    esi,eax
c00200a8:	89 d7                	mov    edi,edx
c00200aa:	e8 2e f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00200af:	57                   	push   edi
c00200b0:	56                   	push   esi
c00200b1:	52                   	push   edx
c00200b2:	50                   	push   eax
c00200b3:	e8 48 f7 ff ff       	call   c001f800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200bc:	e9 54 02 00 00       	jmp    c0020315 <Vm::x87Handler(regs*)+0x8fb>
c00200c1:	8d 50 18             	lea    edx,[eax+0x18]
c00200c4:	80 fa 07             	cmp    dl,0x7
c00200c7:	0f 87 43 fb ff ff    	ja     c001fc10 <Vm::x87Handler(regs*)+0x1f6>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	2d e8 00 00 00       	sub    eax,0xe8
c00200d5:	50                   	push   eax
c00200d6:	e8 02 f8 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00200db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200e2:	89 c6                	mov    esi,eax
c00200e4:	89 d7                	mov    edi,edx
c00200e6:	e8 f2 f7 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00200eb:	57                   	push   edi
c00200ec:	56                   	push   esi
c00200ed:	52                   	push   edx
c00200ee:	50                   	push   eax
c00200ef:	e8 0c f7 ff ff       	call   c001f800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200f4:	83 c4 20             	add    esp,0x20
c00200f7:	e8 cc f8 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c00200fc:	eb 62                	jmp    c0020160 <Vm::x87Handler(regs*)+0x746>
c00200fe:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020102:	0f 85 0f 01 00 00    	jne    c0020217 <Vm::x87Handler(regs*)+0x7fd>
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	6a 01                	push   0x1
c002010d:	e8 cb f7 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020112:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020119:	89 c6                	mov    esi,eax
c002011b:	89 d7                	mov    edi,edx
c002011d:	e8 bb f7 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020122:	57                   	push   edi
c0020123:	56                   	push   esi
c0020124:	52                   	push   edx
c0020125:	50                   	push   eax
c0020126:	e8 d5 f6 ff ff       	call   c001f800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002012b:	83 c4 20             	add    esp,0x20
c002012e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020132:	e8 91 f8 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c0020137:	e8 8c f8 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c002013c:	e9 50 f9 ff ff       	jmp    c001fa91 <Vm::x87Handler(regs*)+0x77>
c0020141:	3c d9                	cmp    al,0xd9
c0020143:	0f 85 b5 02 00 00    	jne    c00203fe <Vm::x87Handler(regs*)+0x9e4>
c0020149:	eb bd                	jmp    c0020108 <Vm::x87Handler(regs*)+0x6ee>
c002014b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002014f:	0f 85 ea 02 00 00    	jne    c002043f <Vm::x87Handler(regs*)+0xa25>
c0020155:	0f b7 05 60 19 03 c0 	movzx  eax,WORD PTR ds:0xc0031960
c002015c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020160:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020164:	e9 28 f9 ff ff       	jmp    c001fa91 <Vm::x87Handler(regs*)+0x77>
c0020169:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002016d:	84 d2                	test   dl,dl
c002016f:	75 0f                	jne    c0020180 <Vm::x87Handler(regs*)+0x766>
c0020171:	83 ec 0c             	sub    esp,0xc
c0020174:	ff 36                	push   DWORD PTR [esi]
c0020176:	e8 b1 f4 ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c002017b:	e9 2c 01 00 00       	jmp    c00202ac <Vm::x87Handler(regs*)+0x892>
c0020180:	80 fa 01             	cmp    dl,0x1
c0020183:	75 0f                	jne    c0020194 <Vm::x87Handler(regs*)+0x77a>
c0020185:	83 ec 0c             	sub    esp,0xc
c0020188:	ff 36                	push   DWORD PTR [esi]
c002018a:	e8 9d f4 ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c002018f:	e9 81 02 00 00       	jmp    c0020415 <Vm::x87Handler(regs*)+0x9fb>
c0020194:	80 fa 04             	cmp    dl,0x4
c0020197:	75 0f                	jne    c00201a8 <Vm::x87Handler(regs*)+0x78e>
c0020199:	83 ec 0c             	sub    esp,0xc
c002019c:	ff 36                	push   DWORD PTR [esi]
c002019e:	e8 89 f4 ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c00201a3:	e9 86 01 00 00       	jmp    c002032e <Vm::x87Handler(regs*)+0x914>
c00201a8:	80 fa 05             	cmp    dl,0x5
c00201ab:	75 1b                	jne    c00201c8 <Vm::x87Handler(regs*)+0x7ae>
c00201ad:	83 ec 0c             	sub    esp,0xc
c00201b0:	6a 00                	push   0x0
c00201b2:	e8 26 f7 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00201b7:	89 c7                	mov    edi,eax
c00201b9:	89 d5                	mov    ebp,edx
c00201bb:	58                   	pop    eax
c00201bc:	ff 36                	push   DWORD PTR [esi]
c00201be:	e8 69 f4 ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c00201c3:	e9 a3 01 00 00       	jmp    c002036b <Vm::x87Handler(regs*)+0x951>
c00201c8:	80 fa 06             	cmp    dl,0x6
c00201cb:	75 0f                	jne    c00201dc <Vm::x87Handler(regs*)+0x7c2>
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	ff 36                	push   DWORD PTR [esi]
c00201d2:	e8 55 f4 ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c00201d7:	e9 ae 01 00 00       	jmp    c002038a <Vm::x87Handler(regs*)+0x970>
c00201dc:	31 c0                	xor    eax,eax
c00201de:	80 fa 07             	cmp    dl,0x7
c00201e1:	0f 85 94 02 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	6a 00                	push   0x0
c00201ec:	e8 ec f6 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00201f1:	89 c7                	mov    edi,eax
c00201f3:	89 d5                	mov    ebp,edx
c00201f5:	58                   	pop    eax
c00201f6:	ff 36                	push   DWORD PTR [esi]
c00201f8:	e8 2f f4 ff ff       	call   c001f62c <Vm::fpu32ToInternal(unsigned int)>
c00201fd:	e9 cb 01 00 00       	jmp    c00203cd <Vm::x87Handler(regs*)+0x9b3>
c0020202:	80 fa 03             	cmp    dl,0x3
c0020205:	0f 85 d3 01 00 00    	jne    c00203de <Vm::x87Handler(regs*)+0x9c4>
c002020b:	e8 b8 f7 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c0020210:	51                   	push   ecx
c0020211:	51                   	push   ecx
c0020212:	e9 de 01 00 00       	jmp    c00203f5 <Vm::x87Handler(regs*)+0x9db>
c0020217:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002021b:	80 fa 01             	cmp    dl,0x1
c002021e:	75 09                	jne    c0020229 <Vm::x87Handler(regs*)+0x80f>
c0020220:	57                   	push   edi
c0020221:	57                   	push   edi
c0020222:	8b 06                	mov    eax,DWORD PTR [esi]
c0020224:	e9 e3 01 00 00       	jmp    c002040c <Vm::x87Handler(regs*)+0x9f2>
c0020229:	80 fa 04             	cmp    dl,0x4
c002022c:	75 12                	jne    c0020240 <Vm::x87Handler(regs*)+0x826>
c002022e:	31 d2                	xor    edx,edx
c0020230:	51                   	push   ecx
c0020231:	51                   	push   ecx
c0020232:	8b 06                	mov    eax,DWORD PTR [esi]
c0020234:	52                   	push   edx
c0020235:	50                   	push   eax
c0020236:	e8 d0 f4 ff ff       	call   c001f70b <Vm::fpuLongToFloat(long long)>
c002023b:	e9 ee 00 00 00       	jmp    c002032e <Vm::x87Handler(regs*)+0x914>
c0020240:	31 c0                	xor    eax,eax
c0020242:	80 fa 07             	cmp    dl,0x7
c0020245:	0f 85 30 02 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c002024b:	83 ec 0c             	sub    esp,0xc
c002024e:	6a 00                	push   0x0
c0020250:	e8 88 f6 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020255:	89 c7                	mov    edi,eax
c0020257:	89 d5                	mov    ebp,edx
c0020259:	58                   	pop    eax
c002025a:	8b 06                	mov    eax,DWORD PTR [esi]
c002025c:	5a                   	pop    edx
c002025d:	31 d2                	xor    edx,edx
c002025f:	52                   	push   edx
c0020260:	50                   	push   eax
c0020261:	e8 a5 f4 ff ff       	call   c001f70b <Vm::fpuLongToFloat(long long)>
c0020266:	e9 62 01 00 00       	jmp    c00203cd <Vm::x87Handler(regs*)+0x9b3>
c002026b:	84 d2                	test   dl,dl
c002026d:	75 0d                	jne    c002027c <Vm::x87Handler(regs*)+0x862>
c002026f:	31 d2                	xor    edx,edx
c0020271:	55                   	push   ebp
c0020272:	55                   	push   ebp
c0020273:	8b 06                	mov    eax,DWORD PTR [esi]
c0020275:	52                   	push   edx
c0020276:	50                   	push   eax
c0020277:	e9 d3 01 00 00       	jmp    c002044f <Vm::x87Handler(regs*)+0xa35>
c002027c:	31 c0                	xor    eax,eax
c002027e:	80 fa 02             	cmp    dl,0x2
c0020281:	0f 85 f4 01 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c0020287:	83 ec 0c             	sub    esp,0xc
c002028a:	6a 00                	push   0x0
c002028c:	e8 4c f6 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020291:	59                   	pop    ecx
c0020292:	5f                   	pop    edi
c0020293:	e9 6a f9 ff ff       	jmp    c001fc02 <Vm::x87Handler(regs*)+0x1e8>
c0020298:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002029c:	84 d2                	test   dl,dl
c002029e:	75 2a                	jne    c00202ca <Vm::x87Handler(regs*)+0x8b0>
c00202a0:	50                   	push   eax
c00202a1:	50                   	push   eax
c00202a2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202a5:	ff 36                	push   DWORD PTR [esi]
c00202a7:	e8 c5 f3 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c00202ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202b3:	89 c6                	mov    esi,eax
c00202b5:	89 d7                	mov    edi,edx
c00202b7:	e8 21 f6 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00202bc:	57                   	push   edi
c00202bd:	56                   	push   esi
c00202be:	52                   	push   edx
c00202bf:	50                   	push   eax
c00202c0:	e8 8e f5 ff ff       	call   c001f853 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202c5:	e9 64 01 00 00       	jmp    c002042e <Vm::x87Handler(regs*)+0xa14>
c00202ca:	80 fa 01             	cmp    dl,0x1
c00202cd:	75 11                	jne    c00202e0 <Vm::x87Handler(regs*)+0x8c6>
c00202cf:	50                   	push   eax
c00202d0:	50                   	push   eax
c00202d1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202d4:	ff 36                	push   DWORD PTR [esi]
c00202d6:	e8 96 f3 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c00202db:	e9 35 01 00 00       	jmp    c0020415 <Vm::x87Handler(regs*)+0x9fb>
c00202e0:	80 fa 02             	cmp    dl,0x2
c00202e3:	0f 85 54 f9 ff ff    	jne    c001fc3d <Vm::x87Handler(regs*)+0x223>
c00202e9:	55                   	push   ebp
c00202ea:	55                   	push   ebp
c00202eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202ee:	ff 36                	push   DWORD PTR [esi]
c00202f0:	e8 7c f3 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c00202f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202fc:	89 c6                	mov    esi,eax
c00202fe:	89 d7                	mov    edi,edx
c0020300:	e8 d8 f5 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020305:	57                   	push   edi
c0020306:	56                   	push   esi
c0020307:	52                   	push   edx
c0020308:	50                   	push   eax
c0020309:	e8 f2 f4 ff ff       	call   c001f800 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002030e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020312:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020315:	83 c4 20             	add    esp,0x20
c0020318:	e9 74 f7 ff ff       	jmp    c001fa91 <Vm::x87Handler(regs*)+0x77>
c002031d:	80 fa 04             	cmp    dl,0x4
c0020320:	75 2a                	jne    c002034c <Vm::x87Handler(regs*)+0x932>
c0020322:	51                   	push   ecx
c0020323:	51                   	push   ecx
c0020324:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020327:	ff 36                	push   DWORD PTR [esi]
c0020329:	e8 43 f3 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c002032e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020335:	89 c6                	mov    esi,eax
c0020337:	89 d7                	mov    edi,edx
c0020339:	e8 9f f5 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c002033e:	57                   	push   edi
c002033f:	56                   	push   esi
c0020340:	52                   	push   edx
c0020341:	50                   	push   eax
c0020342:	e8 36 f5 ff ff       	call   c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020347:	e9 e2 00 00 00       	jmp    c002042e <Vm::x87Handler(regs*)+0xa14>
c002034c:	80 fa 05             	cmp    dl,0x5
c002034f:	75 28                	jne    c0020379 <Vm::x87Handler(regs*)+0x95f>
c0020351:	83 ec 0c             	sub    esp,0xc
c0020354:	6a 00                	push   0x0
c0020356:	e8 82 f5 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c002035b:	89 c7                	mov    edi,eax
c002035d:	89 d5                	mov    ebp,edx
c002035f:	58                   	pop    eax
c0020360:	5a                   	pop    edx
c0020361:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020364:	ff 36                	push   DWORD PTR [esi]
c0020366:	e8 06 f3 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c002036b:	83 c4 10             	add    esp,0x10
c002036e:	55                   	push   ebp
c002036f:	57                   	push   edi
c0020370:	52                   	push   edx
c0020371:	50                   	push   eax
c0020372:	e8 06 f5 ff ff       	call   c001f87d <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020377:	eb 60                	jmp    c00203d9 <Vm::x87Handler(regs*)+0x9bf>
c0020379:	80 fa 06             	cmp    dl,0x6
c002037c:	75 2a                	jne    c00203a8 <Vm::x87Handler(regs*)+0x98e>
c002037e:	51                   	push   ecx
c002037f:	51                   	push   ecx
c0020380:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020383:	ff 36                	push   DWORD PTR [esi]
c0020385:	e8 e7 f2 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c002038a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020391:	89 c6                	mov    esi,eax
c0020393:	89 d7                	mov    edi,edx
c0020395:	e8 43 f5 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c002039a:	57                   	push   edi
c002039b:	56                   	push   esi
c002039c:	52                   	push   edx
c002039d:	50                   	push   eax
c002039e:	e8 08 f5 ff ff       	call   c001f8ab <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203a3:	e9 86 00 00 00       	jmp    c002042e <Vm::x87Handler(regs*)+0xa14>
c00203a8:	31 c0                	xor    eax,eax
c00203aa:	80 fa 07             	cmp    dl,0x7
c00203ad:	0f 85 c8 00 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c00203b3:	83 ec 0c             	sub    esp,0xc
c00203b6:	6a 00                	push   0x0
c00203b8:	e8 20 f5 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00203bd:	89 c7                	mov    edi,eax
c00203bf:	89 d5                	mov    ebp,edx
c00203c1:	58                   	pop    eax
c00203c2:	5a                   	pop    edx
c00203c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c6:	ff 36                	push   DWORD PTR [esi]
c00203c8:	e8 a4 f2 ff ff       	call   c001f671 <Vm::fpu64ToInternal(unsigned long long)>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	55                   	push   ebp
c00203d1:	57                   	push   edi
c00203d2:	52                   	push   edx
c00203d3:	50                   	push   eax
c00203d4:	e8 d2 f4 ff ff       	call   c001f8ab <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203d9:	83 c4 0c             	add    esp,0xc
c00203dc:	eb 53                	jmp    c0020431 <Vm::x87Handler(regs*)+0xa17>
c00203de:	31 c0                	xor    eax,eax
c00203e0:	80 fa 02             	cmp    dl,0x2
c00203e3:	0f 85 92 00 00 00    	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c00203e9:	83 ec 0c             	sub    esp,0xc
c00203ec:	6a 00                	push   0x0
c00203ee:	e8 ea f4 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c00203f3:	59                   	pop    ecx
c00203f4:	5f                   	pop    edi
c00203f5:	52                   	push   edx
c00203f6:	50                   	push   eax
c00203f7:	e8 27 f2 ff ff       	call   c001f623 <Vm::fpuInternalTo64(unsigned long long)>
c00203fc:	eb 70                	jmp    c002046e <Vm::x87Handler(regs*)+0xa54>
c00203fe:	31 c0                	xor    eax,eax
c0020400:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020405:	75 74                	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c0020407:	50                   	push   eax
c0020408:	50                   	push   eax
c0020409:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002040c:	31 d2                	xor    edx,edx
c002040e:	52                   	push   edx
c002040f:	50                   	push   eax
c0020410:	e8 f6 f2 ff ff       	call   c001f70b <Vm::fpuLongToFloat(long long)>
c0020415:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002041c:	89 c6                	mov    esi,eax
c002041e:	89 d7                	mov    edi,edx
c0020420:	e8 b8 f4 ff ff       	call   c001f8dd <Vm::fpuGetReg(int)>
c0020425:	57                   	push   edi
c0020426:	56                   	push   esi
c0020427:	52                   	push   edx
c0020428:	50                   	push   eax
c0020429:	e8 5e f4 ff ff       	call   c001f88c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002042e:	83 c4 1c             	add    esp,0x1c
c0020431:	52                   	push   edx
c0020432:	50                   	push   eax
c0020433:	6a 00                	push   0x0
c0020435:	e8 e6 f4 ff ff       	call   c001f920 <Vm::fpuSetReg(int, unsigned long long)>
c002043a:	e9 f2 f7 ff ff       	jmp    c001fc31 <Vm::x87Handler(regs*)+0x217>
c002043f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020443:	80 fa 05             	cmp    dl,0x5
c0020446:	75 11                	jne    c0020459 <Vm::x87Handler(regs*)+0xa3f>
c0020448:	55                   	push   ebp
c0020449:	55                   	push   ebp
c002044a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002044d:	ff 36                	push   DWORD PTR [esi]
c002044f:	e8 81 f2 ff ff       	call   c001f6d5 <Vm::fpuULongToFloat(unsigned long long)>
c0020454:	e9 cf f7 ff ff       	jmp    c001fc28 <Vm::x87Handler(regs*)+0x20e>
c0020459:	31 c0                	xor    eax,eax
c002045b:	80 fa 07             	cmp    dl,0x7
c002045e:	75 1b                	jne    c002047b <Vm::x87Handler(regs*)+0xa61>
c0020460:	e8 63 f5 ff ff       	call   c001f9c8 <Vm::fpuPop()>
c0020465:	51                   	push   ecx
c0020466:	51                   	push   ecx
c0020467:	52                   	push   edx
c0020468:	50                   	push   eax
c0020469:	e8 0c f2 ff ff       	call   c001f67a <Vm::fpuFloatToLong(unsigned long long)>
c002046e:	83 c4 10             	add    esp,0x10
c0020471:	89 06                	mov    DWORD PTR [esi],eax
c0020473:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020476:	e9 f8 f7 ff ff       	jmp    c001fc73 <Vm::x87Handler(regs*)+0x259>
c002047b:	83 c4 1c             	add    esp,0x1c
c002047e:	5b                   	pop    ebx
c002047f:	5e                   	pop    esi
c0020480:	5f                   	pop    edi
c0020481:	5d                   	pop    ebp
c0020482:	c3                   	ret    

c0020483 <__static_initialization_and_destruction_0(int, int)>:
c0020483:	83 ec 0c             	sub    esp,0xc
c0020486:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002048b:	75 1a                	jne    c00204a7 <__static_initialization_and_destruction_0(int, int)+0x24>
c002048d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020495:	75 10                	jne    c00204a7 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020497:	83 ec 0c             	sub    esp,0xc
c002049a:	68 60 19 03 c0       	push   0xc0031960
c002049f:	e8 0c 88 00 00       	call   c0028cb0 <Vm::_FPUState::_FPUState()>
c00204a4:	83 c4 10             	add    esp,0x10
c00204a7:	90                   	nop
c00204a8:	83 c4 0c             	add    esp,0xc
c00204ab:	c3                   	ret    

c00204ac <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	83 ec 08             	sub    esp,0x8
c00204b2:	68 ff ff 00 00       	push   0xffff
c00204b7:	6a 01                	push   0x1
c00204b9:	e8 c5 ff ff ff       	call   c0020483 <__static_initialization_and_destruction_0(int, int)>
c00204be:	83 c4 10             	add    esp,0x10
c00204c1:	83 c4 0c             	add    esp,0xc
c00204c4:	c3                   	ret    
c00204c5:	90                   	nop

c00204c6 <FAT::getName()>:
c00204c6:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c00204cb:	c3                   	ret    

c00204cc <FAT::tell(void*, unsigned long long*)>:
c00204cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204d1:	75 06                	jne    c00204d9 <FAT::tell(void*, unsigned long long*)+0xd>
c00204d3:	b8 04 00 00 00       	mov    eax,0x4
c00204d8:	c3                   	ret    
c00204d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204de:	75 06                	jne    c00204e6 <FAT::tell(void*, unsigned long long*)+0x1a>
c00204e0:	b8 04 00 00 00       	mov    eax,0x4
c00204e5:	c3                   	ret    
c00204e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204ea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00204ed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00204f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00204f4:	89 01                	mov    DWORD PTR [ecx],eax
c00204f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00204f9:	b8 00 00 00 00       	mov    eax,0x0
c00204fe:	c3                   	ret    
c00204ff:	90                   	nop

c0020500 <FAT::stat(void*, unsigned long long*)>:
c0020500:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020505:	75 06                	jne    c002050d <FAT::stat(void*, unsigned long long*)+0xd>
c0020507:	b8 04 00 00 00       	mov    eax,0x4
c002050c:	c3                   	ret    
c002050d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020512:	75 06                	jne    c002051a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020514:	b8 04 00 00 00       	mov    eax,0x4
c0020519:	c3                   	ret    
c002051a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002051e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020521:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020524:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020528:	89 01                	mov    DWORD PTR [ecx],eax
c002052a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002052d:	b8 00 00 00 00       	mov    eax,0x0
c0020532:	c3                   	ret    
c0020533:	90                   	nop

c0020534 <FAT::~FAT()>:
c0020534:	83 ec 0c             	sub    esp,0xc
c0020537:	ba f8 c7 02 c0       	mov    edx,0xc002c7f8
c002053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020540:	89 10                	mov    DWORD PTR [eax],edx
c0020542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	50                   	push   eax
c002054a:	e8 d3 2c ff ff       	call   c0013222 <Filesystem::~Filesystem()>
c002054f:	83 c4 10             	add    esp,0x10
c0020552:	90                   	nop
c0020553:	83 c4 0c             	add    esp,0xc
c0020556:	c3                   	ret    
c0020557:	90                   	nop

c0020558 <FAT::~FAT()>:
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	83 ec 0c             	sub    esp,0xc
c002055e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020562:	e8 cd ff ff ff       	call   c0020534 <FAT::~FAT()>
c0020567:	83 c4 10             	add    esp,0x10
c002056a:	83 ec 08             	sub    esp,0x8
c002056d:	6a 08                	push   0x8
c002056f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020573:	e8 a2 28 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0020578:	83 c4 10             	add    esp,0x10
c002057b:	83 c4 0c             	add    esp,0xc
c002057e:	c3                   	ret    
c002057f:	90                   	nop

c0020580 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020580:	83 ec 1c             	sub    esp,0x1c
c0020583:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002058a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002058f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020593:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c002059a:	83 f8 ff             	cmp    eax,0xffffffff
c002059d:	75 34                	jne    c00205d3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002059f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205a3:	88 c2                	mov    dl,al
c00205a5:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00205aa:	01 d0                	add    eax,edx
c00205ac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205b0:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c00205b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205ba:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c00205c1:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00205c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00205ca:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00205d1:	eb 17                	jmp    c00205ea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00205d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205d7:	88 c2                	mov    dl,al
c00205d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205dd:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00205e4:	01 d0                	add    eax,edx
c00205e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205ea:	83 ec 04             	sub    esp,0x4
c00205ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205f5:	8d 44 24 15          	lea    eax,[esp+0x15]
c00205f9:	50                   	push   eax
c00205fa:	e8 39 67 fe ff       	call   c0006d38 <f_getlabel>
c00205ff:	83 c4 10             	add    esp,0x10
c0020602:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002060b:	75 07                	jne    c0020614 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002060d:	b8 00 00 00 00       	mov    eax,0x0
c0020612:	eb 05                	jmp    c0020619 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020614:	b8 01 00 00 00       	mov    eax,0x1
c0020619:	83 c4 1c             	add    esp,0x1c
c002061c:	c3                   	ret    
c002061d:	90                   	nop

c002061e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002061e:	57                   	push   edi
c002061f:	83 ec 58             	sub    esp,0x58
c0020622:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002062a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002062e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020633:	b8 00 00 00 00       	mov    eax,0x0
c0020638:	fc                   	cld    
c0020639:	89 d7                	mov    edi,edx
c002063b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002063d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020641:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020648:	83 f8 ff             	cmp    eax,0xffffffff
c002064b:	75 34                	jne    c0020681 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002064d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020651:	88 c2                	mov    dl,al
c0020653:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020658:	01 d0                	add    eax,edx
c002065a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002065e:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020664:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020668:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c002066f:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020674:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020678:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c002067f:	eb 17                	jmp    c0020698 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020681:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020685:	88 c2                	mov    dl,al
c0020687:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002068b:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020692:	01 d0                	add    eax,edx
c0020694:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020698:	83 ec 08             	sub    esp,0x8
c002069b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002069f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206a3:	50                   	push   eax
c00206a4:	e8 cb 02 fe ff       	call   c0000974 <strcat>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	83 ec 0c             	sub    esp,0xc
c00206af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206b3:	50                   	push   eax
c00206b4:	e8 6d 68 fe ff       	call   c0006f26 <f_setlabel>
c00206b9:	83 c4 10             	add    esp,0x10
c00206bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00206c0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00206c5:	75 07                	jne    c00206ce <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00206c7:	b8 00 00 00 00       	mov    eax,0x0
c00206cc:	eb 05                	jmp    c00206d3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00206ce:	b8 01 00 00 00       	mov    eax,0x1
c00206d3:	83 c4 58             	add    esp,0x58
c00206d6:	5f                   	pop    edi
c00206d7:	c3                   	ret    

c00206d8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00206d8:	83 ec 2c             	sub    esp,0x2c
c00206db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00206e3:	83 ec 08             	sub    esp,0x8
c00206e6:	68 98 c7 02 c0       	push   0xc002c798
c00206eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206ef:	e8 cc 01 fe ff       	call   c00008c0 <strcmp>
c00206f4:	83 c4 10             	add    esp,0x10
c00206f7:	85 c0                	test   eax,eax
c00206f9:	0f 94 c0             	sete   al
c00206fc:	84 c0                	test   al,al
c00206fe:	74 0d                	je     c002070d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020700:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020708:	e9 a6 00 00 00       	jmp    c00207b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002070d:	83 ec 08             	sub    esp,0x8
c0020710:	68 8a c7 02 c0       	push   0xc002c78a
c0020715:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020719:	e8 a2 01 fe ff       	call   c00008c0 <strcmp>
c002071e:	83 c4 10             	add    esp,0x10
c0020721:	85 c0                	test   eax,eax
c0020723:	0f 94 c0             	sete   al
c0020726:	84 c0                	test   al,al
c0020728:	74 0a                	je     c0020734 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002072a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020732:	eb 7f                	jmp    c00207b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020734:	83 ec 08             	sub    esp,0x8
c0020737:	68 90 c7 02 c0       	push   0xc002c790
c002073c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020740:	e8 7b 01 fe ff       	call   c00008c0 <strcmp>
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	85 c0                	test   eax,eax
c002074a:	0f 94 c0             	sete   al
c002074d:	84 c0                	test   al,al
c002074f:	74 0a                	je     c002075b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020751:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020759:	eb 58                	jmp    c00207b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002075b:	83 ec 08             	sub    esp,0x8
c002075e:	68 0c 94 02 c0       	push   0xc002940c
c0020763:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020767:	e8 54 01 fe ff       	call   c00008c0 <strcmp>
c002076c:	83 c4 10             	add    esp,0x10
c002076f:	85 c0                	test   eax,eax
c0020771:	0f 94 c0             	sete   al
c0020774:	84 c0                	test   al,al
c0020776:	74 0a                	je     c0020782 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020778:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020780:	eb 31                	jmp    c00207b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020782:	83 ec 08             	sub    esp,0x8
c0020785:	68 96 c7 02 c0       	push   0xc002c796
c002078a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002078e:	e8 2d 01 fe ff       	call   c00008c0 <strcmp>
c0020793:	83 c4 10             	add    esp,0x10
c0020796:	85 c0                	test   eax,eax
c0020798:	0f 94 c0             	sete   al
c002079b:	84 c0                	test   al,al
c002079d:	74 0a                	je     c00207a9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002079f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207a7:	eb 0a                	jmp    c00207b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a9:	b8 08 00 00 00       	mov    eax,0x8
c00207ae:	e9 04 01 00 00       	jmp    c00208b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207b3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00207ba:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00207bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207c3:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00207ca:	83 f8 ff             	cmp    eax,0xffffffff
c00207cd:	75 34                	jne    c0020803 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00207cf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207d3:	88 c2                	mov    dl,al
c00207d5:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00207da:	01 d0                	add    eax,edx
c00207dc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207e0:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c00207e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207ea:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c00207f1:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00207f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00207fa:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020801:	eb 17                	jmp    c002081a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020803:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020807:	88 c2                	mov    dl,al
c0020809:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002080d:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020814:	01 d0                	add    eax,edx
c0020816:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002081a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002081e:	88 04 24             	mov    BYTE PTR [esp],al
c0020821:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020829:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020831:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020836:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002083e:	83 ec 0c             	sub    esp,0xc
c0020841:	68 00 20 00 00       	push   0x2000
c0020846:	e8 f5 ef fe ff       	call   c000f840 <malloc>
c002084b:	83 c4 10             	add    esp,0x10
c002084e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020852:	68 00 20 00 00       	push   0x2000
c0020857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002085b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002085f:	50                   	push   eax
c0020860:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020864:	50                   	push   eax
c0020865:	e8 07 6b fe ff       	call   c0007371 <f_mkfs>
c002086a:	83 c4 10             	add    esp,0x10
c002086d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020871:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020876:	75 07                	jne    c002087f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020878:	b8 00 00 00 00       	mov    eax,0x0
c002087d:	eb 38                	jmp    c00208b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002087f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020884:	75 17                	jne    c002089d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020886:	83 ec 0c             	sub    esp,0xc
c0020889:	68 c8 c7 02 c0       	push   0xc002c7c8
c002088e:	e8 67 26 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0020893:	83 c4 10             	add    esp,0x10
c0020896:	b8 09 00 00 00       	mov    eax,0x9
c002089b:	eb 1a                	jmp    c00208b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002089d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208a1:	83 ec 08             	sub    esp,0x8
c00208a4:	50                   	push   eax
c00208a5:	68 9c c7 02 c0       	push   0xc002c79c
c00208aa:	e8 4b 26 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00208af:	83 c4 10             	add    esp,0x10
c00208b2:	b8 01 00 00 00       	mov    eax,0x1
c00208b7:	83 c4 2c             	add    esp,0x2c
c00208ba:	c3                   	ret    
c00208bb:	90                   	nop

c00208bc <FAT::tryMount(LogicalDisk*, int)>:
c00208bc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208c2:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00208c7:	83 f8 14             	cmp    eax,0x14
c00208ca:	75 17                	jne    c00208e3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00208cc:	83 ec 0c             	sub    esp,0xc
c00208cf:	68 ae c7 02 c0       	push   0xc002c7ae
c00208d4:	e8 d2 9c ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00208d9:	83 c4 10             	add    esp,0x10
c00208dc:	b0 00                	mov    al,0x0
c00208de:	e9 d7 01 00 00       	jmp    c0020aba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208e3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00208ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208f6:	3d 00 02 00 00       	cmp    eax,0x200
c00208fb:	74 07                	je     c0020904 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00208fd:	b0 00                	mov    al,0x0
c00208ff:	e9 b6 01 00 00       	jmp    c0020aba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020904:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002090c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020913:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c002091a:	83 f8 ff             	cmp    eax,0xffffffff
c002091d:	74 07                	je     c0020926 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002091f:	b0 01                	mov    al,0x1
c0020921:	e9 94 01 00 00       	jmp    c0020aba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020926:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020930:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020938:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002093f:	88 c2                	mov    dl,al
c0020941:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020946:	01 d0                	add    eax,edx
c0020948:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002094f:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020955:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002095c:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0020963:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020968:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002096f:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020976:	83 ec 0c             	sub    esp,0xc
c0020979:	68 54 02 00 00       	push   0x254
c002097e:	e8 bd ee fe ff       	call   c000f840 <malloc>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002098d:	83 ec 04             	sub    esp,0x4
c0020990:	6a 00                	push   0x0
c0020992:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020999:	50                   	push   eax
c002099a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209a1:	e8 89 45 fe ff       	call   c0004f2f <f_mount>
c00209a6:	83 c4 10             	add    esp,0x10
c00209a9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209b0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209b8:	74 19                	je     c00209d3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00209ba:	83 ec 0c             	sub    esp,0xc
c00209bd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209c4:	e8 97 ee fe ff       	call   c000f860 <rfree>
c00209c9:	83 c4 10             	add    esp,0x10
c00209cc:	b0 00                	mov    al,0x0
c00209ce:	e9 e7 00 00 00       	jmp    c0020aba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209d3:	83 ec 04             	sub    esp,0x4
c00209d6:	68 00 01 00 00       	push   0x100
c00209db:	6a 00                	push   0x0
c00209dd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209e4:	50                   	push   eax
c00209e5:	e8 8e fd fd ff       	call   c0000778 <memset>
c00209ea:	83 c4 10             	add    esp,0x10
c00209ed:	83 ec 08             	sub    esp,0x8
c00209f0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209f7:	50                   	push   eax
c00209f8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209ff:	50                   	push   eax
c0020a00:	e8 6f ff fd ff       	call   c0000974 <strcat>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	83 ec 08             	sub    esp,0x8
c0020a0b:	68 bc c7 02 c0       	push   0xc002c7bc
c0020a10:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a17:	50                   	push   eax
c0020a18:	e8 57 ff fd ff       	call   c0000974 <strcat>
c0020a1d:	83 c4 10             	add    esp,0x10
c0020a20:	83 ec 04             	sub    esp,0x4
c0020a23:	6a 01                	push   0x1
c0020a25:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a2c:	50                   	push   eax
c0020a2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a31:	50                   	push   eax
c0020a32:	e8 5a 45 fe ff       	call   c0004f91 <f_open>
c0020a37:	83 c4 10             	add    esp,0x10
c0020a3a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a41:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a48:	85 c0                	test   eax,eax
c0020a4a:	74 0a                	je     c0020a56 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a4c:	78 2d                	js     c0020a7b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a4e:	83 e8 04             	sub    eax,0x4
c0020a51:	83 f8 01             	cmp    eax,0x1
c0020a54:	77 25                	ja     c0020a7b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a56:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a5e:	83 ec 0c             	sub    esp,0xc
c0020a61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a65:	50                   	push   eax
c0020a66:	e8 78 50 fe ff       	call   c0005ae3 <f_close>
c0020a6b:	83 c4 10             	add    esp,0x10
c0020a6e:	90                   	nop
c0020a6f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a77:	74 3a                	je     c0020ab3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a79:	eb 2d                	jmp    c0020aa8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a7b:	83 ec 0c             	sub    esp,0xc
c0020a7e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a85:	e8 d6 ed fe ff       	call   c000f860 <rfree>
c0020a8a:	83 c4 10             	add    esp,0x10
c0020a8d:	83 ec 04             	sub    esp,0x4
c0020a90:	6a 00                	push   0x0
c0020a92:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a99:	50                   	push   eax
c0020a9a:	6a 00                	push   0x0
c0020a9c:	e8 8e 44 fe ff       	call   c0004f2f <f_mount>
c0020aa1:	83 c4 10             	add    esp,0x10
c0020aa4:	b0 00                	mov    al,0x0
c0020aa6:	eb 12                	jmp    c0020aba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aa8:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020aad:	40                   	inc    eax
c0020aae:	a3 c0 19 03 c0       	mov    ds:0xc00319c0,eax
c0020ab3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020aba:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020ac0:	c3                   	ret    
c0020ac1:	90                   	nop

c0020ac2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ac2:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020ac8:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020ad0:	74 0a                	je     c0020adc <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ad2:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ada:	75 0a                	jne    c0020ae6 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020adc:	b8 04 00 00 00       	mov    eax,0x4
c0020ae1:	e9 db 00 00 00       	jmp    c0020bc1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ae6:	83 ec 08             	sub    esp,0x8
c0020ae9:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020af0:	50                   	push   eax
c0020af1:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020af8:	e8 f0 55 fe ff       	call   c00060ed <f_readdir>
c0020afd:	83 c4 10             	add    esp,0x10
c0020b00:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b07:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b0d:	83 ec 0c             	sub    esp,0xc
c0020b10:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b17:	83 c0 1a             	add    eax,0x1a
c0020b1a:	50                   	push   eax
c0020b1b:	e8 74 fc fd ff       	call   c0000794 <strlen>
c0020b20:	83 c4 10             	add    esp,0x10
c0020b23:	ba 00 00 00 00       	mov    edx,0x0
c0020b28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b2c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b30:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b37:	0f b6 c0             	movzx  eax,al
c0020b3a:	83 e0 10             	and    eax,0x10
c0020b3d:	74 07                	je     c0020b46 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b3f:	b8 02 00 00 00       	mov    eax,0x2
c0020b44:	eb 05                	jmp    c0020b4b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b46:	b8 01 00 00 00       	mov    eax,0x1
c0020b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b4f:	83 ec 08             	sub    esp,0x8
c0020b52:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b59:	83 c0 1a             	add    eax,0x1a
c0020b5c:	50                   	push   eax
c0020b5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b61:	83 c0 10             	add    eax,0x10
c0020b64:	50                   	push   eax
c0020b65:	e8 ca fc fd ff       	call   c0000834 <strcpy>
c0020b6a:	83 c4 10             	add    esp,0x10
c0020b6d:	83 ec 04             	sub    esp,0x4
c0020b70:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b77:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b7b:	50                   	push   eax
c0020b7c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020b83:	e8 bc fb fd ff       	call   c0000744 <memcpy>
c0020b88:	83 c4 10             	add    esp,0x10
c0020b8b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020b92:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b98:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020b9f:	84 c0                	test   al,al
c0020ba1:	75 07                	jne    c0020baa <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ba3:	b8 07 00 00 00       	mov    eax,0x7
c0020ba8:	eb 17                	jmp    c0020bc1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020baa:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bb1:	85 c0                	test   eax,eax
c0020bb3:	75 07                	jne    c0020bbc <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bb5:	b8 00 00 00 00       	mov    eax,0x0
c0020bba:	eb 05                	jmp    c0020bc1 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bbc:	b8 01 00 00 00       	mov    eax,0x1
c0020bc1:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020bc7:	c3                   	ret    

c0020bc8 <FAT::read(void*, unsigned long, void*, int*)>:
c0020bc8:	83 ec 1c             	sub    esp,0x1c
c0020bcb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bd0:	74 07                	je     c0020bd9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020bd2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020bd7:	75 07                	jne    c0020be0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020bd9:	b8 04 00 00 00       	mov    eax,0x4
c0020bde:	eb 3d                	jmp    c0020c1d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020be0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020be4:	50                   	push   eax
c0020be5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020be9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020bed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bf1:	e8 d7 47 fe ff       	call   c00053cd <f_read>
c0020bf6:	83 c4 10             	add    esp,0x10
c0020bf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c01:	89 c2                	mov    edx,eax
c0020c03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c07:	89 10                	mov    DWORD PTR [eax],edx
c0020c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c0d:	85 c0                	test   eax,eax
c0020c0f:	75 07                	jne    c0020c18 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c11:	b8 00 00 00 00       	mov    eax,0x0
c0020c16:	eb 05                	jmp    c0020c1d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c18:	b8 01 00 00 00       	mov    eax,0x1
c0020c1d:	83 c4 1c             	add    esp,0x1c
c0020c20:	c3                   	ret    
c0020c21:	90                   	nop

c0020c22 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c22:	83 ec 1c             	sub    esp,0x1c
c0020c25:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c2a:	74 07                	je     c0020c33 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c2c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c31:	75 07                	jne    c0020c3a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c33:	b8 04 00 00 00       	mov    eax,0x4
c0020c38:	eb 3d                	jmp    c0020c77 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c3e:	50                   	push   eax
c0020c3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c4b:	e8 fd 49 fe ff       	call   c000564d <f_write>
c0020c50:	83 c4 10             	add    esp,0x10
c0020c53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c5b:	89 c2                	mov    edx,eax
c0020c5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c61:	89 10                	mov    DWORD PTR [eax],edx
c0020c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c67:	85 c0                	test   eax,eax
c0020c69:	75 07                	jne    c0020c72 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c6b:	b8 00 00 00 00       	mov    eax,0x0
c0020c70:	eb 05                	jmp    c0020c77 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c72:	b8 01 00 00 00       	mov    eax,0x1
c0020c77:	83 c4 1c             	add    esp,0x1c
c0020c7a:	c3                   	ret    
c0020c7b:	90                   	nop

c0020c7c <FAT::close(void*)>:
c0020c7c:	83 ec 1c             	sub    esp,0x1c
c0020c7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c84:	75 07                	jne    c0020c8d <FAT::close(void*)+0x11>
c0020c86:	b8 04 00 00 00       	mov    eax,0x4
c0020c8b:	eb 36                	jmp    c0020cc3 <FAT::close(void*)+0x47>
c0020c8d:	83 ec 0c             	sub    esp,0xc
c0020c90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c94:	e8 4a 4e fe ff       	call   c0005ae3 <f_close>
c0020c99:	83 c4 10             	add    esp,0x10
c0020c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca0:	83 ec 0c             	sub    esp,0xc
c0020ca3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ca7:	e8 a4 eb fe ff       	call   c000f850 <free>
c0020cac:	83 c4 10             	add    esp,0x10
c0020caf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cb3:	85 c0                	test   eax,eax
c0020cb5:	75 07                	jne    c0020cbe <FAT::close(void*)+0x42>
c0020cb7:	b8 00 00 00 00       	mov    eax,0x0
c0020cbc:	eb 05                	jmp    c0020cc3 <FAT::close(void*)+0x47>
c0020cbe:	b8 01 00 00 00       	mov    eax,0x1
c0020cc3:	83 c4 1c             	add    esp,0x1c
c0020cc6:	c3                   	ret    
c0020cc7:	90                   	nop

c0020cc8 <FAT::closeDir(void*)>:
c0020cc8:	83 ec 1c             	sub    esp,0x1c
c0020ccb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cd0:	75 07                	jne    c0020cd9 <FAT::closeDir(void*)+0x11>
c0020cd2:	b8 04 00 00 00       	mov    eax,0x4
c0020cd7:	eb 36                	jmp    c0020d0f <FAT::closeDir(void*)+0x47>
c0020cd9:	83 ec 0c             	sub    esp,0xc
c0020cdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce0:	e8 e6 53 fe ff       	call   c00060cb <f_closedir>
c0020ce5:	83 c4 10             	add    esp,0x10
c0020ce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cec:	83 ec 0c             	sub    esp,0xc
c0020cef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf3:	e8 58 eb fe ff       	call   c000f850 <free>
c0020cf8:	83 c4 10             	add    esp,0x10
c0020cfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cff:	85 c0                	test   eax,eax
c0020d01:	75 07                	jne    c0020d0a <FAT::closeDir(void*)+0x42>
c0020d03:	b8 00 00 00 00       	mov    eax,0x0
c0020d08:	eb 05                	jmp    c0020d0f <FAT::closeDir(void*)+0x47>
c0020d0a:	b8 01 00 00 00       	mov    eax,0x1
c0020d0f:	83 c4 1c             	add    esp,0x1c
c0020d12:	c3                   	ret    
c0020d13:	90                   	nop

c0020d14 <FAT::seek(void*, unsigned long long)>:
c0020d14:	83 ec 2c             	sub    esp,0x2c
c0020d17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d27:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d2c:	75 07                	jne    c0020d35 <FAT::seek(void*, unsigned long long)+0x21>
c0020d2e:	b8 04 00 00 00       	mov    eax,0x4
c0020d33:	eb 2f                	jmp    c0020d64 <FAT::seek(void*, unsigned long long)+0x50>
c0020d35:	83 ec 04             	sub    esp,0x4
c0020d38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d44:	e8 c9 4d fe ff       	call   c0005b12 <f_lseek>
c0020d49:	83 c4 10             	add    esp,0x10
c0020d4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d54:	85 c0                	test   eax,eax
c0020d56:	75 07                	jne    c0020d5f <FAT::seek(void*, unsigned long long)+0x4b>
c0020d58:	b8 00 00 00 00       	mov    eax,0x0
c0020d5d:	eb 05                	jmp    c0020d64 <FAT::seek(void*, unsigned long long)+0x50>
c0020d5f:	b8 01 00 00 00       	mov    eax,0x1
c0020d64:	83 c4 2c             	add    esp,0x2c
c0020d67:	c3                   	ret    

c0020d68 <fatWrapperReadDisk>:
c0020d68:	83 ec 1c             	sub    esp,0x1c
c0020d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d87:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020d8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d92:	83 ec 0c             	sub    esp,0xc
c0020d95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d99:	52                   	push   edx
c0020d9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020da2:	50                   	push   eax
c0020da3:	e8 72 59 ff ff       	call   c001671a <LogicalDisk::read(unsigned long long, int, void*)>
c0020da8:	83 c4 20             	add    esp,0x20
c0020dab:	83 c4 1c             	add    esp,0x1c
c0020dae:	c3                   	ret    

c0020daf <fatWrapperWriteDisk>:
c0020daf:	83 ec 1c             	sub    esp,0x1c
c0020db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020db6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dc9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dce:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020dd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dd9:	83 ec 0c             	sub    esp,0xc
c0020ddc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de0:	52                   	push   edx
c0020de1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020de5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020de9:	50                   	push   eax
c0020dea:	e8 97 59 ff ff       	call   c0016786 <LogicalDisk::write(unsigned long long, int, void*)>
c0020def:	83 c4 20             	add    esp,0x20
c0020df2:	83 c4 1c             	add    esp,0x1c
c0020df5:	c3                   	ret    

c0020df6 <fatWrapperIoctl>:
c0020df6:	53                   	push   ebx
c0020df7:	83 ec 28             	sub    esp,0x28
c0020dfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e02:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e06:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e0a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e0f:	75 31                	jne    c0020e42 <fatWrapperIoctl+0x4c>
c0020e11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e1e:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020e25:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e35:	66 89 02             	mov    WORD PTR [edx],ax
c0020e38:	b8 00 00 00 00       	mov    eax,0x0
c0020e3d:	e9 b2 00 00 00       	jmp    c0020ef4 <fatWrapperIoctl+0xfe>
c0020e42:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e47:	75 6a                	jne    c0020eb3 <fatWrapperIoctl+0xbd>
c0020e49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e51:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e56:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020e5d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e63:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e69:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e6f:	89 c8                	mov    eax,ecx
c0020e71:	89 da                	mov    edx,ebx
c0020e73:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e77:	c1 e0 0a             	shl    eax,0xa
c0020e7a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e7f:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0020e86:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020e8c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020e92:	89 cb                	mov    ebx,ecx
c0020e94:	c1 fb 1f             	sar    ebx,0x1f
c0020e97:	53                   	push   ebx
c0020e98:	51                   	push   ecx
c0020e99:	52                   	push   edx
c0020e9a:	50                   	push   eax
c0020e9b:	e8 bc 5a 00 00       	call   c002695c <__udivdi3>
c0020ea0:	83 c4 10             	add    esp,0x10
c0020ea3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ea7:	89 01                	mov    DWORD PTR [ecx],eax
c0020ea9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eac:	b8 00 00 00 00       	mov    eax,0x0
c0020eb1:	eb 41                	jmp    c0020ef4 <fatWrapperIoctl+0xfe>
c0020eb3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020eb8:	75 07                	jne    c0020ec1 <fatWrapperIoctl+0xcb>
c0020eba:	b8 00 00 00 00       	mov    eax,0x0
c0020ebf:	eb 33                	jmp    c0020ef4 <fatWrapperIoctl+0xfe>
c0020ec1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ec6:	75 19                	jne    c0020ee1 <fatWrapperIoctl+0xeb>
c0020ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ed0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ed4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020eda:	b8 00 00 00 00       	mov    eax,0x0
c0020edf:	eb 13                	jmp    c0020ef4 <fatWrapperIoctl+0xfe>
c0020ee1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ee6:	75 07                	jne    c0020eef <fatWrapperIoctl+0xf9>
c0020ee8:	b8 00 00 00 00       	mov    eax,0x0
c0020eed:	eb 05                	jmp    c0020ef4 <fatWrapperIoctl+0xfe>
c0020eef:	b8 04 00 00 00       	mov    eax,0x4
c0020ef4:	83 c4 28             	add    esp,0x28
c0020ef7:	5b                   	pop    ebx
c0020ef8:	c3                   	ret    
c0020ef9:	90                   	nop

c0020efa <FAT::FAT()>:
c0020efa:	83 ec 1c             	sub    esp,0x1c
c0020efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f01:	83 ec 0c             	sub    esp,0xc
c0020f04:	50                   	push   eax
c0020f05:	e8 f4 22 ff ff       	call   c00131fe <Filesystem::Filesystem()>
c0020f0a:	83 c4 10             	add    esp,0x10
c0020f0d:	ba f8 c7 02 c0       	mov    edx,0xc002c7f8
c0020f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f16:	89 10                	mov    DWORD PTR [eax],edx
c0020f18:	c7 05 c0 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319c0,0x0
c0020f22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f2a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f2f:	7f 15                	jg     c0020f46 <FAT::FAT()+0x4c>
c0020f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f35:	c7 04 85 e0 19 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce620],0xffffffff
c0020f40:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f44:	eb e4                	jmp    c0020f2a <FAT::FAT()+0x30>
c0020f46:	90                   	nop
c0020f47:	83 c4 1c             	add    esp,0x1c
c0020f4a:	c3                   	ret    
c0020f4b:	90                   	nop

c0020f4c <FAT::fixFilepath(char*)>:
c0020f4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f50:	8a 00                	mov    al,BYTE PTR [eax]
c0020f52:	3c 40                	cmp    al,0x40
c0020f54:	7e 2c                	jle    c0020f82 <FAT::fixFilepath(char*)+0x36>
c0020f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f5a:	8a 00                	mov    al,BYTE PTR [eax]
c0020f5c:	83 e8 41             	sub    eax,0x41
c0020f5f:	88 c2                	mov    dl,al
c0020f61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f65:	88 10                	mov    BYTE PTR [eax],dl
c0020f67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f6b:	8a 00                	mov    al,BYTE PTR [eax]
c0020f6d:	0f be c0             	movsx  eax,al
c0020f70:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020f77:	83 c0 30             	add    eax,0x30
c0020f7a:	88 c2                	mov    dl,al
c0020f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f80:	88 10                	mov    BYTE PTR [eax],dl
c0020f82:	90                   	nop
c0020f83:	c3                   	ret    

c0020f84 <FAT::open(char const*, void**, FileOpenMode)>:
c0020f84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f92:	74 0a                	je     c0020f9e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020f94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020f9c:	75 0a                	jne    c0020fa8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020f9e:	b8 04 00 00 00       	mov    eax,0x4
c0020fa3:	e9 fd 00 00 00       	jmp    c00210a5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fa8:	83 ec 08             	sub    esp,0x8
c0020fab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fb6:	50                   	push   eax
c0020fb7:	e8 78 f8 fd ff       	call   c0000834 <strcpy>
c0020fbc:	83 c4 10             	add    esp,0x10
c0020fbf:	83 ec 08             	sub    esp,0x8
c0020fc2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fc6:	50                   	push   eax
c0020fc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fce:	e8 79 ff ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c0020fd3:	83 c4 10             	add    esp,0x10
c0020fd6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020fde:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020fe5:	83 e0 01             	and    eax,0x1
c0020fe8:	74 08                	je     c0020ff2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020fea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ff2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ff9:	83 e0 04             	and    eax,0x4
c0020ffc:	74 10                	je     c002100e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020ffe:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021006:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002100e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021015:	83 e0 02             	and    eax,0x2
c0021018:	74 08                	je     c0021022 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002101a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021022:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021029:	83 e0 08             	and    eax,0x8
c002102c:	74 08                	je     c0021036 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002102e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021036:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002103d:	83 e0 10             	and    eax,0x10
c0021040:	74 08                	je     c002104a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021042:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002104a:	83 ec 0c             	sub    esp,0xc
c002104d:	68 50 02 00 00       	push   0x250
c0021052:	e8 e9 e7 fe ff       	call   c000f840 <malloc>
c0021057:	83 c4 10             	add    esp,0x10
c002105a:	89 c2                	mov    edx,eax
c002105c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021063:	89 10                	mov    DWORD PTR [eax],edx
c0021065:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002106d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021074:	8b 00                	mov    eax,DWORD PTR [eax]
c0021076:	83 ec 04             	sub    esp,0x4
c0021079:	52                   	push   edx
c002107a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002107e:	52                   	push   edx
c002107f:	50                   	push   eax
c0021080:	e8 0c 3f fe ff       	call   c0004f91 <f_open>
c0021085:	83 c4 10             	add    esp,0x10
c0021088:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002108f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021097:	74 07                	je     c00210a0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021099:	b8 01 00 00 00       	mov    eax,0x1
c002109e:	eb 05                	jmp    c00210a5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210a0:	b8 00 00 00 00       	mov    eax,0x0
c00210a5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210ab:	c3                   	ret    

c00210ac <FAT::openDir(char const*, void**)>:
c00210ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ba:	74 0a                	je     c00210c6 <FAT::openDir(char const*, void**)+0x1a>
c00210bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210c4:	75 07                	jne    c00210cd <FAT::openDir(char const*, void**)+0x21>
c00210c6:	b8 04 00 00 00       	mov    eax,0x4
c00210cb:	eb 7d                	jmp    c002114a <FAT::openDir(char const*, void**)+0x9e>
c00210cd:	83 ec 08             	sub    esp,0x8
c00210d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210db:	50                   	push   eax
c00210dc:	e8 53 f7 fd ff       	call   c0000834 <strcpy>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	83 ec 08             	sub    esp,0x8
c00210e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210eb:	50                   	push   eax
c00210ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210f3:	e8 54 fe ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c00210f8:	83 c4 10             	add    esp,0x10
c00210fb:	83 ec 0c             	sub    esp,0xc
c00210fe:	6a 4c                	push   0x4c
c0021100:	e8 3b e7 fe ff       	call   c000f840 <malloc>
c0021105:	83 c4 10             	add    esp,0x10
c0021108:	89 c2                	mov    edx,eax
c002110a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021111:	89 10                	mov    DWORD PTR [eax],edx
c0021113:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002111a:	8b 00                	mov    eax,DWORD PTR [eax]
c002111c:	83 ec 08             	sub    esp,0x8
c002111f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021123:	52                   	push   edx
c0021124:	50                   	push   eax
c0021125:	e8 9f 4e fe ff       	call   c0005fc9 <f_opendir>
c002112a:	83 c4 10             	add    esp,0x10
c002112d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021134:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002113c:	74 07                	je     c0021145 <FAT::openDir(char const*, void**)+0x99>
c002113e:	b8 01 00 00 00       	mov    eax,0x1
c0021143:	eb 05                	jmp    c002114a <FAT::openDir(char const*, void**)+0x9e>
c0021145:	b8 00 00 00 00       	mov    eax,0x0
c002114a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021150:	c3                   	ret    
c0021151:	90                   	nop

c0021152 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021152:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021158:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021160:	75 0a                	jne    c002116c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021162:	b8 04 00 00 00       	mov    eax,0x4
c0021167:	e9 c9 00 00 00       	jmp    c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002116c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021174:	75 0a                	jne    c0021180 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021176:	b8 04 00 00 00       	mov    eax,0x4
c002117b:	e9 b5 00 00 00       	jmp    c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021180:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021188:	75 0a                	jne    c0021194 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002118a:	b8 04 00 00 00       	mov    eax,0x4
c002118f:	e9 a1 00 00 00       	jmp    c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021194:	83 ec 08             	sub    esp,0x8
c0021197:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002119e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211a5:	50                   	push   eax
c00211a6:	e8 89 f6 fd ff       	call   c0000834 <strcpy>
c00211ab:	83 c4 10             	add    esp,0x10
c00211ae:	83 ec 08             	sub    esp,0x8
c00211b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211b8:	50                   	push   eax
c00211b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211c0:	e8 87 fd ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c00211c5:	83 c4 10             	add    esp,0x10
c00211c8:	83 ec 08             	sub    esp,0x8
c00211cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211cf:	50                   	push   eax
c00211d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211d7:	50                   	push   eax
c00211d8:	e8 ab 4f fe ff       	call   c0006188 <f_stat>
c00211dd:	83 c4 10             	add    esp,0x10
c00211e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00211e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00211ee:	85 c0                	test   eax,eax
c00211f0:	74 07                	je     c00211f9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00211f2:	83 f8 04             	cmp    eax,0x4
c00211f5:	74 32                	je     c0021229 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00211f7:	eb 37                	jmp    c0021230 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00211f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00211fd:	0f b6 c0             	movzx  eax,al
c0021200:	83 e0 10             	and    eax,0x10
c0021203:	0f 95 c2             	setne  dl
c0021206:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002120d:	88 10                	mov    BYTE PTR [eax],dl
c002120f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021212:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021216:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002121d:	89 01                	mov    DWORD PTR [ecx],eax
c002121f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021222:	b8 00 00 00 00       	mov    eax,0x0
c0021227:	eb 0c                	jmp    c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021229:	b8 02 00 00 00       	mov    eax,0x2
c002122e:	eb 05                	jmp    c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021230:	b8 01 00 00 00       	mov    eax,0x1
c0021235:	81 c4 2c 02 00 00    	add    esp,0x22c
c002123b:	c3                   	ret    

c002123c <FAT::unlink(char const*)>:
c002123c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021242:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002124a:	75 07                	jne    c0021253 <FAT::unlink(char const*)+0x17>
c002124c:	b8 04 00 00 00       	mov    eax,0x4
c0021251:	eb 5c                	jmp    c00212af <FAT::unlink(char const*)+0x73>
c0021253:	83 ec 08             	sub    esp,0x8
c0021256:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002125d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021261:	50                   	push   eax
c0021262:	e8 cd f5 fd ff       	call   c0000834 <strcpy>
c0021267:	83 c4 10             	add    esp,0x10
c002126a:	83 ec 08             	sub    esp,0x8
c002126d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021271:	50                   	push   eax
c0021272:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021279:	e8 ce fc ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	83 ec 0c             	sub    esp,0xc
c0021284:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021288:	50                   	push   eax
c0021289:	e8 4c 52 fe ff       	call   c00064da <f_unlink>
c002128e:	83 c4 10             	add    esp,0x10
c0021291:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021298:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002129f:	85 c0                	test   eax,eax
c00212a1:	75 07                	jne    c00212aa <FAT::unlink(char const*)+0x6e>
c00212a3:	b8 00 00 00 00       	mov    eax,0x0
c00212a8:	eb 05                	jmp    c00212af <FAT::unlink(char const*)+0x73>
c00212aa:	b8 01 00 00 00       	mov    eax,0x1
c00212af:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212b5:	c3                   	ret    

c00212b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212b6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212bc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212c3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212ca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212d2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212da:	75 0a                	jne    c00212e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212dc:	b8 04 00 00 00       	mov    eax,0x4
c00212e1:	e9 1c 01 00 00       	jmp    c0021402 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212e6:	83 ec 08             	sub    esp,0x8
c00212e9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212f0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212f4:	50                   	push   eax
c00212f5:	e8 3a f5 fd ff       	call   c0000834 <strcpy>
c00212fa:	83 c4 10             	add    esp,0x10
c00212fd:	83 ec 08             	sub    esp,0x8
c0021300:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021304:	50                   	push   eax
c0021305:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002130c:	e8 3b fc ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c0021311:	83 c4 10             	add    esp,0x10
c0021314:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002131c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021324:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021329:	83 e0 01             	and    eax,0x1
c002132c:	74 08                	je     c0021336 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002132e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021336:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002133b:	83 e0 02             	and    eax,0x2
c002133e:	74 08                	je     c0021348 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021340:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021348:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002134d:	83 e0 04             	and    eax,0x4
c0021350:	74 08                	je     c002135a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021352:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002135a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002135f:	83 e0 08             	and    eax,0x8
c0021362:	74 08                	je     c002136c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021364:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002136c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021371:	83 e0 01             	and    eax,0x1
c0021374:	74 08                	je     c002137e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021376:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002137e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021383:	83 e0 02             	and    eax,0x2
c0021386:	74 08                	je     c0021390 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021388:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021390:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021395:	83 e0 04             	and    eax,0x4
c0021398:	74 08                	je     c00213a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002139a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a7:	83 e0 08             	and    eax,0x8
c00213aa:	74 08                	je     c00213b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213ac:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213b4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213bb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213c2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213ca:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213d2:	83 ec 04             	sub    esp,0x4
c00213d5:	52                   	push   edx
c00213d6:	50                   	push   eax
c00213d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213db:	50                   	push   eax
c00213dc:	e8 9b 57 fe ff       	call   c0006b7c <f_chmod>
c00213e1:	83 c4 10             	add    esp,0x10
c00213e4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00213eb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00213f2:	85 c0                	test   eax,eax
c00213f4:	75 07                	jne    c00213fd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00213f6:	b8 00 00 00 00       	mov    eax,0x0
c00213fb:	eb 05                	jmp    c0021402 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213fd:	b8 01 00 00 00       	mov    eax,0x1
c0021402:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021408:	c3                   	ret    
c0021409:	90                   	nop

c002140a <FAT::rename(char const*, char const*)>:
c002140a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021410:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021418:	74 0a                	je     c0021424 <FAT::rename(char const*, char const*)+0x1a>
c002141a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021422:	75 0a                	jne    c002142e <FAT::rename(char const*, char const*)+0x24>
c0021424:	b8 04 00 00 00       	mov    eax,0x4
c0021429:	e9 98 00 00 00       	jmp    c00214c6 <FAT::rename(char const*, char const*)+0xbc>
c002142e:	83 ec 08             	sub    esp,0x8
c0021431:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021438:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002143f:	50                   	push   eax
c0021440:	e8 ef f3 fd ff       	call   c0000834 <strcpy>
c0021445:	83 c4 10             	add    esp,0x10
c0021448:	83 ec 08             	sub    esp,0x8
c002144b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021452:	50                   	push   eax
c0021453:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002145a:	e8 ed fa ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c002145f:	83 c4 10             	add    esp,0x10
c0021462:	83 ec 08             	sub    esp,0x8
c0021465:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002146c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021470:	50                   	push   eax
c0021471:	e8 be f3 fd ff       	call   c0000834 <strcpy>
c0021476:	83 c4 10             	add    esp,0x10
c0021479:	83 ec 08             	sub    esp,0x8
c002147c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021480:	50                   	push   eax
c0021481:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021488:	e8 bf fa ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	83 ec 08             	sub    esp,0x8
c0021493:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021497:	50                   	push   eax
c0021498:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002149f:	50                   	push   eax
c00214a0:	e8 e4 53 fe ff       	call   c0006889 <f_rename>
c00214a5:	83 c4 10             	add    esp,0x10
c00214a8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214af:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214b6:	85 c0                	test   eax,eax
c00214b8:	75 07                	jne    c00214c1 <FAT::rename(char const*, char const*)+0xb7>
c00214ba:	b8 00 00 00 00       	mov    eax,0x0
c00214bf:	eb 05                	jmp    c00214c6 <FAT::rename(char const*, char const*)+0xbc>
c00214c1:	b8 01 00 00 00       	mov    eax,0x1
c00214c6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214cc:	c3                   	ret    
c00214cd:	90                   	nop

c00214ce <FAT::mkdir(char const*)>:
c00214ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214d4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214dc:	75 07                	jne    c00214e5 <FAT::mkdir(char const*)+0x17>
c00214de:	b8 04 00 00 00       	mov    eax,0x4
c00214e3:	eb 5c                	jmp    c0021541 <FAT::mkdir(char const*)+0x73>
c00214e5:	83 ec 08             	sub    esp,0x8
c00214e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214f3:	50                   	push   eax
c00214f4:	e8 3b f3 fd ff       	call   c0000834 <strcpy>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	83 ec 08             	sub    esp,0x8
c00214ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021503:	50                   	push   eax
c0021504:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002150b:	e8 3c fa ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c0021510:	83 c4 10             	add    esp,0x10
c0021513:	83 ec 0c             	sub    esp,0xc
c0021516:	8d 44 24 18          	lea    eax,[esp+0x18]
c002151a:	50                   	push   eax
c002151b:	e8 3d 51 fe ff       	call   c000665d <f_mkdir>
c0021520:	83 c4 10             	add    esp,0x10
c0021523:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002152a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021531:	85 c0                	test   eax,eax
c0021533:	75 07                	jne    c002153c <FAT::mkdir(char const*)+0x6e>
c0021535:	b8 00 00 00 00       	mov    eax,0x0
c002153a:	eb 05                	jmp    c0021541 <FAT::mkdir(char const*)+0x73>
c002153c:	b8 01 00 00 00       	mov    eax,0x1
c0021541:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021547:	c3                   	ret    

c0021548 <FAT::exists(char const*)>:
c0021548:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002154e:	83 ec 08             	sub    esp,0x8
c0021551:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021558:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002155c:	50                   	push   eax
c002155d:	e8 d2 f2 fd ff       	call   c0000834 <strcpy>
c0021562:	83 c4 10             	add    esp,0x10
c0021565:	83 ec 08             	sub    esp,0x8
c0021568:	8d 44 24 08          	lea    eax,[esp+0x8]
c002156c:	50                   	push   eax
c002156d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021574:	e8 d3 f9 ff ff       	call   c0020f4c <FAT::fixFilepath(char*)>
c0021579:	83 c4 10             	add    esp,0x10
c002157c:	83 ec 08             	sub    esp,0x8
c002157f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021586:	50                   	push   eax
c0021587:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002158b:	50                   	push   eax
c002158c:	e8 f7 4b fe ff       	call   c0006188 <f_stat>
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002159b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215a2:	85 c0                	test   eax,eax
c00215a4:	75 04                	jne    c00215aa <FAT::exists(char const*)+0x62>
c00215a6:	b0 01                	mov    al,0x1
c00215a8:	eb 02                	jmp    c00215ac <FAT::exists(char const*)+0x64>
c00215aa:	b0 00                	mov    al,0x0
c00215ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215b2:	c3                   	ret    
c00215b3:	90                   	nop

c00215b4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215b4:	b8 08 00 00 00       	mov    eax,0x8
c00215b9:	c3                   	ret    

c00215ba <ISO9660::seek(void*, unsigned long long)>:
c00215ba:	53                   	push   ebx
c00215bb:	b8 04 00 00 00       	mov    eax,0x4
c00215c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215cc:	85 d2                	test   edx,edx
c00215ce:	74 17                	je     c00215e7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215d0:	89 c8                	mov    eax,ecx
c00215d2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215d5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215d8:	b8 01 00 00 00       	mov    eax,0x1
c00215dd:	73 08                	jae    c00215e7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215df:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00215e2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00215e5:	31 c0                	xor    eax,eax
c00215e7:	5b                   	pop    ebx
c00215e8:	c3                   	ret    
c00215e9:	90                   	nop

c00215ea <ISO9660::tell(void*, unsigned long long*)>:
c00215ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215f2:	85 d2                	test   edx,edx
c00215f4:	74 12                	je     c0021608 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00215f6:	85 c0                	test   eax,eax
c00215f8:	74 0e                	je     c0021608 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00215fa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00215fd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021600:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021603:	89 10                	mov    DWORD PTR [eax],edx
c0021605:	31 c0                	xor    eax,eax
c0021607:	c3                   	ret    
c0021608:	b8 04 00 00 00       	mov    eax,0x4
c002160d:	c3                   	ret    

c002160e <ISO9660::getName()>:
c002160e:	b8 54 c8 02 c0       	mov    eax,0xc002c854
c0021613:	c3                   	ret    

c0021614 <ISO9660::stat(void*, unsigned long long*)>:
c0021614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002161c:	85 d2                	test   edx,edx
c002161e:	74 12                	je     c0021632 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021620:	85 c0                	test   eax,eax
c0021622:	74 0e                	je     c0021632 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021624:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021627:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002162a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002162d:	89 10                	mov    DWORD PTR [eax],edx
c002162f:	31 c0                	xor    eax,eax
c0021631:	c3                   	ret    
c0021632:	b8 04 00 00 00       	mov    eax,0x4
c0021637:	c3                   	ret    

c0021638 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021638:	b8 01 00 00 00       	mov    eax,0x1
c002163d:	c3                   	ret    

c002163e <ISO9660::unlink(char const*)>:
c002163e:	b8 01 00 00 00       	mov    eax,0x1
c0021643:	c3                   	ret    

c0021644 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021644:	b8 01 00 00 00       	mov    eax,0x1
c0021649:	c3                   	ret    

c002164a <ISO9660::rename(char const*, char const*)>:
c002164a:	b8 01 00 00 00       	mov    eax,0x1
c002164f:	c3                   	ret    

c0021650 <ISO9660::mkdir(char const*)>:
c0021650:	b8 01 00 00 00       	mov    eax,0x1
c0021655:	c3                   	ret    

c0021656 <ISO9660::close(void*)>:
c0021656:	83 ec 0c             	sub    esp,0xc
c0021659:	b8 04 00 00 00       	mov    eax,0x4
c002165e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021662:	85 d2                	test   edx,edx
c0021664:	74 0e                	je     c0021674 <ISO9660::close(void*)+0x1e>
c0021666:	83 ec 0c             	sub    esp,0xc
c0021669:	52                   	push   edx
c002166a:	e8 e1 e1 fe ff       	call   c000f850 <free>
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	31 c0                	xor    eax,eax
c0021674:	83 c4 0c             	add    esp,0xc
c0021677:	c3                   	ret    

c0021678 <ISO9660::closeDir(void*)>:
c0021678:	83 ec 0c             	sub    esp,0xc
c002167b:	b8 04 00 00 00       	mov    eax,0x4
c0021680:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021684:	85 d2                	test   edx,edx
c0021686:	74 0e                	je     c0021696 <ISO9660::closeDir(void*)+0x1e>
c0021688:	83 ec 0c             	sub    esp,0xc
c002168b:	52                   	push   edx
c002168c:	e8 bf e1 fe ff       	call   c000f850 <free>
c0021691:	83 c4 10             	add    esp,0x10
c0021694:	31 c0                	xor    eax,eax
c0021696:	83 c4 0c             	add    esp,0xc
c0021699:	c3                   	ret    

c002169a <ISO9660::~ISO9660()>:
c002169a:	83 ec 0c             	sub    esp,0xc
c002169d:	ba b8 c8 02 c0       	mov    edx,0xc002c8b8
c00216a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a6:	89 10                	mov    DWORD PTR [eax],edx
c00216a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	50                   	push   eax
c00216b0:	e8 6d 1b ff ff       	call   c0013222 <Filesystem::~Filesystem()>
c00216b5:	83 c4 10             	add    esp,0x10
c00216b8:	90                   	nop
c00216b9:	83 c4 0c             	add    esp,0xc
c00216bc:	c3                   	ret    
c00216bd:	90                   	nop

c00216be <ISO9660::~ISO9660()>:
c00216be:	83 ec 0c             	sub    esp,0xc
c00216c1:	83 ec 0c             	sub    esp,0xc
c00216c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216c8:	e8 cd ff ff ff       	call   c002169a <ISO9660::~ISO9660()>
c00216cd:	83 c4 10             	add    esp,0x10
c00216d0:	83 ec 08             	sub    esp,0x8
c00216d3:	6a 08                	push   0x8
c00216d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216d9:	e8 3c 17 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00216de:	83 c4 10             	add    esp,0x10
c00216e1:	83 c4 0c             	add    esp,0xc
c00216e4:	c3                   	ret    

c00216e5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00216e5:	55                   	push   ebp
c00216e6:	31 c9                	xor    ecx,ecx
c00216e8:	57                   	push   edi
c00216e9:	56                   	push   esi
c00216ea:	53                   	push   ebx
c00216eb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00216ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00216f3:	89 eb                	mov    ebx,ebp
c00216f5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00216f9:	39 ce                	cmp    esi,ecx
c00216fb:	7e 17                	jle    c0021714 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00216fd:	31 d2                	xor    edx,edx
c00216ff:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021703:	7d 13                	jge    c0021718 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021705:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021709:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002170c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002170f:	75 0d                	jne    c002171e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021711:	42                   	inc    edx
c0021712:	eb eb                	jmp    c00216ff <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021714:	31 c0                	xor    eax,eax
c0021716:	eb 0a                	jmp    c0021722 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021718:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002171c:	eb 04                	jmp    c0021722 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002171e:	41                   	inc    ecx
c002171f:	43                   	inc    ebx
c0021720:	eb d7                	jmp    c00216f9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021722:	5b                   	pop    ebx
c0021723:	5e                   	pop    esi
c0021724:	5f                   	pop    edi
c0021725:	5d                   	pop    ebp
c0021726:	c3                   	ret    

c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021727:	56                   	push   esi
c0021728:	53                   	push   ebx
c0021729:	52                   	push   edx
c002172a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002172e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021736:	39 0d c0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ac0,ecx
c002173c:	75 08                	jne    c0021746 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002173e:	38 05 14 d9 02 c0    	cmp    BYTE PTR ds:0xc002d914,al
c0021744:	74 2b                	je     c0021771 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	a2 14 d9 02 c0       	mov    ds:0xc002d914,al
c002174e:	68 e0 1a 03 c0       	push   0xc0031ae0
c0021753:	0f be c0             	movsx  eax,al
c0021756:	6a 01                	push   0x1
c0021758:	89 0d c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,ecx
c002175e:	31 db                	xor    ebx,ebx
c0021760:	53                   	push   ebx
c0021761:	51                   	push   ecx
c0021762:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0021769:	e8 ac 4f ff ff       	call   c001671a <LogicalDisk::read(unsigned long long, int, void*)>
c002176e:	83 c4 20             	add    esp,0x20
c0021771:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021779:	c7 44 24 14 e0 1a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ae0
c0021781:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021785:	58                   	pop    eax
c0021786:	5b                   	pop    ebx
c0021787:	5e                   	pop    esi
c0021788:	e9 b7 ef fd ff       	jmp    c0000744 <memcpy>
c002178d:	90                   	nop

c002178e <ISO9660::tryMount(LogicalDisk*, int)>:
c002178e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021794:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002179b:	83 c0 41             	add    eax,0x41
c002179e:	0f be c0             	movsx  eax,al
c00217a1:	50                   	push   eax
c00217a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217a6:	50                   	push   eax
c00217a7:	6a 10                	push   0x10
c00217a9:	e8 79 ff ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217ae:	83 c4 10             	add    esp,0x10
c00217b1:	31 c0                	xor    eax,eax
c00217b3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217b8:	75 1d                	jne    c00217d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ba:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217bf:	75 16                	jne    c00217d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217c1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217c6:	75 0f                	jne    c00217d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217c8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217cd:	75 08                	jne    c00217d7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217cf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217d4:	0f 94 c0             	sete   al
c00217d7:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217dd:	c3                   	ret    

c00217de <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217de:	55                   	push   ebp
c00217df:	57                   	push   edi
c00217e0:	56                   	push   esi
c00217e1:	53                   	push   ebx
c00217e2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00217e8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00217ef:	85 ed                	test   ebp,ebp
c00217f1:	0f 84 d6 01 00 00    	je     c00219cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00217f7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00217ff:	0f 84 c8 01 00 00    	je     c00219cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021805:	b8 01 00 00 00       	mov    eax,0x1
c002180a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002180e:	0f 85 be 01 00 00    	jne    c00219d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021814:	31 d2                	xor    edx,edx
c0021816:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002181d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021820:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021823:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021827:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002182a:	89 04 24             	mov    DWORD PTR [esp],eax
c002182d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021831:	01 f0                	add    eax,esi
c0021833:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021836:	11 fa                	adc    edx,edi
c0021838:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002183c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021840:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021844:	19 d1                	sbb    ecx,edx
c0021846:	72 0a                	jb     c0021852 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002184c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021850:	eb 13                	jmp    c0021865 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021856:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002185a:	29 f0                	sub    eax,esi
c002185c:	19 fa                	sbb    edx,edi
c002185e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021861:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021865:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021868:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002186b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002186f:	51                   	push   ecx
c0021870:	c1 e0 0b             	shl    eax,0xb
c0021873:	01 c6                	add    esi,eax
c0021875:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021879:	11 d7                	adc    edi,edx
c002187b:	50                   	push   eax
c002187c:	89 fa                	mov    edx,edi
c002187e:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021882:	89 f0                	mov    eax,esi
c0021884:	53                   	push   ebx
c0021885:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021889:	50                   	push   eax
c002188a:	e8 98 fe ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002188f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021893:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021896:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002189a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218a0:	83 c4 10             	add    esp,0x10
c00218a3:	b8 00 08 00 00       	mov    eax,0x800
c00218a8:	29 d0                	sub    eax,edx
c00218aa:	39 c1                	cmp    ecx,eax
c00218ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218b0:	83 d9 00             	sbb    ecx,0x0
c00218b3:	7d 1c                	jge    c00218d1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218ba:	75 12                	jne    c00218ce <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218bc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218c9:	e9 fb 00 00 00       	jmp    c00219c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00218ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218d1:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00218d4:	31 d2                	xor    edx,edx
c00218d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00218da:	39 c2                	cmp    edx,eax
c00218dc:	7d 14                	jge    c00218f2 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00218de:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00218e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218e9:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00218ec:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00218ef:	42                   	inc    edx
c00218f0:	eb e8                	jmp    c00218da <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00218f2:	89 c3                	mov    ebx,eax
c00218f4:	85 c0                	test   eax,eax
c00218f6:	79 02                	jns    c00218fa <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00218f8:	31 db                	xor    ebx,ebx
c00218fa:	99                   	cdq    
c00218fb:	01 c3                	add    ebx,eax
c00218fd:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021904:	01 c6                	add    esi,eax
c0021906:	11 d7                	adc    edi,edx
c0021908:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002190c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021910:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021913:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021917:	29 c6                	sub    esi,eax
c0021919:	19 d7                	sbb    edi,edx
c002191b:	89 34 24             	mov    DWORD PTR [esp],esi
c002191e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021922:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021927:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002192a:	b8 00 00 00 00       	mov    eax,0x0
c002192f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021933:	7d 3e                	jge    c0021973 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021935:	52                   	push   edx
c0021936:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002193a:	50                   	push   eax
c002193b:	53                   	push   ebx
c002193c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021940:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021944:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021948:	50                   	push   eax
c0021949:	e8 d9 fd ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002194e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021956:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002195b:	81 c3 00 08 00 00    	add    ebx,0x800
c0021961:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021969:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002196e:	83 c4 10             	add    esp,0x10
c0021971:	eb af                	jmp    c0021922 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021977:	0b 04 24             	or     eax,DWORD PTR [esp]
c002197a:	74 32                	je     c00219ae <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002197c:	50                   	push   eax
c002197d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021981:	50                   	push   eax
c0021982:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021986:	50                   	push   eax
c0021987:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002198b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002198f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021993:	56                   	push   esi
c0021994:	e8 8e fd ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021999:	83 c4 0c             	add    esp,0xc
c002199c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219a4:	50                   	push   eax
c00219a5:	53                   	push   ebx
c00219a6:	e8 99 ed fd ff       	call   c0000744 <memcpy>
c00219ab:	83 c4 10             	add    esp,0x10
c00219ae:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219bd:	89 38                	mov    DWORD PTR [eax],edi
c00219bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219c3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219c9:	31 c0                	xor    eax,eax
c00219cb:	eb 05                	jmp    c00219d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219cd:	b8 04 00 00 00       	mov    eax,0x4
c00219d2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219d8:	5b                   	pop    ebx
c00219d9:	5e                   	pop    esi
c00219da:	5f                   	pop    edi
c00219db:	5d                   	pop    ebp
c00219dc:	c3                   	ret    
c00219dd:	90                   	nop

c00219de <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219de:	55                   	push   ebp
c00219df:	57                   	push   edi
c00219e0:	56                   	push   esi
c00219e1:	53                   	push   ebx
c00219e2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00219e8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00219ef:	85 f6                	test   esi,esi
c00219f1:	0f 84 64 02 00 00    	je     c0021c5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00219f7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00219ff:	0f 84 56 02 00 00    	je     c0021c5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a05:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a08:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a0b:	75 0a                	jne    c0021a17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a0d:	b8 07 00 00 00       	mov    eax,0x7
c0021a12:	e9 49 02 00 00       	jmp    c0021c60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a17:	50                   	push   eax
c0021a18:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a1c:	50                   	push   eax
c0021a1d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a24:	53                   	push   ebx
c0021a25:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a27:	c1 e0 0b             	shl    eax,0xb
c0021a2a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a2d:	c1 e8 0b             	shr    eax,0xb
c0021a30:	50                   	push   eax
c0021a31:	e8 f1 fc ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a36:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a39:	83 c4 10             	add    esp,0x10
c0021a3c:	89 c1                	mov    ecx,eax
c0021a3e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a41:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a47:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a4a:	84 db                	test   bl,bl
c0021a4c:	0f 85 90 00 00 00    	jne    c0021ae2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a52:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a58:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a5e:	29 c7                	sub    edi,eax
c0021a60:	89 fb                	mov    ebx,edi
c0021a62:	c1 fb 1f             	sar    ebx,0x1f
c0021a65:	01 f8                	add    eax,edi
c0021a67:	11 da                	adc    edx,ebx
c0021a69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a71:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a74:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a77:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a7a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a84:	89 d8                	mov    eax,ebx
c0021a86:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a89:	ba 00 00 00 00       	mov    edx,0x0
c0021a8e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a92:	b8 00 00 00 00       	mov    eax,0x0
c0021a97:	73 0b                	jae    c0021aa4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021a99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021aa0:	29 f8                	sub    eax,edi
c0021aa2:	19 da                	sbb    edx,ebx
c0021aa4:	89 d3                	mov    ebx,edx
c0021aa6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021aa9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021aac:	09 c3                	or     ebx,eax
c0021aae:	0f 84 59 ff ff ff    	je     c0021a0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ab4:	55                   	push   ebp
c0021ab5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ab9:	50                   	push   eax
c0021aba:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ac1:	53                   	push   ebx
c0021ac2:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ac4:	c1 e0 0b             	shl    eax,0xb
c0021ac7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021acb:	c1 e8 0b             	shr    eax,0xb
c0021ace:	50                   	push   eax
c0021acf:	e8 53 fc ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ad4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ad7:	83 c4 10             	add    esp,0x10
c0021ada:	25 ff 07 00 00       	and    eax,0x7ff
c0021adf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021ae2:	57                   	push   edi
c0021ae3:	6a 28                	push   0x28
c0021ae5:	6a 00                	push   0x0
c0021ae7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021aeb:	50                   	push   eax
c0021aec:	e8 87 ec fd ff       	call   c0000778 <memset>
c0021af1:	31 d2                	xor    edx,edx
c0021af3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021af6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021afc:	89 f8                	mov    eax,edi
c0021afe:	83 c0 21             	add    eax,0x21
c0021b01:	83 d2 00             	adc    edx,0x0
c0021b04:	89 c7                	mov    edi,eax
c0021b06:	89 d5                	mov    ebp,edx
c0021b08:	83 c4 10             	add    esp,0x10
c0021b0b:	31 c9                	xor    ecx,ecx
c0021b0d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b14:	83 f9 28             	cmp    ecx,0x28
c0021b17:	88 04 24             	mov    BYTE PTR [esp],al
c0021b1a:	0f 94 c2             	sete   dl
c0021b1d:	88 d0                	mov    al,dl
c0021b1f:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b24:	39 fa                	cmp    edx,edi
c0021b26:	ba 00 00 00 00       	mov    edx,0x0
c0021b2b:	19 ea                	sbb    edx,ebp
c0021b2d:	0f 92 c2             	setb   dl
c0021b30:	09 c2                	or     edx,eax
c0021b32:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b36:	0f 94 c0             	sete   al
c0021b39:	08 d0                	or     al,dl
c0021b3b:	75 16                	jne    c0021b53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b3d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b41:	74 10                	je     c0021b53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b43:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b46:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b4a:	41                   	inc    ecx
c0021b4b:	83 c7 01             	add    edi,0x1
c0021b4e:	83 d5 00             	adc    ebp,0x0
c0021b51:	eb ba                	jmp    c0021b0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b53:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b5a:	83 ec 0c             	sub    esp,0xc
c0021b5d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b61:	57                   	push   edi
c0021b62:	e8 2d ec fd ff       	call   c0000794 <strlen>
c0021b67:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b6f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b73:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b7a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b7d:	5a                   	pop    edx
c0021b7e:	25 ff 07 00 00       	and    eax,0x7ff
c0021b83:	01 c8                	add    eax,ecx
c0021b85:	59                   	pop    ecx
c0021b86:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021b8c:	83 e0 02             	and    eax,0x2
c0021b8f:	3c 01                	cmp    al,0x1
c0021b91:	19 c0                	sbb    eax,eax
c0021b93:	83 c0 02             	add    eax,0x2
c0021b96:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b9a:	57                   	push   edi
c0021b9b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021b9f:	50                   	push   eax
c0021ba0:	e8 8f ec fd ff       	call   c0000834 <strcpy>
c0021ba5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ba9:	83 c4 10             	add    esp,0x10
c0021bac:	84 c0                	test   al,al
c0021bae:	75 21                	jne    c0021bd1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bb0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bb8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bc0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bc8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bcf:	eb 28                	jmp    c0021bf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bd1:	fe c8                	dec    al
c0021bd3:	75 24                	jne    c0021bf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bd5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021bdd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021be5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bed:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021bf4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021bf9:	0f b6 fb             	movzx  edi,bl
c0021bfc:	31 db                	xor    ebx,ebx
c0021bfe:	50                   	push   eax
c0021bff:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c06:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c0a:	50                   	push   eax
c0021c0b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c12:	e8 2d eb fd ff       	call   c0000744 <memcpy>
c0021c17:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c1e:	89 f9                	mov    ecx,edi
c0021c20:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c26:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c29:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c2c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c2f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c32:	83 c4 10             	add    esp,0x10
c0021c35:	39 c7                	cmp    edi,eax
c0021c37:	89 df                	mov    edi,ebx
c0021c39:	19 d7                	sbb    edi,edx
c0021c3b:	72 10                	jb     c0021c4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c3d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c44:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c4b:	eb 0a                	jmp    c0021c57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c4d:	29 c8                	sub    eax,ecx
c0021c4f:	19 da                	sbb    edx,ebx
c0021c51:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c54:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c57:	31 c0                	xor    eax,eax
c0021c59:	eb 05                	jmp    c0021c60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c5b:	b8 04 00 00 00       	mov    eax,0x4
c0021c60:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c66:	5b                   	pop    ebx
c0021c67:	5e                   	pop    esi
c0021c68:	5f                   	pop    edi
c0021c69:	5d                   	pop    ebp
c0021c6a:	c3                   	ret    

c0021c6b <readRoot(unsigned int*, unsigned int*, char)>:
c0021c6b:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c71:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c79:	50                   	push   eax
c0021c7a:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c7e:	50                   	push   eax
c0021c7f:	6a 10                	push   0x10
c0021c81:	e8 a1 fa ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c86:	83 c4 0c             	add    esp,0xc
c0021c89:	6a 22                	push   0x22
c0021c8b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021c92:	50                   	push   eax
c0021c93:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021c97:	50                   	push   eax
c0021c98:	e8 a7 ea fd ff       	call   c0000744 <memcpy>
c0021c9d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ca4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021ca8:	89 10                	mov    DWORD PTR [eax],edx
c0021caa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cb5:	89 10                	mov    DWORD PTR [eax],edx
c0021cb7:	b0 01                	mov    al,0x1
c0021cb9:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021cbf:	c3                   	ret    

c0021cc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cc0:	55                   	push   ebp
c0021cc1:	57                   	push   edi
c0021cc2:	56                   	push   esi
c0021cc3:	53                   	push   ebx
c0021cc4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cca:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021cd1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cdc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021ce0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021ce4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021ce8:	75 03                	jne    c0021ced <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cea:	83 c3 02             	add    ebx,0x2
c0021ced:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021cf0:	75 03                	jne    c0021cf5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021cf2:	43                   	inc    ebx
c0021cf3:	eb f8                	jmp    c0021ced <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cf5:	51                   	push   ecx
c0021cf6:	68 00 01 00 00       	push   0x100
c0021cfb:	6a 00                	push   0x0
c0021cfd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d01:	50                   	push   eax
c0021d02:	e8 71 ea fd ff       	call   c0000778 <memset>
c0021d07:	83 c4 10             	add    esp,0x10
c0021d0a:	31 d2                	xor    edx,edx
c0021d0c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d0f:	84 c0                	test   al,al
c0021d11:	74 21                	je     c0021d34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d13:	3c 2f                	cmp    al,0x2f
c0021d15:	75 0b                	jne    c0021d22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d17:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d1b:	bd 01 00 00 00       	mov    ebp,0x1
c0021d20:	eb 14                	jmp    c0021d36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d22:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d25:	80 f9 19             	cmp    cl,0x19
c0021d28:	77 03                	ja     c0021d2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d2a:	83 e8 20             	sub    eax,0x20
c0021d2d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d31:	42                   	inc    edx
c0021d32:	eb d8                	jmp    c0021d0c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d34:	31 ed                	xor    ebp,ebp
c0021d36:	83 ec 0c             	sub    esp,0xc
c0021d39:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d40:	e8 fb da fe ff       	call   c000f840 <malloc>
c0021d45:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d4c:	89 c6                	mov    esi,eax
c0021d4e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d54:	c1 ef 0b             	shr    edi,0xb
c0021d57:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d5e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d62:	83 c4 10             	add    esp,0x10
c0021d65:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d6e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d75:	74 28                	je     c0021d9f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d77:	52                   	push   edx
c0021d78:	57                   	push   edi
c0021d79:	50                   	push   eax
c0021d7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d7e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d85:	e8 9d f9 ff ff       	call   c0021727 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d8e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021d95:	05 00 08 00 00       	add    eax,0x800
c0021d9a:	83 c4 10             	add    esp,0x10
c0021d9d:	eb cb                	jmp    c0021d6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021d9f:	83 ec 0c             	sub    esp,0xc
c0021da2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021da6:	57                   	push   edi
c0021da7:	e8 e8 e9 fd ff       	call   c0000794 <strlen>
c0021dac:	50                   	push   eax
c0021dad:	57                   	push   edi
c0021dae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021db5:	56                   	push   esi
c0021db6:	e8 2a f9 ff ff       	call   c00216e5 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021dbb:	83 c4 20             	add    esp,0x20
c0021dbe:	85 c0                	test   eax,eax
c0021dc0:	75 13                	jne    c0021dd5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021dc2:	83 ec 0c             	sub    esp,0xc
c0021dc5:	56                   	push   esi
c0021dc6:	e8 85 da fe ff       	call   c000f850 <free>
c0021dcb:	83 c4 10             	add    esp,0x10
c0021dce:	31 c0                	xor    eax,eax
c0021dd0:	e9 b3 00 00 00       	jmp    c0021e88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021dd5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021dd9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021ddd:	c1 e7 08             	shl    edi,0x8
c0021de0:	c1 e2 10             	shl    edx,0x10
c0021de3:	09 d7                	or     edi,edx
c0021de5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021de9:	09 d7                	or     edi,edx
c0021deb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021def:	c1 e2 18             	shl    edx,0x18
c0021df2:	09 d7                	or     edi,edx
c0021df4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021df8:	89 d1                	mov    ecx,edx
c0021dfa:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021dfe:	c1 e1 08             	shl    ecx,0x8
c0021e01:	c1 e2 10             	shl    edx,0x10
c0021e04:	09 ca                	or     edx,ecx
c0021e06:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e0a:	09 ca                	or     edx,ecx
c0021e0c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e10:	c1 e1 18             	shl    ecx,0x18
c0021e13:	09 ca                	or     edx,ecx
c0021e15:	89 e9                	mov    ecx,ebp
c0021e17:	84 c9                	test   cl,cl
c0021e19:	74 3c                	je     c0021e57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e1b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e1f:	83 ec 0c             	sub    esp,0xc
c0021e22:	56                   	push   esi
c0021e23:	e8 28 da fe ff       	call   c000f850 <free>
c0021e28:	83 c4 0c             	add    esp,0xc
c0021e2b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e32:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e37:	50                   	push   eax
c0021e38:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e3f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e4a:	52                   	push   edx
c0021e4b:	57                   	push   edi
c0021e4c:	53                   	push   ebx
c0021e4d:	e8 6e fe ff ff       	call   c0021cc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e52:	83 c4 20             	add    esp,0x20
c0021e55:	eb 31                	jmp    c0021e88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e57:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e5a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e61:	d0 e8                	shr    al,1
c0021e63:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e65:	83 e0 01             	and    eax,0x1
c0021e68:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e6f:	83 ec 0c             	sub    esp,0xc
c0021e72:	89 13                	mov    DWORD PTR [ebx],edx
c0021e74:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e7b:	89 03                	mov    DWORD PTR [ebx],eax
c0021e7d:	56                   	push   esi
c0021e7e:	e8 cd d9 fe ff       	call   c000f850 <free>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	b0 01                	mov    al,0x1
c0021e88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e8e:	5b                   	pop    ebx
c0021e8f:	5e                   	pop    esi
c0021e90:	5f                   	pop    edi
c0021e91:	5d                   	pop    ebp
c0021e92:	c3                   	ret    

c0021e93 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021e93:	55                   	push   ebp
c0021e94:	57                   	push   edi
c0021e95:	56                   	push   esi
c0021e96:	53                   	push   ebx
c0021e97:	83 ec 20             	sub    esp,0x20
c0021e9a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021e9e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ea2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ea6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021eae:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021eb6:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ebb:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ec1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ec7:	57                   	push   edi
c0021ec8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ecc:	50                   	push   eax
c0021ecd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ed1:	50                   	push   eax
c0021ed2:	e8 94 fd ff ff       	call   c0021c6b <readRoot(unsigned int*, unsigned int*, char)>
c0021ed7:	5a                   	pop    edx
c0021ed8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021edc:	e8 b3 e8 fd ff       	call   c0000794 <strlen>
c0021ee1:	83 c4 10             	add    esp,0x10
c0021ee4:	83 f8 03             	cmp    eax,0x3
c0021ee7:	77 17                	ja     c0021f00 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021eed:	89 03                	mov    DWORD PTR [ebx],eax
c0021eef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ef3:	89 06                	mov    DWORD PTR [esi],eax
c0021ef5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021efc:	b0 01                	mov    al,0x1
c0021efe:	eb 19                	jmp    c0021f19 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f00:	50                   	push   eax
c0021f01:	55                   	push   ebp
c0021f02:	57                   	push   edi
c0021f03:	56                   	push   esi
c0021f04:	53                   	push   ebx
c0021f05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f0d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f11:	e8 aa fd ff ff       	call   c0021cc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f16:	83 c4 20             	add    esp,0x20
c0021f19:	83 c4 1c             	add    esp,0x1c
c0021f1c:	5b                   	pop    ebx
c0021f1d:	5e                   	pop    esi
c0021f1e:	5f                   	pop    edi
c0021f1f:	5d                   	pop    ebp
c0021f20:	c3                   	ret    
c0021f21:	90                   	nop

c0021f22 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f22:	57                   	push   edi
c0021f23:	56                   	push   esi
c0021f24:	53                   	push   ebx
c0021f25:	83 ec 10             	sub    esp,0x10
c0021f28:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f2c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f30:	85 ff                	test   edi,edi
c0021f32:	0f 84 9d 00 00 00    	je     c0021fd5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f38:	85 f6                	test   esi,esi
c0021f3a:	0f 84 95 00 00 00    	je     c0021fd5 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f40:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f45:	74 17                	je     c0021f5e <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f47:	83 ec 0c             	sub    esp,0xc
c0021f4a:	68 6f c8 02 c0       	push   0xc002c86f
c0021f4f:	e8 a6 0f ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0021f54:	83 c4 10             	add    esp,0x10
c0021f57:	b8 03 00 00 00       	mov    eax,0x3
c0021f5c:	eb 7c                	jmp    c0021fda <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f5e:	83 ec 0c             	sub    esp,0xc
c0021f61:	6a 1c                	push   0x1c
c0021f63:	e8 d8 d8 fe ff       	call   c000f840 <malloc>
c0021f68:	89 07                	mov    DWORD PTR [edi],eax
c0021f6a:	89 c3                	mov    ebx,eax
c0021f6c:	58                   	pop    eax
c0021f6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f71:	50                   	push   eax
c0021f72:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f75:	50                   	push   eax
c0021f76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f7a:	50                   	push   eax
c0021f7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f7f:	50                   	push   eax
c0021f80:	56                   	push   esi
c0021f81:	e8 0d ff ff ff       	call   c0021e93 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f86:	83 c4 20             	add    esp,0x20
c0021f89:	84 c0                	test   al,al
c0021f8b:	74 07                	je     c0021f94 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021f8d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f92:	74 0b                	je     c0021f9f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021f94:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f98:	b8 01 00 00 00       	mov    eax,0x1
c0021f9d:	eb 3b                	jmp    c0021fda <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fa7:	89 03                	mov    DWORD PTR [ebx],eax
c0021fa9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fb4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fbb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fc2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fc5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fcc:	8a 06                	mov    al,BYTE PTR [esi]
c0021fce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fd1:	31 c0                	xor    eax,eax
c0021fd3:	eb 05                	jmp    c0021fda <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fd5:	b8 04 00 00 00       	mov    eax,0x4
c0021fda:	83 c4 10             	add    esp,0x10
c0021fdd:	5b                   	pop    ebx
c0021fde:	5e                   	pop    esi
c0021fdf:	5f                   	pop    edi
c0021fe0:	c3                   	ret    
c0021fe1:	90                   	nop

c0021fe2 <ISO9660::exists(char const*)>:
c0021fe2:	83 ec 28             	sub    esp,0x28
c0021fe5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fe9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021fed:	52                   	push   edx
c0021fee:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ff1:	52                   	push   edx
c0021ff2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ff6:	52                   	push   edx
c0021ff7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ffb:	52                   	push   edx
c0021ffc:	50                   	push   eax
c0021ffd:	e8 91 fe ff ff       	call   c0021e93 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022002:	83 c4 3c             	add    esp,0x3c
c0022005:	c3                   	ret    

c0022006 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022006:	56                   	push   esi
c0022007:	53                   	push   ebx
c0022008:	83 ec 14             	sub    esp,0x14
c002200b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002200f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022013:	85 db                	test   ebx,ebx
c0022015:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022019:	0f 94 c2             	sete   dl
c002201c:	85 f6                	test   esi,esi
c002201e:	0f 94 c0             	sete   al
c0022021:	08 c2                	or     dl,al
c0022023:	75 68                	jne    c002208d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022025:	85 c9                	test   ecx,ecx
c0022027:	74 64                	je     c002208d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022029:	83 ec 0c             	sub    esp,0xc
c002202c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002202f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022033:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022039:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022040:	50                   	push   eax
c0022041:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022044:	50                   	push   eax
c0022045:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022049:	50                   	push   eax
c002204a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002204e:	50                   	push   eax
c002204f:	51                   	push   ecx
c0022050:	e8 3e fe ff ff       	call   c0021e93 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022055:	83 c4 20             	add    esp,0x20
c0022058:	ba 01 00 00 00       	mov    edx,0x1
c002205d:	84 c0                	test   al,al
c002205f:	74 31                	je     c0022092 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022065:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002206c:	89 03                	mov    DWORD PTR [ebx],eax
c002206e:	ba 00 00 00 00       	mov    edx,0x0
c0022073:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022077:	85 c0                	test   eax,eax
c0022079:	0f 95 06             	setne  BYTE PTR [esi]
c002207c:	74 14                	je     c0022092 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002207e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022084:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002208b:	eb 05                	jmp    c0022092 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002208d:	ba 04 00 00 00       	mov    edx,0x4
c0022092:	83 c4 14             	add    esp,0x14
c0022095:	89 d0                	mov    eax,edx
c0022097:	5b                   	pop    ebx
c0022098:	5e                   	pop    esi
c0022099:	c3                   	ret    

c002209a <ISO9660::openDir(char const*, void**)>:
c002209a:	57                   	push   edi
c002209b:	56                   	push   esi
c002209c:	53                   	push   ebx
c002209d:	83 ec 10             	sub    esp,0x10
c00220a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220a4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220a8:	85 ff                	test   edi,edi
c00220aa:	0f 84 95 00 00 00    	je     c0022145 <ISO9660::openDir(char const*, void**)+0xab>
c00220b0:	85 f6                	test   esi,esi
c00220b2:	0f 84 8d 00 00 00    	je     c0022145 <ISO9660::openDir(char const*, void**)+0xab>
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	6a 1c                	push   0x1c
c00220bd:	e8 7e d7 fe ff       	call   c000f840 <malloc>
c00220c2:	89 07                	mov    DWORD PTR [edi],eax
c00220c4:	89 c3                	mov    ebx,eax
c00220c6:	59                   	pop    ecx
c00220c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220cb:	50                   	push   eax
c00220cc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220cf:	50                   	push   eax
c00220d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d4:	50                   	push   eax
c00220d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d9:	50                   	push   eax
c00220da:	56                   	push   esi
c00220db:	e8 b3 fd ff ff       	call   c0021e93 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220e0:	83 c4 20             	add    esp,0x20
c00220e3:	84 c0                	test   al,al
c00220e5:	74 07                	je     c00220ee <ISO9660::openDir(char const*, void**)+0x54>
c00220e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220ec:	75 21                	jne    c002210f <ISO9660::openDir(char const*, void**)+0x75>
c00220ee:	0f b6 c0             	movzx  eax,al
c00220f1:	52                   	push   edx
c00220f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00220f6:	50                   	push   eax
c00220f7:	68 95 c8 02 c0       	push   0xc002c895
c00220fc:	e8 f9 0d ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0022101:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022105:	83 c4 10             	add    esp,0x10
c0022108:	b8 01 00 00 00       	mov    eax,0x1
c002210d:	eb 3b                	jmp    c002214a <ISO9660::openDir(char const*, void**)+0xb0>
c002210f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022113:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022117:	89 03                	mov    DWORD PTR [ebx],eax
c0022119:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022124:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002212b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022132:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022135:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002213c:	8a 06                	mov    al,BYTE PTR [esi]
c002213e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022141:	31 c0                	xor    eax,eax
c0022143:	eb 05                	jmp    c002214a <ISO9660::openDir(char const*, void**)+0xb0>
c0022145:	b8 04 00 00 00       	mov    eax,0x4
c002214a:	83 c4 10             	add    esp,0x10
c002214d:	5b                   	pop    ebx
c002214e:	5e                   	pop    esi
c002214f:	5f                   	pop    edi
c0022150:	c3                   	ret    
c0022151:	90                   	nop

c0022152 <ISO9660::ISO9660()>:
c0022152:	83 ec 0c             	sub    esp,0xc
c0022155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022159:	83 ec 0c             	sub    esp,0xc
c002215c:	50                   	push   eax
c002215d:	e8 9c 10 ff ff       	call   c00131fe <Filesystem::Filesystem()>
c0022162:	83 c4 10             	add    esp,0x10
c0022165:	ba b8 c8 02 c0       	mov    edx,0xc002c8b8
c002216a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216e:	89 10                	mov    DWORD PTR [eax],edx
c0022170:	90                   	nop
c0022171:	83 c4 0c             	add    esp,0xc
c0022174:	c3                   	ret    
c0022175:	90                   	nop

c0022176 <SoundChannel::~SoundChannel()>:
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022180:	83 ec 0c             	sub    esp,0xc
c0022183:	50                   	push   eax
c0022184:	e8 c7 d6 fe ff       	call   c000f850 <free>
c0022189:	83 c4 10             	add    esp,0x10
c002218c:	90                   	nop
c002218d:	83 c4 0c             	add    esp,0xc
c0022190:	c3                   	ret    
c0022191:	90                   	nop

c0022192 <SoundChannel::setSpeed(float)>:
c0022192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002219a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002219d:	c3                   	ret    

c002219e <SoundChannel::getSpeed()>:
c002219e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221a5:	c3                   	ret    

c00221a6 <SoundChannel::setVolume(int)>:
c00221a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221aa:	83 f8 64             	cmp    eax,0x64
c00221ad:	7e 05                	jle    c00221b4 <SoundChannel::setVolume(int)+0xe>
c00221af:	b8 64 00 00 00       	mov    eax,0x64
c00221b4:	85 c0                	test   eax,eax
c00221b6:	79 02                	jns    c00221ba <SoundChannel::setVolume(int)+0x14>
c00221b8:	31 c0                	xor    eax,eax
c00221ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221be:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221c1:	c3                   	ret    

c00221c2 <SoundChannel::getVolume()>:
c00221c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221c9:	c3                   	ret    

c00221ca <SoundChannel::pause()>:
c00221ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ce:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00221d2:	c3                   	ret    
c00221d3:	90                   	nop

c00221d4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221d4:	83 ec 1c             	sub    esp,0x1c
c00221d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221db:	e8 ea ff ff ff       	call   c00221ca <SoundChannel::pause()>
c00221e0:	83 c4 04             	add    esp,0x4
c00221e3:	6a 50                	push   0x50
c00221e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221e9:	e8 b8 ff ff ff       	call   c00221a6 <SoundChannel::setVolume(int)>
c00221ee:	83 c4 08             	add    esp,0x8
c00221f1:	a1 30 c9 02 c0       	mov    eax,ds:0xc002c930
c00221f6:	50                   	push   eax
c00221f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221fb:	e8 92 ff ff ff       	call   c0022192 <SoundChannel::setSpeed(float)>
c0022200:	83 c4 08             	add    esp,0x8
c0022203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022207:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002220b:	89 10                	mov    DWORD PTR [eax],edx
c002220d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022211:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022215:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002221c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022220:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022223:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022228:	75 23                	jne    c002224d <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002222a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002222e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022237:	0f af c2             	imul   eax,edx
c002223a:	85 c0                	test   eax,eax
c002223c:	79 03                	jns    c0022241 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002223e:	83 c0 03             	add    eax,0x3
c0022241:	c1 f8 02             	sar    eax,0x2
c0022244:	05 a0 0f 00 00       	add    eax,0xfa0
c0022249:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002224d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022251:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022255:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002225c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022267:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002226e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022272:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022275:	c1 e0 02             	shl    eax,0x2
c0022278:	83 ec 0c             	sub    esp,0xc
c002227b:	50                   	push   eax
c002227c:	e8 bf d5 fe ff       	call   c000f840 <malloc>
c0022281:	83 c4 10             	add    esp,0x10
c0022284:	89 c2                	mov    edx,eax
c0022286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002228a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002228d:	83 ec 04             	sub    esp,0x4
c0022290:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022294:	50                   	push   eax
c0022295:	6a 01                	push   0x1
c0022297:	6a 04                	push   0x4
c0022299:	e8 01 69 fe ff       	call   c0008b9f <src_new>
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	89 c2                	mov    edx,eax
c00222a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ae:	85 c0                	test   eax,eax
c00222b0:	74 10                	je     c00222c2 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222b2:	83 ec 0c             	sub    esp,0xc
c00222b5:	68 14 c9 02 c0       	push   0xc002c914
c00222ba:	e8 ec 82 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00222bf:	83 c4 10             	add    esp,0x10
c00222c2:	a0 e0 26 03 c0       	mov    al,ds:0xc00326e0
c00222c7:	83 f0 01             	xor    eax,0x1
c00222ca:	84 c0                	test   al,al
c00222cc:	74 57                	je     c0022325 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00222ce:	a1 34 c9 02 c0       	mov    eax,ds:0xc002c934
c00222d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222df:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00222e7:	7f 35                	jg     c002231e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00222e9:	83 ec 0c             	sub    esp,0xc
c00222ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222f0:	e8 92 4f 00 00       	call   c0027287 <__floatsisf>
c00222f5:	83 c4 10             	add    esp,0x10
c00222f8:	8b 15 34 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c934
c00222fe:	83 ec 08             	sub    esp,0x8
c0022301:	52                   	push   edx
c0022302:	50                   	push   eax
c0022303:	e8 91 4b 00 00       	call   c0026e99 <__mulsf3>
c0022308:	83 c4 10             	add    esp,0x10
c002230b:	89 c2                	mov    edx,eax
c002230d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022311:	89 14 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],edx
c0022318:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002231c:	eb c1                	jmp    c00222df <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002231e:	c6 05 e0 26 03 c0 01 	mov    BYTE PTR ds:0xc00326e0,0x1
c0022325:	90                   	nop
c0022326:	83 c4 1c             	add    esp,0x1c
c0022329:	c3                   	ret    

c002232a <SoundChannel::play()>:
c002232a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002232e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022332:	c3                   	ret    
c0022333:	90                   	nop

c0022334 <SoundChannel::paused()>:
c0022334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022338:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002233b:	c3                   	ret    

c002233c <SoundChannel::getSampleRate()>:
c002233c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022340:	8b 00                	mov    eax,DWORD PTR [eax]
c0022342:	c3                   	ret    
c0022343:	90                   	nop

c0022344 <SoundChannel::getBits()>:
c0022344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002234b:	c3                   	ret    

c002234c <SoundChannel::getBufferUsed()>:
c002234c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022350:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022353:	c3                   	ret    

c0022354 <SoundChannel::getBufferSize()>:
c0022354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022358:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002235b:	c3                   	ret    

c002235c <SoundChannel::unbuffer(float*, int, int)>:
c002235c:	56                   	push   esi
c002235d:	53                   	push   ebx
c002235e:	83 ec 40             	sub    esp,0x40
c0022361:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022365:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022368:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002236c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002236f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022373:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022377:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002237b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002237f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022383:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022387:	e8 fb 4e 00 00       	call   c0027287 <__floatsisf>
c002238c:	5a                   	pop    edx
c002238d:	89 c6                	mov    esi,eax
c002238f:	ff 33                	push   DWORD PTR [ebx]
c0022391:	e8 f1 4e 00 00       	call   c0027287 <__floatsisf>
c0022396:	59                   	pop    ecx
c0022397:	5a                   	pop    edx
c0022398:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002239b:	50                   	push   eax
c002239c:	e8 f8 4a 00 00       	call   c0026e99 <__mulsf3>
c00223a1:	59                   	pop    ecx
c00223a2:	5a                   	pop    edx
c00223a3:	50                   	push   eax
c00223a4:	56                   	push   esi
c00223a5:	e8 b2 4c 00 00       	call   c002705c <__divsf3>
c00223aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00223ad:	e8 a5 61 00 00       	call   c0028557 <__extendsfdf2>
c00223b2:	59                   	pop    ecx
c00223b3:	5e                   	pop    esi
c00223b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223c8:	50                   	push   eax
c00223c9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223cc:	e8 c3 63 fe ff       	call   c0008794 <src_process>
c00223d1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223d5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223d8:	83 c4 0c             	add    esp,0xc
c00223db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223de:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223e1:	29 d0                	sub    eax,edx
c00223e3:	c1 e0 02             	shl    eax,0x2
c00223e6:	50                   	push   eax
c00223e7:	8d 04 91             	lea    eax,[ecx+edx*4]
c00223ea:	50                   	push   eax
c00223eb:	51                   	push   ecx
c00223ec:	e8 8b e2 fd ff       	call   c000067c <memmove>
c00223f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00223f5:	83 c4 44             	add    esp,0x44
c00223f8:	5b                   	pop    ebx
c00223f9:	5e                   	pop    esi
c00223fa:	c3                   	ret    
c00223fb:	90                   	nop

c00223fc <SoundChannel::buffer8(unsigned char*, int)>:
c00223fc:	55                   	push   ebp
c00223fd:	57                   	push   edi
c00223fe:	56                   	push   esi
c00223ff:	53                   	push   ebx
c0022400:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022404:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022408:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002240b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002240f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022412:	74 7a                	je     c002248e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022414:	85 ff                	test   edi,edi
c0022416:	7e 76                	jle    c002248e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022418:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002241c:	8d 70 01             	lea    esi,[eax+0x1]
c002241f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022422:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022425:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c002242c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002242f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022432:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022435:	74 5e                	je     c0022495 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022437:	83 ff 01             	cmp    edi,0x1
c002243a:	74 4b                	je     c0022487 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002243c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022440:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022443:	8d 70 01             	lea    esi,[eax+0x1]
c0022446:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022449:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c0022450:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022453:	b8 02 00 00 00       	mov    eax,0x2
c0022458:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002245b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002245e:	75 23                	jne    c0022483 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022460:	eb 27                	jmp    c0022489 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022462:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022467:	8d 71 01             	lea    esi,[ecx+0x1]
c002246a:	40                   	inc    eax
c002246b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002246e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022471:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c0022478:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002247b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002247e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022481:	74 06                	je     c0022489 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022483:	39 c7                	cmp    edi,eax
c0022485:	75 db                	jne    c0022462 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022487:	89 f8                	mov    eax,edi
c0022489:	5b                   	pop    ebx
c002248a:	5e                   	pop    esi
c002248b:	5f                   	pop    edi
c002248c:	5d                   	pop    ebp
c002248d:	c3                   	ret    
c002248e:	5b                   	pop    ebx
c002248f:	31 c0                	xor    eax,eax
c0022491:	5e                   	pop    esi
c0022492:	5f                   	pop    edi
c0022493:	5d                   	pop    ebp
c0022494:	c3                   	ret    
c0022495:	b8 01 00 00 00       	mov    eax,0x1
c002249a:	eb ed                	jmp    c0022489 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002249c <SoundDevice::SoundDevice(char const*)>:
c002249c:	83 ec 1c             	sub    esp,0x1c
c002249f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a3:	83 ec 08             	sub    esp,0x8
c00224a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224aa:	50                   	push   eax
c00224ab:	e8 60 20 ff ff       	call   c0014510 <Device::Device(char const*)>
c00224b0:	83 c4 10             	add    esp,0x10
c00224b3:	ba 40 c9 02 c0       	mov    edx,0xc002c940
c00224b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224bc:	89 10                	mov    DWORD PTR [eax],edx
c00224be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c2:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00224da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224e2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00224e7:	7f 19                	jg     c0022502 <SoundDevice::SoundDevice(char const*)+0x66>
c00224e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224f1:	83 c2 54             	add    edx,0x54
c00224f4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00224fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022500:	eb e0                	jmp    c00224e2 <SoundDevice::SoundDevice(char const*)+0x46>
c0022502:	90                   	nop
c0022503:	83 c4 1c             	add    esp,0x1c
c0022506:	c3                   	ret    
c0022507:	90                   	nop

c0022508 <SoundDevice::~SoundDevice()>:
c0022508:	53                   	push   ebx
c0022509:	83 ec 18             	sub    esp,0x18
c002250c:	ba 40 c9 02 c0       	mov    edx,0xc002c940
c0022511:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022515:	89 10                	mov    DWORD PTR [eax],edx
c0022517:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002251f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022524:	7f 46                	jg     c002256c <SoundDevice::~SoundDevice()+0x64>
c0022526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002252a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002252e:	83 c2 54             	add    edx,0x54
c0022531:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022535:	85 c0                	test   eax,eax
c0022537:	74 2d                	je     c0022566 <SoundDevice::~SoundDevice()+0x5e>
c0022539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022541:	83 c2 54             	add    edx,0x54
c0022544:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022548:	85 db                	test   ebx,ebx
c002254a:	74 1a                	je     c0022566 <SoundDevice::~SoundDevice()+0x5e>
c002254c:	83 ec 0c             	sub    esp,0xc
c002254f:	53                   	push   ebx
c0022550:	e8 21 fc ff ff       	call   c0022176 <SoundChannel::~SoundChannel()>
c0022555:	83 c4 10             	add    esp,0x10
c0022558:	83 ec 08             	sub    esp,0x8
c002255b:	6a 2c                	push   0x2c
c002255d:	53                   	push   ebx
c002255e:	e8 b7 08 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0022563:	83 c4 10             	add    esp,0x10
c0022566:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002256a:	eb b3                	jmp    c002251f <SoundDevice::~SoundDevice()+0x17>
c002256c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022570:	83 ec 0c             	sub    esp,0xc
c0022573:	50                   	push   eax
c0022574:	e8 79 1c ff ff       	call   c00141f2 <Device::~Device()>
c0022579:	83 c4 10             	add    esp,0x10
c002257c:	90                   	nop
c002257d:	83 c4 18             	add    esp,0x18
c0022580:	5b                   	pop    ebx
c0022581:	c3                   	ret    

c0022582 <SoundDevice::~SoundDevice()>:
c0022582:	83 ec 0c             	sub    esp,0xc
c0022585:	83 ec 0c             	sub    esp,0xc
c0022588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002258c:	e8 77 ff ff ff       	call   c0022508 <SoundDevice::~SoundDevice()>
c0022591:	83 c4 10             	add    esp,0x10
c0022594:	83 ec 08             	sub    esp,0x8
c0022597:	68 e4 01 00 00       	push   0x1e4
c002259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225a0:	e8 75 08 ff ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00225a5:	83 c4 10             	add    esp,0x10
c00225a8:	83 c4 0c             	add    esp,0xc
c00225ab:	c3                   	ret    

c00225ac <SoundDevice::getFreeChannelNum()>:
c00225ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225b0:	31 c0                	xor    eax,eax
c00225b2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225ba:	74 09                	je     c00225c5 <SoundDevice::getFreeChannelNum()+0x19>
c00225bc:	40                   	inc    eax
c00225bd:	83 f8 20             	cmp    eax,0x20
c00225c0:	75 f0                	jne    c00225b2 <SoundDevice::getFreeChannelNum()+0x6>
c00225c2:	83 c8 ff             	or     eax,0xffffffff
c00225c5:	c3                   	ret    

c00225c6 <SoundDevice::addChannel(SoundChannel*)>:
c00225c6:	56                   	push   esi
c00225c7:	53                   	push   ebx
c00225c8:	51                   	push   ecx
c00225c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00225d1:	53                   	push   ebx
c00225d2:	e8 d5 ff ff ff       	call   c00225ac <SoundDevice::getFreeChannelNum()>
c00225d7:	5a                   	pop    edx
c00225d8:	83 f8 ff             	cmp    eax,0xffffffff
c00225db:	74 51                	je     c002262e <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225dd:	85 f6                	test   esi,esi
c00225df:	74 4d                	je     c002262e <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225e1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00225e8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00225ef:	75 30                	jne    c0022621 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00225f1:	83 ec 0c             	sub    esp,0xc
c00225f4:	56                   	push   esi
c00225f5:	e8 42 fd ff ff       	call   c002233c <SoundChannel::getSampleRate()>
c00225fa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022600:	89 34 24             	mov    DWORD PTR [esp],esi
c0022603:	e8 3c fd ff ff       	call   c0022344 <SoundChannel::getBits()>
c0022608:	83 c4 0c             	add    esp,0xc
c002260b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022611:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022613:	50                   	push   eax
c0022614:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002261a:	53                   	push   ebx
c002261b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002261e:	83 c4 10             	add    esp,0x10
c0022621:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022627:	b8 01 00 00 00       	mov    eax,0x1
c002262c:	eb 03                	jmp    c0022631 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002262e:	83 c8 ff             	or     eax,0xffffffff
c0022631:	5a                   	pop    edx
c0022632:	5b                   	pop    ebx
c0022633:	5e                   	pop    esi
c0022634:	c3                   	ret    
c0022635:	90                   	nop

c0022636 <SoundDevice::removeChannel(int)>:
c0022636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002263a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002263e:	83 fa 1f             	cmp    edx,0x1f
c0022641:	77 23                	ja     c0022666 <SoundDevice::removeChannel(int)+0x30>
c0022643:	8d 14 90             	lea    edx,[eax+edx*4]
c0022646:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002264d:	74 17                	je     c0022666 <SoundDevice::removeChannel(int)+0x30>
c002264f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022659:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002265f:	75 05                	jne    c0022666 <SoundDevice::removeChannel(int)+0x30>
c0022661:	8b 00                	mov    eax,DWORD PTR [eax]
c0022663:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022666:	c3                   	ret    
c0022667:	90                   	nop

c0022668 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022668:	57                   	push   edi
c0022669:	56                   	push   esi
c002266a:	53                   	push   ebx
c002266b:	31 db                	xor    ebx,ebx
c002266d:	83 ec 10             	sub    esp,0x10
c0022670:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022674:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022678:	0f 8d cb 00 00 00    	jge    c0022749 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002267e:	83 ec 0c             	sub    esp,0xc
c0022681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022685:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022688:	e8 ca 5e 00 00       	call   c0028557 <__extendsfdf2>
c002268d:	83 c4 10             	add    esp,0x10
c0022690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022694:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022698:	68 00 00 f0 3f       	push   0x3ff00000
c002269d:	6a 00                	push   0x0
c002269f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a7:	e8 37 4e 00 00       	call   c00274e3 <__adddf3>
c00226ac:	83 c4 10             	add    esp,0x10
c00226af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226b7:	68 00 00 e0 3f       	push   0x3fe00000
c00226bc:	6a 00                	push   0x0
c00226be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c6:	e8 95 54 00 00       	call   c0027b60 <__muldf3>
c00226cb:	83 c4 10             	add    esp,0x10
c00226ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226d6:	68 00 00 60 40       	push   0x40600000
c00226db:	6a 00                	push   0x0
c00226dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e5:	e8 76 54 00 00       	call   c0027b60 <__muldf3>
c00226ea:	59                   	pop    ecx
c00226eb:	5f                   	pop    edi
c00226ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00226f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00226f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226fc:	e8 32 5d 00 00       	call   c0028433 <__truncdfsf2>
c0022701:	5a                   	pop    edx
c0022702:	89 c7                	mov    edi,eax
c0022704:	59                   	pop    ecx
c0022705:	68 00 00 fe 42       	push   0x42fe0000
c002270a:	50                   	push   eax
c002270b:	e8 cd 4d 00 00       	call   c00274dd <__gesf2>
c0022710:	83 c4 10             	add    esp,0x10
c0022713:	85 c0                	test   eax,eax
c0022715:	78 06                	js     c002271d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022717:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002271b:	eb 26                	jmp    c0022743 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002271d:	50                   	push   eax
c002271e:	50                   	push   eax
c002271f:	6a 00                	push   0x0
c0022721:	57                   	push   edi
c0022722:	e8 ba 4d 00 00       	call   c00274e1 <__lesf2>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	85 c0                	test   eax,eax
c002272c:	7f 06                	jg     c0022734 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002272e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022732:	eb 0f                	jmp    c0022743 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022734:	83 ec 0c             	sub    esp,0xc
c0022737:	57                   	push   edi
c0022738:	e8 af 5e 00 00       	call   c00285ec <lrintf>
c002273d:	83 c4 10             	add    esp,0x10
c0022740:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022743:	43                   	inc    ebx
c0022744:	e9 2b ff ff ff       	jmp    c0022674 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022749:	83 c4 10             	add    esp,0x10
c002274c:	5b                   	pop    ebx
c002274d:	5e                   	pop    esi
c002274e:	5f                   	pop    edi
c002274f:	c3                   	ret    

c0022750 <SoundDevice::getAudio(int, float*, float*)>:
c0022750:	55                   	push   ebp
c0022751:	57                   	push   edi
c0022752:	56                   	push   esi
c0022753:	53                   	push   ebx
c0022754:	31 db                	xor    ebx,ebx
c0022756:	83 ec 20             	sub    esp,0x20
c0022759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002275d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022761:	c1 e0 02             	shl    eax,0x2
c0022764:	50                   	push   eax
c0022765:	6a 00                	push   0x0
c0022767:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002276b:	e8 08 e0 fd ff       	call   c0000778 <memset>
c0022770:	83 c4 10             	add    esp,0x10
c0022773:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022777:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002277e:	85 c0                	test   eax,eax
c0022780:	0f 84 d7 00 00 00    	je     c002285d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022786:	83 ec 0c             	sub    esp,0xc
c0022789:	50                   	push   eax
c002278a:	e8 a5 fb ff ff       	call   c0022334 <SoundChannel::paused()>
c002278f:	83 c4 10             	add    esp,0x10
c0022792:	84 c0                	test   al,al
c0022794:	0f 85 c3 00 00 00    	jne    c002285d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002279a:	83 ec 0c             	sub    esp,0xc
c002279d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227a4:	e8 19 fa ff ff       	call   c00221c2 <SoundChannel::getVolume()>
c00227a9:	83 c4 10             	add    esp,0x10
c00227ac:	85 c0                	test   eax,eax
c00227ae:	0f 84 a9 00 00 00    	je     c002285d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227b4:	83 ec 0c             	sub    esp,0xc
c00227b7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227be:	e8 ff f9 ff ff       	call   c00221c2 <SoundChannel::getVolume()>
c00227c3:	83 ec 0c             	sub    esp,0xc
c00227c6:	50                   	push   eax
c00227c7:	e8 bb 4a 00 00       	call   c0027287 <__floatsisf>
c00227cc:	59                   	pop    ecx
c00227cd:	5d                   	pop    ebp
c00227ce:	31 ed                	xor    ebp,ebp
c00227d0:	68 00 00 c8 42       	push   0x42c80000
c00227d5:	50                   	push   eax
c00227d6:	e8 81 48 00 00       	call   c002705c <__divsf3>
c00227db:	83 c4 10             	add    esp,0x10
c00227de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00227e6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00227ec:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00227f0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227f7:	e8 60 fb ff ff       	call   c002235c <SoundChannel::unbuffer(float*, int, int)>
c00227fc:	83 c4 20             	add    esp,0x20
c00227ff:	89 c1                	mov    ecx,eax
c0022801:	39 cd                	cmp    ebp,ecx
c0022803:	7d 52                	jge    c0022857 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022805:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022809:	50                   	push   eax
c002280a:	50                   	push   eax
c002280b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002280f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022812:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022816:	e8 7e 46 00 00       	call   c0026e99 <__mulsf3>
c002281b:	5a                   	pop    edx
c002281c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022820:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022826:	e8 5c 4a 00 00       	call   c0027287 <__floatsisf>
c002282b:	59                   	pop    ecx
c002282c:	5a                   	pop    edx
c002282d:	50                   	push   eax
c002282e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022832:	e8 25 48 00 00       	call   c002705c <__divsf3>
c0022837:	59                   	pop    ecx
c0022838:	5a                   	pop    edx
c0022839:	50                   	push   eax
c002283a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002283e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022841:	e8 30 43 00 00       	call   c0026b76 <__addsf3>
c0022846:	83 c4 10             	add    esp,0x10
c0022849:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002284d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022851:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022854:	45                   	inc    ebp
c0022855:	eb aa                	jmp    c0022801 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022857:	39 cf                	cmp    edi,ecx
c0022859:	7e 02                	jle    c002285d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002285b:	89 cf                	mov    edi,ecx
c002285d:	43                   	inc    ebx
c002285e:	83 fb 20             	cmp    ebx,0x20
c0022861:	0f 85 10 ff ff ff    	jne    c0022777 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022867:	83 c4 1c             	add    esp,0x1c
c002286a:	89 f8                	mov    eax,edi
c002286c:	5b                   	pop    ebx
c002286d:	5e                   	pop    esi
c002286e:	5f                   	pop    edi
c002286f:	5d                   	pop    ebp
c0022870:	c3                   	ret    
c0022871:	90                   	nop

c0022872 <PCI::open(int, int, void*)>:
c0022872:	83 ec 18             	sub    esp,0x18
c0022875:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022879:	8b 10                	mov    edx,DWORD PTR [eax]
c002287b:	50                   	push   eax
c002287c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002287f:	31 c0                	xor    eax,eax
c0022881:	83 c4 1c             	add    esp,0x1c
c0022884:	c3                   	ret    
c0022885:	90                   	nop

c0022886 <PCI::close(int, int, void*)>:
c0022886:	31 c0                	xor    eax,eax
c0022888:	c3                   	ret    
c0022889:	90                   	nop

c002288a <PCI::PCI()>:
c002288a:	83 ec 0c             	sub    esp,0xc
c002288d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022891:	83 ec 08             	sub    esp,0x8
c0022894:	68 70 c9 02 c0       	push   0xc002c970
c0022899:	50                   	push   eax
c002289a:	e8 f5 12 ff ff       	call   c0013b94 <Bus::Bus(char const*)>
c002289f:	83 c4 10             	add    esp,0x10
c00228a2:	ba dc c9 02 c0       	mov    edx,0xc002c9dc
c00228a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ab:	89 10                	mov    DWORD PTR [eax],edx
c00228ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228b7:	0f b6 d0             	movzx  edx,al
c00228ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228be:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228cf:	0f b6 d0             	movzx  edx,al
c00228d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e5:	8d 50 01             	lea    edx,[eax+0x1]
c00228e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228ec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228f2:	0f b6 d0             	movzx  edx,al
c00228f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228fd:	83 c9 c0             	or     ecx,0xffffffc0
c0022900:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022904:	90                   	nop
c0022905:	83 c4 0c             	add    esp,0xc
c0022908:	c3                   	ret    
c0022909:	90                   	nop

c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002290a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002290e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022913:	89 ca                	mov    edx,ecx
c0022915:	c1 e0 10             	shl    eax,0x10
c0022918:	81 e2 fc 00 00 00    	and    edx,0xfc
c002291e:	09 d0                	or     eax,edx
c0022920:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022925:	c1 e2 08             	shl    edx,0x8
c0022928:	09 d0                	or     eax,edx
c002292a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002292f:	c1 e2 0b             	shl    edx,0xb
c0022932:	09 d0                	or     eax,edx
c0022934:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022939:	0d 00 00 00 80       	or     eax,0x80000000
c002293e:	ef                   	out    dx,eax
c002293f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022944:	ed                   	in     eax,dx
c0022945:	83 e1 02             	and    ecx,0x2
c0022948:	0f b6 c9             	movzx  ecx,cl
c002294b:	c1 e1 03             	shl    ecx,0x3
c002294e:	d3 e8                	shr    eax,cl
c0022950:	c3                   	ret    
c0022951:	90                   	nop

c0022952 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022952:	6a 00                	push   0x0
c0022954:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022959:	50                   	push   eax
c002295a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002295f:	50                   	push   eax
c0022960:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022965:	50                   	push   eax
c0022966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002296a:	e8 9b ff ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002296f:	83 c4 14             	add    esp,0x14
c0022972:	c3                   	ret    
c0022973:	90                   	nop

c0022974 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022974:	6a 0e                	push   0xe
c0022976:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002297b:	50                   	push   eax
c002297c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022981:	50                   	push   eax
c0022982:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022987:	50                   	push   eax
c0022988:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002298c:	e8 79 ff ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022991:	83 c4 14             	add    esp,0x14
c0022994:	0f b6 c0             	movzx  eax,al
c0022997:	c3                   	ret    

c0022998 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022998:	55                   	push   ebp
c0022999:	57                   	push   edi
c002299a:	56                   	push   esi
c002299b:	53                   	push   ebx
c002299c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229a1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229a6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229ab:	6a 0a                	push   0xa
c00229ad:	56                   	push   esi
c00229ae:	55                   	push   ebp
c00229af:	57                   	push   edi
c00229b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229b4:	e8 51 ff ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229b9:	6a 0a                	push   0xa
c00229bb:	89 c3                	mov    ebx,eax
c00229bd:	56                   	push   esi
c00229be:	0f b6 db             	movzx  ebx,bl
c00229c1:	55                   	push   ebp
c00229c2:	57                   	push   edi
c00229c3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229c7:	e8 3e ff ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229cc:	83 c4 28             	add    esp,0x28
c00229cf:	25 00 ff 00 00       	and    eax,0xff00
c00229d4:	09 d8                	or     eax,ebx
c00229d6:	5b                   	pop    ebx
c00229d7:	5e                   	pop    esi
c00229d8:	5f                   	pop    edi
c00229d9:	5d                   	pop    ebp
c00229da:	c3                   	ret    
c00229db:	90                   	nop

c00229dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00229dc:	6a 08                	push   0x8
c00229de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e3:	50                   	push   eax
c00229e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e9:	50                   	push   eax
c00229ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ef:	50                   	push   eax
c00229f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f4:	e8 11 ff ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f9:	83 c4 14             	add    esp,0x14
c00229fc:	0f b6 c4             	movzx  eax,ah
c00229ff:	c3                   	ret    

c0022a00 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a00:	6a 08                	push   0x8
c0022a02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a07:	50                   	push   eax
c0022a08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a0d:	50                   	push   eax
c0022a0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a13:	50                   	push   eax
c0022a14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a18:	e8 ed fe ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a1d:	83 c4 14             	add    esp,0x14
c0022a20:	c3                   	ret    
c0022a21:	90                   	nop

c0022a22 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a22:	6a 3c                	push   0x3c
c0022a24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a29:	50                   	push   eax
c0022a2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2f:	50                   	push   eax
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3a:	e8 cb fe ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3f:	83 c4 14             	add    esp,0x14
c0022a42:	c3                   	ret    
c0022a43:	90                   	nop

c0022a44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a44:	6a 18                	push   0x18
c0022a46:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4b:	50                   	push   eax
c0022a4c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a51:	50                   	push   eax
c0022a52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a57:	50                   	push   eax
c0022a58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5c:	e8 a9 fe ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a61:	83 c4 14             	add    esp,0x14
c0022a64:	0f b6 c4             	movzx  eax,ah
c0022a67:	c3                   	ret    

c0022a68 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a68:	55                   	push   ebp
c0022a69:	57                   	push   edi
c0022a6a:	56                   	push   esi
c0022a6b:	53                   	push   ebx
c0022a6c:	50                   	push   eax
c0022a6d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a71:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a7b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a80:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a87:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a8a:	83 c3 10             	add    ebx,0x10
c0022a8d:	0f b6 c0             	movzx  eax,al
c0022a90:	0f b6 db             	movzx  ebx,bl
c0022a93:	50                   	push   eax
c0022a94:	51                   	push   ecx
c0022a95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022a99:	57                   	push   edi
c0022a9a:	55                   	push   ebp
c0022a9b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022a9f:	e8 66 fe ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa4:	53                   	push   ebx
c0022aa5:	89 c6                	mov    esi,eax
c0022aa7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022aab:	c1 e6 10             	shl    esi,0x10
c0022aae:	51                   	push   ecx
c0022aaf:	57                   	push   edi
c0022ab0:	55                   	push   ebp
c0022ab1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ab5:	e8 50 fe ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aba:	83 c4 2c             	add    esp,0x2c
c0022abd:	0f b7 c0             	movzx  eax,ax
c0022ac0:	5b                   	pop    ebx
c0022ac1:	09 f0                	or     eax,esi
c0022ac3:	5e                   	pop    esi
c0022ac4:	5f                   	pop    edi
c0022ac5:	5d                   	pop    ebp
c0022ac6:	c3                   	ret    
c0022ac7:	90                   	nop

c0022ac8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022ac8:	53                   	push   ebx
c0022ac9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ace:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022ad3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ad7:	c1 e1 10             	shl    ecx,0x10
c0022ada:	25 fc 00 00 00       	and    eax,0xfc
c0022adf:	09 c1                	or     ecx,eax
c0022ae1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae6:	c1 e0 08             	shl    eax,0x8
c0022ae9:	09 c1                	or     ecx,eax
c0022aeb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022af0:	c1 e0 0b             	shl    eax,0xb
c0022af3:	09 c1                	or     ecx,eax
c0022af5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022afb:	89 c8                	mov    eax,ecx
c0022afd:	ef                   	out    dx,eax
c0022afe:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b03:	ed                   	in     eax,dx
c0022b04:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b09:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b0e:	74 0a                	je     c0022b1a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b10:	0f b7 d8             	movzx  ebx,ax
c0022b13:	89 d0                	mov    eax,edx
c0022b15:	c1 e0 10             	shl    eax,0x10
c0022b18:	eb 05                	jmp    c0022b1f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b1a:	66 31 c0             	xor    ax,ax
c0022b1d:	89 d3                	mov    ebx,edx
c0022b1f:	09 c3                	or     ebx,eax
c0022b21:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b26:	89 c8                	mov    eax,ecx
c0022b28:	ef                   	out    dx,eax
c0022b29:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b2e:	89 d8                	mov    eax,ebx
c0022b30:	ef                   	out    dx,eax
c0022b31:	5b                   	pop    ebx
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <PCI::checkBus(unsigned char)>:
c0022b34:	56                   	push   esi
c0022b35:	53                   	push   ebx
c0022b36:	31 db                	xor    ebx,ebx
c0022b38:	51                   	push   ecx
c0022b39:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b3e:	52                   	push   edx
c0022b3f:	53                   	push   ebx
c0022b40:	43                   	inc    ebx
c0022b41:	56                   	push   esi
c0022b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b46:	e8 2b 03 00 00       	call   c0022e76 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b4b:	83 c4 10             	add    esp,0x10
c0022b4e:	83 fb 20             	cmp    ebx,0x20
c0022b51:	75 eb                	jne    c0022b3e <PCI::checkBus(unsigned char)+0xa>
c0022b53:	58                   	pop    eax
c0022b54:	5b                   	pop    ebx
c0022b55:	5e                   	pop    esi
c0022b56:	c3                   	ret    
c0022b57:	90                   	nop

c0022b58 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b58:	55                   	push   ebp
c0022b59:	57                   	push   edi
c0022b5a:	56                   	push   esi
c0022b5b:	53                   	push   ebx
c0022b5c:	83 ec 1c             	sub    esp,0x1c
c0022b5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b63:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b69:	0f 84 52 01 00 00    	je     c0022cc1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b6f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b73:	66 81 f9 06 04       	cmp    cx,0x406
c0022b78:	75 2c                	jne    c0022ba6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b7a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b7f:	50                   	push   eax
c0022b80:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b85:	50                   	push   eax
c0022b86:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b8b:	50                   	push   eax
c0022b8c:	56                   	push   esi
c0022b8d:	e8 b2 fe ff ff       	call   c0022a44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b96:	0f b6 c0             	movzx  eax,al
c0022b99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b9d:	83 c4 2c             	add    esp,0x2c
c0022ba0:	5b                   	pop    ebx
c0022ba1:	5e                   	pop    esi
c0022ba2:	5f                   	pop    edi
c0022ba3:	5d                   	pop    ebp
c0022ba4:	eb 8e                	jmp    c0022b34 <PCI::checkBus(unsigned char)>
c0022ba6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022baa:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bb4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bb8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bbc:	88 d3                	mov    bl,dl
c0022bbe:	85 c0                	test   eax,eax
c0022bc0:	74 33                	je     c0022bf5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bc2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022bc5:	85 d2                	test   edx,edx
c0022bc7:	74 28                	je     c0022bf1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bc9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022bcf:	31 ef                	xor    edi,ebp
c0022bd1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022bd7:	75 18                	jne    c0022bf1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bd9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bdd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022be3:	75 0c                	jne    c0022bf1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022be5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022beb:	0f 84 d0 00 00 00    	je     c0022cc1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bf3:	eb c9                	jmp    c0022bbe <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022bf5:	66 81 f9 01 06       	cmp    cx,0x601
c0022bfa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022bfe:	75 19                	jne    c0022c19 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c00:	83 ec 0c             	sub    esp,0xc
c0022c03:	68 64 01 00 00       	push   0x164
c0022c08:	e8 33 cc fe ff       	call   c000f840 <malloc>
c0022c0d:	89 c5                	mov    ebp,eax
c0022c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c12:	e8 95 0f 00 00       	call   c0023bac <SATABus::SATABus()>
c0022c17:	eb 1e                	jmp    c0022c37 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c19:	66 81 f9 01 01       	cmp    cx,0x101
c0022c1e:	75 60                	jne    c0022c80 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c20:	83 ec 0c             	sub    esp,0xc
c0022c23:	68 70 02 00 00       	push   0x270
c0022c28:	e8 13 cc fe ff       	call   c000f840 <malloc>
c0022c2d:	89 c5                	mov    ebp,eax
c0022c2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c32:	e8 03 03 00 00       	call   c0022f3a <IDE::IDE()>
c0022c37:	58                   	pop    eax
c0022c38:	5a                   	pop    edx
c0022c39:	55                   	push   ebp
c0022c3a:	56                   	push   esi
c0022c3b:	e8 e0 16 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0022c40:	83 ec 1c             	sub    esp,0x1c
c0022c43:	b9 09 00 00 00       	mov    ecx,0x9
c0022c48:	fc                   	cld    
c0022c49:	89 e7                	mov    edi,esp
c0022c4b:	89 de                	mov    esi,ebx
c0022c4d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c4f:	55                   	push   ebp
c0022c50:	e8 d5 15 ff ff       	call   c001422a <Device::preOpenPCI(PCIDeviceInfo)>
c0022c55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c58:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c5c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c64:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c6c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c77:	83 c4 4c             	add    esp,0x4c
c0022c7a:	5b                   	pop    ebx
c0022c7b:	5e                   	pop    esi
c0022c7c:	5f                   	pop    edi
c0022c7d:	5d                   	pop    ebp
c0022c7e:	ff e0                	jmp    eax
c0022c80:	83 ec 0c             	sub    esp,0xc
c0022c83:	68 58 01 00 00       	push   0x158
c0022c88:	e8 b3 cb fe ff       	call   c000f840 <malloc>
c0022c8d:	89 c5                	mov    ebp,eax
c0022c8f:	58                   	pop    eax
c0022c90:	5a                   	pop    edx
c0022c91:	68 78 c9 02 c0       	push   0xc002c978
c0022c96:	55                   	push   ebp
c0022c97:	e8 7a 19 ff ff       	call   c0014616 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c9c:	59                   	pop    ecx
c0022c9d:	5f                   	pop    edi
c0022c9e:	55                   	push   ebp
c0022c9f:	56                   	push   esi
c0022ca0:	e8 7b 16 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0022ca5:	b9 09 00 00 00       	mov    ecx,0x9
c0022caa:	fc                   	cld    
c0022cab:	89 df                	mov    edi,ebx
c0022cad:	89 de                	mov    esi,ebx
c0022caf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cb1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cb5:	83 c4 2c             	add    esp,0x2c
c0022cb8:	5b                   	pop    ebx
c0022cb9:	5e                   	pop    esi
c0022cba:	5f                   	pop    edi
c0022cbb:	5d                   	pop    ebp
c0022cbc:	e9 69 15 ff ff       	jmp    c001422a <Device::preOpenPCI(PCIDeviceInfo)>
c0022cc1:	83 c4 1c             	add    esp,0x1c
c0022cc4:	5b                   	pop    ebx
c0022cc5:	5e                   	pop    esi
c0022cc6:	5f                   	pop    edi
c0022cc7:	5d                   	pop    ebp
c0022cc8:	c3                   	ret    
c0022cc9:	90                   	nop

c0022cca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022cca:	55                   	push   ebp
c0022ccb:	57                   	push   edi
c0022ccc:	56                   	push   esi
c0022ccd:	53                   	push   ebx
c0022cce:	83 ec 5c             	sub    esp,0x5c
c0022cd1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022cd9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022cdd:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022ce2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022ce6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022cea:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022cef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cf3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022cf8:	6a 0c                	push   0xc
c0022cfa:	55                   	push   ebp
c0022cfb:	53                   	push   ebx
c0022cfc:	57                   	push   edi
c0022cfd:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d04:	e8 01 fc ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d09:	55                   	push   ebp
c0022d0a:	53                   	push   ebx
c0022d0b:	57                   	push   edi
c0022d0c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d13:	e8 80 fc ff ff       	call   c0022998 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d18:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d1d:	83 c4 24             	add    esp,0x24
c0022d20:	55                   	push   ebp
c0022d21:	53                   	push   ebx
c0022d22:	57                   	push   edi
c0022d23:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d27:	e8 f6 fc ff ff       	call   c0022a22 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d2c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d30:	6a 3c                	push   0x3c
c0022d32:	55                   	push   ebp
c0022d33:	53                   	push   ebx
c0022d34:	57                   	push   edi
c0022d35:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d3c:	e8 c9 fb ff ff       	call   c002290a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d41:	0f b6 c4             	movzx  eax,ah
c0022d44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d48:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d4c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d50:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0022d55:	83 c4 24             	add    esp,0x24
c0022d58:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d5e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d65:	74 6c                	je     c0022dd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d67:	31 f6                	xor    esi,esi
c0022d69:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022d6f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d75:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d7b:	7e 56                	jle    c0022dd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d7d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d80:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d87:	39 cb                	cmp    ebx,ecx
c0022d89:	75 45                	jne    c0022dd0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d8b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d92:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022d96:	75 38                	jne    c0022dd0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d98:	83 ec 0c             	sub    esp,0xc
c0022d9b:	68 92 c9 02 c0       	push   0xc002c992
c0022da0:	e8 55 01 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0022da5:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022dab:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022db1:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022db9:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022dbd:	52                   	push   edx
c0022dbe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022dc2:	53                   	push   ebx
c0022dc3:	68 b7 c9 02 c0       	push   0xc002c9b7
c0022dc8:	e8 2d 01 ff ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0022dcd:	83 c4 20             	add    esp,0x20
c0022dd0:	46                   	inc    esi
c0022dd1:	eb 96                	jmp    c0022d69 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022dd3:	31 d2                	xor    edx,edx
c0022dd5:	83 ec 0c             	sub    esp,0xc
c0022dd8:	55                   	push   ebp
c0022dd9:	53                   	push   ebx
c0022dda:	57                   	push   edi
c0022ddb:	52                   	push   edx
c0022ddc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022de0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022de7:	e8 7c fc ff ff       	call   c0022a68 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dec:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022df0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022df4:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022df8:	42                   	inc    edx
c0022df9:	83 c4 20             	add    esp,0x20
c0022dfc:	83 fa 06             	cmp    edx,0x6
c0022dff:	75 d4                	jne    c0022dd5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e01:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e05:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e09:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e0d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e11:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e15:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e19:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e1e:	86 e0                	xchg   al,ah
c0022e20:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e25:	55                   	push   ebp
c0022e26:	53                   	push   ebx
c0022e27:	57                   	push   edi
c0022e28:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e2c:	e8 ab fb ff ff       	call   c00229dc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e31:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e35:	55                   	push   ebp
c0022e36:	53                   	push   ebx
c0022e37:	57                   	push   edi
c0022e38:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e3f:	e8 0e fb ff ff       	call   c0022952 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e44:	83 ec 0c             	sub    esp,0xc
c0022e47:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e4c:	b9 09 00 00 00       	mov    ecx,0x9
c0022e51:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e55:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e59:	fc                   	cld    
c0022e5a:	89 e7                	mov    edi,esp
c0022e5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e5e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e65:	e8 ee fc ff ff       	call   c0022b58 <PCI::foundDevice(PCIDeviceInfo)>
c0022e6a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e70:	5b                   	pop    ebx
c0022e71:	5e                   	pop    esi
c0022e72:	5f                   	pop    edi
c0022e73:	5d                   	pop    ebp
c0022e74:	c3                   	ret    
c0022e75:	90                   	nop

c0022e76 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e76:	55                   	push   ebp
c0022e77:	57                   	push   edi
c0022e78:	56                   	push   esi
c0022e79:	53                   	push   ebx
c0022e7a:	83 ec 0c             	sub    esp,0xc
c0022e7d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e81:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e86:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e8b:	6a 00                	push   0x0
c0022e8d:	56                   	push   esi
c0022e8e:	57                   	push   edi
c0022e8f:	55                   	push   ebp
c0022e90:	e8 bd fa ff ff       	call   c0022952 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e95:	6a 00                	push   0x0
c0022e97:	56                   	push   esi
c0022e98:	57                   	push   edi
c0022e99:	55                   	push   ebp
c0022e9a:	e8 2b fe ff ff       	call   c0022cca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e9f:	83 c4 20             	add    esp,0x20
c0022ea2:	6a 00                	push   0x0
c0022ea4:	56                   	push   esi
c0022ea5:	57                   	push   edi
c0022ea6:	55                   	push   ebp
c0022ea7:	e8 c8 fa ff ff       	call   c0022974 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022eac:	83 c4 10             	add    esp,0x10
c0022eaf:	84 c0                	test   al,al
c0022eb1:	79 27                	jns    c0022eda <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022eb3:	bb 01 00 00 00       	mov    ebx,0x1
c0022eb8:	53                   	push   ebx
c0022eb9:	56                   	push   esi
c0022eba:	57                   	push   edi
c0022ebb:	55                   	push   ebp
c0022ebc:	e8 91 fa ff ff       	call   c0022952 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ec1:	83 c4 10             	add    esp,0x10
c0022ec4:	66 40                	inc    ax
c0022ec6:	74 0c                	je     c0022ed4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ec8:	53                   	push   ebx
c0022ec9:	56                   	push   esi
c0022eca:	57                   	push   edi
c0022ecb:	55                   	push   ebp
c0022ecc:	e8 f9 fd ff ff       	call   c0022cca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ed1:	83 c4 10             	add    esp,0x10
c0022ed4:	43                   	inc    ebx
c0022ed5:	83 fb 08             	cmp    ebx,0x8
c0022ed8:	75 de                	jne    c0022eb8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022eda:	83 c4 0c             	add    esp,0xc
c0022edd:	5b                   	pop    ebx
c0022ede:	5e                   	pop    esi
c0022edf:	5f                   	pop    edi
c0022ee0:	5d                   	pop    ebp
c0022ee1:	c3                   	ret    

c0022ee2 <PCI::detect()>:
c0022ee2:	56                   	push   esi
c0022ee3:	53                   	push   ebx
c0022ee4:	53                   	push   ebx
c0022ee5:	31 db                	xor    ebx,ebx
c0022ee7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022eeb:	6a 00                	push   0x0
c0022eed:	6a 00                	push   0x0
c0022eef:	6a 00                	push   0x0
c0022ef1:	56                   	push   esi
c0022ef2:	e8 7d fa ff ff       	call   c0022974 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ef7:	83 c4 10             	add    esp,0x10
c0022efa:	a8 80                	test   al,0x80
c0022efc:	75 21                	jne    c0022f1f <PCI::detect()+0x3d>
c0022efe:	51                   	push   ecx
c0022eff:	51                   	push   ecx
c0022f00:	6a 00                	push   0x0
c0022f02:	56                   	push   esi
c0022f03:	e8 2c fc ff ff       	call   c0022b34 <PCI::checkBus(unsigned char)>
c0022f08:	83 c4 10             	add    esp,0x10
c0022f0b:	eb 24                	jmp    c0022f31 <PCI::detect()+0x4f>
c0022f0d:	52                   	push   edx
c0022f0e:	52                   	push   edx
c0022f0f:	53                   	push   ebx
c0022f10:	43                   	inc    ebx
c0022f11:	56                   	push   esi
c0022f12:	e8 1d fc ff ff       	call   c0022b34 <PCI::checkBus(unsigned char)>
c0022f17:	83 c4 10             	add    esp,0x10
c0022f1a:	83 fb 08             	cmp    ebx,0x8
c0022f1d:	74 12                	je     c0022f31 <PCI::detect()+0x4f>
c0022f1f:	53                   	push   ebx
c0022f20:	6a 00                	push   0x0
c0022f22:	6a 00                	push   0x0
c0022f24:	56                   	push   esi
c0022f25:	e8 28 fa ff ff       	call   c0022952 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f2a:	83 c4 10             	add    esp,0x10
c0022f2d:	66 40                	inc    ax
c0022f2f:	74 dc                	je     c0022f0d <PCI::detect()+0x2b>
c0022f31:	58                   	pop    eax
c0022f32:	5b                   	pop    ebx
c0022f33:	5e                   	pop    esi
c0022f34:	c3                   	ret    
c0022f35:	90                   	nop

c0022f36 <IDE::close(int, int, void*)>:
c0022f36:	83 c8 ff             	or     eax,0xffffffff
c0022f39:	c3                   	ret    

c0022f3a <IDE::IDE()>:
c0022f3a:	83 ec 0c             	sub    esp,0xc
c0022f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f41:	83 ec 08             	sub    esp,0x8
c0022f44:	68 00 ca 02 c0       	push   0xc002ca00
c0022f49:	50                   	push   eax
c0022f4a:	e8 5d 17 ff ff       	call   c00146ac <HardDiskController::HardDiskController(char const*)>
c0022f4f:	83 c4 10             	add    esp,0x10
c0022f52:	ba 40 cc 02 c0       	mov    edx,0xc002cc40
c0022f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f5b:	89 10                	mov    DWORD PTR [eax],edx
c0022f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f61:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f68:	90                   	nop
c0022f69:	83 c4 0c             	add    esp,0xc
c0022f6c:	c3                   	ret    
c0022f6d:	90                   	nop

c0022f6e <IDE::prepareInterrupt(unsigned char)>:
c0022f6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f73:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f77:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f7f:	c3                   	ret    

c0022f80 <selectDrive(unsigned char, unsigned char)>:
c0022f80:	c3                   	ret    
c0022f81:	90                   	nop

c0022f82 <IDE::getBase(unsigned char)>:
c0022f82:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f8b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f93:	c3                   	ret    

c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f94:	55                   	push   ebp
c0022f95:	57                   	push   edi
c0022f96:	56                   	push   esi
c0022f97:	53                   	push   ebx
c0022f98:	83 ec 1c             	sub    esp,0x1c
c0022f9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fa3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fa6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022faa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fae:	80 f9 03             	cmp    cl,0x3
c0022fb1:	77 51                	ja     c0023004 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fb7:	0f b6 f2             	movzx  esi,dl
c0022fba:	0f b6 db             	movzx  ebx,bl
c0022fbd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fc0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fc4:	83 ca 80             	or     edx,0xffffff80
c0022fc7:	0f b6 d2             	movzx  edx,dl
c0022fca:	52                   	push   edx
c0022fcb:	6a 0c                	push   0xc
c0022fcd:	56                   	push   esi
c0022fce:	57                   	push   edi
c0022fcf:	e8 c0 ff ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fd4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fdd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fe1:	ee                   	out    dx,al
c0022fe2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022fe7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022feb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022fef:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022ff3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022ffb:	83 c4 2c             	add    esp,0x2c
c0022ffe:	5b                   	pop    ebx
c0022fff:	5e                   	pop    esi
c0023000:	5f                   	pop    edi
c0023001:	5d                   	pop    ebp
c0023002:	eb 90                	jmp    c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023004:	80 fb 07             	cmp    bl,0x7
c0023007:	77 12                	ja     c002301b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023009:	0f b6 d2             	movzx  edx,dl
c002300c:	0f b6 db             	movzx  ebx,bl
c002300f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023017:	89 da                	mov    edx,ebx
c0023019:	eb 2f                	jmp    c002304a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002301b:	80 fb 0d             	cmp    bl,0xd
c002301e:	77 13                	ja     c0023033 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023020:	0f b6 d2             	movzx  edx,dl
c0023023:	0f b6 db             	movzx  ebx,bl
c0023026:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002302d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023031:	eb 17                	jmp    c002304a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023033:	80 fb 15             	cmp    bl,0x15
c0023036:	77 13                	ja     c002304b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023038:	0f b6 d2             	movzx  edx,dl
c002303b:	0f b6 db             	movzx  ebx,bl
c002303e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023046:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002304a:	ee                   	out    dx,al
c002304b:	83 c4 1c             	add    esp,0x1c
c002304e:	5b                   	pop    ebx
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	5d                   	pop    ebp
c0023052:	c3                   	ret    
c0023053:	90                   	nop

c0023054 <IDE::read(unsigned char, unsigned char)>:
c0023054:	55                   	push   ebp
c0023055:	57                   	push   edi
c0023056:	56                   	push   esi
c0023057:	53                   	push   ebx
c0023058:	83 ec 1c             	sub    esp,0x1c
c002305b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002305f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023063:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023066:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002306a:	3c 03                	cmp    al,0x3
c002306c:	77 43                	ja     c00230b1 <IDE::read(unsigned char, unsigned char)+0x5d>
c002306e:	0f b6 f2             	movzx  esi,dl
c0023071:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023074:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023078:	83 c8 80             	or     eax,0xffffff80
c002307b:	0f b6 c0             	movzx  eax,al
c002307e:	50                   	push   eax
c002307f:	6a 0c                	push   0xc
c0023081:	56                   	push   esi
c0023082:	57                   	push   edi
c0023083:	e8 0c ff ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023088:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002308d:	0f b6 c3             	movzx  eax,bl
c0023090:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023094:	ec                   	in     al,dx
c0023095:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023099:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002309e:	52                   	push   edx
c002309f:	6a 0c                	push   0xc
c00230a1:	56                   	push   esi
c00230a2:	57                   	push   edi
c00230a3:	e8 ec fe ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a8:	83 c4 20             	add    esp,0x20
c00230ab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230af:	eb 49                	jmp    c00230fa <IDE::read(unsigned char, unsigned char)+0xa6>
c00230b1:	80 fb 07             	cmp    bl,0x7
c00230b4:	77 12                	ja     c00230c8 <IDE::read(unsigned char, unsigned char)+0x74>
c00230b6:	0f b6 d2             	movzx  edx,dl
c00230b9:	0f b6 c3             	movzx  eax,bl
c00230bc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230c4:	89 c2                	mov    edx,eax
c00230c6:	eb 31                	jmp    c00230f9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230c8:	80 fb 0d             	cmp    bl,0xd
c00230cb:	77 13                	ja     c00230e0 <IDE::read(unsigned char, unsigned char)+0x8c>
c00230cd:	0f b6 d2             	movzx  edx,dl
c00230d0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230d7:	0f b6 d3             	movzx  edx,bl
c00230da:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230de:	eb 19                	jmp    c00230f9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230e0:	31 c0                	xor    eax,eax
c00230e2:	80 fb 15             	cmp    bl,0x15
c00230e5:	77 13                	ja     c00230fa <IDE::read(unsigned char, unsigned char)+0xa6>
c00230e7:	0f b6 d2             	movzx  edx,dl
c00230ea:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00230f2:	0f b6 d3             	movzx  edx,bl
c00230f5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00230f9:	ec                   	in     al,dx
c00230fa:	83 c4 1c             	add    esp,0x1c
c00230fd:	5b                   	pop    ebx
c00230fe:	5e                   	pop    esi
c00230ff:	5f                   	pop    edi
c0023100:	5d                   	pop    ebp
c0023101:	c3                   	ret    

c0023102 <IDE::waitInterrupt(unsigned char)>:
c0023102:	55                   	push   ebp
c0023103:	57                   	push   edi
c0023104:	56                   	push   esi
c0023105:	53                   	push   ebx
c0023106:	31 db                	xor    ebx,ebx
c0023108:	83 ec 0c             	sub    esp,0xc
c002310b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002310f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023114:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002311c:	89 e8                	mov    eax,ebp
c002311e:	84 c0                	test   al,al
c0023120:	75 34                	jne    c0023156 <IDE::waitInterrupt(unsigned char)+0x54>
c0023122:	52                   	push   edx
c0023123:	6a 0c                	push   0xc
c0023125:	56                   	push   esi
c0023126:	57                   	push   edi
c0023127:	e8 28 ff ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002312c:	83 c4 10             	add    esp,0x10
c002312f:	a8 01                	test   al,0x1
c0023131:	75 2b                	jne    c002315e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023133:	f6 c3 04             	test   bl,0x4
c0023136:	75 16                	jne    c002314e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023138:	83 fb 32             	cmp    ebx,0x32
c002313b:	7e 11                	jle    c002314e <IDE::waitInterrupt(unsigned char)+0x4c>
c002313d:	50                   	push   eax
c002313e:	50                   	push   eax
c002313f:	6a 00                	push   0x0
c0023141:	68 80 96 98 00       	push   0x989680
c0023146:	e8 8b b1 ff ff       	call   c001e2d6 <nanoSleep(unsigned long long)>
c002314b:	83 c4 10             	add    esp,0x10
c002314e:	83 fb 3c             	cmp    ebx,0x3c
c0023151:	74 0b                	je     c002315e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023153:	43                   	inc    ebx
c0023154:	eb be                	jmp    c0023114 <IDE::waitInterrupt(unsigned char)+0x12>
c0023156:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002315e:	83 c4 0c             	add    esp,0xc
c0023161:	89 e8                	mov    eax,ebp
c0023163:	5b                   	pop    ebx
c0023164:	5e                   	pop    esi
c0023165:	5f                   	pop    edi
c0023166:	5d                   	pop    ebp
c0023167:	c3                   	ret    

c0023168 <ideChannel0IRQHandler(regs*, void*)>:
c0023168:	83 ec 10             	sub    esp,0x10
c002316b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002316f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023176:	6a 07                	push   0x7
c0023178:	6a 00                	push   0x0
c002317a:	50                   	push   eax
c002317b:	e8 d4 fe ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023180:	83 c4 1c             	add    esp,0x1c
c0023183:	c3                   	ret    

c0023184 <ideChannel1IRQHandler(regs*, void*)>:
c0023184:	83 ec 10             	sub    esp,0x10
c0023187:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002318b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023192:	6a 07                	push   0x7
c0023194:	6a 01                	push   0x1
c0023196:	50                   	push   eax
c0023197:	e8 b8 fe ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002319c:	83 c4 1c             	add    esp,0x1c
c002319f:	c3                   	ret    

c00231a0 <IDE::enableIRQs(unsigned char, bool)>:
c00231a0:	57                   	push   edi
c00231a1:	56                   	push   esi
c00231a2:	be 04 00 00 00       	mov    esi,0x4
c00231a7:	53                   	push   ebx
c00231a8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231b1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231b6:	0f 94 c0             	sete   al
c00231b9:	d1 e0                	shl    eax,1
c00231bb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231c2:	0f b6 c0             	movzx  eax,al
c00231c5:	50                   	push   eax
c00231c6:	6a 0c                	push   0xc
c00231c8:	57                   	push   edi
c00231c9:	53                   	push   ebx
c00231ca:	e8 c5 fd ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231cf:	83 c4 10             	add    esp,0x10
c00231d2:	50                   	push   eax
c00231d3:	6a 0c                	push   0xc
c00231d5:	57                   	push   edi
c00231d6:	53                   	push   ebx
c00231d7:	e8 78 fe ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00231dc:	83 c4 10             	add    esp,0x10
c00231df:	4e                   	dec    esi
c00231e0:	75 f0                	jne    c00231d2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231e2:	5b                   	pop    ebx
c00231e3:	5e                   	pop    esi
c00231e4:	5f                   	pop    edi
c00231e5:	c3                   	ret    

c00231e6 <IDE::open(int, int, void*)>:
c00231e6:	55                   	push   ebp
c00231e7:	57                   	push   edi
c00231e8:	56                   	push   esi
c00231e9:	53                   	push   ebx
c00231ea:	83 ec 1c             	sub    esp,0x1c
c00231ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231f1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00231fa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023203:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002320a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023211:	0f 85 b0 02 00 00    	jne    c00234c7 <IDE::open(int, int, void*)+0x2e1>
c0023217:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002321d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023221:	83 e0 7f             	and    eax,0x7f
c0023224:	3c 05                	cmp    al,0x5
c0023226:	74 04                	je     c002322c <IDE::open(int, int, void*)+0x46>
c0023228:	3c 0f                	cmp    al,0xf
c002322a:	75 32                	jne    c002325e <IDE::open(int, int, void*)+0x78>
c002322c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023232:	83 e0 fc             	and    eax,0xfffffffc
c0023235:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002323c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023242:	83 e0 fc             	and    eax,0xfffffffc
c0023245:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002324c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023252:	83 e0 fc             	and    eax,0xfffffffc
c0023255:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002325c:	eb 14                	jmp    c0023272 <IDE::open(int, int, void*)+0x8c>
c002325e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023268:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023272:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023279:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023280:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023284:	89 c6                	mov    esi,eax
c0023286:	bf f8 0c 00 00       	mov    edi,0xcf8
c002328b:	c1 e6 10             	shl    esi,0x10
c002328e:	89 e8                	mov    eax,ebp
c0023290:	89 fa                	mov    edx,edi
c0023292:	c1 e0 0b             	shl    eax,0xb
c0023295:	09 f0                	or     eax,esi
c0023297:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002329e:	c1 e6 08             	shl    esi,0x8
c00232a1:	09 c6                	or     esi,eax
c00232a3:	89 f0                	mov    eax,esi
c00232a5:	0d 08 00 00 80       	or     eax,0x80000008
c00232aa:	ef                   	out    dx,eax
c00232ab:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232b0:	89 ca                	mov    edx,ecx
c00232b2:	ed                   	in     eax,dx
c00232b3:	c1 e8 10             	shr    eax,0x10
c00232b6:	3d ff ff 00 00       	cmp    eax,0xffff
c00232bb:	0f 84 f5 00 00 00    	je     c00233b6 <IDE::open(int, int, void*)+0x1d0>
c00232c1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232c7:	89 fa                	mov    edx,edi
c00232c9:	89 f0                	mov    eax,esi
c00232cb:	ef                   	out    dx,eax
c00232cc:	b0 fe                	mov    al,0xfe
c00232ce:	89 ca                	mov    edx,ecx
c00232d0:	ee                   	out    dx,al
c00232d1:	89 f0                	mov    eax,esi
c00232d3:	89 fa                	mov    edx,edi
c00232d5:	ef                   	out    dx,eax
c00232d6:	89 ca                	mov    edx,ecx
c00232d8:	ed                   	in     eax,dx
c00232d9:	3c fe                	cmp    al,0xfe
c00232db:	0f 85 a9 00 00 00    	jne    c002338a <IDE::open(int, int, void*)+0x1a4>
c00232e1:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00232e7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232ee:	74 33                	je     c0023323 <IDE::open(int, int, void*)+0x13d>
c00232f0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00232f6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00232fa:	40                   	inc    eax
c00232fb:	83 ec 0c             	sub    esp,0xc
c00232fe:	0f b6 c0             	movzx  eax,al
c0023301:	50                   	push   eax
c0023302:	55                   	push   ebp
c0023303:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023307:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002330d:	51                   	push   ecx
c002330e:	e8 f1 4e ff ff       	call   c0018204 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023313:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023318:	83 c4 1c             	add    esp,0x1c
c002331b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023321:	eb 0a                	jmp    c002332d <IDE::open(int, int, void*)+0x147>
c0023323:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002332d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023334:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002333b:	c1 e1 10             	shl    ecx,0x10
c002333e:	c1 e0 08             	shl    eax,0x8
c0023341:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023346:	09 c1                	or     ecx,eax
c0023348:	89 fa                	mov    edx,edi
c002334a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023351:	c1 e0 0b             	shl    eax,0xb
c0023354:	09 c1                	or     ecx,eax
c0023356:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002335c:	89 c8                	mov    eax,ecx
c002335e:	ef                   	out    dx,eax
c002335f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023364:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002336a:	89 f2                	mov    edx,esi
c002336c:	ee                   	out    dx,al
c002336d:	89 c8                	mov    eax,ecx
c002336f:	89 fa                	mov    edx,edi
c0023371:	ef                   	out    dx,eax
c0023372:	89 f2                	mov    edx,esi
c0023374:	ed                   	in     eax,dx
c0023375:	0f b6 c0             	movzx  eax,al
c0023378:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002337e:	74 46                	je     c00233c6 <IDE::open(int, int, void*)+0x1e0>
c0023380:	83 ec 0c             	sub    esp,0xc
c0023383:	68 18 ca 02 c0       	push   0xc002ca18
c0023388:	eb 34                	jmp    c00233be <IDE::open(int, int, void*)+0x1d8>
c002338a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023393:	75 17                	jne    c00233ac <IDE::open(int, int, void*)+0x1c6>
c0023395:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002339a:	74 07                	je     c00233a3 <IDE::open(int, int, void*)+0x1bd>
c002339c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233a1:	75 09                	jne    c00233ac <IDE::open(int, int, void*)+0x1c6>
c00233a3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233aa:	eb 1a                	jmp    c00233c6 <IDE::open(int, int, void*)+0x1e0>
c00233ac:	83 ec 0c             	sub    esp,0xc
c00233af:	68 20 ca 02 c0       	push   0xc002ca20
c00233b4:	eb 08                	jmp    c00233be <IDE::open(int, int, void*)+0x1d8>
c00233b6:	83 ec 0c             	sub    esp,0xc
c00233b9:	68 51 ca 02 c0       	push   0xc002ca51
c00233be:	e8 e8 71 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00233c3:	83 c4 10             	add    esp,0x10
c00233c6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233cd:	79 1a                	jns    c00233e9 <IDE::open(int, int, void*)+0x203>
c00233cf:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233d5:	83 e0 fc             	and    eax,0xfffffffc
c00233d8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233df:	83 c0 08             	add    eax,0x8
c00233e2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233e9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233ef:	89 c2                	mov    edx,eax
c00233f1:	83 e2 0f             	and    edx,0xf
c00233f4:	66 83 fa 08          	cmp    dx,0x8
c00233f8:	75 0a                	jne    c0023404 <IDE::open(int, int, void*)+0x21e>
c00233fa:	83 e8 02             	sub    eax,0x2
c00233fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023404:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002340a:	89 c2                	mov    edx,eax
c002340c:	83 e2 0f             	and    edx,0xf
c002340f:	66 83 fa 08          	cmp    dx,0x8
c0023413:	75 0a                	jne    c002341f <IDE::open(int, int, void*)+0x239>
c0023415:	83 e8 02             	sub    eax,0x2
c0023418:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002341f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023426:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002342d:	89 d0                	mov    eax,edx
c002342f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023432:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023436:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002343a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002343d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023442:	0f b6 c9             	movzx  ecx,cl
c0023445:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002344c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002344f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023453:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023457:	8d 50 02             	lea    edx,[eax+0x2]
c002345a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002345f:	0f b6 d2             	movzx  edx,dl
c0023462:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023468:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002346b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002346f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023473:	8d 48 03             	lea    ecx,[eax+0x3]
c0023476:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002347b:	0f b6 c9             	movzx  ecx,cl
c002347e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023484:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023487:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002348b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002348f:	8d 50 04             	lea    edx,[eax+0x4]
c0023492:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023498:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002349d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234a4:	66 85 f6             	test   si,si
c00234a7:	74 3e                	je     c00234e7 <IDE::open(int, int, void*)+0x301>
c00234a9:	0f b6 d2             	movzx  edx,dl
c00234ac:	83 c0 05             	add    eax,0x5
c00234af:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234b2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234b6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234ba:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234c0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234c5:	eb 20                	jmp    c00234e7 <IDE::open(int, int, void*)+0x301>
c00234c7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234d1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234db:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234e2:	e9 02 ff ff ff       	jmp    c00233e9 <IDE::open(int, int, void*)+0x203>
c00234e7:	52                   	push   edx
c00234e8:	52                   	push   edx
c00234e9:	6a 00                	push   0x0
c00234eb:	53                   	push   ebx
c00234ec:	e8 7d fa ff ff       	call   c0022f6e <IDE::prepareInterrupt(unsigned char)>
c00234f1:	59                   	pop    ecx
c00234f2:	5e                   	pop    esi
c00234f3:	6a 01                	push   0x1
c00234f5:	53                   	push   ebx
c00234f6:	e8 73 fa ff ff       	call   c0022f6e <IDE::prepareInterrupt(unsigned char)>
c00234fb:	83 c4 0c             	add    esp,0xc
c00234fe:	6a 00                	push   0x0
c0023500:	6a 00                	push   0x0
c0023502:	53                   	push   ebx
c0023503:	e8 98 fc ff ff       	call   c00231a0 <IDE::enableIRQs(unsigned char, bool)>
c0023508:	83 c4 0c             	add    esp,0xc
c002350b:	6a 00                	push   0x0
c002350d:	6a 01                	push   0x1
c002350f:	53                   	push   ebx
c0023510:	e8 8b fc ff ff       	call   c00231a0 <IDE::enableIRQs(unsigned char, bool)>
c0023515:	83 c4 10             	add    esp,0x10
c0023518:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002351f:	74 40                	je     c0023561 <IDE::open(int, int, void*)+0x37b>
c0023521:	83 ec 0c             	sub    esp,0xc
c0023524:	68 7b ca 02 c0       	push   0xc002ca7b
c0023529:	e8 cc f9 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c002352e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023531:	6a 01                	push   0x1
c0023533:	68 68 31 02 c0       	push   0xc0023168
c0023538:	6a 0e                	push   0xe
c002353a:	53                   	push   ebx
c002353b:	e8 64 0d ff ff       	call   c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023540:	83 c4 14             	add    esp,0x14
c0023543:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023549:	53                   	push   ebx
c002354a:	6a 01                	push   0x1
c002354c:	68 84 31 02 c0       	push   0xc0023184
c0023551:	6a 0f                	push   0xf
c0023553:	53                   	push   ebx
c0023554:	e8 4b 0d ff ff       	call   c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023559:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002355f:	eb 4a                	jmp    c00235ab <IDE::open(int, int, void*)+0x3c5>
c0023561:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002356b:	50                   	push   eax
c002356c:	6a 0f                	push   0xf
c002356e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023574:	68 97 ca 02 c0       	push   0xc002ca97
c0023579:	e8 7c f9 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c002357e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023581:	6a 00                	push   0x0
c0023583:	68 68 31 02 c0       	push   0xc0023168
c0023588:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002358e:	53                   	push   ebx
c002358f:	e8 10 0d ff ff       	call   c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023594:	83 c4 14             	add    esp,0x14
c0023597:	53                   	push   ebx
c0023598:	6a 00                	push   0x0
c002359a:	68 84 31 02 c0       	push   0xc0023184
c002359f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235a5:	53                   	push   ebx
c00235a6:	e8 f9 0c ff ff       	call   c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235ad:	83 c4 20             	add    esp,0x20
c00235b0:	83 ec 0c             	sub    esp,0xc
c00235b3:	53                   	push   ebx
c00235b4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235b7:	83 c4 0c             	add    esp,0xc
c00235ba:	6a 07                	push   0x7
c00235bc:	6a 00                	push   0x0
c00235be:	53                   	push   ebx
c00235bf:	e8 90 fa ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00235c4:	83 c4 0c             	add    esp,0xc
c00235c7:	6a 07                	push   0x7
c00235c9:	6a 01                	push   0x1
c00235cb:	53                   	push   ebx
c00235cc:	e8 83 fa ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00235d1:	83 c4 0c             	add    esp,0xc
c00235d4:	6a 01                	push   0x1
c00235d6:	6a 00                	push   0x0
c00235d8:	53                   	push   ebx
c00235d9:	e8 c2 fb ff ff       	call   c00231a0 <IDE::enableIRQs(unsigned char, bool)>
c00235de:	83 c4 0c             	add    esp,0xc
c00235e1:	6a 01                	push   0x1
c00235e3:	6a 01                	push   0x1
c00235e5:	53                   	push   ebx
c00235e6:	e8 b5 fb ff ff       	call   c00231a0 <IDE::enableIRQs(unsigned char, bool)>
c00235eb:	83 c4 2c             	add    esp,0x2c
c00235ee:	31 c0                	xor    eax,eax
c00235f0:	5b                   	pop    ebx
c00235f1:	5e                   	pop    esi
c00235f2:	5f                   	pop    edi
c00235f3:	5d                   	pop    ebp
c00235f4:	c3                   	ret    
c00235f5:	90                   	nop

c00235f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00235f6:	55                   	push   ebp
c00235f7:	57                   	push   edi
c00235f8:	56                   	push   esi
c00235f9:	53                   	push   ebx
c00235fa:	83 ec 1c             	sub    esp,0x1c
c00235fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023601:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023605:	8d 50 f8             	lea    edx,[eax-0x8]
c0023608:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002360c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023610:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023614:	80 fa 03             	cmp    dl,0x3
c0023617:	77 5d                	ja     c0023676 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023619:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002361d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023621:	0f b6 db             	movzx  ebx,bl
c0023624:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023627:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002362b:	83 ca 80             	or     edx,0xffffff80
c002362e:	0f b6 d2             	movzx  edx,dl
c0023631:	52                   	push   edx
c0023632:	6a 0c                	push   0xc
c0023634:	53                   	push   ebx
c0023635:	56                   	push   esi
c0023636:	e8 59 f9 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002363b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023640:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023644:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023648:	0f b6 c0             	movzx  eax,al
c002364b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002364f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023651:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023656:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002365a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002365e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023662:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002366a:	83 c4 2c             	add    esp,0x2c
c002366d:	5b                   	pop    ebx
c002366e:	5e                   	pop    esi
c002366f:	5f                   	pop    edi
c0023670:	5d                   	pop    ebp
c0023671:	e9 1e f9 ff ff       	jmp    c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023676:	3c 07                	cmp    al,0x7
c0023678:	77 10                	ja     c002368a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002367a:	0f b6 db             	movzx  ebx,bl
c002367d:	0f b6 d0             	movzx  edx,al
c0023680:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023688:	eb 2d                	jmp    c00236b7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002368a:	3c 0d                	cmp    al,0xd
c002368c:	77 13                	ja     c00236a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002368e:	0f b6 db             	movzx  ebx,bl
c0023691:	0f b6 c0             	movzx  eax,al
c0023694:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002369b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002369f:	eb 16                	jmp    c00236b7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236a1:	3c 15                	cmp    al,0x15
c00236a3:	77 14                	ja     c00236b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236a5:	0f b6 db             	movzx  ebx,bl
c00236a8:	0f b6 c0             	movzx  eax,al
c00236ab:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236b3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236b7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236b9:	83 c4 1c             	add    esp,0x1c
c00236bc:	5b                   	pop    ebx
c00236bd:	5e                   	pop    esi
c00236be:	5f                   	pop    edi
c00236bf:	5d                   	pop    ebp
c00236c0:	c3                   	ret    
c00236c1:	90                   	nop

c00236c2 <IDE::detect()>:
c00236c2:	55                   	push   ebp
c00236c3:	57                   	push   edi
c00236c4:	56                   	push   esi
c00236c5:	53                   	push   ebx
c00236c6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236cc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236d3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236da:	0f 85 be 02 00 00    	jne    c002399e <IDE::detect()+0x2dc>
c00236e0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236e7:	31 f6                	xor    esi,esi
c00236e9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236f1:	31 ed                	xor    ebp,ebp
c00236f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236f7:	c1 e0 06             	shl    eax,0x6
c00236fa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023702:	89 e8                	mov    eax,ebp
c0023704:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023708:	c1 e0 04             	shl    eax,0x4
c002370b:	83 c8 a0             	or     eax,0xffffffa0
c002370e:	0f b6 c0             	movzx  eax,al
c0023711:	50                   	push   eax
c0023712:	6a 06                	push   0x6
c0023714:	56                   	push   esi
c0023715:	53                   	push   ebx
c0023716:	e8 79 f8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002371b:	83 c4 0c             	add    esp,0xc
c002371e:	6a 0c                	push   0xc
c0023720:	56                   	push   esi
c0023721:	53                   	push   ebx
c0023722:	e8 2d f9 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023727:	83 c4 0c             	add    esp,0xc
c002372a:	6a 0c                	push   0xc
c002372c:	56                   	push   esi
c002372d:	53                   	push   ebx
c002372e:	e8 21 f9 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023733:	83 c4 0c             	add    esp,0xc
c0023736:	6a 0c                	push   0xc
c0023738:	56                   	push   esi
c0023739:	53                   	push   ebx
c002373a:	e8 15 f9 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002373f:	83 c4 0c             	add    esp,0xc
c0023742:	6a 0c                	push   0xc
c0023744:	56                   	push   esi
c0023745:	53                   	push   ebx
c0023746:	e8 09 f9 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002374b:	68 ec 00 00 00       	push   0xec
c0023750:	6a 07                	push   0x7
c0023752:	56                   	push   esi
c0023753:	53                   	push   ebx
c0023754:	e8 3b f8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023759:	83 c4 1c             	add    esp,0x1c
c002375c:	6a 0c                	push   0xc
c002375e:	56                   	push   esi
c002375f:	53                   	push   ebx
c0023760:	e8 ef f8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023765:	83 c4 0c             	add    esp,0xc
c0023768:	6a 0c                	push   0xc
c002376a:	56                   	push   esi
c002376b:	53                   	push   ebx
c002376c:	e8 e3 f8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023771:	83 c4 0c             	add    esp,0xc
c0023774:	6a 0c                	push   0xc
c0023776:	56                   	push   esi
c0023777:	53                   	push   ebx
c0023778:	e8 d7 f8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002377d:	83 c4 0c             	add    esp,0xc
c0023780:	6a 0c                	push   0xc
c0023782:	56                   	push   esi
c0023783:	53                   	push   ebx
c0023784:	e8 cb f8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023789:	83 c4 0c             	add    esp,0xc
c002378c:	6a 0c                	push   0xc
c002378e:	56                   	push   esi
c002378f:	53                   	push   ebx
c0023790:	e8 bf f8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023795:	83 c4 10             	add    esp,0x10
c0023798:	84 c0                	test   al,al
c002379a:	0f 84 8b 01 00 00    	je     c002392b <IDE::detect()+0x269>
c00237a0:	31 ff                	xor    edi,edi
c00237a2:	50                   	push   eax
c00237a3:	6a 0c                	push   0xc
c00237a5:	56                   	push   esi
c00237a6:	53                   	push   ebx
c00237a7:	e8 a8 f8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00237ac:	83 c4 10             	add    esp,0x10
c00237af:	a8 01                	test   al,0x1
c00237b1:	0f 85 8e 01 00 00    	jne    c0023945 <IDE::detect()+0x283>
c00237b7:	84 c0                	test   al,al
c00237b9:	78 04                	js     c00237bf <IDE::detect()+0xfd>
c00237bb:	a8 08                	test   al,0x8
c00237bd:	75 27                	jne    c00237e6 <IDE::detect()+0x124>
c00237bf:	47                   	inc    edi
c00237c0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237c6:	7e da                	jle    c00237a2 <IDE::detect()+0xe0>
c00237c8:	50                   	push   eax
c00237c9:	50                   	push   eax
c00237ca:	6a 00                	push   0x0
c00237cc:	68 40 4b 4c 00       	push   0x4c4b40
c00237d1:	e8 00 ab ff ff       	call   c001e2d6 <nanoSleep(unsigned long long)>
c00237d6:	83 c4 10             	add    esp,0x10
c00237d9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237df:	75 c1                	jne    c00237a2 <IDE::detect()+0xe0>
c00237e1:	e9 5f 01 00 00       	jmp    c0023945 <IDE::detect()+0x283>
c00237e6:	31 c9                	xor    ecx,ecx
c00237e8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237ec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237f0:	83 ec 0c             	sub    esp,0xc
c00237f3:	68 80 00 00 00       	push   0x80
c00237f8:	57                   	push   edi
c00237f9:	6a 00                	push   0x0
c00237fb:	56                   	push   esi
c00237fc:	53                   	push   ebx
c00237fd:	e8 f4 fd ff ff       	call   c00235f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023802:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023807:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002380b:	89 d1                	mov    ecx,edx
c002380d:	c1 e0 06             	shl    eax,0x6
c0023810:	01 d8                	add    eax,ebx
c0023812:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023819:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023820:	89 f2                	mov    edx,esi
c0023822:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023828:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002382c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023832:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023836:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002383d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023845:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002384c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023854:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002385a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023861:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023867:	8d 54 24 58          	lea    edx,[esp+0x58]
c002386b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002386f:	83 c4 20             	add    esp,0x20
c0023872:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023875:	83 c0 02             	add    eax,0x2
c0023878:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002387e:	83 c7 02             	add    edi,0x2
c0023881:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023884:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002388a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002388e:	75 e2                	jne    c0023872 <IDE::detect()+0x1b0>
c0023890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023894:	c1 e0 06             	shl    eax,0x6
c0023897:	01 d8                	add    eax,ebx
c0023899:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002389f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238a6:	66 c1 ea 09          	shr    dx,0x9
c00238aa:	83 e2 01             	and    edx,0x1
c00238ad:	84 c9                	test   cl,cl
c00238af:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238b5:	75 2f                	jne    c00238e6 <IDE::detect()+0x224>
c00238b7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238bd:	85 c0                	test   eax,eax
c00238bf:	74 66                	je     c0023927 <IDE::detect()+0x265>
c00238c1:	50                   	push   eax
c00238c2:	55                   	push   ebp
c00238c3:	56                   	push   esi
c00238c4:	68 b3 ca 02 c0       	push   0xc002cab3
c00238c9:	e8 2c f6 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00238ce:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00238d5:	e8 66 bf fe ff       	call   c000f840 <malloc>
c00238da:	89 c7                	mov    edi,eax
c00238dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00238df:	e8 78 06 00 00       	call   c0023f5c <ATA::ATA()>
c00238e4:	eb 28                	jmp    c002390e <IDE::detect()+0x24c>
c00238e6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00238ec:	55                   	push   ebp
c00238ed:	56                   	push   esi
c00238ee:	68 e2 ca 02 c0       	push   0xc002cae2
c00238f3:	e8 02 f6 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00238f8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00238ff:	e8 3c bf fe ff       	call   c000f840 <malloc>
c0023904:	89 c7                	mov    edi,eax
c0023906:	89 04 24             	mov    DWORD PTR [esp],eax
c0023909:	e8 8e 0c 00 00       	call   c002459c <ATAPI::ATAPI()>
c002390e:	5a                   	pop    edx
c002390f:	59                   	pop    ecx
c0023910:	57                   	push   edi
c0023911:	53                   	push   ebx
c0023912:	e8 09 0a ff ff       	call   c0014320 <Device::addChild(Device*)>
c0023917:	8b 07                	mov    eax,DWORD PTR [edi]
c0023919:	53                   	push   ebx
c002391a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002391e:	6a 00                	push   0x0
c0023920:	57                   	push   edi
c0023921:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023924:	83 c4 20             	add    esp,0x20
c0023927:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002392b:	4d                   	dec    ebp
c002392c:	74 0a                	je     c0023938 <IDE::detect()+0x276>
c002392e:	bd 01 00 00 00       	mov    ebp,0x1
c0023933:	e9 bb fd ff ff       	jmp    c00236f3 <IDE::detect()+0x31>
c0023938:	4e                   	dec    esi
c0023939:	74 63                	je     c002399e <IDE::detect()+0x2dc>
c002393b:	be 01 00 00 00       	mov    esi,0x1
c0023940:	e9 ac fd ff ff       	jmp    c00236f1 <IDE::detect()+0x2f>
c0023945:	50                   	push   eax
c0023946:	6a 04                	push   0x4
c0023948:	56                   	push   esi
c0023949:	53                   	push   ebx
c002394a:	e8 05 f7 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002394f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023953:	83 c4 0c             	add    esp,0xc
c0023956:	6a 05                	push   0x5
c0023958:	56                   	push   esi
c0023959:	53                   	push   ebx
c002395a:	e8 f5 f6 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c002395f:	83 c4 10             	add    esp,0x10
c0023962:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023966:	80 fa 14             	cmp    dl,0x14
c0023969:	75 04                	jne    c002396f <IDE::detect()+0x2ad>
c002396b:	3c eb                	cmp    al,0xeb
c002396d:	eb 07                	jmp    c0023976 <IDE::detect()+0x2b4>
c002396f:	3c 96                	cmp    al,0x96
c0023971:	75 b8                	jne    c002392b <IDE::detect()+0x269>
c0023973:	80 fa 69             	cmp    dl,0x69
c0023976:	75 b3                	jne    c002392b <IDE::detect()+0x269>
c0023978:	68 a1 00 00 00       	push   0xa1
c002397d:	6a 07                	push   0x7
c002397f:	56                   	push   esi
c0023980:	53                   	push   ebx
c0023981:	e8 0e f6 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023986:	5f                   	pop    edi
c0023987:	58                   	pop    eax
c0023988:	6a 00                	push   0x0
c002398a:	68 40 42 0f 00       	push   0xf4240
c002398f:	e8 42 a9 ff ff       	call   c001e2d6 <nanoSleep(unsigned long long)>
c0023994:	83 c4 10             	add    esp,0x10
c0023997:	b1 01                	mov    cl,0x1
c0023999:	e9 4a fe ff ff       	jmp    c00237e8 <IDE::detect()+0x126>
c002399e:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239a4:	5b                   	pop    ebx
c00239a5:	5e                   	pop    esi
c00239a6:	5f                   	pop    edi
c00239a7:	5d                   	pop    ebp
c00239a8:	c3                   	ret    
c00239a9:	90                   	nop

c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239aa:	55                   	push   ebp
c00239ab:	57                   	push   edi
c00239ac:	56                   	push   esi
c00239ad:	53                   	push   ebx
c00239ae:	83 ec 1c             	sub    esp,0x1c
c00239b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239c1:	88 c3                	mov    bl,al
c00239c3:	84 c0                	test   al,al
c00239c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239c9:	0f 84 67 01 00 00    	je     c0023b36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00239cf:	83 ec 0c             	sub    esp,0xc
c00239d2:	68 13 cb 02 c0       	push   0xc002cb13
c00239d7:	e8 1e f5 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00239dc:	83 c4 10             	add    esp,0x10
c00239df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239e3:	3c 01                	cmp    al,0x1
c00239e5:	75 17                	jne    c00239fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00239e7:	83 ec 0c             	sub    esp,0xc
c00239ea:	b3 13                	mov    bl,0x13
c00239ec:	68 1f cb 02 c0       	push   0xc002cb1f
c00239f1:	e8 04 f5 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00239f6:	83 c4 10             	add    esp,0x10
c00239f9:	e9 25 01 00 00       	jmp    c0023b23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239fe:	3c 02                	cmp    al,0x2
c0023a00:	0f 85 ef 00 00 00    	jne    c0023af5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a06:	d1 e6                	shl    esi,1
c0023a08:	09 ee                	or     esi,ebp
c0023a0a:	52                   	push   edx
c0023a0b:	89 f0                	mov    eax,esi
c0023a0d:	6a 01                	push   0x1
c0023a0f:	0f b6 f0             	movzx  esi,al
c0023a12:	c1 e6 06             	shl    esi,0x6
c0023a15:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a1d:	50                   	push   eax
c0023a1e:	57                   	push   edi
c0023a1f:	e8 30 f6 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023a24:	83 c4 10             	add    esp,0x10
c0023a27:	89 c6                	mov    esi,eax
c0023a29:	a8 01                	test   al,0x1
c0023a2b:	74 12                	je     c0023a3f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a2d:	83 ec 0c             	sub    esp,0xc
c0023a30:	b3 07                	mov    bl,0x7
c0023a32:	68 34 cb 02 c0       	push   0xc002cb34
c0023a37:	e8 be f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023a3c:	83 c4 10             	add    esp,0x10
c0023a3f:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a45:	74 12                	je     c0023a59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a47:	83 ec 0c             	sub    esp,0xc
c0023a4a:	b3 03                	mov    bl,0x3
c0023a4c:	68 52 cb 02 c0       	push   0xc002cb52
c0023a51:	e8 a4 f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023a56:	83 c4 10             	add    esp,0x10
c0023a59:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a5f:	74 12                	je     c0023a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a61:	83 ec 0c             	sub    esp,0xc
c0023a64:	b3 14                	mov    bl,0x14
c0023a66:	68 72 cb 02 c0       	push   0xc002cb72
c0023a6b:	e8 8a f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023a70:	83 c4 10             	add    esp,0x10
c0023a73:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a79:	74 12                	je     c0023a8d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a7b:	83 ec 0c             	sub    esp,0xc
c0023a7e:	b3 03                	mov    bl,0x3
c0023a80:	68 52 cb 02 c0       	push   0xc002cb52
c0023a85:	e8 70 f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023a8a:	83 c4 10             	add    esp,0x10
c0023a8d:	f7 c6 10 00 00 00    	test   esi,0x10
c0023a93:	74 12                	je     c0023aa7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023a95:	83 ec 0c             	sub    esp,0xc
c0023a98:	b3 15                	mov    bl,0x15
c0023a9a:	68 8a cb 02 c0       	push   0xc002cb8a
c0023a9f:	e8 56 f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023aa4:	83 c4 10             	add    esp,0x10
c0023aa7:	f7 c6 20 00 00 00    	test   esi,0x20
c0023aad:	74 12                	je     c0023ac1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023aaf:	83 ec 0c             	sub    esp,0xc
c0023ab2:	b3 03                	mov    bl,0x3
c0023ab4:	68 52 cb 02 c0       	push   0xc002cb52
c0023ab9:	e8 3c f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023abe:	83 c4 10             	add    esp,0x10
c0023ac1:	f7 c6 40 00 00 00    	test   esi,0x40
c0023ac7:	74 12                	je     c0023adb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023ac9:	83 ec 0c             	sub    esp,0xc
c0023acc:	b3 16                	mov    bl,0x16
c0023ace:	68 a4 cb 02 c0       	push   0xc002cba4
c0023ad3:	e8 22 f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023ad8:	83 c4 10             	add    esp,0x10
c0023adb:	89 f0                	mov    eax,esi
c0023add:	84 c0                	test   al,al
c0023adf:	79 42                	jns    c0023b23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ae1:	83 ec 0c             	sub    esp,0xc
c0023ae4:	b3 0d                	mov    bl,0xd
c0023ae6:	68 c5 cb 02 c0       	push   0xc002cbc5
c0023aeb:	e8 0a f4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023af0:	83 c4 10             	add    esp,0x10
c0023af3:	eb 2e                	jmp    c0023b23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023af5:	3c 03                	cmp    al,0x3
c0023af7:	75 14                	jne    c0023b0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023af9:	83 ec 0c             	sub    esp,0xc
c0023afc:	b3 17                	mov    bl,0x17
c0023afe:	68 d9 cb 02 c0       	push   0xc002cbd9
c0023b03:	e8 f2 f3 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023b08:	83 c4 10             	add    esp,0x10
c0023b0b:	eb 16                	jmp    c0023b23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b0d:	3c 04                	cmp    al,0x4
c0023b0f:	75 12                	jne    c0023b23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b11:	83 ec 0c             	sub    esp,0xc
c0023b14:	b3 08                	mov    bl,0x8
c0023b16:	68 ef cb 02 c0       	push   0xc002cbef
c0023b1b:	e8 da f3 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023b20:	83 c4 10             	add    esp,0x10
c0023b23:	50                   	push   eax
c0023b24:	50                   	push   eax
c0023b25:	0f b6 c3             	movzx  eax,bl
c0023b28:	50                   	push   eax
c0023b29:	68 07 cc 02 c0       	push   0xc002cc07
c0023b2e:	e8 c7 f3 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023b33:	83 c4 10             	add    esp,0x10
c0023b36:	83 c4 1c             	add    esp,0x1c
c0023b39:	88 d8                	mov    al,bl
c0023b3b:	5b                   	pop    ebx
c0023b3c:	5e                   	pop    esi
c0023b3d:	5f                   	pop    edi
c0023b3e:	5d                   	pop    ebp
c0023b3f:	c3                   	ret    

c0023b40 <IDE::polling(unsigned char, unsigned int)>:
c0023b40:	57                   	push   edi
c0023b41:	56                   	push   esi
c0023b42:	53                   	push   ebx
c0023b43:	bb 04 00 00 00       	mov    ebx,0x4
c0023b48:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b4c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b51:	52                   	push   edx
c0023b52:	6a 0c                	push   0xc
c0023b54:	56                   	push   esi
c0023b55:	57                   	push   edi
c0023b56:	e8 f9 f4 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023b5b:	83 c4 10             	add    esp,0x10
c0023b5e:	4b                   	dec    ebx
c0023b5f:	75 f0                	jne    c0023b51 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b61:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b66:	50                   	push   eax
c0023b67:	6a 0c                	push   0xc
c0023b69:	56                   	push   esi
c0023b6a:	57                   	push   edi
c0023b6b:	e8 e4 f4 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023b70:	83 c4 10             	add    esp,0x10
c0023b73:	a8 01                	test   al,0x1
c0023b75:	74 12                	je     c0023b89 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b77:	83 ec 0c             	sub    esp,0xc
c0023b7a:	68 21 cc 02 c0       	push   0xc002cc21
c0023b7f:	e8 76 f3 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023b84:	83 c4 10             	add    esp,0x10
c0023b87:	eb 17                	jmp    c0023ba0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b89:	a8 20                	test   al,0x20
c0023b8b:	75 0f                	jne    c0023b9c <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023b8d:	4b                   	dec    ebx
c0023b8e:	74 10                	je     c0023ba0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b90:	84 c0                	test   al,al
c0023b92:	78 d2                	js     c0023b66 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b94:	a8 08                	test   al,0x8
c0023b96:	74 ce                	je     c0023b66 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b98:	31 c0                	xor    eax,eax
c0023b9a:	eb 06                	jmp    c0023ba2 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023b9c:	b0 01                	mov    al,0x1
c0023b9e:	eb 02                	jmp    c0023ba2 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ba0:	b0 02                	mov    al,0x2
c0023ba2:	5b                   	pop    ebx
c0023ba3:	5e                   	pop    esi
c0023ba4:	5f                   	pop    edi
c0023ba5:	c3                   	ret    

c0023ba6 <SATABus::close(int, int, void*)>:
c0023ba6:	31 c0                	xor    eax,eax
c0023ba8:	c3                   	ret    
c0023ba9:	90                   	nop

c0023baa <SATABus::detect()>:
c0023baa:	c3                   	ret    
c0023bab:	90                   	nop

c0023bac <SATABus::SATABus()>:
c0023bac:	83 ec 0c             	sub    esp,0xc
c0023baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bb3:	83 ec 08             	sub    esp,0x8
c0023bb6:	68 64 cc 02 c0       	push   0xc002cc64
c0023bbb:	50                   	push   eax
c0023bbc:	e8 eb 0a ff ff       	call   c00146ac <HardDiskController::HardDiskController(char const*)>
c0023bc1:	83 c4 10             	add    esp,0x10
c0023bc4:	ba 20 cd 02 c0       	mov    edx,0xc002cd20
c0023bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bcd:	89 10                	mov    DWORD PTR [eax],edx
c0023bcf:	83 ec 0c             	sub    esp,0xc
c0023bd2:	6a 50                	push   0x50
c0023bd4:	e8 4c c4 fe ff       	call   c0010025 <Phys::allocateContiguousPages(int)>
c0023bd9:	83 c4 10             	add    esp,0x10
c0023bdc:	89 c2                	mov    edx,eax
c0023bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023be8:	83 ec 0c             	sub    esp,0xc
c0023beb:	6a 50                	push   0x50
c0023bed:	e8 ad df fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0023bf2:	83 c4 10             	add    esp,0x10
c0023bf5:	89 c2                	mov    edx,eax
c0023bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bfb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c01:	e8 34 e2 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0023c06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c0a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c14:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c1a:	83 ec 0c             	sub    esp,0xc
c0023c1d:	6a 03                	push   0x3
c0023c1f:	6a 50                	push   0x50
c0023c21:	51                   	push   ecx
c0023c22:	52                   	push   edx
c0023c23:	50                   	push   eax
c0023c24:	e8 41 ea fe ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c29:	83 c4 20             	add    esp,0x20
c0023c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c30:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c40:	83 ec 04             	sub    esp,0x4
c0023c43:	52                   	push   edx
c0023c44:	50                   	push   eax
c0023c45:	68 88 cc 02 c0       	push   0xc002cc88
c0023c4a:	e8 ab f2 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023c4f:	83 c4 10             	add    esp,0x10
c0023c52:	90                   	nop
c0023c53:	83 c4 0c             	add    esp,0xc
c0023c56:	c3                   	ret    
c0023c57:	90                   	nop

c0023c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c58:	83 ec 0c             	sub    esp,0xc
c0023c5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c5f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c65:	09 c2                	or     edx,eax
c0023c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c71:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c73:	31 c0                	xor    eax,eax
c0023c75:	c1 e9 08             	shr    ecx,0x8
c0023c78:	83 e1 0f             	and    ecx,0xf
c0023c7b:	39 c8                	cmp    eax,ecx
c0023c7d:	74 0a                	je     c0023c89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c7f:	f6 c2 01             	test   dl,0x1
c0023c82:	74 18                	je     c0023c9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c84:	d1 ea                	shr    edx,1
c0023c86:	40                   	inc    eax
c0023c87:	eb f2                	jmp    c0023c7b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c89:	83 ec 0c             	sub    esp,0xc
c0023c8c:	68 ac cc 02 c0       	push   0xc002ccac
c0023c91:	e8 15 69 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0023c96:	83 c4 10             	add    esp,0x10
c0023c99:	83 c8 ff             	or     eax,0xffffffff
c0023c9c:	83 c4 0c             	add    esp,0xc
c0023c9f:	c3                   	ret    

c0023ca0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ca0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ca4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ca7:	89 c2                	mov    edx,eax
c0023ca9:	c1 ea 08             	shr    edx,0x8
c0023cac:	83 e2 0f             	and    edx,0xf
c0023caf:	fe ca                	dec    dl
c0023cb1:	75 31                	jne    c0023ce4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cb3:	83 e0 0f             	and    eax,0xf
c0023cb6:	3c 03                	cmp    al,0x3
c0023cb8:	75 2a                	jne    c0023ce4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cba:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cbd:	b8 02 00 00 00       	mov    eax,0x2
c0023cc2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023cc8:	74 1c                	je     c0023ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cca:	b8 04 00 00 00       	mov    eax,0x4
c0023ccf:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023cd5:	74 0f                	je     c0023ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cd7:	31 c0                	xor    eax,eax
c0023cd9:	83 fa 03             	cmp    edx,0x3
c0023cdc:	0f 94 c0             	sete   al
c0023cdf:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023ce3:	c3                   	ret    
c0023ce4:	31 c0                	xor    eax,eax
c0023ce6:	c3                   	ret    
c0023ce7:	90                   	nop

c0023ce8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cef:	0f ba e2 0f          	bt     edx,0xf
c0023cf3:	72 f7                	jb     c0023cec <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023cf5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cf8:	83 ca 10             	or     edx,0x10
c0023cfb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cfe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d01:	83 ca 01             	or     edx,0x1
c0023d04:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d07:	c3                   	ret    

c0023d08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d0f:	83 e2 fe             	and    edx,0xfffffffe
c0023d12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d15:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d18:	83 e2 ef             	and    edx,0xffffffef
c0023d1b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d21:	0f ba e2 0e          	bt     edx,0xe
c0023d25:	72 f7                	jb     c0023d1e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2a:	0f ba e2 0f          	bt     edx,0xf
c0023d2e:	72 ee                	jb     c0023d1e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d30:	c3                   	ret    
c0023d31:	90                   	nop

c0023d32 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d32:	55                   	push   ebp
c0023d33:	57                   	push   edi
c0023d34:	56                   	push   esi
c0023d35:	53                   	push   ebx
c0023d36:	83 ec 1c             	sub    esp,0x1c
c0023d39:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d45:	53                   	push   ebx
c0023d46:	89 fd                	mov    ebp,edi
c0023d48:	56                   	push   esi
c0023d49:	c1 e5 0a             	shl    ebp,0xa
c0023d4c:	e8 b7 ff ff ff       	call   c0023d08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d51:	83 ec 0c             	sub    esp,0xc
c0023d54:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d5a:	01 e8                	add    eax,ebp
c0023d5c:	89 03                	mov    DWORD PTR [ebx],eax
c0023d5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d60:	68 00 04 00 00       	push   0x400
c0023d65:	6a 00                	push   0x0
c0023d67:	50                   	push   eax
c0023d68:	e8 0b ca fd ff       	call   c0000778 <memset>
c0023d6d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d73:	89 fa                	mov    edx,edi
c0023d75:	01 e8                	add    eax,ebp
c0023d77:	c1 e7 0d             	shl    edi,0xd
c0023d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0023d7c:	c1 e2 08             	shl    edx,0x8
c0023d7f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d86:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d90:	89 d0                	mov    eax,edx
c0023d92:	83 c4 1c             	add    esp,0x1c
c0023d95:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d9b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023d9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023da1:	68 00 01 00 00       	push   0x100
c0023da6:	6a 00                	push   0x0
c0023da8:	50                   	push   eax
c0023da9:	e8 ca c9 fd ff       	call   c0000778 <memset>
c0023dae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023db2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023db8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023dbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dc2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023dc5:	83 c4 10             	add    esp,0x10
c0023dc8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023dcf:	31 ff                	xor    edi,edi
c0023dd1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023dd7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023de1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023de7:	83 c5 20             	add    ebp,0x20
c0023dea:	01 f8                	add    eax,edi
c0023dec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023def:	52                   	push   edx
c0023df0:	68 00 01 00 00       	push   0x100
c0023df5:	6a 00                	push   0x0
c0023df7:	50                   	push   eax
c0023df8:	e8 7b c9 fd ff       	call   c0000778 <memset>
c0023dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e01:	83 c4 10             	add    esp,0x10
c0023e04:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e0a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e11:	01 f8                	add    eax,edi
c0023e13:	81 c7 00 01 00 00    	add    edi,0x100
c0023e19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e1c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e22:	75 b3                	jne    c0023dd7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e24:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e28:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e2c:	83 c4 1c             	add    esp,0x1c
c0023e2f:	5b                   	pop    ebx
c0023e30:	5e                   	pop    esi
c0023e31:	5f                   	pop    edi
c0023e32:	5d                   	pop    ebp
c0023e33:	e9 b0 fe ff ff       	jmp    c0023ce8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e38:	55                   	push   ebp
c0023e39:	57                   	push   edi
c0023e3a:	56                   	push   esi
c0023e3b:	53                   	push   ebx
c0023e3c:	31 db                	xor    ebx,ebx
c0023e3e:	83 ec 0c             	sub    esp,0xc
c0023e41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e49:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e4c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e52:	0f 84 aa 00 00 00    	je     c0023f02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e5c:	89 d8                	mov    eax,ebx
c0023e5e:	c1 e0 07             	shl    eax,0x7
c0023e61:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e68:	55                   	push   ebp
c0023e69:	56                   	push   esi
c0023e6a:	e8 31 fe ff ff       	call   c0023ca0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e6f:	5a                   	pop    edx
c0023e70:	83 f8 01             	cmp    eax,0x1
c0023e73:	59                   	pop    ecx
c0023e74:	75 30                	jne    c0023ea6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e76:	50                   	push   eax
c0023e77:	50                   	push   eax
c0023e78:	53                   	push   ebx
c0023e79:	68 d1 cc 02 c0       	push   0xc002ccd1
c0023e7e:	e8 77 f0 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023e83:	83 c4 0c             	add    esp,0xc
c0023e86:	53                   	push   ebx
c0023e87:	55                   	push   ebp
c0023e88:	56                   	push   esi
c0023e89:	e8 a4 fe ff ff       	call   c0023d32 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e8e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e95:	e8 a6 b9 fe ff       	call   c000f840 <malloc>
c0023e9a:	89 c5                	mov    ebp,eax
c0023e9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e9f:	e8 60 0d 00 00       	call   c0024c04 <SATA::SATA()>
c0023ea4:	eb 33                	jmp    c0023ed9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ea6:	83 f8 04             	cmp    eax,0x4
c0023ea9:	75 47                	jne    c0023ef2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023eab:	50                   	push   eax
c0023eac:	50                   	push   eax
c0023ead:	53                   	push   ebx
c0023eae:	68 e8 cc 02 c0       	push   0xc002cce8
c0023eb3:	e8 42 f0 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023eb8:	83 c4 0c             	add    esp,0xc
c0023ebb:	53                   	push   ebx
c0023ebc:	55                   	push   ebp
c0023ebd:	56                   	push   esi
c0023ebe:	e8 6f fe ff ff       	call   c0023d32 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ec3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023eca:	e8 71 b9 fe ff       	call   c000f840 <malloc>
c0023ecf:	89 c5                	mov    ebp,eax
c0023ed1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ed4:	e8 d7 10 00 00       	call   c0024fb0 <SATAPI::SATAPI()>
c0023ed9:	5a                   	pop    edx
c0023eda:	59                   	pop    ecx
c0023edb:	55                   	push   ebp
c0023edc:	56                   	push   esi
c0023edd:	e8 3e 04 ff ff       	call   c0014320 <Device::addChild(Device*)>
c0023ee2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ee5:	56                   	push   esi
c0023ee6:	6a 00                	push   0x0
c0023ee8:	53                   	push   ebx
c0023ee9:	55                   	push   ebp
c0023eea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023eed:	83 c4 20             	add    esp,0x20
c0023ef0:	eb 10                	jmp    c0023f02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ef2:	50                   	push   eax
c0023ef3:	50                   	push   eax
c0023ef4:	53                   	push   ebx
c0023ef5:	68 01 cd 02 c0       	push   0xc002cd01
c0023efa:	e8 fb ef fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0023eff:	83 c4 10             	add    esp,0x10
c0023f02:	d1 ef                	shr    edi,1
c0023f04:	43                   	inc    ebx
c0023f05:	83 fb 20             	cmp    ebx,0x20
c0023f08:	0f 85 3e ff ff ff    	jne    c0023e4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f0e:	83 c4 0c             	add    esp,0xc
c0023f11:	5b                   	pop    ebx
c0023f12:	5e                   	pop    esi
c0023f13:	5f                   	pop    edi
c0023f14:	5d                   	pop    ebp
c0023f15:	c3                   	ret    

c0023f16 <SATABus::open(int, int, void*)>:
c0023f16:	83 ec 14             	sub    esp,0x14
c0023f19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f1d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f23:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f29:	52                   	push   edx
c0023f2a:	50                   	push   eax
c0023f2b:	e8 08 ff ff ff       	call   c0023e38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f30:	31 c0                	xor    eax,eax
c0023f32:	83 c4 1c             	add    esp,0x1c
c0023f35:	c3                   	ret    

c0023f36 <ATA::close(int, int, void*)>:
c0023f36:	83 ec 0c             	sub    esp,0xc
c0023f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f43:	85 c0                	test   eax,eax
c0023f45:	74 0c                	je     c0023f53 <ATA::close(int, int, void*)+0x1d>
c0023f47:	83 ec 0c             	sub    esp,0xc
c0023f4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f4c:	50                   	push   eax
c0023f4d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f50:	83 c4 10             	add    esp,0x10
c0023f53:	31 c0                	xor    eax,eax
c0023f55:	83 c4 0c             	add    esp,0xc
c0023f58:	c3                   	ret    
c0023f59:	90                   	nop

c0023f5a <ATA::powerSaving(PowerSavingLevel)>:
c0023f5a:	c3                   	ret    
c0023f5b:	90                   	nop

c0023f5c <ATA::ATA()>:
c0023f5c:	83 ec 0c             	sub    esp,0xc
c0023f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f63:	83 ec 04             	sub    esp,0x4
c0023f66:	68 00 02 00 00       	push   0x200
c0023f6b:	68 e9 cd 02 c0       	push   0xc002cde9
c0023f70:	50                   	push   eax
c0023f71:	e8 ce 07 ff ff       	call   c0014744 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f76:	83 c4 10             	add    esp,0x10
c0023f79:	ba 6c cd 02 c0       	mov    edx,0xc002cd6c
c0023f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f82:	89 10                	mov    DWORD PTR [eax],edx
c0023f84:	90                   	nop
c0023f85:	83 c4 0c             	add    esp,0xc
c0023f88:	c3                   	ret    
c0023f89:	90                   	nop

c0023f8a <ATA::flush(bool)>:
c0023f8a:	53                   	push   ebx
c0023f8b:	83 ec 08             	sub    esp,0x8
c0023f8e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f97:	19 c0                	sbb    eax,eax
c0023f99:	83 e0 fd             	and    eax,0xfffffffd
c0023f9c:	05 ea 00 00 00       	add    eax,0xea
c0023fa1:	50                   	push   eax
c0023fa2:	6a 07                	push   0x7
c0023fa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fab:	50                   	push   eax
c0023fac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fb2:	e8 dd ef ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fb7:	83 c4 0c             	add    esp,0xc
c0023fba:	6a 00                	push   0x0
c0023fbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fc3:	50                   	push   eax
c0023fc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fca:	e8 71 fb ff ff       	call   c0023b40 <IDE::polling(unsigned char, unsigned int)>
c0023fcf:	83 c4 18             	add    esp,0x18
c0023fd2:	5b                   	pop    ebx
c0023fd3:	c3                   	ret    

c0023fd4 <ATA::readyForCommand()>:
c0023fd4:	56                   	push   esi
c0023fd5:	53                   	push   ebx
c0023fd6:	31 db                	xor    ebx,ebx
c0023fd8:	50                   	push   eax
c0023fd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023fdd:	50                   	push   eax
c0023fde:	6a 0c                	push   0xc
c0023fe0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023fe7:	50                   	push   eax
c0023fe8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023fee:	e8 61 f0 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c0023ff3:	83 c4 10             	add    esp,0x10
c0023ff6:	a8 88                	test   al,0x88
c0023ff8:	74 23                	je     c002401d <ATA::readyForCommand()+0x49>
c0023ffa:	43                   	inc    ebx
c0023ffb:	83 fb 63             	cmp    ebx,0x63
c0023ffe:	7e dd                	jle    c0023fdd <ATA::readyForCommand()+0x9>
c0024000:	51                   	push   ecx
c0024001:	51                   	push   ecx
c0024002:	6a 00                	push   0x0
c0024004:	68 40 42 0f 00       	push   0xf4240
c0024009:	e8 c8 a2 ff ff       	call   c001e2d6 <nanoSleep(unsigned long long)>
c002400e:	83 c4 10             	add    esp,0x10
c0024011:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024017:	75 c4                	jne    c0023fdd <ATA::readyForCommand()+0x9>
c0024019:	31 c0                	xor    eax,eax
c002401b:	eb 02                	jmp    c002401f <ATA::readyForCommand()+0x4b>
c002401d:	b0 01                	mov    al,0x1
c002401f:	5a                   	pop    edx
c0024020:	5b                   	pop    ebx
c0024021:	5e                   	pop    esi
c0024022:	c3                   	ret    
c0024023:	90                   	nop

c0024024 <ATA::access(unsigned long long, int, void*, bool)>:
c0024024:	55                   	push   ebp
c0024025:	57                   	push   edi
c0024026:	56                   	push   esi
c0024027:	53                   	push   ebx
c0024028:	83 ec 2c             	sub    esp,0x2c
c002402b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002402f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024033:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002403b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002403f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024043:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024047:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002404d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024051:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024057:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002405b:	c1 e0 06             	shl    eax,0x6
c002405e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024066:	74 5d                	je     c00240c5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024068:	89 fa                	mov    edx,edi
c002406a:	89 f0                	mov    eax,esi
c002406c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024070:	c1 ea 1c             	shr    edx,0x1c
c0024073:	89 d1                	mov    ecx,edx
c0024075:	09 c1                	or     ecx,eax
c0024077:	74 25                	je     c002409e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024079:	31 ed                	xor    ebp,ebp
c002407b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024082:	89 fa                	mov    edx,edi
c0024084:	89 f0                	mov    eax,esi
c0024086:	0f ad d0             	shrd   eax,edx,cl
c0024089:	d3 ea                	shr    edx,cl
c002408b:	f6 c1 20             	test   cl,0x20
c002408e:	74 02                	je     c0024092 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024090:	89 d0                	mov    eax,edx
c0024092:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024096:	45                   	inc    ebp
c0024097:	83 fd 06             	cmp    ebp,0x6
c002409a:	75 df                	jne    c002407b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002409c:	eb 76                	jmp    c0024114 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002409e:	89 f0                	mov    eax,esi
c00240a0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240a5:	89 fa                	mov    edx,edi
c00240a7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240ae:	0f ac d0 10          	shrd   eax,edx,0x10
c00240b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240bb:	c1 ee 18             	shr    esi,0x18
c00240be:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240c3:	eb 56                	jmp    c002411b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240c5:	6a 00                	push   0x0
c00240c7:	6a 3f                	push   0x3f
c00240c9:	57                   	push   edi
c00240ca:	56                   	push   esi
c00240cb:	e8 8c 29 00 00       	call   c0026a5c <__umoddi3>
c00240d0:	83 c4 10             	add    esp,0x10
c00240d3:	40                   	inc    eax
c00240d4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240d8:	6a 00                	push   0x0
c00240da:	68 f0 03 00 00       	push   0x3f0
c00240df:	57                   	push   edi
c00240e0:	56                   	push   esi
c00240e1:	e8 76 28 00 00       	call   c002695c <__udivdi3>
c00240e6:	83 c4 10             	add    esp,0x10
c00240e9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00240ee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240fa:	6a 00                	push   0x0
c00240fc:	6a 3f                	push   0x3f
c00240fe:	57                   	push   edi
c00240ff:	56                   	push   esi
c0024100:	e8 57 28 00 00       	call   c002695c <__udivdi3>
c0024105:	83 c4 10             	add    esp,0x10
c0024108:	89 c6                	mov    esi,eax
c002410a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002410f:	83 e6 0f             	and    esi,0xf
c0024112:	eb 07                	jmp    c002411b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024114:	31 f6                	xor    esi,esi
c0024116:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002411b:	bf 01 00 00 00       	mov    edi,0x1
c0024120:	50                   	push   eax
c0024121:	6a 00                	push   0x0
c0024123:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002412a:	50                   	push   eax
c002412b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002412f:	e8 6c f0 ff ff       	call   c00231a0 <IDE::enableIRQs(unsigned char, bool)>
c0024134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024137:	e8 98 fe ff ff       	call   c0023fd4 <ATA::readyForCommand()>
c002413c:	83 c4 10             	add    esp,0x10
c002413f:	84 c0                	test   al,al
c0024141:	0f 84 5a 02 00 00    	je     c00243a1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024147:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002414d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024153:	c1 e0 04             	shl    eax,0x4
c0024156:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002415d:	09 c6                	or     esi,eax
c002415f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024164:	75 05                	jne    c002416b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024166:	83 ce a0             	or     esi,0xffffffa0
c0024169:	eb 03                	jmp    c002416e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002416b:	83 ce e0             	or     esi,0xffffffe0
c002416e:	89 f0                	mov    eax,esi
c0024170:	0f b6 f0             	movzx  esi,al
c0024173:	56                   	push   esi
c0024174:	6a 06                	push   0x6
c0024176:	51                   	push   ecx
c0024177:	52                   	push   edx
c0024178:	e8 17 ee ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417d:	83 c4 10             	add    esp,0x10
c0024180:	6a 00                	push   0x0
c0024182:	6a 01                	push   0x1
c0024184:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418b:	50                   	push   eax
c002418c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024192:	e8 fd ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024197:	83 c4 10             	add    esp,0x10
c002419a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002419f:	75 6e                	jne    c002420f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241a1:	6a 00                	push   0x0
c00241a3:	6a 08                	push   0x8
c00241a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ac:	50                   	push   eax
c00241ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241b3:	e8 dc ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241bd:	50                   	push   eax
c00241be:	6a 09                	push   0x9
c00241c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c7:	50                   	push   eax
c00241c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ce:	e8 c1 ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d3:	83 c4 20             	add    esp,0x20
c00241d6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241db:	50                   	push   eax
c00241dc:	6a 0a                	push   0xa
c00241de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e5:	50                   	push   eax
c00241e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ec:	e8 a3 ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00241f6:	50                   	push   eax
c00241f7:	6a 0b                	push   0xb
c00241f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024200:	50                   	push   eax
c0024201:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024207:	e8 88 ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420c:	83 c4 20             	add    esp,0x20
c002420f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024214:	50                   	push   eax
c0024215:	6a 02                	push   0x2
c0024217:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002421e:	50                   	push   eax
c002421f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024225:	e8 6a ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002422f:	50                   	push   eax
c0024230:	6a 03                	push   0x3
c0024232:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024239:	50                   	push   eax
c002423a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024240:	e8 4f ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024245:	83 c4 20             	add    esp,0x20
c0024248:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002424d:	50                   	push   eax
c002424e:	6a 04                	push   0x4
c0024250:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024257:	50                   	push   eax
c0024258:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002425e:	e8 31 ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024263:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024268:	50                   	push   eax
c0024269:	6a 05                	push   0x5
c002426b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024272:	50                   	push   eax
c0024273:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024279:	e8 16 ed ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427e:	83 c4 20             	add    esp,0x20
c0024281:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024286:	0f 94 c0             	sete   al
c0024289:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002428e:	74 09                	je     c0024299 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024290:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024297:	eb 07                	jmp    c00242a0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024299:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242a0:	0f b6 c0             	movzx  eax,al
c00242a3:	50                   	push   eax
c00242a4:	6a 07                	push   0x7
c00242a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ad:	50                   	push   eax
c00242ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b4:	e8 db ec ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242bd:	83 c4 10             	add    esp,0x10
c00242c0:	85 f6                	test   esi,esi
c00242c2:	0f 84 ba 00 00 00    	je     c0024382 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242c8:	50                   	push   eax
c00242c9:	6a 01                	push   0x1
c00242cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d2:	50                   	push   eax
c00242d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d9:	e8 62 f8 ff ff       	call   c0023b40 <IDE::polling(unsigned char, unsigned int)>
c00242de:	83 c4 10             	add    esp,0x10
c00242e1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00242e7:	84 c0                	test   al,al
c00242e9:	74 2c                	je     c0024317 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00242eb:	0f b6 f8             	movzx  edi,al
c00242ee:	0f b6 d2             	movzx  edx,dl
c00242f1:	57                   	push   edi
c00242f2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00242f9:	50                   	push   eax
c00242fa:	52                   	push   edx
c00242fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024301:	e8 a4 f6 ff ff       	call   c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024306:	c7 04 24 44 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd44
c002430d:	e8 e8 eb fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0024312:	e9 87 00 00 00       	jmp    c002439e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024317:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002431c:	74 33                	je     c0024351 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002431e:	31 ed                	xor    ebp,ebp
c0024320:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024324:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024328:	50                   	push   eax
c0024329:	50                   	push   eax
c002432a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024331:	50                   	push   eax
c0024332:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024338:	e8 45 ec ff ff       	call   c0022f82 <IDE::getBase(unsigned char)>
c002433d:	89 c2                	mov    edx,eax
c002433f:	89 f8                	mov    eax,edi
c0024341:	66 ef                	out    dx,ax
c0024343:	45                   	inc    ebp
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002434d:	75 d1                	jne    c0024320 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002434f:	eb 23                	jmp    c0024374 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024351:	0f b6 d2             	movzx  edx,dl
c0024354:	51                   	push   ecx
c0024355:	51                   	push   ecx
c0024356:	52                   	push   edx
c0024357:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435d:	e8 20 ec ff ff       	call   c0022f82 <IDE::getBase(unsigned char)>
c0024362:	b9 00 01 00 00       	mov    ecx,0x100
c0024367:	89 c2                	mov    edx,eax
c0024369:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002436d:	fc                   	cld    
c002436e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024371:	83 c4 10             	add    esp,0x10
c0024374:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002437c:	4e                   	dec    esi
c002437d:	e9 3e ff ff ff       	jmp    c00242c0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024382:	31 ff                	xor    edi,edi
c0024384:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024389:	74 16                	je     c00243a1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002438b:	50                   	push   eax
c002438c:	50                   	push   eax
c002438d:	31 c0                	xor    eax,eax
c002438f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024394:	0f 94 c0             	sete   al
c0024397:	50                   	push   eax
c0024398:	53                   	push   ebx
c0024399:	e8 ec fb ff ff       	call   c0023f8a <ATA::flush(bool)>
c002439e:	83 c4 10             	add    esp,0x10
c00243a1:	83 c4 2c             	add    esp,0x2c
c00243a4:	89 f8                	mov    eax,edi
c00243a6:	5b                   	pop    ebx
c00243a7:	5e                   	pop    esi
c00243a8:	5f                   	pop    edi
c00243a9:	5d                   	pop    ebp
c00243aa:	c3                   	ret    
c00243ab:	90                   	nop

c00243ac <ATA::read(unsigned long long, int, void*)>:
c00243ac:	57                   	push   edi
c00243ad:	b8 04 00 00 00       	mov    eax,0x4
c00243b2:	56                   	push   esi
c00243b3:	53                   	push   ebx
c00243b4:	83 ec 10             	sub    esp,0x10
c00243b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243bf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243c2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243ca:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243d0:	77 3b                	ja     c002440d <ATA::read(unsigned long long, int, void*)+0x61>
c00243d2:	b8 06 00 00 00       	mov    eax,0x6
c00243d7:	85 d2                	test   edx,edx
c00243d9:	74 32                	je     c002440d <ATA::read(unsigned long long, int, void*)+0x61>
c00243db:	50                   	push   eax
c00243dc:	50                   	push   eax
c00243dd:	6a 00                	push   0x0
c00243df:	52                   	push   edx
c00243e0:	53                   	push   ebx
c00243e1:	57                   	push   edi
c00243e2:	56                   	push   esi
c00243e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00243e7:	e8 38 fc ff ff       	call   c0024024 <ATA::access(unsigned long long, int, void*, bool)>
c00243ec:	83 c4 20             	add    esp,0x20
c00243ef:	85 c0                	test   eax,eax
c00243f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243f5:	75 11                	jne    c0024408 <ATA::read(unsigned long long, int, void*)+0x5c>
c00243f7:	01 1d e8 26 03 c0    	add    DWORD PTR ds:0xc00326e8,ebx
c00243fd:	e8 f2 c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024406:	eb 05                	jmp    c002440d <ATA::read(unsigned long long, int, void*)+0x61>
c0024408:	b8 01 00 00 00       	mov    eax,0x1
c002440d:	83 c4 10             	add    esp,0x10
c0024410:	5b                   	pop    ebx
c0024411:	5e                   	pop    esi
c0024412:	5f                   	pop    edi
c0024413:	c3                   	ret    

c0024414 <ATA::write(unsigned long long, int, void*)>:
c0024414:	57                   	push   edi
c0024415:	b8 04 00 00 00       	mov    eax,0x4
c002441a:	56                   	push   esi
c002441b:	53                   	push   ebx
c002441c:	83 ec 10             	sub    esp,0x10
c002441f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024423:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024427:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002442a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002442e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024432:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024438:	77 3b                	ja     c0024475 <ATA::write(unsigned long long, int, void*)+0x61>
c002443a:	b8 06 00 00 00       	mov    eax,0x6
c002443f:	85 d2                	test   edx,edx
c0024441:	74 32                	je     c0024475 <ATA::write(unsigned long long, int, void*)+0x61>
c0024443:	50                   	push   eax
c0024444:	50                   	push   eax
c0024445:	6a 01                	push   0x1
c0024447:	52                   	push   edx
c0024448:	53                   	push   ebx
c0024449:	57                   	push   edi
c002444a:	56                   	push   esi
c002444b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002444f:	e8 d0 fb ff ff       	call   c0024024 <ATA::access(unsigned long long, int, void*, bool)>
c0024454:	83 c4 20             	add    esp,0x20
c0024457:	85 c0                	test   eax,eax
c0024459:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002445d:	75 11                	jne    c0024470 <ATA::write(unsigned long long, int, void*)+0x5c>
c002445f:	01 1d e4 26 03 c0    	add    DWORD PTR ds:0xc00326e4,ebx
c0024465:	e8 8a c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c002446a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002446e:	eb 05                	jmp    c0024475 <ATA::write(unsigned long long, int, void*)+0x61>
c0024470:	b8 01 00 00 00       	mov    eax,0x1
c0024475:	83 c4 10             	add    esp,0x10
c0024478:	5b                   	pop    ebx
c0024479:	5e                   	pop    esi
c002447a:	5f                   	pop    edi
c002447b:	c3                   	ret    

c002447c <ATA::detectCHS()>:
c002447c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024480:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024486:	c1 e0 06             	shl    eax,0x6
c0024489:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002448f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024499:	c7 44 24 04 4f cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd4f
c00244a1:	e9 05 61 ff ff       	jmp    c001a5ab <Krnl::panic(char const*)>

c00244a6 <ATA::open(int, int, void*)>:
c00244a6:	53                   	push   ebx
c00244a7:	83 ec 08             	sub    esp,0x8
c00244aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244b6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244bc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244c2:	c1 e0 06             	shl    eax,0x6
c00244c5:	01 d0                	add    eax,edx
c00244c7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244ce:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244d4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244db:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244e5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244eb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244f2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00244f9:	75 0c                	jne    c0024507 <ATA::open(int, int, void*)+0x61>
c00244fb:	83 ec 0c             	sub    esp,0xc
c00244fe:	53                   	push   ebx
c00244ff:	e8 78 ff ff ff       	call   c002447c <ATA::detectCHS()>
c0024504:	83 c4 10             	add    esp,0x10
c0024507:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002450d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024513:	c1 e0 06             	shl    eax,0x6
c0024516:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002451d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024527:	d1 e8                	shr    eax,1
c0024529:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002452f:	6a 04                	push   0x4
c0024531:	6a 0c                	push   0xc
c0024533:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002453a:	50                   	push   eax
c002453b:	52                   	push   edx
c002453c:	e8 53 ea ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024541:	90                   	nop
c0024542:	90                   	nop
c0024543:	6a 00                	push   0x0
c0024545:	6a 0c                	push   0xc
c0024547:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002454e:	50                   	push   eax
c002454f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024555:	e8 3a ea ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002455a:	83 c4 14             	add    esp,0x14
c002455d:	53                   	push   ebx
c002455e:	e8 49 02 ff ff       	call   c00147ac <PhysicalDisk::startCache()>
c0024563:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024566:	e8 c7 23 ff ff       	call   c0016932 <createPartitionsForDisk(PhysicalDisk*)>
c002456b:	31 c0                	xor    eax,eax
c002456d:	83 c4 18             	add    esp,0x18
c0024570:	5b                   	pop    ebx
c0024571:	c3                   	ret    

c0024572 <ATAPI::write(unsigned long long, int, void*)>:
c0024572:	b8 03 00 00 00       	mov    eax,0x3
c0024577:	c3                   	ret    

c0024578 <ATAPI::close(int, int, void*)>:
c0024578:	83 ec 0c             	sub    esp,0xc
c002457b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002457f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024585:	85 c0                	test   eax,eax
c0024587:	74 0c                	je     c0024595 <ATAPI::close(int, int, void*)+0x1d>
c0024589:	83 ec 0c             	sub    esp,0xc
c002458c:	8b 10                	mov    edx,DWORD PTR [eax]
c002458e:	50                   	push   eax
c002458f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024592:	83 c4 10             	add    esp,0x10
c0024595:	31 c0                	xor    eax,eax
c0024597:	83 c4 0c             	add    esp,0xc
c002459a:	c3                   	ret    
c002459b:	90                   	nop

c002459c <ATAPI::ATAPI()>:
c002459c:	83 ec 0c             	sub    esp,0xc
c002459f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245a3:	83 ec 04             	sub    esp,0x4
c00245a6:	68 00 08 00 00       	push   0x800
c00245ab:	68 89 ce 02 c0       	push   0xc002ce89
c00245b0:	50                   	push   eax
c00245b1:	e8 8e 01 ff ff       	call   c0014744 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245b6:	83 c4 10             	add    esp,0x10
c00245b9:	ba a4 cd 02 c0       	mov    edx,0xc002cda4
c00245be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245c2:	89 10                	mov    DWORD PTR [eax],edx
c00245c4:	90                   	nop
c00245c5:	83 c4 0c             	add    esp,0xc
c00245c8:	c3                   	ret    
c00245c9:	90                   	nop

c00245ca <ATAPI::readyForCommand()>:
c00245ca:	56                   	push   esi
c00245cb:	53                   	push   ebx
c00245cc:	31 db                	xor    ebx,ebx
c00245ce:	50                   	push   eax
c00245cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245d3:	50                   	push   eax
c00245d4:	6a 0c                	push   0xc
c00245d6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245dd:	50                   	push   eax
c00245de:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245e4:	e8 6b ea ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00245e9:	83 c4 10             	add    esp,0x10
c00245ec:	a8 88                	test   al,0x88
c00245ee:	74 23                	je     c0024613 <ATAPI::readyForCommand()+0x49>
c00245f0:	43                   	inc    ebx
c00245f1:	83 fb 63             	cmp    ebx,0x63
c00245f4:	7e dd                	jle    c00245d3 <ATAPI::readyForCommand()+0x9>
c00245f6:	51                   	push   ecx
c00245f7:	51                   	push   ecx
c00245f8:	6a 00                	push   0x0
c00245fa:	68 40 42 0f 00       	push   0xf4240
c00245ff:	e8 d2 9c ff ff       	call   c001e2d6 <nanoSleep(unsigned long long)>
c0024604:	83 c4 10             	add    esp,0x10
c0024607:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002460d:	75 c4                	jne    c00245d3 <ATAPI::readyForCommand()+0x9>
c002460f:	31 c0                	xor    eax,eax
c0024611:	eb 02                	jmp    c0024615 <ATAPI::readyForCommand()+0x4b>
c0024613:	b0 01                	mov    al,0x1
c0024615:	5a                   	pop    edx
c0024616:	5b                   	pop    ebx
c0024617:	5e                   	pop    esi
c0024618:	c3                   	ret    
c0024619:	90                   	nop

c002461a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002461a:	55                   	push   ebp
c002461b:	57                   	push   edi
c002461c:	56                   	push   esi
c002461d:	53                   	push   ebx
c002461e:	83 ec 20             	sub    esp,0x20
c0024621:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024625:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024629:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002462d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024631:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024635:	6a 01                	push   0x1
c0024637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002463e:	50                   	push   eax
c002463f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024645:	e8 56 eb ff ff       	call   c00231a0 <IDE::enableIRQs(unsigned char, bool)>
c002464a:	5e                   	pop    esi
c002464b:	58                   	pop    eax
c002464c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024653:	50                   	push   eax
c0024654:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002465a:	e8 0f e9 ff ff       	call   c0022f6e <IDE::prepareInterrupt(unsigned char)>
c002465f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024662:	e8 63 ff ff ff       	call   c00245ca <ATAPI::readyForCommand()>
c0024667:	83 c4 10             	add    esp,0x10
c002466a:	84 c0                	test   al,al
c002466c:	75 0a                	jne    c0024678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002466e:	bb 01 00 00 00       	mov    ebx,0x1
c0024673:	e9 57 02 00 00       	jmp    c00248cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024678:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002467e:	c1 e0 04             	shl    eax,0x4
c0024681:	0f b6 c0             	movzx  eax,al
c0024684:	50                   	push   eax
c0024685:	6a 06                	push   0x6
c0024687:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002468e:	50                   	push   eax
c002468f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024695:	e8 fa e8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002469a:	6a 00                	push   0x0
c002469c:	6a 01                	push   0x1
c002469e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a5:	50                   	push   eax
c00246a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ac:	e8 e3 e8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246b1:	83 c4 20             	add    esp,0x20
c00246b4:	0f b6 c3             	movzx  eax,bl
c00246b7:	0f b6 df             	movzx  ebx,bh
c00246ba:	50                   	push   eax
c00246bb:	6a 04                	push   0x4
c00246bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c4:	50                   	push   eax
c00246c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246cb:	e8 c4 e8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246d0:	53                   	push   ebx
c00246d1:	6a 05                	push   0x5
c00246d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246da:	50                   	push   eax
c00246db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e1:	e8 ae e8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e6:	83 c4 20             	add    esp,0x20
c00246e9:	68 a0 00 00 00       	push   0xa0
c00246ee:	6a 07                	push   0x7
c00246f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f7:	50                   	push   eax
c00246f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fe:	e8 91 e8 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024703:	83 c4 0c             	add    esp,0xc
c0024706:	6a 01                	push   0x1
c0024708:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470f:	50                   	push   eax
c0024710:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024716:	e8 25 f4 ff ff       	call   c0023b40 <IDE::polling(unsigned char, unsigned int)>
c002471b:	83 c4 10             	add    esp,0x10
c002471e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024724:	84 c0                	test   al,al
c0024726:	74 23                	je     c002474b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024728:	0f b6 d8             	movzx  ebx,al
c002472b:	0f b6 d2             	movzx  edx,dl
c002472e:	53                   	push   ebx
c002472f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024736:	50                   	push   eax
c0024737:	52                   	push   edx
c0024738:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002473e:	e8 67 f2 ff ff       	call   c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024743:	83 c4 10             	add    esp,0x10
c0024746:	e9 84 01 00 00       	jmp    c00248cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002474b:	0f b6 d2             	movzx  edx,dl
c002474e:	53                   	push   ebx
c002474f:	53                   	push   ebx
c0024750:	52                   	push   edx
c0024751:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024757:	e8 26 e8 ff ff       	call   c0022f82 <IDE::getBase(unsigned char)>
c002475c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024760:	b9 06 00 00 00       	mov    ecx,0x6
c0024765:	89 c2                	mov    edx,eax
c0024767:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002476a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002476e:	83 c4 10             	add    esp,0x10
c0024771:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024777:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002477e:	85 db                	test   ebx,ebx
c0024780:	0f 84 ec 00 00 00    	je     c0024872 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024786:	51                   	push   ecx
c0024787:	51                   	push   ecx
c0024788:	52                   	push   edx
c0024789:	50                   	push   eax
c002478a:	e8 73 e9 ff ff       	call   c0023102 <IDE::waitInterrupt(unsigned char)>
c002478f:	83 c4 10             	add    esp,0x10
c0024792:	84 c0                	test   al,al
c0024794:	0f 84 d4 fe ff ff    	je     c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002479a:	56                   	push   esi
c002479b:	56                   	push   esi
c002479c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a3:	50                   	push   eax
c00247a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247aa:	e8 bf e7 ff ff       	call   c0022f6e <IDE::prepareInterrupt(unsigned char)>
c00247af:	83 c4 0c             	add    esp,0xc
c00247b2:	6a 04                	push   0x4
c00247b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247bb:	50                   	push   eax
c00247bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c2:	e8 8d e8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00247c7:	83 c4 0c             	add    esp,0xc
c00247ca:	89 c6                	mov    esi,eax
c00247cc:	6a 05                	push   0x5
c00247ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d5:	50                   	push   eax
c00247d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247dc:	e8 73 e8 ff ff       	call   c0023054 <IDE::read(unsigned char, unsigned char)>
c00247e1:	89 f1                	mov    ecx,esi
c00247e3:	0f b6 c0             	movzx  eax,al
c00247e6:	0f b6 f1             	movzx  esi,cl
c00247e9:	c1 e0 08             	shl    eax,0x8
c00247ec:	09 c6                	or     esi,eax
c00247ee:	d1 fe                	sar    esi,1
c00247f0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00247f4:	83 c4 10             	add    esp,0x10
c00247f7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00247fc:	74 41                	je     c002483f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00247fe:	31 c9                	xor    ecx,ecx
c0024800:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024806:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002480d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024811:	75 0a                	jne    c002481d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024813:	01 c9                	add    ecx,ecx
c0024815:	01 cd                	add    ebp,ecx
c0024817:	4b                   	dec    ebx
c0024818:	e9 54 ff ff ff       	jmp    c0024771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002481d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024822:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024826:	51                   	push   ecx
c0024827:	51                   	push   ecx
c0024828:	52                   	push   edx
c0024829:	50                   	push   eax
c002482a:	e8 53 e7 ff ff       	call   c0022f82 <IDE::getBase(unsigned char)>
c002482f:	89 c2                	mov    edx,eax
c0024831:	89 f0                	mov    eax,esi
c0024833:	66 ef                	out    dx,ax
c0024835:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024839:	83 c4 10             	add    esp,0x10
c002483c:	41                   	inc    ecx
c002483d:	eb c1                	jmp    c0024800 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002483f:	31 f6                	xor    esi,esi
c0024841:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024847:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002484e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024852:	75 06                	jne    c002485a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024854:	01 f6                	add    esi,esi
c0024856:	01 f5                	add    ebp,esi
c0024858:	eb bd                	jmp    c0024817 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002485a:	51                   	push   ecx
c002485b:	51                   	push   ecx
c002485c:	52                   	push   edx
c002485d:	50                   	push   eax
c002485e:	e8 1f e7 ff ff       	call   c0022f82 <IDE::getBase(unsigned char)>
c0024863:	89 c2                	mov    edx,eax
c0024865:	66 ed                	in     ax,dx
c0024867:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002486c:	83 c4 10             	add    esp,0x10
c002486f:	46                   	inc    esi
c0024870:	eb cf                	jmp    c0024841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024872:	51                   	push   ecx
c0024873:	51                   	push   ecx
c0024874:	52                   	push   edx
c0024875:	50                   	push   eax
c0024876:	e8 87 e8 ff ff       	call   c0023102 <IDE::waitInterrupt(unsigned char)>
c002487b:	83 c4 10             	add    esp,0x10
c002487e:	84 c0                	test   al,al
c0024880:	0f 84 e8 fd ff ff    	je     c002466e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024886:	bb a0 86 01 00       	mov    ebx,0x186a0
c002488b:	52                   	push   edx
c002488c:	52                   	push   edx
c002488d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024894:	50                   	push   eax
c0024895:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002489b:	e8 ce e6 ff ff       	call   c0022f6e <IDE::prepareInterrupt(unsigned char)>
c00248a0:	83 c4 10             	add    esp,0x10
c00248a3:	50                   	push   eax
c00248a4:	50                   	push   eax
c00248a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248ac:	50                   	push   eax
c00248ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b3:	e8 ca e6 ff ff       	call   c0022f82 <IDE::getBase(unsigned char)>
c00248b8:	8d 50 07             	lea    edx,[eax+0x7]
c00248bb:	ec                   	in     al,dx
c00248bc:	83 c4 10             	add    esp,0x10
c00248bf:	a8 88                	test   al,0x88
c00248c1:	74 0a                	je     c00248cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248c3:	4b                   	dec    ebx
c00248c4:	75 dd                	jne    c00248a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248c6:	bb 02 00 00 00       	mov    ebx,0x2
c00248cb:	eb 02                	jmp    c00248cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248cd:	31 db                	xor    ebx,ebx
c00248cf:	83 c4 1c             	add    esp,0x1c
c00248d2:	89 d8                	mov    eax,ebx
c00248d4:	5b                   	pop    ebx
c00248d5:	5e                   	pop    esi
c00248d6:	5f                   	pop    edi
c00248d7:	5d                   	pop    ebp
c00248d8:	c3                   	ret    
c00248d9:	90                   	nop

c00248da <ATAPI::diskRemoved()>:
c00248da:	83 ec 18             	sub    esp,0x18
c00248dd:	68 95 ce 02 c0       	push   0xc002ce95
c00248e2:	e8 13 e6 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00248e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248eb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00248f2:	83 c4 1c             	add    esp,0x1c
c00248f5:	c3                   	ret    

c00248f6 <ATAPI::eject()>:
c00248f6:	57                   	push   edi
c00248f7:	b9 03 00 00 00       	mov    ecx,0x3
c00248fc:	53                   	push   ebx
c00248fd:	83 ec 14             	sub    esp,0x14
c0024900:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024904:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024908:	fc                   	cld    
c0024909:	31 c0                	xor    eax,eax
c002490b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002490d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024912:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024917:	50                   	push   eax
c0024918:	50                   	push   eax
c0024919:	6a 00                	push   0x0
c002491b:	6a 00                	push   0x0
c002491d:	6a 00                	push   0x0
c002491f:	6a 02                	push   0x2
c0024921:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024925:	50                   	push   eax
c0024926:	53                   	push   ebx
c0024927:	e8 ee fc ff ff       	call   c002461a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002492c:	83 c4 14             	add    esp,0x14
c002492f:	53                   	push   ebx
c0024930:	e8 a5 ff ff ff       	call   c00248da <ATAPI::diskRemoved()>
c0024935:	83 c4 24             	add    esp,0x24
c0024938:	31 c0                	xor    eax,eax
c002493a:	5b                   	pop    ebx
c002493b:	5f                   	pop    edi
c002493c:	c3                   	ret    
c002493d:	90                   	nop

c002493e <ATAPI::diskInserted()>:
c002493e:	53                   	push   ebx
c002493f:	83 ec 14             	sub    esp,0x14
c0024942:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024946:	68 ac ce 02 c0       	push   0xc002ceac
c002494b:	e8 aa e5 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0024950:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002495a:	e8 4d fe fe ff       	call   c00147ac <PhysicalDisk::startCache()>
c002495f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024963:	83 c4 18             	add    esp,0x18
c0024966:	5b                   	pop    ebx
c0024967:	e9 c6 1f ff ff       	jmp    c0016932 <createPartitionsForDisk(PhysicalDisk*)>

c002496c <ATAPI::detectMedia()>:
c002496c:	56                   	push   esi
c002496d:	53                   	push   ebx
c002496e:	83 ec 28             	sub    esp,0x28
c0024971:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024975:	6a 0c                	push   0xc
c0024977:	6a 00                	push   0x0
c0024979:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002497d:	56                   	push   esi
c002497e:	e8 f5 bd fd ff       	call   c0000778 <memset>
c0024983:	58                   	pop    eax
c0024984:	5a                   	pop    edx
c0024985:	6a 00                	push   0x0
c0024987:	6a 00                	push   0x0
c0024989:	6a 00                	push   0x0
c002498b:	6a 00                	push   0x0
c002498d:	56                   	push   esi
c002498e:	53                   	push   ebx
c002498f:	e8 86 fc ff ff       	call   c002461a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024994:	83 c4 1c             	add    esp,0x1c
c0024997:	6a 0c                	push   0xc
c0024999:	6a 00                	push   0x0
c002499b:	56                   	push   esi
c002499c:	e8 d7 bd fd ff       	call   c0000778 <memset>
c00249a1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249a6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249ab:	59                   	pop    ecx
c00249ac:	58                   	pop    eax
c00249ad:	6a 01                	push   0x1
c00249af:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249b3:	50                   	push   eax
c00249b4:	6a 00                	push   0x0
c00249b6:	6a 12                	push   0x12
c00249b8:	56                   	push   esi
c00249b9:	53                   	push   ebx
c00249ba:	e8 5b fc ff ff       	call   c002461a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249bf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249c3:	83 c4 20             	add    esp,0x20
c00249c6:	83 e0 7f             	and    eax,0x7f
c00249c9:	3c 70                	cmp    al,0x70
c00249cb:	74 15                	je     c00249e2 <ATAPI::detectMedia()+0x76>
c00249cd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249d4:	75 0c                	jne    c00249e2 <ATAPI::detectMedia()+0x76>
c00249d6:	83 ec 0c             	sub    esp,0xc
c00249d9:	53                   	push   ebx
c00249da:	e8 5f ff ff ff       	call   c002493e <ATAPI::diskInserted()>
c00249df:	83 c4 10             	add    esp,0x10
c00249e2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249e6:	83 e0 0f             	and    eax,0xf
c00249e9:	3c 02                	cmp    al,0x2
c00249eb:	75 1b                	jne    c0024a08 <ATAPI::detectMedia()+0x9c>
c00249ed:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00249f2:	75 2d                	jne    c0024a21 <ATAPI::detectMedia()+0xb5>
c00249f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249fb:	74 24                	je     c0024a21 <ATAPI::detectMedia()+0xb5>
c00249fd:	83 ec 0c             	sub    esp,0xc
c0024a00:	53                   	push   ebx
c0024a01:	e8 d4 fe ff ff       	call   c00248da <ATAPI::diskRemoved()>
c0024a06:	eb 16                	jmp    c0024a1e <ATAPI::detectMedia()+0xb2>
c0024a08:	84 c0                	test   al,al
c0024a0a:	75 15                	jne    c0024a21 <ATAPI::detectMedia()+0xb5>
c0024a0c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a13:	75 0c                	jne    c0024a21 <ATAPI::detectMedia()+0xb5>
c0024a15:	83 ec 0c             	sub    esp,0xc
c0024a18:	53                   	push   ebx
c0024a19:	e8 20 ff ff ff       	call   c002493e <ATAPI::diskInserted()>
c0024a1e:	83 c4 10             	add    esp,0x10
c0024a21:	83 c4 24             	add    esp,0x24
c0024a24:	5b                   	pop    ebx
c0024a25:	5e                   	pop    esi
c0024a26:	c3                   	ret    
c0024a27:	90                   	nop

c0024a28 <ATAPI::open(int, int, void*)>:
c0024a28:	53                   	push   ebx
c0024a29:	83 ec 08             	sub    esp,0x8
c0024a2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a38:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a3e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a44:	c1 e0 06             	shl    eax,0x6
c0024a47:	01 d0                	add    eax,edx
c0024a49:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a50:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a56:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a5d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a67:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a6d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a74:	6a 04                	push   0x4
c0024a76:	6a 0c                	push   0xc
c0024a78:	51                   	push   ecx
c0024a79:	52                   	push   edx
c0024a7a:	e8 15 e5 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a7f:	90                   	nop
c0024a80:	90                   	nop
c0024a81:	6a 00                	push   0x0
c0024a83:	6a 0c                	push   0xc
c0024a85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a8c:	50                   	push   eax
c0024a8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a93:	e8 fc e4 ff ff       	call   c0022f94 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a98:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024a9f:	83 c4 14             	add    esp,0x14
c0024aa2:	53                   	push   ebx
c0024aa3:	e8 c4 fe ff ff       	call   c002496c <ATAPI::detectMedia()>
c0024aa8:	31 c0                	xor    eax,eax
c0024aaa:	83 c4 18             	add    esp,0x18
c0024aad:	5b                   	pop    ebx
c0024aae:	c3                   	ret    
c0024aaf:	90                   	nop

c0024ab0 <ATAPI::read(unsigned long long, int, void*)>:
c0024ab0:	55                   	push   ebp
c0024ab1:	57                   	push   edi
c0024ab2:	56                   	push   esi
c0024ab3:	53                   	push   ebx
c0024ab4:	83 ec 1c             	sub    esp,0x1c
c0024ab7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024abb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024abf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024ac3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024aca:	74 41                	je     c0024b0d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024acc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ad0:	b9 03 00 00 00       	mov    ecx,0x3
c0024ad5:	fc                   	cld    
c0024ad6:	31 c0                	xor    eax,eax
c0024ad8:	86 fb                	xchg   bl,bh
c0024ada:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024adc:	c1 c3 10             	rol    ebx,0x10
c0024adf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024ae4:	89 e8                	mov    eax,ebp
c0024ae6:	86 fb                	xchg   bl,bh
c0024ae8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024aec:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024af0:	50                   	push   eax
c0024af1:	50                   	push   eax
c0024af2:	55                   	push   ebp
c0024af3:	c1 e5 0b             	shl    ebp,0xb
c0024af6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024afa:	6a 00                	push   0x0
c0024afc:	55                   	push   ebp
c0024afd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b01:	50                   	push   eax
c0024b02:	56                   	push   esi
c0024b03:	e8 12 fb ff ff       	call   c002461a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b08:	83 c4 20             	add    esp,0x20
c0024b0b:	eb 1a                	jmp    c0024b27 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b0d:	83 ec 0c             	sub    esp,0xc
c0024b10:	56                   	push   esi
c0024b11:	e8 56 fe ff ff       	call   c002496c <ATAPI::detectMedia()>
c0024b16:	83 c4 10             	add    esp,0x10
c0024b19:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b20:	75 aa                	jne    c0024acc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b22:	b8 02 00 00 00       	mov    eax,0x2
c0024b27:	83 c4 1c             	add    esp,0x1c
c0024b2a:	5b                   	pop    ebx
c0024b2b:	5e                   	pop    esi
c0024b2c:	5f                   	pop    edi
c0024b2d:	5d                   	pop    ebp
c0024b2e:	c3                   	ret    
c0024b2f:	90                   	nop

c0024b30 <SATA::close(int, int, void*)>:
c0024b30:	83 ec 0c             	sub    esp,0xc
c0024b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b3d:	85 c0                	test   eax,eax
c0024b3f:	74 0c                	je     c0024b4d <SATA::close(int, int, void*)+0x1d>
c0024b41:	83 ec 0c             	sub    esp,0xc
c0024b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b46:	50                   	push   eax
c0024b47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b4a:	83 c4 10             	add    esp,0x10
c0024b4d:	31 c0                	xor    eax,eax
c0024b4f:	83 c4 0c             	add    esp,0xc
c0024b52:	c3                   	ret    
c0024b53:	90                   	nop

c0024b54 <SATA::powerSaving(PowerSavingLevel)>:
c0024b54:	c3                   	ret    
c0024b55:	90                   	nop

c0024b56 <SATA::open(int, int, void*)>:
c0024b56:	56                   	push   esi
c0024b57:	53                   	push   ebx
c0024b58:	50                   	push   eax
c0024b59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b61:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b6b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b71:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b7f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b89:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b8f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024b96:	e8 47 b3 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024b9b:	89 c6                	mov    esi,eax
c0024b9d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ba3:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ba9:	e8 34 b3 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024bae:	39 c6                	cmp    esi,eax
c0024bb0:	74 10                	je     c0024bc2 <SATA::open(int, int, void*)+0x6c>
c0024bb2:	83 ec 0c             	sub    esp,0xc
c0024bb5:	68 d4 cd 02 c0       	push   0xc002cdd4
c0024bba:	e8 ec 59 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0024bbf:	83 c4 10             	add    esp,0x10
c0024bc2:	83 ec 0c             	sub    esp,0xc
c0024bc5:	6a 02                	push   0x2
c0024bc7:	e8 d3 cf fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0024bcc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024bd2:	e8 63 d2 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0024bd7:	6a 03                	push   0x3
c0024bd9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024bdf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024be5:	50                   	push   eax
c0024be6:	e8 8b d7 fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024beb:	83 c4 14             	add    esp,0x14
c0024bee:	53                   	push   ebx
c0024bef:	e8 b8 fb fe ff       	call   c00147ac <PhysicalDisk::startCache()>
c0024bf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bf7:	e8 36 1d ff ff       	call   c0016932 <createPartitionsForDisk(PhysicalDisk*)>
c0024bfc:	83 c4 14             	add    esp,0x14
c0024bff:	31 c0                	xor    eax,eax
c0024c01:	5b                   	pop    ebx
c0024c02:	5e                   	pop    esi
c0024c03:	c3                   	ret    

c0024c04 <SATA::SATA()>:
c0024c04:	83 ec 0c             	sub    esp,0xc
c0024c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c0b:	83 ec 04             	sub    esp,0x4
c0024c0e:	68 00 02 00 00       	push   0x200
c0024c13:	68 e8 cd 02 c0       	push   0xc002cde8
c0024c18:	50                   	push   eax
c0024c19:	e8 26 fb fe ff       	call   c0014744 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c1e:	83 c4 10             	add    esp,0x10
c0024c21:	ba 58 ce 02 c0       	mov    edx,0xc002ce58
c0024c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c2a:	89 10                	mov    DWORD PTR [eax],edx
c0024c2c:	90                   	nop
c0024c2d:	83 c4 0c             	add    esp,0xc
c0024c30:	c3                   	ret    
c0024c31:	90                   	nop

c0024c32 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c32:	55                   	push   ebp
c0024c33:	57                   	push   edi
c0024c34:	56                   	push   esi
c0024c35:	53                   	push   ebx
c0024c36:	83 ec 2c             	sub    esp,0x2c
c0024c39:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c3d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c45:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c49:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c4d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c56:	7e 10                	jle    c0024c68 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c58:	83 ec 0c             	sub    esp,0xc
c0024c5b:	68 f8 cd 02 c0       	push   0xc002cdf8
c0024c60:	e8 46 59 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0024c65:	83 c4 10             	add    esp,0x10
c0024c68:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c6e:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c7e:	89 f0                	mov    eax,esi
c0024c80:	c1 e0 07             	shl    eax,0x7
c0024c83:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c87:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c91:	53                   	push   ebx
c0024c92:	8d 46 02             	lea    eax,[esi+0x2]
c0024c95:	53                   	push   ebx
c0024c96:	c1 e0 07             	shl    eax,0x7
c0024c99:	bb 01 00 00 00       	mov    ebx,0x1
c0024c9e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024ca2:	50                   	push   eax
c0024ca3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ca9:	e8 aa ef ff ff       	call   c0023c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cb2:	83 c4 10             	add    esp,0x10
c0024cb5:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cba:	0f 84 ce 01 00 00    	je     c0024e8e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024cc0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cc4:	c1 e0 09             	shl    eax,0x9
c0024cc7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024cd0:	74 17                	je     c0024ce9 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024cd2:	51                   	push   ecx
c0024cd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024cd7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024cdb:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ce1:	e8 5e ba fd ff       	call   c0000744 <memcpy>
c0024ce6:	83 c4 10             	add    esp,0x10
c0024ce9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024cef:	8d 46 02             	lea    eax,[esi+0x2]
c0024cf2:	c1 e0 07             	shl    eax,0x7
c0024cf5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cfb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d01:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d07:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d0b:	c1 e1 05             	shl    ecx,0x5
c0024d0e:	01 c8                	add    eax,ecx
c0024d10:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d14:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d16:	83 e1 01             	and    ecx,0x1
c0024d19:	83 e3 bf             	and    ebx,0xffffffbf
c0024d1c:	c1 e1 06             	shl    ecx,0x6
c0024d1f:	09 d9                	or     ecx,ebx
c0024d21:	88 08                	mov    BYTE PTR [eax],cl
c0024d23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d25:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d2b:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d31:	89 08                	mov    DWORD PTR [eax],ecx
c0024d33:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d39:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d3f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d45:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d48:	52                   	push   edx
c0024d49:	68 90 00 00 00       	push   0x90
c0024d4e:	6a 00                	push   0x0
c0024d50:	53                   	push   ebx
c0024d51:	e8 22 ba fd ff       	call   c0000778 <memset>
c0024d56:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d5c:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d60:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d66:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d6e:	83 c4 10             	add    esp,0x10
c0024d71:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d74:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d7a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d80:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d85:	09 c8                	or     eax,ecx
c0024d87:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d8d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d90:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d97:	66 25 00 7f          	and    ax,0x7f00
c0024d9b:	66 0d 27 80          	or     ax,0x8027
c0024d9f:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024da4:	66 89 03             	mov    WORD PTR [ebx],ax
c0024da7:	19 c0                	sbb    eax,eax
c0024da9:	83 e0 f0             	and    eax,0xfffffff0
c0024dac:	83 c0 35             	add    eax,0x35
c0024daf:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024db2:	89 f8                	mov    eax,edi
c0024db4:	c1 e8 10             	shr    eax,0x10
c0024db7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dba:	89 f8                	mov    eax,edi
c0024dbc:	c1 e8 18             	shr    eax,0x18
c0024dbf:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024dc2:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024dc6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dcd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024dd0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dd4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024dd8:	89 f3                	mov    ebx,esi
c0024dda:	31 c0                	xor    eax,eax
c0024ddc:	c1 e3 07             	shl    ebx,0x7
c0024ddf:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024de3:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024de9:	80 e1 88             	and    cl,0x88
c0024dec:	74 0a                	je     c0024df8 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024dee:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024df3:	74 0a                	je     c0024dff <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024df5:	40                   	inc    eax
c0024df6:	eb eb                	jmp    c0024de3 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024df8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dfd:	75 0a                	jne    c0024e09 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024dff:	83 ec 0c             	sub    esp,0xc
c0024e02:	68 31 ce 02 c0       	push   0xc002ce31
c0024e07:	eb 56                	jmp    c0024e5f <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e09:	b8 01 00 00 00       	mov    eax,0x1
c0024e0e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e12:	c1 e6 07             	shl    esi,0x7
c0024e15:	d3 e0                	shl    eax,cl
c0024e17:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e1b:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e21:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e27:	85 c8                	test   eax,ecx
c0024e29:	74 20                	je     c0024e4b <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e2b:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e31:	0f ba e1 1e          	bt     ecx,0x1e
c0024e35:	73 ea                	jae    c0024e21 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e37:	83 ec 0c             	sub    esp,0xc
c0024e3a:	31 db                	xor    ebx,ebx
c0024e3c:	68 3f ce 02 c0       	push   0xc002ce3f
c0024e41:	e8 65 57 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0024e46:	83 c4 10             	add    esp,0x10
c0024e49:	eb 43                	jmp    c0024e8e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e4b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e51:	0f ba e0 1e          	bt     eax,0x1e
c0024e55:	73 17                	jae    c0024e6e <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e57:	83 ec 0c             	sub    esp,0xc
c0024e5a:	68 3f ce 02 c0       	push   0xc002ce3f
c0024e5f:	e8 47 57 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0024e64:	bb 01 00 00 00       	mov    ebx,0x1
c0024e69:	83 c4 10             	add    esp,0x10
c0024e6c:	eb 20                	jmp    c0024e8e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e6e:	31 db                	xor    ebx,ebx
c0024e70:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e75:	75 17                	jne    c0024e8e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e77:	50                   	push   eax
c0024e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e7c:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e82:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024e86:	e8 b9 b8 fd ff       	call   c0000744 <memcpy>
c0024e8b:	83 c4 10             	add    esp,0x10
c0024e8e:	83 c4 2c             	add    esp,0x2c
c0024e91:	89 d8                	mov    eax,ebx
c0024e93:	5b                   	pop    ebx
c0024e94:	5e                   	pop    esi
c0024e95:	5f                   	pop    edi
c0024e96:	5d                   	pop    ebp
c0024e97:	c3                   	ret    

c0024e98 <SATA::read(unsigned long long, int, void*)>:
c0024e98:	57                   	push   edi
c0024e99:	b8 04 00 00 00       	mov    eax,0x4
c0024e9e:	56                   	push   esi
c0024e9f:	53                   	push   ebx
c0024ea0:	83 ec 10             	sub    esp,0x10
c0024ea3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ea7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024eab:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024eae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024eb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024eb6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ebc:	77 3b                	ja     c0024ef9 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ebe:	b8 06 00 00 00       	mov    eax,0x6
c0024ec3:	85 d2                	test   edx,edx
c0024ec5:	74 32                	je     c0024ef9 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ec7:	50                   	push   eax
c0024ec8:	50                   	push   eax
c0024ec9:	6a 00                	push   0x0
c0024ecb:	52                   	push   edx
c0024ecc:	53                   	push   ebx
c0024ecd:	57                   	push   edi
c0024ece:	56                   	push   esi
c0024ecf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ed3:	e8 5a fd ff ff       	call   c0024c32 <SATA::access(unsigned long long, int, void*, bool)>
c0024ed8:	83 c4 20             	add    esp,0x20
c0024edb:	85 c0                	test   eax,eax
c0024edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ee1:	75 11                	jne    c0024ef4 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ee3:	01 1d e8 26 03 c0    	add    DWORD PTR ds:0xc00326e8,ebx
c0024ee9:	e8 06 bb fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024eee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ef2:	eb 05                	jmp    c0024ef9 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ef4:	b8 01 00 00 00       	mov    eax,0x1
c0024ef9:	83 c4 10             	add    esp,0x10
c0024efc:	5b                   	pop    ebx
c0024efd:	5e                   	pop    esi
c0024efe:	5f                   	pop    edi
c0024eff:	c3                   	ret    

c0024f00 <SATA::write(unsigned long long, int, void*)>:
c0024f00:	55                   	push   ebp
c0024f01:	b8 04 00 00 00       	mov    eax,0x4
c0024f06:	57                   	push   edi
c0024f07:	56                   	push   esi
c0024f08:	53                   	push   ebx
c0024f09:	83 ec 1c             	sub    esp,0x1c
c0024f0c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f10:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f14:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f1b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f1f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f25:	77 56                	ja     c0024f7d <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f27:	b8 06 00 00 00       	mov    eax,0x6
c0024f2c:	85 ff                	test   edi,edi
c0024f2e:	74 4d                	je     c0024f7d <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f30:	89 ee                	mov    esi,ebp
c0024f32:	c1 e6 09             	shl    esi,0x9
c0024f35:	01 fe                	add    esi,edi
c0024f37:	89 c8                	mov    eax,ecx
c0024f39:	89 da                	mov    edx,ebx
c0024f3b:	83 c0 01             	add    eax,0x1
c0024f3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f42:	83 d2 00             	adc    edx,0x0
c0024f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f49:	50                   	push   eax
c0024f4a:	50                   	push   eax
c0024f4b:	6a 01                	push   0x1
c0024f4d:	57                   	push   edi
c0024f4e:	81 c7 00 02 00 00    	add    edi,0x200
c0024f54:	6a 01                	push   0x1
c0024f56:	53                   	push   ebx
c0024f57:	51                   	push   ecx
c0024f58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f5c:	e8 d1 fc ff ff       	call   c0024c32 <SATA::access(unsigned long long, int, void*, bool)>
c0024f61:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f69:	83 c4 20             	add    esp,0x20
c0024f6c:	39 f7                	cmp    edi,esi
c0024f6e:	75 c7                	jne    c0024f37 <SATA::write(unsigned long long, int, void*)+0x37>
c0024f70:	01 2d e4 26 03 c0    	add    DWORD PTR ds:0xc00326e4,ebp
c0024f76:	e8 79 ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024f7b:	31 c0                	xor    eax,eax
c0024f7d:	83 c4 1c             	add    esp,0x1c
c0024f80:	5b                   	pop    ebx
c0024f81:	5e                   	pop    esi
c0024f82:	5f                   	pop    edi
c0024f83:	5d                   	pop    ebp
c0024f84:	c3                   	ret    
c0024f85:	90                   	nop

c0024f86 <SATAPI::write(unsigned long long, int, void*)>:
c0024f86:	b8 03 00 00 00       	mov    eax,0x3
c0024f8b:	c3                   	ret    

c0024f8c <SATAPI::close(int, int, void*)>:
c0024f8c:	83 ec 0c             	sub    esp,0xc
c0024f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f99:	85 c0                	test   eax,eax
c0024f9b:	74 0c                	je     c0024fa9 <SATAPI::close(int, int, void*)+0x1d>
c0024f9d:	83 ec 0c             	sub    esp,0xc
c0024fa0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fa2:	50                   	push   eax
c0024fa3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fa6:	83 c4 10             	add    esp,0x10
c0024fa9:	31 c0                	xor    eax,eax
c0024fab:	83 c4 0c             	add    esp,0xc
c0024fae:	c3                   	ret    
c0024faf:	90                   	nop

c0024fb0 <SATAPI::SATAPI()>:
c0024fb0:	83 ec 0c             	sub    esp,0xc
c0024fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb7:	83 ec 04             	sub    esp,0x4
c0024fba:	68 00 08 00 00       	push   0x800
c0024fbf:	68 88 ce 02 c0       	push   0xc002ce88
c0024fc4:	50                   	push   eax
c0024fc5:	e8 7a f7 fe ff       	call   c0014744 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fca:	83 c4 10             	add    esp,0x10
c0024fcd:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0024fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd6:	89 10                	mov    DWORD PTR [eax],edx
c0024fd8:	90                   	nop
c0024fd9:	83 c4 0c             	add    esp,0xc
c0024fdc:	c3                   	ret    
c0024fdd:	90                   	nop

c0024fde <SATAPI::diskRemoved()>:
c0024fde:	83 ec 18             	sub    esp,0x18
c0024fe1:	68 94 ce 02 c0       	push   0xc002ce94
c0024fe6:	e8 0f df fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0024feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fef:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024ff6:	83 c4 1c             	add    esp,0x1c
c0024ff9:	c3                   	ret    

c0024ffa <SATAPI::diskInserted()>:
c0024ffa:	53                   	push   ebx
c0024ffb:	83 ec 14             	sub    esp,0x14
c0024ffe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025002:	68 ab ce 02 c0       	push   0xc002ceab
c0025007:	e8 ee de fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c002500c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025013:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025016:	e8 91 f7 fe ff       	call   c00147ac <PhysicalDisk::startCache()>
c002501b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002501f:	83 c4 18             	add    esp,0x18
c0025022:	5b                   	pop    ebx
c0025023:	e9 0a 19 ff ff       	jmp    c0016932 <createPartitionsForDisk(PhysicalDisk*)>

c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025028:	55                   	push   ebp
c0025029:	57                   	push   edi
c002502a:	56                   	push   esi
c002502b:	53                   	push   ebx
c002502c:	83 ec 24             	sub    esp,0x24
c002502f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025033:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025037:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002503d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025041:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025045:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002504b:	8d 5f 02             	lea    ebx,[edi+0x2]
c002504e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025054:	c1 e3 07             	shl    ebx,0x7
c0025057:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002505b:	89 f8                	mov    eax,edi
c002505d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025061:	c1 e0 07             	shl    eax,0x7
c0025064:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025068:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002506c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025076:	53                   	push   ebx
c0025077:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002507d:	e8 d6 eb ff ff       	call   c0023c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025082:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025086:	83 c4 10             	add    esp,0x10
c0025089:	b8 01 00 00 00       	mov    eax,0x1
c002508e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025093:	0f 84 8a 01 00 00    	je     c0025223 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025099:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002509f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250a1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250a7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250b1:	c1 e1 05             	shl    ecx,0x5
c00250b4:	01 c8                	add    eax,ecx
c00250b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250b8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250be:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250c4:	89 08                	mov    DWORD PTR [eax],ecx
c00250c6:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250cc:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250d2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250d8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250db:	52                   	push   edx
c00250dc:	68 90 00 00 00       	push   0x90
c00250e1:	6a 00                	push   0x0
c00250e3:	53                   	push   ebx
c00250e4:	e8 8f b6 fd ff       	call   c0000778 <memset>
c00250e9:	83 c4 0c             	add    esp,0xc
c00250ec:	8d 43 40             	lea    eax,[ebx+0x40]
c00250ef:	6a 0c                	push   0xc
c00250f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250f5:	50                   	push   eax
c00250f6:	e8 49 b6 fd ff       	call   c0000744 <memcpy>
c00250fb:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025101:	89 ea                	mov    edx,ebp
c0025103:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025109:	c1 ea 18             	shr    edx,0x18
c002510c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025110:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025113:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025116:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002511a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025120:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025126:	25 00 00 c0 ff       	and    eax,0xffc00000
c002512b:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002512f:	09 c8                	or     eax,ecx
c0025131:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025135:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002513b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002513e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025145:	66 25 00 7f          	and    ax,0x7f00
c0025149:	66 0d 27 80          	or     ax,0x8027
c002514d:	66 89 03             	mov    WORD PTR [ebx],ax
c0025150:	89 e8                	mov    eax,ebp
c0025152:	c1 e8 10             	shr    eax,0x10
c0025155:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025158:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002515c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002515f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025163:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025166:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002516a:	83 c4 10             	add    esp,0x10
c002516d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025175:	31 c0                	xor    eax,eax
c0025177:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002517d:	80 e1 88             	and    cl,0x88
c0025180:	74 0a                	je     c002518c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025182:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025187:	74 0a                	je     c0025193 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025189:	40                   	inc    eax
c002518a:	eb eb                	jmp    c0025177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002518c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025191:	75 0f                	jne    c00251a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025193:	83 ec 0c             	sub    esp,0xc
c0025196:	68 31 ce 02 c0       	push   0xc002ce31
c002519b:	e8 0b 54 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00251a0:	eb 3a                	jmp    c00251dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251a2:	b8 01 00 00 00       	mov    eax,0x1
c00251a7:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251ab:	c1 e7 07             	shl    edi,0x7
c00251ae:	d3 e0                	shl    eax,cl
c00251b0:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251b3:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251b9:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251bf:	85 d0                	test   eax,edx
c00251c1:	74 23                	je     c00251e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251c3:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251c9:	0f ba e2 1e          	bt     edx,0x1e
c00251cd:	73 ea                	jae    c00251b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00251cf:	83 ec 0c             	sub    esp,0xc
c00251d2:	68 c3 ce 02 c0       	push   0xc002cec3
c00251d7:	e8 1e dd fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00251dc:	83 c4 10             	add    esp,0x10
c00251df:	b8 01 00 00 00       	mov    eax,0x1
c00251e4:	eb 3d                	jmp    c0025223 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251e6:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00251ec:	0f ba e0 1e          	bt     eax,0x1e
c00251f0:	73 0a                	jae    c00251fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00251f2:	83 ec 0c             	sub    esp,0xc
c00251f5:	68 d6 ce 02 c0       	push   0xc002ced6
c00251fa:	eb db                	jmp    c00251d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00251fc:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025201:	74 1e                	je     c0025221 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025203:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025208:	74 17                	je     c0025221 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002520a:	50                   	push   eax
c002520b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002520f:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025215:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025219:	e8 26 b5 fd ff       	call   c0000744 <memcpy>
c002521e:	83 c4 10             	add    esp,0x10
c0025221:	31 c0                	xor    eax,eax
c0025223:	83 c4 1c             	add    esp,0x1c
c0025226:	5b                   	pop    ebx
c0025227:	5e                   	pop    esi
c0025228:	5f                   	pop    edi
c0025229:	5d                   	pop    ebp
c002522a:	c3                   	ret    
c002522b:	90                   	nop

c002522c <SATAPI::eject()>:
c002522c:	57                   	push   edi
c002522d:	b9 03 00 00 00       	mov    ecx,0x3
c0025232:	53                   	push   ebx
c0025233:	83 ec 14             	sub    esp,0x14
c0025236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002523a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002523e:	fc                   	cld    
c002523f:	31 c0                	xor    eax,eax
c0025241:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025243:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025248:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002524d:	50                   	push   eax
c002524e:	6a 00                	push   0x0
c0025250:	6a 00                	push   0x0
c0025252:	6a 00                	push   0x0
c0025254:	6a 00                	push   0x0
c0025256:	6a 02                	push   0x2
c0025258:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002525c:	50                   	push   eax
c002525d:	53                   	push   ebx
c002525e:	e8 c5 fd ff ff       	call   c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025263:	83 c4 14             	add    esp,0x14
c0025266:	53                   	push   ebx
c0025267:	e8 72 fd ff ff       	call   c0024fde <SATAPI::diskRemoved()>
c002526c:	83 c4 24             	add    esp,0x24
c002526f:	31 c0                	xor    eax,eax
c0025271:	5b                   	pop    ebx
c0025272:	5f                   	pop    edi
c0025273:	c3                   	ret    

c0025274 <SATAPI::detectMedia()>:
c0025274:	56                   	push   esi
c0025275:	53                   	push   ebx
c0025276:	83 ec 28             	sub    esp,0x28
c0025279:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002527d:	6a 0c                	push   0xc
c002527f:	6a 00                	push   0x0
c0025281:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025285:	56                   	push   esi
c0025286:	e8 ed b4 fd ff       	call   c0000778 <memset>
c002528b:	83 c4 0c             	add    esp,0xc
c002528e:	6a 00                	push   0x0
c0025290:	6a 00                	push   0x0
c0025292:	6a 00                	push   0x0
c0025294:	6a 00                	push   0x0
c0025296:	6a 00                	push   0x0
c0025298:	56                   	push   esi
c0025299:	53                   	push   ebx
c002529a:	e8 89 fd ff ff       	call   c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002529f:	83 c4 1c             	add    esp,0x1c
c00252a2:	6a 0c                	push   0xc
c00252a4:	6a 00                	push   0x0
c00252a6:	56                   	push   esi
c00252a7:	e8 cc b4 fd ff       	call   c0000778 <memset>
c00252ac:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252b1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252b6:	83 c4 0c             	add    esp,0xc
c00252b9:	6a 01                	push   0x1
c00252bb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252bf:	50                   	push   eax
c00252c0:	6a 00                	push   0x0
c00252c2:	6a 00                	push   0x0
c00252c4:	6a 12                	push   0x12
c00252c6:	56                   	push   esi
c00252c7:	53                   	push   ebx
c00252c8:	e8 5b fd ff ff       	call   c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252cd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252d1:	83 c4 20             	add    esp,0x20
c00252d4:	83 e0 7f             	and    eax,0x7f
c00252d7:	3c 70                	cmp    al,0x70
c00252d9:	74 15                	je     c00252f0 <SATAPI::detectMedia()+0x7c>
c00252db:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252e2:	75 0c                	jne    c00252f0 <SATAPI::detectMedia()+0x7c>
c00252e4:	83 ec 0c             	sub    esp,0xc
c00252e7:	53                   	push   ebx
c00252e8:	e8 0d fd ff ff       	call   c0024ffa <SATAPI::diskInserted()>
c00252ed:	83 c4 10             	add    esp,0x10
c00252f0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252f4:	83 e0 0f             	and    eax,0xf
c00252f7:	3c 02                	cmp    al,0x2
c00252f9:	75 1b                	jne    c0025316 <SATAPI::detectMedia()+0xa2>
c00252fb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025300:	75 2d                	jne    c002532f <SATAPI::detectMedia()+0xbb>
c0025302:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025309:	74 24                	je     c002532f <SATAPI::detectMedia()+0xbb>
c002530b:	83 ec 0c             	sub    esp,0xc
c002530e:	53                   	push   ebx
c002530f:	e8 ca fc ff ff       	call   c0024fde <SATAPI::diskRemoved()>
c0025314:	eb 16                	jmp    c002532c <SATAPI::detectMedia()+0xb8>
c0025316:	84 c0                	test   al,al
c0025318:	75 15                	jne    c002532f <SATAPI::detectMedia()+0xbb>
c002531a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025321:	75 0c                	jne    c002532f <SATAPI::detectMedia()+0xbb>
c0025323:	83 ec 0c             	sub    esp,0xc
c0025326:	53                   	push   ebx
c0025327:	e8 ce fc ff ff       	call   c0024ffa <SATAPI::diskInserted()>
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	83 c4 24             	add    esp,0x24
c0025332:	5b                   	pop    ebx
c0025333:	5e                   	pop    esi
c0025334:	c3                   	ret    
c0025335:	90                   	nop

c0025336 <SATAPI::open(int, int, void*)>:
c0025336:	56                   	push   esi
c0025337:	53                   	push   ebx
c0025338:	50                   	push   eax
c0025339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002533d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025341:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002534b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025351:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002535b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002535f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025369:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002536f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025376:	e8 67 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c002537b:	89 c6                	mov    esi,eax
c002537d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025383:	81 c6 00 10 00 00    	add    esi,0x1000
c0025389:	e8 54 ab fe ff       	call   c000fee2 <Phys::allocatePage()>
c002538e:	39 c6                	cmp    esi,eax
c0025390:	74 10                	je     c00253a2 <SATAPI::open(int, int, void*)+0x6c>
c0025392:	83 ec 0c             	sub    esp,0xc
c0025395:	68 eb ce 02 c0       	push   0xc002ceeb
c002539a:	e8 0c 52 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c002539f:	83 c4 10             	add    esp,0x10
c00253a2:	83 ec 0c             	sub    esp,0xc
c00253a5:	6a 02                	push   0x2
c00253a7:	e8 f3 c7 fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00253ac:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253b2:	e8 83 ca fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00253b7:	6a 03                	push   0x3
c00253b9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253bf:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253c5:	50                   	push   eax
c00253c6:	e8 ab cf fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253cb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253d2:	83 c4 14             	add    esp,0x14
c00253d5:	53                   	push   ebx
c00253d6:	e8 99 fe ff ff       	call   c0025274 <SATAPI::detectMedia()>
c00253db:	83 c4 14             	add    esp,0x14
c00253de:	31 c0                	xor    eax,eax
c00253e0:	5b                   	pop    ebx
c00253e1:	5e                   	pop    esi
c00253e2:	c3                   	ret    
c00253e3:	90                   	nop

c00253e4 <SATAPI::read(unsigned long long, int, void*)>:
c00253e4:	55                   	push   ebp
c00253e5:	57                   	push   edi
c00253e6:	56                   	push   esi
c00253e7:	53                   	push   ebx
c00253e8:	83 ec 1c             	sub    esp,0x1c
c00253eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00253f7:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00253fe:	74 19                	je     c0025419 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025400:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025405:	7e 2e                	jle    c0025435 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025407:	83 ec 0c             	sub    esp,0xc
c002540a:	68 01 cf 02 c0       	push   0xc002cf01
c002540f:	e8 97 51 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0025414:	83 c4 10             	add    esp,0x10
c0025417:	eb 1c                	jmp    c0025435 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025419:	83 ec 0c             	sub    esp,0xc
c002541c:	55                   	push   ebp
c002541d:	e8 52 fe ff ff       	call   c0025274 <SATAPI::detectMedia()>
c0025422:	83 c4 10             	add    esp,0x10
c0025425:	b8 02 00 00 00       	mov    eax,0x2
c002542a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025431:	75 cd                	jne    c0025400 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025433:	eb 49                	jmp    c002547e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025435:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025439:	b9 03 00 00 00       	mov    ecx,0x3
c002543e:	fc                   	cld    
c002543f:	31 c0                	xor    eax,eax
c0025441:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025443:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025448:	89 d8                	mov    eax,ebx
c002544a:	86 e0                	xchg   al,ah
c002544c:	c1 c0 10             	rol    eax,0x10
c002544f:	86 e0                	xchg   al,ah
c0025451:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025455:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025459:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002545d:	50                   	push   eax
c002545e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025462:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025466:	56                   	push   esi
c0025467:	53                   	push   ebx
c0025468:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002546c:	c1 e0 0b             	shl    eax,0xb
c002546f:	50                   	push   eax
c0025470:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025474:	50                   	push   eax
c0025475:	55                   	push   ebp
c0025476:	e8 ad fb ff ff       	call   c0025028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002547b:	83 c4 20             	add    esp,0x20
c002547e:	83 c4 1c             	add    esp,0x1c
c0025481:	5b                   	pop    ebx
c0025482:	5e                   	pop    esi
c0025483:	5f                   	pop    edi
c0025484:	5d                   	pop    ebp
c0025485:	c3                   	ret    

c0025486 <AVX::open(int, int, void*)>:
c0025486:	83 ec 0c             	sub    esp,0xc
c0025489:	e8 3a 11 00 00       	call   c00265c8 <avxInit>
c002548e:	b8 00 00 00 00       	mov    eax,0x0
c0025493:	83 c4 0c             	add    esp,0xc
c0025496:	c3                   	ret    
c0025497:	90                   	nop

c0025498 <AVX::close(int, int, void*)>:
c0025498:	83 ec 0c             	sub    esp,0xc
c002549b:	e8 29 11 00 00       	call   c00265c9 <avxClose>
c00254a0:	b8 00 00 00 00       	mov    eax,0x0
c00254a5:	83 c4 0c             	add    esp,0xc
c00254a8:	c3                   	ret    
c00254a9:	90                   	nop

c00254aa <AVX::available()>:
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	e8 0e 11 00 00       	call   c00265c0 <avxDetect>
c00254b2:	85 c0                	test   eax,eax
c00254b4:	0f 95 c0             	setne  al
c00254b7:	83 c4 0c             	add    esp,0xc
c00254ba:	c3                   	ret    
c00254bb:	90                   	nop

c00254bc <AVX::save(void*)>:
c00254bc:	83 ec 0c             	sub    esp,0xc
c00254bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254c3:	83 ec 0c             	sub    esp,0xc
c00254c6:	50                   	push   eax
c00254c7:	e8 fa 10 00 00       	call   c00265c6 <avxSave>
c00254cc:	83 c4 10             	add    esp,0x10
c00254cf:	90                   	nop
c00254d0:	83 c4 0c             	add    esp,0xc
c00254d3:	c3                   	ret    

c00254d4 <AVX::load(void*)>:
c00254d4:	83 ec 0c             	sub    esp,0xc
c00254d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254db:	83 ec 0c             	sub    esp,0xc
c00254de:	50                   	push   eax
c00254df:	e8 e3 10 00 00       	call   c00265c7 <avxLoad>
c00254e4:	83 c4 10             	add    esp,0x10
c00254e7:	90                   	nop
c00254e8:	83 c4 0c             	add    esp,0xc
c00254eb:	c3                   	ret    

c00254ec <AVX::AVX()>:
c00254ec:	83 ec 0c             	sub    esp,0xc
c00254ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f3:	83 ec 08             	sub    esp,0x8
c00254f6:	68 64 cf 02 c0       	push   0xc002cf64
c00254fb:	50                   	push   eax
c00254fc:	e8 21 f3 fe ff       	call   c0014822 <FPU::FPU(char const*)>
c0025501:	83 c4 10             	add    esp,0x10
c0025504:	ba 74 cf 02 c0       	mov    edx,0xc002cf74
c0025509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002550d:	89 10                	mov    DWORD PTR [eax],edx
c002550f:	90                   	nop
c0025510:	83 c4 0c             	add    esp,0xc
c0025513:	c3                   	ret    

c0025514 <MMX::available()>:
c0025514:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025519:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002551f:	83 e0 20             	and    eax,0x20
c0025522:	84 c0                	test   al,al
c0025524:	0f 95 c0             	setne  al
c0025527:	c3                   	ret    

c0025528 <MMX::open(int, int, void*)>:
c0025528:	83 ec 0c             	sub    esp,0xc
c002552b:	e8 1c 11 00 00       	call   c002664c <x87Init>
c0025530:	b8 00 00 00 00       	mov    eax,0x0
c0025535:	83 c4 0c             	add    esp,0xc
c0025538:	c3                   	ret    
c0025539:	90                   	nop

c002553a <MMX::close(int, int, void*)>:
c002553a:	83 ec 0c             	sub    esp,0xc
c002553d:	e8 24 11 00 00       	call   c0026666 <x87Close>
c0025542:	b8 00 00 00 00       	mov    eax,0x0
c0025547:	83 c4 0c             	add    esp,0xc
c002554a:	c3                   	ret    
c002554b:	90                   	nop

c002554c <MMX::save(void*)>:
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025553:	83 ec 0c             	sub    esp,0xc
c0025556:	50                   	push   eax
c0025557:	e8 e5 10 00 00       	call   c0026641 <x87Save>
c002555c:	83 c4 10             	add    esp,0x10
c002555f:	90                   	nop
c0025560:	83 c4 0c             	add    esp,0xc
c0025563:	c3                   	ret    

c0025564 <MMX::load(void*)>:
c0025564:	83 ec 0c             	sub    esp,0xc
c0025567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002556b:	83 ec 0c             	sub    esp,0xc
c002556e:	50                   	push   eax
c002556f:	e8 d3 10 00 00       	call   c0026647 <x87Load>
c0025574:	83 c4 10             	add    esp,0x10
c0025577:	90                   	nop
c0025578:	83 c4 0c             	add    esp,0xc
c002557b:	c3                   	ret    

c002557c <MMX::MMX()>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	83 ec 08             	sub    esp,0x8
c0025586:	68 a4 cf 02 c0       	push   0xc002cfa4
c002558b:	50                   	push   eax
c002558c:	e8 91 f2 fe ff       	call   c0014822 <FPU::FPU(char const*)>
c0025591:	83 c4 10             	add    esp,0x10
c0025594:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0025599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559d:	89 10                	mov    DWORD PTR [eax],edx
c002559f:	90                   	nop
c00255a0:	83 c4 0c             	add    esp,0xc
c00255a3:	c3                   	ret    

c00255a4 <SSE::open(int, int, void*)>:
c00255a4:	83 ec 0c             	sub    esp,0xc
c00255a7:	e8 58 10 00 00       	call   c0026604 <sseInit>
c00255ac:	b8 00 00 00 00       	mov    eax,0x0
c00255b1:	83 c4 0c             	add    esp,0xc
c00255b4:	c3                   	ret    
c00255b5:	90                   	nop

c00255b6 <SSE::close(int, int, void*)>:
c00255b6:	83 ec 0c             	sub    esp,0xc
c00255b9:	e8 56 10 00 00       	call   c0026614 <sseClose>
c00255be:	b8 00 00 00 00       	mov    eax,0x0
c00255c3:	83 c4 0c             	add    esp,0xc
c00255c6:	c3                   	ret    
c00255c7:	90                   	nop

c00255c8 <SSE::available()>:
c00255c8:	83 ec 1c             	sub    esp,0x1c
c00255cb:	e8 10 10 00 00       	call   c00265e0 <absolutelyNoChanceInHell>
c00255d0:	85 c0                	test   eax,eax
c00255d2:	0f 95 c0             	setne  al
c00255d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255d9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255dd:	83 c4 1c             	add    esp,0x1c
c00255e0:	c3                   	ret    
c00255e1:	90                   	nop

c00255e2 <SSE::save(void*)>:
c00255e2:	83 ec 0c             	sub    esp,0xc
c00255e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255e9:	83 ec 0c             	sub    esp,0xc
c00255ec:	50                   	push   eax
c00255ed:	e8 06 10 00 00       	call   c00265f8 <sseSave>
c00255f2:	83 c4 10             	add    esp,0x10
c00255f5:	90                   	nop
c00255f6:	83 c4 0c             	add    esp,0xc
c00255f9:	c3                   	ret    

c00255fa <SSE::load(void*)>:
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025601:	83 ec 0c             	sub    esp,0xc
c0025604:	50                   	push   eax
c0025605:	e8 f4 0f 00 00       	call   c00265fe <sseLoad>
c002560a:	83 c4 10             	add    esp,0x10
c002560d:	90                   	nop
c002560e:	83 c4 0c             	add    esp,0xc
c0025611:	c3                   	ret    

c0025612 <SSE::SSE()>:
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025619:	83 ec 08             	sub    esp,0x8
c002561c:	68 e4 cf 02 c0       	push   0xc002cfe4
c0025621:	50                   	push   eax
c0025622:	e8 fb f1 fe ff       	call   c0014822 <FPU::FPU(char const*)>
c0025627:	83 c4 10             	add    esp,0x10
c002562a:	ba f4 cf 02 c0       	mov    edx,0xc002cff4
c002562f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025633:	89 10                	mov    DWORD PTR [eax],edx
c0025635:	90                   	nop
c0025636:	83 c4 0c             	add    esp,0xc
c0025639:	c3                   	ret    

c002563a <x87::open(int, int, void*)>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	e8 0a 10 00 00       	call   c002664c <x87Init>
c0025642:	b8 00 00 00 00       	mov    eax,0x0
c0025647:	83 c4 0c             	add    esp,0xc
c002564a:	c3                   	ret    
c002564b:	90                   	nop

c002564c <x87::close(int, int, void*)>:
c002564c:	83 ec 0c             	sub    esp,0xc
c002564f:	e8 12 10 00 00       	call   c0026666 <x87Close>
c0025654:	b8 00 00 00 00       	mov    eax,0x0
c0025659:	83 c4 0c             	add    esp,0xc
c002565c:	c3                   	ret    
c002565d:	90                   	nop

c002565e <x87::available()>:
c002565e:	83 ec 0c             	sub    esp,0xc
c0025661:	e8 c0 0f 00 00       	call   c0026626 <x87Detect>
c0025666:	85 c0                	test   eax,eax
c0025668:	0f 95 c0             	setne  al
c002566b:	83 c4 0c             	add    esp,0xc
c002566e:	c3                   	ret    
c002566f:	90                   	nop

c0025670 <x87::save(void*)>:
c0025670:	83 ec 0c             	sub    esp,0xc
c0025673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025677:	83 ec 0c             	sub    esp,0xc
c002567a:	50                   	push   eax
c002567b:	e8 c1 0f 00 00       	call   c0026641 <x87Save>
c0025680:	83 c4 10             	add    esp,0x10
c0025683:	90                   	nop
c0025684:	83 c4 0c             	add    esp,0xc
c0025687:	c3                   	ret    

c0025688 <x87::load(void*)>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568f:	83 ec 0c             	sub    esp,0xc
c0025692:	50                   	push   eax
c0025693:	e8 af 0f 00 00       	call   c0026647 <x87Load>
c0025698:	83 c4 10             	add    esp,0x10
c002569b:	90                   	nop
c002569c:	83 c4 0c             	add    esp,0xc
c002569f:	c3                   	ret    

c00256a0 <x87::x87()>:
c00256a0:	83 ec 0c             	sub    esp,0xc
c00256a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a7:	83 ec 08             	sub    esp,0x8
c00256aa:	68 24 d0 02 c0       	push   0xc002d024
c00256af:	50                   	push   eax
c00256b0:	e8 6d f1 fe ff       	call   c0014822 <FPU::FPU(char const*)>
c00256b5:	83 c4 10             	add    esp,0x10
c00256b8:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c00256bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c1:	89 10                	mov    DWORD PTR [eax],edx
c00256c3:	90                   	nop
c00256c4:	83 c4 0c             	add    esp,0xc
c00256c7:	c3                   	ret    

c00256c8 <APIC::disable()>:
c00256c8:	90                   	nop
c00256c9:	c3                   	ret    

c00256ca <APIC::close(int, int, void*)>:
c00256ca:	55                   	push   ebp
c00256cb:	89 e5                	mov    ebp,esp
c00256cd:	83 ec 08             	sub    esp,0x8
c00256d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00256d5:	83 c0 3c             	add    eax,0x3c
c00256d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00256da:	83 ec 0c             	sub    esp,0xc
c00256dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256e0:	ff d0                	call   eax
c00256e2:	83 c4 10             	add    esp,0x10
c00256e5:	b8 00 00 00 00       	mov    eax,0x0
c00256ea:	c9                   	leave  
c00256eb:	c3                   	ret    

c00256ec <IOAPIC::close(int, int, void*)>:
c00256ec:	b8 00 00 00 00       	mov    eax,0x0
c00256f1:	c3                   	ret    

c00256f2 <APIC::io_wait()>:
c00256f2:	eb 00                	jmp    c00256f4 <APIC::io_wait()+0x2>
c00256f4:	eb 00                	jmp    c00256f6 <APIC::io_wait()+0x4>
c00256f6:	90                   	nop
c00256f7:	c3                   	ret    

c00256f8 <APIC::getBase()>:
c00256f8:	55                   	push   ebp
c00256f9:	89 e5                	mov    ebp,esp
c00256fb:	83 ec 18             	sub    esp,0x18
c00256fe:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025703:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025709:	83 e0 08             	and    eax,0x8
c002570c:	84 c0                	test   al,al
c002570e:	75 07                	jne    c0025717 <APIC::getBase()+0x1f>
c0025710:	b8 00 00 00 00       	mov    eax,0x0
c0025715:	eb 21                	jmp    c0025738 <APIC::getBase()+0x40>
c0025717:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002571c:	83 ec 08             	sub    esp,0x8
c002571f:	6a 1b                	push   0x1b
c0025721:	50                   	push   eax
c0025722:	e8 c1 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025727:	83 c4 10             	add    esp,0x10
c002572a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002572d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025730:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025733:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025738:	c9                   	leave  
c0025739:	c3                   	ret    

c002573a <APIC::eoi(unsigned char)>:
c002573a:	55                   	push   ebp
c002573b:	89 e5                	mov    ebp,esp
c002573d:	83 ec 28             	sub    esp,0x28
c0025740:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025743:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025746:	83 ec 0c             	sub    esp,0xc
c0025749:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002574c:	e8 a7 ff ff ff       	call   c00256f8 <APIC::getBase()>
c0025751:	83 c4 10             	add    esp,0x10
c0025754:	05 b0 00 00 00       	add    eax,0xb0
c0025759:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002575c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002575f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025765:	90                   	nop
c0025766:	c9                   	leave  
c0025767:	c3                   	ret    

c0025768 <APIC::open(int, int, void*)>:
c0025768:	55                   	push   ebp
c0025769:	89 e5                	mov    ebp,esp
c002576b:	57                   	push   edi
c002576c:	56                   	push   esi
c002576d:	53                   	push   ebx
c002576e:	83 ec 2c             	sub    esp,0x2c
c0025771:	83 ec 0c             	sub    esp,0xc
c0025774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025777:	e8 7c ff ff ff       	call   c00256f8 <APIC::getBase()>
c002577c:	83 c4 10             	add    esp,0x10
c002577f:	89 c2                	mov    edx,eax
c0025781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025784:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002578a:	0f b6 f8             	movzx  edi,al
c002578d:	89 d0                	mov    eax,edx
c002578f:	ba 00 00 00 00       	mov    edx,0x0
c0025794:	89 c1                	mov    ecx,eax
c0025796:	80 e5 ff             	and    ch,0xff
c0025799:	89 cb                	mov    ebx,ecx
c002579b:	0f b6 f2             	movzx  esi,dl
c002579e:	89 d8                	mov    eax,ebx
c00257a0:	89 f2                	mov    edx,esi
c00257a2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257a5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257a8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257ac:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257b0:	83 e0 00             	and    eax,0x0
c00257b3:	09 d0                	or     eax,edx
c00257b5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257bc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257c2:	8d 50 01             	lea    edx,[eax+0x1]
c00257c5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257c8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257ce:	0f b6 d0             	movzx  edx,al
c00257d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d4:	83 c2 08             	add    edx,0x8
c00257d7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257db:	0f b6 c9             	movzx  ecx,cl
c00257de:	81 c9 00 00 01 00    	or     ecx,0x10000
c00257e4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257e8:	83 ec 0c             	sub    esp,0xc
c00257eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ee:	e8 05 ff ff ff       	call   c00256f8 <APIC::getBase()>
c00257f3:	83 c4 10             	add    esp,0x10
c00257f6:	05 f0 00 00 00       	add    eax,0xf0
c00257fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00257fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025801:	8b 00                	mov    eax,DWORD PTR [eax]
c0025803:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025806:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002580d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025814:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025817:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002581a:	89 10                	mov    DWORD PTR [eax],edx
c002581c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025823:	a1 70 0c 03 c0       	mov    eax,ds:0xc0030c70
c0025828:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002582b:	7d 7c                	jge    c00258a9 <APIC::open(int, int, void*)+0x141>
c002582d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025830:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025837:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002583a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002583d:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025844:	c1 e8 08             	shr    eax,0x8
c0025847:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002584b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002584e:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025855:	c1 e8 18             	shr    eax,0x18
c0025858:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002585b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002585f:	75 40                	jne    c00258a1 <APIC::open(int, int, void*)+0x139>
c0025861:	83 ec 0c             	sub    esp,0xc
c0025864:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025867:	e8 8c fe ff ff       	call   c00256f8 <APIC::getBase()>
c002586c:	83 c4 10             	add    esp,0x10
c002586f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025873:	75 07                	jne    c002587c <APIC::open(int, int, void*)+0x114>
c0025875:	ba 60 03 00 00       	mov    edx,0x360
c002587a:	eb 05                	jmp    c0025881 <APIC::open(int, int, void*)+0x119>
c002587c:	ba 50 03 00 00       	mov    edx,0x350
c0025881:	01 d0                	add    eax,edx
c0025883:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025886:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025889:	8b 00                	mov    eax,DWORD PTR [eax]
c002588b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002588e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025895:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025899:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002589c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002589f:	89 10                	mov    DWORD PTR [eax],edx
c00258a1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258a4:	e9 7a ff ff ff       	jmp    c0025823 <APIC::open(int, int, void*)+0xbb>
c00258a9:	b8 00 00 00 00       	mov    eax,0x0
c00258ae:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258b1:	5b                   	pop    ebx
c00258b2:	5e                   	pop    esi
c00258b3:	5f                   	pop    edi
c00258b4:	5d                   	pop    ebp
c00258b5:	c3                   	ret    

c00258b6 <IOAPIC::IOAPIC()>:
c00258b6:	83 ec 0c             	sub    esp,0xc
c00258b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258bd:	83 ec 08             	sub    esp,0x8
c00258c0:	68 64 d0 02 c0       	push   0xc002d064
c00258c5:	50                   	push   eax
c00258c6:	e8 45 ec fe ff       	call   c0014510 <Device::Device(char const*)>
c00258cb:	83 c4 10             	add    esp,0x10
c00258ce:	ba 8c d1 02 c0       	mov    edx,0xc002d18c
c00258d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d7:	89 10                	mov    DWORD PTR [eax],edx
c00258d9:	90                   	nop
c00258da:	83 c4 0c             	add    esp,0xc
c00258dd:	c3                   	ret    

c00258de <APIC::APIC()>:
c00258de:	53                   	push   ebx
c00258df:	83 ec 18             	sub    esp,0x18
c00258e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258e6:	83 ec 08             	sub    esp,0x8
c00258e9:	68 6c d0 02 c0       	push   0xc002d06c
c00258ee:	50                   	push   eax
c00258ef:	e8 88 f3 fe ff       	call   c0014c7c <InterruptController::InterruptController(char const*)>
c00258f4:	83 c4 10             	add    esp,0x10
c00258f7:	ba 44 d1 02 c0       	mov    edx,0xc002d144
c00258fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025900:	89 10                	mov    DWORD PTR [eax],edx
c0025902:	a0 40 27 03 c0       	mov    al,ds:0xc0032740
c0025907:	83 f0 01             	xor    eax,0x1
c002590a:	84 c0                	test   al,al
c002590c:	0f 84 a1 00 00 00    	je     c00259b3 <APIC::APIC()+0xd5>
c0025912:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025917:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c002591c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025920:	0f 83 86 00 00 00    	jae    c00259ac <APIC::APIC()+0xce>
c0025926:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025935:	e8 06 9f fe ff       	call   c000f840 <malloc>
c002593a:	83 c4 10             	add    esp,0x10
c002593d:	89 c3                	mov    ebx,eax
c002593f:	83 ec 0c             	sub    esp,0xc
c0025942:	53                   	push   ebx
c0025943:	e8 6e ff ff ff       	call   c00258b6 <IOAPIC::IOAPIC()>
c0025948:	83 c4 10             	add    esp,0x10
c002594b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002594f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025954:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025958:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c002595f:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025964:	40                   	inc    eax
c0025965:	a3 00 27 03 c0       	mov    ds:0xc0032700,eax
c002596a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002596f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025975:	83 ec 08             	sub    esp,0x8
c0025978:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002597c:	50                   	push   eax
c002597d:	e8 9e e9 fe ff       	call   c0014320 <Device::addChild(Device*)>
c0025982:	83 c4 10             	add    esp,0x10
c0025985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025989:	8b 00                	mov    eax,DWORD PTR [eax]
c002598b:	83 c0 08             	add    eax,0x8
c002598e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025990:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025995:	6a 00                	push   0x0
c0025997:	6a 00                	push   0x0
c0025999:	52                   	push   edx
c002599a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002599e:	ff d0                	call   eax
c00259a0:	83 c4 10             	add    esp,0x10
c00259a3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259a7:	e9 6b ff ff ff       	jmp    c0025917 <APIC::APIC()+0x39>
c00259ac:	c6 05 40 27 03 c0 01 	mov    BYTE PTR ds:0xc0032740,0x1
c00259b3:	90                   	nop
c00259b4:	83 c4 18             	add    esp,0x18
c00259b7:	5b                   	pop    ebx
c00259b8:	c3                   	ret    
c00259b9:	90                   	nop

c00259ba <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259ba:	55                   	push   ebp
c00259bb:	89 e5                	mov    ebp,esp
c00259bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259c6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259c9:	72 1d                	jb     c00259e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ce:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259d7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259dd:	01 d0                	add    eax,edx
c00259df:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259e2:	73 04                	jae    c00259e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259e4:	b0 01                	mov    al,0x1
c00259e6:	eb 02                	jmp    c00259ea <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00259e8:	b0 00                	mov    al,0x0
c00259ea:	5d                   	pop    ebp
c00259eb:	c3                   	ret    

c00259ec <IOAPIC::read(int)>:
c00259ec:	55                   	push   ebp
c00259ed:	89 e5                	mov    ebp,esp
c00259ef:	83 ec 10             	sub    esp,0x10
c00259f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00259fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00259fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a01:	0f b6 d0             	movzx  edx,al
c0025a04:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a07:	89 10                	mov    DWORD PTR [eax],edx
c0025a09:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a0c:	83 c0 10             	add    eax,0x10
c0025a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a11:	c9                   	leave  
c0025a12:	c3                   	ret    
c0025a13:	90                   	nop

c0025a14 <IOAPIC::open(int, int, void*)>:
c0025a14:	55                   	push   ebp
c0025a15:	89 e5                	mov    ebp,esp
c0025a17:	57                   	push   edi
c0025a18:	56                   	push   esi
c0025a19:	53                   	push   ebx
c0025a1a:	83 ec 0c             	sub    esp,0xc
c0025a1d:	83 ec 0c             	sub    esp,0xc
c0025a20:	68 97 d0 02 c0       	push   0xc002d097
c0025a25:	e8 d0 d4 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0025a2a:	83 c4 10             	add    esp,0x10
c0025a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a33:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a42:	8b 14 85 60 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf2a0]
c0025a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a5b:	8b 14 85 e0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf220]
c0025a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a65:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a77:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a7d:	0f b6 f8             	movzx  edi,al
c0025a80:	89 d0                	mov    eax,edx
c0025a82:	ba 00 00 00 00       	mov    edx,0x0
c0025a87:	89 c1                	mov    ecx,eax
c0025a89:	80 e5 ff             	and    ch,0xff
c0025a8c:	89 cb                	mov    ebx,ecx
c0025a8e:	0f b6 f2             	movzx  esi,dl
c0025a91:	89 d8                	mov    eax,ebx
c0025a93:	89 f2                	mov    edx,esi
c0025a95:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a98:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a9b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a9f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025aa3:	83 e0 00             	and    eax,0x0
c0025aa6:	09 d0                	or     eax,edx
c0025aa8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aaf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ab5:	8d 50 01             	lea    edx,[eax+0x1]
c0025ab8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025abb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025ac1:	0f b6 d0             	movzx  edx,al
c0025ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac7:	83 c2 08             	add    edx,0x8
c0025aca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025ace:	0f b6 c9             	movzx  ecx,cl
c0025ad1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ad7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025adb:	83 ec 08             	sub    esp,0x8
c0025ade:	6a 01                	push   0x1
c0025ae0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ae3:	e8 04 ff ff ff       	call   c00259ec <IOAPIC::read(int)>
c0025ae8:	83 c4 10             	add    esp,0x10
c0025aeb:	c1 f8 10             	sar    eax,0x10
c0025aee:	0f b6 c0             	movzx  eax,al
c0025af1:	8d 50 01             	lea    edx,[eax+0x1]
c0025af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025afd:	b8 00 00 00 00       	mov    eax,0x0
c0025b02:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b05:	5b                   	pop    ebx
c0025b06:	5e                   	pop    esi
c0025b07:	5f                   	pop    edi
c0025b08:	5d                   	pop    ebp
c0025b09:	c3                   	ret    

c0025b0a <IOAPIC::write(int, int)>:
c0025b0a:	55                   	push   ebp
c0025b0b:	89 e5                	mov    ebp,esp
c0025b0d:	83 ec 10             	sub    esp,0x10
c0025b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b19:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b1f:	0f b6 d0             	movzx  edx,al
c0025b22:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b25:	89 10                	mov    DWORD PTR [eax],edx
c0025b27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b2a:	8d 50 10             	lea    edx,[eax+0x10]
c0025b2d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b30:	89 02                	mov    DWORD PTR [edx],eax
c0025b32:	90                   	nop
c0025b33:	c9                   	leave  
c0025b34:	c3                   	ret    
c0025b35:	90                   	nop

c0025b36 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b36:	55                   	push   ebp
c0025b37:	89 e5                	mov    ebp,esp
c0025b39:	53                   	push   ebx
c0025b3a:	83 ec 2c             	sub    esp,0x2c
c0025b3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b40:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b43:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b46:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b49:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b4f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b52:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b55:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b58:	88 d8                	mov    al,bl
c0025b5a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b5d:	88 c8                	mov    al,cl
c0025b5f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b62:	88 d0                	mov    al,dl
c0025b64:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b67:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b6b:	83 c0 08             	add    eax,0x8
c0025b6e:	01 c0                	add    eax,eax
c0025b70:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b73:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b77:	83 c0 08             	add    eax,0x8
c0025b7a:	01 c0                	add    eax,eax
c0025b7c:	40                   	inc    eax
c0025b7d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b80:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b83:	50                   	push   eax
c0025b84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b87:	e8 60 fe ff ff       	call   c00259ec <IOAPIC::read(int)>
c0025b8c:	83 c4 08             	add    esp,0x8
c0025b8f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b92:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025b99:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025b9c:	c1 e0 18             	shl    eax,0x18
c0025b9f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ba2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ba5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ba8:	52                   	push   edx
c0025ba9:	50                   	push   eax
c0025baa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bad:	e8 58 ff ff ff       	call   c0025b0a <IOAPIC::write(int, int)>
c0025bb2:	83 c4 0c             	add    esp,0xc
c0025bb5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bb8:	50                   	push   eax
c0025bb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bbc:	e8 2b fe ff ff       	call   c00259ec <IOAPIC::read(int)>
c0025bc1:	83 c4 08             	add    esp,0x8
c0025bc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bc7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025bce:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025bd5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025bdc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025be0:	74 09                	je     c0025beb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025be2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025be9:	eb 07                	jmp    c0025bf2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025beb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025bf2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025bf6:	74 09                	je     c0025c01 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025bf8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025bff:	eb 07                	jmp    c0025c08 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c01:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c08:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c0f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c13:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c16:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c1c:	52                   	push   edx
c0025c1d:	50                   	push   eax
c0025c1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c21:	e8 e4 fe ff ff       	call   c0025b0a <IOAPIC::write(int, int)>
c0025c26:	83 c4 0c             	add    esp,0xc
c0025c29:	90                   	nop
c0025c2a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c2d:	c9                   	leave  
c0025c2e:	c3                   	ret    
c0025c2f:	90                   	nop

c0025c30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c30:	55                   	push   ebp
c0025c31:	89 e5                	mov    ebp,esp
c0025c33:	57                   	push   edi
c0025c34:	56                   	push   esi
c0025c35:	53                   	push   ebx
c0025c36:	83 ec 2c             	sub    esp,0x2c
c0025c39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c3c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c3f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c43:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c47:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c4b:	74 5a                	je     c0025ca7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c4d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c51:	7f 44                	jg     c0025c97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c56:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0025c5b:	8a 00                	mov    al,BYTE PTR [eax]
c0025c5d:	0f b6 c0             	movzx  eax,al
c0025c60:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c66:	66 8b 84 00 00 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf300]
c0025c6e:	0f b7 c0             	movzx  eax,ax
c0025c71:	83 e0 02             	and    eax,0x2
c0025c74:	85 c0                	test   eax,eax
c0025c76:	74 04                	je     c0025c7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c78:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c7f:	66 8b 84 00 00 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf300]
c0025c87:	0f b7 c0             	movzx  eax,ax
c0025c8a:	83 e0 08             	and    eax,0x8
c0025c8d:	85 c0                	test   eax,eax
c0025c8f:	74 16                	je     c0025ca7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c91:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c95:	eb 10                	jmp    c0025ca7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c97:	83 ec 0c             	sub    esp,0xc
c0025c9a:	68 a8 d0 02 c0       	push   0xc002d0a8
c0025c9f:	e8 07 49 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0025ca4:	83 c4 10             	add    esp,0x10
c0025ca7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cab:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025cb0:	83 ec 08             	sub    esp,0x8
c0025cb3:	50                   	push   eax
c0025cb4:	68 e0 d0 02 c0       	push   0xc002d0e0
c0025cb9:	e8 3c d2 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0025cbe:	83 c4 10             	add    esp,0x10
c0025cc1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025cc8:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025ccd:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025cd0:	7d 67                	jge    c0025d39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cd2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cd5:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0025cdc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cdf:	83 ec 08             	sub    esp,0x8
c0025ce2:	52                   	push   edx
c0025ce3:	50                   	push   eax
c0025ce4:	e8 d1 fc ff ff       	call   c00259ba <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025ce9:	83 c4 10             	add    esp,0x10
c0025cec:	84 c0                	test   al,al
c0025cee:	74 44                	je     c0025d34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025cf0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cf3:	8b 1c 85 20 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd8e0]
c0025cfa:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025cfe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d01:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d08:	83 c0 20             	add    eax,0x20
c0025d0b:	0f b6 f0             	movzx  esi,al
c0025d0e:	b8 00 00 00 00       	mov    eax,0x0
c0025d13:	99                   	cdq    
c0025d14:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d17:	0f b6 c9             	movzx  ecx,cl
c0025d1a:	83 ec 04             	sub    esp,0x4
c0025d1d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d20:	57                   	push   edi
c0025d21:	56                   	push   esi
c0025d22:	52                   	push   edx
c0025d23:	50                   	push   eax
c0025d24:	51                   	push   ecx
c0025d25:	53                   	push   ebx
c0025d26:	e8 0b fe ff ff       	call   c0025b36 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d2b:	83 c4 20             	add    esp,0x20
c0025d2e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d32:	eb 05                	jmp    c0025d39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d34:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d37:	eb 8f                	jmp    c0025cc8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d39:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d3c:	83 f0 01             	xor    eax,0x1
c0025d3f:	84 c0                	test   al,al
c0025d41:	74 10                	je     c0025d53 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d43:	83 ec 0c             	sub    esp,0xc
c0025d46:	68 f7 d0 02 c0       	push   0xc002d0f7
c0025d4b:	e8 5b 48 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0025d50:	83 c4 10             	add    esp,0x10
c0025d53:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d57:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d5e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d62:	7f 65                	jg     c0025dc9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d67:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d6a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d71:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d74:	01 ca                	add    edx,ecx
c0025d76:	83 c2 54             	add    edx,0x54
c0025d79:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d7d:	85 c0                	test   eax,eax
c0025d7f:	75 43                	jne    c0025dc4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d87:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d8e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d91:	01 ca                	add    edx,ecx
c0025d93:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025d96:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025d99:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025da0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025da3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025daa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dad:	01 ca                	add    edx,ecx
c0025daf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025db5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025db8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dbf:	83 e8 20             	sub    eax,0x20
c0025dc2:	eb 1a                	jmp    c0025dde <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025dc4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025dc7:	eb 95                	jmp    c0025d5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025dc9:	83 ec 0c             	sub    esp,0xc
c0025dcc:	68 04 d1 02 c0       	push   0xc002d104
c0025dd1:	e8 d5 47 ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0025dd6:	83 c4 10             	add    esp,0x10
c0025dd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025dde:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025de1:	5b                   	pop    ebx
c0025de2:	5e                   	pop    esi
c0025de3:	5f                   	pop    edi
c0025de4:	5d                   	pop    ebp
c0025de5:	c3                   	ret    

c0025de6 <PIC::disable()>:
c0025de6:	55                   	push   ebp
c0025de7:	89 e5                	mov    ebp,esp
c0025de9:	83 ec 10             	sub    esp,0x10
c0025dec:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025df2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025df6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025df9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025dfd:	ee                   	out    dx,al
c0025dfe:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e04:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e08:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e0b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e0f:	ee                   	out    dx,al
c0025e10:	90                   	nop
c0025e11:	c9                   	leave  
c0025e12:	c3                   	ret    
c0025e13:	90                   	nop

c0025e14 <PIC::close(int, int, void*)>:
c0025e14:	55                   	push   ebp
c0025e15:	89 e5                	mov    ebp,esp
c0025e17:	83 ec 08             	sub    esp,0x8
c0025e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e1f:	83 c0 3c             	add    eax,0x3c
c0025e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e24:	83 ec 0c             	sub    esp,0xc
c0025e27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e2a:	ff d0                	call   eax
c0025e2c:	83 c4 10             	add    esp,0x10
c0025e2f:	b8 00 00 00 00       	mov    eax,0x0
c0025e34:	c9                   	leave  
c0025e35:	c3                   	ret    

c0025e36 <PIC::PIC()>:
c0025e36:	83 ec 0c             	sub    esp,0xc
c0025e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e3d:	83 ec 08             	sub    esp,0x8
c0025e40:	68 b0 d1 02 c0       	push   0xc002d1b0
c0025e45:	50                   	push   eax
c0025e46:	e8 31 ee fe ff       	call   c0014c7c <InterruptController::InterruptController(char const*)>
c0025e4b:	83 c4 10             	add    esp,0x10
c0025e4e:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c0025e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e57:	89 10                	mov    DWORD PTR [eax],edx
c0025e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e63:	0f b6 d0             	movzx  edx,al
c0025e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e7b:	0f b6 d0             	movzx  edx,al
c0025e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e82:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e91:	8d 50 01             	lea    edx,[eax+0x1]
c0025e94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e98:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e9e:	0f b6 d0             	movzx  edx,al
c0025ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ea9:	83 e1 3f             	and    ecx,0x3f
c0025eac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eba:	0f b6 d0             	movzx  edx,al
c0025ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed2:	0f b6 d0             	movzx  edx,al
c0025ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee8:	8d 50 01             	lea    edx,[eax+0x1]
c0025eeb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ef5:	0f b6 d0             	movzx  edx,al
c0025ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f00:	83 e1 3f             	and    ecx,0x3f
c0025f03:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f07:	90                   	nop
c0025f08:	83 c4 0c             	add    esp,0xc
c0025f0b:	c3                   	ret    

c0025f0c <PIC::ioWait()>:
c0025f0c:	eb 00                	jmp    c0025f0e <PIC::ioWait()+0x2>
c0025f0e:	eb 00                	jmp    c0025f10 <PIC::ioWait()+0x4>
c0025f10:	90                   	nop
c0025f11:	c3                   	ret    

c0025f12 <PIC::getIRQReg(int)>:
c0025f12:	55                   	push   ebp
c0025f13:	89 e5                	mov    ebp,esp
c0025f15:	83 ec 10             	sub    esp,0x10
c0025f18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f1b:	0f b6 c0             	movzx  eax,al
c0025f1e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f24:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f27:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f2a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f2e:	ee                   	out    dx,al
c0025f2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f32:	0f b6 c0             	movzx  eax,al
c0025f35:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f3b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f3e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f41:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f45:	ee                   	out    dx,al
c0025f46:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f4c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f50:	89 c2                	mov    edx,eax
c0025f52:	ec                   	in     al,dx
c0025f53:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f56:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f59:	0f b6 c0             	movzx  eax,al
c0025f5c:	c1 e0 08             	shl    eax,0x8
c0025f5f:	89 c1                	mov    ecx,eax
c0025f61:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f67:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f6b:	89 c2                	mov    edx,eax
c0025f6d:	ec                   	in     al,dx
c0025f6e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f71:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f74:	0f b6 c0             	movzx  eax,al
c0025f77:	09 c8                	or     eax,ecx
c0025f79:	c9                   	leave  
c0025f7a:	c3                   	ret    
c0025f7b:	90                   	nop

c0025f7c <PIC::eoi(unsigned char)>:
c0025f7c:	55                   	push   ebp
c0025f7d:	89 e5                	mov    ebp,esp
c0025f7f:	83 ec 14             	sub    esp,0x14
c0025f82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f85:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f88:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f8c:	75 1e                	jne    c0025fac <PIC::eoi(unsigned char)+0x30>
c0025f8e:	6a 0b                	push   0xb
c0025f90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f93:	e8 7a ff ff ff       	call   c0025f12 <PIC::getIRQReg(int)>
c0025f98:	83 c4 08             	add    esp,0x8
c0025f9b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025f9f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fa3:	25 80 00 00 00       	and    eax,0x80
c0025fa8:	85 c0                	test   eax,eax
c0025faa:	74 5f                	je     c002600b <PIC::eoi(unsigned char)+0x8f>
c0025fac:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fb0:	75 2d                	jne    c0025fdf <PIC::eoi(unsigned char)+0x63>
c0025fb2:	6a 0b                	push   0xb
c0025fb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb7:	e8 56 ff ff ff       	call   c0025f12 <PIC::getIRQReg(int)>
c0025fbc:	83 c4 08             	add    esp,0x8
c0025fbf:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fc3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fc6:	66 85 c0             	test   ax,ax
c0025fc9:	78 14                	js     c0025fdf <PIC::eoi(unsigned char)+0x63>
c0025fcb:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025fd1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025fd5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fd8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025fdc:	ee                   	out    dx,al
c0025fdd:	eb 2d                	jmp    c002600c <PIC::eoi(unsigned char)+0x90>
c0025fdf:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fe3:	76 12                	jbe    c0025ff7 <PIC::eoi(unsigned char)+0x7b>
c0025fe5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025feb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025fef:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ff2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ff6:	ee                   	out    dx,al
c0025ff7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ffd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026001:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026004:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026008:	ee                   	out    dx,al
c0026009:	eb 01                	jmp    c002600c <PIC::eoi(unsigned char)+0x90>
c002600b:	90                   	nop
c002600c:	c9                   	leave  
c002600d:	c3                   	ret    

c002600e <PIC::remap()>:
c002600e:	55                   	push   ebp
c002600f:	89 e5                	mov    ebp,esp
c0026011:	83 ec 48             	sub    esp,0x48
c0026014:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002601b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026022:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026028:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002602b:	89 c2                	mov    edx,eax
c002602d:	ec                   	in     al,dx
c002602e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026031:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026034:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026037:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002603d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026040:	89 c2                	mov    edx,eax
c0026042:	ec                   	in     al,dx
c0026043:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026046:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026049:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002604c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026052:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026056:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026059:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002605c:	ee                   	out    dx,al
c002605d:	83 ec 0c             	sub    esp,0xc
c0026060:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026063:	e8 a4 fe ff ff       	call   c0025f0c <PIC::ioWait()>
c0026068:	83 c4 10             	add    esp,0x10
c002606b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026071:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026075:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026078:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002607b:	ee                   	out    dx,al
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026082:	e8 85 fe ff ff       	call   c0025f0c <PIC::ioWait()>
c0026087:	83 c4 10             	add    esp,0x10
c002608a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002608d:	0f b6 c0             	movzx  eax,al
c0026090:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026096:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026099:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002609c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002609f:	ee                   	out    dx,al
c00260a0:	83 ec 0c             	sub    esp,0xc
c00260a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a6:	e8 61 fe ff ff       	call   c0025f0c <PIC::ioWait()>
c00260ab:	83 c4 10             	add    esp,0x10
c00260ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260b1:	0f b6 c0             	movzx  eax,al
c00260b4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260ba:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260bd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260c0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260c3:	ee                   	out    dx,al
c00260c4:	83 ec 0c             	sub    esp,0xc
c00260c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ca:	e8 3d fe ff ff       	call   c0025f0c <PIC::ioWait()>
c00260cf:	83 c4 10             	add    esp,0x10
c00260d2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260d8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260dc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260df:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00260e2:	ee                   	out    dx,al
c00260e3:	83 ec 0c             	sub    esp,0xc
c00260e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e9:	e8 1e fe ff ff       	call   c0025f0c <PIC::ioWait()>
c00260ee:	83 c4 10             	add    esp,0x10
c00260f1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00260f7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00260fb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00260fe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026101:	ee                   	out    dx,al
c0026102:	83 ec 0c             	sub    esp,0xc
c0026105:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026108:	e8 ff fd ff ff       	call   c0025f0c <PIC::ioWait()>
c002610d:	83 c4 10             	add    esp,0x10
c0026110:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026116:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002611a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002611d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026120:	ee                   	out    dx,al
c0026121:	83 ec 0c             	sub    esp,0xc
c0026124:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026127:	e8 e0 fd ff ff       	call   c0025f0c <PIC::ioWait()>
c002612c:	83 c4 10             	add    esp,0x10
c002612f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026135:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026139:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002613c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002613f:	ee                   	out    dx,al
c0026140:	83 ec 0c             	sub    esp,0xc
c0026143:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026146:	e8 c1 fd ff ff       	call   c0025f0c <PIC::ioWait()>
c002614b:	83 c4 10             	add    esp,0x10
c002614e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026152:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026158:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002615b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002615e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026161:	ee                   	out    dx,al
c0026162:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026166:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002616c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002616f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026172:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026175:	ee                   	out    dx,al
c0026176:	90                   	nop
c0026177:	c9                   	leave  
c0026178:	c3                   	ret    
c0026179:	90                   	nop

c002617a <PIC::open(int, int, void*)>:
c002617a:	55                   	push   ebp
c002617b:	89 e5                	mov    ebp,esp
c002617d:	83 ec 18             	sub    esp,0x18
c0026180:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026186:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002618a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002618d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026191:	ee                   	out    dx,al
c0026192:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026198:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002619c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002619f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261a3:	ee                   	out    dx,al
c00261a4:	83 ec 0c             	sub    esp,0xc
c00261a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261aa:	e8 5f fe ff ff       	call   c002600e <PIC::remap()>
c00261af:	83 c4 10             	add    esp,0x10
c00261b2:	b8 00 00 00 00       	mov    eax,0x0
c00261b7:	c9                   	leave  
c00261b8:	c3                   	ret    
c00261b9:	90                   	nop

c00261ba <APICTimer::close(int, int, void*)>:
c00261ba:	b8 00 00 00 00       	mov    eax,0x0
c00261bf:	c3                   	ret    

c00261c0 <apicTimerHandler(regs*, void*)>:
c00261c0:	83 ec 0c             	sub    esp,0xc
c00261c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00261c9:	99                   	cdq    
c00261ca:	52                   	push   edx
c00261cb:	50                   	push   eax
c00261cc:	6a 00                	push   0x0
c00261ce:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261d3:	e8 84 07 00 00       	call   c002695c <__udivdi3>
c00261d8:	83 c4 10             	add    esp,0x10
c00261db:	83 ec 08             	sub    esp,0x8
c00261de:	52                   	push   edx
c00261df:	50                   	push   eax
c00261e0:	e8 f2 0a ff ff       	call   c0016cd7 <timerHandler(unsigned long long)>
c00261e5:	83 c4 10             	add    esp,0x10
c00261e8:	90                   	nop
c00261e9:	83 c4 0c             	add    esp,0xc
c00261ec:	c3                   	ret    
c00261ed:	90                   	nop

c00261ee <APICTimer::write(int)>:
c00261ee:	53                   	push   ebx
c00261ef:	83 ec 28             	sub    esp,0x28
c00261f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00261fa:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026200:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026205:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002620b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026211:	83 ec 0c             	sub    esp,0xc
c0026214:	50                   	push   eax
c0026215:	e8 de f4 ff ff       	call   c00256f8 <APIC::getBase()>
c002621a:	83 c4 10             	add    esp,0x10
c002621d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026221:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c0026226:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c002622c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026238:	05 e0 03 00 00       	add    eax,0x3e0
c002623d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026247:	05 80 03 00 00       	add    eax,0x380
c002624c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026252:	fb                   	sti    
c0026253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002625b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026260:	83 d2 00             	adc    edx,0x0
c0026263:	89 c1                	mov    ecx,eax
c0026265:	89 d3                	mov    ebx,edx
c0026267:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c002626c:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c0026272:	39 c8                	cmp    eax,ecx
c0026274:	89 d0                	mov    eax,edx
c0026276:	19 d8                	sbb    eax,ebx
c0026278:	73 02                	jae    c002627c <APICTimer::write(int)+0x8e>
c002627a:	eb d7                	jmp    c0026253 <APICTimer::write(int)+0x65>
c002627c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026280:	05 20 03 00 00       	add    eax,0x320
c0026285:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002628b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628f:	05 90 03 00 00       	add    eax,0x390
c0026294:	8b 00                	mov    eax,DWORD PTR [eax]
c0026296:	f7 d0                	not    eax
c0026298:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002629c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262a4:	ba 00 00 00 00       	mov    edx,0x0
c00262a9:	f7 f3                	div    ebx
c00262ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262b9:	0d 00 00 02 00       	or     eax,0x20000
c00262be:	89 c2                	mov    edx,eax
c00262c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262c4:	05 20 03 00 00       	add    eax,0x320
c00262c9:	89 10                	mov    DWORD PTR [eax],edx
c00262cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262cf:	05 e0 03 00 00       	add    eax,0x3e0
c00262d4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262de:	05 80 03 00 00       	add    eax,0x380
c00262e3:	89 c2                	mov    edx,eax
c00262e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262e9:	89 02                	mov    DWORD PTR [edx],eax
c00262eb:	90                   	nop
c00262ec:	83 c4 28             	add    esp,0x28
c00262ef:	5b                   	pop    ebx
c00262f0:	c3                   	ret    
c00262f1:	90                   	nop

c00262f2 <APICTimer::open(int, int, void*)>:
c00262f2:	57                   	push   edi
c00262f3:	56                   	push   esi
c00262f4:	53                   	push   ebx
c00262f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00262fb:	83 c0 24             	add    eax,0x24
c00262fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0026300:	83 ec 08             	sub    esp,0x8
c0026303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002630b:	ff d0                	call   eax
c002630d:	83 c4 10             	add    esp,0x10
c0026310:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026315:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002631b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026321:	83 ec 0c             	sub    esp,0xc
c0026324:	50                   	push   eax
c0026325:	e8 ce f3 ff ff       	call   c00256f8 <APIC::getBase()>
c002632a:	83 c4 10             	add    esp,0x10
c002632d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026337:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002633d:	0f b6 f8             	movzx  edi,al
c0026340:	89 d0                	mov    eax,edx
c0026342:	ba 00 00 00 00       	mov    edx,0x0
c0026347:	89 c1                	mov    ecx,eax
c0026349:	80 e5 ff             	and    ch,0xff
c002634c:	89 cb                	mov    ebx,ecx
c002634e:	0f b6 f2             	movzx  esi,dl
c0026351:	89 d8                	mov    eax,ebx
c0026353:	89 f2                	mov    edx,esi
c0026355:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026359:	8d 5f 08             	lea    ebx,[edi+0x8]
c002635c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026360:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026364:	83 e0 00             	and    eax,0x0
c0026367:	09 d0                	or     eax,edx
c0026369:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002636d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026371:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026377:	8d 50 01             	lea    edx,[eax+0x1]
c002637a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002637e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026384:	0f b6 d0             	movzx  edx,al
c0026387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638b:	83 c2 08             	add    edx,0x8
c002638e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026392:	0f b6 c9             	movzx  ecx,cl
c0026395:	81 c9 00 00 01 00    	or     ecx,0x10000
c002639b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002639f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263a7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263b5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263bf:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263c5:	83 ec 0c             	sub    esp,0xc
c00263c8:	51                   	push   ecx
c00263c9:	6a 01                	push   0x1
c00263cb:	68 c0 61 02 c0       	push   0xc00261c0
c00263d0:	52                   	push   edx
c00263d1:	50                   	push   eax
c00263d2:	e8 cd de fe ff       	call   c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263d7:	83 c4 20             	add    esp,0x20
c00263da:	89 c2                	mov    edx,eax
c00263dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263e6:	b8 00 00 00 00       	mov    eax,0x0
c00263eb:	5b                   	pop    ebx
c00263ec:	5e                   	pop    esi
c00263ed:	5f                   	pop    edi
c00263ee:	c3                   	ret    
c00263ef:	90                   	nop

c00263f0 <APICTimer::APICTimer()>:
c00263f0:	83 ec 0c             	sub    esp,0xc
c00263f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f7:	83 ec 08             	sub    esp,0x8
c00263fa:	68 1c d2 02 c0       	push   0xc002d21c
c00263ff:	50                   	push   eax
c0026400:	e8 43 08 ff ff       	call   c0016c48 <Timer::Timer(char const*)>
c0026405:	83 c4 10             	add    esp,0x10
c0026408:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c002640d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026411:	89 10                	mov    DWORD PTR [eax],edx
c0026413:	90                   	nop
c0026414:	83 c4 0c             	add    esp,0xc
c0026417:	c3                   	ret    

c0026418 <PIT::write(int)>:
c0026418:	83 ec 10             	sub    esp,0x10
c002641b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002641f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026423:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026429:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002642d:	a3 44 27 03 c0       	mov    ds:0xc0032744,eax
c0026432:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026437:	99                   	cdq    
c0026438:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002643c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026440:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026447:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002644c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026450:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026455:	ee                   	out    dx,al
c0026456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002645a:	0f b6 c0             	movzx  eax,al
c002645d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026464:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026468:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002646c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026471:	ee                   	out    dx,al
c0026472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026476:	c1 f8 08             	sar    eax,0x8
c0026479:	0f b6 c0             	movzx  eax,al
c002647c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026483:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026487:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002648b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026490:	ee                   	out    dx,al
c0026491:	90                   	nop
c0026492:	83 c4 10             	add    esp,0x10
c0026495:	c3                   	ret    

c0026496 <pitHandler(regs*, void*)>:
c0026496:	83 ec 0c             	sub    esp,0xc
c0026499:	a1 44 27 03 c0       	mov    eax,ds:0xc0032744
c002649e:	99                   	cdq    
c002649f:	52                   	push   edx
c00264a0:	50                   	push   eax
c00264a1:	6a 00                	push   0x0
c00264a3:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264a8:	e8 af 04 00 00       	call   c002695c <__udivdi3>
c00264ad:	83 c4 10             	add    esp,0x10
c00264b0:	83 ec 08             	sub    esp,0x8
c00264b3:	52                   	push   edx
c00264b4:	50                   	push   eax
c00264b5:	e8 1d 08 ff ff       	call   c0016cd7 <timerHandler(unsigned long long)>
c00264ba:	83 c4 10             	add    esp,0x10
c00264bd:	90                   	nop
c00264be:	83 c4 0c             	add    esp,0xc
c00264c1:	c3                   	ret    

c00264c2 <PIT::open(int, int, void*)>:
c00264c2:	83 ec 0c             	sub    esp,0xc
c00264c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00264cb:	83 c0 24             	add    eax,0x24
c00264ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00264d0:	83 ec 08             	sub    esp,0x8
c00264d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264db:	ff d0                	call   eax
c00264dd:	83 c4 10             	add    esp,0x10
c00264e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e4:	83 ec 0c             	sub    esp,0xc
c00264e7:	6a 00                	push   0x0
c00264e9:	6a 01                	push   0x1
c00264eb:	68 96 64 02 c0       	push   0xc0026496
c00264f0:	6a 00                	push   0x0
c00264f2:	50                   	push   eax
c00264f3:	e8 ac dd fe ff       	call   c00142a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264f8:	83 c4 20             	add    esp,0x20
c00264fb:	89 c2                	mov    edx,eax
c00264fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026501:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026507:	b8 00 00 00 00       	mov    eax,0x0
c002650c:	83 c4 0c             	add    esp,0xc
c002650f:	c3                   	ret    

c0026510 <PIT::close(int, int, void*)>:
c0026510:	83 ec 0c             	sub    esp,0xc
c0026513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026517:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026525:	6a 01                	push   0x1
c0026527:	68 96 64 02 c0       	push   0xc0026496
c002652c:	6a 00                	push   0x0
c002652e:	50                   	push   eax
c002652f:	e8 ae dd fe ff       	call   c00142e2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026534:	83 c4 10             	add    esp,0x10
c0026537:	b8 00 00 00 00       	mov    eax,0x0
c002653c:	83 c4 0c             	add    esp,0xc
c002653f:	c3                   	ret    

c0026540 <PIT::PIT()>:
c0026540:	83 ec 0c             	sub    esp,0xc
c0026543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026547:	83 ec 08             	sub    esp,0x8
c002654a:	68 58 d2 02 c0       	push   0xc002d258
c002654f:	50                   	push   eax
c0026550:	e8 f3 06 ff ff       	call   c0016c48 <Timer::Timer(char const*)>
c0026555:	83 c4 10             	add    esp,0x10
c0026558:	ba 80 d2 02 c0       	mov    edx,0xc002d280
c002655d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026561:	89 10                	mov    DWORD PTR [eax],edx
c0026563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026567:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002656d:	0f b6 d0             	movzx  edx,al
c0026570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026574:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002657b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026585:	0f b6 d0             	movzx  edx,al
c0026588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026595:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002659b:	8d 50 01             	lea    edx,[eax+0x1]
c002659e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265a2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265a8:	0f b6 d0             	movzx  edx,al
c00265ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265af:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265b3:	83 e1 3f             	and    ecx,0x3f
c00265b6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265ba:	90                   	nop
c00265bb:	83 c4 0c             	add    esp,0xc
c00265be:	c3                   	ret    
c00265bf:	90                   	nop

c00265c0 <avxDetect>:
c00265c0:	b8 00 00 00 00       	mov    eax,0x0
c00265c5:	c3                   	ret    

c00265c6 <avxSave>:
c00265c6:	c3                   	ret    

c00265c7 <avxLoad>:
c00265c7:	c3                   	ret    

c00265c8 <avxInit>:
c00265c8:	c3                   	ret    

c00265c9 <avxClose>:
c00265c9:	c3                   	ret    

c00265ca <wouldSheSayYes>:
c00265ca:	c3                   	ret    
c00265cb:	49                   	dec    ecx
c00265cc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265d0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265d4:	75 20                	jne    c00265f6 <sseDetect.noSSE+0x1>
c00265d6:	4e                   	dec    esi
c00265d7:	79 61                	jns    c002663a <x87Detect+0x14>
c00265d9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265de:	66 90                	xchg   ax,ax

c00265e0 <absolutelyNoChanceInHell>:
c00265e0:	b8 01 00 00 00       	mov    eax,0x1
c00265e5:	0f a2                	cpuid  
c00265e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00265ed:	74 06                	je     c00265f5 <sseDetect.noSSE>
c00265ef:	b8 01 00 00 00       	mov    eax,0x1
c00265f4:	c3                   	ret    

c00265f5 <sseDetect.noSSE>:
c00265f5:	31 c0                	xor    eax,eax
c00265f7:	c3                   	ret    

c00265f8 <sseSave>:
c00265f8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00265fd:	c3                   	ret    

c00265fe <sseLoad>:
c00265fe:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026603:	c3                   	ret    

c0026604 <sseInit>:
c0026604:	e8 43 00 00 00       	call   c002664c <x87Init>
c0026609:	0f 20 e0             	mov    eax,cr4
c002660c:	66 0d 00 06          	or     ax,0x600
c0026610:	0f 22 e0             	mov    cr4,eax
c0026613:	c3                   	ret    

c0026614 <sseClose>:
c0026614:	c3                   	ret    
c0026615:	66 90                	xchg   ax,ax
c0026617:	66 90                	xchg   ax,ax
c0026619:	66 90                	xchg   ax,ax
c002661b:	66 90                	xchg   ax,ax
c002661d:	66 90                	xchg   ax,ax
c002661f:	90                   	nop

c0026620 <value_37F>:
c0026620:	7f 03                	jg     c0026625 <value_37A+0x1>

c0026622 <value_37E>:
c0026622:	7e 03                	jle    c0026627 <x87Detect+0x1>

c0026624 <value_37A>:
c0026624:	7a 03                	jp     c0026629 <x87Detect+0x3>

c0026626 <x87Detect>:
c0026626:	b8 01 00 00 00       	mov    eax,0x1
c002662b:	0f a2                	cpuid  
c002662d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026633:	74 06                	je     c002663b <x87Detect.nox87>
c0026635:	b8 01 00 00 00       	mov    eax,0x1
c002663a:	c3                   	ret    

c002663b <x87Detect.nox87>:
c002663b:	b8 00 00 00 00       	mov    eax,0x0
c0026640:	c3                   	ret    

c0026641 <x87Save>:
c0026641:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026646:	c3                   	ret    

c0026647 <x87Load>:
c0026647:	dd 64 24 08          	frstor [esp+0x8]
c002664b:	c3                   	ret    

c002664c <x87Init>:
c002664c:	9b db e3             	finit  
c002664f:	0f 20 c0             	mov    eax,cr0
c0026652:	66 25 fb ff          	and    ax,0xfffb
c0026656:	66 0d 22 00          	or     ax,0x22
c002665a:	0f 22 c0             	mov    cr0,eax
c002665d:	0f 06                	clts   
c002665f:	d9 2d 24 66 02 c0    	fldcw  WORD PTR ds:0xc0026624
c0026665:	c3                   	ret    

c0026666 <x87Close>:
c0026666:	c3                   	ret    
c0026667:	90                   	nop

c0026668 <__do_global_ctors_aux>:
c0026668:	a1 ac 91 02 c0       	mov    eax,ds:0xc00291ac
c002666d:	83 f8 ff             	cmp    eax,0xffffffff
c0026670:	74 1a                	je     c002668c <__do_global_ctors_aux+0x24>
c0026672:	55                   	push   ebp
c0026673:	89 e5                	mov    ebp,esp
c0026675:	53                   	push   ebx
c0026676:	52                   	push   edx
c0026677:	bb ac 91 02 c0       	mov    ebx,0xc00291ac
c002667c:	ff d0                	call   eax
c002667e:	83 eb 04             	sub    ebx,0x4
c0026681:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026683:	83 f8 ff             	cmp    eax,0xffffffff
c0026686:	75 f4                	jne    c002667c <__do_global_ctors_aux+0x14>
c0026688:	58                   	pop    eax
c0026689:	5b                   	pop    ebx
c002668a:	5d                   	pop    ebp
c002668b:	c3                   	ret    
c002668c:	c3                   	ret    
c002668d:	66 90                	xchg   ax,ax
c002668f:	90                   	nop

c0026690 <__divdi3>:
c0026690:	55                   	push   ebp
c0026691:	57                   	push   edi
c0026692:	56                   	push   esi
c0026693:	53                   	push   ebx
c0026694:	83 ec 1c             	sub    esp,0x1c
c0026697:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002669b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002669f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266ae:	85 db                	test   ebx,ebx
c00266b0:	0f 88 8e 00 00 00    	js     c0026744 <__divdi3+0xb4>
c00266b6:	89 dd                	mov    ebp,ebx
c00266b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266c0:	89 d3                	mov    ebx,edx
c00266c2:	85 d2                	test   edx,edx
c00266c4:	79 0d                	jns    c00266d3 <__divdi3+0x43>
c00266c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266ca:	f7 d8                	neg    eax
c00266cc:	83 d2 00             	adc    edx,0x0
c00266cf:	f7 da                	neg    edx
c00266d1:	89 d3                	mov    ebx,edx
c00266d3:	89 c7                	mov    edi,eax
c00266d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266d8:	85 db                	test   ebx,ebx
c00266da:	75 48                	jne    c0026724 <__divdi3+0x94>
c00266dc:	39 ef                	cmp    edi,ebp
c00266de:	76 24                	jbe    c0026704 <__divdi3+0x74>
c00266e0:	89 ea                	mov    edx,ebp
c00266e2:	f7 f7                	div    edi
c00266e4:	89 c1                	mov    ecx,eax
c00266e6:	31 f6                	xor    esi,esi
c00266e8:	89 c8                	mov    eax,ecx
c00266ea:	89 f2                	mov    edx,esi
c00266ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266f0:	85 c9                	test   ecx,ecx
c00266f2:	74 07                	je     c00266fb <__divdi3+0x6b>
c00266f4:	f7 d8                	neg    eax
c00266f6:	83 d2 00             	adc    edx,0x0
c00266f9:	f7 da                	neg    edx
c00266fb:	83 c4 1c             	add    esp,0x1c
c00266fe:	5b                   	pop    ebx
c00266ff:	5e                   	pop    esi
c0026700:	5f                   	pop    edi
c0026701:	5d                   	pop    ebp
c0026702:	c3                   	ret    
c0026703:	90                   	nop
c0026704:	85 ff                	test   edi,edi
c0026706:	75 0b                	jne    c0026713 <__divdi3+0x83>
c0026708:	b8 01 00 00 00       	mov    eax,0x1
c002670d:	31 d2                	xor    edx,edx
c002670f:	f7 f3                	div    ebx
c0026711:	89 c7                	mov    edi,eax
c0026713:	31 d2                	xor    edx,edx
c0026715:	89 e8                	mov    eax,ebp
c0026717:	f7 f7                	div    edi
c0026719:	89 c6                	mov    esi,eax
c002671b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002671e:	f7 f7                	div    edi
c0026720:	89 c1                	mov    ecx,eax
c0026722:	eb c4                	jmp    c00266e8 <__divdi3+0x58>
c0026724:	39 eb                	cmp    ebx,ebp
c0026726:	77 3c                	ja     c0026764 <__divdi3+0xd4>
c0026728:	0f bd f3             	bsr    esi,ebx
c002672b:	83 f6 1f             	xor    esi,0x1f
c002672e:	75 40                	jne    c0026770 <__divdi3+0xe0>
c0026730:	39 eb                	cmp    ebx,ebp
c0026732:	72 09                	jb     c002673d <__divdi3+0xad>
c0026734:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026737:	0f 87 97 00 00 00    	ja     c00267d4 <__divdi3+0x144>
c002673d:	b9 01 00 00 00       	mov    ecx,0x1
c0026742:	eb a4                	jmp    c00266e8 <__divdi3+0x58>
c0026744:	f7 d9                	neg    ecx
c0026746:	83 d3 00             	adc    ebx,0x0
c0026749:	f7 db                	neg    ebx
c002674b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002674e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026752:	89 dd                	mov    ebp,ebx
c0026754:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002675c:	e9 5f ff ff ff       	jmp    c00266c0 <__divdi3+0x30>
c0026761:	8d 76 00             	lea    esi,[esi+0x0]
c0026764:	31 f6                	xor    esi,esi
c0026766:	31 c9                	xor    ecx,ecx
c0026768:	e9 7b ff ff ff       	jmp    c00266e8 <__divdi3+0x58>
c002676d:	8d 76 00             	lea    esi,[esi+0x0]
c0026770:	b8 20 00 00 00       	mov    eax,0x20
c0026775:	29 f0                	sub    eax,esi
c0026777:	89 f1                	mov    ecx,esi
c0026779:	d3 e3                	shl    ebx,cl
c002677b:	89 fa                	mov    edx,edi
c002677d:	88 c1                	mov    cl,al
c002677f:	d3 ea                	shr    edx,cl
c0026781:	09 da                	or     edx,ebx
c0026783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026787:	89 f1                	mov    ecx,esi
c0026789:	d3 e7                	shl    edi,cl
c002678b:	89 eb                	mov    ebx,ebp
c002678d:	88 c1                	mov    cl,al
c002678f:	d3 eb                	shr    ebx,cl
c0026791:	89 f1                	mov    ecx,esi
c0026793:	d3 e5                	shl    ebp,cl
c0026795:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026798:	88 c1                	mov    cl,al
c002679a:	d3 ea                	shr    edx,cl
c002679c:	09 d5                	or     ebp,edx
c002679e:	89 e8                	mov    eax,ebp
c00267a0:	89 da                	mov    edx,ebx
c00267a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267a6:	89 d3                	mov    ebx,edx
c00267a8:	89 c5                	mov    ebp,eax
c00267aa:	f7 e7                	mul    edi
c00267ac:	39 d3                	cmp    ebx,edx
c00267ae:	72 18                	jb     c00267c8 <__divdi3+0x138>
c00267b0:	74 0a                	je     c00267bc <__divdi3+0x12c>
c00267b2:	89 e9                	mov    ecx,ebp
c00267b4:	31 f6                	xor    esi,esi
c00267b6:	e9 2d ff ff ff       	jmp    c00266e8 <__divdi3+0x58>
c00267bb:	90                   	nop
c00267bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267bf:	89 f1                	mov    ecx,esi
c00267c1:	d3 e7                	shl    edi,cl
c00267c3:	39 c7                	cmp    edi,eax
c00267c5:	73 eb                	jae    c00267b2 <__divdi3+0x122>
c00267c7:	90                   	nop
c00267c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267cb:	31 f6                	xor    esi,esi
c00267cd:	e9 16 ff ff ff       	jmp    c00266e8 <__divdi3+0x58>
c00267d2:	66 90                	xchg   ax,ax
c00267d4:	31 c9                	xor    ecx,ecx
c00267d6:	e9 0d ff ff ff       	jmp    c00266e8 <__divdi3+0x58>
c00267db:	90                   	nop

c00267dc <__moddi3>:
c00267dc:	55                   	push   ebp
c00267dd:	57                   	push   edi
c00267de:	56                   	push   esi
c00267df:	53                   	push   ebx
c00267e0:	83 ec 2c             	sub    esp,0x2c
c00267e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00267e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00267eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00267ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00267f3:	85 db                	test   ebx,ebx
c00267f5:	0f 88 85 00 00 00    	js     c0026880 <__moddi3+0xa4>
c00267fb:	89 de                	mov    esi,ebx
c00267fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026805:	89 d7                	mov    edi,edx
c0026807:	85 d2                	test   edx,edx
c0026809:	79 09                	jns    c0026814 <__moddi3+0x38>
c002680b:	f7 d8                	neg    eax
c002680d:	83 d2 00             	adc    edx,0x0
c0026810:	f7 da                	neg    edx
c0026812:	89 d7                	mov    edi,edx
c0026814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026818:	89 cd                	mov    ebp,ecx
c002681a:	85 ff                	test   edi,edi
c002681c:	75 52                	jne    c0026870 <__moddi3+0x94>
c002681e:	89 c3                	mov    ebx,eax
c0026820:	39 f0                	cmp    eax,esi
c0026822:	76 24                	jbe    c0026848 <__moddi3+0x6c>
c0026824:	89 c8                	mov    eax,ecx
c0026826:	89 f2                	mov    edx,esi
c0026828:	f7 f3                	div    ebx
c002682a:	89 d6                	mov    esi,edx
c002682c:	89 f0                	mov    eax,esi
c002682e:	31 d2                	xor    edx,edx
c0026830:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026834:	85 c9                	test   ecx,ecx
c0026836:	74 07                	je     c002683f <__moddi3+0x63>
c0026838:	f7 d8                	neg    eax
c002683a:	83 d2 00             	adc    edx,0x0
c002683d:	f7 da                	neg    edx
c002683f:	83 c4 2c             	add    esp,0x2c
c0026842:	5b                   	pop    ebx
c0026843:	5e                   	pop    esi
c0026844:	5f                   	pop    edi
c0026845:	5d                   	pop    ebp
c0026846:	c3                   	ret    
c0026847:	90                   	nop
c0026848:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002684c:	85 db                	test   ebx,ebx
c002684e:	75 0d                	jne    c002685d <__moddi3+0x81>
c0026850:	b8 01 00 00 00       	mov    eax,0x1
c0026855:	31 d2                	xor    edx,edx
c0026857:	f7 f7                	div    edi
c0026859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002685d:	89 f0                	mov    eax,esi
c002685f:	31 d2                	xor    edx,edx
c0026861:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026865:	f7 f7                	div    edi
c0026867:	89 e8                	mov    eax,ebp
c0026869:	f7 f7                	div    edi
c002686b:	89 d6                	mov    esi,edx
c002686d:	eb bd                	jmp    c002682c <__moddi3+0x50>
c002686f:	90                   	nop
c0026870:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026874:	39 f7                	cmp    edi,esi
c0026876:	76 20                	jbe    c0026898 <__moddi3+0xbc>
c0026878:	89 c8                	mov    eax,ecx
c002687a:	89 f2                	mov    edx,esi
c002687c:	eb b2                	jmp    c0026830 <__moddi3+0x54>
c002687e:	66 90                	xchg   ax,ax
c0026880:	f7 d9                	neg    ecx
c0026882:	83 d3 00             	adc    ebx,0x0
c0026885:	f7 db                	neg    ebx
c0026887:	89 de                	mov    esi,ebx
c0026889:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026891:	e9 6f ff ff ff       	jmp    c0026805 <__moddi3+0x29>
c0026896:	66 90                	xchg   ax,ax
c0026898:	0f bd c7             	bsr    eax,edi
c002689b:	83 f0 1f             	xor    eax,0x1f
c002689e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268a2:	75 24                	jne    c00268c8 <__moddi3+0xec>
c00268a4:	39 f7                	cmp    edi,esi
c00268a6:	72 06                	jb     c00268ae <__moddi3+0xd2>
c00268a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268ac:	77 0c                	ja     c00268ba <__moddi3+0xde>
c00268ae:	89 e9                	mov    ecx,ebp
c00268b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268b4:	19 fe                	sbb    esi,edi
c00268b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268be:	89 f2                	mov    edx,esi
c00268c0:	e9 6b ff ff ff       	jmp    c0026830 <__moddi3+0x54>
c00268c5:	8d 76 00             	lea    esi,[esi+0x0]
c00268c8:	b8 20 00 00 00       	mov    eax,0x20
c00268cd:	89 c2                	mov    edx,eax
c00268cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268d3:	29 da                	sub    edx,ebx
c00268d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268d9:	88 d9                	mov    cl,bl
c00268db:	d3 e7                	shl    edi,cl
c00268dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268e1:	88 d1                	mov    cl,dl
c00268e3:	d3 e8                	shr    eax,cl
c00268e5:	09 c7                	or     edi,eax
c00268e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00268eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268ef:	89 d8                	mov    eax,ebx
c00268f1:	88 d9                	mov    cl,bl
c00268f3:	d3 e7                	shl    edi,cl
c00268f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268f9:	89 f3                	mov    ebx,esi
c00268fb:	88 d1                	mov    cl,dl
c00268fd:	d3 eb                	shr    ebx,cl
c00268ff:	89 c7                	mov    edi,eax
c0026901:	88 c1                	mov    cl,al
c0026903:	d3 e6                	shl    esi,cl
c0026905:	89 e8                	mov    eax,ebp
c0026907:	88 d1                	mov    cl,dl
c0026909:	d3 e8                	shr    eax,cl
c002690b:	09 f0                	or     eax,esi
c002690d:	89 f9                	mov    ecx,edi
c002690f:	d3 e5                	shl    ebp,cl
c0026911:	89 da                	mov    edx,ebx
c0026913:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026917:	89 d3                	mov    ebx,edx
c0026919:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002691d:	89 c6                	mov    esi,eax
c002691f:	89 d1                	mov    ecx,edx
c0026921:	39 d3                	cmp    ebx,edx
c0026923:	72 27                	jb     c002694c <__moddi3+0x170>
c0026925:	74 21                	je     c0026948 <__moddi3+0x16c>
c0026927:	29 f5                	sub    ebp,esi
c0026929:	19 cb                	sbb    ebx,ecx
c002692b:	89 de                	mov    esi,ebx
c002692d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026931:	d3 e6                	shl    esi,cl
c0026933:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026937:	89 f9                	mov    ecx,edi
c0026939:	d3 ed                	shr    ebp,cl
c002693b:	09 ee                	or     esi,ebp
c002693d:	89 f0                	mov    eax,esi
c002693f:	d3 eb                	shr    ebx,cl
c0026941:	89 da                	mov    edx,ebx
c0026943:	e9 e8 fe ff ff       	jmp    c0026830 <__moddi3+0x54>
c0026948:	39 c5                	cmp    ebp,eax
c002694a:	73 db                	jae    c0026927 <__moddi3+0x14b>
c002694c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026950:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026954:	89 d1                	mov    ecx,edx
c0026956:	89 c6                	mov    esi,eax
c0026958:	eb cd                	jmp    c0026927 <__moddi3+0x14b>
c002695a:	66 90                	xchg   ax,ax

c002695c <__udivdi3>:
c002695c:	55                   	push   ebp
c002695d:	57                   	push   edi
c002695e:	56                   	push   esi
c002695f:	53                   	push   ebx
c0026960:	83 ec 1c             	sub    esp,0x1c
c0026963:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026967:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002696b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002696f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026973:	85 d2                	test   edx,edx
c0026975:	75 41                	jne    c00269b8 <__udivdi3+0x5c>
c0026977:	39 f7                	cmp    edi,esi
c0026979:	76 15                	jbe    c0026990 <__udivdi3+0x34>
c002697b:	89 e8                	mov    eax,ebp
c002697d:	89 f2                	mov    edx,esi
c002697f:	f7 f7                	div    edi
c0026981:	31 db                	xor    ebx,ebx
c0026983:	89 da                	mov    edx,ebx
c0026985:	83 c4 1c             	add    esp,0x1c
c0026988:	5b                   	pop    ebx
c0026989:	5e                   	pop    esi
c002698a:	5f                   	pop    edi
c002698b:	5d                   	pop    ebp
c002698c:	c3                   	ret    
c002698d:	8d 76 00             	lea    esi,[esi+0x0]
c0026990:	89 f9                	mov    ecx,edi
c0026992:	85 ff                	test   edi,edi
c0026994:	75 0b                	jne    c00269a1 <__udivdi3+0x45>
c0026996:	b8 01 00 00 00       	mov    eax,0x1
c002699b:	31 d2                	xor    edx,edx
c002699d:	f7 f7                	div    edi
c002699f:	89 c1                	mov    ecx,eax
c00269a1:	31 d2                	xor    edx,edx
c00269a3:	89 f0                	mov    eax,esi
c00269a5:	f7 f1                	div    ecx
c00269a7:	89 c3                	mov    ebx,eax
c00269a9:	89 e8                	mov    eax,ebp
c00269ab:	f7 f1                	div    ecx
c00269ad:	89 da                	mov    edx,ebx
c00269af:	83 c4 1c             	add    esp,0x1c
c00269b2:	5b                   	pop    ebx
c00269b3:	5e                   	pop    esi
c00269b4:	5f                   	pop    edi
c00269b5:	5d                   	pop    ebp
c00269b6:	c3                   	ret    
c00269b7:	90                   	nop
c00269b8:	39 f2                	cmp    edx,esi
c00269ba:	77 1c                	ja     c00269d8 <__udivdi3+0x7c>
c00269bc:	0f bd da             	bsr    ebx,edx
c00269bf:	83 f3 1f             	xor    ebx,0x1f
c00269c2:	75 24                	jne    c00269e8 <__udivdi3+0x8c>
c00269c4:	39 f2                	cmp    edx,esi
c00269c6:	72 08                	jb     c00269d0 <__udivdi3+0x74>
c00269c8:	39 ef                	cmp    edi,ebp
c00269ca:	0f 87 84 00 00 00    	ja     c0026a54 <__udivdi3+0xf8>
c00269d0:	b8 01 00 00 00       	mov    eax,0x1
c00269d5:	eb ac                	jmp    c0026983 <__udivdi3+0x27>
c00269d7:	90                   	nop
c00269d8:	31 db                	xor    ebx,ebx
c00269da:	31 c0                	xor    eax,eax
c00269dc:	89 da                	mov    edx,ebx
c00269de:	83 c4 1c             	add    esp,0x1c
c00269e1:	5b                   	pop    ebx
c00269e2:	5e                   	pop    esi
c00269e3:	5f                   	pop    edi
c00269e4:	5d                   	pop    ebp
c00269e5:	c3                   	ret    
c00269e6:	66 90                	xchg   ax,ax
c00269e8:	b8 20 00 00 00       	mov    eax,0x20
c00269ed:	29 d8                	sub    eax,ebx
c00269ef:	88 d9                	mov    cl,bl
c00269f1:	d3 e2                	shl    edx,cl
c00269f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00269f7:	89 fa                	mov    edx,edi
c00269f9:	88 c1                	mov    cl,al
c00269fb:	d3 ea                	shr    edx,cl
c00269fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a01:	09 d1                	or     ecx,edx
c0026a03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a07:	88 d9                	mov    cl,bl
c0026a09:	d3 e7                	shl    edi,cl
c0026a0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a0f:	89 f7                	mov    edi,esi
c0026a11:	88 c1                	mov    cl,al
c0026a13:	d3 ef                	shr    edi,cl
c0026a15:	88 d9                	mov    cl,bl
c0026a17:	d3 e6                	shl    esi,cl
c0026a19:	89 ea                	mov    edx,ebp
c0026a1b:	88 c1                	mov    cl,al
c0026a1d:	d3 ea                	shr    edx,cl
c0026a1f:	09 d6                	or     esi,edx
c0026a21:	89 f0                	mov    eax,esi
c0026a23:	89 fa                	mov    edx,edi
c0026a25:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a29:	89 d7                	mov    edi,edx
c0026a2b:	89 c6                	mov    esi,eax
c0026a2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a31:	39 d7                	cmp    edi,edx
c0026a33:	72 13                	jb     c0026a48 <__udivdi3+0xec>
c0026a35:	74 09                	je     c0026a40 <__udivdi3+0xe4>
c0026a37:	89 f0                	mov    eax,esi
c0026a39:	31 db                	xor    ebx,ebx
c0026a3b:	e9 43 ff ff ff       	jmp    c0026983 <__udivdi3+0x27>
c0026a40:	88 d9                	mov    cl,bl
c0026a42:	d3 e5                	shl    ebp,cl
c0026a44:	39 c5                	cmp    ebp,eax
c0026a46:	73 ef                	jae    c0026a37 <__udivdi3+0xdb>
c0026a48:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a4b:	31 db                	xor    ebx,ebx
c0026a4d:	e9 31 ff ff ff       	jmp    c0026983 <__udivdi3+0x27>
c0026a52:	66 90                	xchg   ax,ax
c0026a54:	31 c0                	xor    eax,eax
c0026a56:	e9 28 ff ff ff       	jmp    c0026983 <__udivdi3+0x27>
c0026a5b:	90                   	nop

c0026a5c <__umoddi3>:
c0026a5c:	55                   	push   ebp
c0026a5d:	57                   	push   edi
c0026a5e:	56                   	push   esi
c0026a5f:	53                   	push   ebx
c0026a60:	83 ec 1c             	sub    esp,0x1c
c0026a63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a73:	89 da                	mov    edx,ebx
c0026a75:	85 c0                	test   eax,eax
c0026a77:	75 37                	jne    c0026ab0 <__umoddi3+0x54>
c0026a79:	39 df                	cmp    edi,ebx
c0026a7b:	76 13                	jbe    c0026a90 <__umoddi3+0x34>
c0026a7d:	89 f0                	mov    eax,esi
c0026a7f:	f7 f7                	div    edi
c0026a81:	89 d0                	mov    eax,edx
c0026a83:	31 d2                	xor    edx,edx
c0026a85:	83 c4 1c             	add    esp,0x1c
c0026a88:	5b                   	pop    ebx
c0026a89:	5e                   	pop    esi
c0026a8a:	5f                   	pop    edi
c0026a8b:	5d                   	pop    ebp
c0026a8c:	c3                   	ret    
c0026a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a90:	89 fd                	mov    ebp,edi
c0026a92:	85 ff                	test   edi,edi
c0026a94:	75 0b                	jne    c0026aa1 <__umoddi3+0x45>
c0026a96:	b8 01 00 00 00       	mov    eax,0x1
c0026a9b:	31 d2                	xor    edx,edx
c0026a9d:	f7 f7                	div    edi
c0026a9f:	89 c5                	mov    ebp,eax
c0026aa1:	89 d8                	mov    eax,ebx
c0026aa3:	31 d2                	xor    edx,edx
c0026aa5:	f7 f5                	div    ebp
c0026aa7:	89 f0                	mov    eax,esi
c0026aa9:	f7 f5                	div    ebp
c0026aab:	89 d0                	mov    eax,edx
c0026aad:	eb d4                	jmp    c0026a83 <__umoddi3+0x27>
c0026aaf:	90                   	nop
c0026ab0:	89 f1                	mov    ecx,esi
c0026ab2:	39 d8                	cmp    eax,ebx
c0026ab4:	76 0a                	jbe    c0026ac0 <__umoddi3+0x64>
c0026ab6:	89 f0                	mov    eax,esi
c0026ab8:	83 c4 1c             	add    esp,0x1c
c0026abb:	5b                   	pop    ebx
c0026abc:	5e                   	pop    esi
c0026abd:	5f                   	pop    edi
c0026abe:	5d                   	pop    ebp
c0026abf:	c3                   	ret    
c0026ac0:	0f bd e8             	bsr    ebp,eax
c0026ac3:	83 f5 1f             	xor    ebp,0x1f
c0026ac6:	75 1c                	jne    c0026ae4 <__umoddi3+0x88>
c0026ac8:	39 d8                	cmp    eax,ebx
c0026aca:	72 04                	jb     c0026ad0 <__umoddi3+0x74>
c0026acc:	39 f7                	cmp    edi,esi
c0026ace:	77 08                	ja     c0026ad8 <__umoddi3+0x7c>
c0026ad0:	89 da                	mov    edx,ebx
c0026ad2:	29 fe                	sub    esi,edi
c0026ad4:	19 c2                	sbb    edx,eax
c0026ad6:	89 f1                	mov    ecx,esi
c0026ad8:	89 c8                	mov    eax,ecx
c0026ada:	83 c4 1c             	add    esp,0x1c
c0026add:	5b                   	pop    ebx
c0026ade:	5e                   	pop    esi
c0026adf:	5f                   	pop    edi
c0026ae0:	5d                   	pop    ebp
c0026ae1:	c3                   	ret    
c0026ae2:	66 90                	xchg   ax,ax
c0026ae4:	ba 20 00 00 00       	mov    edx,0x20
c0026ae9:	29 ea                	sub    edx,ebp
c0026aeb:	89 e9                	mov    ecx,ebp
c0026aed:	d3 e0                	shl    eax,cl
c0026aef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026af3:	89 f8                	mov    eax,edi
c0026af5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026af9:	88 d1                	mov    cl,dl
c0026afb:	d3 e8                	shr    eax,cl
c0026afd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b01:	09 c1                	or     ecx,eax
c0026b03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b07:	89 e9                	mov    ecx,ebp
c0026b09:	d3 e7                	shl    edi,cl
c0026b0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b0f:	89 d8                	mov    eax,ebx
c0026b11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b15:	88 d1                	mov    cl,dl
c0026b17:	d3 e8                	shr    eax,cl
c0026b19:	89 c7                	mov    edi,eax
c0026b1b:	89 e9                	mov    ecx,ebp
c0026b1d:	d3 e3                	shl    ebx,cl
c0026b1f:	89 f0                	mov    eax,esi
c0026b21:	88 d1                	mov    cl,dl
c0026b23:	d3 e8                	shr    eax,cl
c0026b25:	09 d8                	or     eax,ebx
c0026b27:	89 e9                	mov    ecx,ebp
c0026b29:	d3 e6                	shl    esi,cl
c0026b2b:	89 f3                	mov    ebx,esi
c0026b2d:	89 fa                	mov    edx,edi
c0026b2f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b33:	89 d1                	mov    ecx,edx
c0026b35:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b39:	89 c6                	mov    esi,eax
c0026b3b:	89 d7                	mov    edi,edx
c0026b3d:	39 d1                	cmp    ecx,edx
c0026b3f:	72 27                	jb     c0026b68 <__umoddi3+0x10c>
c0026b41:	74 21                	je     c0026b64 <__umoddi3+0x108>
c0026b43:	89 ca                	mov    edx,ecx
c0026b45:	29 f3                	sub    ebx,esi
c0026b47:	19 fa                	sbb    edx,edi
c0026b49:	89 d0                	mov    eax,edx
c0026b4b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b4f:	d3 e0                	shl    eax,cl
c0026b51:	89 e9                	mov    ecx,ebp
c0026b53:	d3 eb                	shr    ebx,cl
c0026b55:	09 d8                	or     eax,ebx
c0026b57:	d3 ea                	shr    edx,cl
c0026b59:	83 c4 1c             	add    esp,0x1c
c0026b5c:	5b                   	pop    ebx
c0026b5d:	5e                   	pop    esi
c0026b5e:	5f                   	pop    edi
c0026b5f:	5d                   	pop    ebp
c0026b60:	c3                   	ret    
c0026b61:	8d 76 00             	lea    esi,[esi+0x0]
c0026b64:	39 c3                	cmp    ebx,eax
c0026b66:	73 db                	jae    c0026b43 <__umoddi3+0xe7>
c0026b68:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b6c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b70:	89 d7                	mov    edi,edx
c0026b72:	89 c6                	mov    esi,eax
c0026b74:	eb cd                	jmp    c0026b43 <__umoddi3+0xe7>

c0026b76 <__addsf3>:
c0026b76:	55                   	push   ebp
c0026b77:	89 e5                	mov    ebp,esp
c0026b79:	57                   	push   edi
c0026b7a:	56                   	push   esi
c0026b7b:	53                   	push   ebx
c0026b7c:	83 ec 08             	sub    esp,0x8
c0026b7f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b82:	89 fa                	mov    edx,edi
c0026b84:	89 f8                	mov    eax,edi
c0026b86:	c1 f8 17             	sar    eax,0x17
c0026b89:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b8c:	c1 e2 08             	shl    edx,0x8
c0026b8f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026b95:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b98:	89 de                	mov    esi,ebx
c0026b9a:	c1 fe 17             	sar    esi,0x17
c0026b9d:	c1 e3 08             	shl    ebx,0x8
c0026ba0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ba6:	31 f0                	xor    eax,esi
c0026ba8:	0f 88 3b 01 00 00    	js     c0026ce9 <__addsf3+0x173>
c0026bae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bb1:	29 f1                	sub    ecx,esi
c0026bb3:	85 c9                	test   ecx,ecx
c0026bb5:	7e 54                	jle    c0026c0b <__addsf3+0x95>
c0026bb7:	89 f0                	mov    eax,esi
c0026bb9:	84 c0                	test   al,al
c0026bbb:	75 10                	jne    c0026bcd <__addsf3+0x57>
c0026bbd:	85 db                	test   ebx,ebx
c0026bbf:	0f 84 aa 02 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026bc5:	49                   	dec    ecx
c0026bc6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bc9:	74 38                	je     c0026c03 <__addsf3+0x8d>
c0026bcb:	eb 13                	jmp    c0026be0 <__addsf3+0x6a>
c0026bcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bd0:	f7 d0                	not    eax
c0026bd2:	84 c0                	test   al,al
c0026bd4:	0f 84 95 02 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026bda:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026be0:	83 f9 1f             	cmp    ecx,0x1f
c0026be3:	0f 8f 86 02 00 00    	jg     c0026e6f <__addsf3+0x2f9>
c0026be9:	89 de                	mov    esi,ebx
c0026beb:	d3 ee                	shr    esi,cl
c0026bed:	b8 20 00 00 00       	mov    eax,0x20
c0026bf2:	29 c8                	sub    eax,ecx
c0026bf4:	89 c1                	mov    ecx,eax
c0026bf6:	d3 e3                	shl    ebx,cl
c0026bf8:	31 c0                	xor    eax,eax
c0026bfa:	85 db                	test   ebx,ebx
c0026bfc:	0f 95 c0             	setne  al
c0026bff:	09 f0                	or     eax,esi
c0026c01:	01 d0                	add    eax,edx
c0026c03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c06:	e9 b6 00 00 00       	jmp    c0026cc1 <__addsf3+0x14b>
c0026c0b:	74 5c                	je     c0026c69 <__addsf3+0xf3>
c0026c0d:	89 f1                	mov    ecx,esi
c0026c0f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c12:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c15:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c19:	75 14                	jne    c0026c2f <__addsf3+0xb9>
c0026c1b:	85 d2                	test   edx,edx
c0026c1d:	0f 84 4c 02 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026c23:	49                   	dec    ecx
c0026c24:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c27:	0f 84 94 00 00 00    	je     c0026cc1 <__addsf3+0x14b>
c0026c2d:	eb 12                	jmp    c0026c41 <__addsf3+0xcb>
c0026c2f:	89 f0                	mov    eax,esi
c0026c31:	f7 d0                	not    eax
c0026c33:	84 c0                	test   al,al
c0026c35:	0f 84 34 02 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026c3b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c41:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c44:	83 f9 1f             	cmp    ecx,0x1f
c0026c47:	0f 8f 22 02 00 00    	jg     c0026e6f <__addsf3+0x2f9>
c0026c4d:	89 d7                	mov    edi,edx
c0026c4f:	d3 ef                	shr    edi,cl
c0026c51:	b8 20 00 00 00       	mov    eax,0x20
c0026c56:	29 c8                	sub    eax,ecx
c0026c58:	89 c1                	mov    ecx,eax
c0026c5a:	d3 e2                	shl    edx,cl
c0026c5c:	31 c0                	xor    eax,eax
c0026c5e:	85 d2                	test   edx,edx
c0026c60:	0f 95 c0             	setne  al
c0026c63:	09 f8                	or     eax,edi
c0026c65:	01 d8                	add    eax,ebx
c0026c67:	eb 58                	jmp    c0026cc1 <__addsf3+0x14b>
c0026c69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c6c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c6f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c75:	75 32                	jne    c0026ca9 <__addsf3+0x133>
c0026c77:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c7b:	75 1f                	jne    c0026c9c <__addsf3+0x126>
c0026c7d:	85 d2                	test   edx,edx
c0026c7f:	0f 84 e0 01 00 00    	je     c0026e65 <__addsf3+0x2ef>
c0026c85:	85 db                	test   ebx,ebx
c0026c87:	0f 84 e2 01 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026c8d:	89 d0                	mov    eax,edx
c0026c8f:	01 d8                	add    eax,ebx
c0026c91:	0f 89 a9 01 00 00    	jns    c0026e40 <__addsf3+0x2ca>
c0026c97:	e9 9d 01 00 00       	jmp    c0026e39 <__addsf3+0x2c3>
c0026c9c:	85 d2                	test   edx,edx
c0026c9e:	0f 85 cb 01 00 00    	jne    c0026e6f <__addsf3+0x2f9>
c0026ca4:	e9 bc 01 00 00       	jmp    c0026e65 <__addsf3+0x2ef>
c0026ca9:	31 c0                	xor    eax,eax
c0026cab:	89 f1                	mov    ecx,esi
c0026cad:	f7 d1                	not    ecx
c0026caf:	84 c9                	test   cl,cl
c0026cb1:	0f 84 90 01 00 00    	je     c0026e47 <__addsf3+0x2d1>
c0026cb7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cba:	d1 e8                	shr    eax,1
c0026cbc:	e9 86 01 00 00       	jmp    c0026e47 <__addsf3+0x2d1>
c0026cc1:	85 c0                	test   eax,eax
c0026cc3:	0f 89 7e 01 00 00    	jns    c0026e47 <__addsf3+0x2d1>
c0026cc9:	46                   	inc    esi
c0026cca:	89 f2                	mov    edx,esi
c0026ccc:	f7 d2                	not    edx
c0026cce:	84 d2                	test   dl,dl
c0026cd0:	0f 84 6f 01 00 00    	je     c0026e45 <__addsf3+0x2cf>
c0026cd6:	89 c2                	mov    edx,eax
c0026cd8:	83 e2 01             	and    edx,0x1
c0026cdb:	d1 e8                	shr    eax,1
c0026cdd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026ce2:	09 d0                	or     eax,edx
c0026ce4:	e9 5e 01 00 00       	jmp    c0026e47 <__addsf3+0x2d1>
c0026ce9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ced:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026cf0:	89 f0                	mov    eax,esi
c0026cf2:	0f b6 c0             	movzx  eax,al
c0026cf5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026cf8:	29 c1                	sub    ecx,eax
c0026cfa:	85 c9                	test   ecx,ecx
c0026cfc:	7e 55                	jle    c0026d53 <__addsf3+0x1dd>
c0026cfe:	85 c0                	test   eax,eax
c0026d00:	75 11                	jne    c0026d13 <__addsf3+0x19d>
c0026d02:	85 db                	test   ebx,ebx
c0026d04:	0f 84 65 01 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026d0a:	49                   	dec    ecx
c0026d0b:	75 19                	jne    c0026d26 <__addsf3+0x1b0>
c0026d0d:	89 d0                	mov    eax,edx
c0026d0f:	29 d8                	sub    eax,ebx
c0026d11:	eb 38                	jmp    c0026d4b <__addsf3+0x1d5>
c0026d13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d16:	f7 d0                	not    eax
c0026d18:	84 c0                	test   al,al
c0026d1a:	0f 84 4f 01 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026d20:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d26:	83 f9 1f             	cmp    ecx,0x1f
c0026d29:	0f 8f 40 01 00 00    	jg     c0026e6f <__addsf3+0x2f9>
c0026d2f:	89 de                	mov    esi,ebx
c0026d31:	d3 ee                	shr    esi,cl
c0026d33:	b8 20 00 00 00       	mov    eax,0x20
c0026d38:	29 c8                	sub    eax,ecx
c0026d3a:	89 c1                	mov    ecx,eax
c0026d3c:	d3 e3                	shl    ebx,cl
c0026d3e:	31 c0                	xor    eax,eax
c0026d40:	85 db                	test   ebx,ebx
c0026d42:	0f 95 c0             	setne  al
c0026d45:	09 f0                	or     eax,esi
c0026d47:	29 c2                	sub    edx,eax
c0026d49:	89 d0                	mov    eax,edx
c0026d4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d4e:	e9 af 00 00 00       	jmp    c0026e02 <__addsf3+0x28c>
c0026d53:	74 5c                	je     c0026db1 <__addsf3+0x23b>
c0026d55:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d58:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d5b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d5f:	75 14                	jne    c0026d75 <__addsf3+0x1ff>
c0026d61:	85 d2                	test   edx,edx
c0026d63:	0f 84 06 01 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026d69:	48                   	dec    eax
c0026d6a:	75 1b                	jne    c0026d87 <__addsf3+0x211>
c0026d6c:	89 d8                	mov    eax,ebx
c0026d6e:	29 d0                	sub    eax,edx
c0026d70:	e9 8d 00 00 00       	jmp    c0026e02 <__addsf3+0x28c>
c0026d75:	89 f1                	mov    ecx,esi
c0026d77:	f7 d1                	not    ecx
c0026d79:	84 c9                	test   cl,cl
c0026d7b:	0f 84 ee 00 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026d81:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d87:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d8a:	83 f8 1f             	cmp    eax,0x1f
c0026d8d:	0f 8f dc 00 00 00    	jg     c0026e6f <__addsf3+0x2f9>
c0026d93:	89 d7                	mov    edi,edx
c0026d95:	88 c1                	mov    cl,al
c0026d97:	d3 ef                	shr    edi,cl
c0026d99:	b9 20 00 00 00       	mov    ecx,0x20
c0026d9e:	29 c1                	sub    ecx,eax
c0026da0:	d3 e2                	shl    edx,cl
c0026da2:	31 c0                	xor    eax,eax
c0026da4:	85 d2                	test   edx,edx
c0026da6:	0f 95 c0             	setne  al
c0026da9:	09 f8                	or     eax,edi
c0026dab:	29 c3                	sub    ebx,eax
c0026dad:	89 d8                	mov    eax,ebx
c0026daf:	eb 51                	jmp    c0026e02 <__addsf3+0x28c>
c0026db1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026db4:	40                   	inc    eax
c0026db5:	a8 fe                	test   al,0xfe
c0026db7:	75 3d                	jne    c0026df6 <__addsf3+0x280>
c0026db9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dbd:	0f 85 a7 00 00 00    	jne    c0026e6a <__addsf3+0x2f4>
c0026dc3:	85 d2                	test   edx,edx
c0026dc5:	75 12                	jne    c0026dd9 <__addsf3+0x263>
c0026dc7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dca:	85 db                	test   ebx,ebx
c0026dcc:	0f 85 9d 00 00 00    	jne    c0026e6f <__addsf3+0x2f9>
c0026dd2:	31 ff                	xor    edi,edi
c0026dd4:	e9 96 00 00 00       	jmp    c0026e6f <__addsf3+0x2f9>
c0026dd9:	85 db                	test   ebx,ebx
c0026ddb:	0f 84 8e 00 00 00    	je     c0026e6f <__addsf3+0x2f9>
c0026de1:	89 d0                	mov    eax,edx
c0026de3:	29 d8                	sub    eax,ebx
c0026de5:	79 06                	jns    c0026ded <__addsf3+0x277>
c0026de7:	89 d8                	mov    eax,ebx
c0026de9:	29 d0                	sub    eax,edx
c0026deb:	eb 5a                	jmp    c0026e47 <__addsf3+0x2d1>
c0026ded:	bf 00 00 00 00       	mov    edi,0x0
c0026df2:	74 7b                	je     c0026e6f <__addsf3+0x2f9>
c0026df4:	eb 4a                	jmp    c0026e40 <__addsf3+0x2ca>
c0026df6:	89 d0                	mov    eax,edx
c0026df8:	29 d8                	sub    eax,ebx
c0026dfa:	79 12                	jns    c0026e0e <__addsf3+0x298>
c0026dfc:	89 d8                	mov    eax,ebx
c0026dfe:	29 d0                	sub    eax,edx
c0026e00:	eb 09                	jmp    c0026e0b <__addsf3+0x295>
c0026e02:	85 c0                	test   eax,eax
c0026e04:	79 41                	jns    c0026e47 <__addsf3+0x2d1>
c0026e06:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e0b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e0e:	31 f6                	xor    esi,esi
c0026e10:	85 c0                	test   eax,eax
c0026e12:	74 33                	je     c0026e47 <__addsf3+0x2d1>
c0026e14:	0f bd c8             	bsr    ecx,eax
c0026e17:	83 f1 1f             	xor    ecx,0x1f
c0026e1a:	d3 e0                	shl    eax,cl
c0026e1c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e20:	39 ca                	cmp    edx,ecx
c0026e22:	7f 10                	jg     c0026e34 <__addsf3+0x2be>
c0026e24:	29 d1                	sub    ecx,edx
c0026e26:	41                   	inc    ecx
c0026e27:	d3 e8                	shr    eax,cl
c0026e29:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e2c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e32:	eb 13                	jmp    c0026e47 <__addsf3+0x2d1>
c0026e34:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e37:	29 ce                	sub    esi,ecx
c0026e39:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e3e:	eb 07                	jmp    c0026e47 <__addsf3+0x2d1>
c0026e40:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e43:	eb 02                	jmp    c0026e47 <__addsf3+0x2d1>
c0026e45:	31 c0                	xor    eax,eax
c0026e47:	89 c2                	mov    edx,eax
c0026e49:	c1 ea 08             	shr    edx,0x8
c0026e4c:	a8 7f                	test   al,0x7f
c0026e4e:	0f 95 c1             	setne  cl
c0026e51:	09 d1                	or     ecx,edx
c0026e53:	83 e1 01             	and    ecx,0x1
c0026e56:	c1 e8 07             	shr    eax,0x7
c0026e59:	21 c8                	and    eax,ecx
c0026e5b:	c1 e6 17             	shl    esi,0x17
c0026e5e:	09 d6                	or     esi,edx
c0026e60:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e63:	eb 0a                	jmp    c0026e6f <__addsf3+0x2f9>
c0026e65:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e68:	eb 05                	jmp    c0026e6f <__addsf3+0x2f9>
c0026e6a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e6f:	89 f8                	mov    eax,edi
c0026e71:	5a                   	pop    edx
c0026e72:	59                   	pop    ecx
c0026e73:	5b                   	pop    ebx
c0026e74:	5e                   	pop    esi
c0026e75:	5f                   	pop    edi
c0026e76:	5d                   	pop    ebp
c0026e77:	c3                   	ret    

c0026e78 <__subsf3>:
c0026e78:	55                   	push   ebp
c0026e79:	89 e5                	mov    ebp,esp
c0026e7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e7e:	05 00 00 00 80       	add    eax,0x80000000
c0026e83:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e86:	5d                   	pop    ebp
c0026e87:	e9 ea fc ff ff       	jmp    c0026b76 <__addsf3>

c0026e8c <__negsf2>:
c0026e8c:	55                   	push   ebp
c0026e8d:	89 e5                	mov    ebp,esp
c0026e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e92:	05 00 00 00 80       	add    eax,0x80000000
c0026e97:	5d                   	pop    ebp
c0026e98:	c3                   	ret    

c0026e99 <__mulsf3>:
c0026e99:	55                   	push   ebp
c0026e9a:	89 e5                	mov    ebp,esp
c0026e9c:	57                   	push   edi
c0026e9d:	56                   	push   esi
c0026e9e:	53                   	push   ebx
c0026e9f:	83 ec 1c             	sub    esp,0x1c
c0026ea2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ea5:	89 f0                	mov    eax,esi
c0026ea7:	89 f1                	mov    ecx,esi
c0026ea9:	c1 f9 17             	sar    ecx,0x17
c0026eac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eaf:	c1 e0 08             	shl    eax,0x8
c0026eb2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026eb7:	89 c1                	mov    ecx,eax
c0026eb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ebc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ebf:	89 c7                	mov    edi,eax
c0026ec1:	c1 ff 17             	sar    edi,0x17
c0026ec4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ec8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026ecb:	89 f8                	mov    eax,edi
c0026ecd:	0f b6 c0             	movzx  eax,al
c0026ed0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ed3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ed7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026eda:	42                   	inc    edx
c0026edb:	80 e2 fe             	and    dl,0xfe
c0026ede:	75 7b                	jne    c0026f5b <__mulsf3+0xc2>
c0026ee0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ee4:	74 54                	je     c0026f3a <__mulsf3+0xa1>
c0026ee6:	85 c9                	test   ecx,ecx
c0026ee8:	0f 85 64 01 00 00    	jne    c0027052 <__mulsf3+0x1b9>
c0026eee:	8d 57 01             	lea    edx,[edi+0x1]
c0026ef1:	80 e2 fe             	and    dl,0xfe
c0026ef4:	75 1f                	jne    c0026f15 <__mulsf3+0x7c>
c0026ef6:	85 c0                	test   eax,eax
c0026ef8:	b8 00 00 00 00       	mov    eax,0x0
c0026efd:	74 29                	je     c0026f28 <__mulsf3+0x8f>
c0026eff:	53                   	push   ebx
c0026f00:	53                   	push   ebx
c0026f01:	50                   	push   eax
c0026f02:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f05:	e8 96 05 00 00       	call   c00274a0 <__nesf2>
c0026f0a:	83 c4 10             	add    esp,0x10
c0026f0d:	85 c0                	test   eax,eax
c0026f0f:	0f 85 3a 01 00 00    	jne    c002704f <__mulsf3+0x1b6>
c0026f15:	85 ff                	test   edi,edi
c0026f17:	0f 89 35 01 00 00    	jns    c0027052 <__mulsf3+0x1b9>
c0026f1d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f23:	e9 2a 01 00 00       	jmp    c0027052 <__mulsf3+0x1b9>
c0026f28:	51                   	push   ecx
c0026f29:	51                   	push   ecx
c0026f2a:	50                   	push   eax
c0026f2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f2e:	e8 6d 05 00 00       	call   c00274a0 <__nesf2>
c0026f33:	83 c4 10             	add    esp,0x10
c0026f36:	85 c0                	test   eax,eax
c0026f38:	eb 15                	jmp    c0026f4f <__mulsf3+0xb6>
c0026f3a:	85 c9                	test   ecx,ecx
c0026f3c:	74 0b                	je     c0026f49 <__mulsf3+0xb0>
c0026f3e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f41:	01 c9                	add    ecx,ecx
c0026f43:	78 16                	js     c0026f5b <__mulsf3+0xc2>
c0026f45:	89 d3                	mov    ebx,edx
c0026f47:	eb f5                	jmp    c0026f3e <__mulsf3+0xa5>
c0026f49:	89 f8                	mov    eax,edi
c0026f4b:	f7 d0                	not    eax
c0026f4d:	84 c0                	test   al,al
c0026f4f:	75 c4                	jne    c0026f15 <__mulsf3+0x7c>
c0026f51:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f56:	e9 f7 00 00 00       	jmp    c0027052 <__mulsf3+0x1b9>
c0026f5b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f5e:	c1 e6 08             	shl    esi,0x8
c0026f61:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f67:	8d 57 01             	lea    edx,[edi+0x1]
c0026f6a:	80 e2 fe             	and    dl,0xfe
c0026f6d:	75 63                	jne    c0026fd2 <__mulsf3+0x139>
c0026f6f:	85 c0                	test   eax,eax
c0026f71:	74 2f                	je     c0026fa2 <__mulsf3+0x109>
c0026f73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f77:	0f 89 d2 00 00 00    	jns    c002704f <__mulsf3+0x1b6>
c0026f7d:	52                   	push   edx
c0026f7e:	52                   	push   edx
c0026f7f:	6a 00                	push   0x0
c0026f81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f84:	e8 dc 04 00 00       	call   c0027465 <__eqsf2>
c0026f89:	83 c4 10             	add    esp,0x10
c0026f8c:	85 c0                	test   eax,eax
c0026f8e:	0f 85 bb 00 00 00    	jne    c002704f <__mulsf3+0x1b6>
c0026f94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f97:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026f9d:	e9 b0 00 00 00       	jmp    c0027052 <__mulsf3+0x1b9>
c0026fa2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fa5:	50                   	push   eax
c0026fa6:	50                   	push   eax
c0026fa7:	6a 00                	push   0x0
c0026fa9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fac:	e8 b4 04 00 00       	call   c0027465 <__eqsf2>
c0026fb1:	83 c4 10             	add    esp,0x10
c0026fb4:	85 c0                	test   eax,eax
c0026fb6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fb9:	75 0c                	jne    c0026fc7 <__mulsf3+0x12e>
c0026fbb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fbf:	0f 89 8a 00 00 00    	jns    c002704f <__mulsf3+0x1b6>
c0026fc5:	eb cd                	jmp    c0026f94 <__mulsf3+0xfb>
c0026fc7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026fca:	01 f6                	add    esi,esi
c0026fcc:	78 04                	js     c0026fd2 <__mulsf3+0x139>
c0026fce:	89 c3                	mov    ebx,eax
c0026fd0:	eb f5                	jmp    c0026fc7 <__mulsf3+0x12e>
c0026fd2:	89 c8                	mov    eax,ecx
c0026fd4:	0d 00 00 00 80       	or     eax,0x80000000
c0026fd9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fdf:	f7 e6                	mul    esi
c0026fe1:	85 c0                	test   eax,eax
c0026fe3:	0f 95 c0             	setne  al
c0026fe6:	0f b6 c0             	movzx  eax,al
c0026fe9:	09 c2                	or     edx,eax
c0026feb:	78 03                	js     c0026ff0 <__mulsf3+0x157>
c0026fed:	01 d2                	add    edx,edx
c0026fef:	4b                   	dec    ebx
c0026ff0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026ff6:	7f 22                	jg     c002701a <__mulsf3+0x181>
c0026ff8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ffe:	85 db                	test   ebx,ebx
c0027000:	7f 23                	jg     c0027025 <__mulsf3+0x18c>
c0027002:	83 fb e9             	cmp    ebx,0xffffffe9
c0027005:	7c 1a                	jl     c0027021 <__mulsf3+0x188>
c0027007:	81 ca 00 00 00 80    	or     edx,0x80000000
c002700d:	b9 01 00 00 00       	mov    ecx,0x1
c0027012:	29 d9                	sub    ecx,ebx
c0027014:	d3 ea                	shr    edx,cl
c0027016:	31 db                	xor    ebx,ebx
c0027018:	eb 0b                	jmp    c0027025 <__mulsf3+0x18c>
c002701a:	bb ff 00 00 00       	mov    ebx,0xff
c002701f:	eb 02                	jmp    c0027023 <__mulsf3+0x18a>
c0027021:	31 db                	xor    ebx,ebx
c0027023:	31 d2                	xor    edx,edx
c0027025:	89 d0                	mov    eax,edx
c0027027:	c1 e8 08             	shr    eax,0x8
c002702a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002702d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027033:	09 fb                	or     ebx,edi
c0027035:	c1 e3 17             	shl    ebx,0x17
c0027038:	09 c3                	or     ebx,eax
c002703a:	f6 c2 7f             	test   dl,0x7f
c002703d:	0f 95 c1             	setne  cl
c0027040:	09 c8                	or     eax,ecx
c0027042:	83 e0 01             	and    eax,0x1
c0027045:	c1 ea 07             	shr    edx,0x7
c0027048:	21 c2                	and    edx,eax
c002704a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002704d:	eb 03                	jmp    c0027052 <__mulsf3+0x1b9>
c002704f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027052:	89 f0                	mov    eax,esi
c0027054:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027057:	5b                   	pop    ebx
c0027058:	5e                   	pop    esi
c0027059:	5f                   	pop    edi
c002705a:	5d                   	pop    ebp
c002705b:	c3                   	ret    

c002705c <__divsf3>:
c002705c:	55                   	push   ebp
c002705d:	89 e5                	mov    ebp,esp
c002705f:	57                   	push   edi
c0027060:	56                   	push   esi
c0027061:	53                   	push   ebx
c0027062:	83 ec 1c             	sub    esp,0x1c
c0027065:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027068:	89 d8                	mov    eax,ebx
c002706a:	89 d9                	mov    ecx,ebx
c002706c:	c1 f9 17             	sar    ecx,0x17
c002706f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027072:	c1 e0 08             	shl    eax,0x8
c0027075:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002707a:	89 c1                	mov    ecx,eax
c002707c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002707f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027082:	89 c7                	mov    edi,eax
c0027084:	c1 ff 17             	sar    edi,0x17
c0027087:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002708b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002708e:	89 f8                	mov    eax,edi
c0027090:	0f b6 c0             	movzx  eax,al
c0027093:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027096:	29 c6                	sub    esi,eax
c0027098:	83 c6 7f             	add    esi,0x7f
c002709b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002709e:	42                   	inc    edx
c002709f:	80 e2 fe             	and    dl,0xfe
c00270a2:	0f 85 9c 00 00 00    	jne    c0027144 <__divsf3+0xe8>
c00270a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270ac:	74 33                	je     c00270e1 <__divsf3+0x85>
c00270ae:	85 c9                	test   ecx,ecx
c00270b0:	0f 85 c7 01 00 00    	jne    c002727d <__divsf3+0x221>
c00270b6:	8d 57 01             	lea    edx,[edi+0x1]
c00270b9:	80 e2 fe             	and    dl,0xfe
c00270bc:	75 2f                	jne    c00270ed <__divsf3+0x91>
c00270be:	85 c0                	test   eax,eax
c00270c0:	74 2b                	je     c00270ed <__divsf3+0x91>
c00270c2:	51                   	push   ecx
c00270c3:	51                   	push   ecx
c00270c4:	6a 00                	push   0x0
c00270c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c9:	e8 d2 03 00 00       	call   c00274a0 <__nesf2>
c00270ce:	83 c4 10             	add    esp,0x10
c00270d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270d4:	85 c0                	test   eax,eax
c00270d6:	0f 85 a1 01 00 00    	jne    c002727d <__divsf3+0x221>
c00270dc:	e9 92 01 00 00       	jmp    c0027273 <__divsf3+0x217>
c00270e1:	85 c9                	test   ecx,ecx
c00270e3:	75 1b                	jne    c0027100 <__divsf3+0xa4>
c00270e5:	8d 57 01             	lea    edx,[edi+0x1]
c00270e8:	80 e2 fe             	and    dl,0xfe
c00270eb:	74 1e                	je     c002710b <__divsf3+0xaf>
c00270ed:	85 ff                	test   edi,edi
c00270ef:	0f 89 88 01 00 00    	jns    c002727d <__divsf3+0x221>
c00270f5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00270fb:	e9 7d 01 00 00       	jmp    c002727d <__divsf3+0x221>
c0027100:	8d 56 ff             	lea    edx,[esi-0x1]
c0027103:	01 c9                	add    ecx,ecx
c0027105:	78 3d                	js     c0027144 <__divsf3+0xe8>
c0027107:	89 d6                	mov    esi,edx
c0027109:	eb f5                	jmp    c0027100 <__divsf3+0xa4>
c002710b:	85 c0                	test   eax,eax
c002710d:	b8 00 00 00 00       	mov    eax,0x0
c0027112:	74 18                	je     c002712c <__divsf3+0xd0>
c0027114:	52                   	push   edx
c0027115:	52                   	push   edx
c0027116:	50                   	push   eax
c0027117:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002711a:	e8 81 03 00 00       	call   c00274a0 <__nesf2>
c002711f:	83 c4 10             	add    esp,0x10
c0027122:	85 c0                	test   eax,eax
c0027124:	0f 85 50 01 00 00    	jne    c002727a <__divsf3+0x21e>
c002712a:	eb c1                	jmp    c00270ed <__divsf3+0x91>
c002712c:	56                   	push   esi
c002712d:	56                   	push   esi
c002712e:	50                   	push   eax
c002712f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027132:	e8 69 03 00 00       	call   c00274a0 <__nesf2>
c0027137:	83 c4 10             	add    esp,0x10
c002713a:	85 c0                	test   eax,eax
c002713c:	0f 84 31 01 00 00    	je     c0027273 <__divsf3+0x217>
c0027142:	eb a9                	jmp    c00270ed <__divsf3+0x91>
c0027144:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027147:	c1 e3 08             	shl    ebx,0x8
c002714a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027150:	8d 57 01             	lea    edx,[edi+0x1]
c0027153:	80 e2 fe             	and    dl,0xfe
c0027156:	75 71                	jne    c00271c9 <__divsf3+0x16d>
c0027158:	85 c0                	test   eax,eax
c002715a:	ba 00 00 00 00       	mov    edx,0x0
c002715f:	74 2f                	je     c0027190 <__divsf3+0x134>
c0027161:	51                   	push   ecx
c0027162:	51                   	push   ecx
c0027163:	52                   	push   edx
c0027164:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027167:	e8 f9 02 00 00       	call   c0027465 <__eqsf2>
c002716c:	83 c4 10             	add    esp,0x10
c002716f:	85 c0                	test   eax,eax
c0027171:	0f 85 03 01 00 00    	jne    c002727a <__divsf3+0x21e>
c0027177:	31 d2                	xor    edx,edx
c0027179:	89 d3                	mov    ebx,edx
c002717b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002717e:	31 f8                	xor    eax,edi
c0027180:	0f 89 f7 00 00 00    	jns    c002727d <__divsf3+0x221>
c0027186:	bb 00 00 00 80       	mov    ebx,0x80000000
c002718b:	e9 ed 00 00 00       	jmp    c002727d <__divsf3+0x221>
c0027190:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027193:	50                   	push   eax
c0027194:	50                   	push   eax
c0027195:	52                   	push   edx
c0027196:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027199:	e8 c7 02 00 00       	call   c0027465 <__eqsf2>
c002719e:	83 c4 10             	add    esp,0x10
c00271a1:	85 c0                	test   eax,eax
c00271a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271a6:	75 16                	jne    c00271be <__divsf3+0x162>
c00271a8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271ab:	31 fb                	xor    ebx,edi
c00271ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271b3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271b9:	e9 bf 00 00 00       	jmp    c002727d <__divsf3+0x221>
c00271be:	8d 46 01             	lea    eax,[esi+0x1]
c00271c1:	01 db                	add    ebx,ebx
c00271c3:	78 04                	js     c00271c9 <__divsf3+0x16d>
c00271c5:	89 c6                	mov    esi,eax
c00271c7:	eb f5                	jmp    c00271be <__divsf3+0x162>
c00271c9:	89 c8                	mov    eax,ecx
c00271cb:	0d 00 00 00 80       	or     eax,0x80000000
c00271d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271d6:	31 d2                	xor    edx,edx
c00271d8:	39 d8                	cmp    eax,ebx
c00271da:	72 07                	jb     c00271e3 <__divsf3+0x187>
c00271dc:	29 d8                	sub    eax,ebx
c00271de:	ba 01 00 00 00       	mov    edx,0x1
c00271e3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00271ea:	01 d2                	add    edx,edx
c00271ec:	89 c1                	mov    ecx,eax
c00271ee:	01 c0                	add    eax,eax
c00271f0:	85 c9                	test   ecx,ecx
c00271f2:	78 04                	js     c00271f8 <__divsf3+0x19c>
c00271f4:	39 c3                	cmp    ebx,eax
c00271f6:	77 05                	ja     c00271fd <__divsf3+0x1a1>
c00271f8:	29 d8                	sub    eax,ebx
c00271fa:	83 ca 01             	or     edx,0x1
c00271fd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027200:	75 e8                	jne    c00271ea <__divsf3+0x18e>
c0027202:	85 c0                	test   eax,eax
c0027204:	0f 95 c0             	setne  al
c0027207:	0f b6 c0             	movzx  eax,al
c002720a:	c1 e2 06             	shl    edx,0x6
c002720d:	09 c2                	or     edx,eax
c002720f:	78 03                	js     c0027214 <__divsf3+0x1b8>
c0027211:	01 d2                	add    edx,edx
c0027213:	4e                   	dec    esi
c0027214:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002721a:	7f 22                	jg     c002723e <__divsf3+0x1e2>
c002721c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027222:	85 f6                	test   esi,esi
c0027224:	7f 23                	jg     c0027249 <__divsf3+0x1ed>
c0027226:	83 fe e9             	cmp    esi,0xffffffe9
c0027229:	7c 1a                	jl     c0027245 <__divsf3+0x1e9>
c002722b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027231:	b9 01 00 00 00       	mov    ecx,0x1
c0027236:	29 f1                	sub    ecx,esi
c0027238:	d3 ea                	shr    edx,cl
c002723a:	31 f6                	xor    esi,esi
c002723c:	eb 0b                	jmp    c0027249 <__divsf3+0x1ed>
c002723e:	be ff 00 00 00       	mov    esi,0xff
c0027243:	eb 02                	jmp    c0027247 <__divsf3+0x1eb>
c0027245:	31 f6                	xor    esi,esi
c0027247:	31 d2                	xor    edx,edx
c0027249:	89 d0                	mov    eax,edx
c002724b:	c1 e8 08             	shr    eax,0x8
c002724e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027251:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027257:	09 fe                	or     esi,edi
c0027259:	c1 e6 17             	shl    esi,0x17
c002725c:	09 c6                	or     esi,eax
c002725e:	f6 c2 7f             	test   dl,0x7f
c0027261:	0f 95 c1             	setne  cl
c0027264:	09 c8                	or     eax,ecx
c0027266:	83 e0 01             	and    eax,0x1
c0027269:	c1 ea 07             	shr    edx,0x7
c002726c:	21 c2                	and    edx,eax
c002726e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027271:	eb 0a                	jmp    c002727d <__divsf3+0x221>
c0027273:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027278:	eb 03                	jmp    c002727d <__divsf3+0x221>
c002727a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002727d:	89 d8                	mov    eax,ebx
c002727f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027282:	5b                   	pop    ebx
c0027283:	5e                   	pop    esi
c0027284:	5f                   	pop    edi
c0027285:	5d                   	pop    ebp
c0027286:	c3                   	ret    

c0027287 <__floatsisf>:
c0027287:	55                   	push   ebp
c0027288:	89 e5                	mov    ebp,esp
c002728a:	53                   	push   ebx
c002728b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002728e:	85 d2                	test   edx,edx
c0027290:	7e 2b                	jle    c00272bd <__floatsisf+0x36>
c0027292:	0f bd ca             	bsr    ecx,edx
c0027295:	83 f1 1f             	xor    ecx,0x1f
c0027298:	d3 e2                	shl    edx,cl
c002729a:	89 d0                	mov    eax,edx
c002729c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272a1:	89 c3                	mov    ebx,eax
c00272a3:	c1 eb 08             	shr    ebx,0x8
c00272a6:	80 e2 7f             	and    dl,0x7f
c00272a9:	0f 95 c2             	setne  dl
c00272ac:	09 da                	or     edx,ebx
c00272ae:	83 e2 01             	and    edx,0x1
c00272b1:	c1 e8 07             	shr    eax,0x7
c00272b4:	21 c2                	and    edx,eax
c00272b6:	b8 9e 00 00 00       	mov    eax,0x9e
c00272bb:	eb 32                	jmp    c00272ef <__floatsisf+0x68>
c00272bd:	b8 00 00 00 00       	mov    eax,0x0
c00272c2:	74 34                	je     c00272f8 <__floatsisf+0x71>
c00272c4:	f7 da                	neg    edx
c00272c6:	0f bd ca             	bsr    ecx,edx
c00272c9:	83 f1 1f             	xor    ecx,0x1f
c00272cc:	d3 e2                	shl    edx,cl
c00272ce:	89 d0                	mov    eax,edx
c00272d0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272d5:	89 c3                	mov    ebx,eax
c00272d7:	c1 eb 08             	shr    ebx,0x8
c00272da:	80 e2 7f             	and    dl,0x7f
c00272dd:	0f 95 c2             	setne  dl
c00272e0:	09 da                	or     edx,ebx
c00272e2:	83 e2 01             	and    edx,0x1
c00272e5:	c1 e8 07             	shr    eax,0x7
c00272e8:	21 c2                	and    edx,eax
c00272ea:	b8 9e 01 00 00       	mov    eax,0x19e
c00272ef:	29 c8                	sub    eax,ecx
c00272f1:	c1 e0 17             	shl    eax,0x17
c00272f4:	09 d8                	or     eax,ebx
c00272f6:	01 d0                	add    eax,edx
c00272f8:	5b                   	pop    ebx
c00272f9:	5d                   	pop    ebp
c00272fa:	c3                   	ret    

c00272fb <__floatunsisf>:
c00272fb:	55                   	push   ebp
c00272fc:	89 e5                	mov    ebp,esp
c00272fe:	53                   	push   ebx
c00272ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027302:	31 c0                	xor    eax,eax
c0027304:	85 d2                	test   edx,edx
c0027306:	74 32                	je     c002733a <__floatunsisf+0x3f>
c0027308:	0f bd ca             	bsr    ecx,edx
c002730b:	83 f1 1f             	xor    ecx,0x1f
c002730e:	d3 e2                	shl    edx,cl
c0027310:	89 d0                	mov    eax,edx
c0027312:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027317:	89 c3                	mov    ebx,eax
c0027319:	c1 eb 08             	shr    ebx,0x8
c002731c:	80 e2 7f             	and    dl,0x7f
c002731f:	0f 95 c2             	setne  dl
c0027322:	09 da                	or     edx,ebx
c0027324:	83 e2 01             	and    edx,0x1
c0027327:	c1 e8 07             	shr    eax,0x7
c002732a:	21 c2                	and    edx,eax
c002732c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027331:	29 c8                	sub    eax,ecx
c0027333:	c1 e0 17             	shl    eax,0x17
c0027336:	09 d8                	or     eax,ebx
c0027338:	01 d0                	add    eax,edx
c002733a:	5b                   	pop    ebx
c002733b:	5d                   	pop    ebp
c002733c:	c3                   	ret    

c002733d <__fixsfsi>:
c002733d:	55                   	push   ebp
c002733e:	89 e5                	mov    ebp,esp
c0027340:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027343:	89 d1                	mov    ecx,edx
c0027345:	c1 e1 08             	shl    ecx,0x8
c0027348:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002734e:	c1 fa 17             	sar    edx,0x17
c0027351:	78 1c                	js     c002736f <__fixsfsi+0x32>
c0027353:	83 ea 7f             	sub    edx,0x7f
c0027356:	31 c0                	xor    eax,eax
c0027358:	83 fa 1e             	cmp    edx,0x1e
c002735b:	77 40                	ja     c002739d <__fixsfsi+0x60>
c002735d:	89 c8                	mov    eax,ecx
c002735f:	0d 00 00 00 80       	or     eax,0x80000000
c0027364:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027369:	29 d1                	sub    ecx,edx
c002736b:	d3 e8                	shr    eax,cl
c002736d:	eb 2e                	jmp    c002739d <__fixsfsi+0x60>
c002736f:	31 c0                	xor    eax,eax
c0027371:	81 c2 81 00 00 00    	add    edx,0x81
c0027377:	78 24                	js     c002739d <__fixsfsi+0x60>
c0027379:	83 fa 1e             	cmp    edx,0x1e
c002737c:	7e 09                	jle    c0027387 <__fixsfsi+0x4a>
c002737e:	83 fa 1f             	cmp    edx,0x1f
c0027381:	75 18                	jne    c002739b <__fixsfsi+0x5e>
c0027383:	85 c9                	test   ecx,ecx
c0027385:	75 14                	jne    c002739b <__fixsfsi+0x5e>
c0027387:	89 c8                	mov    eax,ecx
c0027389:	0d 00 00 00 80       	or     eax,0x80000000
c002738e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027393:	29 d1                	sub    ecx,edx
c0027395:	d3 e8                	shr    eax,cl
c0027397:	f7 d8                	neg    eax
c0027399:	eb 02                	jmp    c002739d <__fixsfsi+0x60>
c002739b:	31 c0                	xor    eax,eax
c002739d:	5d                   	pop    ebp
c002739e:	c3                   	ret    

c002739f <__fixunssfsi>:
c002739f:	55                   	push   ebp
c00273a0:	89 e5                	mov    ebp,esp
c00273a2:	53                   	push   ebx
c00273a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a6:	89 d3                	mov    ebx,edx
c00273a8:	c1 fb 17             	sar    ebx,0x17
c00273ab:	83 eb 7f             	sub    ebx,0x7f
c00273ae:	31 c0                	xor    eax,eax
c00273b0:	83 fb 1f             	cmp    ebx,0x1f
c00273b3:	77 18                	ja     c00273cd <__fixunssfsi+0x2e>
c00273b5:	89 d0                	mov    eax,edx
c00273b7:	c1 e0 08             	shl    eax,0x8
c00273ba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273bf:	0d 00 00 00 80       	or     eax,0x80000000
c00273c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273c9:	29 d9                	sub    ecx,ebx
c00273cb:	d3 e8                	shr    eax,cl
c00273cd:	5b                   	pop    ebx
c00273ce:	5d                   	pop    ebp
c00273cf:	c3                   	ret    

c00273d0 <__cmpsf2>:
c00273d0:	55                   	push   ebp
c00273d1:	89 e5                	mov    ebp,esp
c00273d3:	57                   	push   edi
c00273d4:	56                   	push   esi
c00273d5:	53                   	push   ebx
c00273d6:	83 ec 24             	sub    esp,0x24
c00273d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273df:	e8 4f 10 00 00       	call   c0028433 <__truncdfsf2>
c00273e4:	5a                   	pop    edx
c00273e5:	59                   	pop    ecx
c00273e6:	89 c3                	mov    ebx,eax
c00273e8:	c1 e8 17             	shr    eax,0x17
c00273eb:	0f b6 f0             	movzx  esi,al
c00273ee:	89 d8                	mov    eax,ebx
c00273f0:	c1 e8 1f             	shr    eax,0x1f
c00273f3:	31 c6                	xor    esi,eax
c00273f5:	c1 e3 08             	shl    ebx,0x8
c00273f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00273fb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00273fe:	e8 30 10 00 00       	call   c0028433 <__truncdfsf2>
c0027403:	83 c4 10             	add    esp,0x10
c0027406:	89 c1                	mov    ecx,eax
c0027408:	c1 e9 17             	shr    ecx,0x17
c002740b:	0f b6 c9             	movzx  ecx,cl
c002740e:	89 c7                	mov    edi,eax
c0027410:	c1 ef 1f             	shr    edi,0x1f
c0027413:	89 ca                	mov    edx,ecx
c0027415:	31 fa                	xor    edx,edi
c0027417:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002741a:	c1 e0 08             	shl    eax,0x8
c002741d:	89 c2                	mov    edx,eax
c002741f:	89 d8                	mov    eax,ebx
c0027421:	09 d0                	or     eax,edx
c0027423:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027428:	09 f0                	or     eax,esi
c002742a:	75 08                	jne    c0027434 <__cmpsf2+0x64>
c002742c:	31 c0                	xor    eax,eax
c002742e:	39 f9                	cmp    ecx,edi
c0027430:	75 0c                	jne    c002743e <__cmpsf2+0x6e>
c0027432:	eb 29                	jmp    c002745d <__cmpsf2+0x8d>
c0027434:	b8 01 00 00 00       	mov    eax,0x1
c0027439:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002743c:	7f 1f                	jg     c002745d <__cmpsf2+0x8d>
c002743e:	83 c8 ff             	or     eax,0xffffffff
c0027441:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027444:	7c 17                	jl     c002745d <__cmpsf2+0x8d>
c0027446:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002744c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027452:	b8 01 00 00 00       	mov    eax,0x1
c0027457:	39 d3                	cmp    ebx,edx
c0027459:	77 02                	ja     c002745d <__cmpsf2+0x8d>
c002745b:	19 c0                	sbb    eax,eax
c002745d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027460:	5b                   	pop    ebx
c0027461:	5e                   	pop    esi
c0027462:	5f                   	pop    edi
c0027463:	5d                   	pop    ebp
c0027464:	c3                   	ret    

c0027465 <__eqsf2>:
c0027465:	55                   	push   ebp
c0027466:	89 e5                	mov    ebp,esp
c0027468:	83 ec 24             	sub    esp,0x24
c002746b:	6a 01                	push   0x1
c002746d:	83 ec 0c             	sub    esp,0xc
c0027470:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027473:	e8 df 10 00 00       	call   c0028557 <__extendsfdf2>
c0027478:	83 c4 10             	add    esp,0x10
c002747b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002747e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027481:	52                   	push   edx
c0027482:	50                   	push   eax
c0027483:	50                   	push   eax
c0027484:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027487:	e8 cb 10 00 00       	call   c0028557 <__extendsfdf2>
c002748c:	59                   	pop    ecx
c002748d:	59                   	pop    ecx
c002748e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027491:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027494:	52                   	push   edx
c0027495:	50                   	push   eax
c0027496:	e8 35 ff ff ff       	call   c00273d0 <__cmpsf2>
c002749b:	83 c4 20             	add    esp,0x20
c002749e:	c9                   	leave  
c002749f:	c3                   	ret    

c00274a0 <__nesf2>:
c00274a0:	eb c3                	jmp    c0027465 <__eqsf2>

c00274a2 <__gtsf2>:
c00274a2:	55                   	push   ebp
c00274a3:	89 e5                	mov    ebp,esp
c00274a5:	83 ec 24             	sub    esp,0x24
c00274a8:	6a ff                	push   0xffffffff
c00274aa:	83 ec 0c             	sub    esp,0xc
c00274ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274b0:	e8 a2 10 00 00       	call   c0028557 <__extendsfdf2>
c00274b5:	83 c4 10             	add    esp,0x10
c00274b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274be:	52                   	push   edx
c00274bf:	50                   	push   eax
c00274c0:	50                   	push   eax
c00274c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274c4:	e8 8e 10 00 00       	call   c0028557 <__extendsfdf2>
c00274c9:	59                   	pop    ecx
c00274ca:	59                   	pop    ecx
c00274cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274d1:	52                   	push   edx
c00274d2:	50                   	push   eax
c00274d3:	e8 f8 fe ff ff       	call   c00273d0 <__cmpsf2>
c00274d8:	83 c4 20             	add    esp,0x20
c00274db:	c9                   	leave  
c00274dc:	c3                   	ret    

c00274dd <__gesf2>:
c00274dd:	eb c3                	jmp    c00274a2 <__gtsf2>

c00274df <__ltsf2>:
c00274df:	eb 84                	jmp    c0027465 <__eqsf2>

c00274e1 <__lesf2>:
c00274e1:	eb 82                	jmp    c0027465 <__eqsf2>

c00274e3 <__adddf3>:
c00274e3:	55                   	push   ebp
c00274e4:	89 e5                	mov    ebp,esp
c00274e6:	57                   	push   edi
c00274e7:	56                   	push   esi
c00274e8:	53                   	push   ebx
c00274e9:	83 ec 24             	sub    esp,0x24
c00274ec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00274f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00274f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00274fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00274fe:	89 c8                	mov    eax,ecx
c0027500:	89 ce                	mov    esi,ecx
c0027502:	c1 fe 14             	sar    esi,0x14
c0027505:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027508:	89 fb                	mov    ebx,edi
c002750a:	89 fa                	mov    edx,edi
c002750c:	c1 e2 0b             	shl    edx,0xb
c002750f:	c1 e0 0b             	shl    eax,0xb
c0027512:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027517:	c1 eb 15             	shr    ebx,0x15
c002751a:	09 d8                	or     eax,ebx
c002751c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002751f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027522:	c1 fe 14             	sar    esi,0x14
c0027525:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027528:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002752b:	89 f3                	mov    ebx,esi
c002752d:	c1 e3 0b             	shl    ebx,0xb
c0027530:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027533:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027536:	c1 e3 0b             	shl    ebx,0xb
c0027539:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002753f:	c1 ee 15             	shr    esi,0x15
c0027542:	09 f3                	or     ebx,esi
c0027544:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027547:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002754a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002754d:	0f 88 5f 02 00 00    	js     c00277b2 <__adddf3+0x2cf>
c0027553:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027556:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027559:	85 db                	test   ebx,ebx
c002755b:	0f 8e c7 00 00 00    	jle    c0027628 <__adddf3+0x145>
c0027561:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027568:	75 1a                	jne    c0027584 <__adddf3+0xa1>
c002756a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002756d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027570:	0f 84 b2 05 00 00    	je     c0027b28 <__adddf3+0x645>
c0027576:	4b                   	dec    ebx
c0027577:	75 23                	jne    c002759c <__adddf3+0xb9>
c0027579:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002757c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002757f:	e9 99 00 00 00       	jmp    c002761d <__adddf3+0x13a>
c0027584:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027587:	f7 d6                	not    esi
c0027589:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002758f:	0f 84 93 05 00 00    	je     c0027b28 <__adddf3+0x645>
c0027595:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002759c:	83 fb 1f             	cmp    ebx,0x1f
c002759f:	7e 42                	jle    c00275e3 <__adddf3+0x100>
c00275a1:	83 fb 3f             	cmp    ebx,0x3f
c00275a4:	0f 8f 7e 05 00 00    	jg     c0027b28 <__adddf3+0x645>
c00275aa:	83 e3 1f             	and    ebx,0x1f
c00275ad:	89 d9                	mov    ecx,ebx
c00275af:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275b2:	d3 ef                	shr    edi,cl
c00275b4:	31 db                	xor    ebx,ebx
c00275b6:	85 c9                	test   ecx,ecx
c00275b8:	74 15                	je     c00275cf <__adddf3+0xec>
c00275ba:	be 20 00 00 00       	mov    esi,0x20
c00275bf:	29 ce                	sub    esi,ecx
c00275c1:	89 f1                	mov    ecx,esi
c00275c3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275c6:	d3 e6                	shl    esi,cl
c00275c8:	31 db                	xor    ebx,ebx
c00275ca:	85 f6                	test   esi,esi
c00275cc:	0f 95 c3             	setne  bl
c00275cf:	31 c9                	xor    ecx,ecx
c00275d1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275d5:	0f 95 c1             	setne  cl
c00275d8:	09 cf                	or     edi,ecx
c00275da:	09 fb                	or     ebx,edi
c00275dc:	01 da                	add    edx,ebx
c00275de:	83 d0 00             	adc    eax,0x0
c00275e1:	eb 3a                	jmp    c002761d <__adddf3+0x13a>
c00275e3:	bf 20 00 00 00       	mov    edi,0x20
c00275e8:	29 df                	sub    edi,ebx
c00275ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275f0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275f3:	d3 e6                	shl    esi,cl
c00275f5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275f8:	88 d9                	mov    cl,bl
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	09 fe                	or     esi,edi
c00275fe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027601:	88 d9                	mov    cl,bl
c0027603:	d3 ef                	shr    edi,cl
c0027605:	89 fb                	mov    ebx,edi
c0027607:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002760a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002760d:	d3 e7                	shl    edi,cl
c002760f:	85 ff                	test   edi,edi
c0027611:	0f 95 c1             	setne  cl
c0027614:	0f b6 c9             	movzx  ecx,cl
c0027617:	09 ce                	or     esi,ecx
c0027619:	01 f2                	add    edx,esi
c002761b:	11 d8                	adc    eax,ebx
c002761d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027620:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027623:	e9 52 01 00 00       	jmp    c002777a <__adddf3+0x297>
c0027628:	0f 84 d5 00 00 00    	je     c0027703 <__adddf3+0x220>
c002762e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027631:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027634:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027637:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002763a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027641:	75 20                	jne    c0027663 <__adddf3+0x180>
c0027643:	89 d6                	mov    esi,edx
c0027645:	09 c6                	or     esi,eax
c0027647:	0f 84 db 04 00 00    	je     c0027b28 <__adddf3+0x645>
c002764d:	4b                   	dec    ebx
c002764e:	75 29                	jne    c0027679 <__adddf3+0x196>
c0027650:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027653:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027656:	01 d1                	add    ecx,edx
c0027658:	11 c6                	adc    esi,eax
c002765a:	89 f0                	mov    eax,esi
c002765c:	89 ca                	mov    edx,ecx
c002765e:	e9 17 01 00 00       	jmp    c002777a <__adddf3+0x297>
c0027663:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027666:	f7 d6                	not    esi
c0027668:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002766e:	0f 84 b4 04 00 00    	je     c0027b28 <__adddf3+0x645>
c0027674:	0d 00 00 00 80       	or     eax,0x80000000
c0027679:	83 fb 1f             	cmp    ebx,0x1f
c002767c:	7e 48                	jle    c00276c6 <__adddf3+0x1e3>
c002767e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027681:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027684:	83 fb 3f             	cmp    ebx,0x3f
c0027687:	0f 8f 9b 04 00 00    	jg     c0027b28 <__adddf3+0x645>
c002768d:	83 e3 1f             	and    ebx,0x1f
c0027690:	89 d9                	mov    ecx,ebx
c0027692:	89 c7                	mov    edi,eax
c0027694:	d3 ef                	shr    edi,cl
c0027696:	31 db                	xor    ebx,ebx
c0027698:	85 c9                	test   ecx,ecx
c002769a:	74 12                	je     c00276ae <__adddf3+0x1cb>
c002769c:	be 20 00 00 00       	mov    esi,0x20
c00276a1:	29 ce                	sub    esi,ecx
c00276a3:	89 f1                	mov    ecx,esi
c00276a5:	d3 e0                	shl    eax,cl
c00276a7:	31 db                	xor    ebx,ebx
c00276a9:	85 c0                	test   eax,eax
c00276ab:	0f 95 c3             	setne  bl
c00276ae:	31 c0                	xor    eax,eax
c00276b0:	85 d2                	test   edx,edx
c00276b2:	0f 95 c0             	setne  al
c00276b5:	09 c7                	or     edi,eax
c00276b7:	09 fb                	or     ebx,edi
c00276b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276bf:	01 da                	add    edx,ebx
c00276c1:	83 d6 00             	adc    esi,0x0
c00276c4:	eb 39                	jmp    c00276ff <__adddf3+0x21c>
c00276c6:	be 20 00 00 00       	mov    esi,0x20
c00276cb:	29 de                	sub    esi,ebx
c00276cd:	89 c7                	mov    edi,eax
c00276cf:	89 f1                	mov    ecx,esi
c00276d1:	d3 e7                	shl    edi,cl
c00276d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276d6:	89 d7                	mov    edi,edx
c00276d8:	88 d9                	mov    cl,bl
c00276da:	d3 ef                	shr    edi,cl
c00276dc:	89 f9                	mov    ecx,edi
c00276de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276e1:	09 cf                	or     edi,ecx
c00276e3:	88 d9                	mov    cl,bl
c00276e5:	d3 e8                	shr    eax,cl
c00276e7:	89 f1                	mov    ecx,esi
c00276e9:	d3 e2                	shl    edx,cl
c00276eb:	85 d2                	test   edx,edx
c00276ed:	0f 95 c2             	setne  dl
c00276f0:	0f b6 d2             	movzx  edx,dl
c00276f3:	09 d7                	or     edi,edx
c00276f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276fb:	01 fa                	add    edx,edi
c00276fd:	11 c6                	adc    esi,eax
c00276ff:	89 f0                	mov    eax,esi
c0027701:	eb 77                	jmp    c002777a <__adddf3+0x297>
c0027703:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027706:	46                   	inc    esi
c0027707:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002770a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027710:	75 41                	jne    c0027753 <__adddf3+0x270>
c0027712:	89 d3                	mov    ebx,edx
c0027714:	09 c3                	or     ebx,eax
c0027716:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002771d:	75 27                	jne    c0027746 <__adddf3+0x263>
c002771f:	85 db                	test   ebx,ebx
c0027721:	0f 84 fb 03 00 00    	je     c0027b22 <__adddf3+0x63f>
c0027727:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002772a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002772d:	0f 84 f5 03 00 00    	je     c0027b28 <__adddf3+0x645>
c0027733:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027736:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027739:	85 c0                	test   eax,eax
c002773b:	0f 89 91 03 00 00    	jns    c0027ad2 <__adddf3+0x5ef>
c0027741:	e9 85 03 00 00       	jmp    c0027acb <__adddf3+0x5e8>
c0027746:	85 db                	test   ebx,ebx
c0027748:	0f 85 da 03 00 00    	jne    c0027b28 <__adddf3+0x645>
c002774e:	e9 cf 03 00 00       	jmp    c0027b22 <__adddf3+0x63f>
c0027753:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027756:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027759:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002775c:	f7 d1                	not    ecx
c002775e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027764:	0f 84 70 03 00 00    	je     c0027ada <__adddf3+0x5f7>
c002776a:	d1 ea                	shr    edx,1
c002776c:	89 c1                	mov    ecx,eax
c002776e:	c1 e1 1f             	shl    ecx,0x1f
c0027771:	09 ca                	or     edx,ecx
c0027773:	d1 e8                	shr    eax,1
c0027775:	e9 6f 03 00 00       	jmp    c0027ae9 <__adddf3+0x606>
c002777a:	85 c0                	test   eax,eax
c002777c:	0f 89 67 03 00 00    	jns    c0027ae9 <__adddf3+0x606>
c0027782:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027785:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027788:	f7 d1                	not    ecx
c002778a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027790:	0f 84 44 03 00 00    	je     c0027ada <__adddf3+0x5f7>
c0027796:	89 d1                	mov    ecx,edx
c0027798:	d1 e9                	shr    ecx,1
c002779a:	83 e2 01             	and    edx,0x1
c002779d:	09 ca                	or     edx,ecx
c002779f:	89 c1                	mov    ecx,eax
c00277a1:	c1 e1 1f             	shl    ecx,0x1f
c00277a4:	09 ca                	or     edx,ecx
c00277a6:	d1 e8                	shr    eax,1
c00277a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277ad:	e9 37 03 00 00       	jmp    c0027ae9 <__adddf3+0x606>
c00277b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277c7:	29 de                	sub    esi,ebx
c00277c9:	85 f6                	test   esi,esi
c00277cb:	0f 8e bd 00 00 00    	jle    c002788e <__adddf3+0x3ab>
c00277d1:	85 db                	test   ebx,ebx
c00277d3:	75 17                	jne    c00277ec <__adddf3+0x309>
c00277d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277db:	0f 84 47 03 00 00    	je     c0027b28 <__adddf3+0x645>
c00277e1:	4e                   	dec    esi
c00277e2:	75 20                	jne    c0027804 <__adddf3+0x321>
c00277e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277ea:	eb 5b                	jmp    c0027847 <__adddf3+0x364>
c00277ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277ef:	f7 d3                	not    ebx
c00277f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277f7:	0f 84 2b 03 00 00    	je     c0027b28 <__adddf3+0x645>
c00277fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027804:	83 fe 1f             	cmp    esi,0x1f
c0027807:	7e 49                	jle    c0027852 <__adddf3+0x36f>
c0027809:	83 fe 3f             	cmp    esi,0x3f
c002780c:	0f 8f 16 03 00 00    	jg     c0027b28 <__adddf3+0x645>
c0027812:	83 e6 1f             	and    esi,0x1f
c0027815:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027818:	89 f1                	mov    ecx,esi
c002781a:	d3 ef                	shr    edi,cl
c002781c:	31 db                	xor    ebx,ebx
c002781e:	85 f6                	test   esi,esi
c0027820:	74 13                	je     c0027835 <__adddf3+0x352>
c0027822:	b9 20 00 00 00       	mov    ecx,0x20
c0027827:	29 f1                	sub    ecx,esi
c0027829:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002782c:	d3 e6                	shl    esi,cl
c002782e:	31 db                	xor    ebx,ebx
c0027830:	85 f6                	test   esi,esi
c0027832:	0f 95 c3             	setne  bl
c0027835:	31 c9                	xor    ecx,ecx
c0027837:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002783b:	0f 95 c1             	setne  cl
c002783e:	09 cf                	or     edi,ecx
c0027840:	09 fb                	or     ebx,edi
c0027842:	29 da                	sub    edx,ebx
c0027844:	83 d8 00             	sbb    eax,0x0
c0027847:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002784a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002784d:	e9 aa 01 00 00       	jmp    c00279fc <__adddf3+0x519>
c0027852:	bf 20 00 00 00       	mov    edi,0x20
c0027857:	29 f7                	sub    edi,esi
c0027859:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002785c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002785f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027862:	d3 e3                	shl    ebx,cl
c0027864:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027867:	89 f1                	mov    ecx,esi
c0027869:	d3 ef                	shr    edi,cl
c002786b:	09 fb                	or     ebx,edi
c002786d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027870:	89 f1                	mov    ecx,esi
c0027872:	d3 ef                	shr    edi,cl
c0027874:	89 fe                	mov    esi,edi
c0027876:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027879:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002787c:	d3 e7                	shl    edi,cl
c002787e:	85 ff                	test   edi,edi
c0027880:	0f 95 c1             	setne  cl
c0027883:	0f b6 c9             	movzx  ecx,cl
c0027886:	09 cb                	or     ebx,ecx
c0027888:	29 da                	sub    edx,ebx
c002788a:	19 f0                	sbb    eax,esi
c002788c:	eb b9                	jmp    c0027847 <__adddf3+0x364>
c002788e:	0f 84 cd 00 00 00    	je     c0027961 <__adddf3+0x47e>
c0027894:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027897:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002789a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002789d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278a1:	75 1b                	jne    c00278be <__adddf3+0x3db>
c00278a3:	89 d6                	mov    esi,edx
c00278a5:	09 c6                	or     esi,eax
c00278a7:	0f 84 7b 02 00 00    	je     c0027b28 <__adddf3+0x645>
c00278ad:	4b                   	dec    ebx
c00278ae:	75 24                	jne    c00278d4 <__adddf3+0x3f1>
c00278b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278b6:	29 d1                	sub    ecx,edx
c00278b8:	19 c6                	sbb    esi,eax
c00278ba:	89 ca                	mov    edx,ecx
c00278bc:	eb 61                	jmp    c002791f <__adddf3+0x43c>
c00278be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278c1:	f7 d6                	not    esi
c00278c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278c9:	0f 84 59 02 00 00    	je     c0027b28 <__adddf3+0x645>
c00278cf:	0d 00 00 00 80       	or     eax,0x80000000
c00278d4:	83 fb 1f             	cmp    ebx,0x1f
c00278d7:	7e 4d                	jle    c0027926 <__adddf3+0x443>
c00278d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278df:	83 fb 3f             	cmp    ebx,0x3f
c00278e2:	0f 8f 40 02 00 00    	jg     c0027b28 <__adddf3+0x645>
c00278e8:	83 e3 1f             	and    ebx,0x1f
c00278eb:	89 d9                	mov    ecx,ebx
c00278ed:	89 c7                	mov    edi,eax
c00278ef:	d3 ef                	shr    edi,cl
c00278f1:	31 db                	xor    ebx,ebx
c00278f3:	85 c9                	test   ecx,ecx
c00278f5:	74 12                	je     c0027909 <__adddf3+0x426>
c00278f7:	be 20 00 00 00       	mov    esi,0x20
c00278fc:	29 ce                	sub    esi,ecx
c00278fe:	89 f1                	mov    ecx,esi
c0027900:	d3 e0                	shl    eax,cl
c0027902:	31 db                	xor    ebx,ebx
c0027904:	85 c0                	test   eax,eax
c0027906:	0f 95 c3             	setne  bl
c0027909:	31 c0                	xor    eax,eax
c002790b:	85 d2                	test   edx,edx
c002790d:	0f 95 c0             	setne  al
c0027910:	09 c7                	or     edi,eax
c0027912:	09 fb                	or     ebx,edi
c0027914:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027917:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002791a:	29 da                	sub    edx,ebx
c002791c:	83 de 00             	sbb    esi,0x0
c002791f:	89 f0                	mov    eax,esi
c0027921:	e9 d6 00 00 00       	jmp    c00279fc <__adddf3+0x519>
c0027926:	be 20 00 00 00       	mov    esi,0x20
c002792b:	29 de                	sub    esi,ebx
c002792d:	89 c7                	mov    edi,eax
c002792f:	89 f1                	mov    ecx,esi
c0027931:	d3 e7                	shl    edi,cl
c0027933:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027936:	89 d7                	mov    edi,edx
c0027938:	88 d9                	mov    cl,bl
c002793a:	d3 ef                	shr    edi,cl
c002793c:	89 f9                	mov    ecx,edi
c002793e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027941:	09 cf                	or     edi,ecx
c0027943:	88 d9                	mov    cl,bl
c0027945:	d3 e8                	shr    eax,cl
c0027947:	89 f1                	mov    ecx,esi
c0027949:	d3 e2                	shl    edx,cl
c002794b:	85 d2                	test   edx,edx
c002794d:	0f 95 c2             	setne  dl
c0027950:	0f b6 d2             	movzx  edx,dl
c0027953:	09 d7                	or     edi,edx
c0027955:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027958:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002795b:	29 fa                	sub    edx,edi
c002795d:	19 c6                	sbb    esi,eax
c002795f:	eb be                	jmp    c002791f <__adddf3+0x43c>
c0027961:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027964:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027967:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002796d:	75 6a                	jne    c00279d9 <__adddf3+0x4f6>
c002796f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027973:	75 58                	jne    c00279cd <__adddf3+0x4ea>
c0027975:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027978:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002797b:	89 d6                	mov    esi,edx
c002797d:	09 c6                	or     esi,eax
c002797f:	75 17                	jne    c0027998 <__adddf3+0x4b5>
c0027981:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027984:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027987:	85 db                	test   ebx,ebx
c0027989:	0f 85 99 01 00 00    	jne    c0027b28 <__adddf3+0x645>
c002798f:	31 ff                	xor    edi,edi
c0027991:	31 c9                	xor    ecx,ecx
c0027993:	e9 90 01 00 00       	jmp    c0027b28 <__adddf3+0x645>
c0027998:	85 db                	test   ebx,ebx
c002799a:	0f 84 88 01 00 00    	je     c0027b28 <__adddf3+0x645>
c00279a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279a6:	85 c0                	test   eax,eax
c00279a8:	79 10                	jns    c00279ba <__adddf3+0x4d7>
c00279aa:	31 c9                	xor    ecx,ecx
c00279ac:	f7 da                	neg    edx
c00279ae:	0f 95 c1             	setne  cl
c00279b1:	01 c8                	add    eax,ecx
c00279b3:	f7 d8                	neg    eax
c00279b5:	e9 2f 01 00 00       	jmp    c0027ae9 <__adddf3+0x606>
c00279ba:	31 ff                	xor    edi,edi
c00279bc:	31 c9                	xor    ecx,ecx
c00279be:	89 c3                	mov    ebx,eax
c00279c0:	09 d3                	or     ebx,edx
c00279c2:	0f 84 60 01 00 00    	je     c0027b28 <__adddf3+0x645>
c00279c8:	e9 05 01 00 00       	jmp    c0027ad2 <__adddf3+0x5ef>
c00279cd:	31 ff                	xor    edi,edi
c00279cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279d4:	e9 4f 01 00 00       	jmp    c0027b28 <__adddf3+0x645>
c00279d9:	89 c1                	mov    ecx,eax
c00279db:	89 d0                	mov    eax,edx
c00279dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00279e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00279e3:	89 ca                	mov    edx,ecx
c00279e5:	85 c9                	test   ecx,ecx
c00279e7:	79 2c                	jns    c0027a15 <__adddf3+0x532>
c00279e9:	31 c9                	xor    ecx,ecx
c00279eb:	f7 d8                	neg    eax
c00279ed:	0f 95 c1             	setne  cl
c00279f0:	01 ca                	add    edx,ecx
c00279f2:	f7 da                	neg    edx
c00279f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00279f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279fa:	eb 19                	jmp    c0027a15 <__adddf3+0x532>
c00279fc:	85 c0                	test   eax,eax
c00279fe:	0f 89 e5 00 00 00    	jns    c0027ae9 <__adddf3+0x606>
c0027a04:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a09:	89 c1                	mov    ecx,eax
c0027a0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a0e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a11:	89 d0                	mov    eax,edx
c0027a13:	89 ca                	mov    edx,ecx
c0027a15:	85 d2                	test   edx,edx
c0027a17:	74 59                	je     c0027a72 <__adddf3+0x58f>
c0027a19:	0f bd da             	bsr    ebx,edx
c0027a1c:	83 f3 1f             	xor    ebx,0x1f
c0027a1f:	88 d9                	mov    cl,bl
c0027a21:	d3 e2                	shl    edx,cl
c0027a23:	bf 20 00 00 00       	mov    edi,0x20
c0027a28:	89 f9                	mov    ecx,edi
c0027a2a:	29 d9                	sub    ecx,ebx
c0027a2c:	89 c6                	mov    esi,eax
c0027a2e:	d3 ee                	shr    esi,cl
c0027a30:	09 d6                	or     esi,edx
c0027a32:	88 d9                	mov    cl,bl
c0027a34:	d3 e0                	shl    eax,cl
c0027a36:	89 c2                	mov    edx,eax
c0027a38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a3b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a40:	39 d8                	cmp    eax,ebx
c0027a42:	7f 22                	jg     c0027a66 <__adddf3+0x583>
c0027a44:	29 c3                	sub    ebx,eax
c0027a46:	43                   	inc    ebx
c0027a47:	88 d9                	mov    cl,bl
c0027a49:	d3 ea                	shr    edx,cl
c0027a4b:	29 df                	sub    edi,ebx
c0027a4d:	89 f9                	mov    ecx,edi
c0027a4f:	89 f0                	mov    eax,esi
c0027a51:	d3 e0                	shl    eax,cl
c0027a53:	09 c2                	or     edx,eax
c0027a55:	89 f0                	mov    eax,esi
c0027a57:	88 d9                	mov    cl,bl
c0027a59:	d3 e8                	shr    eax,cl
c0027a5b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a5e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a64:	eb 6f                	jmp    c0027ad5 <__adddf3+0x5f2>
c0027a66:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a69:	29 d8                	sub    eax,ebx
c0027a6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a6e:	89 f0                	mov    eax,esi
c0027a70:	eb 59                	jmp    c0027acb <__adddf3+0x5e8>
c0027a72:	85 c0                	test   eax,eax
c0027a74:	74 6a                	je     c0027ae0 <__adddf3+0x5fd>
c0027a76:	0f bd c8             	bsr    ecx,eax
c0027a79:	83 f1 1f             	xor    ecx,0x1f
c0027a7c:	d3 e0                	shl    eax,cl
c0027a7e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a81:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a87:	83 c1 20             	add    ecx,0x20
c0027a8a:	39 cb                	cmp    ebx,ecx
c0027a8c:	7f 35                	jg     c0027ac3 <__adddf3+0x5e0>
c0027a8e:	29 d9                	sub    ecx,ebx
c0027a90:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a93:	83 fe 1f             	cmp    esi,0x1f
c0027a96:	7e 09                	jle    c0027aa1 <__adddf3+0x5be>
c0027a98:	83 e9 1f             	sub    ecx,0x1f
c0027a9b:	d3 e8                	shr    eax,cl
c0027a9d:	89 c3                	mov    ebx,eax
c0027a9f:	eb 11                	jmp    c0027ab2 <__adddf3+0x5cf>
c0027aa1:	b9 20 00 00 00       	mov    ecx,0x20
c0027aa6:	29 f1                	sub    ecx,esi
c0027aa8:	89 c3                	mov    ebx,eax
c0027aaa:	d3 e3                	shl    ebx,cl
c0027aac:	89 f1                	mov    ecx,esi
c0027aae:	d3 e8                	shr    eax,cl
c0027ab0:	89 c2                	mov    edx,eax
c0027ab2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ab5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027aba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027abd:	89 d0                	mov    eax,edx
c0027abf:	89 da                	mov    edx,ebx
c0027ac1:	eb 26                	jmp    c0027ae9 <__adddf3+0x606>
c0027ac3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ac6:	29 cf                	sub    edi,ecx
c0027ac8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027acb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ad0:	eb 17                	jmp    c0027ae9 <__adddf3+0x606>
c0027ad2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ad5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ad8:	eb 0f                	jmp    c0027ae9 <__adddf3+0x606>
c0027ada:	31 d2                	xor    edx,edx
c0027adc:	31 c0                	xor    eax,eax
c0027ade:	eb 09                	jmp    c0027ae9 <__adddf3+0x606>
c0027ae0:	89 c2                	mov    edx,eax
c0027ae2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027ae9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027aec:	c1 e1 14             	shl    ecx,0x14
c0027aef:	89 c3                	mov    ebx,eax
c0027af1:	c1 eb 0b             	shr    ebx,0xb
c0027af4:	09 d9                	or     ecx,ebx
c0027af6:	89 d3                	mov    ebx,edx
c0027af8:	c1 eb 0b             	shr    ebx,0xb
c0027afb:	c1 e0 15             	shl    eax,0x15
c0027afe:	09 d8                	or     eax,ebx
c0027b00:	89 c7                	mov    edi,eax
c0027b02:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b08:	0f 95 c0             	setne  al
c0027b0b:	89 c6                	mov    esi,eax
c0027b0d:	09 f3                	or     ebx,esi
c0027b0f:	83 e3 01             	and    ebx,0x1
c0027b12:	c1 ea 0a             	shr    edx,0xa
c0027b15:	21 da                	and    edx,ebx
c0027b17:	89 f8                	mov    eax,edi
c0027b19:	01 d0                	add    eax,edx
c0027b1b:	83 d1 00             	adc    ecx,0x0
c0027b1e:	89 c7                	mov    edi,eax
c0027b20:	eb 06                	jmp    c0027b28 <__adddf3+0x645>
c0027b22:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b25:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b28:	89 f8                	mov    eax,edi
c0027b2a:	89 ca                	mov    edx,ecx
c0027b2c:	83 c4 24             	add    esp,0x24
c0027b2f:	5b                   	pop    ebx
c0027b30:	5e                   	pop    esi
c0027b31:	5f                   	pop    edi
c0027b32:	5d                   	pop    ebp
c0027b33:	c3                   	ret    

c0027b34 <__subdf3>:
c0027b34:	55                   	push   ebp
c0027b35:	89 e5                	mov    ebp,esp
c0027b37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b3a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b3d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b43:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b46:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b49:	5d                   	pop    ebp
c0027b4a:	e9 94 f9 ff ff       	jmp    c00274e3 <__adddf3>

c0027b4f <__negdf2>:
c0027b4f:	55                   	push   ebp
c0027b50:	89 e5                	mov    ebp,esp
c0027b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b55:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b58:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b5e:	5d                   	pop    ebp
c0027b5f:	c3                   	ret    

c0027b60 <__muldf3>:
c0027b60:	55                   	push   ebp
c0027b61:	89 e5                	mov    ebp,esp
c0027b63:	57                   	push   edi
c0027b64:	56                   	push   esi
c0027b65:	53                   	push   ebx
c0027b66:	83 ec 24             	sub    esp,0x24
c0027b69:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b78:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b7e:	89 c8                	mov    eax,ecx
c0027b80:	c1 f8 14             	sar    eax,0x14
c0027b83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b86:	89 f8                	mov    eax,edi
c0027b88:	89 fb                	mov    ebx,edi
c0027b8a:	c1 e3 0b             	shl    ebx,0xb
c0027b8d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027b90:	c1 e1 0b             	shl    ecx,0xb
c0027b93:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b99:	c1 e8 15             	shr    eax,0x15
c0027b9c:	09 c1                	or     ecx,eax
c0027b9e:	89 d6                	mov    esi,edx
c0027ba0:	89 d0                	mov    eax,edx
c0027ba2:	c1 f8 14             	sar    eax,0x14
c0027ba5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ba8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bab:	89 c3                	mov    ebx,eax
c0027bad:	c1 e3 0b             	shl    ebx,0xb
c0027bb0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bb3:	c1 e6 0b             	shl    esi,0xb
c0027bb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bbc:	c1 e8 15             	shr    eax,0x15
c0027bbf:	09 c6                	or     esi,eax
c0027bc1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bc4:	25 ff 07 00 00       	and    eax,0x7ff
c0027bc9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bcc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bcf:	25 ff 07 00 00       	and    eax,0x7ff
c0027bd4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027bd7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bda:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bdd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027be4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027be7:	40                   	inc    eax
c0027be8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bed:	0f 85 8d 00 00 00    	jne    c0027c80 <__muldf3+0x120>
c0027bf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bf6:	09 c8                	or     eax,ecx
c0027bf8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027bfc:	74 44                	je     c0027c42 <__muldf3+0xe2>
c0027bfe:	85 c0                	test   eax,eax
c0027c00:	0f 85 31 02 00 00    	jne    c0027e37 <__muldf3+0x2d7>
c0027c06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c09:	40                   	inc    eax
c0027c0a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c0f:	75 13                	jne    c0027c24 <__muldf3+0xc4>
c0027c11:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c14:	09 f1                	or     ecx,esi
c0027c16:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c1a:	74 22                	je     c0027c3e <__muldf3+0xde>
c0027c1c:	85 c9                	test   ecx,ecx
c0027c1e:	0f 85 0d 02 00 00    	jne    c0027e31 <__muldf3+0x2d1>
c0027c24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c28:	0f 89 09 02 00 00    	jns    c0027e37 <__muldf3+0x2d7>
c0027c2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c31:	05 00 00 00 80       	add    eax,0x80000000
c0027c36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c39:	e9 f9 01 00 00       	jmp    c0027e37 <__muldf3+0x2d7>
c0027c3e:	85 c9                	test   ecx,ecx
c0027c40:	eb 2e                	jmp    c0027c70 <__muldf3+0x110>
c0027c42:	85 c0                	test   eax,eax
c0027c44:	74 20                	je     c0027c66 <__muldf3+0x106>
c0027c46:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c4f:	c1 ef 1f             	shr    edi,0x1f
c0027c52:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c55:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c58:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c5e:	09 f9                	or     ecx,edi
c0027c60:	78 1e                	js     c0027c80 <__muldf3+0x120>
c0027c62:	89 c3                	mov    ebx,eax
c0027c64:	eb e0                	jmp    c0027c46 <__muldf3+0xe6>
c0027c66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c69:	f7 d0                	not    eax
c0027c6b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c70:	75 b2                	jne    c0027c24 <__muldf3+0xc4>
c0027c72:	31 ff                	xor    edi,edi
c0027c74:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c7b:	e9 b7 01 00 00       	jmp    c0027e37 <__muldf3+0x2d7>
c0027c80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c83:	40                   	inc    eax
c0027c84:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c89:	75 57                	jne    c0027ce2 <__muldf3+0x182>
c0027c8b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c8e:	09 f0                	or     eax,esi
c0027c90:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c94:	74 23                	je     c0027cb9 <__muldf3+0x159>
c0027c96:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c9a:	0f 89 91 01 00 00    	jns    c0027e31 <__muldf3+0x2d1>
c0027ca0:	85 c0                	test   eax,eax
c0027ca2:	0f 85 89 01 00 00    	jne    c0027e31 <__muldf3+0x2d1>
c0027ca8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb4:	e9 7e 01 00 00       	jmp    c0027e37 <__muldf3+0x2d7>
c0027cb9:	85 c0                	test   eax,eax
c0027cbb:	75 0c                	jne    c0027cc9 <__muldf3+0x169>
c0027cbd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cc1:	0f 89 6a 01 00 00    	jns    c0027e31 <__muldf3+0x2d1>
c0027cc7:	eb df                	jmp    c0027ca8 <__muldf3+0x148>
c0027cc9:	01 f6                	add    esi,esi
c0027ccb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cce:	c1 ea 1f             	shr    edx,0x1f
c0027cd1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cd4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027cd7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cda:	09 d6                	or     esi,edx
c0027cdc:	78 04                	js     c0027ce2 <__muldf3+0x182>
c0027cde:	89 c3                	mov    ebx,eax
c0027ce0:	eb e7                	jmp    c0027cc9 <__muldf3+0x169>
c0027ce2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027ce8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cee:	89 c8                	mov    eax,ecx
c0027cf0:	f7 e6                	mul    esi
c0027cf2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027cf5:	89 c7                	mov    edi,eax
c0027cf7:	89 c8                	mov    eax,ecx
c0027cf9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027cfc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027cff:	89 c1                	mov    ecx,eax
c0027d01:	89 f0                	mov    eax,esi
c0027d03:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d06:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d09:	89 c6                	mov    esi,eax
c0027d0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d0e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d11:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d14:	31 c0                	xor    eax,eax
c0027d16:	01 f1                	add    ecx,esi
c0027d18:	0f 92 c0             	setb   al
c0027d1b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d1e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d21:	83 d6 00             	adc    esi,0x0
c0027d24:	01 c7                	add    edi,eax
c0027d26:	83 d6 00             	adc    esi,0x0
c0027d29:	01 ca                	add    edx,ecx
c0027d2b:	0f 92 c1             	setb   cl
c0027d2e:	0f b6 c9             	movzx  ecx,cl
c0027d31:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d34:	83 d6 00             	adc    esi,0x0
c0027d37:	01 cf                	add    edi,ecx
c0027d39:	83 d6 00             	adc    esi,0x0
c0027d3c:	31 c9                	xor    ecx,ecx
c0027d3e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d41:	0f 95 c1             	setne  cl
c0027d44:	09 cf                	or     edi,ecx
c0027d46:	85 f6                	test   esi,esi
c0027d48:	78 0c                	js     c0027d56 <__muldf3+0x1f6>
c0027d4a:	01 f6                	add    esi,esi
c0027d4c:	89 f8                	mov    eax,edi
c0027d4e:	c1 e8 1f             	shr    eax,0x1f
c0027d51:	09 c6                	or     esi,eax
c0027d53:	01 ff                	add    edi,edi
c0027d55:	4b                   	dec    ebx
c0027d56:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d5c:	0f 8f 85 00 00 00    	jg     c0027de7 <__muldf3+0x287>
c0027d62:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d68:	85 db                	test   ebx,ebx
c0027d6a:	0f 8f 84 00 00 00    	jg     c0027df4 <__muldf3+0x294>
c0027d70:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d73:	7c 79                	jl     c0027dee <__muldf3+0x28e>
c0027d75:	ba 01 00 00 00       	mov    edx,0x1
c0027d7a:	29 da                	sub    edx,ebx
c0027d7c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d82:	83 fa 1f             	cmp    edx,0x1f
c0027d85:	7e 30                	jle    c0027db7 <__muldf3+0x257>
c0027d87:	83 fa 20             	cmp    edx,0x20
c0027d8a:	75 0b                	jne    c0027d97 <__muldf3+0x237>
c0027d8c:	31 c0                	xor    eax,eax
c0027d8e:	85 ff                	test   edi,edi
c0027d90:	0f 95 c0             	setne  al
c0027d93:	89 c7                	mov    edi,eax
c0027d95:	eb 1a                	jmp    c0027db1 <__muldf3+0x251>
c0027d97:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027d9a:	89 f0                	mov    eax,esi
c0027d9c:	d3 e0                	shl    eax,cl
c0027d9e:	09 f8                	or     eax,edi
c0027da0:	0f 95 c0             	setne  al
c0027da3:	0f b6 c0             	movzx  eax,al
c0027da6:	89 c7                	mov    edi,eax
c0027da8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dad:	29 d9                	sub    ecx,ebx
c0027daf:	d3 ee                	shr    esi,cl
c0027db1:	09 f7                	or     edi,esi
c0027db3:	31 db                	xor    ebx,ebx
c0027db5:	eb 3b                	jmp    c0027df2 <__muldf3+0x292>
c0027db7:	83 c3 1f             	add    ebx,0x1f
c0027dba:	89 f0                	mov    eax,esi
c0027dbc:	88 d9                	mov    cl,bl
c0027dbe:	d3 e0                	shl    eax,cl
c0027dc0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dc3:	89 f8                	mov    eax,edi
c0027dc5:	88 d1                	mov    cl,dl
c0027dc7:	d3 e8                	shr    eax,cl
c0027dc9:	89 c1                	mov    ecx,eax
c0027dcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dce:	09 c8                	or     eax,ecx
c0027dd0:	88 d9                	mov    cl,bl
c0027dd2:	d3 e7                	shl    edi,cl
c0027dd4:	31 db                	xor    ebx,ebx
c0027dd6:	85 ff                	test   edi,edi
c0027dd8:	0f 95 c3             	setne  bl
c0027ddb:	89 df                	mov    edi,ebx
c0027ddd:	09 c7                	or     edi,eax
c0027ddf:	88 d1                	mov    cl,dl
c0027de1:	d3 ee                	shr    esi,cl
c0027de3:	31 db                	xor    ebx,ebx
c0027de5:	eb 0d                	jmp    c0027df4 <__muldf3+0x294>
c0027de7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027dec:	eb 02                	jmp    c0027df0 <__muldf3+0x290>
c0027dee:	31 db                	xor    ebx,ebx
c0027df0:	31 ff                	xor    edi,edi
c0027df2:	31 f6                	xor    esi,esi
c0027df4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027df7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027dfa:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027dff:	09 c3                	or     ebx,eax
c0027e01:	c1 e3 14             	shl    ebx,0x14
c0027e04:	89 f0                	mov    eax,esi
c0027e06:	c1 e8 0b             	shr    eax,0xb
c0027e09:	09 c3                	or     ebx,eax
c0027e0b:	89 f8                	mov    eax,edi
c0027e0d:	c1 e8 0b             	shr    eax,0xb
c0027e10:	c1 e6 15             	shl    esi,0x15
c0027e13:	09 c6                	or     esi,eax
c0027e15:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e1b:	0f 95 c1             	setne  cl
c0027e1e:	09 c8                	or     eax,ecx
c0027e20:	83 e0 01             	and    eax,0x1
c0027e23:	c1 ef 0a             	shr    edi,0xa
c0027e26:	21 c7                	and    edi,eax
c0027e28:	01 f7                	add    edi,esi
c0027e2a:	83 d3 00             	adc    ebx,0x0
c0027e2d:	89 da                	mov    edx,ebx
c0027e2f:	eb 03                	jmp    c0027e34 <__muldf3+0x2d4>
c0027e31:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e34:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e37:	89 f8                	mov    eax,edi
c0027e39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e3c:	83 c4 24             	add    esp,0x24
c0027e3f:	5b                   	pop    ebx
c0027e40:	5e                   	pop    esi
c0027e41:	5f                   	pop    edi
c0027e42:	5d                   	pop    ebp
c0027e43:	c3                   	ret    

c0027e44 <__divdf3>:
c0027e44:	55                   	push   ebp
c0027e45:	89 e5                	mov    ebp,esp
c0027e47:	57                   	push   edi
c0027e48:	56                   	push   esi
c0027e49:	53                   	push   ebx
c0027e4a:	83 ec 2c             	sub    esp,0x2c
c0027e4d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e56:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e5c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e5f:	89 ce                	mov    esi,ecx
c0027e61:	89 c8                	mov    eax,ecx
c0027e63:	c1 f8 14             	sar    eax,0x14
c0027e66:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e69:	89 f8                	mov    eax,edi
c0027e6b:	89 fb                	mov    ebx,edi
c0027e6d:	c1 e3 0b             	shl    ebx,0xb
c0027e70:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e73:	c1 e6 0b             	shl    esi,0xb
c0027e76:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e7c:	c1 e8 15             	shr    eax,0x15
c0027e7f:	09 c6                	or     esi,eax
c0027e81:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e84:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e87:	89 c2                	mov    edx,eax
c0027e89:	c1 fa 14             	sar    edx,0x14
c0027e8c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e8f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e92:	89 de                	mov    esi,ebx
c0027e94:	c1 e6 0b             	shl    esi,0xb
c0027e97:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e9a:	c1 e0 0b             	shl    eax,0xb
c0027e9d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ea2:	c1 eb 15             	shr    ebx,0x15
c0027ea5:	09 d8                	or     eax,ebx
c0027ea7:	89 c2                	mov    edx,eax
c0027ea9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eac:	25 ff 07 00 00       	and    eax,0x7ff
c0027eb1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027eb4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027eb7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ebd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ec0:	29 d8                	sub    eax,ebx
c0027ec2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ec7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eca:	46                   	inc    esi
c0027ecb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ed1:	0f 85 a5 00 00 00    	jne    c0027f7c <__divdf3+0x138>
c0027ed7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eda:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027edd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ee1:	74 2a                	je     c0027f0d <__divdf3+0xc9>
c0027ee3:	85 f6                	test   esi,esi
c0027ee5:	0f 85 cc 02 00 00    	jne    c00281b7 <__divdf3+0x373>
c0027eeb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eee:	40                   	inc    eax
c0027eef:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ef4:	75 26                	jne    c0027f1c <__divdf3+0xd8>
c0027ef6:	85 db                	test   ebx,ebx
c0027ef8:	74 22                	je     c0027f1c <__divdf3+0xd8>
c0027efa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027efd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f03:	09 d0                	or     eax,edx
c0027f05:	0f 85 ac 02 00 00    	jne    c00281b7 <__divdf3+0x373>
c0027f0b:	eb 63                	jmp    c0027f70 <__divdf3+0x12c>
c0027f0d:	85 f6                	test   esi,esi
c0027f0f:	75 22                	jne    c0027f33 <__divdf3+0xef>
c0027f11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f14:	40                   	inc    eax
c0027f15:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f1a:	74 36                	je     c0027f52 <__divdf3+0x10e>
c0027f1c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f20:	0f 89 91 02 00 00    	jns    c00281b7 <__divdf3+0x373>
c0027f26:	89 f8                	mov    eax,edi
c0027f28:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f2e:	e9 80 02 00 00       	jmp    c00281b3 <__divdf3+0x36f>
c0027f33:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f36:	01 f6                	add    esi,esi
c0027f38:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f3b:	c1 ef 1f             	shr    edi,0x1f
c0027f3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f41:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f44:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f47:	09 f7                	or     edi,esi
c0027f49:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f4c:	78 2e                	js     c0027f7c <__divdf3+0x138>
c0027f4e:	89 c8                	mov    eax,ecx
c0027f50:	eb e1                	jmp    c0027f33 <__divdf3+0xef>
c0027f52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f55:	09 d0                	or     eax,edx
c0027f57:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f5b:	74 0f                	je     c0027f6c <__divdf3+0x128>
c0027f5d:	85 c0                	test   eax,eax
c0027f5f:	74 bb                	je     c0027f1c <__divdf3+0xd8>
c0027f61:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f64:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f67:	e9 4b 02 00 00       	jmp    c00281b7 <__divdf3+0x373>
c0027f6c:	85 c0                	test   eax,eax
c0027f6e:	75 ac                	jne    c0027f1c <__divdf3+0xd8>
c0027f70:	31 ff                	xor    edi,edi
c0027f72:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f77:	e9 3b 02 00 00       	jmp    c00281b7 <__divdf3+0x373>
c0027f7c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f7f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f82:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f88:	75 6b                	jne    c0027ff5 <__divdf3+0x1b1>
c0027f8a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f8d:	09 d6                	or     esi,edx
c0027f8f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f93:	74 28                	je     c0027fbd <__divdf3+0x179>
c0027f95:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f9b:	85 f6                	test   esi,esi
c0027f9d:	0f 85 14 02 00 00    	jne    c00281b7 <__divdf3+0x373>
c0027fa3:	31 ff                	xor    edi,edi
c0027fa5:	31 c9                	xor    ecx,ecx
c0027fa7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027faa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fad:	0f 89 04 02 00 00    	jns    c00281b7 <__divdf3+0x373>
c0027fb3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027fb8:	e9 fa 01 00 00       	jmp    c00281b7 <__divdf3+0x373>
c0027fbd:	85 f6                	test   esi,esi
c0027fbf:	75 1b                	jne    c0027fdc <__divdf3+0x198>
c0027fc1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fc4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fc7:	25 00 00 00 80       	and    eax,0x80000000
c0027fcc:	31 c9                	xor    ecx,ecx
c0027fce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027fd3:	89 cf                	mov    edi,ecx
c0027fd5:	89 c1                	mov    ecx,eax
c0027fd7:	e9 db 01 00 00       	jmp    c00281b7 <__divdf3+0x373>
c0027fdc:	01 d2                	add    edx,edx
c0027fde:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027fe1:	c1 eb 1f             	shr    ebx,0x1f
c0027fe4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fe7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027fea:	8d 48 01             	lea    ecx,[eax+0x1]
c0027fed:	09 da                	or     edx,ebx
c0027fef:	78 04                	js     c0027ff5 <__divdf3+0x1b1>
c0027ff1:	89 c8                	mov    eax,ecx
c0027ff3:	eb e7                	jmp    c0027fdc <__divdf3+0x198>
c0027ff5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ff8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ffe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028004:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028007:	39 d6                	cmp    esi,edx
c0028009:	77 0d                	ja     c0028018 <__divdf3+0x1d4>
c002800b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002800e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028011:	72 1b                	jb     c002802e <__divdf3+0x1ea>
c0028013:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028016:	75 16                	jne    c002802e <__divdf3+0x1ea>
c0028018:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002801b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002801e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028021:	83 de 00             	sbb    esi,0x0
c0028024:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028027:	ba 01 00 00 00       	mov    edx,0x1
c002802c:	eb 02                	jmp    c0028030 <__divdf3+0x1ec>
c002802e:	31 d2                	xor    edx,edx
c0028030:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028037:	31 ff                	xor    edi,edi
c0028039:	01 ff                	add    edi,edi
c002803b:	89 d1                	mov    ecx,edx
c002803d:	c1 e9 1f             	shr    ecx,0x1f
c0028040:	09 cf                	or     edi,ecx
c0028042:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028045:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028048:	89 da                	mov    edx,ebx
c002804a:	89 f3                	mov    ebx,esi
c002804c:	8d 34 36             	lea    esi,[esi+esi*1]
c002804f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028052:	c1 e9 1f             	shr    ecx,0x1f
c0028055:	09 ce                	or     esi,ecx
c0028057:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002805a:	01 c9                	add    ecx,ecx
c002805c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002805f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028062:	85 db                	test   ebx,ebx
c0028064:	78 29                	js     c002808f <__divdf3+0x24b>
c0028066:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028069:	72 07                	jb     c0028072 <__divdf3+0x22e>
c002806b:	75 3c                	jne    c00280a9 <__divdf3+0x265>
c002806d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028070:	77 37                	ja     c00280a9 <__divdf3+0x265>
c0028072:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028075:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028078:	31 d2                	xor    edx,edx
c002807a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002807d:	0f 97 c2             	seta   dl
c0028080:	29 d6                	sub    esi,edx
c0028082:	89 d9                	mov    ecx,ebx
c0028084:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028087:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002808a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002808d:	eb 17                	jmp    c00280a6 <__divdf3+0x262>
c002808f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028092:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028095:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028098:	0f 97 c1             	seta   cl
c002809b:	0f b6 c9             	movzx  ecx,cl
c002809e:	29 ce                	sub    esi,ecx
c00280a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280a3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280a6:	83 ca 01             	or     edx,0x1
c00280a9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280ac:	75 8b                	jne    c0028039 <__divdf3+0x1f5>
c00280ae:	c1 e7 09             	shl    edi,0x9
c00280b1:	89 d1                	mov    ecx,edx
c00280b3:	c1 e9 17             	shr    ecx,0x17
c00280b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280b9:	09 f3                	or     ebx,esi
c00280bb:	0f 95 c3             	setne  bl
c00280be:	0f b6 db             	movzx  ebx,bl
c00280c1:	c1 e2 09             	shl    edx,0x9
c00280c4:	09 d3                	or     ebx,edx
c00280c6:	89 ca                	mov    edx,ecx
c00280c8:	09 fa                	or     edx,edi
c00280ca:	78 0c                	js     c00280d8 <__divdf3+0x294>
c00280cc:	01 d2                	add    edx,edx
c00280ce:	89 d9                	mov    ecx,ebx
c00280d0:	c1 e9 1f             	shr    ecx,0x1f
c00280d3:	09 ca                	or     edx,ecx
c00280d5:	01 db                	add    ebx,ebx
c00280d7:	48                   	dec    eax
c00280d8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280dd:	0f 8f 83 00 00 00    	jg     c0028166 <__divdf3+0x322>
c00280e3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00280e9:	85 c0                	test   eax,eax
c00280eb:	0f 8f 82 00 00 00    	jg     c0028173 <__divdf3+0x32f>
c00280f1:	83 f8 cc             	cmp    eax,0xffffffcc
c00280f4:	7c 77                	jl     c002816d <__divdf3+0x329>
c00280f6:	be 01 00 00 00       	mov    esi,0x1
c00280fb:	29 c6                	sub    esi,eax
c00280fd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028103:	83 fe 1f             	cmp    esi,0x1f
c0028106:	7e 2f                	jle    c0028137 <__divdf3+0x2f3>
c0028108:	83 fe 20             	cmp    esi,0x20
c002810b:	75 0a                	jne    c0028117 <__divdf3+0x2d3>
c002810d:	85 db                	test   ebx,ebx
c002810f:	0f 95 c3             	setne  bl
c0028112:	0f b6 db             	movzx  ebx,bl
c0028115:	eb 1a                	jmp    c0028131 <__divdf3+0x2ed>
c0028117:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002811a:	89 d7                	mov    edi,edx
c002811c:	d3 e7                	shl    edi,cl
c002811e:	89 f9                	mov    ecx,edi
c0028120:	09 d9                	or     ecx,ebx
c0028122:	0f 95 c3             	setne  bl
c0028125:	0f b6 db             	movzx  ebx,bl
c0028128:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002812d:	29 c1                	sub    ecx,eax
c002812f:	d3 ea                	shr    edx,cl
c0028131:	09 d3                	or     ebx,edx
c0028133:	31 c0                	xor    eax,eax
c0028135:	eb 3a                	jmp    c0028171 <__divdf3+0x32d>
c0028137:	83 c0 1f             	add    eax,0x1f
c002813a:	89 d7                	mov    edi,edx
c002813c:	88 c1                	mov    cl,al
c002813e:	d3 e7                	shl    edi,cl
c0028140:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028143:	89 df                	mov    edi,ebx
c0028145:	89 f1                	mov    ecx,esi
c0028147:	d3 ef                	shr    edi,cl
c0028149:	89 f9                	mov    ecx,edi
c002814b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002814e:	09 cf                	or     edi,ecx
c0028150:	88 c1                	mov    cl,al
c0028152:	d3 e3                	shl    ebx,cl
c0028154:	85 db                	test   ebx,ebx
c0028156:	0f 95 c3             	setne  bl
c0028159:	0f b6 db             	movzx  ebx,bl
c002815c:	09 fb                	or     ebx,edi
c002815e:	89 f1                	mov    ecx,esi
c0028160:	d3 ea                	shr    edx,cl
c0028162:	31 c0                	xor    eax,eax
c0028164:	eb 0d                	jmp    c0028173 <__divdf3+0x32f>
c0028166:	b8 ff 07 00 00       	mov    eax,0x7ff
c002816b:	eb 02                	jmp    c002816f <__divdf3+0x32b>
c002816d:	31 c0                	xor    eax,eax
c002816f:	31 db                	xor    ebx,ebx
c0028171:	31 d2                	xor    edx,edx
c0028173:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028176:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028179:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002817f:	09 c8                	or     eax,ecx
c0028181:	c1 e0 14             	shl    eax,0x14
c0028184:	89 d1                	mov    ecx,edx
c0028186:	c1 e9 0b             	shr    ecx,0xb
c0028189:	09 c8                	or     eax,ecx
c002818b:	89 c6                	mov    esi,eax
c002818d:	89 d9                	mov    ecx,ebx
c002818f:	c1 e9 0b             	shr    ecx,0xb
c0028192:	c1 e2 15             	shl    edx,0x15
c0028195:	09 ca                	or     edx,ecx
c0028197:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002819d:	0f 95 c0             	setne  al
c00281a0:	09 c1                	or     ecx,eax
c00281a2:	83 e1 01             	and    ecx,0x1
c00281a5:	c1 eb 0a             	shr    ebx,0xa
c00281a8:	21 cb                	and    ebx,ecx
c00281aa:	01 d3                	add    ebx,edx
c00281ac:	89 d8                	mov    eax,ebx
c00281ae:	83 d6 00             	adc    esi,0x0
c00281b1:	89 f2                	mov    edx,esi
c00281b3:	89 c7                	mov    edi,eax
c00281b5:	89 d1                	mov    ecx,edx
c00281b7:	89 f8                	mov    eax,edi
c00281b9:	89 ca                	mov    edx,ecx
c00281bb:	83 c4 2c             	add    esp,0x2c
c00281be:	5b                   	pop    ebx
c00281bf:	5e                   	pop    esi
c00281c0:	5f                   	pop    edi
c00281c1:	5d                   	pop    ebp
c00281c2:	c3                   	ret    

c00281c3 <__floatsidf>:
c00281c3:	55                   	push   ebp
c00281c4:	89 e5                	mov    ebp,esp
c00281c6:	56                   	push   esi
c00281c7:	53                   	push   ebx
c00281c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281cb:	85 db                	test   ebx,ebx
c00281cd:	7e 15                	jle    c00281e4 <__floatsidf+0x21>
c00281cf:	0f bd cb             	bsr    ecx,ebx
c00281d2:	83 f1 1f             	xor    ecx,0x1f
c00281d5:	d3 e3                	shl    ebx,cl
c00281d7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281dd:	b8 1e 04 00 00       	mov    eax,0x41e
c00281e2:	eb 21                	jmp    c0028205 <__floatsidf+0x42>
c00281e4:	b8 00 00 00 00       	mov    eax,0x0
c00281e9:	ba 00 00 00 00       	mov    edx,0x0
c00281ee:	74 2a                	je     c002821a <__floatsidf+0x57>
c00281f0:	f7 db                	neg    ebx
c00281f2:	0f bd cb             	bsr    ecx,ebx
c00281f5:	83 f1 1f             	xor    ecx,0x1f
c00281f8:	d3 e3                	shl    ebx,cl
c00281fa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028200:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028205:	29 c8                	sub    eax,ecx
c0028207:	c1 e0 14             	shl    eax,0x14
c002820a:	89 c1                	mov    ecx,eax
c002820c:	89 de                	mov    esi,ebx
c002820e:	c1 ee 0b             	shr    esi,0xb
c0028211:	09 f1                	or     ecx,esi
c0028213:	89 ca                	mov    edx,ecx
c0028215:	c1 e3 15             	shl    ebx,0x15
c0028218:	89 d8                	mov    eax,ebx
c002821a:	5b                   	pop    ebx
c002821b:	5e                   	pop    esi
c002821c:	5d                   	pop    ebp
c002821d:	c3                   	ret    

c002821e <__floatunsidf>:
c002821e:	55                   	push   ebp
c002821f:	89 e5                	mov    ebp,esp
c0028221:	56                   	push   esi
c0028222:	53                   	push   ebx
c0028223:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028226:	85 db                	test   ebx,ebx
c0028228:	74 2a                	je     c0028254 <__floatunsidf+0x36>
c002822a:	0f bd cb             	bsr    ecx,ebx
c002822d:	83 f1 1f             	xor    ecx,0x1f
c0028230:	d3 e3                	shl    ebx,cl
c0028232:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028238:	b8 1e 04 00 00       	mov    eax,0x41e
c002823d:	29 c8                	sub    eax,ecx
c002823f:	c1 e0 14             	shl    eax,0x14
c0028242:	89 c1                	mov    ecx,eax
c0028244:	89 de                	mov    esi,ebx
c0028246:	c1 ee 0b             	shr    esi,0xb
c0028249:	09 f1                	or     ecx,esi
c002824b:	89 ca                	mov    edx,ecx
c002824d:	c1 e3 15             	shl    ebx,0x15
c0028250:	89 d8                	mov    eax,ebx
c0028252:	eb 04                	jmp    c0028258 <__floatunsidf+0x3a>
c0028254:	31 c0                	xor    eax,eax
c0028256:	31 d2                	xor    edx,edx
c0028258:	5b                   	pop    ebx
c0028259:	5e                   	pop    esi
c002825a:	5d                   	pop    ebp
c002825b:	c3                   	ret    

c002825c <__fixdfsi>:
c002825c:	55                   	push   ebp
c002825d:	89 e5                	mov    ebp,esp
c002825f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028262:	89 d1                	mov    ecx,edx
c0028264:	c1 e1 0b             	shl    ecx,0xb
c0028267:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002826d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028270:	c1 e8 15             	shr    eax,0x15
c0028273:	09 c1                	or     ecx,eax
c0028275:	c1 fa 14             	sar    edx,0x14
c0028278:	78 1f                	js     c0028299 <__fixdfsi+0x3d>
c002827a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028280:	31 c0                	xor    eax,eax
c0028282:	83 fa 1e             	cmp    edx,0x1e
c0028285:	77 40                	ja     c00282c7 <__fixdfsi+0x6b>
c0028287:	89 c8                	mov    eax,ecx
c0028289:	0d 00 00 00 80       	or     eax,0x80000000
c002828e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028293:	29 d1                	sub    ecx,edx
c0028295:	d3 e8                	shr    eax,cl
c0028297:	eb 2e                	jmp    c00282c7 <__fixdfsi+0x6b>
c0028299:	31 c0                	xor    eax,eax
c002829b:	81 c2 01 04 00 00    	add    edx,0x401
c00282a1:	78 24                	js     c00282c7 <__fixdfsi+0x6b>
c00282a3:	83 fa 1e             	cmp    edx,0x1e
c00282a6:	7e 09                	jle    c00282b1 <__fixdfsi+0x55>
c00282a8:	83 fa 1f             	cmp    edx,0x1f
c00282ab:	75 18                	jne    c00282c5 <__fixdfsi+0x69>
c00282ad:	85 c9                	test   ecx,ecx
c00282af:	75 14                	jne    c00282c5 <__fixdfsi+0x69>
c00282b1:	89 c8                	mov    eax,ecx
c00282b3:	0d 00 00 00 80       	or     eax,0x80000000
c00282b8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282bd:	29 d1                	sub    ecx,edx
c00282bf:	d3 e8                	shr    eax,cl
c00282c1:	f7 d8                	neg    eax
c00282c3:	eb 02                	jmp    c00282c7 <__fixdfsi+0x6b>
c00282c5:	31 c0                	xor    eax,eax
c00282c7:	5d                   	pop    ebp
c00282c8:	c3                   	ret    

c00282c9 <__fixunsdfsi>:
c00282c9:	55                   	push   ebp
c00282ca:	89 e5                	mov    ebp,esp
c00282cc:	53                   	push   ebx
c00282cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282d3:	89 d3                	mov    ebx,edx
c00282d5:	c1 fb 14             	sar    ebx,0x14
c00282d8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282de:	31 c0                	xor    eax,eax
c00282e0:	83 fb 1f             	cmp    ebx,0x1f
c00282e3:	77 1d                	ja     c0028302 <__fixunsdfsi+0x39>
c00282e5:	89 d0                	mov    eax,edx
c00282e7:	c1 e0 0b             	shl    eax,0xb
c00282ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282ef:	c1 e9 15             	shr    ecx,0x15
c00282f2:	09 c8                	or     eax,ecx
c00282f4:	0d 00 00 00 80       	or     eax,0x80000000
c00282f9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282fe:	29 d9                	sub    ecx,ebx
c0028300:	d3 e8                	shr    eax,cl
c0028302:	5b                   	pop    ebx
c0028303:	5d                   	pop    ebp
c0028304:	c3                   	ret    

c0028305 <__cmpdf2>:
c0028305:	55                   	push   ebp
c0028306:	89 e5                	mov    ebp,esp
c0028308:	57                   	push   edi
c0028309:	56                   	push   esi
c002830a:	53                   	push   ebx
c002830b:	83 ec 0c             	sub    esp,0xc
c002830e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028311:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028314:	89 ca                	mov    edx,ecx
c0028316:	c1 ea 14             	shr    edx,0x14
c0028319:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002831f:	89 cb                	mov    ebx,ecx
c0028321:	c1 fb 1f             	sar    ebx,0x1f
c0028324:	31 da                	xor    edx,ebx
c0028326:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028329:	89 df                	mov    edi,ebx
c002832b:	c1 e7 0b             	shl    edi,0xb
c002832e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028331:	c1 e1 0b             	shl    ecx,0xb
c0028334:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002833a:	c1 eb 15             	shr    ebx,0x15
c002833d:	09 d9                	or     ecx,ebx
c002833f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028342:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028345:	89 ce                	mov    esi,ecx
c0028347:	c1 ee 14             	shr    esi,0x14
c002834a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028350:	89 cb                	mov    ebx,ecx
c0028352:	c1 fb 1f             	sar    ebx,0x1f
c0028355:	31 de                	xor    esi,ebx
c0028357:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002835a:	89 df                	mov    edi,ebx
c002835c:	c1 e7 0b             	shl    edi,0xb
c002835f:	c1 e1 0b             	shl    ecx,0xb
c0028362:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028368:	c1 eb 15             	shr    ebx,0x15
c002836b:	09 d9                	or     ecx,ebx
c002836d:	89 d3                	mov    ebx,edx
c002836f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028375:	43                   	inc    ebx
c0028376:	83 fb 01             	cmp    ebx,0x1
c0028379:	77 08                	ja     c0028383 <__cmpdf2+0x7e>
c002837b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002837e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028381:	75 68                	jne    c00283eb <__cmpdf2+0xe6>
c0028383:	89 f3                	mov    ebx,esi
c0028385:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002838b:	43                   	inc    ebx
c002838c:	83 fb 01             	cmp    ebx,0x1
c002838f:	77 06                	ja     c0028397 <__cmpdf2+0x92>
c0028391:	89 fb                	mov    ebx,edi
c0028393:	09 cb                	or     ebx,ecx
c0028395:	75 54                	jne    c00283eb <__cmpdf2+0xe6>
c0028397:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002839a:	09 f8                	or     eax,edi
c002839c:	09 c8                	or     eax,ecx
c002839e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283a1:	75 12                	jne    c00283b5 <__cmpdf2+0xb0>
c00283a3:	8d 42 01             	lea    eax,[edx+0x1]
c00283a6:	83 f8 01             	cmp    eax,0x1
c00283a9:	77 0a                	ja     c00283b5 <__cmpdf2+0xb0>
c00283ab:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283ae:	31 c0                	xor    eax,eax
c00283b0:	83 fb 01             	cmp    ebx,0x1
c00283b3:	76 36                	jbe    c00283eb <__cmpdf2+0xe6>
c00283b5:	b8 01 00 00 00       	mov    eax,0x1
c00283ba:	39 f2                	cmp    edx,esi
c00283bc:	7f 2d                	jg     c00283eb <__cmpdf2+0xe6>
c00283be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283c3:	7c 26                	jl     c00283eb <__cmpdf2+0xe6>
c00283c5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283c8:	77 07                	ja     c00283d1 <__cmpdf2+0xcc>
c00283ca:	72 16                	jb     c00283e2 <__cmpdf2+0xdd>
c00283cc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283cf:	76 0a                	jbe    c00283db <__cmpdf2+0xd6>
c00283d1:	89 d0                	mov    eax,edx
c00283d3:	c1 f8 1f             	sar    eax,0x1f
c00283d6:	83 c8 01             	or     eax,0x1
c00283d9:	eb 10                	jmp    c00283eb <__cmpdf2+0xe6>
c00283db:	b8 00 00 00 00       	mov    eax,0x0
c00283e0:	73 09                	jae    c00283eb <__cmpdf2+0xe6>
c00283e2:	89 d0                	mov    eax,edx
c00283e4:	c1 f8 1f             	sar    eax,0x1f
c00283e7:	83 e0 02             	and    eax,0x2
c00283ea:	48                   	dec    eax
c00283eb:	83 c4 0c             	add    esp,0xc
c00283ee:	5b                   	pop    ebx
c00283ef:	5e                   	pop    esi
c00283f0:	5f                   	pop    edi
c00283f1:	5d                   	pop    ebp
c00283f2:	c3                   	ret    

c00283f3 <__eqdf2>:
c00283f3:	55                   	push   ebp
c00283f4:	89 e5                	mov    ebp,esp
c00283f6:	50                   	push   eax
c00283f7:	6a 01                	push   0x1
c00283f9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028402:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028405:	e8 fb fe ff ff       	call   c0028305 <__cmpdf2>
c002840a:	83 c4 18             	add    esp,0x18
c002840d:	c9                   	leave  
c002840e:	c3                   	ret    

c002840f <__nedf2>:
c002840f:	eb e2                	jmp    c00283f3 <__eqdf2>

c0028411 <__gtdf2>:
c0028411:	55                   	push   ebp
c0028412:	89 e5                	mov    ebp,esp
c0028414:	50                   	push   eax
c0028415:	6a ff                	push   0xffffffff
c0028417:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002841a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002841d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028420:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028423:	e8 dd fe ff ff       	call   c0028305 <__cmpdf2>
c0028428:	83 c4 18             	add    esp,0x18
c002842b:	c9                   	leave  
c002842c:	c3                   	ret    

c002842d <__gedf2>:
c002842d:	eb e2                	jmp    c0028411 <__gtdf2>

c002842f <__ltdf2>:
c002842f:	eb c2                	jmp    c00283f3 <__eqdf2>

c0028431 <__ledf2>:
c0028431:	eb c0                	jmp    c00283f3 <__eqdf2>

c0028433 <__truncdfsf2>:
c0028433:	55                   	push   ebp
c0028434:	89 e5                	mov    ebp,esp
c0028436:	57                   	push   edi
c0028437:	56                   	push   esi
c0028438:	53                   	push   ebx
c0028439:	83 ec 0c             	sub    esp,0xc
c002843c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002843f:	89 d1                	mov    ecx,edx
c0028441:	c1 f9 14             	sar    ecx,0x14
c0028444:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028447:	89 df                	mov    edi,ebx
c0028449:	c1 e7 0b             	shl    edi,0xb
c002844c:	89 d0                	mov    eax,edx
c002844e:	c1 e0 0b             	shl    eax,0xb
c0028451:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028456:	c1 eb 15             	shr    ebx,0x15
c0028459:	09 d8                	or     eax,ebx
c002845b:	89 cb                	mov    ebx,ecx
c002845d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028463:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028469:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002846f:	0f 86 9e 00 00 00    	jbe    c0028513 <__truncdfsf2+0xe0>
c0028475:	85 db                	test   ebx,ebx
c0028477:	75 0a                	jne    c0028483 <__truncdfsf2+0x50>
c0028479:	c1 fa 17             	sar    edx,0x17
c002847c:	30 d2                	xor    dl,dl
c002847e:	e9 84 00 00 00       	jmp    c0028507 <__truncdfsf2+0xd4>
c0028483:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028489:	83 fe 83             	cmp    esi,0xffffff83
c002848c:	7d 4b                	jge    c00284d9 <__truncdfsf2+0xa6>
c002848e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028493:	29 f1                	sub    ecx,esi
c0028495:	83 f9 1f             	cmp    ecx,0x1f
c0028498:	7f 6b                	jg     c0028505 <__truncdfsf2+0xd2>
c002849a:	0d 00 00 00 80       	or     eax,0x80000000
c002849f:	89 c3                	mov    ebx,eax
c00284a1:	d3 eb                	shr    ebx,cl
c00284a3:	be 01 00 00 00       	mov    esi,0x1
c00284a8:	d3 e6                	shl    esi,cl
c00284aa:	4e                   	dec    esi
c00284ab:	21 f0                	and    eax,esi
c00284ad:	09 f8                	or     eax,edi
c00284af:	0f 95 c0             	setne  al
c00284b2:	0f b6 c0             	movzx  eax,al
c00284b5:	09 c3                	or     ebx,eax
c00284b7:	89 d9                	mov    ecx,ebx
c00284b9:	c1 e9 08             	shr    ecx,0x8
c00284bc:	f6 c3 7f             	test   bl,0x7f
c00284bf:	0f 95 c0             	setne  al
c00284c2:	09 c8                	or     eax,ecx
c00284c4:	83 e0 01             	and    eax,0x1
c00284c7:	c1 eb 07             	shr    ebx,0x7
c00284ca:	21 c3                	and    ebx,eax
c00284cc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284d2:	09 d1                	or     ecx,edx
c00284d4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284d7:	eb 76                	jmp    c002854f <__truncdfsf2+0x11c>
c00284d9:	83 c6 80             	add    esi,0xffffff80
c00284dc:	7e 1d                	jle    c00284fb <__truncdfsf2+0xc8>
c00284de:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00284e4:	75 0b                	jne    c00284f1 <__truncdfsf2+0xbe>
c00284e6:	09 f8                	or     eax,edi
c00284e8:	74 09                	je     c00284f3 <__truncdfsf2+0xc0>
c00284ea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00284ef:	eb 02                	jmp    c00284f3 <__truncdfsf2+0xc0>
c00284f1:	31 c0                	xor    eax,eax
c00284f3:	c1 fa 17             	sar    edx,0x17
c00284f6:	80 ca ff             	or     dl,0xff
c00284f9:	eb 0e                	jmp    c0028509 <__truncdfsf2+0xd6>
c00284fb:	c1 fa 1f             	sar    edx,0x1f
c00284fe:	c1 e2 08             	shl    edx,0x8
c0028501:	09 ca                	or     edx,ecx
c0028503:	eb 04                	jmp    c0028509 <__truncdfsf2+0xd6>
c0028505:	31 d2                	xor    edx,edx
c0028507:	31 c0                	xor    eax,eax
c0028509:	c1 e2 17             	shl    edx,0x17
c002850c:	c1 e8 08             	shr    eax,0x8
c002850f:	09 d0                	or     eax,edx
c0028511:	eb 3c                	jmp    c002854f <__truncdfsf2+0x11c>
c0028513:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028519:	89 ca                	mov    edx,ecx
c002851b:	c1 fa 0b             	sar    edx,0xb
c002851e:	c1 e2 08             	shl    edx,0x8
c0028521:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028524:	31 db                	xor    ebx,ebx
c0028526:	85 ff                	test   edi,edi
c0028528:	0f 95 c3             	setne  bl
c002852b:	09 d8                	or     eax,ebx
c002852d:	89 c3                	mov    ebx,eax
c002852f:	c1 eb 08             	shr    ebx,0x8
c0028532:	a8 7f                	test   al,0x7f
c0028534:	0f 95 c2             	setne  dl
c0028537:	89 d6                	mov    esi,edx
c0028539:	09 de                	or     esi,ebx
c002853b:	83 e6 01             	and    esi,0x1
c002853e:	c1 e8 07             	shr    eax,0x7
c0028541:	21 f0                	and    eax,esi
c0028543:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028546:	09 ca                	or     edx,ecx
c0028548:	c1 e2 17             	shl    edx,0x17
c002854b:	09 da                	or     edx,ebx
c002854d:	01 d0                	add    eax,edx
c002854f:	83 c4 0c             	add    esp,0xc
c0028552:	5b                   	pop    ebx
c0028553:	5e                   	pop    esi
c0028554:	5f                   	pop    edi
c0028555:	5d                   	pop    ebp
c0028556:	c3                   	ret    

c0028557 <__extendsfdf2>:
c0028557:	55                   	push   ebp
c0028558:	89 e5                	mov    ebp,esp
c002855a:	57                   	push   edi
c002855b:	56                   	push   esi
c002855c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002855f:	89 d1                	mov    ecx,edx
c0028561:	c1 f9 17             	sar    ecx,0x17
c0028564:	c1 e2 08             	shl    edx,0x8
c0028567:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002856d:	89 c8                	mov    eax,ecx
c002856f:	80 e4 f8             	and    ah,0xf8
c0028572:	8d 71 01             	lea    esi,[ecx+0x1]
c0028575:	81 e6 fe 00 00 00    	and    esi,0xfe
c002857b:	75 27                	jne    c00285a4 <__extendsfdf2+0x4d>
c002857d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028583:	75 18                	jne    c002859d <__extendsfdf2+0x46>
c0028585:	85 d2                	test   edx,edx
c0028587:	74 20                	je     c00285a9 <__extendsfdf2+0x52>
c0028589:	41                   	inc    ecx
c002858a:	01 d2                	add    edx,edx
c002858c:	79 fb                	jns    c0028589 <__extendsfdf2+0x32>
c002858e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028594:	29 c8                	sub    eax,ecx
c0028596:	05 81 03 00 00       	add    eax,0x381
c002859b:	eb 0c                	jmp    c00285a9 <__extendsfdf2+0x52>
c002859d:	05 00 07 00 00       	add    eax,0x700
c00285a2:	eb 05                	jmp    c00285a9 <__extendsfdf2+0x52>
c00285a4:	05 80 03 00 00       	add    eax,0x380
c00285a9:	c1 e0 14             	shl    eax,0x14
c00285ac:	89 c1                	mov    ecx,eax
c00285ae:	89 d0                	mov    eax,edx
c00285b0:	c1 e8 0b             	shr    eax,0xb
c00285b3:	09 c1                	or     ecx,eax
c00285b5:	c1 e2 15             	shl    edx,0x15
c00285b8:	89 d0                	mov    eax,edx
c00285ba:	89 ca                	mov    edx,ecx
c00285bc:	5e                   	pop    esi
c00285bd:	5f                   	pop    edi
c00285be:	5d                   	pop    ebp
c00285bf:	c3                   	ret    

c00285c0 <fabs>:
c00285c0:	83 ec 0c             	sub    esp,0xc
c00285c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285d7:	dd 04 24             	fld    QWORD PTR [esp]
c00285da:	83 c4 0c             	add    esp,0xc
c00285dd:	c3                   	ret    
c00285de:	66 90                	xchg   ax,ax

c00285e0 <lrint>:
c00285e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00285e4:	83 ec 04             	sub    esp,0x4
c00285e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00285ea:	58                   	pop    eax
c00285eb:	c3                   	ret    

c00285ec <lrintf>:
c00285ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00285f0:	83 ec 04             	sub    esp,0x4
c00285f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00285f6:	58                   	pop    eax
c00285f7:	c3                   	ret    

Disassembly of section .init:

c00285f8 <_init>:
c00285f8:	55                   	push   ebp
c00285f9:	89 e5                	mov    ebp,esp
c00285fb:	e8 18 7b fd ff       	call   c0000118 <frame_dummy>
c0028600:	e8 63 e0 ff ff       	call   c0026668 <__do_global_ctors_aux>
c0028605:	5d                   	pop    ebp
c0028606:	c3                   	ret    

Disassembly of section .fini:

c0028607 <_fini>:
c0028607:	55                   	push   ebp
c0028608:	89 e5                	mov    ebp,esp
c002860a:	e8 99 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002860f:	5d                   	pop    ebp
c0028610:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028612 <Computer::~Computer()>:
c0028612:	83 ec 0c             	sub    esp,0xc
c0028615:	ba 48 a1 02 c0       	mov    edx,0xc002a148
c002861a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861e:	89 10                	mov    DWORD PTR [eax],edx
c0028620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028624:	83 ec 0c             	sub    esp,0xc
c0028627:	50                   	push   eax
c0028628:	e8 c5 bb fe ff       	call   c00141f2 <Device::~Device()>
c002862d:	83 c4 10             	add    esp,0x10
c0028630:	90                   	nop
c0028631:	83 c4 0c             	add    esp,0xc
c0028634:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028636 <Computer::~Computer()>:
c0028636:	83 ec 0c             	sub    esp,0xc
c0028639:	83 ec 0c             	sub    esp,0xc
c002863c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028640:	e8 cd ff ff ff       	call   c0028612 <Computer::~Computer()>
c0028645:	83 c4 10             	add    esp,0x10
c0028648:	83 ec 08             	sub    esp,0x8
c002864b:	68 ec 01 00 00       	push   0x1ec
c0028650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028654:	e8 c1 a7 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028659:	83 c4 10             	add    esp,0x10
c002865c:	83 c4 0c             	add    esp,0xc
c002865f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028660 <idleCommon()>:
c0028660:	83 ec 0c             	sub    esp,0xc
c0028663:	e8 1e 57 ff ff       	call   c001dd86 <lockScheduler()>
c0028668:	e8 55 5a ff ff       	call   c001e0c2 <schedule()>
c002866d:	83 c4 0c             	add    esp,0xc
c0028670:	e9 13 57 ff ff       	jmp    c001dd88 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028676 <LinkedList<UnixFile>::~LinkedList()>:
c0028676:	90                   	nop
c0028677:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028678 <LinkedList<UnixFile>::LinkedList()>:
c0028678:	83 ec 0c             	sub    esp,0xc
c002867b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002869b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286bb:	83 ec 0c             	sub    esp,0xc
c00286be:	68 06 a4 02 c0       	push   0xc002a406
c00286c3:	e8 32 a8 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00286c8:	83 c4 10             	add    esp,0x10
c00286cb:	90                   	nop
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286d0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286d8:	75 10                	jne    c00286ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286da:	83 ec 0c             	sub    esp,0xc
c00286dd:	68 20 a4 02 c0       	push   0xc002a420
c00286e2:	e8 c4 1e ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00286e7:	83 c4 10             	add    esp,0x10
c00286ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00286f0:	85 c0                	test   eax,eax
c00286f2:	74 34                	je     c0028728 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00286f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286fb:	85 c0                	test   eax,eax
c00286fd:	74 29                	je     c0028728 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00286ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028703:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028706:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002870a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028711:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028715:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002871f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028726:	eb 65                	jmp    c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872c:	8b 00                	mov    eax,DWORD PTR [eax]
c002872e:	85 c0                	test   eax,eax
c0028730:	75 4b                	jne    c002877d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028739:	85 c0                	test   eax,eax
c002873b:	75 40                	jne    c002877d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002873d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028741:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028745:	89 10                	mov    DWORD PTR [eax],edx
c0028747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002874f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028759:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028767:	85 c0                	test   eax,eax
c0028769:	74 22                	je     c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002876b:	83 ec 0c             	sub    esp,0xc
c002876e:	68 42 a4 02 c0       	push   0xc002a442
c0028773:	e8 33 1e ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028778:	83 c4 10             	add    esp,0x10
c002877b:	eb 10                	jmp    c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002877d:	83 ec 0c             	sub    esp,0xc
c0028780:	68 4c a4 02 c0       	push   0xc002a44c
c0028785:	e8 21 1e ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c002878a:	83 c4 10             	add    esp,0x10
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028794:	8d 50 01             	lea    edx,[eax+0x1]
c0028797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002879e:	90                   	nop
c002879f:	83 c4 0c             	add    esp,0xc
c00287a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287a4 <LinkedList<UnixFile>::getFirstElement()>:
c00287a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287ac <LinkedList<UnixFile>::removeFirst()>:
c00287ac:	83 ec 0c             	sub    esp,0xc
c00287af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287b5:	85 c0                	test   eax,eax
c00287b7:	75 12                	jne    c00287cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00287b9:	83 ec 0c             	sub    esp,0xc
c00287bc:	68 58 a4 02 c0       	push   0xc002a458
c00287c1:	e8 e5 1d ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00287c6:	83 c4 10             	add    esp,0x10
c00287c9:	eb 7e                	jmp    c0028849 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d5:	85 c0                	test   eax,eax
c00287d7:	74 10                	je     c00287e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287d9:	83 ec 0c             	sub    esp,0xc
c00287dc:	68 a3 a4 02 c0       	push   0xc002a4a3
c00287e1:	e8 c5 1d ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00287e6:	83 c4 10             	add    esp,0x10
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f2:	85 c0                	test   eax,eax
c00287f4:	75 33                	jne    c0028829 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00287f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028804:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002880b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028812:	83 f8 01             	cmp    eax,0x1
c0028815:	74 21                	je     c0028838 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028817:	83 ec 0c             	sub    esp,0xc
c002881a:	68 7c a4 02 c0       	push   0xc002a47c
c002881f:	e8 87 1d ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028824:	83 c4 10             	add    esp,0x10
c0028827:	eb 0f                	jmp    c0028838 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882d:	8b 00                	mov    eax,DWORD PTR [eax]
c002882f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028836:	89 10                	mov    DWORD PTR [eax],edx
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002883f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028849:	83 c4 0c             	add    esp,0xc
c002884c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002884e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002884e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028852:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028855:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028856 <DriverlessDevice::~DriverlessDevice()>:
c0028856:	ba 24 ac 02 c0       	mov    edx,0xc002ac24
c002885b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002885f:	89 10                	mov    DWORD PTR [eax],edx
c0028861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028865:	50                   	push   eax
c0028866:	e8 87 b9 fe ff       	call   c00141f2 <Device::~Device()>
c002886b:	83 c4 04             	add    esp,0x4
c002886e:	90                   	nop
c002886f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028870 <DriverlessDevice::~DriverlessDevice()>:
c0028870:	83 ec 0c             	sub    esp,0xc
c0028873:	83 ec 0c             	sub    esp,0xc
c0028876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002887a:	e8 d7 ff ff ff       	call   c0028856 <DriverlessDevice::~DriverlessDevice()>
c002887f:	83 c4 10             	add    esp,0x10
c0028882:	83 ec 08             	sub    esp,0x8
c0028885:	68 58 01 00 00       	push   0x158
c002888a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002888e:	e8 87 a5 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028893:	83 c4 10             	add    esp,0x10
c0028896:	83 c4 0c             	add    esp,0xc
c0028899:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002889a <LinkedList<Device>::addElement(Device*)>:
c002889a:	83 ec 0c             	sub    esp,0xc
c002889d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288a2:	75 10                	jne    c00288b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288a4:	83 ec 0c             	sub    esp,0xc
c00288a7:	68 20 a4 02 c0       	push   0xc002a420
c00288ac:	e8 fa 1c ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c00288b1:	83 c4 10             	add    esp,0x10
c00288b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ba:	85 c0                	test   eax,eax
c00288bc:	74 3a                	je     c00288f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288c5:	85 c0                	test   eax,eax
c00288c7:	74 2f                	je     c00288f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00288f6:	eb 68                	jmp    c0028960 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fe:	85 c0                	test   eax,eax
c0028900:	75 4e                	jne    c0028950 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028909:	85 c0                	test   eax,eax
c002890b:	75 43                	jne    c0028950 <LinkedList<Device>::addElement(Device*)+0xb6>
c002890d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028911:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028915:	89 10                	mov    DWORD PTR [eax],edx
c0028917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002891f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028929:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028937:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002893a:	85 c0                	test   eax,eax
c002893c:	74 22                	je     c0028960 <LinkedList<Device>::addElement(Device*)+0xc6>
c002893e:	83 ec 0c             	sub    esp,0xc
c0028941:	68 42 a4 02 c0       	push   0xc002a442
c0028946:	e8 60 1c ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c002894b:	83 c4 10             	add    esp,0x10
c002894e:	eb 10                	jmp    c0028960 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028950:	83 ec 0c             	sub    esp,0xc
c0028953:	68 4c a4 02 c0       	push   0xc002a44c
c0028958:	e8 4e 1c ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c002895d:	83 c4 10             	add    esp,0x10
c0028960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028967:	8d 50 01             	lea    edx,[eax+0x1]
c002896a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028971:	90                   	nop
c0028972:	83 c4 0c             	add    esp,0xc
c0028975:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028976 <LinkedList<Device>::LinkedList()>:
c0028976:	83 ec 0c             	sub    esp,0xc
c0028979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028992:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289b9:	83 ec 0c             	sub    esp,0xc
c00289bc:	68 06 a4 02 c0       	push   0xc002a406
c00289c1:	e8 34 a5 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c00289c6:	83 c4 10             	add    esp,0x10
c00289c9:	90                   	nop
c00289ca:	83 c4 0c             	add    esp,0xc
c00289cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00289d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00289d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289da:	8b 00                	mov    eax,DWORD PTR [eax]
c00289dc:	85 c0                	test   eax,eax
c00289de:	75 0e                	jne    c00289ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e7:	85 c0                	test   eax,eax
c00289e9:	75 03                	jne    c00289ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289eb:	b0 01                	mov    al,0x1
c00289ed:	c3                   	ret    
c00289ee:	b0 00                	mov    al,0x0
c00289f0:	90                   	nop
c00289f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00289f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00289f2:	83 ec 0c             	sub    esp,0xc
c00289f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fb:	85 c0                	test   eax,eax
c00289fd:	75 15                	jne    c0028a14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00289ff:	83 ec 0c             	sub    esp,0xc
c0028a02:	68 58 a4 02 c0       	push   0xc002a458
c0028a07:	e8 9f 1b ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028a0c:	83 c4 10             	add    esp,0x10
c0028a0f:	e9 88 00 00 00       	jmp    c0028a9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a1e:	85 c0                	test   eax,eax
c0028a20:	0f 95 c0             	setne  al
c0028a23:	84 c0                	test   al,al
c0028a25:	74 10                	je     c0028a37 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a27:	83 ec 0c             	sub    esp,0xc
c0028a2a:	68 a3 a4 02 c0       	push   0xc002a4a3
c0028a2f:	e8 77 1b ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028a34:	83 c4 10             	add    esp,0x10
c0028a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a40:	85 c0                	test   eax,eax
c0028a42:	0f 94 c0             	sete   al
c0028a45:	84 c0                	test   al,al
c0028a47:	74 33                	je     c0028a7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a65:	83 f8 01             	cmp    eax,0x1
c0028a68:	74 21                	je     c0028a8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a6a:	83 ec 0c             	sub    esp,0xc
c0028a6d:	68 7c a4 02 c0       	push   0xc002a47c
c0028a72:	e8 34 1b ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028a77:	83 c4 10             	add    esp,0x10
c0028a7a:	eb 0f                	jmp    c0028a8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a82:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a89:	89 10                	mov    DWORD PTR [eax],edx
c0028a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a92:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a9c:	83 c4 0c             	add    esp,0xc
c0028a9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028aa0:	83 ec 0c             	sub    esp,0xc
c0028aa3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028aa8:	75 10                	jne    c0028aba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028aaa:	83 ec 0c             	sub    esp,0xc
c0028aad:	68 20 a4 02 c0       	push   0xc002a420
c0028ab2:	e8 f4 1a ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028ab7:	83 c4 10             	add    esp,0x10
c0028aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ac0:	85 c0                	test   eax,eax
c0028ac2:	74 34                	je     c0028af8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028acb:	85 c0                	test   eax,eax
c0028acd:	74 29                	je     c0028af8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ad6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ada:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ae5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028af6:	eb 65                	jmp    c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028afe:	85 c0                	test   eax,eax
c0028b00:	75 4b                	jne    c0028b4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b09:	85 c0                	test   eax,eax
c0028b0b:	75 40                	jne    c0028b4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b15:	89 10                	mov    DWORD PTR [eax],edx
c0028b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b37:	85 c0                	test   eax,eax
c0028b39:	74 22                	je     c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b3b:	83 ec 0c             	sub    esp,0xc
c0028b3e:	68 42 a4 02 c0       	push   0xc002a442
c0028b43:	e8 63 1a ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028b48:	83 c4 10             	add    esp,0x10
c0028b4b:	eb 10                	jmp    c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b4d:	83 ec 0c             	sub    esp,0xc
c0028b50:	68 4c a4 02 c0       	push   0xc002a44c
c0028b55:	e8 51 1a ff ff       	call   c001a5ab <Krnl::panic(char const*)>
c0028b5a:	83 c4 10             	add    esp,0x10
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b64:	8d 50 01             	lea    edx,[eax+0x1]
c0028b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b6e:	90                   	nop
c0028b6f:	83 c4 0c             	add    esp,0xc
c0028b72:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b74 <ACPI::~ACPI()>:
c0028b74:	83 ec 0c             	sub    esp,0xc
c0028b77:	ba 78 b5 02 c0       	mov    edx,0xc002b578
c0028b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b80:	89 10                	mov    DWORD PTR [eax],edx
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	83 ec 0c             	sub    esp,0xc
c0028b89:	50                   	push   eax
c0028b8a:	e8 63 b6 fe ff       	call   c00141f2 <Device::~Device()>
c0028b8f:	83 c4 10             	add    esp,0x10
c0028b92:	90                   	nop
c0028b93:	83 c4 0c             	add    esp,0xc
c0028b96:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028b98 <ACPI::~ACPI()>:
c0028b98:	83 ec 0c             	sub    esp,0xc
c0028b9b:	83 ec 0c             	sub    esp,0xc
c0028b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba2:	e8 cd ff ff ff       	call   c0028b74 <ACPI::~ACPI()>
c0028ba7:	83 c4 10             	add    esp,0x10
c0028baa:	83 ec 08             	sub    esp,0x8
c0028bad:	68 68 12 00 00       	push   0x1268
c0028bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb6:	e8 5f a2 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028bbb:	83 c4 10             	add    esp,0x10
c0028bbe:	83 c4 0c             	add    esp,0xc
c0028bc1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028bc2 <CPU::~CPU()>:
c0028bc2:	83 ec 0c             	sub    esp,0xc
c0028bc5:	ba 68 b9 02 c0       	mov    edx,0xc002b968
c0028bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bce:	89 10                	mov    DWORD PTR [eax],edx
c0028bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd4:	83 ec 0c             	sub    esp,0xc
c0028bd7:	50                   	push   eax
c0028bd8:	e8 15 b6 fe ff       	call   c00141f2 <Device::~Device()>
c0028bdd:	83 c4 10             	add    esp,0x10
c0028be0:	90                   	nop
c0028be1:	83 c4 0c             	add    esp,0xc
c0028be4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028be6 <CPU::~CPU()>:
c0028be6:	83 ec 0c             	sub    esp,0xc
c0028be9:	83 ec 0c             	sub    esp,0xc
c0028bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf0:	e8 cd ff ff ff       	call   c0028bc2 <CPU::~CPU()>
c0028bf5:	83 c4 10             	add    esp,0x10
c0028bf8:	83 ec 08             	sub    esp,0x8
c0028bfb:	68 98 11 00 00       	push   0x1198
c0028c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c04:	e8 11 a2 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028c09:	83 c4 10             	add    esp,0x10
c0028c0c:	83 c4 0c             	add    esp,0xc
c0028c0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c10 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c10:	90                   	nop
c0028c11:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c12 <ThreadControlBlock::ThreadControlBlock()>:
c0028c12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c16:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c21:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c2c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c37:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c42:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c4a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c4e:	90                   	nop
c0028c4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c93:	83 ec 0c             	sub    esp,0xc
c0028c96:	68 06 a4 02 c0       	push   0xc002a406
c0028c9b:	e8 5a a2 fe ff       	call   c0012efa <Dbg::kprintf(char const*, ...)>
c0028ca0:	83 c4 10             	add    esp,0x10
c0028ca3:	90                   	nop
c0028ca4:	83 c4 0c             	add    esp,0xc
c0028ca7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ca8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cb0 <Vm::_FPUState::_FPUState()>:
c0028cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028cbb:	90                   	nop
c0028cbc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cbe <PCI::~PCI()>:
c0028cbe:	83 ec 0c             	sub    esp,0xc
c0028cc1:	ba dc c9 02 c0       	mov    edx,0xc002c9dc
c0028cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cca:	89 10                	mov    DWORD PTR [eax],edx
c0028ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	50                   	push   eax
c0028cd4:	e8 f1 ae fe ff       	call   c0013bca <Bus::~Bus()>
c0028cd9:	83 c4 10             	add    esp,0x10
c0028cdc:	90                   	nop
c0028cdd:	83 c4 0c             	add    esp,0xc
c0028ce0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028ce2 <PCI::~PCI()>:
c0028ce2:	83 ec 0c             	sub    esp,0xc
c0028ce5:	83 ec 0c             	sub    esp,0xc
c0028ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cec:	e8 cd ff ff ff       	call   c0028cbe <PCI::~PCI()>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	83 ec 08             	sub    esp,0x8
c0028cf7:	68 58 01 00 00       	push   0x158
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 15 a1 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 c4 0c             	add    esp,0xc
c0028d0b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d0c <IDE::~IDE()>:
c0028d0c:	83 ec 0c             	sub    esp,0xc
c0028d0f:	ba 40 cc 02 c0       	mov    edx,0xc002cc40
c0028d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d18:	89 10                	mov    DWORD PTR [eax],edx
c0028d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	50                   	push   eax
c0028d22:	e8 bb b9 fe ff       	call   c00146e2 <HardDiskController::~HardDiskController()>
c0028d27:	83 c4 10             	add    esp,0x10
c0028d2a:	90                   	nop
c0028d2b:	83 c4 0c             	add    esp,0xc
c0028d2e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d30 <IDE::~IDE()>:
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	83 ec 0c             	sub    esp,0xc
c0028d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d3a:	e8 cd ff ff ff       	call   c0028d0c <IDE::~IDE()>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	83 ec 08             	sub    esp,0x8
c0028d45:	68 70 02 00 00       	push   0x270
c0028d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4e:	e8 c7 a0 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028d53:	83 c4 10             	add    esp,0x10
c0028d56:	83 c4 0c             	add    esp,0xc
c0028d59:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d5a <SATABus::~SATABus()>:
c0028d5a:	83 ec 0c             	sub    esp,0xc
c0028d5d:	ba 20 cd 02 c0       	mov    edx,0xc002cd20
c0028d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d66:	89 10                	mov    DWORD PTR [eax],edx
c0028d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	50                   	push   eax
c0028d70:	e8 6d b9 fe ff       	call   c00146e2 <HardDiskController::~HardDiskController()>
c0028d75:	83 c4 10             	add    esp,0x10
c0028d78:	90                   	nop
c0028d79:	83 c4 0c             	add    esp,0xc
c0028d7c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d7e <SATABus::~SATABus()>:
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	83 ec 0c             	sub    esp,0xc
c0028d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d88:	e8 cd ff ff ff       	call   c0028d5a <SATABus::~SATABus()>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	83 ec 08             	sub    esp,0x8
c0028d93:	68 64 01 00 00       	push   0x164
c0028d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9c:	e8 79 a0 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 c4 0c             	add    esp,0xc
c0028da7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028da8 <ATA::~ATA()>:
c0028da8:	83 ec 0c             	sub    esp,0xc
c0028dab:	ba 6c cd 02 c0       	mov    edx,0xc002cd6c
c0028db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db4:	89 10                	mov    DWORD PTR [eax],edx
c0028db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	50                   	push   eax
c0028dbe:	e8 11 ba fe ff       	call   c00147d4 <PhysicalDisk::~PhysicalDisk()>
c0028dc3:	83 c4 10             	add    esp,0x10
c0028dc6:	90                   	nop
c0028dc7:	83 c4 0c             	add    esp,0xc
c0028dca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028dcc <ATA::~ATA()>:
c0028dcc:	83 ec 0c             	sub    esp,0xc
c0028dcf:	83 ec 0c             	sub    esp,0xc
c0028dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd6:	e8 cd ff ff ff       	call   c0028da8 <ATA::~ATA()>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	83 ec 08             	sub    esp,0x8
c0028de1:	68 7c 01 00 00       	push   0x17c
c0028de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dea:	e8 2b a0 fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028def:	83 c4 10             	add    esp,0x10
c0028df2:	83 c4 0c             	add    esp,0xc
c0028df5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028df6 <ATAPI::~ATAPI()>:
c0028df6:	83 ec 0c             	sub    esp,0xc
c0028df9:	ba a4 cd 02 c0       	mov    edx,0xc002cda4
c0028dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e02:	89 10                	mov    DWORD PTR [eax],edx
c0028e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	50                   	push   eax
c0028e0c:	e8 c3 b9 fe ff       	call   c00147d4 <PhysicalDisk::~PhysicalDisk()>
c0028e11:	83 c4 10             	add    esp,0x10
c0028e14:	90                   	nop
c0028e15:	83 c4 0c             	add    esp,0xc
c0028e18:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e1a <ATAPI::~ATAPI()>:
c0028e1a:	83 ec 0c             	sub    esp,0xc
c0028e1d:	83 ec 0c             	sub    esp,0xc
c0028e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e24:	e8 cd ff ff ff       	call   c0028df6 <ATAPI::~ATAPI()>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	83 ec 08             	sub    esp,0x8
c0028e2f:	68 80 01 00 00       	push   0x180
c0028e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e38:	e8 dd 9f fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	83 c4 0c             	add    esp,0xc
c0028e43:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e44 <SATA::~SATA()>:
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	ba 58 ce 02 c0       	mov    edx,0xc002ce58
c0028e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e50:	89 10                	mov    DWORD PTR [eax],edx
c0028e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e56:	83 ec 0c             	sub    esp,0xc
c0028e59:	50                   	push   eax
c0028e5a:	e8 75 b9 fe ff       	call   c00147d4 <PhysicalDisk::~PhysicalDisk()>
c0028e5f:	83 c4 10             	add    esp,0x10
c0028e62:	90                   	nop
c0028e63:	83 c4 0c             	add    esp,0xc
c0028e66:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e68 <SATA::~SATA()>:
c0028e68:	83 ec 0c             	sub    esp,0xc
c0028e6b:	83 ec 0c             	sub    esp,0xc
c0028e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e72:	e8 cd ff ff ff       	call   c0028e44 <SATA::~SATA()>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	83 ec 08             	sub    esp,0x8
c0028e7d:	68 7c 01 00 00       	push   0x17c
c0028e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e86:	e8 8f 9f fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028e8b:	83 c4 10             	add    esp,0x10
c0028e8e:	83 c4 0c             	add    esp,0xc
c0028e91:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028e92 <SATAPI::~SATAPI()>:
c0028e92:	83 ec 0c             	sub    esp,0xc
c0028e95:	ba 34 cf 02 c0       	mov    edx,0xc002cf34
c0028e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9e:	89 10                	mov    DWORD PTR [eax],edx
c0028ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	50                   	push   eax
c0028ea8:	e8 27 b9 fe ff       	call   c00147d4 <PhysicalDisk::~PhysicalDisk()>
c0028ead:	83 c4 10             	add    esp,0x10
c0028eb0:	90                   	nop
c0028eb1:	83 c4 0c             	add    esp,0xc
c0028eb4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028eb6 <SATAPI::~SATAPI()>:
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	83 ec 0c             	sub    esp,0xc
c0028ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec0:	e8 cd ff ff ff       	call   c0028e92 <SATAPI::~SATAPI()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	83 ec 08             	sub    esp,0x8
c0028ecb:	68 80 01 00 00       	push   0x180
c0028ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed4:	e8 41 9f fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 c4 0c             	add    esp,0xc
c0028edf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028ee0 <AVX::~AVX()>:
c0028ee0:	83 ec 0c             	sub    esp,0xc
c0028ee3:	ba 74 cf 02 c0       	mov    edx,0xc002cf74
c0028ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eec:	89 10                	mov    DWORD PTR [eax],edx
c0028eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef2:	83 ec 0c             	sub    esp,0xc
c0028ef5:	50                   	push   eax
c0028ef6:	e8 5d b9 fe ff       	call   c0014858 <FPU::~FPU()>
c0028efb:	83 c4 10             	add    esp,0x10
c0028efe:	90                   	nop
c0028eff:	83 c4 0c             	add    esp,0xc
c0028f02:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f04 <AVX::~AVX()>:
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	83 ec 0c             	sub    esp,0xc
c0028f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0e:	e8 cd ff ff ff       	call   c0028ee0 <AVX::~AVX()>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	83 ec 08             	sub    esp,0x8
c0028f19:	68 58 01 00 00       	push   0x158
c0028f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f22:	e8 f3 9e fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028f27:	83 c4 10             	add    esp,0x10
c0028f2a:	83 c4 0c             	add    esp,0xc
c0028f2d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f2e <MMX::~MMX()>:
c0028f2e:	83 ec 0c             	sub    esp,0xc
c0028f31:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0028f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3a:	89 10                	mov    DWORD PTR [eax],edx
c0028f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	50                   	push   eax
c0028f44:	e8 0f b9 fe ff       	call   c0014858 <FPU::~FPU()>
c0028f49:	83 c4 10             	add    esp,0x10
c0028f4c:	90                   	nop
c0028f4d:	83 c4 0c             	add    esp,0xc
c0028f50:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f52 <MMX::~MMX()>:
c0028f52:	83 ec 0c             	sub    esp,0xc
c0028f55:	83 ec 0c             	sub    esp,0xc
c0028f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5c:	e8 cd ff ff ff       	call   c0028f2e <MMX::~MMX()>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	83 ec 08             	sub    esp,0x8
c0028f67:	68 58 01 00 00       	push   0x158
c0028f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f70:	e8 a5 9e fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028f75:	83 c4 10             	add    esp,0x10
c0028f78:	83 c4 0c             	add    esp,0xc
c0028f7b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f7c <SSE::~SSE()>:
c0028f7c:	83 ec 0c             	sub    esp,0xc
c0028f7f:	ba f4 cf 02 c0       	mov    edx,0xc002cff4
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	89 10                	mov    DWORD PTR [eax],edx
c0028f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8e:	83 ec 0c             	sub    esp,0xc
c0028f91:	50                   	push   eax
c0028f92:	e8 c1 b8 fe ff       	call   c0014858 <FPU::~FPU()>
c0028f97:	83 c4 10             	add    esp,0x10
c0028f9a:	90                   	nop
c0028f9b:	83 c4 0c             	add    esp,0xc
c0028f9e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fa0 <SSE::~SSE()>:
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	83 ec 0c             	sub    esp,0xc
c0028fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028faa:	e8 cd ff ff ff       	call   c0028f7c <SSE::~SSE()>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	83 ec 08             	sub    esp,0x8
c0028fb5:	68 58 01 00 00       	push   0x158
c0028fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbe:	e8 57 9e fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0028fc3:	83 c4 10             	add    esp,0x10
c0028fc6:	83 c4 0c             	add    esp,0xc
c0028fc9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028fca <x87::~x87()>:
c0028fca:	83 ec 0c             	sub    esp,0xc
c0028fcd:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c0028fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd6:	89 10                	mov    DWORD PTR [eax],edx
c0028fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdc:	83 ec 0c             	sub    esp,0xc
c0028fdf:	50                   	push   eax
c0028fe0:	e8 73 b8 fe ff       	call   c0014858 <FPU::~FPU()>
c0028fe5:	83 c4 10             	add    esp,0x10
c0028fe8:	90                   	nop
c0028fe9:	83 c4 0c             	add    esp,0xc
c0028fec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028fee <x87::~x87()>:
c0028fee:	83 ec 0c             	sub    esp,0xc
c0028ff1:	83 ec 0c             	sub    esp,0xc
c0028ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff8:	e8 cd ff ff ff       	call   c0028fca <x87::~x87()>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	83 ec 08             	sub    esp,0x8
c0029003:	68 58 01 00 00       	push   0x158
c0029008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900c:	e8 09 9e fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0029011:	83 c4 10             	add    esp,0x10
c0029014:	83 c4 0c             	add    esp,0xc
c0029017:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029018 <IOAPIC::~IOAPIC()>:
c0029018:	83 ec 0c             	sub    esp,0xc
c002901b:	ba 8c d1 02 c0       	mov    edx,0xc002d18c
c0029020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029024:	89 10                	mov    DWORD PTR [eax],edx
c0029026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902a:	83 ec 0c             	sub    esp,0xc
c002902d:	50                   	push   eax
c002902e:	e8 bf b1 fe ff       	call   c00141f2 <Device::~Device()>
c0029033:	83 c4 10             	add    esp,0x10
c0029036:	90                   	nop
c0029037:	83 c4 0c             	add    esp,0xc
c002903a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002903c <IOAPIC::~IOAPIC()>:
c002903c:	83 ec 0c             	sub    esp,0xc
c002903f:	83 ec 0c             	sub    esp,0xc
c0029042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029046:	e8 cd ff ff ff       	call   c0029018 <IOAPIC::~IOAPIC()>
c002904b:	83 c4 10             	add    esp,0x10
c002904e:	83 ec 08             	sub    esp,0x8
c0029051:	68 68 01 00 00       	push   0x168
c0029056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905a:	e8 bb 9d fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c002905f:	83 c4 10             	add    esp,0x10
c0029062:	83 c4 0c             	add    esp,0xc
c0029065:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029066 <APIC::~APIC()>:
c0029066:	83 ec 0c             	sub    esp,0xc
c0029069:	ba 44 d1 02 c0       	mov    edx,0xc002d144
c002906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029072:	89 10                	mov    DWORD PTR [eax],edx
c0029074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029078:	83 ec 0c             	sub    esp,0xc
c002907b:	50                   	push   eax
c002907c:	e8 a1 bc fe ff       	call   c0014d22 <InterruptController::~InterruptController()>
c0029081:	83 c4 10             	add    esp,0x10
c0029084:	90                   	nop
c0029085:	83 c4 0c             	add    esp,0xc
c0029088:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002908a <APIC::~APIC()>:
c002908a:	83 ec 0c             	sub    esp,0xc
c002908d:	83 ec 0c             	sub    esp,0xc
c0029090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029094:	e8 cd ff ff ff       	call   c0029066 <APIC::~APIC()>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	83 ec 08             	sub    esp,0x8
c002909f:	68 58 21 00 00       	push   0x2158
c00290a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a8:	e8 6d 9d fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00290ad:	83 c4 10             	add    esp,0x10
c00290b0:	83 c4 0c             	add    esp,0xc
c00290b3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290b4 <PIC::~PIC()>:
c00290b4:	83 ec 0c             	sub    esp,0xc
c00290b7:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c00290bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c0:	89 10                	mov    DWORD PTR [eax],edx
c00290c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c6:	83 ec 0c             	sub    esp,0xc
c00290c9:	50                   	push   eax
c00290ca:	e8 53 bc fe ff       	call   c0014d22 <InterruptController::~InterruptController()>
c00290cf:	83 c4 10             	add    esp,0x10
c00290d2:	90                   	nop
c00290d3:	83 c4 0c             	add    esp,0xc
c00290d6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00290d8 <PIC::~PIC()>:
c00290d8:	83 ec 0c             	sub    esp,0xc
c00290db:	83 ec 0c             	sub    esp,0xc
c00290de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e2:	e8 cd ff ff ff       	call   c00290b4 <PIC::~PIC()>
c00290e7:	83 c4 10             	add    esp,0x10
c00290ea:	83 ec 08             	sub    esp,0x8
c00290ed:	68 58 21 00 00       	push   0x2158
c00290f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f6:	e8 1f 9d fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c00290fb:	83 c4 10             	add    esp,0x10
c00290fe:	83 c4 0c             	add    esp,0xc
c0029101:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029102 <APICTimer::~APICTimer()>:
c0029102:	83 ec 0c             	sub    esp,0xc
c0029105:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c002910a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002910e:	89 10                	mov    DWORD PTR [eax],edx
c0029110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029114:	83 ec 0c             	sub    esp,0xc
c0029117:	50                   	push   eax
c0029118:	e8 61 db fe ff       	call   c0016c7e <Timer::~Timer()>
c002911d:	83 c4 10             	add    esp,0x10
c0029120:	90                   	nop
c0029121:	83 c4 0c             	add    esp,0xc
c0029124:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029126 <APICTimer::~APICTimer()>:
c0029126:	83 ec 0c             	sub    esp,0xc
c0029129:	83 ec 0c             	sub    esp,0xc
c002912c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029130:	e8 cd ff ff ff       	call   c0029102 <APICTimer::~APICTimer()>
c0029135:	83 c4 10             	add    esp,0x10
c0029138:	83 ec 08             	sub    esp,0x8
c002913b:	68 60 01 00 00       	push   0x160
c0029140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029144:	e8 d1 9c fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0029149:	83 c4 10             	add    esp,0x10
c002914c:	83 c4 0c             	add    esp,0xc
c002914f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029150 <PIT::~PIT()>:
c0029150:	83 ec 0c             	sub    esp,0xc
c0029153:	ba 80 d2 02 c0       	mov    edx,0xc002d280
c0029158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915c:	89 10                	mov    DWORD PTR [eax],edx
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	83 ec 0c             	sub    esp,0xc
c0029165:	50                   	push   eax
c0029166:	e8 13 db fe ff       	call   c0016c7e <Timer::~Timer()>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	90                   	nop
c002916f:	83 c4 0c             	add    esp,0xc
c0029172:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029174 <PIT::~PIT()>:
c0029174:	83 ec 0c             	sub    esp,0xc
c0029177:	83 ec 0c             	sub    esp,0xc
c002917a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917e:	e8 cd ff ff ff       	call   c0029150 <PIT::~PIT()>
c0029183:	83 c4 10             	add    esp,0x10
c0029186:	83 ec 08             	sub    esp,0x8
c0029189:	68 5c 01 00 00       	push   0x15c
c002918e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029192:	e8 83 9c fe ff       	call   c0012e1a <operator delete(void*, unsigned long)>
c0029197:	83 c4 10             	add    esp,0x10
c002919a:	83 c4 0c             	add    esp,0xc
c002919d:	c3                   	ret    
